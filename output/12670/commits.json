[
  {
    "sha": "db1cbcc8563722500856df6dea552d51464d173e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjFjYmNjODU2MzcyMjUwMDg1NmRmNmRlYTU1MmQ1MTQ2NGQxNzNl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-02T19:41:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-08T13:59:28Z"
      },
      "message": "[RPC] Remove deprecated addmultisigaddress return format",
      "tree": {
        "sha": "75f88977f335c4940dde138d05dcadec39d1bf9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75f88977f335c4940dde138d05dcadec39d1bf9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db1cbcc8563722500856df6dea552d51464d173e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db1cbcc8563722500856df6dea552d51464d173e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb28a0b07f889a327731a86d7c13681c3007437f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb28a0b07f889a327731a86d7c13681c3007437f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb28a0b07f889a327731a86d7c13681c3007437f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "afad69615477cb825f993558da70f376c89a600b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db1cbcc8563722500856df6dea552d51464d173e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=db1cbcc8563722500856df6dea552d51464d173e",
        "patch": "@@ -1192,10 +1192,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nResult (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).\\n\"\n-            \"        clients should transition to the new output api before upgrading to v0.17.\\n\"\n-            \"\\\"address\\\"                         (string) A bitcoin address associated with the keys.\\n\"\n-\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n@@ -1238,11 +1234,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n-    // Return old style interface\n-    if (IsDeprecatedRPCEnabled(\"addmultisigaddress\")) {\n-        return EncodeDestination(dest);\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));"
      }
    ]
  },
  {
    "sha": "3843780fd8e0bed6a0813bbaf231664fac91964d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODQzNzgwZmQ4ZTBiZWQ2YTA4MTNiYmFmMjMxNjY0ZmFjOTE5NjRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:26:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:38:21Z"
      },
      "message": "Merge #12336: Remove deprecated rpc options\n\ndb1cbcc [RPC] Remove deprecated addmultisigaddress return format (John Newbery)\ncb28a0b [RPC] Remove deprecated createmultisig object (John Newbery)\ned45c82 [tests] Remove test for deprecated createmultsig option (John Newbery)\nd066a1c [rpc] Remove deprecated getmininginfo RPC option (John Newbery)\nc6f09c2 [rpc] remove deprecated estimatefee RPC (John Newbery)\na8e437a [tests] Remove estimatefee from rpc_deprecated.py test (John Newbery)\na5623b1 [tests] Remove tests for deprecated estimatefee RPC (John Newbery)\nd119f2e [tests] Fix style warnings in feature_fee_estimation.py (John Newbery)\n\nPull request description:\n\n  There were some RPC/RPC options deprecated in v0.16. Those can now be removed from master since v0.16 has been branched.\n\n  - `estimatefee` RPC has been removed. The `feature_fee_estimation.py` test has been updated to remove the RPC, but doesn't yet have good coverage of the replacement RPC `estimatesmartfee`. Improving the test coverage should be done in a new PR. (#11031)\n  - the `errors` field returned by `getmininginfo` has been deprecated and replaced by a `warning` field. (#10858)\n  - providing addresses as inputs to `createmultisig` has been deprecated. Users should use `addmultisigaddress` instead (#11415)\n  - The return format from `addmultisigaddress` has changed (#11415)\n\n  `getwitnessaddress` was also deprecated in v0.16 and can be removed, but many tests are using that RPC, so it's a larger job to remove. It should be removed in a separate PR (possibly after #11739 and #11398 have been merged and the segwit test code tidied up)\n\nTree-SHA512: 8ffaa5f6094131339b9e9e468e8b141de4b144697d2271efa2992b80b12eb97849ade3da8df5c1c9400ed4c04e6a029926550a3e5846d2029b644f9e84ac7124",
      "tree": {
        "sha": "ace86d61570a98d97aa5fbc65c7d11b97038bcc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ace86d61570a98d97aa5fbc65c7d11b97038bcc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafGDdAAoJEB5K7WKYbNJdu7MIAMFEuoT6SeQ07GGsoiCXrbKx\njWKz2Y1qW4gcGD3FrR913/TwLSafJ0vDSEs8eyXUE3jGuZiYamr4NC07Oe981EQt\nRwyl2yMGv8gXGip9sWsHgtbcdw3NHwUZpenrwalJtDFcEASPijq+27gv8NSGPET5\nTxU58ZCXG7r8UGITKh0jwTXJwQBuZSK4sUHKFa1W5a8GGNCRWp9c63d6jq4gZrVP\nG/ppUjols36NxUJI0sk9IgPkYVgjP+f68y8q81PxbfiSzNKUHVzS4rxb0QAgtQre\n9tdajw0Z9SDD3lDe7U4CJ8azdmlXhzNv5ENiwdWUAjLGbil1/lkN/nqW198r4V4=\n=QxVo\n-----END PGP SIGNATURE-----",
        "payload": "tree ace86d61570a98d97aa5fbc65c7d11b97038bcc8\nparent b2645286745b77a8268d00497e0cbccecf42952c\nparent db1cbcc8563722500856df6dea552d51464d173e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518099980 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518100701 +0100\n\nMerge #12336: Remove deprecated rpc options\n\ndb1cbcc [RPC] Remove deprecated addmultisigaddress return format (John Newbery)\ncb28a0b [RPC] Remove deprecated createmultisig object (John Newbery)\ned45c82 [tests] Remove test for deprecated createmultsig option (John Newbery)\nd066a1c [rpc] Remove deprecated getmininginfo RPC option (John Newbery)\nc6f09c2 [rpc] remove deprecated estimatefee RPC (John Newbery)\na8e437a [tests] Remove estimatefee from rpc_deprecated.py test (John Newbery)\na5623b1 [tests] Remove tests for deprecated estimatefee RPC (John Newbery)\nd119f2e [tests] Fix style warnings in feature_fee_estimation.py (John Newbery)\n\nPull request description:\n\n  There were some RPC/RPC options deprecated in v0.16. Those can now be removed from master since v0.16 has been branched.\n\n  - `estimatefee` RPC has been removed. The `feature_fee_estimation.py` test has been updated to remove the RPC, but doesn't yet have good coverage of the replacement RPC `estimatesmartfee`. Improving the test coverage should be done in a new PR. (#11031)\n  - the `errors` field returned by `getmininginfo` has been deprecated and replaced by a `warning` field. (#10858)\n  - providing addresses as inputs to `createmultisig` has been deprecated. Users should use `addmultisigaddress` instead (#11415)\n  - The return format from `addmultisigaddress` has changed (#11415)\n\n  `getwitnessaddress` was also deprecated in v0.16 and can be removed, but many tests are using that RPC, so it's a larger job to remove. It should be removed in a separate PR (possibly after #11739 and #11398 have been merged and the segwit test code tidied up)\n\nTree-SHA512: 8ffaa5f6094131339b9e9e468e8b141de4b144697d2271efa2992b80b12eb97849ade3da8df5c1c9400ed4c04e6a029926550a3e5846d2029b644f9e84ac7124\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3843780fd8e0bed6a0813bbaf231664fac91964d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2645286745b77a8268d00497e0cbccecf42952c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2645286745b77a8268d00497e0cbccecf42952c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2645286745b77a8268d00497e0cbccecf42952c"
      },
      {
        "sha": "db1cbcc8563722500856df6dea552d51464d173e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db1cbcc8563722500856df6dea552d51464d173e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db1cbcc8563722500856df6dea552d51464d173e"
      }
    ],
    "stats": {
      "total": 257,
      "additions": 87,
      "deletions": 170
    },
    "files": [
      {
        "sha": "99c1242d8ad503e8021d45dd6d0acfa7bce95350",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -114,7 +114,6 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"pruneblockchain\", 0, \"height\" },\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n-    { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },"
      },
      {
        "sha": "69d0d12e864d194c11908c6a07c63327fa1bcc40",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 44,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -201,7 +201,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"            (string) DEPRECATED. Same as warnings. Only shown when bitcoind is started with -deprecatedrpc=getmininginfo\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmininginfo\", \"\")\n@@ -219,11 +218,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    if (IsDeprecatedRPCEnabled(\"getmininginfo\")) {\n-        obj.push_back(Pair(\"errors\",       GetWarnings(\"statusbar\")));\n-    } else {\n-        obj.push_back(Pair(\"warnings\",     GetWarnings(\"statusbar\")));\n-    }\n+    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n     return obj;\n }\n \n@@ -772,43 +767,8 @@ UniValue submitblock(const JSONRPCRequest& request)\n \n UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n-        throw std::runtime_error(\n-            \"estimatefee nblocks\\n\"\n-            \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n-            \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n-            \"as defined in BIP 141 (witness data is discounted).\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. nblocks     (numeric, required)\\n\"\n-            \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n-            \"\\n\"\n-            \"A negative value is returned if not enough transactions and blocks\\n\"\n-            \"have been observed to make an estimate.\\n\"\n-            \"-1 is always returned for nblocks == 1 as it is impossible to calculate\\n\"\n-            \"a fee that is high enough to get reliably included in the next block.\\n\"\n-            \"\\nExample:\\n\"\n-            + HelpExampleCli(\"estimatefee\", \"6\")\n-            );\n-\n-    if (!IsDeprecatedRPCEnabled(\"estimatefee\")) {\n-        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee is deprecated and will be fully removed in v0.17. \"\n-            \"To use estimatefee in v0.16, restart bitcoind with -deprecatedrpc=estimatefee.\\n\"\n-            \"Projects should transition to using estimatesmartfee before upgrading to v0.17\");\n-    }\n-\n-    RPCTypeCheck(request.params, {UniValue::VNUM});\n-\n-    int nBlocks = request.params[0].get_int();\n-    if (nBlocks < 1)\n-        nBlocks = 1;\n-\n-    CFeeRate feeRate = ::feeEstimator.estimateFee(nBlocks);\n-    if (feeRate == CFeeRate(0))\n-        return -1.0;\n-\n-    return ValueFromAmount(feeRate.GetFeePerK());\n+    throw JSONRPCError(RPC_METHOD_DEPRECATED, \"estimatefee was removed in v0.17.\\n\"\n+        \"Clients should use estimatesmartfee.\");\n }\n \n UniValue estimatesmartfee(const JSONRPCRequest& request)\n@@ -986,7 +946,7 @@ static const CRPCCommand commands[] =\n \n     { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      {\"nblocks\",\"address\",\"maxtries\"} },\n \n-    { \"util\",               \"estimatefee\",            &estimatefee,            {\"nblocks\"} },\n+    { \"hidden\",             \"estimatefee\",            &estimatefee,            {} },\n     { \"util\",               \"estimatesmartfee\",       &estimatesmartfee,       {\"conf_target\", \"estimate_mode\"} },\n \n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },"
      },
      {
        "sha": "e772f5653452b9f7524c31b65fd995d64b5fbd69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -262,9 +262,6 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n-            \"DEPRECATION WARNING: Using addresses with createmultisig is deprecated. Clients must\\n\"\n-            \"transition to using addmultisigaddress to create multisig addresses with addresses known\\n\"\n-            \"to the wallet before upgrading to v0.17. To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n@@ -297,15 +294,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n         if (IsHex(keys[i].get_str()) && (keys[i].get_str().length() == 66 || keys[i].get_str().length() == 130)) {\n             pubkeys.push_back(HexToPubKey(keys[i].get_str()));\n         } else {\n-#ifdef ENABLE_WALLET\n-            CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n-            if (IsDeprecatedRPCEnabled(\"createmultisig\") && EnsureWalletIsAvailable(pwallet, false)) {\n-                pubkeys.push_back(AddrToPubKey(pwallet, keys[i].get_str()));\n-            } else\n-#endif\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid public key: %s\\nNote that from v0.16, createmultisig no longer accepts addresses.\"\n-            \" Clients must transition to using addmultisigaddress to create multisig addresses with addresses known to the wallet before upgrading to v0.17.\"\n-            \" To use the deprecated functionality, start bitcoind with -deprecatedrpc=createmultisig\", keys[i].get_str()));\n+            \" Users must use addmultisigaddress to create multisig addresses with addresses known to the wallet.\", keys[i].get_str()));\n         }\n     }\n "
      },
      {
        "sha": "efe81e98aa17c5c3409a8b402325e22b78a2c069",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -1192,10 +1192,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n             \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n             \"}\\n\"\n-            \"\\nResult (DEPRECATED. To see this result in v0.16 instead, please start bitcoind with -deprecatedrpc=addmultisigaddress).\\n\"\n-            \"        clients should transition to the new output api before upgrading to v0.17.\\n\"\n-            \"\\\"address\\\"                         (string) A bitcoin address associated with the keys.\\n\"\n-\n             \"\\nExamples:\\n\"\n             \"\\nAdd a multisig address from 2 addresses\\n\"\n             + HelpExampleCli(\"addmultisigaddress\", \"2 \\\"[\\\\\\\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\\\\\\\",\\\\\\\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\\\\\\\"]\\\"\") +\n@@ -1238,11 +1234,6 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n     CTxDestination dest = pwallet->AddAndGetDestinationForScript(inner, output_type);\n     pwallet->SetAddressBook(dest, strAccount, \"send\");\n \n-    // Return old style interface\n-    if (IsDeprecatedRPCEnabled(\"addmultisigaddress\")) {\n-        return EncodeDestination(dest);\n-    }\n-\n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));\n     result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n@@ -3260,8 +3251,8 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n             \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n             \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-            \"By default, the new fee will be calculated automatically using estimatefee.\\n\"\n-            \"The user can specify a confirmation target for estimatefee.\\n\"\n+            \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+            \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n             \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n             \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n             \"returned by getnetworkinfo) to enter the node's mempool.\\n\""
      },
      {
        "sha": "e1263414bde38959e3a973272117f6b07a86359a",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 69,
        "deletions": 92,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -3,39 +3,47 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n+from decimal import Decimal\n+import random\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    connect_nodes,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend\n # time signing.\n-redeem_script_1 = CScript([OP_1, OP_DROP])\n-redeem_script_2 = CScript([OP_2, OP_DROP])\n-P2SH_1 = CScript([OP_HASH160, hash160(redeem_script_1), OP_EQUAL])\n-P2SH_2 = CScript([OP_HASH160, hash160(redeem_script_2), OP_EQUAL])\n+REDEEM_SCRIPT_1 = CScript([OP_1, OP_DROP])\n+REDEEM_SCRIPT_2 = CScript([OP_2, OP_DROP])\n+P2SH_1 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_1), OP_EQUAL])\n+P2SH_2 = CScript([OP_HASH160, hash160(REDEEM_SCRIPT_2), OP_EQUAL])\n \n # Associated ScriptSig's to spend satisfy P2SH_1 and P2SH_2\n-SCRIPT_SIG = [CScript([OP_TRUE, redeem_script_1]), CScript([OP_TRUE, redeem_script_2])]\n-\n-global log\n+SCRIPT_SIG = [CScript([OP_TRUE, REDEEM_SCRIPT_1]), CScript([OP_TRUE, REDEEM_SCRIPT_2])]\n \n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n-    \"\"\"\n-    Create and send a transaction with a random fee.\n+    \"\"\"Create and send a transaction with a random fee.\n+\n     The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n     It adds the newly created outputs to the unconfirmed list.\n-    Returns (raw transaction, fee)\n-    \"\"\"\n+    Returns (raw transaction, fee).\"\"\"\n+\n     # It's best to exponentially distribute our random fees\n     # because the buckets are exponentially spaced.\n     # Exponentially distributed from 1-128 * fee_increment\n-    rand_fee = float(fee_increment)*(1.1892**random.randint(0,28))\n+    rand_fee = float(fee_increment) * (1.1892 ** random.randint(0, 28))\n     # Total fee ranges from min_fee to min_fee + 127*fee_increment\n     fee = min_fee - fee_increment + satoshi_round(rand_fee)\n     tx = CTransaction()\n@@ -50,95 +58,69 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n             total_in += t[\"amount\"]\n             tx.vin.append(CTxIn(COutPoint(int(t[\"txid\"], 16), t[\"vout\"]), b\"\"))\n         if total_in <= amount + fee:\n-            raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n-    tx.vout.append(CTxOut(int((total_in - amount - fee)*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(amount*COIN), P2SH_2))\n+            raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount + fee, total_in))\n+    tx.vout.append(CTxOut(int((total_in - amount - fee) * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(amount * COIN), P2SH_2))\n     # These transactions don't need to be signed, but we still have to insert\n     # the ScriptSig that will satisfy the ScriptPubKey.\n     for inp in tx.vin:\n         inp.scriptSig = SCRIPT_SIG[inp.prevout.n]\n     txid = from_node.sendrawtransaction(ToHex(tx), True)\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : total_in - amount - fee})\n-    unconflist.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : amount})\n+    unconflist.append({\"txid\": txid, \"vout\": 0, \"amount\": total_in - amount - fee})\n+    unconflist.append({\"txid\": txid, \"vout\": 1, \"amount\": amount})\n \n     return (ToHex(tx), fee)\n \n-def split_inputs(from_node, txins, txouts, initial_split = False):\n-    \"\"\"\n-    We need to generate a lot of inputs so we can generate a ton of transactions.\n+def split_inputs(from_node, txins, txouts, initial_split=False):\n+    \"\"\"Generate a lot of inputs so we can generate a ton of transactions.\n+\n     This function takes an input from txins, and creates and sends a transaction\n     which splits the value into 2 outputs which are appended to txouts.\n     Previously this was designed to be small inputs so they wouldn't have\n-    a high coin age when the notion of priority still existed.\n-    \"\"\"\n+    a high coin age when the notion of priority still existed.\"\"\"\n+\n     prevtxout = txins.pop()\n     tx = CTransaction()\n     tx.vin.append(CTxIn(COutPoint(int(prevtxout[\"txid\"], 16), prevtxout[\"vout\"]), b\"\"))\n \n-    half_change = satoshi_round(prevtxout[\"amount\"]/2)\n-    rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    tx.vout.append(CTxOut(int(half_change*COIN), P2SH_1))\n-    tx.vout.append(CTxOut(int(rem_change*COIN), P2SH_2))\n+    half_change = satoshi_round(prevtxout[\"amount\"] / 2)\n+    rem_change = prevtxout[\"amount\"] - half_change - Decimal(\"0.00001000\")\n+    tx.vout.append(CTxOut(int(half_change * COIN), P2SH_1))\n+    tx.vout.append(CTxOut(int(rem_change * COIN), P2SH_2))\n \n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n-    if (initial_split) :\n+    if (initial_split):\n         completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n-    else :\n+    else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)\n     txid = from_node.sendrawtransaction(completetx, True)\n-    txouts.append({ \"txid\" : txid, \"vout\" : 0 , \"amount\" : half_change})\n-    txouts.append({ \"txid\" : txid, \"vout\" : 1 , \"amount\" : rem_change})\n+    txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n+    txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n-def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n-    \"\"\"\n-    This function calls estimatefee and verifies that the estimates\n-    meet certain invariants.\n-    \"\"\"\n-    all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n-    if print_estimates:\n-        log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n-    delta = 1.0e-6 # account for rounding error\n-    last_e = max(fees_seen)\n-    for e in [x for x in all_estimates if x >= 0]:\n-        # Estimates should be within the bounds of what transactions fees actually were:\n-        if float(e)+delta < min(fees_seen) or float(e)-delta > max(fees_seen):\n+def check_estimates(node, fees_seen, max_invalid):\n+    \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n+\n+    delta = 1.0e-6  # account for rounding error\n+    last_feerate = float(max(fees_seen))\n+    all_smart_estimates = [node.estimatesmartfee(i) for i in range(1, 26)]\n+    for i, e in enumerate(all_smart_estimates):  # estimate is for i+1\n+        feerate = float(e[\"feerate\"])\n+        assert_greater_than(feerate, 0)\n+\n+        if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n             raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n-                                 %(float(e), min(fees_seen), max(fees_seen)))\n-        # Estimates should be monotonically decreasing\n-        if float(e)-delta > last_e:\n+                                 % (feerate, min(fees_seen), max(fees_seen)))\n+        if feerate - delta > last_feerate:\n             raise AssertionError(\"Estimated fee (%f) larger than last fee (%f) for lower number of confirms\"\n-                                 %(float(e),float(last_e)))\n-        last_e = e\n-    valid_estimate = False\n-    invalid_estimates = 0\n-    for i,e in enumerate(all_estimates): # estimate is for i+1\n-        if e >= 0:\n-            valid_estimate = True\n-            if i >= 13:  # for n>=14 estimatesmartfee(n/2) should be at least as high as estimatefee(n)\n-                assert(node.estimatesmartfee((i+1)//2)[\"feerate\"] > float(e) - delta)\n+                                 % (feerate, last_feerate))\n+        last_feerate = feerate\n \n+        if i == 0:\n+            assert_equal(e[\"blocks\"], 2)\n         else:\n-            invalid_estimates += 1\n-\n-            # estimatesmartfee should still be valid\n-            approx_estimate = node.estimatesmartfee(i+1)[\"feerate\"]\n-            answer_found = node.estimatesmartfee(i+1)[\"blocks\"]\n-            assert(approx_estimate > 0)\n-            assert(answer_found > i+1)\n-\n-            # Once we're at a high enough confirmation count that we can give an estimate\n-            # We should have estimates for all higher confirmation counts\n-            if valid_estimate:\n-                raise AssertionError(\"Invalid estimate appears at higher confirm count than valid estimate\")\n-\n-    # Check on the expected number of different confirmation counts\n-    # that we might not have valid estimates for\n-    if invalid_estimates > max_invalid:\n-        raise AssertionError(\"More than (%d) invalid estimates\"%(max_invalid))\n-    return all_estimates\n-\n+            assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -151,7 +133,7 @@ def setup_network(self):\n         which we will use to generate our transactions.\n         \"\"\"\n         self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\", \"-deprecatedrpc=estimatefee\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n                                       [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n@@ -160,7 +142,6 @@ def setup_network(self):\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n \n-\n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n         # We will now mine numblocks blocks generating on average 100 transactions between each block\n@@ -169,14 +150,14 @@ def transact_and_mine(self, numblocks, mining_node):\n         # resorting to tx's that depend on the mempool when those run out\n         for i in range(numblocks):\n             random.shuffle(self.confutxo)\n-            for j in range(random.randrange(100-50,100+50)):\n-                from_index = random.randint(1,2)\n+            for j in range(random.randrange(100 - 50, 100 + 50)):\n+                from_index = random.randint(1, 2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n                 tx_kbytes = (len(txhex) // 2) / 1000.0\n-                self.fees_per_kb.append(float(fee)/tx_kbytes)\n+                self.fees_per_kb.append(float(fee) / tx_kbytes)\n             sync_mempools(self.nodes[0:3], wait=.1)\n-            mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n+            mined = mining_node.getblock(mining_node.generate(1)[0], True)[\"tx\"]\n             sync_blocks(self.nodes[0:3], wait=.1)\n             # update which txouts are confirmed\n             newmem = []\n@@ -191,10 +172,6 @@ def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n \n-        # Make log handler available to helper functions\n-        global log\n-        log = self.log\n-\n         # Start node0\n         self.start_node(0)\n         self.txouts = []\n@@ -210,13 +187,13 @@ def run_test(self):\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n+            # Double txouts to txouts2\n+            while (len(self.txouts) > 0):\n                 split_inputs(self.nodes[0], self.txouts, self.txouts2)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n+            # Double txouts2 to txouts\n+            while (len(self.txouts2) > 0):\n                 split_inputs(self.nodes[0], self.txouts2, self.txouts)\n             while (len(self.nodes[0].getrawmempool()) > 0):\n                 self.nodes[0].generate(1)\n@@ -235,7 +212,7 @@ def run_test(self):\n \n         self.fees_per_kb = []\n         self.memutxo = []\n-        self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting\n+        self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n         self.log.info(\"Will output estimates for 1/2/3/6/15/25 blocks\")\n \n         for i in range(2):"
      },
      {
        "sha": "90183474bbd24dddb549245844134de24f913dd1",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3843780fd8e0bed6a0813bbaf231664fac91964d/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=3843780fd8e0bed6a0813bbaf231664fac91964d",
        "patch": "@@ -4,24 +4,24 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], [\"-deprecatedrpc=estimatefee\", \"-deprecatedrpc=createmultisig\"]]\n+        self.extra_args = [[], []]\n \n     def run_test(self):\n-        self.log.info(\"estimatefee: Shows deprecated message\")\n-        assert_raises_rpc_error(-32, 'estimatefee is deprecated', self.nodes[0].estimatefee, 1)\n-\n-        self.log.info(\"Using -deprecatedrpc=estimatefee bypasses the error\")\n-        self.nodes[1].estimatefee(1)\n-\n-        self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n-        assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n-        self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        # This test should be used to verify correct behaviour of deprecated\n+        # RPC methods with and without the -deprecatedrpc flags. For example:\n+        #\n+        # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n+        # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n+        # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n+        #\n+        # There are currently no deprecated RPC methods in master, so this\n+        # test is currently empty.\n+        pass\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzVlYjhkZTAzOWRlYzY1NjY5YTk2YTFjM2I4NmY0YjAzYTFiODZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-08T14:52:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-08T14:52:07Z"
      },
      "message": "Merge #12295: Enable flake8 warnings for all currently non-violated rules\n\na9d0ebc262 Enable flake8 warnings for all currently non-violated rules (practicalswift)\n4cbab15e75 tests: Fix accidental redefinition of previously defined variable via list comprehension (practicalswift)\n0b9207efbe Enable flake8 warning for \"list comprehension redefines 'foo' from line N\" (F812) (practicalswift)\n\nPull request description:\n\n  * Enable `flake8` warnings for all currently non-violated rules\n  * Fix accidental redefinition via list comprehension\n\nTree-SHA512: 738b87789e99d02abb2c6b8ff58f65c0cbfeb93e3bf320763e033e510ebd0a4f72861bc8faaf42c14a056a5d4659c33dc70a63730a32cc15159559427bf21193",
      "tree": {
        "sha": "6cafd35f0b2035b79a1bb96557c3112893ee0a72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cafd35f0b2035b79a1bb96557c3112893ee0a72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJafGQXAAoJENLqSFDnUosleHUP/R8FxamaiJeM/eWt3mSOG5nj\ngCinwP03yJ25cz1t/o/rwjjHE0ZOTxwQn7rYw/v4E8Hyi1LiEDOYI4LFU8U0izM2\nHjzON0vT4lN6nn3mgb+qnBznyVKPldeNdpvU2vkIkbPCvt7kWzGk4+n28M7oQdSk\nP7+gtolJLTini7HFHPO01a2qT5T364EF90SPwK4UvJLDKyJ34LtkOlDLu9rf4+rg\n91u2n7Ay09caLXYQRS82fTPvMJAB+zYawDYkbgen6Y5fnbN3rkzs5xdAeTZF638E\n6LidKUWlx1xF56+XMRVZGnY3WadI30oBCU0SqFnawCID+9X1w5R382Wjf9X1ygsy\neqLL4kwPB2YjFp34QujsK+GUVQXk7lybAXIJa+Y6yYE0HE2cgpVCehXDfkOEYyjl\ns19QIFMERTK5UzE43SfQMFSvM0716R42gNjgsxXmAQXWE+d235CN3E7xMkP8pA6o\n9Gwwpm4UncjJtxLyg6OMecdf3Z4TJB8rl0K/OG7gQirmpsVb0ltK2UNXK01lwLD9\n4YWQT72zpD2pOTU80UYqhFzFANucg7ssxZQySIjgroxSClFHbRROaRR2JYDIV2ad\noaH1lKM9MJVMhctWH9l/Y1zIZqq/l9Dy+9d423kePfJIQgc/mjXR1gSet0XoEh6T\n8a5CgEZyG1ahiaXBzwg/\n=D1N7\n-----END PGP SIGNATURE-----",
        "payload": "tree 6cafd35f0b2035b79a1bb96557c3112893ee0a72\nparent 3843780fd8e0bed6a0813bbaf231664fac91964d\nparent a9d0ebc26207b4771b7c240ca0c516debd330985\nauthor MarcoFalke <falke.marco@gmail.com> 1518101521 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518101527 -0500\n\nMerge #12295: Enable flake8 warnings for all currently non-violated rules\n\na9d0ebc262 Enable flake8 warnings for all currently non-violated rules (practicalswift)\n4cbab15e75 tests: Fix accidental redefinition of previously defined variable via list comprehension (practicalswift)\n0b9207efbe Enable flake8 warning for \"list comprehension redefines 'foo' from line N\" (F812) (practicalswift)\n\nPull request description:\n\n  * Enable `flake8` warnings for all currently non-violated rules\n  * Fix accidental redefinition via list comprehension\n\nTree-SHA512: 738b87789e99d02abb2c6b8ff58f65c0cbfeb93e3bf320763e033e510ebd0a4f72861bc8faaf42c14a056a5d4659c33dc70a63730a32cc15159559427bf21193\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3843780fd8e0bed6a0813bbaf231664fac91964d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3843780fd8e0bed6a0813bbaf231664fac91964d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3843780fd8e0bed6a0813bbaf231664fac91964d"
      },
      {
        "sha": "a9d0ebc26207b4771b7c240ca0c516debd330985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9d0ebc26207b4771b7c240ca0c516debd330985",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9d0ebc26207b4771b7c240ca0c516debd330985"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 58,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e2c9d775a64cda487663c4e51dca48aaac1a2e4c",
        "filename": "contrib/devtools/lint-python.sh",
        "status": "modified",
        "additions": 55,
        "deletions": 2,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935eb8de039dec65669a96a1c3b86f4b03a1b86c/contrib/devtools/lint-python.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935eb8de039dec65669a96a1c3b86f4b03a1b86c/contrib/devtools/lint-python.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-python.sh?ref=935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "patch": "@@ -6,5 +6,58 @@\n #\n # Check for specified flake8 warnings in python files.\n \n-# F401: module imported but unused\n-flake8 --ignore=B,C,E,F,I,N,W --select=F401 .\n+# E112 expected an indented block\n+# E113 unexpected indentation\n+# E115 expected an indented block (comment)\n+# E116 unexpected indentation (comment)\n+# E125 continuation line with same indent as next logical line\n+# E131 continuation line unaligned for hanging indent\n+# E133 closing bracket is missing indentation\n+# E223 tab before operator\n+# E224 tab after operator\n+# E271 multiple spaces after keyword\n+# E272 multiple spaces before keyword\n+# E273 tab after keyword\n+# E274 tab before keyword\n+# E275 missing whitespace after keyword\n+# E304 blank lines found after function decorator\n+# E306 expected 1 blank line before a nested definition\n+# E502 the backslash is redundant between brackets\n+# E702 multiple statements on one line (semicolon)\n+# E703 statement ends with a semicolon\n+# E714 test for object identity should be \"is not\"\n+# E721 do not compare types, use \"isinstance()\"\n+# E741 do not use variables named \"l\", \"O\", or \"I\"\n+# E742 do not define classes named \"l\", \"O\", or \"I\"\n+# E743 do not define functions named \"l\", \"O\", or \"I\"\n+# F401 module imported but unused\n+# F402 import module from line N shadowed by loop variable\n+# F404 future import(s) name after other statements\n+# F406 \"from module import *\" only allowed at module level\n+# F407 an undefined __future__ feature name was imported\n+# F601 dictionary key name repeated with different values\n+# F602 dictionary key variable name repeated with different values\n+# F621 too many expressions in an assignment with star-unpacking\n+# F622 two or more starred expressions in an assignment (a, *b, *c = d)\n+# F631 assertion test is a tuple, which are always True\n+# F701 a break statement outside of a while or for loop\n+# F702 a continue statement outside of a while or for loop\n+# F703 a continue statement in a finally block in a loop\n+# F704 a yield or yield from statement outside of a function\n+# F705 a return statement with arguments inside a generator\n+# F706 a return statement outside of a function/method\n+# F707 an except: block as not the last exception handler\n+# F811 redefinition of unused name from line N\n+# F812 list comprehension redefines 'foo' from line N\n+# F822 undefined name name in __all__\n+# F823 local variable name \u2026 referenced before assignment\n+# F831 duplicate argument name in function definition\n+# W292 no newline at end of file\n+# W504 line break after binary operator\n+# W601 .has_key() is deprecated, use \"in\"\n+# W602 deprecated form of raising exception\n+# W603 \"<>\" is deprecated, use \"!=\"\n+# W604 backticks are deprecated, use \"repr()\"\n+# W605 invalid escape sequence \"x\"\n+\n+flake8 --ignore=B,C,E,F,I,N,W --select=E112,E113,E115,E116,E125,E131,E133,E223,E224,E271,E272,E273,E274,E275,E304,E306,E502,E702,E703,E714,E721,E741,E742,E743,F401,F402,F404,F406,F407,F601,F602,F621,F622,F631,F701,F702,F703,F704,F705,F706,F707,F811,F812,F822,F823,F831,W292,W504,W601,W602,W603,W604,W605 ."
      },
      {
        "sha": "6b9c9c15b77081b2571cb73e94c765b7dba92bee",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935eb8de039dec65669a96a1c3b86f4b03a1b86c/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935eb8de039dec65669a96a1c3b86f4b03a1b86c/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "patch": "@@ -223,8 +223,8 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': None})\n         assert_raises_rpc_error(-5, \"Unknown change type\", self.nodes[2].fundrawtransaction, rawtx, {'change_type': ''})\n         rawtx = self.nodes[2].fundrawtransaction(rawtx, {'change_type': 'bech32'})\n-        tx  = self.nodes[2].decoderawtransaction(rawtx['hex'])\n-        assert_equal('witness_v0_keyhash', tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n+        dec_tx = self.nodes[2].decoderawtransaction(rawtx['hex'])\n+        assert_equal('witness_v0_keyhash', dec_tx['vout'][rawtx['changepos']]['scriptPubKey']['type'])\n \n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n@@ -676,7 +676,7 @@ def run_test(self):\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee}),\n                   self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 2*min_relay_tx_fee, \"subtractFeeFromOutputs\": [0]})]\n \n-        dec_tx = [self.nodes[3].decoderawtransaction(tx['hex']) for tx in result]\n+        dec_tx = [self.nodes[3].decoderawtransaction(tx_['hex']) for tx_ in result]\n         output = [d['vout'][1 - r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n         change = [d['vout'][r['changepos']]['value'] for d, r in zip(dec_tx, result)]\n "
      }
    ]
  },
  {
    "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjM5MTFlZDU4MWQyYWI0MGY0OWZkYzIzMmYxODlkOTIyNjRkNDVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T14:57:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T15:32:15Z"
      },
      "message": "Merge #12282: wallet: Disallow abandon of conflicted txes\n\nfa795cf wallet: Disallow abandon of conflicted txes (MarcoFalke)\n\nPull request description:\n\n  Abandon transactions that are already conflicted is a noop, so don't try and return false/throw instead.\n\nTree-SHA512: fd2af4149bd2323f7f31fe18685c763790b8589319b4e467b464ab456d5e8971501ab16d124e57a22693666b06ae433ac3e59f0fd6dfbd2be2c6cae8be5bcbd8",
      "tree": {
        "sha": "ef564d9e046c13c835ac93702a070eb2c1476f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef564d9e046c13c835ac93702a070eb2c1476f88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafG1/AAoJEB5K7WKYbNJdgbcH/iOSyaYeQqo9lZzhS74uB/2d\n8ygebUVXEHffFQShyJ3d5yLOeqZJ0CAHSGkMv0l8nDyHPCkkzXit4yeW3aN2WfE1\nFa4GcGLEqbeBVCLBxAyOHEnqWe7wrEZC3r7HK2QdK6wyJCLsVsEid0exQyyJk2QI\nH0ZyanjkOlF/ndZZaDfnfy+nwh8i7AxTHlg/xHXYBkakJPQ99OaEcHKqYe40Gk4k\nzQbyzwSRA6M4RQ8HVp5Avynb50m7soXs2+dWKgdPPTkbY3DanQuCfgCRUHOd4jKe\nHbKyaLZHC0GE3ykWkemG0w0V/tV1vJsBnF//c1bTCE1P1QqkF8dz/uXYLbeVaJo=\n=1+ZJ\n-----END PGP SIGNATURE-----",
        "payload": "tree ef564d9e046c13c835ac93702a070eb2c1476f88\nparent 935eb8de039dec65669a96a1c3b86f4b03a1b86c\nparent fa795cf9c52b82cc3cccd21483360d6e03f767f0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518101828 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518103935 +0100\n\nMerge #12282: wallet: Disallow abandon of conflicted txes\n\nfa795cf wallet: Disallow abandon of conflicted txes (MarcoFalke)\n\nPull request description:\n\n  Abandon transactions that are already conflicted is a noop, so don't try and return false/throw instead.\n\nTree-SHA512: fd2af4149bd2323f7f31fe18685c763790b8589319b4e467b464ab456d5e8971501ab16d124e57a22693666b06ae433ac3e59f0fd6dfbd2be2c6cae8be5bcbd8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935eb8de039dec65669a96a1c3b86f4b03a1b86c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/935eb8de039dec65669a96a1c3b86f4b03a1b86c"
      },
      {
        "sha": "fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa795cf9c52b82cc3cccd21483360d6e03f767f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa795cf9c52b82cc3cccd21483360d6e03f767f0"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 19,
      "deletions": 9
    },
    "files": [
      {
        "sha": "261d9b37f58076c19b26df96a4d931ea4ab2ca2c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -2184,21 +2184,22 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1) {\n         throw std::runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n             \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n             \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n-            \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n+            \"It has no effect on transactions which are already abandoned.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n+    }\n \n     ObserveSafeMode();\n "
      },
      {
        "sha": "1b3a3ee50f0020daeac12c1657c81cc096a2b05b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -1078,7 +1078,7 @@ bool CWallet::TransactionCanBeAbandoned(const uint256& hashTx) const\n {\n     LOCK2(cs_main, cs_wallet);\n     const CWalletTx* wtx = GetWalletTx(hashTx);\n-    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() <= 0 && !wtx->InMempool();\n+    return wtx && !wtx->isAbandoned() && wtx->GetDepthInMainChain() == 0 && !wtx->InMempool();\n }\n \n bool CWallet::AbandonTransaction(const uint256& hashTx)\n@@ -1094,7 +1094,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n     auto it = mapWallet.find(hashTx);\n     assert(it != mapWallet.end());\n     CWalletTx& origtx = it->second;\n-    if (origtx.GetDepthInMainChain() > 0 || origtx.InMempool()) {\n+    if (origtx.GetDepthInMainChain() != 0 || origtx.InMempool()) {\n         return false;\n     }\n "
      },
      {
        "sha": "8fb860cd7e9cfa141ef13ece581ab88b87c1b5e4",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -8,11 +8,12 @@\n  descendants as abandoned which allows their inputs to be respent. It can be\n  used to replace \"stuck\" or evicted transactions. It only works on transactions\n  which are not included in a block and are not currently in the mempool. It has\n- no effect on transactions which are already conflicted or abandoned.\n+ no effect on transactions which are already abandoned.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n+\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -28,6 +29,11 @@ def run_test(self):\n         sync_mempools(self.nodes)\n         self.nodes[1].generate(1)\n \n+        # Can not abandon non-wallet transaction\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', lambda: self.nodes[0].abandontransaction(txid='ff' * 32))\n+        # Can not abandon confirmed transaction\n+        assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: self.nodes[0].abandontransaction(txid=txA))\n+\n         sync_blocks(self.nodes)\n         newbalance = self.nodes[0].getbalance()\n         assert(balance - newbalance < Decimal(\"0.001\")) #no more than fees lost"
      },
      {
        "sha": "f621d41b4e521eb565e024924aeec1300758c9cc",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/663911ed581d2ab40f49fdc232f189d92264d45a/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=663911ed581d2ab40f49fdc232f189d92264d45a",
        "patch": "@@ -231,13 +231,16 @@ def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):\n     assert_equal([t for t in rbf_node.listunspent(minconf=0, include_unsafe=False) if t[\"txid\"] == bumpid], [])\n \n     # submit a block with the rbf tx to clear the bump tx out of the mempool,\n-    # then call abandon to make sure the wallet doesn't attempt to resubmit the\n-    # bump tx, then invalidate the block so the rbf tx will be put back in the\n-    # mempool. this makes it possible to check whether the rbf tx outputs are\n+    # then invalidate the block so the rbf tx will be put back in the mempool.\n+    # This makes it possible to check whether the rbf tx outputs are\n     # spendable before the rbf tx is confirmed.\n     block = submit_block_with_tx(rbf_node, rbftx)\n-    rbf_node.abandontransaction(bumpid)\n+    # Can not abandon conflicted tx\n+    assert_raises_rpc_error(-5, 'Transaction not eligible for abandonment', lambda: rbf_node.abandontransaction(txid=bumpid))\n     rbf_node.invalidateblock(block.hash)\n+    # Call abandon to make sure the wallet doesn't attempt to resubmit\n+    # the bump tx and hope the wallet does not rebroadcast before we call.\n+    rbf_node.abandontransaction(bumpid)\n     assert bumpid not in rbf_node.getrawmempool()\n     assert rbfid in rbf_node.getrawmempool()\n "
      }
    ]
  },
  {
    "sha": "c04e0f607a305092f336f3a77a91f9e23463943e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDRlMGY2MDdhMzA1MDkyZjMzNmYzYTc3YTkxZjllMjM0NjM5NDNl",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-05T15:53:33Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T15:50:13Z"
      },
      "message": "Fix 'mempool min fee not met' debug output\n\nOutput the value that is tested, rather than the unmodified fee value.",
      "tree": {
        "sha": "406bab9c5bb2485d7acf93722e2c6892f1501256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/406bab9c5bb2485d7acf93722e2c6892f1501256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHG1AAoJEG7l83hfeLNFw5QH/ilFCbWNLCdu//zFLum6/1BL\nYzPtIhL5bM6XZ6EyIal7npbSYMh9PDVOtXpoqcnPpRCMa6bJP13TsOCrM9AN4hEK\nWqwI1Th6SOzxAfMz1WYJLwGDD/gX8GFoLY5/vT5LJ33QayIIAbJx7bD39ZIWb9Ch\n7s3ndsx+yLpFnZM2xwdgIUQ4e5HPvM0gegeI3ckIWR1WM86f3eJlW+yvYLiM8mEe\nXM41TO6G9b3lZWryJCI8HsqLKGYeNjUB/JMzTAtFARQq4c9k7IhlP3N0/wna75yL\nPrmBEn1p04M0U9OY4S1AiaO1XVZEvVzEVyzHStjLbTsJKZquZSwCvENHO5LJvn0=\n=EkE5\n-----END PGP SIGNATURE-----",
        "payload": "tree 406bab9c5bb2485d7acf93722e2c6892f1501256\nparent 663911ed581d2ab40f49fdc232f189d92264d45a\nauthor Ben Woosley <ben.woosley@gmail.com> 1517846013 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105013 -0500\n\nFix 'mempool min fee not met' debug output\n\nOutput the value that is tested, rather than the unmodified fee value.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c04e0f607a305092f336f3a77a91f9e23463943e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "35f35e19d742282f578c2640c4cc4e8c09824af0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c04e0f607a305092f336f3a77a91f9e23463943e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c04e0f607a305092f336f3a77a91f9e23463943e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c04e0f607a305092f336f3a77a91f9e23463943e",
        "patch": "@@ -712,7 +712,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks"
      }
    ]
  },
  {
    "sha": "8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjhhMWM0ZjhiMTBjZTk2ZmUzODI2YWIyOGI4Mjg1OGQ0ZWY5Y2Yy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-06T02:00:57Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T16:01:53Z"
      },
      "message": "Add test for 'mempool min fee not met' rpc error",
      "tree": {
        "sha": "26824c4ef396ba926cb5c3d03cfbee65d72729c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26824c4ef396ba926cb5c3d03cfbee65d72729c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHRzAAoJEG7l83hfeLNFoAEIAKEcKA2Aur7mm1SW9puuxFV5\nohBJK/U4sIFh7LZiPY8qNw2Z4zrKcb3r6/kANA8FLo7Lwg50ArHy4vROkcCOhT0P\niPpnrrVSkmXFQA4IdQuAC9/w8TQNxBreh/LfBmecNX5Yby+sK3VBWaufR2GiTqlQ\n8DGBJKOvv9ZKpa/hDlebwSJDMkxryGKHpV5O3s5769Q0Aohvt+qgjyaIM813rWT1\ngsKkVat7DsKuamGGqC0pq4pqRmnfRndRQXgb/TZV7FXVJEFbeYCMl5/wW48lWV0n\nWy60ev239oD/d5tnlpSw4aL/DJ+OBqbi776U+i+Qp3y7Qxfum/wZd0qIt9Iqfrs=\n=DWxD\n-----END PGP SIGNATURE-----",
        "payload": "tree 26824c4ef396ba926cb5c3d03cfbee65d72729c7\nparent c04e0f607a305092f336f3a77a91f9e23463943e\nauthor Ben Woosley <ben.woosley@gmail.com> 1517882457 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105713 -0500\n\nAdd test for 'mempool min fee not met' rpc error\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c04e0f607a305092f336f3a77a91f9e23463943e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c04e0f607a305092f336f3a77a91f9e23463943e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c04e0f607a305092f336f3a77a91f9e23463943e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1385271e6d2d567978b1ec1b2e29b4228c2cce0b",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "patch": "@@ -50,5 +50,15 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n+        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n+        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        assert_raises_rpc_error(-26, \"66: mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjAwYzk1YzE2ZjUwYzVkZmFiMWFhOGZiYjZjODczMzE4YTZhY2M4",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-06T23:47:51Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-08T16:02:41Z"
      },
      "message": "Consistently use FormatStateMessage in RPC error output\n\nThis will include the error code and debug output as well as the reason string.\n\nSee #11955 for the motivation.",
      "tree": {
        "sha": "690d0a1dda3b3be64c6cb3200df795db58c992b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/690d0a1dda3b3be64c6cb3200df795db58c992b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJafHSiAAoJEG7l83hfeLNF9WMH/3erTI9EljQ+uB6/VtVvn368\noMbFd+i7dAX1SaMzcNPNn9s8Zem3iUo4G/usX8TpiZJlFK5gaQoELjMO5i46URSH\np6u/cHqYdQE/KASh1A8sJSbKCvRHA3aj/pDkqYnuLZt8bnDxa7pxwMhqfaLgHKQi\n4716qe9b79jqU1CfPLUno+IW7gQQHi/KwHzo7Ea+f6y7XPHXewdz/Z6WhENOw+iJ\nFeQ8wmd4ygmNcrzNulc1gkea9fD16lw4ADHn2WgucktUl93BztT45CJPUzk9wFtO\nhQCsv7WE0AaQeFsVu5uum3VCwVU0GI3WauL2JMrXw98oD6ibDGX0lJjp6TDamJ0=\n=TlHb\n-----END PGP SIGNATURE-----",
        "payload": "tree 690d0a1dda3b3be64c6cb3200df795db58c992b9\nparent 8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2\nauthor Ben Woosley <ben.woosley@gmail.com> 1517960871 -0500\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518105761 -0500\n\nConsistently use FormatStateMessage in RPC error output\n\nThis will include the error code and debug output as well as the reason string.\n\nSee #11955 for the motivation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b8a1c4f8b10ce96fe3826ab28b82858d4ef9cf2"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 15,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c880991b59561bdca21f1b7bdd83e5ca711fc941",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -1434,7 +1434,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1472,7 +1472,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1509,7 +1509,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1563,7 +1563,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             pindex = chainActive.Tip();\n         }\n     }\n-    \n+\n     assert(pindex != nullptr);\n \n     if (request.params[0].isNull()) {"
      },
      {
        "sha": "32f8ca0c716c622802b14c70a39a57e2e2247e45",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -264,11 +264,11 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     if (state.IsValid())\n         return NullUniValue;\n \n-    std::string strRejectReason = state.GetRejectReason();\n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n+        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n     if (state.IsInvalid())\n     {\n+        std::string strRejectReason = state.GetRejectReason();\n         if (strRejectReason.empty())\n             return \"rejected\";\n         return strRejectReason;"
      },
      {
        "sha": "85709256fdc50f0094768d4c7c06970eb3e85ebd",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -981,12 +981,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n             } else {\n                 if (fMissingInputs) {\n                     throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n                 }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware"
      },
      {
        "sha": "ebf30fe03b3d6300fb22747811d701012f99c905",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -267,7 +267,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     CValidationState state;\n     if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;\n     }\n \n@@ -290,4 +290,3 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n }\n \n } // namespace feebumper\n-"
      },
      {
        "sha": "a82afcf2a013bc2e223bcead727b635d9863386e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -435,7 +435,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     }\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n-        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n }\n@@ -1155,7 +1155,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n-        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "4a022fa5620dc03a8ea684c4ed3f6201d2e662b9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -3094,7 +3094,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         {\n             // Broadcast\n             if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtx.RelayWalletTransaction(connman);"
      },
      {
        "sha": "740c498ce6bb4f8ecc7165afa63057b3eb1b6f37",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -21,7 +21,7 @@\n from io import BytesIO\n import time\n \n-NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n def trueDummy(tx):\n     scriptSig = CScript(tx.vin[0].scriptSig)"
      },
      {
        "sha": "7e01663c96bd577445c0b9240ed680b4eb285590",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n-        assert_raises_rpc_error(-26, \"66: mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      },
      {
        "sha": "8cea9c27833a994a627cfec28aebc402c997a1d1",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"min relay fee not met (code 66)\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      }
    ]
  },
  {
    "sha": "1beea7af92994dca83facb11bbef82b24b538400",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmVlYTdhZjkyOTk0ZGNhODNmYWNiMTFiYmVmODJiMjRiNTM4NDAw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-02T11:37:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:28Z"
      },
      "message": "[wallet] Make CWallet::ListCoins atomic",
      "tree": {
        "sha": "b0864ca2b002fb57e38a80f7902eb3ce0aced1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0864ca2b002fb57e38a80f7902eb3ce0aced1fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1beea7af92994dca83facb11bbef82b24b538400",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1beea7af92994dca83facb11bbef82b24b538400",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cad91663df381d0dff8526f3b4aa74569dfb626",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cad91663df381d0dff8526f3b4aa74569dfb626",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cad91663df381d0dff8526f3b4aa74569dfb626"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "161372784b1f76794e7b27c5a1f83e88dfe34565",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1beea7af92994dca83facb11bbef82b24b538400",
        "patch": "@@ -676,18 +676,24 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n-    std::vector<COutput> available;\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 2);\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 2);\n+    }\n     for (const auto& group : list) {\n         for (const auto& coin : group.second) {\n             LOCK(wallet->cs_wallet);\n             wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n         }\n     }\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 0);\n-\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 0);\n+    }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     list = wallet->ListCoins();"
      },
      {
        "sha": "e89921e95b8165c82f8c2410f9879ec6d98dfe46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1beea7af92994dca83facb11bbef82b24b538400/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1beea7af92994dca83facb11bbef82b24b538400",
        "patch": "@@ -2198,11 +2198,12 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n     vCoins.clear();\n \n     {\n-        LOCK2(cs_main, cs_wallet);\n-\n         CAmount nTotal = 0;\n \n         for (const auto& entry : mapWallet)\n@@ -2320,11 +2321,11 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     // avoid adding some extra complexity to the Qt code.\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n-\n     std::vector<COutput> availableCoins;\n-    AvailableCoins(availableCoins);\n \n     LOCK2(cs_main, cs_wallet);\n+    AvailableCoins(availableCoins);\n+\n     for (auto& coin : availableCoins) {\n         CTxDestination address;\n         if (coin.fSpendable &&"
      }
    ]
  },
  {
    "sha": "2f960b50703a9599b82b7291139b428f4a9b96c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjk2MGI1MDcwM2E5NTk5YjgyYjcyOTExMzliNDI4ZjRhOWI5NmMz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:51Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T18:18:51Z"
      },
      "message": "[wallet] Indent only change of CWallet::AvailableCoins",
      "tree": {
        "sha": "1ce2ab66897dfc9fa4e88ac9de3ee461854417e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ce2ab66897dfc9fa4e88ac9de3ee461854417e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f960b50703a9599b82b7291139b428f4a9b96c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1beea7af92994dca83facb11bbef82b24b538400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1beea7af92994dca83facb11bbef82b24b538400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1beea7af92994dca83facb11bbef82b24b538400"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 75,
      "deletions": 78
    },
    "files": [
      {
        "sha": "068aa9fdd1e8dfaffdd04882be9842b1ac48be61",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 78,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f960b50703a9599b82b7291139b428f4a9b96c3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f960b50703a9599b82b7291139b428f4a9b96c3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2f960b50703a9599b82b7291139b428f4a9b96c3",
        "patch": "@@ -2202,108 +2202,105 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n     AssertLockHeld(cs_wallet);\n \n     vCoins.clear();\n+    CAmount nTotal = 0;\n \n+    for (const auto& entry : mapWallet)\n     {\n-        CAmount nTotal = 0;\n+        const uint256& wtxid = entry.first;\n+        const CWalletTx* pcoin = &entry.second;\n \n-        for (const auto& entry : mapWallet)\n-        {\n-            const uint256& wtxid = entry.first;\n-            const CWalletTx* pcoin = &entry.second;\n+        if (!CheckFinalTx(*pcoin->tx))\n+            continue;\n \n-            if (!CheckFinalTx(*pcoin->tx))\n-                continue;\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n \n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n-                continue;\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < 0)\n+            continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < 0)\n-                continue;\n+        // We should not consider coins which aren't at least in our mempool\n+        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+        if (nDepth == 0 && !pcoin->InMempool())\n+            continue;\n \n-            // We should not consider coins which aren't at least in our mempool\n-            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-            if (nDepth == 0 && !pcoin->InMempool())\n-                continue;\n+        bool safeTx = pcoin->IsTrusted();\n+\n+        // We should not consider coins from transactions that are replacing\n+        // other transactions.\n+        //\n+        // Example: There is a transaction A which is replaced by bumpfee\n+        // transaction B. In this case, we want to prevent creation of\n+        // a transaction B' which spends an output of B.\n+        //\n+        // Reason: If transaction A were initially confirmed, transactions B\n+        // and B' would no longer be valid, so the user would have to create\n+        // a new transaction C to replace B'. However, in the case of a\n+        // one-block reorg, transactions B' and C might BOTH be accepted,\n+        // when the user only wanted one of them. Specifically, there could\n+        // be a 1-block reorg away from the chain where transactions A and C\n+        // were accepted to another chain where B, B', and C were all\n+        // accepted.\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+            safeTx = false;\n+        }\n \n-            bool safeTx = pcoin->IsTrusted();\n-\n-            // We should not consider coins from transactions that are replacing\n-            // other transactions.\n-            //\n-            // Example: There is a transaction A which is replaced by bumpfee\n-            // transaction B. In this case, we want to prevent creation of\n-            // a transaction B' which spends an output of B.\n-            //\n-            // Reason: If transaction A were initially confirmed, transactions B\n-            // and B' would no longer be valid, so the user would have to create\n-            // a new transaction C to replace B'. However, in the case of a\n-            // one-block reorg, transactions B' and C might BOTH be accepted,\n-            // when the user only wanted one of them. Specifically, there could\n-            // be a 1-block reorg away from the chain where transactions A and C\n-            // were accepted to another chain where B, B', and C were all\n-            // accepted.\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n-                safeTx = false;\n-            }\n+        // Similarly, we should not consider coins from transactions that\n+        // have been replaced. In the example above, we would want to prevent\n+        // creation of a transaction A' spending an output of A, because if\n+        // transaction B were initially confirmed, conflicting with A and\n+        // A', we wouldn't want to the user to create a transaction D\n+        // intending to replace A', but potentially resulting in a scenario\n+        // where A, A', and D could all be accepted (instead of just B and\n+        // D, or just A and A' like the user would want).\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+            safeTx = false;\n+        }\n \n-            // Similarly, we should not consider coins from transactions that\n-            // have been replaced. In the example above, we would want to prevent\n-            // creation of a transaction A' spending an output of A, because if\n-            // transaction B were initially confirmed, conflicting with A and\n-            // A', we wouldn't want to the user to create a transaction D\n-            // intending to replace A', but potentially resulting in a scenario\n-            // where A, A', and D could all be accepted (instead of just B and\n-            // D, or just A and A' like the user would want).\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n-                safeTx = false;\n-            }\n+        if (fOnlySafe && !safeTx) {\n+            continue;\n+        }\n \n-            if (fOnlySafe && !safeTx) {\n-                continue;\n-            }\n+        if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            continue;\n \n-            if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-                if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n-                    continue;\n-\n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n-                    continue;\n-\n-                if (IsLockedCoin(entry.first, i))\n-                    continue;\n+            if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n+                continue;\n \n-                if (IsSpent(wtxid, i))\n-                    continue;\n+            if (IsLockedCoin(entry.first, i))\n+                continue;\n \n-                isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            if (IsSpent(wtxid, i))\n+                continue;\n \n-                if (mine == ISMINE_NO) {\n-                    continue;\n-                }\n+            isminetype mine = IsMine(pcoin->tx->vout[i]);\n \n-                bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n-                bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+            if (mine == ISMINE_NO) {\n+                continue;\n+            }\n \n-                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n+            bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-                // Checks the sum amount of all UTXO's.\n-                if (nMinimumSumAmount != MAX_MONEY) {\n-                    nTotal += pcoin->tx->vout[i].nValue;\n+            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n \n-                    if (nTotal >= nMinimumSumAmount) {\n-                        return;\n-                    }\n-                }\n+            // Checks the sum amount of all UTXO's.\n+            if (nMinimumSumAmount != MAX_MONEY) {\n+                nTotal += pcoin->tx->vout[i].nValue;\n \n-                // Checks the maximum number of UTXO's.\n-                if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                if (nTotal >= nMinimumSumAmount) {\n                     return;\n                 }\n             }\n+\n+            // Checks the maximum number of UTXO's.\n+            if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                return;\n+            }\n         }\n     }\n }"
      }
    ]
  },
  {
    "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDA1YmVlYTI2YzE1NjlmNDZjZjUwZWY3MWIzNzZjOTQ4N2NlMzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T18:44:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T18:48:21Z"
      },
      "message": "Merge #12333: Make CWallet::ListCoins atomic\n\n2f960b5 [wallet] Indent only change of CWallet::AvailableCoins (Jo\u00e3o Barbosa)\n1beea7a [wallet] Make CWallet::ListCoins atomic (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fix a potencial race in `CWallet::ListCoins`.\n\n  Replaces `cs_main` and `cs_wallet` locks by assertions in `CWallet::AvailableCoins`.\n\nTree-SHA512: 09109f44a08b4b53f7605d950ab506d3f748490ab9aed474aa200e93f7b0b9f96f9bf60abe1c5f658240fd13d9e3267c0dd43fd3c1695d82384198ce1da8109f",
      "tree": {
        "sha": "b7032a576cd9cd140a6a21698d00633d70be8ef2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7032a576cd9cd140a6a21698d00633d70be8ef2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafJt1AAoJEB5K7WKYbNJdHbkH/1muiyiGh3D9Q8g9zXoBBlcu\nYR4kp8kmoL98NDBWHnFbYg/BZgafCaq54osvitUg2SGr6UbqEIujPqwvAN5qvRE6\nAjSMTm6baXD/VDF0tg/s4LJuEnPQwDmK1mlCjq6cgddJTE1yQvhTcOhM7WfOCA0+\n3v519CwtnE3L7dgg9D2hdNPejxWgADUGsn0CXLmUNKASuR30VDWmjgXcOzfHy7D2\nXYHOADVSqNUH3YxtrkKCkp0Fj0EDtqhkaYI/m/dqanUcmOqWeVnvZScIzfh6X3Y6\n9Kn8LrX/401cI9Abh1/mi//7Wi+ppJaDC+AHoXGdkQ2IU0eon5nPR8uJIv4EJJM=\n=p0tT\n-----END PGP SIGNATURE-----",
        "payload": "tree b7032a576cd9cd140a6a21698d00633d70be8ef2\nparent 663911ed581d2ab40f49fdc232f189d92264d45a\nparent 2f960b50703a9599b82b7291139b428f4a9b96c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518115492 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518115701 +0100\n\nMerge #12333: Make CWallet::ListCoins atomic\n\n2f960b5 [wallet] Indent only change of CWallet::AvailableCoins (Jo\u00e3o Barbosa)\n1beea7a [wallet] Make CWallet::ListCoins atomic (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Fix a potencial race in `CWallet::ListCoins`.\n\n  Replaces `cs_main` and `cs_wallet` locks by assertions in `CWallet::AvailableCoins`.\n\nTree-SHA512: 09109f44a08b4b53f7605d950ab506d3f748490ab9aed474aa200e93f7b0b9f96f9bf60abe1c5f658240fd13d9e3267c0dd43fd3c1695d82384198ce1da8109f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "663911ed581d2ab40f49fdc232f189d92264d45a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/663911ed581d2ab40f49fdc232f189d92264d45a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/663911ed581d2ab40f49fdc232f189d92264d45a"
      },
      {
        "sha": "2f960b50703a9599b82b7291139b428f4a9b96c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f960b50703a9599b82b7291139b428f4a9b96c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f960b50703a9599b82b7291139b428f4a9b96c3"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 91,
      "deletions": 87
    },
    "files": [
      {
        "sha": "161372784b1f76794e7b27c5a1f83e88dfe34565",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d405beea26c1569f46cf50ef71b376c9487ce361",
        "patch": "@@ -676,18 +676,24 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n-    std::vector<COutput> available;\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 2);\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 2);\n+    }\n     for (const auto& group : list) {\n         for (const auto& coin : group.second) {\n             LOCK(wallet->cs_wallet);\n             wallet->LockCoin(COutPoint(coin.tx->GetHash(), coin.i));\n         }\n     }\n-    wallet->AvailableCoins(available);\n-    BOOST_CHECK_EQUAL(available.size(), 0);\n-\n+    {\n+        LOCK2(cs_main, wallet->cs_wallet);\n+        std::vector<COutput> available;\n+        wallet->AvailableCoins(available);\n+        BOOST_CHECK_EQUAL(available.size(), 0);\n+    }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     list = wallet->ListCoins();"
      },
      {
        "sha": "7f36aefeafa235266d55233bf298a88f3d40008f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 81,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d405beea26c1569f46cf50ef71b376c9487ce361/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d405beea26c1569f46cf50ef71b376c9487ce361",
        "patch": "@@ -2198,111 +2198,109 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n \n void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const CCoinControl *coinControl, const CAmount &nMinimumAmount, const CAmount &nMaximumAmount, const CAmount &nMinimumSumAmount, const uint64_t nMaximumCount, const int nMinDepth, const int nMaxDepth) const\n {\n+    AssertLockHeld(cs_main);\n+    AssertLockHeld(cs_wallet);\n+\n     vCoins.clear();\n+    CAmount nTotal = 0;\n \n+    for (const auto& entry : mapWallet)\n     {\n-        LOCK2(cs_main, cs_wallet);\n+        const uint256& wtxid = entry.first;\n+        const CWalletTx* pcoin = &entry.second;\n \n-        CAmount nTotal = 0;\n+        if (!CheckFinalTx(*pcoin->tx))\n+            continue;\n \n-        for (const auto& entry : mapWallet)\n-        {\n-            const uint256& wtxid = entry.first;\n-            const CWalletTx* pcoin = &entry.second;\n+        if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n+            continue;\n \n-            if (!CheckFinalTx(*pcoin->tx))\n-                continue;\n+        int nDepth = pcoin->GetDepthInMainChain();\n+        if (nDepth < 0)\n+            continue;\n \n-            if (pcoin->IsCoinBase() && pcoin->GetBlocksToMaturity() > 0)\n-                continue;\n+        // We should not consider coins which aren't at least in our mempool\n+        // It's possible for these to be conflicted via ancestors which we may never be able to detect\n+        if (nDepth == 0 && !pcoin->InMempool())\n+            continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain();\n-            if (nDepth < 0)\n-                continue;\n+        bool safeTx = pcoin->IsTrusted();\n+\n+        // We should not consider coins from transactions that are replacing\n+        // other transactions.\n+        //\n+        // Example: There is a transaction A which is replaced by bumpfee\n+        // transaction B. In this case, we want to prevent creation of\n+        // a transaction B' which spends an output of B.\n+        //\n+        // Reason: If transaction A were initially confirmed, transactions B\n+        // and B' would no longer be valid, so the user would have to create\n+        // a new transaction C to replace B'. However, in the case of a\n+        // one-block reorg, transactions B' and C might BOTH be accepted,\n+        // when the user only wanted one of them. Specifically, there could\n+        // be a 1-block reorg away from the chain where transactions A and C\n+        // were accepted to another chain where B, B', and C were all\n+        // accepted.\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+            safeTx = false;\n+        }\n \n-            // We should not consider coins which aren't at least in our mempool\n-            // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-            if (nDepth == 0 && !pcoin->InMempool())\n-                continue;\n+        // Similarly, we should not consider coins from transactions that\n+        // have been replaced. In the example above, we would want to prevent\n+        // creation of a transaction A' spending an output of A, because if\n+        // transaction B were initially confirmed, conflicting with A and\n+        // A', we wouldn't want to the user to create a transaction D\n+        // intending to replace A', but potentially resulting in a scenario\n+        // where A, A', and D could all be accepted (instead of just B and\n+        // D, or just A and A' like the user would want).\n+        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+            safeTx = false;\n+        }\n \n-            bool safeTx = pcoin->IsTrusted();\n-\n-            // We should not consider coins from transactions that are replacing\n-            // other transactions.\n-            //\n-            // Example: There is a transaction A which is replaced by bumpfee\n-            // transaction B. In this case, we want to prevent creation of\n-            // a transaction B' which spends an output of B.\n-            //\n-            // Reason: If transaction A were initially confirmed, transactions B\n-            // and B' would no longer be valid, so the user would have to create\n-            // a new transaction C to replace B'. However, in the case of a\n-            // one-block reorg, transactions B' and C might BOTH be accepted,\n-            // when the user only wanted one of them. Specifically, there could\n-            // be a 1-block reorg away from the chain where transactions A and C\n-            // were accepted to another chain where B, B', and C were all\n-            // accepted.\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n-                safeTx = false;\n-            }\n+        if (fOnlySafe && !safeTx) {\n+            continue;\n+        }\n \n-            // Similarly, we should not consider coins from transactions that\n-            // have been replaced. In the example above, we would want to prevent\n-            // creation of a transaction A' spending an output of A, because if\n-            // transaction B were initially confirmed, conflicting with A and\n-            // A', we wouldn't want to the user to create a transaction D\n-            // intending to replace A', but potentially resulting in a scenario\n-            // where A, A', and D could all be accepted (instead of just B and\n-            // D, or just A and A' like the user would want).\n-            if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n-                safeTx = false;\n-            }\n+        if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            continue;\n \n-            if (fOnlySafe && !safeTx) {\n+        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n+            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n-            }\n \n-            if (nDepth < nMinDepth || nDepth > nMaxDepth)\n+            if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-                if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n-                    continue;\n-\n-                if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n-                    continue;\n-\n-                if (IsLockedCoin(entry.first, i))\n-                    continue;\n-\n-                if (IsSpent(wtxid, i))\n-                    continue;\n+            if (IsLockedCoin(entry.first, i))\n+                continue;\n \n-                isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            if (IsSpent(wtxid, i))\n+                continue;\n \n-                if (mine == ISMINE_NO) {\n-                    continue;\n-                }\n+            isminetype mine = IsMine(pcoin->tx->vout[i]);\n \n-                bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n-                bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n+            if (mine == ISMINE_NO) {\n+                continue;\n+            }\n \n-                vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n+            bool fSpendableIn = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (coinControl && coinControl->fAllowWatchOnly && (mine & ISMINE_WATCH_SOLVABLE) != ISMINE_NO);\n+            bool fSolvableIn = (mine & (ISMINE_SPENDABLE | ISMINE_WATCH_SOLVABLE)) != ISMINE_NO;\n \n-                // Checks the sum amount of all UTXO's.\n-                if (nMinimumSumAmount != MAX_MONEY) {\n-                    nTotal += pcoin->tx->vout[i].nValue;\n+            vCoins.push_back(COutput(pcoin, i, nDepth, fSpendableIn, fSolvableIn, safeTx));\n \n-                    if (nTotal >= nMinimumSumAmount) {\n-                        return;\n-                    }\n-                }\n+            // Checks the sum amount of all UTXO's.\n+            if (nMinimumSumAmount != MAX_MONEY) {\n+                nTotal += pcoin->tx->vout[i].nValue;\n \n-                // Checks the maximum number of UTXO's.\n-                if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                if (nTotal >= nMinimumSumAmount) {\n                     return;\n                 }\n             }\n+\n+            // Checks the maximum number of UTXO's.\n+            if (nMaximumCount > 0 && vCoins.size() >= nMaximumCount) {\n+                return;\n+            }\n         }\n     }\n }\n@@ -2320,11 +2318,11 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n     // avoid adding some extra complexity to the Qt code.\n \n     std::map<CTxDestination, std::vector<COutput>> result;\n-\n     std::vector<COutput> availableCoins;\n-    AvailableCoins(availableCoins);\n \n     LOCK2(cs_main, cs_wallet);\n+    AvailableCoins(availableCoins);\n+\n     for (auto& coin : availableCoins) {\n         CTxDestination address;\n         if (coin.fSpendable &&"
      }
    ]
  },
  {
    "sha": "f26866b9caf9ff27d129c703f51b8c2922000243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjY4NjZiOWNhZjlmZjI3ZDEyOWM3MDNmNTFiOGMyOTIyMDAwMjQz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T22:20:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:28Z"
      },
      "message": "boost: drop boost threads for upnp",
      "tree": {
        "sha": "85efd77129f0759c6649417f1f23c1a88354d492",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85efd77129f0759c6649417f1f23c1a88354d492"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f26866b9caf9ff27d129c703f51b8c2922000243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0277173b1defb63216d40a8d8805ae6d5d563c26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0277173b1defb63216d40a8d8805ae6d5d563c26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0277173b1defb63216d40a8d8805ae6d5d563c26"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 60,
      "deletions": 42
    },
    "files": [
      {
        "sha": "2912beec68edd9ab2343b899272a864c1358fead",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -165,6 +165,7 @@ void Interrupt()\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n }\n@@ -191,7 +192,7 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     FlushWallets();\n #endif\n-    MapPort(false);\n+    StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n@@ -1669,7 +1670,9 @@ bool AppInitMain()\n     Discover(threadGroup);\n \n     // Map ports with UPnP\n-    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n+        StartMapPort();\n+    }\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;"
      },
      {
        "sha": "307e5d49d5d510c14bc197e6a639d9ba99536a04",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 38,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -1459,6 +1459,8 @@ void CConnman::WakeMessageHandler()\n \n \n #ifdef USE_UPNP\n+static CThreadInterrupt g_upnp_interrupt;\n+static std::thread g_upnp_thread;\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n@@ -1509,35 +1511,29 @@ void ThreadMapPort()\n \n         std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n-        try {\n-            while (true) {\n+        do {\n #ifndef UPNPDISCOVER_SUCCESS\n-                /* miniupnpc 1.5 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n+            /* miniupnpc 1.5 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n-                /* miniupnpc 1.6 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n+            /* miniupnpc 1.6 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n \n-                if(r!=UPNPCOMMAND_SUCCESS)\n-                    LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                        port, port, lanaddr, r, strupnperror(r));\n-                else\n-                    LogPrintf(\"UPnP Port Mapping successful.\\n\");\n-\n-                MilliSleep(20*60*1000); // Refresh every 20 minutes\n-            }\n-        }\n-        catch (const boost::thread_interrupted&)\n-        {\n-            r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n-            freeUPNPDevlist(devlist); devlist = nullptr;\n-            FreeUPNPUrls(&urls);\n-            throw;\n+            if(r!=UPNPCOMMAND_SUCCESS)\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n+                    port, port, lanaddr, r, strupnperror(r));\n+            else\n+                LogPrintf(\"UPnP Port Mapping successful.\\n\");\n         }\n+        while(g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n+\n+        r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n+        LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n+        freeUPNPDevlist(devlist); devlist = nullptr;\n+        FreeUPNPUrls(&urls);\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n         freeUPNPDevlist(devlist); devlist = nullptr;\n@@ -1546,27 +1542,39 @@ void ThreadMapPort()\n     }\n }\n \n-void MapPort(bool fUseUPnP)\n+void StartMapPort()\n {\n-    static std::unique_ptr<boost::thread> upnp_thread;\n+    if (!g_upnp_thread.joinable()) {\n+        assert(!g_upnp_interrupt);\n+        g_upnp_thread = std::thread((std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+    }\n+}\n \n-    if (fUseUPnP)\n-    {\n-        if (upnp_thread) {\n-            upnp_thread->interrupt();\n-            upnp_thread->join();\n-        }\n-        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+void InterruptMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_interrupt();\n     }\n-    else if (upnp_thread) {\n-        upnp_thread->interrupt();\n-        upnp_thread->join();\n-        upnp_thread.reset();\n+}\n+\n+void StopMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_thread.join();\n+        g_upnp_interrupt.reset();\n     }\n }\n \n #else\n-void MapPort(bool)\n+void StartMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void InterruptMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void StopMapPort()\n {\n     // Intentionally left blank.\n }"
      },
      {
        "sha": "daa0eea8b8c09d2ab34fa069b85656c1717613fd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -442,7 +442,9 @@ class CConnman\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);\n-void MapPort(bool fUseUPnP);\n+void StartMapPort();\n+void InterruptMapPort();\n+void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n "
      },
      {
        "sha": "909be1c26419e25ec8e4816c217f3676d6127c4e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f26866b9caf9ff27d129c703f51b8c2922000243/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f26866b9caf9ff27d129c703f51b8c2922000243/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f26866b9caf9ff27d129c703f51b8c2922000243",
        "patch": "@@ -315,7 +315,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n-            MapPort(value.toBool());\n+            if (value.toBool()) {\n+                StartMapPort();\n+            } else {\n+                InterruptMapPort();\n+                StopMapPort();\n+            }\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();"
      }
    ]
  },
  {
    "sha": "ba917249486310985a34a5250bb570ca18821322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTkxNzI0OTQ4NjMxMDk4NWEzNGE1MjUwYmI1NzBjYTE4ODIxMzIy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T22:42:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:28Z"
      },
      "message": "boost: remove useless threadGroup parameter from Discover",
      "tree": {
        "sha": "ee3abc56f29ce92b369bf33f5479f5879332a803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee3abc56f29ce92b369bf33f5479f5879332a803"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba917249486310985a34a5250bb570ca18821322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba917249486310985a34a5250bb570ca18821322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f26866b9caf9ff27d129c703f51b8c2922000243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f26866b9caf9ff27d129c703f51b8c2922000243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f26866b9caf9ff27d129c703f51b8c2922000243"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 3,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9524da93cd2ed685d361dd365d99210d27bbb70c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -1667,7 +1667,7 @@ bool AppInitMain()\n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n-    Discover(threadGroup);\n+    Discover();\n \n     // Map ports with UPnP\n     if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {"
      },
      {
        "sha": "201914685cb562160794311a730b5b8b509a32d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -2129,7 +2129,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover(boost::thread_group& threadGroup)\n+void Discover()\n {\n     if (!fDiscover)\n         return;"
      },
      {
        "sha": "8378a303b8b1e13149ba53e3399d4f914d1bc826",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba917249486310985a34a5250bb570ca18821322/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba917249486310985a34a5250bb570ca18821322/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ba917249486310985a34a5250bb570ca18821322",
        "patch": "@@ -37,10 +37,6 @@\n class CScheduler;\n class CNode;\n \n-namespace boost {\n-    class thread_group;\n-} // namespace boost\n-\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n@@ -441,7 +437,7 @@ class CConnman\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n-void Discover(boost::thread_group& threadGroup);\n+void Discover();\n void StartMapPort();\n void InterruptMapPort();\n void StopMapPort();"
      }
    ]
  },
  {
    "sha": "08272671d2218eb69589a0639cbb61ef7cde3004",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODI3MjY3MWQyMjE4ZWI2OTU4OWEwNjM5Y2JiNjFlZjdjZGUzMDA0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-07T23:33:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:29Z"
      },
      "message": "boost: drop boost threads from torcontrol",
      "tree": {
        "sha": "ab4d629613d83d75ae35a25dcd9d6ff7c22a27f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab4d629613d83d75ae35a25dcd9d6ff7c22a27f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08272671d2218eb69589a0639cbb61ef7cde3004",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba917249486310985a34a5250bb570ca18821322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba917249486310985a34a5250bb570ca18821322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba917249486310985a34a5250bb570ca18821322"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9f61989a266c1aaf37a622bff175edd3ee2a75e9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -1665,7 +1665,7 @@ bool AppInitMain()\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl();\n \n     Discover();\n "
      },
      {
        "sha": "717d1cf7e54140406fbfe0c1b2134bcd98c361a5",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -731,7 +731,7 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n \n /****** Thread ********/\n static struct event_base *gBase;\n-static boost::thread torControlThread;\n+static std::thread torControlThread;\n \n static void TorControlThread()\n {\n@@ -740,7 +740,7 @@ static void TorControlThread()\n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl()\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -754,7 +754,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "2be6701fa5263fe5c8e85ce7b22904d4a0772268",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08272671d2218eb69589a0639cbb61ef7cde3004/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=08272671d2218eb69589a0639cbb61ef7cde3004",
        "patch": "@@ -13,7 +13,7 @@\n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl();\n void InterruptTorControl();\n void StopTorControl();\n "
      }
    ]
  },
  {
    "sha": "004f9999464c7ef4a57b281dcbb407e5d193e798",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDRmOTk5OTQ2NGM3ZWY0YTU3YjI4MWRjYmI0MDdlNWQxOTNlNzk4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T00:19:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-08T19:35:29Z"
      },
      "message": "boost: drop boost threads for [alert|block|wallet]notify",
      "tree": {
        "sha": "2fd9df9f73784808f615402cc1a182f53f3f6abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fd9df9f73784808f615402cc1a182f53f3f6abd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/004f9999464c7ef4a57b281dcbb407e5d193e798",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08272671d2218eb69589a0639cbb61ef7cde3004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08272671d2218eb69589a0639cbb61ef7cde3004",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08272671d2218eb69589a0639cbb61ef7cde3004"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec2edd9cac1b625db4a875d9be8aebb386634986",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -546,7 +546,8 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n     if (!strCmd.empty()) {\n         boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n }\n "
      },
      {
        "sha": "6b02c0920c6a8b9e572a116b4e0b164f8d84d352",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -1188,7 +1188,8 @@ static void AlertNotify(const std::string& strMessage)\n     safeStatus = singleQuote+safeStatus+singleQuote;\n     boost::replace_all(strCmd, \"%s\", safeStatus);\n \n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread t(runCommand, strCmd);\n+    t.detach(); // thread runs free\n }\n \n static void CheckForkWarningConditions()"
      },
      {
        "sha": "3b8ecce6da470f7037e289f080b41f3eb82d253a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004f9999464c7ef4a57b281dcbb407e5d193e798/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004f9999464c7ef4a57b281dcbb407e5d193e798/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=004f9999464c7ef4a57b281dcbb407e5d193e798",
        "patch": "@@ -34,7 +34,6 @@\n #include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/thread.hpp>\n \n std::vector<CWalletRef> vpwallets;\n /** Transaction fee set by the user */\n@@ -976,7 +975,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjg3Y2I0YTg3OWVlNmVjOGM1YWJmMjBhMmM5MmY1ZmUyMDFhNjZi",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-12-12T01:32:44Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2018-02-08T21:06:43Z"
      },
      "message": "Refactor: One CBaseChainParams should be enough",
      "tree": {
        "sha": "892d1ccae0d6427e9e50824547935563602332af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/892d1ccae0d6427e9e50824547935563602332af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJafLvmAAoJEIhmwY6hyUSicnQP/idJ6GS6dKSDy8Ph26yGs48u\nCtPWfl1tS9o1WGWTjSN1XXvJPnZBzTskd8CfWmRjWHwW8SSutdJokXAoUTaNnrMH\nnIPdor0C55xVLjiJDT/2+ResVdXGhYdPAA7GXKmlQVKDOLBELJp8Oj7syUlfWovn\nr01nmtyerFxA2dAOrSNlkY+I5eqhq++Bp6HbnO4CS5NHYDapkkjvtAzQTCFOq4te\nEDDZ0mqN5kjGj0CetzI059X5fQI+VCEyvSkBflpH5Q6OsgVO4KgaoorNOBQDqGDE\nR2mlVCghdp7IRC0teeo9vj/c3ZTzYpEKSl7cdnEELsn/P8N2PzKF6P6tUuhmP+y7\nli41c/6qkKjjSh7AojNY7F0g5KhsBb43rtSY2DZzJ6WChJRvfl56qCQbtWc5sQgu\nJNUGvKdGF6ia7wAbF2lQZJMWXyFfFZmiLc0eOouRR4rzZ+P4G6W6rQe6zls11G6o\nu/kfoNzehxGcxrEQGSWhWKtrLyoaZWY0+wU0a8BfFYd8FucorH5UM4E8BS7sF2z8\nPC3sqFIGRQnjZe9ci6q8Inpm93KP1tlnc1jhs0UCUAQudnGm1qt5rSVo6YPkmJTG\nZ1fwF9gfooWSrbDHqhHFVN630hPjep2rUSUGUF53gaSWw9YA4htv1Lv+FRjHhsEM\n0unoNzni04pIkRTZ/LGx\n=4tNI\n-----END PGP SIGNATURE-----",
        "payload": "tree 892d1ccae0d6427e9e50824547935563602332af\nparent d405beea26c1569f46cf50ef71b376c9487ce361\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1513042364 +0100\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1518124003 +0100\n\nRefactor: One CBaseChainParams should be enough\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 6,
      "deletions": 43
    },
    "files": [
      {
        "sha": "a04258fd409ab0a98000fad0291aa7f1fe4c8a01",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 41,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "patch": "@@ -24,44 +24,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n-/**\n- * Main network\n- */\n-class CBaseMainParams : public CBaseChainParams\n-{\n-public:\n-    CBaseMainParams()\n-    {\n-        nRPCPort = 8332;\n-    }\n-};\n-\n-/**\n- * Testnet (v3)\n- */\n-class CBaseTestNetParams : public CBaseChainParams\n-{\n-public:\n-    CBaseTestNetParams()\n-    {\n-        nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n-    }\n-};\n-\n-/*\n- * Regression test\n- */\n-class CBaseRegTestParams : public CBaseChainParams\n-{\n-public:\n-    CBaseRegTestParams()\n-    {\n-        nRPCPort = 18443;\n-        strDataDir = \"regtest\";\n-    }\n-};\n-\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -73,11 +35,11 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n+        return MakeUnique<CBaseChainParams>(\"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n+        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "2cb860380ef8ce771a3bdbd7f1b8fc6de0c5f713",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "patch": "@@ -24,9 +24,10 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n \n-protected:\n-    CBaseChainParams() {}\n+    CBaseChainParams() = delete;\n+    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}\n \n+private:\n     int nRPCPort;\n     std::string strDataDir;\n };"
      }
    ]
  },
  {
    "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzQ0N2JhMDYwNTdiOGU4M2Y5NjJjODI0OTFkMmZlNmM1MjExZjUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T21:05:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-08T21:19:53Z"
      },
      "message": "Merge #12225: Mempool cleanups\n\n669c943 Avoid leaking prioritization information when relaying transactions (Suhas Daftuar)\ne868b22 fee estimator: avoid sorting mempool on shutdown (Suhas Daftuar)\n0975406 Correct mempool mapTx comment (Suhas Daftuar)\n\nPull request description:\n\n  Following up on #12127 and #12118, this cleans up a comment that was left incorrect in txmempool.h, and addresses a couple of the observations @TheBlueMatt made about an unnecessary use of `queryHashes()` and a small information leak when prioritizing transactions.\n\n  Left undone is nuking queryHashes altogether; that would require changing the behavior of the `getrawmempool` rpc call, which I think I might be in favor of doing, but wanted to save for its own PR.\n\nTree-SHA512: c97d10b96dcd6520459287a4a2eda92774173757695100fcfe61e526aef86f394507c331d17f9e0c14b496c33ec46198a0f165a847762ca50f7c6780b993f162",
      "tree": {
        "sha": "94c25e37dfe1e50db0f61f4537619f9ac8f4f494",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94c25e37dfe1e50db0f61f4537619f9ac8f4f494"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafL75AAoJEB5K7WKYbNJdue4IAJgTexizciszDojWCDpWmCE0\n/LsZDNtfTw+VIijeV6f+a3D7tmzrjlum6aVCrq4bZChrh7FwQPTRG3vkI/VRsMco\nVLtKp7fcFSjlUdETY7FTmfXTYYvuyXm8gtpVIFVLvg3MS+Qne1wOS5wDJrFOsEoE\nXg0SY1X8SloYIFRSpPn5IzKoT4teAKQXV17tjb/j4eCMgBOBrDpWkpDLI2AQ0Pzc\nvEiFRugZhkJv5iop7MUwR12PrKtilPLv88TRJ3iFZ83jpw6QkO5R0/tZg+MlmiTG\nX2gZ3omPKIwidVVUwz5nzxNfhKt8oe3VgmjIMs9Bp1IJswWfR37Hp3F1ITR6lVI=\n=Rq8y\n-----END PGP SIGNATURE-----",
        "payload": "tree 94c25e37dfe1e50db0f61f4537619f9ac8f4f494\nparent d405beea26c1569f46cf50ef71b376c9487ce361\nparent 669c9433cfbc6bc25243fcdb550009b2d4180cc9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518123900 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518124793 +0100\n\nMerge #12225: Mempool cleanups\n\n669c943 Avoid leaking prioritization information when relaying transactions (Suhas Daftuar)\ne868b22 fee estimator: avoid sorting mempool on shutdown (Suhas Daftuar)\n0975406 Correct mempool mapTx comment (Suhas Daftuar)\n\nPull request description:\n\n  Following up on #12127 and #12118, this cleans up a comment that was left incorrect in txmempool.h, and addresses a couple of the observations @TheBlueMatt made about an unnecessary use of `queryHashes()` and a small information leak when prioritizing transactions.\n\n  Left undone is nuking queryHashes altogether; that would require changing the behavior of the `getrawmempool` rpc call, which I think I might be in favor of doing, but wanted to save for its own PR.\n\nTree-SHA512: c97d10b96dcd6520459287a4a2eda92774173757695100fcfe61e526aef86f394507c331d17f9e0c14b496c33ec46198a0f165a847762ca50f7c6780b993f162\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d405beea26c1569f46cf50ef71b376c9487ce361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d405beea26c1569f46cf50ef71b376c9487ce361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d405beea26c1569f46cf50ef71b376c9487ce361"
      },
      {
        "sha": "669c9433cfbc6bc25243fcdb550009b2d4180cc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/669c9433cfbc6bc25243fcdb550009b2d4180cc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/669c9433cfbc6bc25243fcdb550009b2d4180cc9"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "84398d978cf8814b4ce659555d1d9e0b26f42e98",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -213,7 +213,7 @@ void Shutdown()\n \n     if (fFeeEstimatesInitialized)\n     {\n-        ::feeEstimator.FlushUnconfirmed(::mempool);\n+        ::feeEstimator.FlushUnconfirmed();\n         fs::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fsbridge::fopen(est_path, \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (!est_fileout.IsNull())"
      },
      {
        "sha": "79b450e3e674d249d0fd2631e266f41bdba191da",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -981,16 +981,17 @@ bool CBlockPolicyEstimator::Read(CAutoFile& filein)\n     return true;\n }\n \n-void CBlockPolicyEstimator::FlushUnconfirmed(CTxMemPool& pool) {\n+void CBlockPolicyEstimator::FlushUnconfirmed() {\n     int64_t startclear = GetTimeMicros();\n-    std::vector<uint256> txids;\n-    pool.queryHashes(txids);\n     LOCK(cs_feeEstimator);\n-    for (auto& txid : txids) {\n-        removeTx(txid, false);\n+    size_t num_entries = mapMemPoolTxs.size();\n+    // Remove every entry in mapMemPoolTxs\n+    while (!mapMemPoolTxs.empty()) {\n+        auto mi = mapMemPoolTxs.begin();\n+        removeTx(mi->first, false); // this calls erase() on mapMemPoolTxs\n     }\n     int64_t endclear = GetTimeMicros();\n-    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\",txids.size(), (endclear - startclear)*0.000001);\n+    LogPrint(BCLog::ESTIMATEFEE, \"Recorded %u unconfirmed txs from mempool in %gs\\n\", num_entries, (endclear - startclear)*0.000001);\n }\n \n FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)"
      },
      {
        "sha": "5f69e989c17180b81085c119e4b62ad3d28a0df4",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -223,7 +223,7 @@ class CBlockPolicyEstimator\n     bool Read(CAutoFile& filein);\n \n     /** Empty mempool transactions on shutdown to record failure to confirm for txs still in mempool */\n-    void FlushUnconfirmed(CTxMemPool& pool);\n+    void FlushUnconfirmed();\n \n     /** Calculation of highest target that estimates are tracked for */\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;"
      },
      {
        "sha": "c6a1bf08ce1eb181a408c27742e8e0611fe82339",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67447ba06057b8e83f962c82491d2fe6c5211f50/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67447ba06057b8e83f962c82491d2fe6c5211f50/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=67447ba06057b8e83f962c82491d2fe6c5211f50",
        "patch": "@@ -241,15 +241,18 @@ class CompareTxMemPoolEntryByDescendantScore\n \n /** \\class CompareTxMemPoolEntryByScore\n  *\n- *  Sort by score of entry ((fee+delta)/size) in descending order\n+ *  Sort by feerate of entry (fee/size) in descending order\n+ *  This is only used for transaction relay, so we use GetFee()\n+ *  instead of GetModifiedFee() to avoid leaking prioritization\n+ *  information via the sort order.\n  */\n class CompareTxMemPoolEntryByScore\n {\n public:\n     bool operator()(const CTxMemPoolEntry& a, const CTxMemPoolEntry& b) const\n     {\n-        double f1 = (double)a.GetModifiedFee() * b.GetTxSize();\n-        double f2 = (double)b.GetModifiedFee() * a.GetTxSize();\n+        double f1 = (double)a.GetFee() * b.GetTxSize();\n+        double f2 = (double)b.GetFee() * a.GetTxSize();\n         if (f1 == f2) {\n             return b.GetTx().GetHash() < a.GetTx().GetHash();\n         }\n@@ -379,8 +382,9 @@ class SaltedTxidHasher\n  *\n  * mapTx is a boost::multi_index that sorts the mempool on 4 criteria:\n  * - transaction hash\n- * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - descendant feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n  * - time in mempool\n+ * - ancestor feerate [we use min(feerate of tx, feerate of tx with all unconfirmed ancestors)]\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given"
      }
    ]
  },
  {
    "sha": "c4af7387634765d254d1432746385cf35917d367",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNGFmNzM4NzYzNDc2NWQyNTRkMTQzMjc0NjM4NWNmMzU5MTdkMzY3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-08T23:00:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-02-08T23:06:21Z"
      },
      "message": "Fix ignoring tx data requests when fPauseSend is set on a peer\n\nThis resolves a bug introduced in\n66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\nto a series of transaction requests in a getdata we hit the send\nbuffer limit and set fPauseSend, we will skip one transaction per\ncall to ProcessGetData.\n\nBug found by Cory Fields (@theuni).",
      "tree": {
        "sha": "91ada887d27c8aebd0a3cf327d0cbc38a342e026",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ada887d27c8aebd0a3cf327d0cbc38a342e026"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4af7387634765d254d1432746385cf35917d367",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4af7387634765d254d1432746385cf35917d367",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bf9307727a1e16b1ef6841672ba4117c3c6c7d14",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4af7387634765d254d1432746385cf35917d367/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4af7387634765d254d1432746385cf35917d367/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c4af7387634765d254d1432746385cf35917d367",
        "patch": "@@ -1226,10 +1226,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         }\n     } // release cs_main\n \n-    if (it != pfrom->vRecvGetData.end()) {\n+    if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it;\n-        it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n+            it++;\n             ProcessGetBlockData(pfrom, consensusParams, inv, connman, interruptMsgProc);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "31c45a927eaac934fb237433f156907092bf1d11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWM0NWE5MjdlYWFjOTM0ZmIyMzc0MzNmMTU2OTA3MDkyYmYxZDEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-14T04:17:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:07Z"
      },
      "message": "Accept addresses with NODE_NETWORK_LIMITED flag",
      "tree": {
        "sha": "bd56a61a56a182b2fb8078c0c058a14919e06e4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd56a61a56a182b2fb8078c0c058a14919e06e4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31c45a927eaac934fb237433f156907092bf1d11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YicACgkQHrd2uwPH\nki0sxw//QstZfryFaABRLDvs7l9NQdsL9X4IW4S32A5XGAzA/K0qlu55Pfwn0k/6\nz+w+Qb+HnyH4sgsSykIWXmVOAt9W+TCLhICtLCzwbMAU/978KxDcTVP+xY50HJU7\nC9Zv8SuGT+M4zyQLyuG7oQkCjdnNWsMVZcFMQjV9C6BQjzpNZjQIaWLtwjOKzbIt\nO7XcggQmrI2uu/BMuhgWOVjcJlu3HMyDbVfCR7zQ4v5QbPBT2OVmhXxui29QygBY\ni/JbVpvvVqyCSGtnVmjuvmlyFqjHFNUMYSUBrTCCSFba6Z53BXADHwOJdKDDuVVA\nRdwNhnlq1XNv1XDCcTJ2FaMSdhEJqtjYR0y5nRZbDy1YVP02KBhZEnUvdsVdICM8\nkMS0pvMNyybaADaGdQX6oDoUiHsZWNOBctwI99/n8IfW5mqaNDWwGkCVMTwh0Aya\nBuTJz4m7f/ZWyHeCiZNMAOf4B2EqHKUfdvRLyaOwJPCvpoCQZkc1LmsthGcrtMBT\nQKs/H3KFfTuuHnUoKdO5T/yHKm0b5n6TzKKzp3yMOZ8o8xsNfCGxTSFg90l8XShr\nzEo/GCvf1Ns2nm5adqDEviw4MWBTzQZp9YZKxZMJwBKobhlui5FK15WuPIQGfOfQ\nC5od3l+AW1XikTCVzcECt57Yxv2xI7EaBJOd2MOIifyzK3wJaXM=\n=9+q8\n-----END PGP SIGNATURE-----",
        "payload": "tree bd56a61a56a182b2fb8078c0c058a14919e06e4e\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507954671 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166567 +1100\n\nAccept addresses with NODE_NETWORK_LIMITED flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31c45a927eaac934fb237433f156907092bf1d11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f6337129121c7d3b4ea7cc106d6829b74ba0c4af",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c45a927eaac934fb237433f156907092bf1d11/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c45a927eaac934fb237433f156907092bf1d11/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=31c45a927eaac934fb237433f156907092bf1d11",
        "patch": "@@ -1801,7 +1801,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // We only bother storing full nodes, though this may include\n             // things which we would not make an outbound connection to, in\n             // part because we may make feeler connections to them.\n-            if (!MayHaveUsefulAddressDB(addr.nServices))\n+            if (!MayHaveUsefulAddressDB(addr.nServices) && !HasAllDesirableServiceFlags(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)"
      },
      {
        "sha": "ec5f55e4f6784cc44e0f2fcd7adc087c3be021cf",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31c45a927eaac934fb237433f156907092bf1d11/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31c45a927eaac934fb237433f156907092bf1d11/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=31c45a927eaac934fb237433f156907092bf1d11",
        "patch": "@@ -316,10 +316,10 @@ static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n- * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ * robust address-storage DB.\n  */\n static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n-    return services & NODE_NETWORK;\n+    return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n /** A CService with information about it as peer */"
      }
    ]
  },
  {
    "sha": "6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmU1N2JkYWFjMTdkNDlhZjllYzdmMzZjMTQxNGQ1ZDJiY2VjNTY0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-10-14T04:48:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:10Z"
      },
      "message": "Connect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD",
      "tree": {
        "sha": "468056c4529bc345ea568336de7ffd17324f2daa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/468056c4529bc345ea568336de7ffd17324f2daa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YioACgkQHrd2uwPH\nki3BKBAAxCtbr18qHYrtVI6/uj3+H6W6fwNoxNk4qP7C8BZaz0LGVqvp/Rqy6rXz\n5e1adTLWIxNdLhLwBeEmW2HF9ddWQl8MrJmTqIpRUUy91bq2kYSFosr6nJES/+WC\nfL9scsk6oYlUqocKBrlLsmFM7Vmsj9vb9ZTmUR96C+TbsFO35o0l+HrvMod7A7EK\nZd5Z2xPc52Dq9csbBdI9LLGBRItdu3l1io3KHngQ8cxwqa/WquHoQJA5gB+6Cvyr\nB5PDlPy52cdFFpXHrvuXA79UboFJJz+yr+IAxdcHhhmJE3KNpU9WkjSN1bSaK8Aw\ny4h6SCcW8q+3j8IGyA8FjRsobmfgTsQCH8fqw2mNoeCoa2edj62V8GF1L18tn7aV\nF0Jm6tWfbmeI/BMnLE/faqW4an7TsSNyHQKlZs8gZ+4WLinIrNTETmKT/TrZBvhJ\n+bRAvpRTbGq2ev5JhCrrrNtarVwd52IXeyjqybsjhxSoFg9Z2zvz6i/q2qEytsNE\nD74mwzRwGNDIc1KunJbipDmlj9ML9kU6p/s+byltN8tKivGQ07lo4rXsKHD3L4Zp\ny/sTQpH4y7kmozwISbztJ1MtHEjNGkgaKkqadiTi/c+bGjUKDq0uPCdsVtBqXwKj\nuEzXlIMjo3EB6UoC5wZRZW8fXSg54+4m2eSnWaizkuSyK+L5UKI=\n=mtYR\n-----END PGP SIGNATURE-----",
        "payload": "tree 468056c4529bc345ea568336de7ffd17324f2daa\nparent 31c45a927eaac934fb237433f156907092bf1d11\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1507956480 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166570 +1100\n\nConnect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31c45a927eaac934fb237433f156907092bf1d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31c45a927eaac934fb237433f156907092bf1d11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31c45a927eaac934fb237433f156907092bf1d11"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b4b43c3badf00019d155fbdde6740bce45ad41c1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -2710,6 +2710,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     m_manual_connection = false;\n     fClient = false; // set by version message\n+    m_limited_node = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;"
      },
      {
        "sha": "db0a1e62bbc49add71ea1604e225718ef4aa9445",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -643,6 +643,7 @@ class CNode\n     bool fOneShot;\n     bool m_manual_connection;\n     bool fClient;\n+    bool m_limited_node; //after BIP159\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;"
      },
      {
        "sha": "55d404d91ed2c2773f043849d3de263934597deb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -892,6 +892,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n+    g_initial_block_download_completed = !fInitialDownload;\n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain.\n         std::vector<uint256> vHashes;\n@@ -1642,7 +1643,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->cleanSubVer = cleanSubVer;\n         }\n         pfrom->nStartingHeight = nStartingHeight;\n-        pfrom->fClient = !(nServices & NODE_NETWORK);\n+\n+        // set nodes not relaying blocks and tx and not serving (parts) of the historical blockchain as \"clients\"\n+        pfrom->fClient = (!(nServices & NODE_NETWORK) && !(nServices & NODE_NETWORK_LIMITED));\n+\n+        // set nodes not capable of serving the complete blockchain history as \"limited nodes\"\n+        pfrom->m_limited_node = (!(nServices & NODE_NETWORK) && (nServices & NODE_NETWORK_LIMITED));\n+\n         {\n             LOCK(pfrom->cs_filter);\n             pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n@@ -3611,7 +3618,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         // Message: getdata (blocks)\n         //\n         std::vector<CInv> vGetData;\n-        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);"
      },
      {
        "sha": "ea78ab6856f6d13924327dd00f66eafebfd9a7a4",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -12,6 +12,8 @@\n # include <arpa/inet.h>\n #endif\n \n+std::atomic<bool> g_initial_block_download_completed(false);\n+\n namespace NetMsgType {\n const char *VERSION=\"version\";\n const char *VERACK=\"verack\";"
      },
      {
        "sha": "4907c38e5c3d18294bc762c91db73bb3d75ca619",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "patch": "@@ -15,6 +15,7 @@\n #include <uint256.h>\n #include <version.h>\n \n+#include <atomic>\n #include <stdint.h>\n #include <string>\n \n@@ -277,6 +278,7 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n+extern std::atomic<bool> g_initial_block_download_completed;\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *\n@@ -302,6 +304,9 @@ enum ServiceFlags : uint64_t {\n  * should be updated appropriately to filter for the same nodes.\n  */\n static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n+        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n+    }\n     return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n }\n "
      }
    ]
  },
  {
    "sha": "fa999affad115c09743f8b1f5812326c19753ba9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk5OWFmZmFkMTE1YzA5NzQzZjhiMWY1ODEyMzI2YzE5NzUzYmE5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-11T12:59:57Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] Allow addrman loopback tests (add debug option -addrmantest)",
      "tree": {
        "sha": "11e8bb9fd8461423b5cea415be01f38cff9a82d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11e8bb9fd8461423b5cea415be01f38cff9a82d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa999affad115c09743f8b1f5812326c19753ba9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki0tVRAAizI+OXlmNTwm6focVpgGZJ0O6S1yMnA+j2t92ug6hurknYL6lKtsPi3i\ngd3+t6rNCrF599dAjoL53L0H0UojMmZYfZ5fI/aeXimviPluQKk8KE3AhOfGVCth\nEiv2kglNhqNTL38tAMAJqoYHo48dLyfTyj4fvpovdi//fSC/lP8EIjAtpFFh+RTh\npkVoXeEwQTiNrdQwqP/geU5iJsQ1U1Sb6YF8kT6QDcA/hugsFK5+KYWtWlyopzP0\nGYe1vmta3kKyFyDeVRQL4cohe7Ywx7ZBdVRVg3R7UXiV+UWWlLxuCZxpfq46hOzp\nvMH3h3Vu7lI6gRgSWLd66CK9AjtLOFg99a6/OQZEULdlcdgmZUuNRiOV4Qv2ct4Q\nF1DsHRCc8yXqMwJpMJHE/4okggqKbxRYNhmOxDMFBLPlQGkpsxIrAAHiqzwOXNjw\nGOs3YlN7hji5EytPJ4RN7FAd8Uj5m+Dnz3blDJ6tTr8iVHd7Rdb3KyZ11y3QY5iE\nce7kEAdtSzh+LL2DsPRVJtAHHZ0WKalx925vdFduBXjh7wzQN1Ugb2yk8e+0Ogxt\nF1B7KS1d0KR0+J8XaJMgVdN8oUpKdF8ecZpZd9CXoDTrcQIWp9OugLQ6VwJFZ6fl\nW9LhDRVWVPvj2kTFQeGkQ0jaP0qy7ZrhkOZM8CS6/7ZXMImE1gQ=\n=twNB\n-----END PGP SIGNATURE-----",
        "payload": "tree 11e8bb9fd8461423b5cea415be01f38cff9a82d7\nparent 6fe57bdaac17d49af9ec7f36c1414d5d2bcec564\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1494507597 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] Allow addrman loopback tests (add debug option -addrmantest)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa999affad115c09743f8b1f5812326c19753ba9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fe57bdaac17d49af9ec7f36c1414d5d2bcec564"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "79365d49352f60b2e3f7ff7fce8603867d48eb99",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa999affad115c09743f8b1f5812326c19753ba9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa999affad115c09743f8b1f5812326c19753ba9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa999affad115c09743f8b1f5812326c19753ba9",
        "patch": "@@ -447,6 +447,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n     }\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");"
      },
      {
        "sha": "ea6360f38869dae4e39b90a5f051ca1891320165",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa999affad115c09743f8b1f5812326c19753ba9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa999affad115c09743f8b1f5812326c19753ba9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa999affad115c09743f8b1f5812326c19753ba9",
        "patch": "@@ -181,6 +181,10 @@ void AdvertiseLocal(CNode *pnode)\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n         CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n+            // use IPv4 loopback during addrmantest\n+            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode->GetLocalServices());\n+        }\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n@@ -189,7 +193,7 @@ void AdvertiseLocal(CNode *pnode)\n         {\n             addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n-        if (addrLocal.IsRoutable())\n+        if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n         {\n             LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n             FastRandomContext insecure_rand;"
      }
    ]
  },
  {
    "sha": "158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNThlMWE2ZjBmNTEyOTZmODBmYzU1ZTRlM2I3NzEyMTI4ZjdhNjhi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-11T19:54:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] fix mininode CAddress ser/deser",
      "tree": {
        "sha": "3e73e70ea5c92260d06ba111f097d417bb249720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e73e70ea5c92260d06ba111f097d417bb249720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki25pw//bhUEf6glsHGat1G1hYAd5IINq5CEi1P4TKLlcCWeYNITDdTn2zeTsALj\n/crfVXMPZFFvXuw/8mP55USmRivrGT1exwmhCiYtHOo7kJFdrwrAE/YZEqwu5oMv\nCQ6I7N6e3H+Y7fLCh1yQHh608+yiVuIdXKv+KBsx0V0Su5OhCdxJdZk6G37FCXXX\nzNFx/bBq+SzLJYdGe2yjHWL1clHLX3nlY7PivTdFkHvww1AxANLbvwhqDLc83Lj/\nUKrsWRdliHfy7UL5ELFZl7kjWfX1Gwb6rKtPraVOtB6XFeVoVtKy8HsTWKjDE4Dg\nQAn70D/W3VoMpJChctI/fZW/ECJMqueJUVZacrDWGiFp476KE/6Kb/E2GgbYLoZa\nYHnBAtjUpMmdLpXELpIeoBAPR1m1PNEcMAtZvtD0mGBnipn623K4QQgOowUUQmBx\nol+5kmNl1BP1ClSLV0tfzFEcWuSFteQVyPoQ52NqaBTEqC1U6ksZixwU+ws+tT4i\nJ9uVg9/38lcUx9bZvrk0PuDLRrivfej+rEIaAgpg0igHZ8ifCcYJiEmwfv+I08Rj\n3hnJX1zSb0EDFKRDn97d3cjK9FON/mpt0l+pFzZOEGCl9EOq8qgzYCk3RFGs9gk5\nBiYNvAoOldBb/u0Ym5fl7MMFNYNChNzb3RD7EWi5t5/DCwa0egA=\n=MBEy\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e73e70ea5c92260d06ba111f097d417bb249720\nparent fa999affad115c09743f8b1f5812326c19753ba9\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513022053 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] fix mininode CAddress ser/deser\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa999affad115c09743f8b1f5812326c19753ba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa999affad115c09743f8b1f5812326c19753ba9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa999affad115c09743f8b1f5812326c19753ba9"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ca92c51d3ef0d573dfe0ed60fd3b56663d56c9e3",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/158e1a6f0f51296f80fc55e4e3b7712128f7a68b/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "patch": "@@ -181,19 +181,24 @@ def ToHex(obj):\n \n class CAddress():\n     def __init__(self):\n+        self.time = 0\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n-    def deserialize(self, f):\n+    def deserialize(self, f, with_time=True):\n+        if with_time:\n+            self.time = struct.unpack(\"<i\", f.read(4))[0]\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.pchReserved = f.read(12)\n         self.ip = socket.inet_ntoa(f.read(4))\n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n-    def serialize(self):\n+    def serialize(self, with_time=True):\n         r = b\"\"\n+        if with_time:\n+            r += struct.pack(\"<i\", self.time)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += self.pchReserved\n         r += socket.inet_aton(self.ip)\n@@ -853,11 +858,11 @@ def deserialize(self, f):\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n         self.addrTo = CAddress()\n-        self.addrTo.deserialize(f)\n+        self.addrTo.deserialize(f, False)\n \n         if self.nVersion >= 106:\n             self.addrFrom = CAddress()\n-            self.addrFrom.deserialize(f)\n+            self.addrFrom.deserialize(f, False)\n             self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n             self.strSubVer = deser_string(f)\n         else:\n@@ -885,8 +890,8 @@ def serialize(self):\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += struct.pack(\"<q\", self.nTime)\n-        r += self.addrTo.serialize()\n-        r += self.addrFrom.serialize()\n+        r += self.addrTo.serialize(False)\n+        r += self.addrFrom.serialize(False)\n         r += struct.pack(\"<Q\", self.nNonce)\n         r += ser_string(self.strSubVer)\n         r += struct.pack(\"<i\", self.nStartingHeight)"
      }
    ]
  },
  {
    "sha": "3f56df5b7564878330ddddddec8afa923a4f8390",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjU2ZGY1Yjc1NjQ4NzgzMzBkZGRkZGRlYzhhZmE5MjNhNGY4Mzkw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-09T07:00:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-09T08:56:11Z"
      },
      "message": "[QA] add NODE_NETWORK_LIMITED address relay and sync test",
      "tree": {
        "sha": "2aff96e797d1be11aa9bbdc2d470fcac45eea49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2aff96e797d1be11aa9bbdc2d470fcac45eea49d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlp9YisACgkQHrd2uwPH\nki3HLw//btyASIjITadfiMW34iRGZabZIcbk53TEY1iatsQs6Y5muebH0IXgltTM\nyT2CnW8hYXti9jqiHpfk5zy/t5pztTkVPooPSiMccerFtza7E1Blr2FhpDyO7DTt\nWm0iS4paHQIh0iCyRz3lrGesnC16trMjefzgfdSdFhsBfpy5WZj7ruWp0sUVG/Ec\nvVah7DL1+HgFWbITwVBdzcWK6Rdhy/YYQLb2dZrCbirAHBl/DbL3K8pLnWcCT9K0\nXU0IbgUZCik3bS4ciDt7LqeD4/xlYPVXkOi2V0TKy4WvtfqS/z6fkuKY11Ovd3bx\nKOjNNmu+Skvfw6i/DAJh6owb8bJRg7yGVK46DXVfj4d7ja1eqPWQ+MD/NzPRFe4w\nKJdPvtKyrpNB4yYVEqS6nfPfSH5SwYXSeV6QVtgmnZYA0zhq+O6X6gfBeNQm9XDr\nxn8jIG8i3yt6IaRDCXg4ne/Alcb1wJBiEU9cT5gb504oA0zb5nUXReUSD5PyZiav\nsJ1HWux5TNN7I0hAbCfIzDzuRYY6CLxRWjpNv38VLx04QnNLrI1OqeuVDd9oiNK5\nAMn/6NaTA4UDuKVUfd9EX7Khu+G2vCrW79rbNk0Ukioq1YkeMsr56cue2xvzoaK9\n7WaQgBU/3+JONYAuuUKommtfjlYGwp2A38ibNGPX2WyzcEgc0tM=\n=rWKc\n-----END PGP SIGNATURE-----",
        "payload": "tree 2aff96e797d1be11aa9bbdc2d470fcac45eea49d\nparent 158e1a6f0f51296f80fc55e4e3b7712128f7a68b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1515481235 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518166571 +1100\n\n[QA] add NODE_NETWORK_LIMITED address relay and sync test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56df5b7564878330ddddddec8afa923a4f8390",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/158e1a6f0f51296f80fc55e4e3b7712128f7a68b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/158e1a6f0f51296f80fc55e4e3b7712128f7a68b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 70,
      "deletions": 8
    },
    "files": [
      {
        "sha": "81a41d6a977b3c604d34de3de24c931a1536c794",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 70,
        "deletions": 8,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f56df5b7564878330ddddddec8afa923a4f8390/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f56df5b7564878330ddddddec8afa923a4f8390/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=3f56df5b7564878330ddddddec8afa923a4f8390",
        "patch": "@@ -8,16 +8,21 @@\n and that it responds to getdata requests for blocks correctly:\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n-from test_framework.messages import CInv, msg_getdata\n-from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n+from test_framework.messages import CInv, msg_getdata, msg_verack\n+from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, P2PInterface, wait_until, mininode_lock, network_thread_start, network_thread_join\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks\n \n class P2PIgnoreInv(P2PInterface):\n+    firstAddrnServices = 0\n     def on_inv(self, message):\n         # The node will send us invs for other blocks. Ignore them.\n         pass\n-\n+    def on_addr(self, message):\n+        self.firstAddrnServices = message.addrs[0].nServices\n+    def wait_for_addr(self, timeout=5):\n+        test_function = lambda: self.last_message.get(\"addr\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n     def send_getdata_for_block(self, blockhash):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n@@ -26,12 +31,24 @@ def send_getdata_for_block(self, blockhash):\n class NodeNetworkLimitedTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [['-prune=550']]\n+        self.num_nodes = 3\n+        self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n+\n+    def disconnect_all(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[1], 0)\n+        disconnect_nodes(self.nodes[2], 1)\n+        disconnect_nodes(self.nodes[2], 0)\n+        disconnect_nodes(self.nodes[0], 2)\n+        disconnect_nodes(self.nodes[1], 2)\n+\n+    def setup_network(self):\n+        super(NodeNetworkLimitedTest, self).setup_network()\n+        self.disconnect_all()\n \n     def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        NetworkThread().start()\n+        network_thread_start()\n         node.wait_for_verack()\n \n         expected_services = NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED\n@@ -43,7 +60,9 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        blocks = self.nodes[0].generate(292)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        blocks = self.nodes[1].generate(292)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrive block at tip-288.\")\n         node.send_getdata_for_block(blocks[1])  # last block in valid range\n@@ -53,5 +72,48 @@ def run_test(self):\n         node.send_getdata_for_block(blocks[0])  # first block outside of the 288+2 limit\n         node.wait_for_disconnect(5)\n \n+        self.log.info(\"Check local address relay, do a fresh connection.\")\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+        node1 = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n+        network_thread_start()\n+        node1.wait_for_verack()\n+        node1.send_message(msg_verack())\n+\n+        node1.wait_for_addr()\n+        #must relay address with NODE_NETWORK_LIMITED\n+        assert_equal(node1.firstAddrnServices, 1036)\n+\n+        self.nodes[0].disconnect_p2ps()\n+        node1.wait_for_disconnect()\n+\n+        # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n+        # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n+        connect_nodes_bi(self.nodes, 0, 2)\n+        try:\n+            sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n+        except:\n+            pass\n+        # node2 must remain at heigh 0\n+        assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n+\n+        # now connect also to node 1 (non pruned)\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        # sync must be possible\n+        sync_blocks(self.nodes)\n+\n+        # disconnect all peers\n+        self.disconnect_all()\n+\n+        # mine 10 blocks on node 0 (pruned node)\n+        self.nodes[0].generate(10)\n+\n+        # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+\n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      }
    ]
  },
  {
    "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTAwNWRkYWQxYzRhOTczMmVjYWU0N2M3ZGUzNGI0ZGUxNTdmNDhm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-09T09:44:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-09T09:54:01Z"
      },
      "message": "Merge #11761: [docs] initial QT documentation\n\nc8edc2c [docs] initial QT documentation, move Qt Creator instructions (Sjors Provoost)\n\nPull request description:\n\n  I'll update this as I figure out how everything is tied together, but I think it's a useful enough start.\n\nTree-SHA512: d96e5c9ba8ccc3a1b92a0894a8a8449317100eebb14e5d390b51793534458f50eac296cf2945fccf81b85aff23fa32d91d6015a0a76ada4f7091a400d7508ae5",
      "tree": {
        "sha": "e00b6171eaf03f50495ff573b26dea1114697e41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e00b6171eaf03f50495ff573b26dea1114697e41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJafW+5AAoJEB5K7WKYbNJdG3MH/2b3uPWEd95K8QBZIUYQ1/q8\nEOMsjOKhTXa1Zgm952ZxsRWa5wiN5HhRQ4omf/DCBLop2bxM5BhCyddMsngvIHqf\ncG51T0OY/lxRBCYmaKc2ranO9WogbPpGQBDaCsDdR00y+oKpdUD1NCx0gkflMksO\nWtw0HwsWPKIn0ogYTg3gMI3628DGVGwz6FQmGeNftVlI2usZy41VnzGEo25hMHzc\npTBImZyoekYdANbTjGzU3zHGiY5KjOobEWAEB3fIa3NsoaX5NRgnyOeYan6ongAC\nUFcpA+pnolH5AaEHTLk98mxffIW9dEQ0S8kHEnUCzL3IY346LLsTBhlSWpdFqdw=\n=4yVn\n-----END PGP SIGNATURE-----",
        "payload": "tree e00b6171eaf03f50495ff573b26dea1114697e41\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nparent c8edc2c3cb79a1ae15622059004981c70f3775d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518169448 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518170041 +0100\n\nMerge #11761: [docs] initial QT documentation\n\nc8edc2c [docs] initial QT documentation, move Qt Creator instructions (Sjors Provoost)\n\nPull request description:\n\n  I'll update this as I figure out how everything is tied together, but I think it's a useful enough start.\n\nTree-SHA512: d96e5c9ba8ccc3a1b92a0894a8a8449317100eebb14e5d390b51793534458f50eac296cf2945fccf81b85aff23fa32d91d6015a0a76ada4f7091a400d7508ae5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      },
      {
        "sha": "c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8edc2c3cb79a1ae15622059004981c70f3775d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8edc2c3cb79a1ae15622059004981c70f3775d8"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 95,
      "deletions": 17
    },
    "files": [
      {
        "sha": "2b84c7cc2c540ac978f242c9686da707e312e226",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89005ddad1c4a9732ecae47c7de34b4de157f48f/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89005ddad1c4a9732ecae47c7de34b4de157f48f/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "patch": "@@ -90,23 +90,6 @@ Other commands:\n     ./src/bitcoin-cli --help # Outputs a list of command-line options.\n     ./src/bitcoin-cli help # Outputs a list of RPC commands when the daemon is running.\n \n-Using Qt Creator as IDE\n-------------------------\n-You can use Qt Creator as an IDE, for bitcoin development.\n-Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n-Uncheck everything except Qt Creator during the installation process.\n-\n-1. Make sure you installed everything through Homebrew mentioned above\n-2. Do a proper ./configure --enable-debug\n-3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n-4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n-5. Leave the file selection as it is\n-6. Confirm the \"summary page\"\n-7. In the \"Projects\" tab select \"Manage Kits...\"\n-8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n-9. Select LLDB as debugger (you might need to set the path to your installation)\n-10. Start debugging with Qt Creator\n-\n Notes\n -----\n "
      },
      {
        "sha": "7ffea98170ebdc5166f405168eb83f2ec5a2e932",
        "filename": "src/qt/README.md",
        "status": "added",
        "additions": 95,
        "deletions": 0,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89005ddad1c4a9732ecae47c7de34b4de157f48f/src/qt/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89005ddad1c4a9732ecae47c7de34b4de157f48f/src/qt/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/README.md?ref=89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "patch": "@@ -0,0 +1,95 @@\n+This directory contains the BitcoinQT graphical user interface (GUI). It uses the cross platform framework [QT](https://www1.qt.io/developers/).\n+\n+The current precise version for QT 5 is specified in [qt.mk](/depends/packages/qt.mk). QT 4 is also supported (see [#8263](https://github.com/bitcoin/bitcoin/issues/8263)).\n+\n+## Compile and run\n+\n+See build instructions ([OSX](/doc/build-osx.md), [Windows](/doc/build-windows.md), [Unix](/doc/build-unix.md), etc).\n+\n+To run:\n+\n+```sh\n+./src/qt/bitcoin-qt\n+```\n+\n+## Files and directories\n+\n+### forms\n+\n+Contains [Designer UI](http://doc.qt.io/qt-5.9/designer-using-a-ui-file.html) files. They are created with [Qt Creator](#use-qt-Creator-as IDE), but can be edited using any text editor.\n+\n+### locale\n+\n+Contains translations. They are periodically updated. The process is described [here](/doc/translation_process.md).\n+\n+### res\n+\n+Resources such as the icon.\n+\n+### test\n+\n+Tests.\n+\n+### bitcoingui.(h/cpp)\n+\n+Represents the main window of the Bitcoin UI.\n+\n+### \\*model.(h/cpp)\n+\n+The model. When it has a corresponding controller, it generally inherits from  [QAbstractTableModel](http://doc.qt.io/qt-5/qabstracttablemodel.html). Models that are used by controllers as helpers inherit from other QT classes like [QValidator](http://doc.qt.io/qt-5/qvalidator.html).\n+\n+ClientModel is used by the main application `bitcoingui` and several models like `peertablemodel`.\n+\n+### \\*page.(h/cpp)\n+\n+A controller. `:NAMEpage.cpp` generally includes `:NAMEmodel.h` and `forms/:NAME.page.ui` with a similar `:NAME`.\n+\n+### \\*dialog.(h/cpp)\n+\n+Various dialogs, e.g. to open a URL. Inherit from [QDialog](http://doc.qt.io/qt-4.8/qdialog.html).\n+\n+### paymentserver.(h/cpp)\n+\n+Used to process BIP21 and BIP70 (see https://github.com/bitcoin/bitcoin/pull/11622) payment URI / requests. Also handles URI based application switching (e.g. when following a bitcoin:... link from a browser).\n+\n+### walletview.(h/cpp)\n+\n+Represents the view to a single wallet.\n+\n+### Other .h/cpp files\n+\n+* UI elements like BitcoinAmountField, which inherit from QWidget.\n+* `bitcoinstrings.cpp`: automatically generated\n+* `bitcoinunits.(h/cpp)`: BTC / mBTC / etc handling\n+* `callback.h`\n+* `guiconstants.h`: UI colors, app name, etc\n+* `guiutil.h`: several helper functions\n+* `macdockiconhandler.(h/cpp)`\n+* `macdockiconhandler.(h/cpp)`: display notifications in OSX\n+\n+## Contribute\n+\n+See [CONTRIBUTING.md](/CONTRIBUTING.md) for general guidelines. Specifically for QT:\n+\n+* don't change `local/bitcoin_en.ts`; this happens [automatically](/doc/translation_process.md#writing-code-with-translations)\n+\n+## Using Qt Creator as IDE\n+\n+You can use Qt Creator as an IDE. This is especially useful if you want to change\n+the UI layout.\n+\n+Download and install the community edition of [Qt Creator](https://www.qt.io/download/).\n+Uncheck everything except Qt Creator during the installation process.\n+\n+Instructions for OSX:\n+\n+1. Make sure you installed everything through Homebrew mentioned in the [OSX build instructions](/docs/build-osx.md)\n+2. Use `./configure` with the `--enable-debug` flag\n+3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n+4. Enter \"bitcoin-qt\" as project name, enter src/qt as location\n+5. Leave the file selection as it is\n+6. Confirm the \"summary page\"\n+7. In the \"Projects\" tab select \"Manage Kits...\"\n+8. Select the default \"Desktop\" kit and select \"Clang (x86 64bit in /usr/bin)\" as compiler\n+9. Select LLDB as debugger (you might need to set the path to your installation)\n+10. Start debugging with Qt Creator (you might need to the executable to \"bitcoin-qt\" under \"Run\", which is where you can also add command line arguments)"
      }
    ]
  },
  {
    "sha": "464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjQwMTVmNmYxNjNiMGM0M2ExYThlMjBhMjg5MGVlODM3YTY4MDRk",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-09T09:54:19Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-09T09:57:10Z"
      },
      "message": "[scripts] gitian-builder.sh: fix --setup doc, LXC is default",
      "tree": {
        "sha": "575ca1c60ba7a17b312baf104305784263add508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/575ca1c60ba7a17b312baf104305784263add508"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlp9cIIACgkQV/+b28ww\nEAkwsQ/+JrBfqJI9bz+wHH2yBmcq0axqhjbZv9/01uj2EZPuS5qgdBwP3w478i6j\nUPiPzZj+saoSe7gnfs90FGGUWR27ma2VRslB7wYYEcWcmj+TccoQ4pvZ816zOJbJ\nCOU3ap/neCg1d6W+u4ELhvqILzXRnKDSMk7+DZDcYKFHqoy0SNjPzwplhjbTHerA\ny8KZpfPvfT7mvmm0ABh61MmXsIK2iFaGNllFfTxCoMaoUu7h5ZccdxTKBYvPZ4gs\na7PF/T953mDvVGrzXrQZXHF3I7pfFBb4Ah3OoqwnkhKEQryMA/74wI0cehwG8NUk\nZH+DZ+XhhO9ifTsBzhM3a6u63iUokv64Qt7UeIpqjQJiULmm2+AajJPxZZHPAA8t\nvKnbECVCwpCqtArI6LuWIv4a8cLgQQKzan/YlEjJRjaTu7C/CuTHw4tQN11X82pq\na52c8XxOZtW9+28njUN5OlbW2Mi0Y7tW2qltjlr4lh8JsZEJqdIOMIRES5XR9613\nXkzNVA9eUEkgcKU4Nc+Jwoo0TSBAIH7NnJDyoaV9Vu6qUYbjQo9tyVTEz7D6mtB9\nOvpssBIzih9quE3Yobo1rq8qqAhSPCsgdZpCl6Yf56WPGxgpKq0D0XqPAaUplskU\n2/3bKLlebUz1W8FRkp+SLMKH07pi3uDASznyAnDutcwvTDD1DOE=\n=ZOsM\n-----END PGP SIGNATURE-----",
        "payload": "tree 575ca1c60ba7a17b312baf104305784263add508\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor Sjors Provoost <sjors@sprovoost.nl> 1518170059 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1518170230 +0100\n\n[scripts] gitian-builder.sh: fix --setup doc, LXC is default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/464015f6f163b0c43a1a8e20a2890ee837a6804d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d334c1642f3e3b90e90ebbcbeea1cbddb69afc54",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/464015f6f163b0c43a1a8e20a2890ee837a6804d/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/464015f6f163b0c43a1a8e20a2890ee837a6804d/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "patch": "@@ -47,7 +47,7 @@ Options:\n -j\t\tNumber of processes to use. Default 2\n -m\t\tMemory to allocate in MiB. Default 2000\n --kvm           Use KVM instead of LXC\n---setup         Set up the Gitian building environment. Uses KVM. If you want to use lxc, use the --lxc option. Only works on Debian-based systems (Ubuntu, Debian)\n+--setup         Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)\n --detach-sign   Create the assert file for detached signing. Will not commit anything.\n --no-commit     Do not commit anything to git\n -h|--help\tPrint this help message"
      }
    ]
  },
  {
    "sha": "948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDhjMjljYzBkMmRmNzJiMmY5NzE3YjhkMzNjNWUyOWUyZjk1ODJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-10T08:56:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-10T11:37:20Z"
      },
      "message": "Merge #12128: Refactor: One CBaseChainParams should be enough\n\n1687cb4 Refactor: One CBaseChainParams should be enough (Jorge Tim\u00f3n)\n\nPull request description:\n\n  There's no need for class hierarchy with CBaseChainParams, it is just a struct with 2 fields.\n  This starts as a +10-43 diff\n\nTree-SHA512: 0a7dd64ab785416550b541787c6083540e4962d76b6cffa806bb3593aec2daf1752dfe65ac5cd51b34ad5c31dd8292c422b483fdd2d37d0b7e68725498ed4c2d",
      "tree": {
        "sha": "5438dc548a5367dfde8007de9b94218fd026d4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5438dc548a5367dfde8007de9b94218fd026d4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaftlwAAoJEB5K7WKYbNJdF/sH/1ATcWh8W2YlKIgBaYQdkjUX\njib4h42y+FSazkCr4zkYgiId9Rl4AoCdYvOTGpQhgJTE1iaNnxdpD8+ejhp3C6D7\nfZ0eUrI6jC3vsoOd+IzVJ7YTPy8JHrjB53tMLNqCeN+F1rCmFyZAe3iEnMmL/yB9\nNWGYHP3zG2mbTa4LICqrWWlmDTcuP2LhwCBzkwYPkXffIov8hi97mWp4TEP5rNbi\nZZuDYahFUpUz/g+6e6GJ+da8VP+sBhGj4wJLX6QqUCwifuFUA/ksVHh7ijSABfgT\n4FAb4LlyXSRstXX4GbfIFZc1fZPqQEP0G51RAuSAy1w0fsIBC/GN94dN5weoX14=\n=o8l4\n-----END PGP SIGNATURE-----",
        "payload": "tree 5438dc548a5367dfde8007de9b94218fd026d4f4\nparent 89005ddad1c4a9732ecae47c7de34b4de157f48f\nparent 1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518252970 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518262640 +0100\n\nMerge #12128: Refactor: One CBaseChainParams should be enough\n\n1687cb4 Refactor: One CBaseChainParams should be enough (Jorge Tim\u00f3n)\n\nPull request description:\n\n  There's no need for class hierarchy with CBaseChainParams, it is just a struct with 2 fields.\n  This starts as a +10-43 diff\n\nTree-SHA512: 0a7dd64ab785416550b541787c6083540e4962d76b6cffa806bb3593aec2daf1752dfe65ac5cd51b34ad5c31dd8292c422b483fdd2d37d0b7e68725498ed4c2d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      },
      {
        "sha": "1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1687cb4a879ee6ec8c5abf20a2c92f5fe201a66b"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 6,
      "deletions": 43
    },
    "files": [
      {
        "sha": "a04258fd409ab0a98000fad0291aa7f1fe4c8a01",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 41,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "patch": "@@ -24,44 +24,6 @@ void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n     strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n }\n \n-/**\n- * Main network\n- */\n-class CBaseMainParams : public CBaseChainParams\n-{\n-public:\n-    CBaseMainParams()\n-    {\n-        nRPCPort = 8332;\n-    }\n-};\n-\n-/**\n- * Testnet (v3)\n- */\n-class CBaseTestNetParams : public CBaseChainParams\n-{\n-public:\n-    CBaseTestNetParams()\n-    {\n-        nRPCPort = 18332;\n-        strDataDir = \"testnet3\";\n-    }\n-};\n-\n-/*\n- * Regression test\n- */\n-class CBaseRegTestParams : public CBaseChainParams\n-{\n-public:\n-    CBaseRegTestParams()\n-    {\n-        nRPCPort = 18443;\n-        strDataDir = \"regtest\";\n-    }\n-};\n-\n static std::unique_ptr<CBaseChainParams> globalChainBaseParams;\n \n const CBaseChainParams& BaseParams()\n@@ -73,11 +35,11 @@ const CBaseChainParams& BaseParams()\n std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseMainParams());\n+        return MakeUnique<CBaseChainParams>(\"\", 8332);\n     else if (chain == CBaseChainParams::TESTNET)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseTestNetParams());\n+        return MakeUnique<CBaseChainParams>(\"testnet3\", 18332);\n     else if (chain == CBaseChainParams::REGTEST)\n-        return std::unique_ptr<CBaseChainParams>(new CBaseRegTestParams());\n+        return MakeUnique<CBaseChainParams>(\"regtest\", 18443);\n     else\n         throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }"
      },
      {
        "sha": "2cb860380ef8ce771a3bdbd7f1b8fc6de0c5f713",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "patch": "@@ -24,9 +24,10 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n \n-protected:\n-    CBaseChainParams() {}\n+    CBaseChainParams() = delete;\n+    CBaseChainParams(const std::string& data_dir, int rpc_port) : nRPCPort(rpc_port), strDataDir(data_dir) {}\n \n+private:\n     int nRPCPort;\n     std::string strDataDir;\n };"
      }
    ]
  },
  {
    "sha": "fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTUzZDVmMzYzNmFlZDA2NDgyM2JjMjIwZDgyOGM3ZmYwOGQxZDUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:47:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:47:23Z"
      },
      "message": "Merge #12394: gitian-builder.sh: fix --setup doc, since lxc is default\n\n464015f6f1 [scripts] gitian-builder.sh: fix --setup doc, LXC is default (Sjors Provoost)\n\nPull request description:\n\nTree-SHA512: 9e4c029bc0179265b20a6cecf13619f0e9d932b6911832d1aa6fc488c62c6e60bc5a10eb6eff4c668ef9cbc66942ca5c13177d0bc3b9259398780ce12a53a645",
      "tree": {
        "sha": "646f987600061249fbd9ba2a3497efbf0ee32944",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/646f987600061249fbd9ba2a3497efbf0ee32944"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJafwX7AAoJENLqSFDnUoslgjgQALLT98gSQT7DvPWDusXUEOku\nwtuiH3LEPaRXuZNAgiiWfG2deIJA5WfuCC5hEZyo3q3WejOgRG57ijttxYN9hJQc\nnC8kg0XNCeHEj+XhWKE49U/yYOnsNpIYlxVofj5PfSMeX5hA4IVKZD5yAA92w6mf\ntCxG1fuN76Eo20grlOonhhFO5uoAIV12tp7G/ZKnYi+wxSO9/v4utxgrFXG1fSMh\nnKjwylUi0/2rHfqlpnik+uPNT0UIN81knzoctQKt1AigRQjHWmm6b4sEhiIOWwtT\npnpvQgsDnJbGOqPuG3qY3ZSM9SmbiFzWf1xylOO9eisVzLwZm277Ok0ecf7jEE2u\nRv9Fuj/zr39fa0seRS0q11+w9WX/EQeGmxh0d3WHBG2u259ytEKSS1yeyBeuufyD\nO0SztG0WvED3L7hZJYIDMKF9uIU3Rbv7kPQ4uXtyrIQVDYQbaFoblfrYe1P33/si\nwnBLxHSamVU7gx9dTFvVN4W5l8lhzlL2foa0BaV0OmeW6CClSXpFK5tGYGehdYsB\nq3cbSKFj1szMfv4NkuP+h7W/RNC9TBIEFbF4GlRYB+oEtK+k9Lx+s+1DCNWZIfKN\nptM5kd8coDNeOxNY44IfMsuI9rWdwfRyXrxOzRDStESdAkaznHI59Kft2Q3fMsvi\nq4o3cJ6gEFeR5VNUyveh\n=FBTZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 646f987600061249fbd9ba2a3497efbf0ee32944\nparent 948c29cc0d2df72b2f9717b8d33c5e29e2f9582c\nparent 464015f6f163b0c43a1a8e20a2890ee837a6804d\nauthor MarcoFalke <falke.marco@gmail.com> 1518274041 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518274043 -0500\n\nMerge #12394: gitian-builder.sh: fix --setup doc, since lxc is default\n\n464015f6f1 [scripts] gitian-builder.sh: fix --setup doc, LXC is default (Sjors Provoost)\n\nPull request description:\n\nTree-SHA512: 9e4c029bc0179265b20a6cecf13619f0e9d932b6911832d1aa6fc488c62c6e60bc5a10eb6eff4c668ef9cbc66942ca5c13177d0bc3b9259398780ce12a53a645\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe53d5f3636aed064823bc220d828c7ff08d1d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/948c29cc0d2df72b2f9717b8d33c5e29e2f9582c"
      },
      {
        "sha": "464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/464015f6f163b0c43a1a8e20a2890ee837a6804d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/464015f6f163b0c43a1a8e20a2890ee837a6804d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d334c1642f3e3b90e90ebbcbeea1cbddb69afc54",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe53d5f3636aed064823bc220d828c7ff08d1d52/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe53d5f3636aed064823bc220d828c7ff08d1d52/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "patch": "@@ -47,7 +47,7 @@ Options:\n -j\t\tNumber of processes to use. Default 2\n -m\t\tMemory to allocate in MiB. Default 2000\n --kvm           Use KVM instead of LXC\n---setup         Set up the Gitian building environment. Uses KVM. If you want to use lxc, use the --lxc option. Only works on Debian-based systems (Ubuntu, Debian)\n+--setup         Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)\n --detach-sign   Create the assert file for detached signing. Will not commit anything.\n --no-commit     Do not commit anything to git\n -h|--help\tPrint this help message"
      }
    ]
  },
  {
    "sha": "a570098021be6a7b9f4589300ea655ae4633628e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTcwMDk4MDIxYmU2YTdiOWY0NTg5MzAwZWE2NTVhZTQ2MzM2Mjhl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:26Z"
      },
      "message": "Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba\n\n51d3ab34ba Merge #10: Add pushKV(key, boolean) function (replaces #5)\n129bad96d5 [tests] test pushKV for boolean values\nb3c44c947f Pushing boolean value to univalue correctly\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 51d3ab34ba2857f0d03dc07250cb4a2b5e712e67",
      "tree": {
        "sha": "a2dbaf30021c0a31eecc213cd84d600273d333b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2dbaf30021c0a31eecc213cd84d600273d333b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a570098021be6a7b9f4589300ea655ae4633628e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a570098021be6a7b9f4589300ea655ae4633628e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88411e98e50c92f8990733eee0bc353ac8f21a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88411e98e50c92f8990733eee0bc353ac8f21a35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88411e98e50c92f8990733eee0bc353ac8f21a35"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a570098021be6a7b9f4589300ea655ae4633628e/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a570098021be6a7b9f4589300ea655ae4633628e/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=a570098021be6a7b9f4589300ea655ae4633628e",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a570098021be6a7b9f4589300ea655ae4633628e/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a570098021be6a7b9f4589300ea655ae4633628e/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/object.cpp?ref=a570098021be6a7b9f4589300ea655ae4633628e",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      }
    ]
  },
  {
    "sha": "fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEzODhlZGIxN2ZjOWVjYTA5N2Q5MzU0MmY4ZDVkYjVhYTBjZjE3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:56:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T14:55:54Z"
      },
      "message": "univalue: Bump subtree",
      "tree": {
        "sha": "4fede1f3b0202ae2591bc0ce0d1efd3c42883274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fede1f3b0202ae2591bc0ce0d1efd3c42883274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJafwf6AAoJEM4rdWl+aaVIG0YL+wZnPT5r6DDug3ZbcsiMwVjv\nFn7OD1M1D261EYhlZvaaVeCTbF4mtaVsODlxHZ27OHz4e7IH/7lq9+rIDdoFYlVC\nlnRbXJg5NSwV7FtCJsVRb3VVRNR11urBqbzwX9PatGNUKx1eUMfnzqSbXjp6AMmO\nj1PnAuBktLs0246Zbo9rOeG/IhdcyL6w9Sl3+i3X9FN4e354k4YF/IG/Ttmyx/zF\nYFqXgIzna4xGM2EYNBMt8FzMt+O42HIHp+H6KznG0QHa7mDJyFOtURv0sD/aqLpp\nwuepSKYDfH0BqjkM1wM/sdr8PJZEsovTfqiTC5ZbUyXH/Laa5tPDM8W+Icxlv+Wc\nsDUMjvf8xGzQVTQoXaSfoE7pkhMtpicJ1IhJ76PuWICdF+k5SN8RSGsW3ZwQAmxr\nwgd9XTgOGjOoHcUN6elQn+zz5f9hwD22Rtk7gnumqC6IV60NsipiNP0MvxO+Ng0c\nEfFgUr5ZjLarT+jJQzYBKEz4xPi7uDdi3fwL/HTQFQ==\n=3Gh0\n-----END PGP SIGNATURE-----",
        "payload": "tree 4fede1f3b0202ae2591bc0ce0d1efd3c42883274\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nparent a570098021be6a7b9f4589300ea655ae4633628e\nauthor MarcoFalke <falke.marco@gmail.com> 1518274560 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518274554 -0500\n\nunivalue: Bump subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      },
      {
        "sha": "a570098021be6a7b9f4589300ea655ae4633628e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a570098021be6a7b9f4589300ea655ae4633628e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a570098021be6a7b9f4589300ea655ae4633628e"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "src/univalue/test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1388edb17fc9eca097d93542f8d5db5aa0cf17/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      }
    ]
  },
  {
    "sha": "91986ed206fa830e5985560c6895b0d30b375054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTk4NmVkMjA2ZmE4MzBlNTk4NTU2MGM2ODk1YjBkMzBiMzc1MDU0",
    "commit": {
      "author": {
        "name": "Karel Bilek",
        "email": "kb@karelbilek.com",
        "date": "2017-09-22T18:04:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T15:05:07Z"
      },
      "message": "scripted-diff: Use UniValue.pushKV instead of push_back(Pair())\n\n-BEGIN VERIFY SCRIPT-\ngit grep -l \"push_back(Pair\" | xargs sed -i \"s/push_back(Pair(\\(.*\\)));/pushKV(\\1);/g\"\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4422cee35e5ae916fd72d6dc5bff510e17e5814d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4422cee35e5ae916fd72d6dc5bff510e17e5814d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91986ed206fa830e5985560c6895b0d30b375054",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91986ed206fa830e5985560c6895b0d30b375054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054/comments",
    "author": {
      "login": "karelbilek",
      "id": 104945,
      "node_id": "MDQ6VXNlcjEwNDk0NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/104945?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/karelbilek",
      "html_url": "https://github.com/karelbilek",
      "followers_url": "https://api.github.com/users/karelbilek/followers",
      "following_url": "https://api.github.com/users/karelbilek/following{/other_user}",
      "gists_url": "https://api.github.com/users/karelbilek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/karelbilek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/karelbilek/subscriptions",
      "organizations_url": "https://api.github.com/users/karelbilek/orgs",
      "repos_url": "https://api.github.com/users/karelbilek/repos",
      "events_url": "https://api.github.com/users/karelbilek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/karelbilek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1388edb17fc9eca097d93542f8d5db5aa0cf17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1388edb17fc9eca097d93542f8d5db5aa0cf17"
      }
    ],
    "stats": {
      "total": 820,
      "additions": 410,
      "deletions": 410
    },
    "files": [
      {
        "sha": "eeeb3f51416744077344302d6a04121e6863ae4a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -540,23 +540,23 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n         for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n-            utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n-            utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+            utxo.pushKV(\"height\", (int32_t)coin.nHeight);\n+            utxo.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n \n             // include the script in a json output\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-            utxo.push_back(Pair(\"scriptPubKey\", o));\n+            utxo.pushKV(\"scriptPubKey\", o);\n             utxos.push_back(utxo);\n         }\n-        objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n+        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "189da6ae482819397fa455eaabb85d5f78e3fdf4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 122,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -88,48 +88,48 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion)));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", blockindex->nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n+    result.pushKV(\"merkleroot\", blockindex->hashMerkleRoot.GetHex());\n+    result.pushKV(\"time\", (int64_t)blockindex->nTime);\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)blockindex->nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", block.nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n-    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", block.nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n+    result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n     for(const auto& tx : block.vtx)\n     {\n@@ -142,19 +142,19 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         else\n             txs.push_back(tx->GetHash().GetHex());\n     }\n-    result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"time\", block.GetBlockTime());\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n@@ -235,8 +235,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -277,8 +277,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -319,8 +319,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -379,18 +379,18 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n-    info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n-    info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-    info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n-    info.push_back(Pair(\"time\", e.GetTime()));\n-    info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n-    info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-    info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n-    info.push_back(Pair(\"ancestorcount\", e.GetCountWithAncestors()));\n-    info.push_back(Pair(\"ancestorsize\", e.GetSizeWithAncestors()));\n-    info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n-    info.push_back(Pair(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString()));\n+    info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n+    info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n+    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"height\", (int)e.GetHeight());\n+    info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n+    info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n+    info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n+    info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n+    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n@@ -405,7 +405,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n         depends.push_back(dep);\n     }\n \n-    info.push_back(Pair(\"depends\", depends));\n+    info.pushKV(\"depends\", depends);\n }\n \n UniValue mempoolToJSON(bool fVerbose)\n@@ -419,7 +419,7 @@ UniValue mempoolToJSON(bool fVerbose)\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.pushKV(hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -526,7 +526,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -590,7 +590,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -952,14 +952,14 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     CCoinsStats stats;\n     FlushStateToDisk();\n     if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n-        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n-        ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n-        ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n-        ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n+        ret.pushKV(\"height\", (int64_t)stats.nHeight);\n+        ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n+        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+        ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n+        ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n+        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n@@ -1031,17 +1031,17 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n-        ret.push_back(Pair(\"confirmations\", 0));\n+        ret.pushKV(\"confirmations\", 0);\n     } else {\n-        ret.push_back(Pair(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1)));\n+        ret.pushKV(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1));\n     }\n-    ret.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+    ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n }\n@@ -1091,16 +1091,16 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n             activated = pindex->nHeight >= consensusParams.BIP65Height;\n             break;\n     }\n-    rv.push_back(Pair(\"status\", activated));\n+    rv.pushKV(\"status\", activated);\n     return rv;\n }\n \n static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n+    rv.pushKV(\"id\", name);\n+    rv.pushKV(\"version\", version);\n+    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n     return rv;\n }\n \n@@ -1109,29 +1109,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n+    case THRESHOLD_STARTED: rv.pushKV(\"status\", \"started\"); break;\n+    case THRESHOLD_LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n+    case THRESHOLD_ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n+    case THRESHOLD_FAILED: rv.pushKV(\"status\", \"failed\"); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n-        statsUV.push_back(Pair(\"period\", statsStruct.period));\n-        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n-        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n-        statsUV.push_back(Pair(\"count\", statsStruct.count));\n-        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        statsUV.pushKV(\"period\", statsStruct.period);\n+        statsUV.pushKV(\"threshold\", statsStruct.threshold);\n+        statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n+        statsUV.pushKV(\"count\", statsStruct.count);\n+        statsUV.pushKV(\"possible\", statsStruct.possible);\n+        rv.pushKV(\"statistics\", statsUV);\n     }\n     return rv;\n }\n@@ -1142,7 +1142,7 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params&\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1202,31 +1202,31 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n-    obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n-    obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n-    obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n-    obj.push_back(Pair(\"initialblockdownload\",  IsInitialBlockDownload()));\n-    obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n-    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n-    obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    obj.pushKV(\"chain\",                 Params().NetworkIDString());\n+    obj.pushKV(\"blocks\",                (int)chainActive.Height());\n+    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n+    obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n+    obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());\n+    obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n+    obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n+    obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n         CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n \n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+        obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n-        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n-            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+            obj.pushKV(\"prune_target_size\",  nPruneTarget);\n         }\n     }\n \n@@ -1240,10 +1240,10 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n         BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n     }\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n+    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n-    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -1331,11 +1331,11 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"height\", block->nHeight));\n-        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+        obj.pushKV(\"height\", block->nHeight);\n+        obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n-        obj.push_back(Pair(\"branchlen\", branchLen));\n+        obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n         if (chainActive.Contains(block)) {\n@@ -1357,7 +1357,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.push_back(Pair(\"status\", status));\n+        obj.pushKV(\"status\", status);\n \n         res.push_back(obj);\n     }\n@@ -1368,13 +1368,13 @@ UniValue getchaintips(const JSONRPCRequest& request)\n UniValue mempoolInfoToJSON()\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.pushKV(\"size\", (int64_t) mempool.size());\n+    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK())));\n-    ret.push_back(Pair(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n     return ret;\n }\n@@ -1581,15 +1581,15 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-    ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n-    ret.push_back(Pair(\"window_block_count\", blockcount));\n+    ret.pushKV(\"time\", (int64_t)pindex->nTime);\n+    ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n+    ret.pushKV(\"window_final_block_hash\", pindex->GetBlockHash().GetHex());\n+    ret.pushKV(\"window_block_count\", blockcount);\n     if (blockcount > 0) {\n-        ret.push_back(Pair(\"window_tx_count\", nTxDiff));\n-        ret.push_back(Pair(\"window_interval\", nTimeDiff));\n+        ret.pushKV(\"window_tx_count\", nTxDiff);\n+        ret.pushKV(\"window_interval\", nTimeDiff);\n         if (nTimeDiff > 0) {\n-            ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+            ret.pushKV(\"txrate\", ((double)nTxDiff) / nTimeDiff);\n         }\n     }\n "
      },
      {
        "sha": "dd74095b62dfe894762d463145dd54efd941c3a5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -211,14 +211,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n-    obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n-    obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n-    obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n+    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\",            Params().NetworkIDString());\n+    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -550,33 +550,33 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         UniValue entry(UniValue::VOBJ);\n \n-        entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n-        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+        entry.pushKV(\"data\", EncodeHexTx(tx));\n+        entry.pushKV(\"txid\", txHash.GetHex());\n+        entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n         for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.push_back(Pair(\"depends\", deps));\n+        entry.pushKV(\"depends\", deps);\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n             assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n-        entry.push_back(Pair(\"sigops\", nTxSigOps));\n-        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        entry.pushKV(\"sigops\", nTxSigOps);\n+        entry.pushKV(\"weight\", GetTransactionWeight(tx));\n \n         transactions.push_back(entry);\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n@@ -586,7 +586,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"capabilities\", aCaps));\n+    result.pushKV(\"capabilities\", aCaps);\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n@@ -605,7 +605,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -630,10 +630,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             }\n         }\n     }\n-    result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"rules\", aRules));\n-    result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.pushKV(\"version\", pblock->nVersion);\n+    result.pushKV(\"rules\", aRules);\n+    result.pushKV(\"vbavailable\", vbavailable);\n+    result.pushKV(\"vbrequired\", int(0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n@@ -643,15 +643,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         aMutable.push_back(\"version/force\");\n     }\n \n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n-    result.push_back(Pair(\"transactions\", transactions));\n-    result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n-    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-    result.push_back(Pair(\"mutable\", aMutable));\n-    result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+    result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n+    result.pushKV(\"transactions\", transactions);\n+    result.pushKV(\"coinbaseaux\", aux);\n+    result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n+    result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n+    result.pushKV(\"target\", hashTarget.GetHex());\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mutable\", aMutable);\n+    result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n@@ -660,17 +660,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n-    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    result.pushKV(\"sigoplimit\", nSigOpLimit);\n+    result.pushKV(\"sizelimit\", nSizeLimit);\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.pushKV(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT);\n     }\n-    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n-    result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    result.pushKV(\"curtime\", pblock->GetBlockTime());\n+    result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n-        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n@@ -823,12 +823,12 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n-        result.push_back(Pair(\"errors\", errors));\n+        result.pushKV(\"errors\", errors);\n     }\n-    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n }\n \n@@ -899,37 +899,37 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n-        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n         UniValue failbucket(UniValue::VOBJ);\n-        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n             // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n         } else {\n             // Output only information that is still meaningful in the event of error\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n             errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.push_back(Pair(\"errors\",errors));\n+            horizon_result.pushKV(\"errors\",errors);\n         }\n-        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n }"
      },
      {
        "sha": "3f89996e6119020f47d815cc1d9b253035411d43",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -86,20 +86,20 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n         return obj;\n     }\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,12 +110,12 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n         return obj;\n     }\n@@ -124,10 +124,10 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -141,9 +141,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n         return obj;\n     }\n };\n@@ -206,23 +206,23 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"isvalid\", isValid));\n+    ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n         std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n+        ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n+        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n         if (pwallet) {\n             const CKeyMetadata* meta = nullptr;\n@@ -240,10 +240,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n             if (meta) {\n-                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                ret.pushKV(\"timestamp\", meta->nCreateTime);\n                 if (!meta->hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n+                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n                 }\n             }\n         }\n@@ -304,8 +304,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"address\", EncodeDestination(innerID)));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;\n }\n@@ -439,12 +439,12 @@ static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n-    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n-    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n-    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n-    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n-    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    obj.pushKV(\"used\", uint64_t(stats.used));\n+    obj.pushKV(\"free\", uint64_t(stats.free));\n+    obj.pushKV(\"total\", uint64_t(stats.total));\n+    obj.pushKV(\"locked\", uint64_t(stats.locked));\n+    obj.pushKV(\"chunks_used\", uint64_t(stats.chunks_used));\n+    obj.pushKV(\"chunks_free\", uint64_t(stats.chunks_free));\n     return obj;\n }\n \n@@ -501,7 +501,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n         return obj;\n     } else if (mode == \"mallocinfo\") {\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "7a0225ff0de1f91f8b0f0858e4914c1695994892",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -130,59 +130,59 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n+        obj.pushKV(\"id\", stats.nodeid);\n+        obj.pushKV(\"addr\", stats.addrName);\n         if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n         if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+        obj.pushKV(\"lastsend\", stats.nLastSend);\n+        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"bytessent\", stats.nSendBytes);\n+        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+        obj.pushKV(\"conntime\", stats.nTimeConnected);\n+        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n         if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+            obj.pushKV(\"pingtime\", stats.dPingTime);\n         if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n+            obj.pushKV(\"minping\", stats.dMinPing);\n         if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n+            obj.pushKV(\"pingwait\", stats.dPingWait);\n+        obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n         // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+        obj.pushKV(\"subver\", stats.cleanSubVer);\n+        obj.pushKV(\"inbound\", stats.fInbound);\n+        obj.pushKV(\"addnode\", stats.m_manual_connection);\n+        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n             for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n-            obj.push_back(Pair(\"inflight\", heights));\n+            obj.pushKV(\"inflight\", heights);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+                sendPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+                recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n \n         ret.push_back(obj);\n     }\n@@ -331,16 +331,16 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     for (const AddedNodeInfo& info : vInfo) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", info.strAddedNode));\n-        obj.push_back(Pair(\"connected\", info.fConnected));\n+        obj.pushKV(\"addednode\", info.strAddedNode);\n+        obj.pushKV(\"connected\", info.fConnected);\n         UniValue addresses(UniValue::VARR);\n         if (info.fConnected) {\n             UniValue address(UniValue::VOBJ);\n-            address.push_back(Pair(\"address\", info.resolvedAddress.ToString()));\n-            address.push_back(Pair(\"connected\", info.fInbound ? \"inbound\" : \"outbound\"));\n+            address.pushKV(\"address\", info.resolvedAddress.ToString());\n+            address.pushKV(\"connected\", info.fInbound ? \"inbound\" : \"outbound\");\n             addresses.push_back(address);\n         }\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.pushKV(\"addresses\", addresses);\n         ret.push_back(obj);\n     }\n \n@@ -377,18 +377,18 @@ UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n-    obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n-    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n+    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n \n@@ -403,11 +403,11 @@ static UniValue GetNetworksInfo()\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n-        obj.push_back(Pair(\"name\", GetNetworkName(network)));\n-        obj.push_back(Pair(\"limited\", IsLimited(network)));\n-        obj.push_back(Pair(\"reachable\", IsReachable(network)));\n-        obj.push_back(Pair(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string()));\n-        obj.push_back(Pair(\"proxy_randomize_credentials\", proxy.randomize_credentials));\n+        obj.pushKV(\"name\", GetNetworkName(network));\n+        obj.pushKV(\"limited\", IsLimited(network));\n+        obj.pushKV(\"reachable\", IsReachable(network));\n+        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n         networks.push_back(obj);\n     }\n     return networks;\n@@ -458,34 +458,34 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",    strSubVersion));\n-    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n+    obj.pushKV(\"version\",       CLIENT_VERSION);\n+    obj.pushKV(\"subversion\",    strSubVersion);\n+    obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n-        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n-    obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n-        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n-    obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.pushKV(\"networks\",      GetNetworksInfo());\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n-            rec.push_back(Pair(\"address\", item.first.ToString()));\n-            rec.push_back(Pair(\"port\", item.second.nPort));\n-            rec.push_back(Pair(\"score\", item.second.nScore));\n+            rec.pushKV(\"address\", item.first.ToString());\n+            rec.pushKV(\"port\", item.second.nPort);\n+            rec.pushKV(\"score\", item.second.nScore);\n             localAddresses.push_back(rec);\n         }\n     }\n-    obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"localaddresses\", localAddresses);\n+    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -575,10 +575,10 @@ UniValue listbanned(const JSONRPCRequest& request)\n     {\n         const CBanEntry& banEntry = entry.second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", entry.first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+        rec.pushKV(\"address\", entry.first.ToString());\n+        rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n+        rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n+        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "0635b757c63c5b0bcc4110417fbea2ea5b8f14ea",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -26,21 +26,21 @@\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n+    request.pushKV(\"method\", strMethod);\n+    request.pushKV(\"params\", params);\n+    request.pushKV(\"id\", id);\n     return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n-        reply.push_back(Pair(\"result\", NullUniValue));\n+        reply.pushKV(\"result\", NullUniValue);\n     else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n+        reply.pushKV(\"result\", result);\n+    reply.pushKV(\"error\", error);\n+    reply.pushKV(\"id\", id);\n     return reply;\n }\n \n@@ -53,8 +53,8 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message)\n {\n     UniValue error(UniValue::VOBJ);\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n+    error.pushKV(\"code\", code);\n+    error.pushKV(\"message\", message);\n     return error;\n }\n "
      },
      {
        "sha": "fb70f9d5963c11b4593d0e27a1ae669c55798cf0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -47,17 +47,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n-        entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+        entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n-                entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n-                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n+                entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n+                entry.pushKV(\"time\", pindex->GetBlockTime());\n+                entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n             else\n-                entry.push_back(Pair(\"confirmations\", 0));\n+                entry.pushKV(\"confirmations\", 0);\n         }\n     }\n }\n@@ -190,7 +190,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n     TxToJSON(*tx, hash_block, result);\n     return result;\n }\n@@ -562,7 +562,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.push_back(Pair(\"p2sh\", EncodeDestination(CScriptID(script))));\n+        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n     }\n \n     return r;\n@@ -572,16 +572,16 @@ UniValue decodescript(const JSONRPCRequest& request)\n static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n-    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n-    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n         witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n     }\n-    entry.push_back(Pair(\"witness\", witness));\n-    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n-    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n-    entry.push_back(Pair(\"error\", strMessage));\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);\n }\n \n@@ -916,10 +916,10 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     bool fComplete = vErrors.empty();\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mtx)));\n-    result.push_back(Pair(\"complete\", fComplete));\n+    result.pushKV(\"hex\", EncodeHexTx(mtx));\n+    result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n-        result.push_back(Pair(\"errors\", vErrors));\n+        result.pushKV(\"errors\", vErrors);\n     }\n \n     return result;"
      },
      {
        "sha": "741ea253406dbe42342442346d288f942475ee06",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -790,7 +790,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.push_back(Pair(\"filename\", filepath.string()));\n+    reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n }"
      },
      {
        "sha": "b466cf1a81daaf4c6de7005b74709852638c7bff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 87,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91986ed206fa830e5985560c6895b0d30b375054/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=91986ed206fa830e5985560c6895b0d30b375054",
        "patch": "@@ -86,25 +86,25 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n-    entry.push_back(Pair(\"confirmations\", confirms));\n+    entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n-        entry.push_back(Pair(\"generated\", true));\n+        entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n-        entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime());\n     } else {\n-        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n+        entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }\n     uint256 hash = wtx.GetHash();\n-    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n-    entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n@@ -116,10 +116,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         else if (rbfState == RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125)\n             rbfStatus = \"yes\";\n     }\n-    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n-        entry.push_back(Pair(item.first, item.second));\n+        entry.pushKV(item.first, item.second);\n }\n \n std::string AccountFromValue(const UniValue& value)\n@@ -1463,13 +1463,13 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         {\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"account\",       strAccount);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             if (!fByAccounts)\n-                obj.push_back(Pair(\"label\", strAccount));\n+                obj.pushKV(\"label\", strAccount);\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n@@ -1478,7 +1478,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n                     transactions.push_back(_item.GetHex());\n                 }\n             }\n-            obj.push_back(Pair(\"txids\", transactions));\n+            obj.pushKV(\"txids\", transactions);\n             ret.push_back(obj);\n         }\n     }\n@@ -1491,10 +1491,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             int nConf = entry.second.nConf;\n             UniValue obj(UniValue::VOBJ);\n             if (entry.second.fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       entry.first));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"account\",       entry.first);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             ret.push_back(obj);\n         }\n     }\n@@ -1600,7 +1600,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     if (IsValidDestination(dest)) {\n-        entry.push_back(Pair(\"address\", EncodeDestination(dest)));\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n     }\n }\n \n@@ -1634,20 +1634,20 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.push_back(Pair(\"involvesWatchonly\", true));\n+                entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n-            entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n             if (pwallet->mapAddressBook.count(s.destination)) {\n-                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n             }\n-            entry.push_back(Pair(\"vout\", s.vout));\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n-            entry.push_back(Pair(\"abandoned\", wtx.isAbandoned()));\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n@@ -1665,28 +1665,28 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             {\n                 UniValue entry(UniValue::VOBJ);\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.push_back(Pair(\"involvesWatchonly\", true));\n+                    entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.push_back(Pair(\"account\", account));\n+                entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n-                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                        entry.pushKV(\"category\", \"orphan\");\n                     else if (wtx.GetBlocksToMaturity() > 0)\n-                        entry.push_back(Pair(\"category\", \"immature\"));\n+                        entry.pushKV(\"category\", \"immature\");\n                     else\n-                        entry.push_back(Pair(\"category\", \"generate\"));\n+                        entry.pushKV(\"category\", \"generate\");\n                 }\n                 else\n                 {\n-                    entry.push_back(Pair(\"category\", \"receive\"));\n+                    entry.pushKV(\"category\", \"receive\");\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.push_back(Pair(\"label\", account));\n+                    entry.pushKV(\"label\", account);\n                 }\n-                entry.push_back(Pair(\"vout\", r.vout));\n+                entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1702,12 +1702,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"account\", acentry.strAccount));\n-        entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", acentry.nTime));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n-        entry.push_back(Pair(\"comment\", acentry.strComment));\n+        entry.pushKV(\"account\", acentry.strAccount);\n+        entry.pushKV(\"category\", \"move\");\n+        entry.pushKV(\"time\", acentry.nTime);\n+        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n+        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n }\n@@ -1934,7 +1934,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n+        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n }\n@@ -2074,9 +2074,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"transactions\", transactions));\n-    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n-    ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n }\n@@ -2161,18 +2161,18 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n-    entry.push_back(Pair(\"details\", details));\n+    entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n-    entry.push_back(Pair(\"hex\", strHex));\n+    entry.pushKV(\"hex\", strHex);\n \n     return entry;\n }\n@@ -2702,8 +2702,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n-        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n         ret.push_back(o);\n     }\n \n@@ -2781,24 +2781,24 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n-    obj.push_back(Pair(\"walletname\", pwallet->GetName()));\n-    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\", (int64_t)kpExternalSize));\n+    obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"walletversion\", pwallet->GetVersion());\n+    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n+    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n+    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize)));\n+        obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+        obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -3003,31 +3003,31 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n \n         if (fValidAddress) {\n-            entry.push_back(Pair(\"address\", EncodeDestination(address)));\n+            entry.pushKV(\"address\", EncodeDestination(address));\n \n             if (pwallet->mapAddressBook.count(address)) {\n-                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n                 }\n             }\n         }\n \n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n-        entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n-        entry.push_back(Pair(\"safe\", out.fSafe));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n \n@@ -3229,9 +3229,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", changePosition));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeOut)));\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n+    result.pushKV(\"changepos\", changePosition);\n+    result.pushKV(\"fee\", ValueFromAmount(nFeeOut));\n \n     return result;\n }\n@@ -3373,14 +3373,14 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", txid.GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    result.pushKV(\"txid\", txid.GetHex());\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n     for (const std::string& error : errors) {\n         result_errors.push_back(error);\n     }\n-    result.push_back(Pair(\"errors\", result_errors));\n+    result.pushKV(\"errors\", result_errors);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjY0NTRjNTJhZTVkNTMzOTRmYzY1NDJlOWYzZTAyYTEzODhmYmU5",
    "commit": {
      "author": {
        "name": "Ernest Hemingway",
        "email": "coomni120@gmail.com",
        "date": "2018-02-10T19:15:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-10T19:17:05Z"
      },
      "message": "Improve \"Turn Windows Features On or Off\" step",
      "tree": {
        "sha": "29f8f7de647483264fcaf464f7ba94e121357277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29f8f7de647483264fcaf464f7ba94e121357277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaf0UxAAoJEM4rdWl+aaVIY/8L/igbclZjQysHL8riJDSPS6np\nAMmSSEFeYqrOMQPjIrXAbwCRZj9yWbgHSeX+z5pypWjh9npiILdT9avlB86cHH56\nRALx6H3ONpmlBXS9KNChdHwp+xy7BhaWSZdc3U5cX2dWDq5adaLCnXRkHTaO/iTo\ncyE+OYZ2njrFNPgZwpGaxw/zET7PtJzL1lwkXB3QA4u9C/wcnw4CbFZtgqazSQ5B\n01/VY4z73pqh1i+nEccJPBOvtYc8HSkkTZrif5zpJaHpbcr1V9LlryMGtXIWwD2a\n2M0dqetuo8D9VbXJLP5v2qn0tZkz/GyUr3ieqrfAPjyx0Nmn8GoTqk8URqR+JdM9\ngoUF2Z1vr28T7JhRbtjV2q61nt7+/ngm3dMcmIBYXyjBcPb1XlegCxjZfqXQn3vy\nwLKFv9qdgmZ6cV8NPajD2OIQ+0QaI7j+OQzxt1BQtkuJUeygDeDqwBk9GrG16uuM\nvXw/44wNhAa28bOVueLQNvKLTcVeLZrNvRSle9a1yw==\n=+7uT\n-----END PGP SIGNATURE-----",
        "payload": "tree 29f8f7de647483264fcaf464f7ba94e121357277\nparent f4c942e3615435c9e5d7ff0cefd935be08768d0c\nauthor Ernest Hemingway <coomni120@gmail.com> 1518290136 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518290225 -0500\n\nImprove \"Turn Windows Features On or Off\" step\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/comments",
    "author": {
      "login": "MCFX2",
      "id": 20264064,
      "node_id": "MDQ6VXNlcjIwMjY0MDY0",
      "avatar_url": "https://avatars.githubusercontent.com/u/20264064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MCFX2",
      "html_url": "https://github.com/MCFX2",
      "followers_url": "https://api.github.com/users/MCFX2/followers",
      "following_url": "https://api.github.com/users/MCFX2/following{/other_user}",
      "gists_url": "https://api.github.com/users/MCFX2/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MCFX2/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MCFX2/subscriptions",
      "organizations_url": "https://api.github.com/users/MCFX2/orgs",
      "repos_url": "https://api.github.com/users/MCFX2/repos",
      "events_url": "https://api.github.com/users/MCFX2/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MCFX2/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4c942e3615435c9e5d7ff0cefd935be08768d0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4c942e3615435c9e5d7ff0cefd935be08768d0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4c942e3615435c9e5d7ff0cefd935be08768d0c"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8af9437765fac041676007aa3d0216fcc9d593d3",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "patch": "@@ -34,10 +34,9 @@ Full instructions to install WSL are available on the above link.\n To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n 1. Enable the Windows Subsystem for Linux feature\n-  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux\n-  * Click OK\n-  * Restart if necessary\n+  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+  * Enable 'Windows Susbsystem for Linux'\n+  * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n   * Click Install"
      }
    ]
  },
  {
    "sha": "fa5f51830d2649cace2fc827084093019497c151",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVmNTE4MzBkMjY0OWNhY2UyZmM4MjcwODQwOTMwMTk0OTdjMTUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-11T03:12:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-11T03:11:31Z"
      },
      "message": "rpc: Reject deprecated reserveChangeKey in fundrawtransaction",
      "tree": {
        "sha": "8a1aabc02312abfdd013b8c9fc983c3011ef05d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1aabc02312abfdd013b8c9fc983c3011ef05d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5f51830d2649cace2fc827084093019497c151",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaf7RjAAoJEM4rdWl+aaVIT0kL/1fV/UX5odejT2qWky+PBThj\nYFRuj2lUZ7OJCeon5s3PH/THpVirxZnbXkvBA1WsbxHa/pVqQaPyhg0l1SRByIDG\nn/UxYDWOz3gH6wNI07XgYQhbGYCsvuiEjZ3+sEF6kLuGlctKnIKNXqpndzmxnV1V\nXpRKlMeSYJVBr+StFnB8rfUqUk8kyuZ390Q5Y50y8xtMUywqb3Y6UAjrPGI8nyPP\nFGxbFfQsjle8vMblqpeeQO12YNwGbAwI0/jzWPAwxjKZ78vqiJNMYlYr6gf51Ao8\ngsukFXAGxfUJCQU5No4q7qM1Mot7Wedd/uyMYRJVRizUrh91lYMYnJSetKtMgxOv\nkZBvR+zoYrGTrRbgUK6UcggfNP9vvBW0u8/JW+rHlbZoBUYxaYiF6Ng0iL873ima\nZwg0Fuygz482HQxAA4n7OD4FIE7qbSbotKOYh9DOeqYmVj267E9aKRUHs8e/TmaZ\niVWU/TJuLDGXjd5kPNysVpO01VxE81w9LOgIOxVwoQ==\n=Lyvo\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a1aabc02312abfdd013b8c9fc983c3011ef05d7\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor MarcoFalke <falke.marco@gmail.com> 1518318763 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518318691 -0500\n\nrpc: Reject deprecated reserveChangeKey in fundrawtransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f51830d2649cace2fc827084093019497c151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "528cb81a385fe0b793f19a79b4d9c74c10d3a4f6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -56,6 +56,13 @@ frequently tested on them.\n Notable changes\n ===============\n \n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n+\n Credits\n =======\n "
      },
      {
        "sha": "e9a63c1862ccd5dc1fb38d027c42a956dbd85a00",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -3129,7 +3129,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},"
      },
      {
        "sha": "4d3be18516d49373f082ea917afbdf2b5df34dd5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5f51830d2649cace2fc827084093019497c151/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5f51830d2649cace2fc827084093019497c151/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa5f51830d2649cace2fc827084093019497c151",
        "patch": "@@ -181,6 +181,9 @@ def run_test(self):\n \n         assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n+        # reserveChangeKey was deprecated and is now removed\n+        assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n+\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################"
      }
    ]
  },
  {
    "sha": "11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTM3NmI1NTgzYTI4Mzc3MmM4MmY2ZDMyZDAwMDdjZGJmNWI4ZWYw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-11T09:48:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-11T09:48:15Z"
      },
      "message": "Fix a-vs-an typos",
      "tree": {
        "sha": "743f25d31a5e9e181eb8a2e5a37bfcbcc2fee8ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/743f25d31a5e9e181eb8a2e5a37bfcbcc2fee8ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2790ef4acd445de0c659e59876d2b32abf604f0e",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -124,7 +124,7 @@ def main():\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)"
      },
      {
        "sha": "6e2b3c34a2236b4829104f8d5dd5468aef0678c9",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -5,7 +5,7 @@\n  * AUTOGENERATED by contrib/seeds/generate-seeds.py\n  *\n  * Each line contains a 16-byte IPv6 address and a port.\n- * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+ * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\n  */\n static SeedSpec6 pnSeed6_main[] = {\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x13,0x05,0x7f}, 8333},"
      },
      {
        "sha": "edf1c29ea1937c228e4827c82118e2125616dfde",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -101,7 +101,7 @@ QFont fixedPitchFont()\n #endif\n }\n \n-// Just some dummy data to generate an convincing random-looking (but consistent) address\n+// Just some dummy data to generate a convincing random-looking (but consistent) address\n static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};\n \n // Generate a dummy address with invalid CRC, starting with the network prefix."
      },
      {
        "sha": "fdd5cdad31bd58f6b272680d0c5ce4476fdf64d4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -692,7 +692,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n             \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\""
      },
      {
        "sha": "4dad6b44c56d909a15c3f7e939b012d249ea37cc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -104,7 +104,7 @@ enum\n     //\n     SCRIPT_VERIFY_MINIMALIF = (1U << 13),\n \n-    // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n+    // Signature(s) must be empty vector if a CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n "
      },
      {
        "sha": "c1338c3a8efb15308dce2cc0e9990fddeb84bd0e",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -29,7 +29,7 @@ enum isminetype\n typedef uint8_t isminefilter;\n \n /* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n- * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * and return ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n  * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n  * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n  */"
      },
      {
        "sha": "f8a1347c319fc5f29304dea0d0b8a767cf1c37e6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -92,11 +92,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a010047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n "
      },
      {
        "sha": "7e39ec759914026fab9ba3cce99f0f3a5b41efdf",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -23,11 +23,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a01ff47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n "
      },
      {
        "sha": "516ce8555b24e20080b42baa79b006ead64091f8",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various fingerprinting protections.\n \n-If an stale block more than a month old or its header are requested by a peer,\n+If a stale block more than a month old or its header are requested by a peer,\n the node should pretend that it does not have it to avoid fingerprinting.\n \"\"\"\n "
      },
      {
        "sha": "92126ef4b7537fc3809dccebca7703f4873c9403",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11376b5583a283772c82f6d32d0007cdbf5b8ef0/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "patch": "@@ -186,7 +186,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #THIS IS A INCOMPLETE FEATURE\n+        #THIS IS AN INCOMPLETE FEATURE\n         #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n         assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n "
      }
    ]
  },
  {
    "sha": "a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGI1ZDIwZjRmMTcxODI4YjJiZDcwYWIyNDA1YzQyYjFlNDUyZTVi",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-11T11:14:08Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-11T11:14:08Z"
      },
      "message": "Reset pblocktree before deleting LevelDB file",
      "tree": {
        "sha": "beff8292730edb510c67d192770cd909b507242c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beff8292730edb510c67d192770cd909b507242c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqAJYEACgkQV/+b28ww\nEAmvgg//QXYrY2kG1KMPcIBV7FUF0fJoJhfwn09J4EC60kfMESnRazsC4QpqzKUc\nx0uGN2kwEtnZJzXbySWzaQW+yl+R829Do7FLJ8P1+/zF+SYfm/5SmxFIJW6ehOFR\ndVmfFR9za8ayPIdKYJrrRMp7vbawS7baHDjz8OBIwcyQyipAgNlPloy8WWBFj7S5\nhguwtR0t8pTTsto7jfeq5cVipVhhDvezedFFB3+++aOMqUX4mV10iQz2Z3Owx+Ul\nI/ynpTy6E4R88yINcUCUVC1Z6Zg18powB49rMdIkz4VQ17Eoj7z8hEToFWjm5iKY\n++9/yvakWXpaMWLKzrEykDp3s9w6Ds4b8wkUw4OJIpT5k6qDU8LbbRyzCZEwR5b7\n/emzjGdSUXTe9Z2ZBGSUgYC5sn7qdiyR+BgFQiYa23kxK4kpKEaamRcSabyMvvGC\nQv9OPkng8owXN6Zgd/xyTz5jL1ft1XH2g3J3ZVEMXB4BlyZ8MV4qAUGg7Lfi5fTa\nxYfz70Sx758U218O64MueuEy60/dUYbzu1EYDA8IxQRQRWbolehO1ZZaMuREl43D\nfzLMivGj9AWMsW0iYXnydVRvnA+ktk6bTG4UYhcd/GkzEWDrP1wdRJytn9NAimea\nFRXuChTJXAYEbkWfAuHlcnMLPDxZvmgnL/nrY2/bTR+aFQAyY4o=\n=J8Nu\n-----END PGP SIGNATURE-----",
        "payload": "tree beff8292730edb510c67d192770cd909b507242c\nparent 89005ddad1c4a9732ecae47c7de34b4de157f48f\nauthor Sjors Provoost <sjors@sprovoost.nl> 1518347648 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1518347648 +0100\n\nReset pblocktree before deleting LevelDB file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ff875f9aae679112e47b4c59f53512b00540c3c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "patch": "@@ -1425,6 +1425,9 @@ bool AppInitMain()\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n                 pcoinscatcher.reset();\n+                // new CBlockTreeDB tries to delete the existing file, which\n+                // fails if it's still open from the previous loop. Close it first:\n+                pblocktree.reset();\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {"
      }
    ]
  },
  {
    "sha": "79313d2e2040451ef98a7a921c53f7736208c934",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTMxM2QyZTIwNDA0NTFlZjk4YTdhOTIxYzUzZjc3MzYyMDhjOTM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:11:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:11:37Z"
      },
      "message": "Merge #12401: Reset pblocktree before deleting LevelDB file\n\na8b5d20 Reset pblocktree before deleting LevelDB file (Sjors Provoost)\n\nPull request description:\n\n  #11043 repaced:\n\n  ```\n  delete pblocktree;\n  pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n  ```\n\n  With:\n\n  ```\n  pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n  ```\n\n  This is problematic because `new CBlockTreeDB` tries to delete the existing file, which will fail with `LOCK: already held by process` if it's still open. That's the case for QT.\n\n  When QT finds a problem with the index it will ask the user if they want to reindex. At that point it has already opened `blocks/index`.  It then runs this [while loop](https://github.com/bitcoin/bitcoin/blob/v0.16.0rc3/src/init.cpp#L1415) again with `fReset = 1`, resulting in the above error.\n\n  This change makes that error go away, presumably because `reset()` without an argument closes the file.\n\nTree-SHA512: fde8b546912f6773ac64da8476673cc270b125aa2d909212391d1a2001b35c8260a8772126b99dfd76b39faaa286feb7c43239185fe584bd4dc2bc04a64044ce",
      "tree": {
        "sha": "fd0db0a5107520d3c6158117a82ca4435d53f832",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd0db0a5107520d3c6158117a82ca4435d53f832"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79313d2e2040451ef98a7a921c53f7736208c934",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagVpJAAoJEB5K7WKYbNJd8CMH/RJ7tPFcwAfX+yg9h9rlE7GD\nrsJJe4RMxBF3PPHa7+W0/pGUgQSdc++ODnuls8FYHczEWwMFWU1dSWJ/Vvo7pL+2\n6g85V6oY44/teJihwIX9eeXvZsARQb/36EY3/sNLC6KsL3knisYvShKF7v00dpBN\nMwFj0kQzJU2fik9yy2Rkf4W2+u4drIZs2zT/8RnZA0HMjJGuEy+MDGFMNV7iKTVU\nqiMDjSzEjI7o7FZSg2l+Vp1rJVJDwn0gy83o5n1Hrc+atR95SZxArkhn8tIJ++Y6\n07kRgNuu5BgLLRV0pq3eAcj/TMpBjnMHWZ5TRSyRgm5NvRylm2IpZ9KELtewxlw=\n=jrkG\n-----END PGP SIGNATURE-----",
        "payload": "tree fd0db0a5107520d3c6158117a82ca4435d53f832\nparent fe53d5f3636aed064823bc220d828c7ff08d1d52\nparent a8b5d20f4f171828b2bd70ab2405c42b1e452e5b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518426688 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518426697 +0100\n\nMerge #12401: Reset pblocktree before deleting LevelDB file\n\na8b5d20 Reset pblocktree before deleting LevelDB file (Sjors Provoost)\n\nPull request description:\n\n  #11043 repaced:\n\n  ```\n  delete pblocktree;\n  pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReset);\n  ```\n\n  With:\n\n  ```\n  pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n  ```\n\n  This is problematic because `new CBlockTreeDB` tries to delete the existing file, which will fail with `LOCK: already held by process` if it's still open. That's the case for QT.\n\n  When QT finds a problem with the index it will ask the user if they want to reindex. At that point it has already opened `blocks/index`.  It then runs this [while loop](https://github.com/bitcoin/bitcoin/blob/v0.16.0rc3/src/init.cpp#L1415) again with `fReset = 1`, resulting in the above error.\n\n  This change makes that error go away, presumably because `reset()` without an argument closes the file.\n\nTree-SHA512: fde8b546912f6773ac64da8476673cc270b125aa2d909212391d1a2001b35c8260a8772126b99dfd76b39faaa286feb7c43239185fe584bd4dc2bc04a64044ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79313d2e2040451ef98a7a921c53f7736208c934",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe53d5f3636aed064823bc220d828c7ff08d1d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe53d5f3636aed064823bc220d828c7ff08d1d52"
      },
      {
        "sha": "a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8b5d20f4f171828b2bd70ab2405c42b1e452e5b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ff875f9aae679112e47b4c59f53512b00540c3c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79313d2e2040451ef98a7a921c53f7736208c934/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79313d2e2040451ef98a7a921c53f7736208c934/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=79313d2e2040451ef98a7a921c53f7736208c934",
        "patch": "@@ -1425,6 +1425,9 @@ bool AppInitMain()\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n                 pcoinscatcher.reset();\n+                // new CBlockTreeDB tries to delete the existing file, which\n+                // fails if it's still open from the previous loop. Close it first:\n+                pblocktree.reset();\n                 pblocktree.reset(new CBlockTreeDB(nBlockTreeDBCache, false, fReset));\n \n                 if (fReset) {"
      }
    ]
  },
  {
    "sha": "a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGNiYmRiMDdhNTk1MDcyMGFkZDA4YmUzY2YzYjA4NjVkYzYwNGUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:13:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:14:05Z"
      },
      "message": "Merge #12392: Fix ignoring tx data requests when fPauseSend is set on a peer\n\nc4af738 Fix ignoring tx data requests when fPauseSend is set on a peer (Matt Corallo)\n\nPull request description:\n\n  This resolves a bug introduced in\n  66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\n  to a series of transaction requests in a getdata we hit the send\n  buffer limit and set fPauseSend, we will skip one transaction per\n  call to ProcessGetData.\n\n  Bug found by Cory Fields (@theuni).\n\n  Probably worth slipping into 0.16 :/.\n\nTree-SHA512: a9313cef8ac6da31eb099c9925c8401a638220cf7bc9b7b7b83151ecae4b02630f2db45ef6668302b9bb0f38571afbd764993427f1ec9e4d74d9a3be6647d299",
      "tree": {
        "sha": "0b98108fa26a7370fa610ede8a2759b7643d77fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b98108fa26a7370fa610ede8a2759b7643d77fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagVrdAAoJEB5K7WKYbNJdBHYH/0ZQNq8ACLY8n0Qwrl2E2ET2\nOyw2F33GG+tHbOBipLTr8aIkTTn4JpNt4KHdaZN1wLzdpsras84ElS/wjfxsMDVV\n/0FKYYfeEJ+6rmHSq067muVHUyWqKQIpgAfOjLZhCOl5/qzQ7xWzfHR9+1ce9oE+\nfAuY8eiWb9R0BN07qAg+d/1WEmZakdqbFclK+VVLhTbeZvphQCzT2NcKeLKJ1GFV\nBZP0xBs1kdyutiChuML0GoB+ojL0XrTLIhT3BbaDNIOGzn48AigfMClcW9TmVZEr\n5ayUrChqOaAmaH8Z+sIpqpneygHwOUKGBgV30AotgjQmyh1AoHPB1RQ6pbcZf1Y=\n=Jhmi\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b98108fa26a7370fa610ede8a2759b7643d77fc\nparent 79313d2e2040451ef98a7a921c53f7736208c934\nparent c4af7387634765d254d1432746385cf35917d367\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518426831 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518426845 +0100\n\nMerge #12392: Fix ignoring tx data requests when fPauseSend is set on a peer\n\nc4af738 Fix ignoring tx data requests when fPauseSend is set on a peer (Matt Corallo)\n\nPull request description:\n\n  This resolves a bug introduced in\n  66aa1d58a158991a8014a91335b5bc9c00062f56 where, if when responding\n  to a series of transaction requests in a getdata we hit the send\n  buffer limit and set fPauseSend, we will skip one transaction per\n  call to ProcessGetData.\n\n  Bug found by Cory Fields (@theuni).\n\n  Probably worth slipping into 0.16 :/.\n\nTree-SHA512: a9313cef8ac6da31eb099c9925c8401a638220cf7bc9b7b7b83151ecae4b02630f2db45ef6668302b9bb0f38571afbd764993427f1ec9e4d74d9a3be6647d299\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79313d2e2040451ef98a7a921c53f7736208c934",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79313d2e2040451ef98a7a921c53f7736208c934",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79313d2e2040451ef98a7a921c53f7736208c934"
      },
      {
        "sha": "c4af7387634765d254d1432746385cf35917d367",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4af7387634765d254d1432746385cf35917d367",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4af7387634765d254d1432746385cf35917d367"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bf9307727a1e16b1ef6841672ba4117c3c6c7d14",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8cbbdb07a5950720add08be3cf3b0865dc604e2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8cbbdb07a5950720add08be3cf3b0865dc604e2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "patch": "@@ -1226,10 +1226,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         }\n     } // release cs_main\n \n-    if (it != pfrom->vRecvGetData.end()) {\n+    if (it != pfrom->vRecvGetData.end() && !pfrom->fPauseSend) {\n         const CInv &inv = *it;\n-        it++;\n         if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK) {\n+            it++;\n             ProcessGetBlockData(pfrom, consensusParams, inv, connman, interruptMsgProc);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGZjMjVmODJhMDFkOWZlYzI2MzgwZDk1OTE1ZGYzMWUxZmUyYzAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:34:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:34:49Z"
      },
      "message": "Merge #12381: Remove more boost threads\n\n004f999 boost: drop boost threads for [alert|block|wallet]notify (Cory Fields)\n0827267 boost: drop boost threads from torcontrol (Cory Fields)\nba91724 boost: remove useless threadGroup parameter from Discover (Cory Fields)\nf26866b boost: drop boost threads for upnp (Cory Fields)\n\nPull request description:\n\n  This doesn't completely get rid of boost::thread, but this batch should be easy to review, and leaves us with only threadGroup (scheduler + scriptcheck) remaining.\n\n  Note to reviewers: The upnp diff changes a bunch of whitespace, it's much more clear with 'git diff -w'\n\nTree-SHA512: 5a356798d0785f93ed143d1f0afafe890bc82f0d470bc969473da2d2aa78bcb9b096f7ba11b92564d546fb447d4bd0d347e7842994ea0170aafd53fda7e0a66e",
      "tree": {
        "sha": "7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagV+5AAoJEB5K7WKYbNJdo9oH/iR0lFqMgqPkcZNFYsGsFNL+\nPy1+QtO1dSTnvVmPPyz8TapDsotsYfhOs3RDmfA/8Nhdx1qnkxr8F6hpA6Xo/TuA\ntbmUZtq/WzFLit+23vk9v5PBsAd3XxlxCDKP2DrF/HNCrrge3p5HUWItrtCLKfnP\ndEDviY58LGVl6AYbHzTUfFgTV7lqe/+IVITgYQUzTNdLstPinmxPB33KPKZzGPRR\nA47CkSbMNTIE/w9BF5kaHvKAo7woOtyKYygNL+T0UgcCgRRwzLG5DHR4t8XOcnC4\nxw1405oQdsB5xP9fapmG6Xq5RwvyEai/2XM+8Y/Cl/Rv4TxxhsRebc17rKNcuWY=\n=uIpZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 7f2fed3a6bf1c3efad33e6244cf0d6cd4b308b47\nparent a8cbbdb07a5950720add08be3cf3b0865dc604e2\nparent 004f9999464c7ef4a57b281dcbb407e5d193e798\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518428079 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518428089 +0100\n\nMerge #12381: Remove more boost threads\n\n004f999 boost: drop boost threads for [alert|block|wallet]notify (Cory Fields)\n0827267 boost: drop boost threads from torcontrol (Cory Fields)\nba91724 boost: remove useless threadGroup parameter from Discover (Cory Fields)\nf26866b boost: drop boost threads for upnp (Cory Fields)\n\nPull request description:\n\n  This doesn't completely get rid of boost::thread, but this batch should be easy to review, and leaves us with only threadGroup (scheduler + scriptcheck) remaining.\n\n  Note to reviewers: The upnp diff changes a bunch of whitespace, it's much more clear with 'git diff -w'\n\nTree-SHA512: 5a356798d0785f93ed143d1f0afafe890bc82f0d470bc969473da2d2aa78bcb9b096f7ba11b92564d546fb447d4bd0d347e7842994ea0170aafd53fda7e0a66e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8cbbdb07a5950720add08be3cf3b0865dc604e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8cbbdb07a5950720add08be3cf3b0865dc604e2"
      },
      {
        "sha": "004f9999464c7ef4a57b281dcbb407e5d193e798",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004f9999464c7ef4a57b281dcbb407e5d193e798",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/004f9999464c7ef4a57b281dcbb407e5d193e798"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 74,
      "deletions": 58
    },
    "files": [
      {
        "sha": "b28baba7798c7ac2e66dcb18f5ff1d48969a904c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -165,6 +165,7 @@ void Interrupt()\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    InterruptMapPort();\n     if (g_connman)\n         g_connman->Interrupt();\n }\n@@ -191,7 +192,7 @@ void Shutdown()\n #ifdef ENABLE_WALLET\n     FlushWallets();\n #endif\n-    MapPort(false);\n+    StopMapPort();\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n@@ -545,7 +546,8 @@ static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex\n     std::string strCmd = gArgs.GetArg(\"-blocknotify\", \"\");\n     if (!strCmd.empty()) {\n         boost::replace_all(strCmd, \"%s\", pBlockIndex->GetBlockHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n }\n \n@@ -1674,12 +1676,14 @@ bool AppInitMain()\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);\n \n     if (gArgs.GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n-        StartTorControl(threadGroup, scheduler);\n+        StartTorControl();\n \n-    Discover(threadGroup);\n+    Discover();\n \n     // Map ports with UPnP\n-    MapPort(gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    if (gArgs.GetBoolArg(\"-upnp\", DEFAULT_UPNP)) {\n+        StartMapPort();\n+    }\n \n     CConnman::Options connOptions;\n     connOptions.nLocalServices = nLocalServices;"
      },
      {
        "sha": "201914685cb562160794311a730b5b8b509a32d1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 39,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -1459,6 +1459,8 @@ void CConnman::WakeMessageHandler()\n \n \n #ifdef USE_UPNP\n+static CThreadInterrupt g_upnp_interrupt;\n+static std::thread g_upnp_thread;\n void ThreadMapPort()\n {\n     std::string port = strprintf(\"%u\", GetListenPort());\n@@ -1509,35 +1511,29 @@ void ThreadMapPort()\n \n         std::string strDesc = \"Bitcoin \" + FormatFullVersion();\n \n-        try {\n-            while (true) {\n+        do {\n #ifndef UPNPDISCOVER_SUCCESS\n-                /* miniupnpc 1.5 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n+            /* miniupnpc 1.5 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n #else\n-                /* miniupnpc 1.6 */\n-                r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                                    port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n+            /* miniupnpc 1.6 */\n+            r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n+                                port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n #endif\n \n-                if(r!=UPNPCOMMAND_SUCCESS)\n-                    LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                        port, port, lanaddr, r, strupnperror(r));\n-                else\n-                    LogPrintf(\"UPnP Port Mapping successful.\\n\");\n-\n-                MilliSleep(20*60*1000); // Refresh every 20 minutes\n-            }\n-        }\n-        catch (const boost::thread_interrupted&)\n-        {\n-            r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n-            freeUPNPDevlist(devlist); devlist = nullptr;\n-            FreeUPNPUrls(&urls);\n-            throw;\n+            if(r!=UPNPCOMMAND_SUCCESS)\n+                LogPrintf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n+                    port, port, lanaddr, r, strupnperror(r));\n+            else\n+                LogPrintf(\"UPnP Port Mapping successful.\\n\");\n         }\n+        while(g_upnp_interrupt.sleep_for(std::chrono::minutes(20)));\n+\n+        r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n+        LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n+        freeUPNPDevlist(devlist); devlist = nullptr;\n+        FreeUPNPUrls(&urls);\n     } else {\n         LogPrintf(\"No valid UPnP IGDs found\\n\");\n         freeUPNPDevlist(devlist); devlist = nullptr;\n@@ -1546,27 +1542,39 @@ void ThreadMapPort()\n     }\n }\n \n-void MapPort(bool fUseUPnP)\n+void StartMapPort()\n {\n-    static std::unique_ptr<boost::thread> upnp_thread;\n+    if (!g_upnp_thread.joinable()) {\n+        assert(!g_upnp_interrupt);\n+        g_upnp_thread = std::thread((std::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+    }\n+}\n \n-    if (fUseUPnP)\n-    {\n-        if (upnp_thread) {\n-            upnp_thread->interrupt();\n-            upnp_thread->join();\n-        }\n-        upnp_thread.reset(new boost::thread(boost::bind(&TraceThread<void (*)()>, \"upnp\", &ThreadMapPort)));\n+void InterruptMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_interrupt();\n     }\n-    else if (upnp_thread) {\n-        upnp_thread->interrupt();\n-        upnp_thread->join();\n-        upnp_thread.reset();\n+}\n+\n+void StopMapPort()\n+{\n+    if(g_upnp_thread.joinable()) {\n+        g_upnp_thread.join();\n+        g_upnp_interrupt.reset();\n     }\n }\n \n #else\n-void MapPort(bool)\n+void StartMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void InterruptMapPort()\n+{\n+    // Intentionally left blank.\n+}\n+void StopMapPort()\n {\n     // Intentionally left blank.\n }\n@@ -2121,7 +2129,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void Discover(boost::thread_group& threadGroup)\n+void Discover()\n {\n     if (!fDiscover)\n         return;"
      },
      {
        "sha": "8378a303b8b1e13149ba53e3399d4f914d1bc826",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -37,10 +37,6 @@\n class CScheduler;\n class CNode;\n \n-namespace boost {\n-    class thread_group;\n-} // namespace boost\n-\n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n@@ -441,8 +437,10 @@ class CConnman\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n-void Discover(boost::thread_group& threadGroup);\n-void MapPort(bool fUseUPnP);\n+void Discover();\n+void StartMapPort();\n+void InterruptMapPort();\n+void StopMapPort();\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n "
      },
      {
        "sha": "909be1c26419e25ec8e4816c217f3676d6127c4e",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -315,7 +315,12 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             break;\n         case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n-            MapPort(value.toBool());\n+            if (value.toBool()) {\n+                StartMapPort();\n+            } else {\n+                InterruptMapPort();\n+                StopMapPort();\n+            }\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();"
      },
      {
        "sha": "717d1cf7e54140406fbfe0c1b2134bcd98c361a5",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -731,7 +731,7 @@ void TorController::reconnect_cb(evutil_socket_t fd, short what, void *arg)\n \n /****** Thread ********/\n static struct event_base *gBase;\n-static boost::thread torControlThread;\n+static std::thread torControlThread;\n \n static void TorControlThread()\n {\n@@ -740,7 +740,7 @@ static void TorControlThread()\n     event_base_dispatch(gBase);\n }\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n+void StartTorControl()\n {\n     assert(!gBase);\n #ifdef WIN32\n@@ -754,7 +754,7 @@ void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return;\n     }\n \n-    torControlThread = boost::thread(boost::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n+    torControlThread = std::thread(std::bind(&TraceThread<void (*)()>, \"torcontrol\", &TorControlThread));\n }\n \n void InterruptTorControl()"
      },
      {
        "sha": "2be6701fa5263fe5c8e85ce7b22904d4a0772268",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -13,7 +13,7 @@\n extern const std::string DEFAULT_TOR_CONTROL;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n-void StartTorControl(boost::thread_group& threadGroup, CScheduler& scheduler);\n+void StartTorControl();\n void InterruptTorControl();\n void StopTorControl();\n "
      },
      {
        "sha": "371460a6f034bf0eb2c7d98180909ed21c3cfd82",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -1182,7 +1182,8 @@ static void AlertNotify(const std::string& strMessage)\n     safeStatus = singleQuote+safeStatus+singleQuote;\n     boost::replace_all(strCmd, \"%s\", safeStatus);\n \n-    boost::thread t(runCommand, strCmd); // thread runs free\n+    std::thread t(runCommand, strCmd);\n+    t.detach(); // thread runs free\n }\n \n static void CheckForkWarningConditions()"
      },
      {
        "sha": "513819606b6e573f497169a298f68ada54759cc7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dfc25f82a01d9fec26380d95915df31e1fe2c02/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "patch": "@@ -34,7 +34,6 @@\n #include <future>\n \n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/thread.hpp>\n \n std::vector<CWalletRef> vpwallets;\n /** Transaction fee set by the user */\n@@ -976,7 +975,8 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n     if (!strCmd.empty())\n     {\n         boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n-        boost::thread t(runCommand, strCmd); // thread runs free\n+        std::thread t(runCommand, strCmd);\n+        t.detach(); // thread runs free\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "108af52ef75a466be71d04bb973b794eca17e212",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDhhZjUyZWY3NWE0NjZiZTcxZDA0YmI5NzNiNzk0ZWNhMTdlMjEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:47:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T09:50:03Z"
      },
      "message": "Merge #12393: Fix a-vs-an typos\n\n11376b5 Fix a-vs-an typos (practicalswift)\n\nPull request description:\n\n  Fix a-vs-an typos.\n\nTree-SHA512: 2cf74c15656a20ec13d2da7d86a39d14e634db368833d92da06a78d1266950accfc4fcc89cfecdaadd46e6b48b17e6fad29080428e564871e78482c53f3e855c",
      "tree": {
        "sha": "240825d37691b1d99ce72b2502b706e9f451e635",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/240825d37691b1d99ce72b2502b706e9f451e635"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/108af52ef75a466be71d04bb973b794eca17e212",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagWNLAAoJEB5K7WKYbNJdDEcH/1YjIaLAdYUYCCcqI66t+mMz\nRPOpZAV+QT1Q86q6aOje5y+PBihJ4GtIHiHXKnh6ykFaC5mbV3MMm1skMhkf/yc6\nvzbSr7ulvo+2D3dMlpS7hBx9qtcoE6A5dq0TdGlMwNcXCZTjxzG7mCMTM+B2TSS4\nsyKb8S+/TjMLVyky6+AoH2D/uRigVIJEf8iT6MTGNRP3dSIHv6PaqVzfPw8kO7yr\nYPQdvj/G6uhXtHol+7Om+HPESypfLsjYaUJSOsMkemol2Br41KVyVgHG6D9DKtOe\n68bewK+AnCFgE2mgCtaOIGLZFrOAguD7uOB+q21R4KiuI4bUYaG+PqkdBYNAuM0=\n=Egcr\n-----END PGP SIGNATURE-----",
        "payload": "tree 240825d37691b1d99ce72b2502b706e9f451e635\nparent 0dfc25f82a01d9fec26380d95915df31e1fe2c02\nparent 11376b5583a283772c82f6d32d0007cdbf5b8ef0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518428825 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518429003 +0100\n\nMerge #12393: Fix a-vs-an typos\n\n11376b5 Fix a-vs-an typos (practicalswift)\n\nPull request description:\n\n  Fix a-vs-an typos.\n\nTree-SHA512: 2cf74c15656a20ec13d2da7d86a39d14e634db368833d92da06a78d1266950accfc4fcc89cfecdaadd46e6b48b17e6fad29080428e564871e78482c53f3e855c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/108af52ef75a466be71d04bb973b794eca17e212",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dfc25f82a01d9fec26380d95915df31e1fe2c02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dfc25f82a01d9fec26380d95915df31e1fe2c02"
      },
      {
        "sha": "11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11376b5583a283772c82f6d32d0007cdbf5b8ef0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11376b5583a283772c82f6d32d0007cdbf5b8ef0"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2790ef4acd445de0c659e59876d2b32abf604f0e",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -124,7 +124,7 @@ def main():\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n     g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n-    g.write(' * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'),'r') as f:\n         process_nodes(g, f, 'pnSeed6_main', 8333)"
      },
      {
        "sha": "6e2b3c34a2236b4829104f8d5dd5468aef0678c9",
        "filename": "src/chainparamsseeds.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/chainparamsseeds.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/chainparamsseeds.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsseeds.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -5,7 +5,7 @@\n  * AUTOGENERATED by contrib/seeds/generate-seeds.py\n  *\n  * Each line contains a 16-byte IPv6 address and a port.\n- * IPv4 as well as onion addresses are wrapped inside a IPv6 address accordingly.\n+ * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\n  */\n static SeedSpec6 pnSeed6_main[] = {\n     {{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x05,0x13,0x05,0x7f}, 8333},"
      },
      {
        "sha": "edf1c29ea1937c228e4827c82118e2125616dfde",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -101,7 +101,7 @@ QFont fixedPitchFont()\n #endif\n }\n \n-// Just some dummy data to generate an convincing random-looking (but consistent) address\n+// Just some dummy data to generate a convincing random-looking (but consistent) address\n static const uint8_t dummydata[] = {0xeb,0x15,0x23,0x1d,0xfc,0xeb,0x60,0x92,0x58,0x86,0xb6,0x7d,0x06,0x52,0x99,0x92,0x59,0x15,0xae,0xb1,0x72,0xc0,0x66,0x47};\n \n // Generate a dummy address with invalid CRC, starting with the network prefix."
      },
      {
        "sha": "fdd5cdad31bd58f6b272680d0c5ce4476fdf64d4",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -692,7 +692,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n             \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n             \"       {\\n\"\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\""
      },
      {
        "sha": "4dad6b44c56d909a15c3f7e939b012d249ea37cc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -104,7 +104,7 @@ enum\n     //\n     SCRIPT_VERIFY_MINIMALIF = (1U << 13),\n \n-    // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n+    // Signature(s) must be empty vector if a CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n "
      },
      {
        "sha": "c1338c3a8efb15308dce2cc0e9990fddeb84bd0e",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -29,7 +29,7 @@ enum isminetype\n typedef uint8_t isminefilter;\n \n /* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n- * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * and return ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n  * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n  * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n  */"
      },
      {
        "sha": "f8a1347c319fc5f29304dea0d0b8a767cf1c37e6",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -92,11 +92,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a010047304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH,NULLDUMMY\"],\n "
      },
      {
        "sha": "7e39ec759914026fab9ba3cce99f0f3a5b41efdf",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -23,11 +23,11 @@\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba260000000004a01ff47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1\"],\n+[\"As above, but using an OP_1\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000495147304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n \n-[\"As above, but using a OP_1NEGATE\"],\n+[\"As above, but using an OP_1NEGATE\"],\n [[[\"60a20bd93aa49ab4b28d514ec10b06e1829ce6818ec06cd3aabd013ebcdc4bb1\", 0, \"1 0x41 0x04cc71eb30d653c0c3163990c47b976f3fb3f37cccdcbedb169a1dfef58bbfbfaff7d8a473e7e2e6d317b87bafe8bde97e3cf8f065dec022b51d11fcdd0d348ac4 0x41 0x0461cbdcc5409fb4b4d42b51d33381354d80e550078cb532a34bfa2fcfdeb7d76519aecc62770f5b0e4ef8551946d8a540911abe3e7854a26f39f58b25c15342af 2 OP_CHECKMULTISIG\"]],\n \"0100000001b14bdcbc3e01bdaad36cc08e81e69c82e1060bc14e518db2b49aa43ad90ba26000000000494f47304402203f16c6f40162ab686621ef3000b04e75418a0c0cb2d8aebeac894ae360ac1e780220ddc15ecdfc3507ac48e1681a33eb60996631bf6bf5bc0a0682c4db743ce7ca2b01ffffffff0140420f00000000001976a914660d4ef3a743e3e696ad990364e555c271ad504b88ac00000000\", \"P2SH\"],\n "
      },
      {
        "sha": "516ce8555b24e20080b42baa79b006ead64091f8",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various fingerprinting protections.\n \n-If an stale block more than a month old or its header are requested by a peer,\n+If a stale block more than a month old or its header are requested by a peer,\n the node should pretend that it does not have it to avoid fingerprinting.\n \"\"\"\n "
      },
      {
        "sha": "92126ef4b7537fc3809dccebca7703f4873c9403",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/108af52ef75a466be71d04bb973b794eca17e212/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/108af52ef75a466be71d04bb973b794eca17e212/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=108af52ef75a466be71d04bb973b794eca17e212",
        "patch": "@@ -186,7 +186,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n-        #THIS IS A INCOMPLETE FEATURE\n+        #THIS IS AN INCOMPLETE FEATURE\n         #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n         assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n "
      }
    ]
  },
  {
    "sha": "b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGQ4NTQ5MGYwOWVhYjg0NDk3ZjdiMzUyYTZjYTJiM2Y0OGRlODE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:30:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:31:18Z"
      },
      "message": "Merge #11858: qa: Prepare tests for Windows\n\nfaefd29 qa: Prepare functional tests for Windows (MarcoFalke)\n\nPull request description:\n\n  * Pass `sys.executable` when calling a python script via the subprocess\n    module\n  * Don't remove the log file while it is still open and written to\n  * Properly use os.pathsep and os.path.sep when modifying the PATH\n    environment variable\n  * util-tests: Use os.path.join for Windows compatibility\n\n  Ref:  #8227\n\nTree-SHA512: c507a536af104b3bde4366b6634099db826532bd3e7c35d694b5883c550920643b3eab79c76703ca67e1044ed09979e855088f7324321c8d52112514e334d614",
      "tree": {
        "sha": "47f654eea6bec32d3ccc07565a6538c7edd1bab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47f654eea6bec32d3ccc07565a6538c7edd1bab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagWz2AAoJEB5K7WKYbNJd3HUIALlLA4UW7WcJQrMl86s/VM4Y\n0HEkdhRVEm/Jfmw2KJKR3/u4dG5Wi3vNF71ilwsfrWdXPjLCPkga+4qPFYoJGFql\n/WBHg1TWyRfX0uPTU+3u9zxAuhohU4dCmdqLL/uEpMzrGaGYFuXgqADuuV0i8/FK\n+DL2IqqRbvN3axpyHmylexqq6nk5wxClYsfwihkeHLoO/YZetuDFbJyay1TdVICk\nLe8rvFz16b4JXCEnLUttINMyvuUUJVckv7G2J4VlZRcmg7WjASe7omly4MXbVwH4\nFTRzu7Q1/zZfSfDDieulQ/qM+wb26WYivSO1BJOTu4ArOsRaIrSReP/CWUQhbbM=\n=SzgC\n-----END PGP SIGNATURE-----",
        "payload": "tree 47f654eea6bec32d3ccc07565a6538c7edd1bab0\nparent 108af52ef75a466be71d04bb973b794eca17e212\nparent faefd2923a00e82be794f090b4bd861c5c58c95a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518431417 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518431478 +0100\n\nMerge #11858: qa: Prepare tests for Windows\n\nfaefd29 qa: Prepare functional tests for Windows (MarcoFalke)\n\nPull request description:\n\n  * Pass `sys.executable` when calling a python script via the subprocess\n    module\n  * Don't remove the log file while it is still open and written to\n  * Properly use os.pathsep and os.path.sep when modifying the PATH\n    environment variable\n  * util-tests: Use os.path.join for Windows compatibility\n\n  Ref:  #8227\n\nTree-SHA512: c507a536af104b3bde4366b6634099db826532bd3e7c35d694b5883c550920643b3eab79c76703ca67e1044ed09979e855088f7324321c8d52112514e334d614\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d85490f09eab84497f7b352a6ca2b3f48de815",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "108af52ef75a466be71d04bb973b794eca17e212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/108af52ef75a466be71d04bb973b794eca17e212",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/108af52ef75a466be71d04bb973b794eca17e212"
      },
      {
        "sha": "faefd2923a00e82be794f090b4bd861c5c58c95a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faefd2923a00e82be794f090b4bd861c5c58c95a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faefd2923a00e82be794f090b4bd861c5c58c95a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a5e66bd9593d9d8366286fd0c661422558903c26",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -99,7 +99,9 @@ def main(self):\n \n         PortSeed.n = self.options.port_seed\n \n-        os.environ['PATH'] = self.options.srcdir + \":\" + self.options.srcdir + \"/qt:\" + os.environ['PATH']\n+        os.environ['PATH'] = self.options.srcdir + os.pathsep + \\\n+                             self.options.srcdir + os.path.sep + \"qt\" + os.pathsep + \\\n+                             os.environ['PATH']\n \n         check_json_precision()\n \n@@ -148,10 +150,11 @@ def main(self):\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n         if not self.options.nocleanup and not self.options.noshutdown and success != TestStatus.FAILED:\n-            self.log.info(\"Cleaning up\")\n-            shutil.rmtree(self.options.tmpdir)\n+            self.log.info(\"Cleaning up {} on exit\".format(self.options.tmpdir))\n+            cleanup_tree_on_exit = True\n         else:\n             self.log.warning(\"Not cleaning up dir %s\" % self.options.tmpdir)\n+            cleanup_tree_on_exit = False\n \n         if success == TestStatus.PASSED:\n             self.log.info(\"Tests successful\")\n@@ -164,6 +167,8 @@ def main(self):\n             self.log.error(\"Hint: Call {} '{}' to consolidate all logs\".format(os.path.normpath(os.path.dirname(os.path.realpath(__file__)) + \"/../combine_logs.py\"), self.options.tmpdir))\n             exit_code = TEST_EXIT_FAILED\n         logging.shutdown()\n+        if cleanup_tree_on_exit:\n+            shutil.rmtree(self.options.tmpdir)\n         sys.exit(exit_code)\n \n     # Methods to override in subclass test scripts."
      },
      {
        "sha": "0cf3424c71cca6386853395f915104bf3b1ac2fa",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -268,7 +268,7 @@ def main():\n     if args.help:\n         # Print help for test_runner.py, then print help of the first script (with args removed) and exit.\n         parser.print_help()\n-        subprocess.check_call([(config[\"environment\"][\"SRCDIR\"] + '/test/functional/' + test_list[0].split()[0])] + ['-h'])\n+        subprocess.check_call([sys.executable, os.path.join(config[\"environment\"][\"SRCDIR\"], 'test', 'functional', test_list[0].split()[0]), '-h'])\n         sys.exit(0)\n \n     check_script_list(config[\"environment\"][\"SRCDIR\"])\n@@ -312,7 +312,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n         try:\n-            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+            subprocess.check_output([sys.executable, tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n         except subprocess.CalledProcessError as e:\n             sys.stdout.buffer.write(e.output)\n             raise\n@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))\n@@ -412,7 +412,7 @@ def get_next(self):\n             tmpdir_arg = [\"--tmpdir={}\".format(testdir)]\n             self.jobs.append((t,\n                               time.time(),\n-                              subprocess.Popen([self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n+                              subprocess.Popen([sys.executable, self.tests_dir + test_argv[0]] + test_argv[1:] + self.flags + portseed_arg + tmpdir_arg,\n                                                universal_newlines=True,\n                                                stdout=log_stdout,\n                                                stderr=log_stderr),"
      },
      {
        "sha": "30bd13d0dc47d07a944d57f686bea20c1d20de2b",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4d85490f09eab84497f7b352a6ca2b3f48de815/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "patch": "@@ -44,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test\", \"util\", \"data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "c8b54b2044db2fafc561452afb44478a99fa83f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGI1NGIyMDQ0ZGIyZmFmYzU2MTQ1MmFmYjQ0NDc4YTk5ZmE4M2Yz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:41:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-12T10:41:12Z"
      },
      "message": "Merge #12351: Libraries: Use correct type ; avoid compiler warnings.\n\na25cb0f Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings. (murrayn)\n\nPull request description:\n\n  ptrdiff_t is a more strictly correct type, and gets rid of compiler warnings.\n\nTree-SHA512: 39718a5cdc10e698f14185f4622a9b439728bce619bd8b3a86f2b99ed5b056cf5a8545a3e5c4bc8a6a01b845fb73510036cee5e6d2629c58df26be692a957fba",
      "tree": {
        "sha": "7b2e66f3bbca81c2047d7418a219d20cbf2777ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b2e66f3bbca81c2047d7418a219d20cbf2777ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagW9IAAoJEB5K7WKYbNJdcqMIAIdtR+QEmIapUNBEZtvNmIDa\nbZ6lLfw1vGf4mehJ4O+fUNpEyKIoFt9G5kNM9z64y8vorLDJO2jxhdTxJ0aTLKhl\n/MVagE8f4pCHV590uMDDWzqSo4RAM7alrEtNTJVj7ntiuIM82NFmBc5venIgfJDT\nfIsHTNyWtQdsJaSedckY31nZ3nuGlyGHxmI40Q07QmaxeaGacaMDXA4d5gqQDZKH\n2tArt7MuR+cYjL9wSPWs6A3uIjyz9zzk+Us+21S1fOx5FC4TQ1/IR4GFmrCZDZCu\nRzek8Qw0kQZrlynoEH8BfqTvO2lvyb5/rQX62rmgMSEAFfRNTXLkRFgQ0Z3pJno=\n=DcnE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b2e66f3bbca81c2047d7418a219d20cbf2777ad\nparent b4d85490f09eab84497f7b352a6ca2b3f48de815\nparent a25cb0f313315bd987834aa5f500b5682a9c3cd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518432060 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518432072 +0100\n\nMerge #12351: Libraries: Use correct type ; avoid compiler warnings.\n\na25cb0f Use ptrdiff_t type to more precisely indicate usage and avoid compiler warnings. (murrayn)\n\nPull request description:\n\n  ptrdiff_t is a more strictly correct type, and gets rid of compiler warnings.\n\nTree-SHA512: 39718a5cdc10e698f14185f4622a9b439728bce619bd8b3a86f2b99ed5b056cf5a8545a3e5c4bc8a6a01b845fb73510036cee5e6d2629c58df26be692a957fba\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b54b2044db2fafc561452afb44478a99fa83f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d85490f09eab84497f7b352a6ca2b3f48de815",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d85490f09eab84497f7b352a6ca2b3f48de815"
      },
      {
        "sha": "a25cb0f313315bd987834aa5f500b5682a9c3cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25cb0f313315bd987834aa5f500b5682a9c3cd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25cb0f313315bd987834aa5f500b5682a9c3cd5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ffed989be12cae5c081d19e711fec684c7e1cfd1",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8b54b2044db2fafc561452afb44478a99fa83f3/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8b54b2044db2fafc561452afb44478a99fa83f3/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=c8b54b2044db2fafc561452afb44478a99fa83f3",
        "patch": "@@ -44,15 +44,15 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 1 || !(*privkey & 0x80u)) {\n         return 0;\n     }\n-    size_t lenb = *privkey & ~0x80u; privkey++;\n+    ptrdiff_t lenb = *privkey & ~0x80u; privkey++;\n     if (lenb < 1 || lenb > 2) {\n         return 0;\n     }\n     if (end - privkey < lenb) {\n         return 0;\n     }\n     /* sequence length */\n-    size_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n+    ptrdiff_t len = privkey[lenb-1] | (lenb > 1 ? privkey[lenb-2] << 8 : 0u);\n     privkey += lenb;\n     if (end - privkey < len) {\n         return 0;\n@@ -66,7 +66,7 @@ static int ec_privkey_import_der(const secp256k1_context* ctx, unsigned char *ou\n     if (end - privkey < 2 || privkey[0] != 0x04u) {\n         return 0;\n     }\n-    size_t oslen = privkey[1];\n+    ptrdiff_t oslen = privkey[1];\n     privkey += 2;\n     if (oslen > 32 || end - privkey < oslen) {\n         return 0;"
      }
    ]
  },
  {
    "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTZmOWY0ZWJjNzRmNGUzMDJlMWUzOGVlMjFlMWFmZDBkMzgyM2Nl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-12T10:43:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-12T10:44:10Z"
      },
      "message": "Merge #12296: wallet: Only fee-bump non-conflicted/non-confirmed txes\n\nfaca18dcf feebumper: Use PreconditionChecks to determine bump eligibility (MarcoFalke)\n718f05cab move more bumpfee prechecks to feebumper::PreconditionChecks (Gregory Sanders)\n\nPull request description:\n\n  This only affects the gui.\n\n  Fee-bumping of transactions that are already confirmed or are already conflicted by other transactions should not be offered by the gui.\n\nTree-SHA512: 4acf8087c69fbe5bd67be0485cdb4055e985bbf84acc420aa786ad31e2dc6c2572baaac1d359af10a6907790f626edca690285d9a46ae5440900ea12624c634f",
      "tree": {
        "sha": "4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqBb/oACgkQHrd2uwPH\nki0F6Q/+KinMbXgEUtchNAnvI5Hx/by+s81AyYTa2RP4UPPan7inxvFRMhvGWuIy\nr0m0k360RmNDwPI0IWqbws/jWlIEr7crLp7dVmFSQjwUYAKjmq7x53ZtM/CbYXJi\ngzg05Ug3KGDDIPRgPlMJ4iuY+MNwW9fzk2/7C72llJqXAsLfDuH970UT5U/5D9K+\nFNqt3NbkNosOPhG3CTM0R7wB/evao5qP3ft50KyT5YUjijkRaIeBhpHLK0LJhM+M\nq287ogT7EFTEhCr0Z69m6qePlZXthTbKEhen0ntJX9NQchZIYYUvlSkEkOa/9hTq\nHweB/q+gCfQInbpbEGXowGdd/jcEQtaa37MfpAwaAI6hM0DT+nNjBRDeawb17Q/7\ndFfEk1L9AVm04ICg3vQKQ3y+PdMaWvZcCm4e+0VdiRjeNBYdJPC1/XuMq9CBvH20\nd/5eeQxMeK8ObWJegpIIge/HnDwWqxESnKIO5gWuI89L0sR4jEt2S4X+XObXoNjS\n6djNcK3PgE42kyPhOX0mb4xuswAZOXjflQKDK9JiaDSGcJQVTvSaNwMeTd2Bd9Uq\nE7CWRkuzn4lyS8mVAuzRlalCiz3bd2LjHBSo9Weg28DBJ48fDFDpeAzDuCmUXSvB\nZJVlYM1yk6WmB2eik3vv1/8C1PpJ/cQRuiSZj9h4K9UbBCH1LBE=\n=k5Ed\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b0f0b8e75b0bd954fb85f2f62ca6cc81a2d6d79\nparent c8b54b2044db2fafc561452afb44478a99fa83f3\nparent faca18dcf499e36069ce5fcd3e02a5ee86639436\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518432225 +1030\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518432250 +1030\n\nMerge #12296: wallet: Only fee-bump non-conflicted/non-confirmed txes\n\nfaca18dcf feebumper: Use PreconditionChecks to determine bump eligibility (MarcoFalke)\n718f05cab move more bumpfee prechecks to feebumper::PreconditionChecks (Gregory Sanders)\n\nPull request description:\n\n  This only affects the gui.\n\n  Fee-bumping of transactions that are already confirmed or are already conflicted by other transactions should not be offered by the gui.\n\nTree-SHA512: 4acf8087c69fbe5bd67be0485cdb4055e985bbf84acc420aa786ad31e2dc6c2572baaac1d359af10a6907790f626edca690285d9a46ae5440900ea12624c634f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8b54b2044db2fafc561452afb44478a99fa83f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8b54b2044db2fafc561452afb44478a99fa83f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8b54b2044db2fafc561452afb44478a99fa83f3"
      },
      {
        "sha": "faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faca18dcf499e36069ce5fcd3e02a5ee86639436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faca18dcf499e36069ce5fcd3e02a5ee86639436"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 27,
      "deletions": 20
    },
    "files": [
      {
        "sha": "5234a697100e70ddc564c431a9847c2f18cebd93",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 19,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "patch": "@@ -65,16 +65,39 @@ static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWallet\n         errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n+\n+    if (!SignalsOptInRBF(*wtx.tx)) {\n+        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n+        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", wtx.GetHash().ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+    // check that original tx consists entirely of our inputs\n+    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n+    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        return feebumper::Result::WALLET_ERROR;\n+    }\n+\n+\n     return feebumper::Result::OK;\n }\n \n namespace feebumper {\n \n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid)\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n {\n     LOCK2(cs_main, wallet->cs_wallet);\n     const CWalletTx* wtx = wallet->GetWalletTx(txid);\n-    return wtx && SignalsOptInRBF(*wtx->tx) && !wtx->mapValue.count(\"replaced_by_txid\");\n+    if (wtx == nullptr) return false;\n+\n+    std::vector<std::string> errors_dummy;\n+    feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n+    return res == feebumper::Result::OK;\n }\n \n Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n@@ -94,23 +117,6 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         return result;\n     }\n \n-    if (!SignalsOptInRBF(*wtx.tx)) {\n-        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", txid.ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // check that original tx consists entirely of our inputs\n-    // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet->IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n-        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n@@ -228,6 +234,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         }\n     }\n \n+\n     return Result::OK;\n }\n "
      },
      {
        "sha": "7e36a9766be7ef50a7009c83d2016119306079be",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "patch": "@@ -26,7 +26,7 @@ enum class Result\n };\n \n //! Return whether transaction can be bumped.\n-bool TransactionCanBeBumped(CWallet* wallet, const uint256& txid);\n+bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid);\n \n //! Create bumpfee transaction.\n Result CreateTransaction(const CWallet* wallet,"
      }
    ]
  },
  {
    "sha": "2e9406c0c588ddf6f039fd3ff73c978177483869",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTk0MDZjMGM1ODhkZGY2ZjAzOWZkM2ZmNzNjOTc4MTc3NDgzODY5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-12T11:17:36Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-12T11:18:22Z"
      },
      "message": "Interrupt loading thread after shutdown request",
      "tree": {
        "sha": "ca8084f0ef61e3549c2b8a51981ff2d1a8492337",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca8084f0ef61e3549c2b8a51981ff2d1a8492337"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9406c0c588ddf6f039fd3ff73c978177483869",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "895a5358f4ff05b86641df68a9b9b4189e0d658c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e9406c0c588ddf6f039fd3ff73c978177483869/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e9406c0c588ddf6f039fd3ff73c978177483869/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2e9406c0c588ddf6f039fd3ff73c978177483869",
        "patch": "@@ -680,11 +680,13 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (!ActivateBestChain(state, chainparams)) {\n         LogPrintf(\"Failed to connect best block\");\n         StartShutdown();\n+        return;\n     }\n \n     if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n+        return;\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {"
      }
    ]
  },
  {
    "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGMwMGY2OGM0OWM0NmEzODBhOThkMDYyMzNmOTA1MjhiOGUyNTU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T14:13:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T14:13:38Z"
      },
      "message": "Merge #12193: RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)\n\n91986ed206 scripted-diff: Use UniValue.pushKV instead of push_back(Pair()) (Karel Bilek)\na570098021 Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba (MarcoFalke)\n\nPull request description:\n\n  Rebased version of  #11386 by karel-3d.\n\n  Closes:  #11386\n\nTree-SHA512: f3a81447e573c17e75813f4d41ceb34b9980eac81efdd98ddb149d7c51f792be7e2b32239b6ea7e6da68af23897afa6b4ce3f4e8070f9c4adf5105bf6075f2a0",
      "tree": {
        "sha": "fab1c9ce142f896f26b9b79b80e5f5379d28aa73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fab1c9ce142f896f26b9b79b80e5f5379d28aa73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJagaESAAoJENLqSFDnUosl7+4P/RV10Qc26wy6uWeAVLY7tB+g\nEqUBmuSNsaBOunclxi2x7zzRohbYTW7KVHrRDjTwyrZm3oYLuzBe8nSc4/QrDlVj\nQXx8evjcTYuJibFA7jsO5DZKsF9ISVW0bdfj+Dmcr9GEhtUnYDFuWasGg5CXMMkC\ntunFlz7RINHqjTljFu9N1Q8xkF/ECIPi1B9iXHXURsNVJtN1QwDtDBATjIlCosl8\nR5rwfgAjFHDUt/b8l8RehHToyembIFs7u2E3R7i6nNgSMTO9N4Xf/QymtEj23lfR\n4L+5qn3sr2hud31AAJES8TISB446BP07xIYGxoRajWnt8NuEhSNNCxs2AwPPyr63\nGdUe9DyEMeS9aiHaxW+pFIV/9Zi7Y23zQ+BntCF/zTMlJUW8oHOWmTPSEHRHbQNL\nhhWeIqSNXXd+TMTueC3mATTVLH6nwTXvtjCCS2RIozpQFxwfJb99OM8Ck4hGPU/v\nY+05FIaHS/vwlXH9p4i2+rLdWO8kQcXsDLprjQkwYcx70Q90KpqhdW5ezareMF1C\nYAehUHazPXtW8surV+LAy3dlzGnW87p/yfwF1dC3b2eB8BcCQ3zJ8cGPOYJ6jqn6\nFSGwlRNkR9YWgzXe1iO6uQYkMF8URs14+w6AO7NvjDlUhupxlUbaGFGc3bMPj+OJ\ns6AlCkkrBIJGiFX7Xe0t\n=yhOm\n-----END PGP SIGNATURE-----",
        "payload": "tree fab1c9ce142f896f26b9b79b80e5f5379d28aa73\nparent 8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce\nparent 91986ed206fa830e5985560c6895b0d30b375054\nauthor MarcoFalke <falke.marco@gmail.com> 1518444810 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518444818 -0500\n\nMerge #12193: RPC: Consistently use UniValue.pushKV instead of push_back(Pair()) (karel-3d)\n\n91986ed206 scripted-diff: Use UniValue.pushKV instead of push_back(Pair()) (Karel Bilek)\na570098021 Squashed 'src/univalue/' changes from 07947ff2da..51d3ab34ba (MarcoFalke)\n\nPull request description:\n\n  Rebased version of  #11386 by karel-3d.\n\n  Closes:  #11386\n\nTree-SHA512: f3a81447e573c17e75813f4d41ceb34b9980eac81efdd98ddb149d7c51f792be7e2b32239b6ea7e6da68af23897afa6b4ce3f4e8070f9c4adf5105bf6075f2a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e6f9f4ebc74f4e302e1e38ee21e1afd0d3823ce"
      },
      {
        "sha": "91986ed206fa830e5985560c6895b0d30b375054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91986ed206fa830e5985560c6895b0d30b375054",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91986ed206fa830e5985560c6895b0d30b375054"
      }
    ],
    "stats": {
      "total": 838,
      "additions": 427,
      "deletions": 411
    },
    "files": [
      {
        "sha": "eeeb3f51416744077344302d6a04121e6863ae4a",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -540,23 +540,23 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.push_back(Pair(\"chainHeight\", chainActive.Height()));\n-        objGetUTXOResponse.push_back(Pair(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex()));\n-        objGetUTXOResponse.push_back(Pair(\"bitmap\", bitmapStringRepresentation));\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n         for (const CCoin& coin : outs) {\n             UniValue utxo(UniValue::VOBJ);\n-            utxo.push_back(Pair(\"height\", (int32_t)coin.nHeight));\n-            utxo.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+            utxo.pushKV(\"height\", (int32_t)coin.nHeight);\n+            utxo.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n \n             // include the script in a json output\n             UniValue o(UniValue::VOBJ);\n             ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-            utxo.push_back(Pair(\"scriptPubKey\", o));\n+            utxo.pushKV(\"scriptPubKey\", o);\n             utxos.push_back(utxo);\n         }\n-        objGetUTXOResponse.push_back(Pair(\"utxos\", utxos));\n+        objGetUTXOResponse.pushKV(\"utxos\", utxos);\n \n         // return json string\n         std::string strJSON = objGetUTXOResponse.write() + \"\\n\";"
      },
      {
        "sha": "189da6ae482819397fa455eaabb85d5f78e3fdf4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 122,
        "deletions": 122,
        "changes": 244,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -88,48 +88,48 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", blockindex->nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion)));\n-    result.push_back(Pair(\"merkleroot\", blockindex->hashMerkleRoot.GetHex()));\n-    result.push_back(Pair(\"time\", (int64_t)blockindex->nTime));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)blockindex->nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", blockindex->nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", blockindex->nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", blockindex->nVersion));\n+    result.pushKV(\"merkleroot\", blockindex->hashMerkleRoot.GetHex());\n+    result.pushKV(\"time\", (int64_t)blockindex->nTime);\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)blockindex->nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", blockindex->nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails)\n {\n     AssertLockHeld(cs_main);\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hash\", blockindex->GetBlockHash().GetHex()));\n+    result.pushKV(\"hash\", blockindex->GetBlockHash().GetHex());\n     int confirmations = -1;\n     // Only report confirmations if the block is on the main chain\n     if (chainActive.Contains(blockindex))\n         confirmations = chainActive.Height() - blockindex->nHeight + 1;\n-    result.push_back(Pair(\"confirmations\", confirmations));\n-    result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n-    result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n-    result.push_back(Pair(\"height\", blockindex->nHeight));\n-    result.push_back(Pair(\"version\", block.nVersion));\n-    result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n-    result.push_back(Pair(\"merkleroot\", block.hashMerkleRoot.GetHex()));\n+    result.pushKV(\"confirmations\", confirmations);\n+    result.pushKV(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS));\n+    result.pushKV(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION));\n+    result.pushKV(\"weight\", (int)::GetBlockWeight(block));\n+    result.pushKV(\"height\", blockindex->nHeight);\n+    result.pushKV(\"version\", block.nVersion);\n+    result.pushKV(\"versionHex\", strprintf(\"%08x\", block.nVersion));\n+    result.pushKV(\"merkleroot\", block.hashMerkleRoot.GetHex());\n     UniValue txs(UniValue::VARR);\n     for(const auto& tx : block.vtx)\n     {\n@@ -142,19 +142,19 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         else\n             txs.push_back(tx->GetHash().GetHex());\n     }\n-    result.push_back(Pair(\"tx\", txs));\n-    result.push_back(Pair(\"time\", block.GetBlockTime()));\n-    result.push_back(Pair(\"mediantime\", (int64_t)blockindex->GetMedianTimePast()));\n-    result.push_back(Pair(\"nonce\", (uint64_t)block.nNonce));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", block.nBits)));\n-    result.push_back(Pair(\"difficulty\", GetDifficulty(blockindex)));\n-    result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n+    result.pushKV(\"tx\", txs);\n+    result.pushKV(\"time\", block.GetBlockTime());\n+    result.pushKV(\"mediantime\", (int64_t)blockindex->GetMedianTimePast());\n+    result.pushKV(\"nonce\", (uint64_t)block.nNonce);\n+    result.pushKV(\"bits\", strprintf(\"%08x\", block.nBits));\n+    result.pushKV(\"difficulty\", GetDifficulty(blockindex));\n+    result.pushKV(\"chainwork\", blockindex->nChainWork.GetHex());\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n }\n \n@@ -235,8 +235,8 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -277,8 +277,8 @@ UniValue waitforblock(const JSONRPCRequest& request)\n     }\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -319,8 +319,8 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n         block = latestblock;\n     }\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"hash\", block.hash.GetHex()));\n-    ret.push_back(Pair(\"height\", block.height));\n+    ret.pushKV(\"hash\", block.hash.GetHex());\n+    ret.pushKV(\"height\", block.height);\n     return ret;\n }\n \n@@ -379,18 +379,18 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n {\n     AssertLockHeld(mempool.cs);\n \n-    info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n-    info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n-    info.push_back(Pair(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee())));\n-    info.push_back(Pair(\"time\", e.GetTime()));\n-    info.push_back(Pair(\"height\", (int)e.GetHeight()));\n-    info.push_back(Pair(\"descendantcount\", e.GetCountWithDescendants()));\n-    info.push_back(Pair(\"descendantsize\", e.GetSizeWithDescendants()));\n-    info.push_back(Pair(\"descendantfees\", e.GetModFeesWithDescendants()));\n-    info.push_back(Pair(\"ancestorcount\", e.GetCountWithAncestors()));\n-    info.push_back(Pair(\"ancestorsize\", e.GetSizeWithAncestors()));\n-    info.push_back(Pair(\"ancestorfees\", e.GetModFeesWithAncestors()));\n-    info.push_back(Pair(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString()));\n+    info.pushKV(\"size\", (int)e.GetTxSize());\n+    info.pushKV(\"fee\", ValueFromAmount(e.GetFee()));\n+    info.pushKV(\"modifiedfee\", ValueFromAmount(e.GetModifiedFee()));\n+    info.pushKV(\"time\", e.GetTime());\n+    info.pushKV(\"height\", (int)e.GetHeight());\n+    info.pushKV(\"descendantcount\", e.GetCountWithDescendants());\n+    info.pushKV(\"descendantsize\", e.GetSizeWithDescendants());\n+    info.pushKV(\"descendantfees\", e.GetModFeesWithDescendants());\n+    info.pushKV(\"ancestorcount\", e.GetCountWithAncestors());\n+    info.pushKV(\"ancestorsize\", e.GetSizeWithAncestors());\n+    info.pushKV(\"ancestorfees\", e.GetModFeesWithAncestors());\n+    info.pushKV(\"wtxid\", mempool.vTxHashes[e.vTxHashesIdx].first.ToString());\n     const CTransaction& tx = e.GetTx();\n     std::set<std::string> setDepends;\n     for (const CTxIn& txin : tx.vin)\n@@ -405,7 +405,7 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n         depends.push_back(dep);\n     }\n \n-    info.push_back(Pair(\"depends\", depends));\n+    info.pushKV(\"depends\", depends);\n }\n \n UniValue mempoolToJSON(bool fVerbose)\n@@ -419,7 +419,7 @@ UniValue mempoolToJSON(bool fVerbose)\n             const uint256& hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(hash.ToString(), info));\n+            o.pushKV(hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -526,7 +526,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -590,7 +590,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);\n             entryToJSON(info, e);\n-            o.push_back(Pair(_hash.ToString(), info));\n+            o.pushKV(_hash.ToString(), info);\n         }\n         return o;\n     }\n@@ -952,14 +952,14 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n     CCoinsStats stats;\n     FlushStateToDisk();\n     if (GetUTXOStats(pcoinsdbview.get(), stats)) {\n-        ret.push_back(Pair(\"height\", (int64_t)stats.nHeight));\n-        ret.push_back(Pair(\"bestblock\", stats.hashBlock.GetHex()));\n-        ret.push_back(Pair(\"transactions\", (int64_t)stats.nTransactions));\n-        ret.push_back(Pair(\"txouts\", (int64_t)stats.nTransactionOutputs));\n-        ret.push_back(Pair(\"bogosize\", (int64_t)stats.nBogoSize));\n-        ret.push_back(Pair(\"hash_serialized_2\", stats.hashSerialized.GetHex()));\n-        ret.push_back(Pair(\"disk_size\", stats.nDiskSize));\n-        ret.push_back(Pair(\"total_amount\", ValueFromAmount(stats.nTotalAmount)));\n+        ret.pushKV(\"height\", (int64_t)stats.nHeight);\n+        ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n+        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+        ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n+        ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n+        ret.pushKV(\"hash_serialized_2\", stats.hashSerialized.GetHex());\n+        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n@@ -1031,17 +1031,17 @@ UniValue gettxout(const JSONRPCRequest& request)\n \n     BlockMap::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n-        ret.push_back(Pair(\"confirmations\", 0));\n+        ret.pushKV(\"confirmations\", 0);\n     } else {\n-        ret.push_back(Pair(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1)));\n+        ret.pushKV(\"confirmations\", (int64_t)(pindex->nHeight - coin.nHeight + 1));\n     }\n-    ret.push_back(Pair(\"value\", ValueFromAmount(coin.out.nValue)));\n+    ret.pushKV(\"value\", ValueFromAmount(coin.out.nValue));\n     UniValue o(UniValue::VOBJ);\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n-    ret.push_back(Pair(\"scriptPubKey\", o));\n-    ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.pushKV(\"scriptPubKey\", o);\n+    ret.pushKV(\"coinbase\", (bool)coin.fCoinBase);\n \n     return ret;\n }\n@@ -1091,16 +1091,16 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n             activated = pindex->nHeight >= consensusParams.BIP65Height;\n             break;\n     }\n-    rv.push_back(Pair(\"status\", activated));\n+    rv.pushKV(\"status\", activated);\n     return rv;\n }\n \n static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n-    rv.push_back(Pair(\"id\", name));\n-    rv.push_back(Pair(\"version\", version));\n-    rv.push_back(Pair(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams)));\n+    rv.pushKV(\"id\", name);\n+    rv.pushKV(\"version\", version);\n+    rv.pushKV(\"reject\", SoftForkMajorityDesc(version, pindex, consensusParams));\n     return rv;\n }\n \n@@ -1109,29 +1109,29 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     UniValue rv(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n     switch (thresholdState) {\n-    case THRESHOLD_DEFINED: rv.push_back(Pair(\"status\", \"defined\")); break;\n-    case THRESHOLD_STARTED: rv.push_back(Pair(\"status\", \"started\")); break;\n-    case THRESHOLD_LOCKED_IN: rv.push_back(Pair(\"status\", \"locked_in\")); break;\n-    case THRESHOLD_ACTIVE: rv.push_back(Pair(\"status\", \"active\")); break;\n-    case THRESHOLD_FAILED: rv.push_back(Pair(\"status\", \"failed\")); break;\n+    case THRESHOLD_DEFINED: rv.pushKV(\"status\", \"defined\"); break;\n+    case THRESHOLD_STARTED: rv.pushKV(\"status\", \"started\"); break;\n+    case THRESHOLD_LOCKED_IN: rv.pushKV(\"status\", \"locked_in\"); break;\n+    case THRESHOLD_ACTIVE: rv.pushKV(\"status\", \"active\"); break;\n+    case THRESHOLD_FAILED: rv.pushKV(\"status\", \"failed\"); break;\n     }\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n-        rv.push_back(Pair(\"bit\", consensusParams.vDeployments[id].bit));\n+        rv.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n-    rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n-    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n+    rv.pushKV(\"startTime\", consensusParams.vDeployments[id].nStartTime);\n+    rv.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    rv.pushKV(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id));\n     if (THRESHOLD_STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n-        statsUV.push_back(Pair(\"period\", statsStruct.period));\n-        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n-        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n-        statsUV.push_back(Pair(\"count\", statsStruct.count));\n-        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n-        rv.push_back(Pair(\"statistics\", statsUV));\n+        statsUV.pushKV(\"period\", statsStruct.period);\n+        statsUV.pushKV(\"threshold\", statsStruct.threshold);\n+        statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n+        statsUV.pushKV(\"count\", statsStruct.count);\n+        statsUV.pushKV(\"possible\", statsStruct.possible);\n+        rv.pushKV(\"statistics\", statsUV);\n     }\n     return rv;\n }\n@@ -1142,7 +1142,7 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const Consensus::Params&\n     // A timeout value of 0 guarantees a softfork will never be activated.\n     // This is used when softfork codes are merged without specifying the deployment schedule.\n     if (consensusParams.vDeployments[id].nTimeout > 0)\n-        bip9_softforks.push_back(Pair(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id)));\n+        bip9_softforks.pushKV(VersionBitsDeploymentInfo[id].name, BIP9SoftForkDesc(consensusParams, id));\n }\n \n UniValue getblockchaininfo(const JSONRPCRequest& request)\n@@ -1202,31 +1202,31 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n-    obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n-    obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n-    obj.push_back(Pair(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast()));\n-    obj.push_back(Pair(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip())));\n-    obj.push_back(Pair(\"initialblockdownload\",  IsInitialBlockDownload()));\n-    obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));\n-    obj.push_back(Pair(\"size_on_disk\",          CalculateCurrentUsage()));\n-    obj.push_back(Pair(\"pruned\",                fPruneMode));\n+    obj.pushKV(\"chain\",                 Params().NetworkIDString());\n+    obj.pushKV(\"blocks\",                (int)chainActive.Height());\n+    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n+    obj.pushKV(\"difficulty\",            (double)GetDifficulty());\n+    obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());\n+    obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), chainActive.Tip()));\n+    obj.pushKV(\"initialblockdownload\",  IsInitialBlockDownload());\n+    obj.pushKV(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex());\n+    obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n+    obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n         CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n         }\n \n-        obj.push_back(Pair(\"pruneheight\",        block->nHeight));\n+        obj.pushKV(\"pruneheight\",        block->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetArg(\"-prune\", 0) != 1);\n-        obj.push_back(Pair(\"automatic_pruning\",  automatic_pruning));\n+        obj.pushKV(\"automatic_pruning\",  automatic_pruning);\n         if (automatic_pruning) {\n-            obj.push_back(Pair(\"prune_target_size\",  nPruneTarget));\n+            obj.pushKV(\"prune_target_size\",  nPruneTarget);\n         }\n     }\n \n@@ -1240,10 +1240,10 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     for (int pos = Consensus::DEPLOYMENT_CSV; pos != Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++pos) {\n         BIP9SoftForkDescPushBack(bip9_softforks, consensusParams, static_cast<Consensus::DeploymentPos>(pos));\n     }\n-    obj.push_back(Pair(\"softforks\",             softforks));\n-    obj.push_back(Pair(\"bip9_softforks\", bip9_softforks));\n+    obj.pushKV(\"softforks\",             softforks);\n+    obj.pushKV(\"bip9_softforks\", bip9_softforks);\n \n-    obj.push_back(Pair(\"warnings\", GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"warnings\", GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -1331,11 +1331,11 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     for (const CBlockIndex* block : setTips)\n     {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"height\", block->nHeight));\n-        obj.push_back(Pair(\"hash\", block->phashBlock->GetHex()));\n+        obj.pushKV(\"height\", block->nHeight);\n+        obj.pushKV(\"hash\", block->phashBlock->GetHex());\n \n         const int branchLen = block->nHeight - chainActive.FindFork(block)->nHeight;\n-        obj.push_back(Pair(\"branchlen\", branchLen));\n+        obj.pushKV(\"branchlen\", branchLen);\n \n         std::string status;\n         if (chainActive.Contains(block)) {\n@@ -1357,7 +1357,7 @@ UniValue getchaintips(const JSONRPCRequest& request)\n             // No clue.\n             status = \"unknown\";\n         }\n-        obj.push_back(Pair(\"status\", status));\n+        obj.pushKV(\"status\", status);\n \n         res.push_back(obj);\n     }\n@@ -1368,13 +1368,13 @@ UniValue getchaintips(const JSONRPCRequest& request)\n UniValue mempoolInfoToJSON()\n {\n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n-    ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n-    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    ret.pushKV(\"size\", (int64_t) mempool.size());\n+    ret.pushKV(\"bytes\", (int64_t) mempool.GetTotalTxSize());\n+    ret.pushKV(\"usage\", (int64_t) mempool.DynamicMemoryUsage());\n     size_t maxmempool = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n-    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK())));\n-    ret.push_back(Pair(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    ret.pushKV(\"maxmempool\", (int64_t) maxmempool);\n+    ret.pushKV(\"mempoolminfee\", ValueFromAmount(std::max(mempool.GetMinFee(maxmempool), ::minRelayTxFee).GetFeePerK()));\n+    ret.pushKV(\"minrelaytxfee\", ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n \n     return ret;\n }\n@@ -1581,15 +1581,15 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"time\", (int64_t)pindex->nTime));\n-    ret.push_back(Pair(\"txcount\", (int64_t)pindex->nChainTx));\n-    ret.push_back(Pair(\"window_final_block_hash\", pindex->GetBlockHash().GetHex()));\n-    ret.push_back(Pair(\"window_block_count\", blockcount));\n+    ret.pushKV(\"time\", (int64_t)pindex->nTime);\n+    ret.pushKV(\"txcount\", (int64_t)pindex->nChainTx);\n+    ret.pushKV(\"window_final_block_hash\", pindex->GetBlockHash().GetHex());\n+    ret.pushKV(\"window_block_count\", blockcount);\n     if (blockcount > 0) {\n-        ret.push_back(Pair(\"window_tx_count\", nTxDiff));\n-        ret.push_back(Pair(\"window_interval\", nTimeDiff));\n+        ret.pushKV(\"window_tx_count\", nTxDiff);\n+        ret.pushKV(\"window_interval\", nTimeDiff);\n         if (nTimeDiff > 0) {\n-            ret.push_back(Pair(\"txrate\", ((double)nTxDiff) / nTimeDiff));\n+            ret.pushKV(\"txrate\", ((double)nTxDiff) / nTimeDiff);\n         }\n     }\n "
      },
      {
        "sha": "dd74095b62dfe894762d463145dd54efd941c3a5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -211,14 +211,14 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n     LOCK(cs_main);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n-    obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n-    obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n-    obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n-    obj.push_back(Pair(\"warnings\",         GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"blocks\",           (int)chainActive.Height());\n+    obj.pushKV(\"currentblockweight\", (uint64_t)nLastBlockWeight);\n+    obj.pushKV(\"currentblocktx\",   (uint64_t)nLastBlockTx);\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty());\n+    obj.pushKV(\"networkhashps\",    getnetworkhashps(request));\n+    obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n+    obj.pushKV(\"chain\",            Params().NetworkIDString());\n+    obj.pushKV(\"warnings\",         GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -550,33 +550,33 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         UniValue entry(UniValue::VOBJ);\n \n-        entry.push_back(Pair(\"data\", EncodeHexTx(tx)));\n-        entry.push_back(Pair(\"txid\", txHash.GetHex()));\n-        entry.push_back(Pair(\"hash\", tx.GetWitnessHash().GetHex()));\n+        entry.pushKV(\"data\", EncodeHexTx(tx));\n+        entry.pushKV(\"txid\", txHash.GetHex());\n+        entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n \n         UniValue deps(UniValue::VARR);\n         for (const CTxIn &in : tx.vin)\n         {\n             if (setTxIndex.count(in.prevout.hash))\n                 deps.push_back(setTxIndex[in.prevout.hash]);\n         }\n-        entry.push_back(Pair(\"depends\", deps));\n+        entry.pushKV(\"depends\", deps);\n \n         int index_in_template = i - 1;\n-        entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n+        entry.pushKV(\"fee\", pblocktemplate->vTxFees[index_in_template]);\n         int64_t nTxSigOps = pblocktemplate->vTxSigOpsCost[index_in_template];\n         if (fPreSegWit) {\n             assert(nTxSigOps % WITNESS_SCALE_FACTOR == 0);\n             nTxSigOps /= WITNESS_SCALE_FACTOR;\n         }\n-        entry.push_back(Pair(\"sigops\", nTxSigOps));\n-        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n+        entry.pushKV(\"sigops\", nTxSigOps);\n+        entry.pushKV(\"weight\", GetTransactionWeight(tx));\n \n         transactions.push_back(entry);\n     }\n \n     UniValue aux(UniValue::VOBJ);\n-    aux.push_back(Pair(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end())));\n+    aux.pushKV(\"flags\", HexStr(COINBASE_FLAGS.begin(), COINBASE_FLAGS.end()));\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n@@ -586,7 +586,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"capabilities\", aCaps));\n+    result.pushKV(\"capabilities\", aCaps);\n \n     UniValue aRules(UniValue::VARR);\n     UniValue vbavailable(UniValue::VOBJ);\n@@ -605,7 +605,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             case THRESHOLD_STARTED:\n             {\n                 const struct VBDeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n-                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                vbavailable.pushKV(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit);\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n@@ -630,10 +630,10 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n             }\n         }\n     }\n-    result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"rules\", aRules));\n-    result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.pushKV(\"version\", pblock->nVersion);\n+    result.pushKV(\"rules\", aRules);\n+    result.pushKV(\"vbavailable\", vbavailable);\n+    result.pushKV(\"vbrequired\", int(0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n@@ -643,15 +643,15 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         aMutable.push_back(\"version/force\");\n     }\n \n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n-    result.push_back(Pair(\"transactions\", transactions));\n-    result.push_back(Pair(\"coinbaseaux\", aux));\n-    result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue));\n-    result.push_back(Pair(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast)));\n-    result.push_back(Pair(\"target\", hashTarget.GetHex()));\n-    result.push_back(Pair(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1));\n-    result.push_back(Pair(\"mutable\", aMutable));\n-    result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n+    result.pushKV(\"previousblockhash\", pblock->hashPrevBlock.GetHex());\n+    result.pushKV(\"transactions\", transactions);\n+    result.pushKV(\"coinbaseaux\", aux);\n+    result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n+    result.pushKV(\"longpollid\", chainActive.Tip()->GetBlockHash().GetHex() + i64tostr(nTransactionsUpdatedLast));\n+    result.pushKV(\"target\", hashTarget.GetHex());\n+    result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n+    result.pushKV(\"mutable\", aMutable);\n+    result.pushKV(\"noncerange\", \"00000000ffffffff\");\n     int64_t nSigOpLimit = MAX_BLOCK_SIGOPS_COST;\n     int64_t nSizeLimit = MAX_BLOCK_SERIALIZED_SIZE;\n     if (fPreSegWit) {\n@@ -660,17 +660,17 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n         assert(nSizeLimit % WITNESS_SCALE_FACTOR == 0);\n         nSizeLimit /= WITNESS_SCALE_FACTOR;\n     }\n-    result.push_back(Pair(\"sigoplimit\", nSigOpLimit));\n-    result.push_back(Pair(\"sizelimit\", nSizeLimit));\n+    result.pushKV(\"sigoplimit\", nSigOpLimit);\n+    result.pushKV(\"sizelimit\", nSizeLimit);\n     if (!fPreSegWit) {\n-        result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n+        result.pushKV(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT);\n     }\n-    result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n-    result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n-    result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));\n+    result.pushKV(\"curtime\", pblock->GetBlockTime());\n+    result.pushKV(\"bits\", strprintf(\"%08x\", pblock->nBits));\n+    result.pushKV(\"height\", (int64_t)(pindexPrev->nHeight+1));\n \n     if (!pblocktemplate->vchCoinbaseCommitment.empty() && fSupportsSegwit) {\n-        result.push_back(Pair(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end())));\n+        result.pushKV(\"default_witness_commitment\", HexStr(pblocktemplate->vchCoinbaseCommitment.begin(), pblocktemplate->vchCoinbaseCommitment.end()));\n     }\n \n     return result;\n@@ -823,12 +823,12 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = ::feeEstimator.estimateSmartFee(conf_target, &feeCalc, conservative);\n     if (feeRate != CFeeRate(0)) {\n-        result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n+        result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n     } else {\n         errors.push_back(\"Insufficient data or no feerate found\");\n-        result.push_back(Pair(\"errors\", errors));\n+        result.pushKV(\"errors\", errors);\n     }\n-    result.push_back(Pair(\"blocks\", feeCalc.returnedTarget));\n+    result.pushKV(\"blocks\", feeCalc.returnedTarget);\n     return result;\n }\n \n@@ -899,37 +899,37 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n         UniValue horizon_result(UniValue::VOBJ);\n         UniValue errors(UniValue::VARR);\n         UniValue passbucket(UniValue::VOBJ);\n-        passbucket.push_back(Pair(\"startrange\", round(buckets.pass.start)));\n-        passbucket.push_back(Pair(\"endrange\", round(buckets.pass.end)));\n-        passbucket.push_back(Pair(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0));\n-        passbucket.push_back(Pair(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0));\n+        passbucket.pushKV(\"startrange\", round(buckets.pass.start));\n+        passbucket.pushKV(\"endrange\", round(buckets.pass.end));\n+        passbucket.pushKV(\"withintarget\", round(buckets.pass.withinTarget * 100.0) / 100.0);\n+        passbucket.pushKV(\"totalconfirmed\", round(buckets.pass.totalConfirmed * 100.0) / 100.0);\n+        passbucket.pushKV(\"inmempool\", round(buckets.pass.inMempool * 100.0) / 100.0);\n+        passbucket.pushKV(\"leftmempool\", round(buckets.pass.leftMempool * 100.0) / 100.0);\n         UniValue failbucket(UniValue::VOBJ);\n-        failbucket.push_back(Pair(\"startrange\", round(buckets.fail.start)));\n-        failbucket.push_back(Pair(\"endrange\", round(buckets.fail.end)));\n-        failbucket.push_back(Pair(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0));\n-        failbucket.push_back(Pair(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0));\n+        failbucket.pushKV(\"startrange\", round(buckets.fail.start));\n+        failbucket.pushKV(\"endrange\", round(buckets.fail.end));\n+        failbucket.pushKV(\"withintarget\", round(buckets.fail.withinTarget * 100.0) / 100.0);\n+        failbucket.pushKV(\"totalconfirmed\", round(buckets.fail.totalConfirmed * 100.0) / 100.0);\n+        failbucket.pushKV(\"inmempool\", round(buckets.fail.inMempool * 100.0) / 100.0);\n+        failbucket.pushKV(\"leftmempool\", round(buckets.fail.leftMempool * 100.0) / 100.0);\n \n         // CFeeRate(0) is used to indicate error as a return value from estimateRawFee\n         if (feeRate != CFeeRate(0)) {\n-            horizon_result.push_back(Pair(\"feerate\", ValueFromAmount(feeRate.GetFeePerK())));\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"pass\", passbucket));\n+            horizon_result.pushKV(\"feerate\", ValueFromAmount(feeRate.GetFeePerK()));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"pass\", passbucket);\n             // buckets.fail.start == -1 indicates that all buckets passed, there is no fail bucket to output\n-            if (buckets.fail.start != -1) horizon_result.push_back(Pair(\"fail\", failbucket));\n+            if (buckets.fail.start != -1) horizon_result.pushKV(\"fail\", failbucket);\n         } else {\n             // Output only information that is still meaningful in the event of error\n-            horizon_result.push_back(Pair(\"decay\", buckets.decay));\n-            horizon_result.push_back(Pair(\"scale\", (int)buckets.scale));\n-            horizon_result.push_back(Pair(\"fail\", failbucket));\n+            horizon_result.pushKV(\"decay\", buckets.decay);\n+            horizon_result.pushKV(\"scale\", (int)buckets.scale);\n+            horizon_result.pushKV(\"fail\", failbucket);\n             errors.push_back(\"Insufficient data or no feerate found which meets threshold\");\n-            horizon_result.push_back(Pair(\"errors\",errors));\n+            horizon_result.pushKV(\"errors\",errors);\n         }\n-        result.push_back(Pair(StringForFeeEstimateHorizon(horizon), horizon_result));\n+        result.pushKV(StringForFeeEstimateHorizon(horizon), horizon_result);\n     }\n     return result;\n }"
      },
      {
        "sha": "3f89996e6119020f47d815cc1d9b253035411d43",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -86,20 +86,20 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n-            obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n         }\n         return obj;\n     }\n \n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", false));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,12 +110,12 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.push_back(Pair(\"isscript\", false));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.push_back(Pair(\"pubkey\", HexStr(pubkey)));\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n         return obj;\n     }\n@@ -124,10 +124,10 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"isscript\", true));\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", 0));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.begin(), id.end())));\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -141,9 +141,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.push_back(Pair(\"iswitness\", true));\n-        obj.push_back(Pair(\"witness_version\", (int)id.version));\n-        obj.push_back(Pair(\"witness_program\", HexStr(id.program, id.program + id.length)));\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n         return obj;\n     }\n };\n@@ -206,23 +206,23 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"isvalid\", isValid));\n+    ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n         std::string currentAddress = EncodeDestination(dest);\n-        ret.push_back(Pair(\"address\", currentAddress));\n+        ret.pushKV(\"address\", currentAddress);\n \n         CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n+        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.push_back(Pair(\"ismine\", bool(mine & ISMINE_SPENDABLE)));\n-        ret.push_back(Pair(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY)));\n+        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n         if (pwallet) {\n             const CKeyMetadata* meta = nullptr;\n@@ -240,10 +240,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n             if (meta) {\n-                ret.push_back(Pair(\"timestamp\", meta->nCreateTime));\n+                ret.pushKV(\"timestamp\", meta->nCreateTime);\n                 if (!meta->hdKeypath.empty()) {\n-                    ret.push_back(Pair(\"hdkeypath\", meta->hdKeypath));\n-                    ret.push_back(Pair(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex()));\n+                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n                 }\n             }\n         }\n@@ -304,8 +304,8 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     CScriptID innerID(inner);\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"address\", EncodeDestination(innerID)));\n-    result.push_back(Pair(\"redeemScript\", HexStr(inner.begin(), inner.end())));\n+    result.pushKV(\"address\", EncodeDestination(innerID));\n+    result.pushKV(\"redeemScript\", HexStr(inner.begin(), inner.end()));\n \n     return result;\n }\n@@ -439,12 +439,12 @@ static UniValue RPCLockedMemoryInfo()\n {\n     LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n-    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n-    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n-    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n-    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n-    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    obj.pushKV(\"used\", uint64_t(stats.used));\n+    obj.pushKV(\"free\", uint64_t(stats.free));\n+    obj.pushKV(\"total\", uint64_t(stats.total));\n+    obj.pushKV(\"locked\", uint64_t(stats.locked));\n+    obj.pushKV(\"chunks_used\", uint64_t(stats.chunks_used));\n+    obj.pushKV(\"chunks_free\", uint64_t(stats.chunks_free));\n     return obj;\n }\n \n@@ -501,7 +501,7 @@ UniValue getmemoryinfo(const JSONRPCRequest& request)\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+        obj.pushKV(\"locked\", RPCLockedMemoryInfo());\n         return obj;\n     } else if (mode == \"mallocinfo\") {\n #ifdef HAVE_MALLOC_INFO"
      },
      {
        "sha": "7a0225ff0de1f91f8b0f0858e4914c1695994892",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 69,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -130,59 +130,59 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         UniValue obj(UniValue::VOBJ);\n         CNodeStateStats statestats;\n         bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n-        obj.push_back(Pair(\"id\", stats.nodeid));\n-        obj.push_back(Pair(\"addr\", stats.addrName));\n+        obj.pushKV(\"id\", stats.nodeid);\n+        obj.pushKV(\"addr\", stats.addrName);\n         if (!(stats.addrLocal.empty()))\n-            obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n+            obj.pushKV(\"addrlocal\", stats.addrLocal);\n         if (stats.addrBind.IsValid())\n-            obj.push_back(Pair(\"addrbind\", stats.addrBind.ToString()));\n-        obj.push_back(Pair(\"services\", strprintf(\"%016x\", stats.nServices)));\n-        obj.push_back(Pair(\"relaytxes\", stats.fRelayTxes));\n-        obj.push_back(Pair(\"lastsend\", stats.nLastSend));\n-        obj.push_back(Pair(\"lastrecv\", stats.nLastRecv));\n-        obj.push_back(Pair(\"bytessent\", stats.nSendBytes));\n-        obj.push_back(Pair(\"bytesrecv\", stats.nRecvBytes));\n-        obj.push_back(Pair(\"conntime\", stats.nTimeConnected));\n-        obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n+            obj.pushKV(\"addrbind\", stats.addrBind.ToString());\n+        obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n+        obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n+        obj.pushKV(\"lastsend\", stats.nLastSend);\n+        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"bytessent\", stats.nSendBytes);\n+        obj.pushKV(\"bytesrecv\", stats.nRecvBytes);\n+        obj.pushKV(\"conntime\", stats.nTimeConnected);\n+        obj.pushKV(\"timeoffset\", stats.nTimeOffset);\n         if (stats.dPingTime > 0.0)\n-            obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+            obj.pushKV(\"pingtime\", stats.dPingTime);\n         if (stats.dMinPing < static_cast<double>(std::numeric_limits<int64_t>::max())/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dMinPing));\n+            obj.pushKV(\"minping\", stats.dMinPing);\n         if (stats.dPingWait > 0.0)\n-            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n-        obj.push_back(Pair(\"version\", stats.nVersion));\n+            obj.pushKV(\"pingwait\", stats.dPingWait);\n+        obj.pushKV(\"version\", stats.nVersion);\n         // Use the sanitized form of subver here, to avoid tricksy remote peers from\n         // corrupting or modifying the JSON output by putting special characters in\n         // their ver message.\n-        obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n-        obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n-        obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n+        obj.pushKV(\"subver\", stats.cleanSubVer);\n+        obj.pushKV(\"inbound\", stats.fInbound);\n+        obj.pushKV(\"addnode\", stats.m_manual_connection);\n+        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n-            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n-            obj.push_back(Pair(\"synced_headers\", statestats.nSyncHeight));\n-            obj.push_back(Pair(\"synced_blocks\", statestats.nCommonHeight));\n+            obj.pushKV(\"banscore\", statestats.nMisbehavior);\n+            obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n+            obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);\n             for (int height : statestats.vHeightInFlight) {\n                 heights.push_back(height);\n             }\n-            obj.push_back(Pair(\"inflight\", heights));\n+            obj.pushKV(\"inflight\", heights);\n         }\n-        obj.push_back(Pair(\"whitelisted\", stats.fWhitelisted));\n+        obj.pushKV(\"whitelisted\", stats.fWhitelisted);\n \n         UniValue sendPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapSendBytesPerMsgCmd) {\n             if (i.second > 0)\n-                sendPerMsgCmd.push_back(Pair(i.first, i.second));\n+                sendPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytessent_per_msg\", sendPerMsgCmd));\n+        obj.pushKV(\"bytessent_per_msg\", sendPerMsgCmd);\n \n         UniValue recvPerMsgCmd(UniValue::VOBJ);\n         for (const mapMsgCmdSize::value_type &i : stats.mapRecvBytesPerMsgCmd) {\n             if (i.second > 0)\n-                recvPerMsgCmd.push_back(Pair(i.first, i.second));\n+                recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n-        obj.push_back(Pair(\"bytesrecv_per_msg\", recvPerMsgCmd));\n+        obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n \n         ret.push_back(obj);\n     }\n@@ -331,16 +331,16 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     for (const AddedNodeInfo& info : vInfo) {\n         UniValue obj(UniValue::VOBJ);\n-        obj.push_back(Pair(\"addednode\", info.strAddedNode));\n-        obj.push_back(Pair(\"connected\", info.fConnected));\n+        obj.pushKV(\"addednode\", info.strAddedNode);\n+        obj.pushKV(\"connected\", info.fConnected);\n         UniValue addresses(UniValue::VARR);\n         if (info.fConnected) {\n             UniValue address(UniValue::VOBJ);\n-            address.push_back(Pair(\"address\", info.resolvedAddress.ToString()));\n-            address.push_back(Pair(\"connected\", info.fInbound ? \"inbound\" : \"outbound\"));\n+            address.pushKV(\"address\", info.resolvedAddress.ToString());\n+            address.pushKV(\"connected\", info.fInbound ? \"inbound\" : \"outbound\");\n             addresses.push_back(address);\n         }\n-        obj.push_back(Pair(\"addresses\", addresses));\n+        obj.pushKV(\"addresses\", addresses);\n         ret.push_back(obj);\n     }\n \n@@ -377,18 +377,18 @@ UniValue getnettotals(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n-    obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n-    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n+    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n \n@@ -403,11 +403,11 @@ static UniValue GetNetworksInfo()\n         proxyType proxy;\n         UniValue obj(UniValue::VOBJ);\n         GetProxy(network, proxy);\n-        obj.push_back(Pair(\"name\", GetNetworkName(network)));\n-        obj.push_back(Pair(\"limited\", IsLimited(network)));\n-        obj.push_back(Pair(\"reachable\", IsReachable(network)));\n-        obj.push_back(Pair(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string()));\n-        obj.push_back(Pair(\"proxy_randomize_credentials\", proxy.randomize_credentials));\n+        obj.pushKV(\"name\", GetNetworkName(network));\n+        obj.pushKV(\"limited\", IsLimited(network));\n+        obj.pushKV(\"reachable\", IsReachable(network));\n+        obj.pushKV(\"proxy\", proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string());\n+        obj.pushKV(\"proxy_randomize_credentials\", proxy.randomize_credentials);\n         networks.push_back(obj);\n     }\n     return networks;\n@@ -458,34 +458,34 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n-    obj.push_back(Pair(\"subversion\",    strSubVersion));\n-    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n+    obj.pushKV(\"version\",       CLIENT_VERSION);\n+    obj.pushKV(\"subversion\",    strSubVersion);\n+    obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n     if(g_connman)\n-        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n-    obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n+        obj.pushKV(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices()));\n+    obj.pushKV(\"localrelay\",     fRelayTxes);\n+    obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (g_connman) {\n-        obj.push_back(Pair(\"networkactive\", g_connman->GetNetworkActive()));\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n+        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n-    obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK())));\n+    obj.pushKV(\"networks\",      GetNetworksInfo());\n+    obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n+    obj.pushKV(\"incrementalfee\", ValueFromAmount(::incrementalRelayFee.GetFeePerK()));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);\n         for (const std::pair<CNetAddr, LocalServiceInfo> &item : mapLocalHost)\n         {\n             UniValue rec(UniValue::VOBJ);\n-            rec.push_back(Pair(\"address\", item.first.ToString()));\n-            rec.push_back(Pair(\"port\", item.second.nPort));\n-            rec.push_back(Pair(\"score\", item.second.nScore));\n+            rec.pushKV(\"address\", item.first.ToString());\n+            rec.pushKV(\"port\", item.second.nPort);\n+            rec.pushKV(\"score\", item.second.nScore);\n             localAddresses.push_back(rec);\n         }\n     }\n-    obj.push_back(Pair(\"localaddresses\", localAddresses));\n-    obj.push_back(Pair(\"warnings\",       GetWarnings(\"statusbar\")));\n+    obj.pushKV(\"localaddresses\", localAddresses);\n+    obj.pushKV(\"warnings\",       GetWarnings(\"statusbar\"));\n     return obj;\n }\n \n@@ -575,10 +575,10 @@ UniValue listbanned(const JSONRPCRequest& request)\n     {\n         const CBanEntry& banEntry = entry.second;\n         UniValue rec(UniValue::VOBJ);\n-        rec.push_back(Pair(\"address\", entry.first.ToString()));\n-        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n-        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n-        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+        rec.pushKV(\"address\", entry.first.ToString());\n+        rec.pushKV(\"banned_until\", banEntry.nBanUntil);\n+        rec.pushKV(\"ban_created\", banEntry.nCreateTime);\n+        rec.pushKV(\"ban_reason\", banEntry.banReasonToString());\n \n         bannedAddresses.push_back(rec);\n     }"
      },
      {
        "sha": "0635b757c63c5b0bcc4110417fbea2ea5b8f14ea",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -26,21 +26,21 @@\n UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n-    request.push_back(Pair(\"method\", strMethod));\n-    request.push_back(Pair(\"params\", params));\n-    request.push_back(Pair(\"id\", id));\n+    request.pushKV(\"method\", strMethod);\n+    request.pushKV(\"params\", params);\n+    request.pushKV(\"id\", id);\n     return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)\n {\n     UniValue reply(UniValue::VOBJ);\n     if (!error.isNull())\n-        reply.push_back(Pair(\"result\", NullUniValue));\n+        reply.pushKV(\"result\", NullUniValue);\n     else\n-        reply.push_back(Pair(\"result\", result));\n-    reply.push_back(Pair(\"error\", error));\n-    reply.push_back(Pair(\"id\", id));\n+        reply.pushKV(\"result\", result);\n+    reply.pushKV(\"error\", error);\n+    reply.pushKV(\"id\", id);\n     return reply;\n }\n \n@@ -53,8 +53,8 @@ std::string JSONRPCReply(const UniValue& result, const UniValue& error, const Un\n UniValue JSONRPCError(int code, const std::string& message)\n {\n     UniValue error(UniValue::VOBJ);\n-    error.push_back(Pair(\"code\", code));\n-    error.push_back(Pair(\"message\", message));\n+    error.pushKV(\"code\", code);\n+    error.pushKV(\"message\", message);\n     return error;\n }\n "
      },
      {
        "sha": "24f2431efc9677724a7bf47f3ea0e2297c84840c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -47,17 +47,17 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n-        entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n+        entry.pushKV(\"blockhash\", hashBlock.GetHex());\n         BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n         if (mi != mapBlockIndex.end() && (*mi).second) {\n             CBlockIndex* pindex = (*mi).second;\n             if (chainActive.Contains(pindex)) {\n-                entry.push_back(Pair(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight));\n-                entry.push_back(Pair(\"time\", pindex->GetBlockTime()));\n-                entry.push_back(Pair(\"blocktime\", pindex->GetBlockTime()));\n+                entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n+                entry.pushKV(\"time\", pindex->GetBlockTime());\n+                entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n             else\n-                entry.push_back(Pair(\"confirmations\", 0));\n+                entry.pushKV(\"confirmations\", 0);\n         }\n     }\n }\n@@ -190,7 +190,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    if (blockindex) result.push_back(Pair(\"in_active_chain\", in_active_chain));\n+    if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n     TxToJSON(*tx, hash_block, result);\n     return result;\n }\n@@ -562,7 +562,7 @@ UniValue decodescript(const JSONRPCRequest& request)\n     if (type.isStr() && type.get_str() != \"scripthash\") {\n         // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n         // don't return the address for a P2SH of the P2SH.\n-        r.push_back(Pair(\"p2sh\", EncodeDestination(CScriptID(script))));\n+        r.pushKV(\"p2sh\", EncodeDestination(CScriptID(script)));\n     }\n \n     return r;\n@@ -572,16 +572,16 @@ UniValue decodescript(const JSONRPCRequest& request)\n static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::string& strMessage)\n {\n     UniValue entry(UniValue::VOBJ);\n-    entry.push_back(Pair(\"txid\", txin.prevout.hash.ToString()));\n-    entry.push_back(Pair(\"vout\", (uint64_t)txin.prevout.n));\n+    entry.pushKV(\"txid\", txin.prevout.hash.ToString());\n+    entry.pushKV(\"vout\", (uint64_t)txin.prevout.n);\n     UniValue witness(UniValue::VARR);\n     for (unsigned int i = 0; i < txin.scriptWitness.stack.size(); i++) {\n         witness.push_back(HexStr(txin.scriptWitness.stack[i].begin(), txin.scriptWitness.stack[i].end()));\n     }\n-    entry.push_back(Pair(\"witness\", witness));\n-    entry.push_back(Pair(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end())));\n-    entry.push_back(Pair(\"sequence\", (uint64_t)txin.nSequence));\n-    entry.push_back(Pair(\"error\", strMessage));\n+    entry.pushKV(\"witness\", witness);\n+    entry.pushKV(\"scriptSig\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n+    entry.pushKV(\"sequence\", (uint64_t)txin.nSequence);\n+    entry.pushKV(\"error\", strMessage);\n     vErrorsRet.push_back(entry);\n }\n \n@@ -916,10 +916,10 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     bool fComplete = vErrors.empty();\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(mtx)));\n-    result.push_back(Pair(\"complete\", fComplete));\n+    result.pushKV(\"hex\", EncodeHexTx(mtx));\n+    result.pushKV(\"complete\", fComplete);\n     if (!vErrors.empty()) {\n-        result.push_back(Pair(\"errors\", vErrors));\n+        result.pushKV(\"errors\", vErrors);\n     }\n \n     return result;"
      },
      {
        "sha": "c15b2f051eb86f9def682b9cd2c45c22c0697b45",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -130,6 +130,10 @@ class UniValue {\n         UniValue tmpVal(val_);\n         return pushKV(key, tmpVal);\n     }\n+    bool pushKV(const std::string& key, bool val_) {\n+        UniValue tmpVal((bool)val_);\n+        return pushKV(key, tmpVal);\n+    }\n     bool pushKV(const std::string& key, int val_) {\n         UniValue tmpVal((int64_t)val_);\n         return pushKV(key, tmpVal);"
      },
      {
        "sha": "70ccc0d08a5ef229bfb1eb1d08e552b62587a259",
        "filename": "src/univalue/test/object.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/test/object.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/univalue/test/object.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/object.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -261,14 +261,20 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     strKey = \"temperature\";\n     BOOST_CHECK(obj.pushKV(strKey, (double) 90.012));\n \n+    strKey = \"moon\";\n+    BOOST_CHECK(obj.pushKV(strKey, true));\n+\n+    strKey = \"spoon\";\n+    BOOST_CHECK(obj.pushKV(strKey, false));\n+\n     UniValue obj2(UniValue::VOBJ);\n     BOOST_CHECK(obj2.pushKV(\"cat1\", 9000));\n     BOOST_CHECK(obj2.pushKV(\"cat2\", 12345));\n \n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.size(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 11);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -277,6 +283,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK_EQUAL(obj[\"time\"].getValStr(), \"3600\");\n     BOOST_CHECK_EQUAL(obj[\"calories\"].getValStr(), \"12\");\n     BOOST_CHECK_EQUAL(obj[\"temperature\"].getValStr(), \"90.012\");\n+    BOOST_CHECK_EQUAL(obj[\"moon\"].getValStr(), \"1\");\n+    BOOST_CHECK_EQUAL(obj[\"spoon\"].getValStr(), \"\");\n     BOOST_CHECK_EQUAL(obj[\"cat1\"].getValStr(), \"9000\");\n     BOOST_CHECK_EQUAL(obj[\"cat2\"].getValStr(), \"12345\");\n \n@@ -289,6 +297,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.exists(\"time\"));\n     BOOST_CHECK(obj.exists(\"calories\"));\n     BOOST_CHECK(obj.exists(\"temperature\"));\n+    BOOST_CHECK(obj.exists(\"moon\"));\n+    BOOST_CHECK(obj.exists(\"spoon\"));\n     BOOST_CHECK(obj.exists(\"cat1\"));\n     BOOST_CHECK(obj.exists(\"cat2\"));\n \n@@ -302,6 +312,8 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     objTypes[\"time\"] = UniValue::VNUM;\n     objTypes[\"calories\"] = UniValue::VNUM;\n     objTypes[\"temperature\"] = UniValue::VNUM;\n+    objTypes[\"moon\"] = UniValue::VBOOL;\n+    objTypes[\"spoon\"] = UniValue::VBOOL;\n     objTypes[\"cat1\"] = UniValue::VNUM;\n     objTypes[\"cat2\"] = UniValue::VNUM;\n     BOOST_CHECK(obj.checkObject(objTypes));"
      },
      {
        "sha": "741ea253406dbe42342442346d288f942475ee06",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -790,7 +790,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n \n     UniValue reply(UniValue::VOBJ);\n-    reply.push_back(Pair(\"filename\", filepath.string()));\n+    reply.pushKV(\"filename\", filepath.string());\n \n     return reply;\n }"
      },
      {
        "sha": "b466cf1a81daaf4c6de7005b74709852638c7bff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 87,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5dc00f68c49c46a380a98d06233f90528b8e2557/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5dc00f68c49c46a380a98d06233f90528b8e2557",
        "patch": "@@ -86,25 +86,25 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n {\n     int confirms = wtx.GetDepthInMainChain();\n-    entry.push_back(Pair(\"confirmations\", confirms));\n+    entry.pushKV(\"confirmations\", confirms);\n     if (wtx.IsCoinBase())\n-        entry.push_back(Pair(\"generated\", true));\n+        entry.pushKV(\"generated\", true);\n     if (confirms > 0)\n     {\n-        entry.push_back(Pair(\"blockhash\", wtx.hashBlock.GetHex()));\n-        entry.push_back(Pair(\"blockindex\", wtx.nIndex));\n-        entry.push_back(Pair(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime()));\n+        entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n+        entry.pushKV(\"blockindex\", wtx.nIndex);\n+        entry.pushKV(\"blocktime\", mapBlockIndex[wtx.hashBlock]->GetBlockTime());\n     } else {\n-        entry.push_back(Pair(\"trusted\", wtx.IsTrusted()));\n+        entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }\n     uint256 hash = wtx.GetHash();\n-    entry.push_back(Pair(\"txid\", hash.GetHex()));\n+    entry.pushKV(\"txid\", hash.GetHex());\n     UniValue conflicts(UniValue::VARR);\n     for (const uint256& conflict : wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n-    entry.push_back(Pair(\"walletconflicts\", conflicts));\n-    entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n-    entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n+    entry.pushKV(\"walletconflicts\", conflicts);\n+    entry.pushKV(\"time\", wtx.GetTxTime());\n+    entry.pushKV(\"timereceived\", (int64_t)wtx.nTimeReceived);\n \n     // Add opt-in RBF status\n     std::string rbfStatus = \"no\";\n@@ -116,10 +116,10 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n         else if (rbfState == RBF_TRANSACTIONSTATE_REPLACEABLE_BIP125)\n             rbfStatus = \"yes\";\n     }\n-    entry.push_back(Pair(\"bip125-replaceable\", rbfStatus));\n+    entry.pushKV(\"bip125-replaceable\", rbfStatus);\n \n     for (const std::pair<std::string, std::string>& item : wtx.mapValue)\n-        entry.push_back(Pair(item.first, item.second));\n+        entry.pushKV(item.first, item.second);\n }\n \n std::string AccountFromValue(const UniValue& value)\n@@ -1463,13 +1463,13 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         {\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"address\",       EncodeDestination(dest)));\n-            obj.push_back(Pair(\"account\",       strAccount));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"account\",       strAccount);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             if (!fByAccounts)\n-                obj.push_back(Pair(\"label\", strAccount));\n+                obj.pushKV(\"label\", strAccount);\n             UniValue transactions(UniValue::VARR);\n             if (it != mapTally.end())\n             {\n@@ -1478,7 +1478,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n                     transactions.push_back(_item.GetHex());\n                 }\n             }\n-            obj.push_back(Pair(\"txids\", transactions));\n+            obj.pushKV(\"txids\", transactions);\n             ret.push_back(obj);\n         }\n     }\n@@ -1491,10 +1491,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             int nConf = entry.second.nConf;\n             UniValue obj(UniValue::VOBJ);\n             if (entry.second.fIsWatchonly)\n-                obj.push_back(Pair(\"involvesWatchonly\", true));\n-            obj.push_back(Pair(\"account\",       entry.first));\n-            obj.push_back(Pair(\"amount\",        ValueFromAmount(nAmount)));\n-            obj.push_back(Pair(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf)));\n+                obj.pushKV(\"involvesWatchonly\", true);\n+            obj.pushKV(\"account\",       entry.first);\n+            obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n+            obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n             ret.push_back(obj);\n         }\n     }\n@@ -1600,7 +1600,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n {\n     if (IsValidDestination(dest)) {\n-        entry.push_back(Pair(\"address\", EncodeDestination(dest)));\n+        entry.pushKV(\"address\", EncodeDestination(dest));\n     }\n }\n \n@@ -1634,20 +1634,20 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n         {\n             UniValue entry(UniValue::VOBJ);\n             if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n-                entry.push_back(Pair(\"involvesWatchonly\", true));\n+                entry.pushKV(\"involvesWatchonly\", true);\n             }\n-            entry.push_back(Pair(\"account\", strSentAccount));\n+            entry.pushKV(\"account\", strSentAccount);\n             MaybePushAddress(entry, s.destination);\n-            entry.push_back(Pair(\"category\", \"send\"));\n-            entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n+            entry.pushKV(\"category\", \"send\");\n+            entry.pushKV(\"amount\", ValueFromAmount(-s.amount));\n             if (pwallet->mapAddressBook.count(s.destination)) {\n-                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+                entry.pushKV(\"label\", pwallet->mapAddressBook[s.destination].name);\n             }\n-            entry.push_back(Pair(\"vout\", s.vout));\n-            entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n+            entry.pushKV(\"vout\", s.vout);\n+            entry.pushKV(\"fee\", ValueFromAmount(-nFee));\n             if (fLong)\n                 WalletTxToJSON(wtx, entry);\n-            entry.push_back(Pair(\"abandoned\", wtx.isAbandoned()));\n+            entry.pushKV(\"abandoned\", wtx.isAbandoned());\n             ret.push_back(entry);\n         }\n     }\n@@ -1665,28 +1665,28 @@ void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::s\n             {\n                 UniValue entry(UniValue::VOBJ);\n                 if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n-                    entry.push_back(Pair(\"involvesWatchonly\", true));\n+                    entry.pushKV(\"involvesWatchonly\", true);\n                 }\n-                entry.push_back(Pair(\"account\", account));\n+                entry.pushKV(\"account\", account);\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n                 {\n                     if (wtx.GetDepthInMainChain() < 1)\n-                        entry.push_back(Pair(\"category\", \"orphan\"));\n+                        entry.pushKV(\"category\", \"orphan\");\n                     else if (wtx.GetBlocksToMaturity() > 0)\n-                        entry.push_back(Pair(\"category\", \"immature\"));\n+                        entry.pushKV(\"category\", \"immature\");\n                     else\n-                        entry.push_back(Pair(\"category\", \"generate\"));\n+                        entry.pushKV(\"category\", \"generate\");\n                 }\n                 else\n                 {\n-                    entry.push_back(Pair(\"category\", \"receive\"));\n+                    entry.pushKV(\"category\", \"receive\");\n                 }\n-                entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n+                entry.pushKV(\"amount\", ValueFromAmount(r.amount));\n                 if (pwallet->mapAddressBook.count(r.destination)) {\n-                    entry.push_back(Pair(\"label\", account));\n+                    entry.pushKV(\"label\", account);\n                 }\n-                entry.push_back(Pair(\"vout\", r.vout));\n+                entry.pushKV(\"vout\", r.vout);\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n                 ret.push_back(entry);\n@@ -1702,12 +1702,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n     if (fAllAccounts || acentry.strAccount == strAccount)\n     {\n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"account\", acentry.strAccount));\n-        entry.push_back(Pair(\"category\", \"move\"));\n-        entry.push_back(Pair(\"time\", acentry.nTime));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(acentry.nCreditDebit)));\n-        entry.push_back(Pair(\"otheraccount\", acentry.strOtherAccount));\n-        entry.push_back(Pair(\"comment\", acentry.strComment));\n+        entry.pushKV(\"account\", acentry.strAccount);\n+        entry.pushKV(\"category\", \"move\");\n+        entry.pushKV(\"time\", acentry.nTime);\n+        entry.pushKV(\"amount\", ValueFromAmount(acentry.nCreditDebit));\n+        entry.pushKV(\"otheraccount\", acentry.strOtherAccount);\n+        entry.pushKV(\"comment\", acentry.strComment);\n         ret.push_back(entry);\n     }\n }\n@@ -1934,7 +1934,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VOBJ);\n     for (const std::pair<std::string, CAmount>& accountBalance : mapAccountBalances) {\n-        ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n+        ret.pushKV(accountBalance.first, ValueFromAmount(accountBalance.second));\n     }\n     return ret;\n }\n@@ -2074,9 +2074,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n-    ret.push_back(Pair(\"transactions\", transactions));\n-    if (include_removed) ret.push_back(Pair(\"removed\", removed));\n-    ret.push_back(Pair(\"lastblock\", lastblock.GetHex()));\n+    ret.pushKV(\"transactions\", transactions);\n+    if (include_removed) ret.pushKV(\"removed\", removed);\n+    ret.pushKV(\"lastblock\", lastblock.GetHex());\n \n     return ret;\n }\n@@ -2161,18 +2161,18 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.tx->GetValueOut() - nDebit : 0);\n \n-    entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n+    entry.pushKV(\"amount\", ValueFromAmount(nNet - nFee));\n     if (wtx.IsFromMe(filter))\n-        entry.push_back(Pair(\"fee\", ValueFromAmount(nFee)));\n+        entry.pushKV(\"fee\", ValueFromAmount(nFee));\n \n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n     ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n-    entry.push_back(Pair(\"details\", details));\n+    entry.pushKV(\"details\", details);\n \n     std::string strHex = EncodeHexTx(*wtx.tx, RPCSerializationFlags());\n-    entry.push_back(Pair(\"hex\", strHex));\n+    entry.pushKV(\"hex\", strHex);\n \n     return entry;\n }\n@@ -2702,8 +2702,8 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n     for (COutPoint &outpt : vOutpts) {\n         UniValue o(UniValue::VOBJ);\n \n-        o.push_back(Pair(\"txid\", outpt.hash.GetHex()));\n-        o.push_back(Pair(\"vout\", (int)outpt.n));\n+        o.pushKV(\"txid\", outpt.hash.GetHex());\n+        o.pushKV(\"vout\", (int)outpt.n);\n         ret.push_back(o);\n     }\n \n@@ -2781,24 +2781,24 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n-    obj.push_back(Pair(\"walletname\", pwallet->GetName()));\n-    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\", (int64_t)kpExternalSize));\n+    obj.pushKV(\"walletname\", pwallet->GetName());\n+    obj.pushKV(\"walletversion\", pwallet->GetVersion());\n+    obj.pushKV(\"balance\",       ValueFromAmount(pwallet->GetBalance()));\n+    obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance()));\n+    obj.pushKV(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance()));\n+    obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n+    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n-        obj.push_back(Pair(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize)));\n+        obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+        obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n+    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n+         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -3003,31 +3003,31 @@ UniValue listunspent(const JSONRPCRequest& request)\n             continue;\n \n         UniValue entry(UniValue::VOBJ);\n-        entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n-        entry.push_back(Pair(\"vout\", out.i));\n+        entry.pushKV(\"txid\", out.tx->GetHash().GetHex());\n+        entry.pushKV(\"vout\", out.i);\n \n         if (fValidAddress) {\n-            entry.push_back(Pair(\"address\", EncodeDestination(address)));\n+            entry.pushKV(\"address\", EncodeDestination(address));\n \n             if (pwallet->mapAddressBook.count(address)) {\n-                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+                entry.pushKV(\"account\", pwallet->mapAddressBook[address].name);\n             }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n                 }\n             }\n         }\n \n-        entry.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n-        entry.push_back(Pair(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue)));\n-        entry.push_back(Pair(\"confirmations\", out.nDepth));\n-        entry.push_back(Pair(\"spendable\", out.fSpendable));\n-        entry.push_back(Pair(\"solvable\", out.fSolvable));\n-        entry.push_back(Pair(\"safe\", out.fSafe));\n+        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"confirmations\", out.nDepth);\n+        entry.pushKV(\"spendable\", out.fSpendable);\n+        entry.pushKV(\"solvable\", out.fSolvable);\n+        entry.pushKV(\"safe\", out.fSafe);\n         results.push_back(entry);\n     }\n \n@@ -3229,9 +3229,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     }\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", EncodeHexTx(tx)));\n-    result.push_back(Pair(\"changepos\", changePosition));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(nFeeOut)));\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n+    result.pushKV(\"changepos\", changePosition);\n+    result.pushKV(\"fee\", ValueFromAmount(nFeeOut));\n \n     return result;\n }\n@@ -3373,14 +3373,14 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n     }\n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"txid\", txid.GetHex()));\n-    result.push_back(Pair(\"origfee\", ValueFromAmount(old_fee)));\n-    result.push_back(Pair(\"fee\", ValueFromAmount(new_fee)));\n+    result.pushKV(\"txid\", txid.GetHex());\n+    result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n+    result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n     for (const std::string& error : errors) {\n         result_errors.push_back(error);\n     }\n-    result.push_back(Pair(\"errors\", result_errors));\n+    result.pushKV(\"errors\", result_errors);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "f40df29d96a29197f9949b63da80f9ba3152fc79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDBkZjI5ZDk2YTI5MTk3Zjk5NDliNjNkYTgwZjliYTMxNTJmYzc5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-12T14:48:37Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-12T14:48:37Z"
      },
      "message": "Fix Windows build errors introduced in #10498\n\nFixes #12386",
      "tree": {
        "sha": "3a99c135017cc5af82919bf63449af011b3ffc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a99c135017cc5af82919bf63449af011b3ffc1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f40df29d96a29197f9949b63da80f9ba3152fc79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "06e1f1a37c62aaf33e421c043ebb82de7eb4ed87",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=f40df29d96a29197f9949b63da80f9ba3152fc79",
        "patch": "@@ -706,7 +706,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "1e7a76efc081274d70b489303b112149f6472337",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f40df29d96a29197f9949b63da80f9ba3152fc79/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=f40df29d96a29197f9949b63da80f9ba3152fc79",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n+    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      }
    ]
  },
  {
    "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTk3Zjg4MDgyNTY1MjEzOTdmMWMwMDNiYjFlOTg5NmZlZTZlYWEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T22:20:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-12T22:20:18Z"
      },
      "message": "Merge #12416: Fix Windows build errors introduced in #10498\n\nf40df29d96 Fix Windows build errors introduced in #10498 (practicalswift)\n\nPull request description:\n\n  Fix Windows build errors introduced in #10498\n\n  Fixes #12386\n\n  cc @ken2812221, @Sjors, @MarcoFalke and @floreslorca\n\nTree-SHA512: a807521fbd4015971e646fa4bab5495a3aaa97337e7b7d80b9161f33778e84ad6725cf4fbd5a35b50bf3a2bd97747cd7a630b51493ff516c2e1ad74acce148be",
      "tree": {
        "sha": "3a99c135017cc5af82919bf63449af011b3ffc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a99c135017cc5af82919bf63449af011b3ffc1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaghMiAAoJENLqSFDnUoslILsQAIDkacdLl4EAIygK9B0rBXtr\nn7zggZ/G8cpEvuplnP5CQupkTJ4EDXpCaWBwAa3IhidpxIlMmn3ut97RPMA6FGI8\nt36Xe/mF8TgNP+OPL/EI8sXxlXHlMfY2gj/G+zbZPGBcecL5Z6xVFJKXxtRjbr7i\nV5HCx81q+hUrzEe1eRhDE/WtYwIXhbfUVisVEKt58biaMS3OyV6gGljSYiTU4lMM\nn0kkSBMYxhCFWxz7c6dTH76hL3kcmqUshU/eC4hV4uTVhNbnH2/3iVEbQXcAxsqw\nZSH84FC/eNywakThpBtnOyStIf+6yaBwLnpBQM/kYK45piSqWMXr+pSrhMvmQPAW\n9nBsw2xP/94Tw7UwIWofn2Uei57/eEH1RAEYl15UzeJ2OVnYGgTsan1mIgbxzGY4\nsc58o43BckwdscjG+lBzv/OTmoh6ANX0CH2MN1zTTpT+PdP9dUEZHREZRuJiaT7+\nHs5utU7BqhwFitKZTMIYghldiNiI5ZZJ/QQacV7Sh9HMVdwFN65b5vS9a0uHJhHI\nWQXl3kIUQO5vrNzcMeESaslOL4G7Ydp0c3sCYMF7rcWkUNiG4nE1xcWL6mLMON/9\n3mZVbCv4cPgbGW21MQ0l0cJ+M9nEJ5pXG+PtFF02/3VtqerEatgu4mSMbv12Q9mr\njJcapx+PU+tmKE3yOgta\n=oSBz\n-----END PGP SIGNATURE-----",
        "payload": "tree 3a99c135017cc5af82919bf63449af011b3ffc1a\nparent 5dc00f68c49c46a380a98d06233f90528b8e2557\nparent f40df29d96a29197f9949b63da80f9ba3152fc79\nauthor MarcoFalke <falke.marco@gmail.com> 1518474014 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518474018 -0500\n\nMerge #12416: Fix Windows build errors introduced in #10498\n\nf40df29d96 Fix Windows build errors introduced in #10498 (practicalswift)\n\nPull request description:\n\n  Fix Windows build errors introduced in #10498\n\n  Fixes #12386\n\n  cc @ken2812221, @Sjors, @MarcoFalke and @floreslorca\n\nTree-SHA512: a807521fbd4015971e646fa4bab5495a3aaa97337e7b7d80b9161f33778e84ad6725cf4fbd5a35b50bf3a2bd97747cd7a630b51493ff516c2e1ad74acce148be\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      },
      {
        "sha": "f40df29d96a29197f9949b63da80f9ba3152fc79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f40df29d96a29197f9949b63da80f9ba3152fc79",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f40df29d96a29197f9949b63da80f9ba3152fc79"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "06e1f1a37c62aaf33e421c043ebb82de7eb4ed87",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c997f8808256521397f1c003bb1e9896fee6eaa0",
        "patch": "@@ -706,7 +706,7 @@ int main(int argc, char *argv[])\n         if (BitcoinCore::baseInitialize()) {\n             app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), static_cast<HWND>(app.getMainWinId()));\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n             app.exec();\n             app.requestShutdown();"
      },
      {
        "sha": "1e7a76efc081274d70b489303b112149f6472337",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c997f8808256521397f1c003bb1e9896fee6eaa0/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=c997f8808256521397f1c003bb1e9896fee6eaa0",
        "patch": "@@ -56,7 +56,7 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, const HWND& mainWinId)\n {\n     typedef BOOL (WINAPI *PSHUTDOWNBRCREATE)(HWND, LPCWSTR);\n-    PSHUTDOWNBRCREATE shutdownBRCreate = static_cast<PSHUTDOWNBRCREATE>(GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\"));\n+    PSHUTDOWNBRCREATE shutdownBRCreate = (PSHUTDOWNBRCREATE)GetProcAddress(GetModuleHandleA(\"User32.dll\"), \"ShutdownBlockReasonCreate\");\n     if (shutdownBRCreate == nullptr) {\n         qWarning() << \"registerShutdownBlockReason: GetProcAddress for ShutdownBlockReasonCreate failed\";\n         return;"
      }
    ]
  },
  {
    "sha": "ceaefdd5f362537a1908d0095059e4be788f3dee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWFlZmRkNWYzNjI1MzdhMTkwOGQwMDk1MDU5ZTRiZTc4OGYzZGVl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-13T05:24:14Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-13T05:38:25Z"
      },
      "message": "fix possible shutdown assertion with -reindex-shutdown\n\nCredit @eklitzke for reproducing.",
      "tree": {
        "sha": "f54323b3c2a4f9c67b166f889946cd52e0b7c470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f54323b3c2a4f9c67b166f889946cd52e0b7c470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ceaefdd5f362537a1908d0095059e4be788f3dee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dabf7e279efbbc0c5e6c70321c72cbac9f85f760",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceaefdd5f362537a1908d0095059e4be788f3dee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceaefdd5f362537a1908d0095059e4be788f3dee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ceaefdd5f362537a1908d0095059e4be788f3dee",
        "patch": "@@ -2087,7 +2087,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             nLastWrite = nNow;\n         }\n         // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n-        if (fDoFullFlush) {\n+        if (fDoFullFlush && !pcoinsTip->GetBestBlock().IsNull()) {\n             // Typical Coin structures on disk are around 48 bytes in size.\n             // Pushing a new one to the database can cause it to be written\n             // twice (once in the log, and once in the tables). This is already"
      }
    ]
  },
  {
    "sha": "2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGJjNGE0NzQwY2QyYjkzNDBlNmEyZjNhZTZiMTNkZTQwYjVlZTBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:30:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:31:06Z"
      },
      "message": "Merge #11771: [tests] Change invalidtxrequest to use BitcoinTestFramework\n\n95e2e9a [tests] Change invalidtxrequest to use BitcoinTestFramework (John Newbery)\n359d067 [tests] Fix flake8 warnings in invalidtxrequest (John Newbery)\nc32cf9f [tests] Add P2PDataStore class (John Newbery)\ncc046f6 [tests] Reduce NodeConn connection logging from info to debug (John Newbery)\n\nPull request description:\n\n  Next step in #10603\n\n  - first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\n  - second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\n  - third commit tidies up `invalidtxrequest.py`\n  - fourth commit removes usage of `ComparisonTestFramework`\n\nTree-SHA512: f3085c73c15d6ce894e401490bce8a7fa7cf52b0c9d135ff7e351f1f6f517c99accab8588fcdc443f39ea8315329aaabd66b2baa32499df5a774737882030373",
      "tree": {
        "sha": "3e3bf0215f9f487b033ebd7a863f341eb10ed443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e3bf0215f9f487b033ebd7a863f341eb10ed443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagrBaAAoJEB5K7WKYbNJdqDAIAJk2zibkS0C0TJNuqCmwPbQs\nES5uAS4+NI0005xPfJ+Jiqt1DWKWmHH5Xx1eLG/EVjjK2LyRdAuYY7Hes4Fs+z3+\nXv/K36y/DPxgeSFLa2MgEjyI3nh7yvtFUIaE2hX75UNCZ8yKs0Ewij8/+dy4apyn\nIRvJBEc40Bf4ngUBv716794xj4jDhNlsBgwIYmP6AFhQrEqI8NAwMUdSv/h8r/MN\nLkT29MoibTnmw3UghjypF7PXAyQmeGMCfrd9mcPGqv38SoQ4Q17SEQsqNkBojeQs\n498l78pKgUqGgTPBxJBpEGTJbrCkFq0a/D32+nzJfmg2zj7nBNsNZHXVeQ2FSD4=\n=qXpr\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e3bf0215f9f487b033ebd7a863f341eb10ed443\nparent c997f8808256521397f1c003bb1e9896fee6eaa0\nparent 95e2e9af124595aae4801fc9813ee1c294d404cd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518514241 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518514266 +0100\n\nMerge #11771: [tests] Change invalidtxrequest to use BitcoinTestFramework\n\n95e2e9a [tests] Change invalidtxrequest to use BitcoinTestFramework (John Newbery)\n359d067 [tests] Fix flake8 warnings in invalidtxrequest (John Newbery)\nc32cf9f [tests] Add P2PDataStore class (John Newbery)\ncc046f6 [tests] Reduce NodeConn connection logging from info to debug (John Newbery)\n\nPull request description:\n\n  Next step in #10603\n\n  - first commit changes log level for an internal log from INFO to DEBUG. (Not really related, but I started finding the INFO level logging annoying when debuging test failures)\n  - second commit introduces a `P2PStub` class - a subclass of `NodeConnCB` which has its own block and tx store and responds appropriately to getdata requests. Not all the functionality is used in `invalidtxrequest.py`, but will be used in `invalidblockrequest.py` and `p2p-fullblocktest` when those are changed to use `BitcoinTestFramework`\n  - third commit tidies up `invalidtxrequest.py`\n  - fourth commit removes usage of `ComparisonTestFramework`\n\nTree-SHA512: f3085c73c15d6ce894e401490bce8a7fa7cf52b0c9d135ff7e351f1f6f517c99accab8588fcdc443f39ea8315329aaabd66b2baa32499df5a774737882030373\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      },
      {
        "sha": "95e2e9af124595aae4801fc9813ee1c294d404cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95e2e9af124595aae4801fc9813ee1c294d404cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95e2e9af124595aae4801fc9813ee1c294d404cd"
      }
    ],
    "stats": {
      "total": 230,
      "additions": 182,
      "deletions": 48
    },
    "files": [
      {
        "sha": "64fada38e2cf26c23375d3484e6918e7373367cb",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 26,
        "deletions": 44,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -4,68 +4,50 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test node responses to invalid transactions.\n \n-In this test we connect to one node over p2p, and test tx requests.\n-\"\"\"\n+In this test we connect to one node over p2p, and test tx requests.\"\"\"\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n+from test_framework.messages import COIN\n+from test_framework.mininode import network_thread_start, P2PDataStore\n+from test_framework.test_framework import BitcoinTestFramework\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n-import time\n+class InvalidTxRequestTest(BitcoinTestFramework):\n \n-\n-\n-# Use the ComparisonTestFramework with 1 node: only use --testbinary.\n-class InvalidTxRequestTest(ComparisonTestFramework):\n-\n-    ''' Can either run this test as 1 node with expected answers, or two and compare them. \n-        Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"]]\n \n     def run_test(self):\n-        test = TestManager(self, self.options.tmpdir)\n-        test.add_all_connections(self.nodes)\n-        self.tip = None\n-        self.block_time = None\n+        # Add p2p connection to node0\n+        node = self.nodes[0]  # convenience reference to the node\n+        node.add_p2p_connection(P2PDataStore())\n+\n         network_thread_start()\n-        test.run()\n+        node.p2p.wait_for_verack()\n \n-    def get_tests(self):\n-        if self.tip is None:\n-            self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n-        self.block_time = int(time.time())+1\n+        best_block = self.nodes[0].getbestblockhash()\n+        tip = int(best_block, 16)\n+        best_block_time = self.nodes[0].getblock(best_block)['time']\n+        block_time = best_block_time + 1\n \n-        '''\n-        Create a new block with an anyone-can-spend coinbase\n-        '''\n+        self.log.info(\"Create a new block with an anyone-can-spend coinbase.\")\n         height = 1\n-        block = create_block(self.tip, create_coinbase(height), self.block_time)\n-        self.block_time += 1\n+        block = create_block(tip, create_coinbase(height), block_time)\n+        block_time += 1\n         block.solve()\n         # Save the coinbase for later\n-        self.block1 = block\n-        self.tip = block.sha256\n+        block1 = block\n+        tip = block.sha256\n         height += 1\n-        yield TestInstance([[block, True]])\n+        node.p2p.send_blocks_and_test([block], node, success=True)\n \n-        '''\n-        Now we need that block to mature so we can spend the coinbase.\n-        '''\n-        test = TestInstance(sync_every_block=False)\n-        for i in range(100):\n-            block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.solve()\n-            self.tip = block.sha256\n-            self.block_time += 1\n-            test.blocks_and_transactions.append([block, True])\n-            height += 1\n-        yield test\n+        self.log.info(\"Mature the block.\")\n+        self.nodes[0].generate(100)\n \n         # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, reject_code=16, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n \n         # TODO: test further transactions...\n "
      },
      {
        "sha": "46ef7521e098e036559788f5842e8d9592f977ad",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -44,6 +44,11 @@\n NODE_UNSUPPORTED_SERVICE_BIT_7 = (1 << 7)\n NODE_NETWORK_LIMITED = (1 << 10)\n \n+MSG_TX = 1\n+MSG_BLOCK = 2\n+MSG_WITNESS_FLAG = 1 << 30\n+MSG_TYPE_MASK = 0xffffffff >> 2\n+\n # Serialization/deserialization tools\n def sha256(s):\n     return hashlib.new('sha256', s).digest()\n@@ -204,8 +209,6 @@ def __repr__(self):\n         return \"CAddress(nServices=%i ip=%s port=%i)\" % (self.nServices,\n                                                          self.ip, self.port)\n \n-MSG_WITNESS_FLAG = 1<<30\n-\n class CInv():\n     typemap = {\n         0: \"Error\","
      },
      {
        "sha": "99d0abc3f90cd608679a7a44edc72daab26481d7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 151,
        "deletions": 2,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "patch": "@@ -10,7 +10,9 @@\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface\n-P2PInterface: A high-level interface object for communicating to a node over P2P\"\"\"\n+P2PInterface: A high-level interface object for communicating to a node over P2P\n+P2PDataStore: A p2p interface class that keeps a store of transactions and blocks\n+              and can respond correctly to getdata and getheaders messages\"\"\"\n import asyncore\n from collections import defaultdict\n from io import BytesIO\n@@ -86,7 +88,7 @@ def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         self.network = net\n         self.disconnect = False\n \n-        logger.info('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n+        logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n         try:\n             self.connect((dstaddr, dstport))\n@@ -356,10 +358,22 @@ def wait_for_block(self, blockhash, timeout=60):\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n+        \"\"\"Waits for a getdata message.\n+\n+        Receiving any getdata message will satisfy the predicate. the last_message[\"getdata\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block/tx has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getdata\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n+        \"\"\"Waits for a getheaders message.\n+\n+        Receiving any getheaders message will satisfy the predicate. the last_message[\"getheaders\"]\n+        value must be explicitly cleared before calling this method, or this will return\n+        immediately with success. TODO: change this method to take a hash value and only\n+        return true if the correct block header has been requested.\"\"\"\n         test_function = lambda: self.last_message.get(\"getheaders\")\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n@@ -440,3 +454,138 @@ def network_thread_join(timeout=10):\n     for thread in network_threads:\n         thread.join(timeout)\n         assert not thread.is_alive()\n+\n+class P2PDataStore(P2PInterface):\n+    \"\"\"A P2P data store class.\n+\n+    Keeps a block and transaction store and responds correctly to getdata and getheaders requests.\"\"\"\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.reject_code_received = None\n+        self.reject_reason_received = None\n+        # store of blocks. key is block hash, value is a CBlock object\n+        self.block_store = {}\n+        self.last_block_hash = ''\n+        # store of txs. key is txid, value is a CTransaction object\n+        self.tx_store = {}\n+        self.getdata_requests = []\n+\n+    def on_getdata(self, message):\n+        \"\"\"Check for the tx/block in our stores and if found, reply with an inv message.\"\"\"\n+        for inv in message.inv:\n+            self.getdata_requests.append(inv.hash)\n+            if (inv.type & MSG_TYPE_MASK) == MSG_TX and inv.hash in self.tx_store.keys():\n+                self.send_message(msg_tx(self.tx_store[inv.hash]))\n+            elif (inv.type & MSG_TYPE_MASK) == MSG_BLOCK and inv.hash in self.block_store.keys():\n+                self.send_message(msg_block(self.block_store[inv.hash]))\n+            else:\n+                logger.debug('getdata message type {} received.'.format(hex(inv.type)))\n+\n+    def on_getheaders(self, message):\n+        \"\"\"Search back through our block store for the locator, and reply with a headers message if found.\"\"\"\n+\n+        locator, hash_stop = message.locator, message.hashstop\n+\n+        # Assume that the most recent block added is the tip\n+        if not self.block_store:\n+            return\n+\n+        headers_list = [self.block_store[self.last_block_hash]]\n+        maxheaders = 2000\n+        while headers_list[-1].sha256 not in locator.vHave:\n+            # Walk back through the block store, adding headers to headers_list\n+            # as we go.\n+            prev_block_hash = headers_list[-1].hashPrevBlock\n+            if prev_block_hash in self.block_store:\n+                prev_block_header = self.block_store[prev_block_hash]\n+                headers_list.append(prev_block_header)\n+                if prev_block_header.sha256 == hash_stop:\n+                    # if this is the hashstop header, stop here\n+                    break\n+            else:\n+                logger.debug('block hash {} not found in block store'.format(hex(prev_block_hash)))\n+                break\n+\n+        # Truncate the list if there are too many headers\n+        headers_list = headers_list[:-maxheaders - 1:-1]\n+        response = msg_headers(headers_list)\n+\n+        if response is not None:\n+            self.send_message(response)\n+\n+    def on_reject(self, message):\n+        \"\"\"Store reject reason and code for testing.\"\"\"\n+        self.reject_code_received = message.code\n+        self.reject_reason_received = message.reason\n+\n+    def send_blocks_and_test(self, blocks, rpc, success=True, request_block=True, reject_code=None, reject_reason=None, timeout=60):\n+        \"\"\"Send blocks to test node and test whether the tip advances.\n+\n+         - add all blocks to our block_store\n+         - send a headers message for the final block\n+         - the on_getheaders handler will ensure that any getheaders are responded to\n+         - if request_block is True: wait for getdata for each of the blocks. The on_getdata handler will\n+           ensure that any getdata messages are responded to\n+         - if success is True: assert that the node's tip advances to the most recent block\n+         - if success is False: assert that the node's tip doesn't advance\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for block in blocks:\n+                self.block_store[block.sha256] = block\n+                self.last_block_hash = block.sha256\n+\n+        self.send_message(msg_headers([blocks[-1]]))\n+\n+        if request_block:\n+            wait_until(lambda: blocks[-1].sha256 in self.getdata_requests, timeout=timeout, lock=mininode_lock)\n+\n+        if success:\n+            wait_until(lambda: rpc.getbestblockhash() == blocks[-1].hash, timeout=timeout)\n+        else:\n+            assert rpc.getbestblockhash() != blocks[-1].hash\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)\n+\n+    def send_txs_and_test(self, txs, rpc, success=True, reject_code=None, reject_reason=None):\n+        \"\"\"Send txs to test node and test whether they're accepted to the mempool.\n+\n+         - add all txs to our tx_store\n+         - send tx messages for all txs\n+         - if success is True: assert that the tx is accepted to the mempool\n+         - if success is False: assert that the tx is not accepted to the mempool\n+         - if reject_code and reject_reason are set: assert that the correct reject message is received.\"\"\"\n+\n+        with mininode_lock:\n+            self.reject_code_received = None\n+            self.reject_reason_received = None\n+\n+            for tx in txs:\n+                self.tx_store[tx.sha256] = tx\n+\n+        for tx in txs:\n+            self.send_message(msg_tx(tx))\n+\n+        self.sync_with_ping()\n+\n+        raw_mempool = rpc.getrawmempool()\n+        if success:\n+            # Check that all txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash in raw_mempool, \"{} not found in mempool\".format(tx.hash)\n+        else:\n+            # Check that none of the txs are now in the mempool\n+            for tx in txs:\n+                assert tx.hash not in raw_mempool, \"{} tx found in mempool\".format(tx.hash)\n+\n+        if reject_code is not None:\n+            wait_until(lambda: self.reject_code_received == reject_code, lock=mininode_lock)\n+        if reject_reason is not None:\n+            wait_until(lambda: self.reject_reason_received == reject_reason, lock=mininode_lock)"
      }
    ]
  },
  {
    "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGY0ZjUxZjFhOTQwYTIzOWM5YjQwNmZlM2IzNjJiZjMzMDNjYmNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:58:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T09:58:41Z"
      },
      "message": "Merge #11966: clientversion: Use full commit hash for commit-based version descriptions\n\na71c56a clientversion: Use full commit hash for commit-based version descriptions (Luke Dashjr)\n\nPull request description:\n\n  git keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\n  To workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\n  This has no effect on tagged releases.\n\n  (Cleanly mergable back to 0.10 without backport)\n\nTree-SHA512: b0be5391fadd16fbc9bbeffe1574a61c95931cbf6dea885d7e3cfcd3474b89e71767b1b55b4eeeeb66e4e119e78ff579cd9d206366d36928a209a31e1c1eed75",
      "tree": {
        "sha": "3274c5c77f5f819acf8c77fb8b9d2497c934c755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3274c5c77f5f819acf8c77fb8b9d2497c934c755"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJagrbRAAoJEB5K7WKYbNJdFgoH/0edY52g1VwzzkH1pL8MdlfL\ns2jQNAKI2+BX1/GiSMNUVIYPRZ1c0mkBoJ+3QFKt9dEHctXuGZU+coVUrEUXVe3f\nVccz3DkAgzzSOLm5RVSUClM5i2/WZH/THHSESRupdAeuxlGEsssqp2hBp6tlJljj\nK5HZFORw2FUh134HfIkXLimnzUh73stat5kRURyTfD/K8Y+w3Oz7f/ShweUVvLJ7\nXGidJxlDvAo+ecbWJ9IKzKdC9lgRRuedWYzAao34mt1YeCPLS7ohqHJQJR8GVZZK\nYsTey4eWt5sHfxls94Na5nS+Ei+qbKP37gEAwAMQgxvz+4pmS2CZNrUP4cu5+jI=\n=TIz7\n-----END PGP SIGNATURE-----",
        "payload": "tree 3274c5c77f5f819acf8c77fb8b9d2497c934c755\nparent 2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d\nparent a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518515897 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518515921 +0100\n\nMerge #11966: clientversion: Use full commit hash for commit-based version descriptions\n\na71c56a clientversion: Use full commit hash for commit-based version descriptions (Luke Dashjr)\n\nPull request description:\n\n  git keeps changing the number of digits in abbreviated hashes, resulting in the GitHub archive hash changing because we include it here.\n  To workaround this and avoid hashes that become increasingly ambiguous later on, just include the full commit hash when building from git.\n  This has no effect on tagged releases.\n\n  (Cleanly mergable back to 0.10 without backport)\n\nTree-SHA512: b0be5391fadd16fbc9bbeffe1574a61c95931cbf6dea885d7e3cfcd3474b89e71767b1b55b4eeeeb66e4e119e78ff579cd9d206366d36928a209a31e1c1eed75\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dbc4a4740cd2b9340e6a2f3ae6b13de40b5ee0d"
      },
      {
        "sha": "a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a71c56aebbd93b25fcdbc170bd8b451e52a6b4dd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "662fbb6e77c9dfa4fc11b58b0a6754e8e02c3c16",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "patch": "@@ -43,7 +43,7 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n //! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n-#define GIT_COMMIT_ID \"$Format:%h$\"\n+#define GIT_COMMIT_ID \"$Format:%H$\"\n #define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n "
      }
    ]
  },
  {
    "sha": "b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2Y2MDAyZWQ1ZDEyYjQ2MWViNTZiNzY4ZDA2ZjI0NjhjZDBjMTJl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-02-13T16:46:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-02-13T17:29:00Z"
      },
      "message": "Fix rescan test failure due to unset g_address_type, g_change_type\n\nNew global variables were introduced in #11403 and not setting them causes:\n\n    test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n    unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n\nIt's possible to reproduce the failure reliably by running:\n\n    src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n\nFailures happen nondeterministically because boost test framework doesn't run\ntests in a specified order, and tests that run previously can set the global\nvariables and mask the bug.",
      "tree": {
        "sha": "e38f3d2fe9cd0d51a4d4b3fbbbc8c0ad0ce9a9b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e38f3d2fe9cd0d51a4d4b3fbbbc8c0ad0ce9a9b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5dc00f68c49c46a380a98d06233f90528b8e2557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5dc00f68c49c46a380a98d06233f90528b8e2557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5dc00f68c49c46a380a98d06233f90528b8e2557"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9db5d639227fbe6348ea79d6be1b5fb28542a3a2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7f6002ed5d12b461eb56b768d06f2468cd0c12e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "patch": "@@ -451,6 +451,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n+    g_address_type = OUTPUT_TYPE_DEFAULT;\n+    g_change_type = OUTPUT_TYPE_DEFAULT;\n+\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;"
      }
    ]
  },
  {
    "sha": "be45a67895f1259eaee80cfb122a849a400ae1ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTQ1YTY3ODk1ZjEyNTllYWVlODBjZmIxMjJhODQ5YTQwMGFlMWFk",
    "commit": {
      "author": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-02-13T18:34:04Z"
      },
      "committer": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-02-13T18:35:04Z"
      },
      "message": "Add some script tests related to BOOL ops and odd values like negative 0.",
      "tree": {
        "sha": "83f886d104dcaa61f66b2f1f265577e98b82b0bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83f886d104dcaa61f66b2f1f265577e98b82b0bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be45a67895f1259eaee80cfb122a849a400ae1ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad/comments",
    "author": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccefe52246ee41d64699708be588bf84f5204e9e",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be45a67895f1259eaee80cfb122a849a400ae1ad/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be45a67895f1259eaee80cfb122a849a400ae1ad/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=be45a67895f1259eaee80cfb122a849a400ae1ad",
        "patch": "@@ -168,6 +168,18 @@\n [\"1 0 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 1 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 0 BOOLOR\", \"NOT\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"0x01 0x80\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLOR\"],\n+[\"0x01 0x00\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLOR\"],\n+[\"0x01 0x81\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLOR\"],\n+[\"0x01 0x80\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLAND\"],\n+[\"0x01 0x00\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLAND\"],\n+[\"0x01 0x81\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLAND\"],\n+[\"0x01 0x00\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"non-minimal-0 NOT\"],\n+[\"0x01 0x80\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"negative-0 NOT\"],\n+[\"0x01 0x81\", \"NOT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative 1 NOT\"],\n+[\"0x01 0x80 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"-0 0 NUMEQUAL\"],\n+[\"0x01 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n+[\"0x02 0x00 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n [\"16 17 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],"
      }
    ]
  },
  {
    "sha": "19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWFjODZlMjA2MzQzMmZjYTFmMjFmZDNlZjk3NzBlN2JkZTVkMGZm",
    "commit": {
      "author": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-01-14T17:15:31Z"
      },
      "committer": {
        "name": "Alin Rus",
        "email": "alin@fsck.ro",
        "date": "2018-02-13T19:47:55Z"
      },
      "message": "Remove useless string initialization.",
      "tree": {
        "sha": "3ac58066929e7945cc23ff720b7cdcce09f29912",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ac58066929e7945cc23ff720b7cdcce09f29912"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/comments",
    "author": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "flipbitsnotburgers",
      "id": 48412190,
      "node_id": "MDQ6VXNlcjQ4NDEyMTkw",
      "avatar_url": "https://avatars.githubusercontent.com/u/48412190?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flipbitsnotburgers",
      "html_url": "https://github.com/flipbitsnotburgers",
      "followers_url": "https://api.github.com/users/flipbitsnotburgers/followers",
      "following_url": "https://api.github.com/users/flipbitsnotburgers/following{/other_user}",
      "gists_url": "https://api.github.com/users/flipbitsnotburgers/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flipbitsnotburgers/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flipbitsnotburgers/subscriptions",
      "organizations_url": "https://api.github.com/users/flipbitsnotburgers/orgs",
      "repos_url": "https://api.github.com/users/flipbitsnotburgers/repos",
      "events_url": "https://api.github.com/users/flipbitsnotburgers/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flipbitsnotburgers/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3ea3141d5e58acc79b8930cf1504dcfc6e0735c3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "patch": "@@ -139,7 +139,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     if (pszName[0] == 0)\n         return false;\n     int port = portDefault;\n-    std::string hostname = \"\";\n+    std::string hostname;\n     SplitHostPort(std::string(pszName), port, hostname);\n \n     std::vector<CNetAddr> vIP;"
      },
      {
        "sha": "8cba59dbbca050a74936657faaad54547a0a19b8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "patch": "@@ -90,7 +90,7 @@ static enum RetFormat ParseDataFormat(std::string& param, const std::string& str\n \n static std::string AvailableDataFormatsString()\n {\n-    std::string formats = \"\";\n+    std::string formats;\n     for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n         if (strlen(rf_names[i].name) > 0) {\n             formats.append(\".\");"
      },
      {
        "sha": "e03234060d8eb2a287b5b9f8fe64b5519981b7f4",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "patch": "@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     ipv4Addr.s_addr = 0xa0b0c001;\n     \n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n-    std::string pszDest = \"\";\n+    std::string pszDest;\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default."
      },
      {
        "sha": "ebafe078f4b699795316ffb036851832901cd5f2",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "patch": "@@ -127,7 +127,7 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n-    std::string strRet = \"\";\n+    std::string strRet;\n     strRet.reserve((len+2)/3*4);\n \n     int mode=0, left=0;\n@@ -267,7 +267,7 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n     static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n-    std::string strRet=\"\";\n+    std::string strRet;\n     strRet.reserve((len+4)/5*8);\n \n     int mode=0, left=0;"
      },
      {
        "sha": "930e8bbbb4e222246ae1d4e28ff817b8d708f76b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "patch": "@@ -279,7 +279,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n         );\n \n \n-    std::string strLabel = \"\";\n+    std::string strLabel;\n     if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n \n@@ -452,7 +452,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         );\n \n \n-    std::string strLabel = \"\";\n+    std::string strLabel;\n     if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n "
      }
    ]
  },
  {
    "sha": "fa27623edbe7530d667e05d513066d1bd5339f41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI3NjIzZWRiZTc1MzBkNjY3ZTA1ZDUxMzA2NmQxYmQ1MzM5ZjQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-13T20:48:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-13T20:42:31Z"
      },
      "message": "qt: Initialize members in WalletModel",
      "tree": {
        "sha": "ab3c59112791a2bde09e9649dddcec82d03bd95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab3c59112791a2bde09e9649dddcec82d03bd95b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJag023AAoJEM4rdWl+aaVIh1IL/2PlH+HQKgcDXP318I96zIFQ\nRUPnGFLENjY1k24YCsHQgmIoJ2fKiL/k/S9unHFqpfe2k4K68nF7GjC50qrIrYOV\nfP3BmF+b79+tdUQA/GSgAxSAdCpKNCNZ9JCIx15nmEbeVKuggJYsnkQbhnCs9AsR\n9obHLA/WyUNP8SPJiUo4os3FAdbpwGMhX+j1AXnYtwxRxTDoat4aHPKjcIegjPFM\nqj8N+/TFhhbuYwU1cEzJu5a6ZqUKB1FUpprGKHCE6lOWSXvdxQysG702FjOttQmc\n1c7xwcvHQ+L3+w5iIs5B7BiKKGDIwJQQ3chFwkkbe54kxK0wf1dk+Mrdfe0Kt/f1\nqFF0AuLna2Xa61i9ps+45gVBulnF2yz60abhc5E8uIIVMzE3gbAL92AxgcZX1/IR\nSV6p19D/dBS3mPkpFxgBr5a4d+R6Y3gzN8ILo0IlQ0BPVcALZ+cdGY0YEPUlQ6Cs\n8ZzJx4D2CMeJ8TY1bXK/cJBIw/4L1sByJK34iT0L3w==\n=ypB1\n-----END PGP SIGNATURE-----",
        "payload": "tree ab3c59112791a2bde09e9649dddcec82d03bd95b\nparent f4f4f51f1a940a239c9b406fe3b362bf3303cbce\nauthor MarcoFalke <falke.marco@gmail.com> 1518554918 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518554551 -0500\n\nqt: Initialize members in WalletModel\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27623edbe7530d667e05d513066d1bd5339f41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34954a6bfa98feab6ef9f05dcd4e6693cca2c464",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27623edbe7530d667e05d513066d1bd5339f41/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27623edbe7530d667e05d513066d1bd5339f41/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fa27623edbe7530d667e05d513066d1bd5339f41",
        "patch": "@@ -42,6 +42,7 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, O\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n+    cachedWatchOnlyBalance{0}, cachedWatchUnconfBalance{0}, cachedWatchImmatureBalance{0},\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {"
      }
    ]
  },
  {
    "sha": "deee216bd36a553eb77152240ec18994e06b2c4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWVlMjE2YmQzNmE1NTNlYjc3MTUyMjQwZWMxODk5NGUwNmIyYzRi",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-12T20:36:05Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:05:22Z"
      },
      "message": "Delete mac_alias patch\n\nThe patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\nNote that this PR won't be complete until a new version of mac_alias containing the path has been released, and the depends system is updated to reflect the new version.",
      "tree": {
        "sha": "ec6a974f5d4f92c1ef8ba65c316866e0cf75df81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec6a974f5d4f92c1ef8ba65c316866e0cf75df81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deee216bd36a553eb77152240ec18994e06b2c4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 0,
      "deletions": 61
    },
    "files": [
      {
        "sha": "f70604f0b501cb507a2055b96efa3d73ad732cb7",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deee216bd36a553eb77152240ec18994e06b2c4b/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deee216bd36a553eb77152240ec18994e06b2c4b/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=deee216bd36a553eb77152240ec18994e06b2c4b",
        "patch": "@@ -4,11 +4,6 @@ $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n $(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n-$(package)_patches=python3.patch\n-\n-define $(package)_preprocess_cmds\n-    patch -p1 < $($(package)_patch_dir)/python3.patch\n-endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4f4f51f1a940a239c9b406fe3b362bf3303cbce/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "patch": "@@ -1,56 +0,0 @@\n-diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\n-+++ b/mac_alias/alias.py\n-@@ -258,10 +258,10 @@\n-         alias = Alias()\n-         alias.appinfo = appinfo\n-             \n--        alias.volume = VolumeInfo (volname.replace('/',':'),\n-+        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n-                                    voldate, fstype, disktype,\n-                                    volattrs, volfsid)\n--        alias.target = TargetInfo (kind, filename.replace('/',':'),\n-+        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n-                                    folder_cnid, cnid,\n-                                    crdate, creator_code, type_code)\n-         alias.target.levels_from = levels_from\n-@@ -276,9 +276,9 @@\n-                 b.read(1)\n- \n-             if tag == TAG_CARBON_FOLDER_NAME:\n--                alias.target.folder_name = value.replace('/',':')\n-+                alias.target.folder_name = value.decode().replace('/',':')\n-             elif tag == TAG_CNID_PATH:\n--                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n-+                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n-                                                            value)\n-             elif tag == TAG_CARBON_PATH:\n-                 alias.target.carbon_path = value\n-@@ -313,9 +313,9 @@\n-                 alias.target.creation_date \\\n-                     = mac_epoch + datetime.timedelta(seconds=seconds)\n-             elif tag == TAG_POSIX_PATH:\n--                alias.target.posix_path = value\n-+                alias.target.posix_path = value.decode()\n-             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n--                alias.volume.posix_path = value\n-+                alias.volume.posix_path = value.decode()\n-             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n-                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n-             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -467,12 +467,12 @@\n- \n-         b.write(struct.pack(b'>hhQhhQ',\n-                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n--                8, long(voldate * 65536),\n-+                8, int(voldate * 65536),\n-                 TAG_HIGH_RES_CREATION_DATE,\n--                8, long(crdate * 65536)))\n-+                8, int(crdate * 65536)))\n- \n-         if self.target.cnid_path:\n--            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n-+            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n-                                     *self.target.cnid_path)\n-             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n-                                  len(cnid_path)))"
      }
    ]
  },
  {
    "sha": "fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzFiZmNmOWZkMmMyNDg0NmE5ZjljYWE0MmY1MzcwZjE5MmMzZDQw",
    "commit": {
      "author": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:01:22Z"
      },
      "committer": {
        "name": "Douglas Roark",
        "email": "joroark@vt.edu",
        "date": "2018-02-14T01:05:22Z"
      },
      "message": "Update mac_alias to 2.0.7",
      "tree": {
        "sha": "59e3161b538143da5fba5d69c22048d2083213d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59e3161b538143da5fba5d69c22048d2083213d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/comments",
    "author": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "droark",
      "id": 5931802,
      "node_id": "MDQ6VXNlcjU5MzE4MDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5931802?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/droark",
      "html_url": "https://github.com/droark",
      "followers_url": "https://api.github.com/users/droark/followers",
      "following_url": "https://api.github.com/users/droark/following{/other_user}",
      "gists_url": "https://api.github.com/users/droark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/droark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/droark/subscriptions",
      "organizations_url": "https://api.github.com/users/droark/orgs",
      "repos_url": "https://api.github.com/users/droark/repos",
      "events_url": "https://api.github.com/users/droark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/droark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deee216bd36a553eb77152240ec18994e06b2c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deee216bd36a553eb77152240ec18994e06b2c4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deee216bd36a553eb77152240ec18994e06b2c4b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "306c8356567bcef2100ab5c265d3713d793913b4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "patch": "@@ -1,8 +1,8 @@\n package=native_mac_alias\n-$(package)_version=2.0.6\n+$(package)_version=2.0.7\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n+$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n \n define $(package)_build_cmds"
      }
    ]
  },
  {
    "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTJhZTcxMTFjYmZmMDlhNGNiYzVjYWVlOWUwMmI2ZWQzNTgwNDc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:25:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:34:42Z"
      },
      "message": "Merge #12424: Fix rescan test failure due to unset g_address_type, g_change_type\n\nb7f6002ed5 Fix rescan test failure due to unset g_address_type, g_change_type (Russell Yanofsky)\n\nPull request description:\n\n  New global variables were introduced in #11403 and not setting them causes:\n\n  ```\n  test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n  unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n  ```\n\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bug #12150. Example travis failure is https://travis-ci.org/bitcoin/bitcoin/jobs/340642010\n\nTree-SHA512: ab40662b3356892b726f1f552e22d58d86b5e982538741e52b37ee447a0c97c76c24ae543687edf2e25d9dd925722909d37abfae95d93bf09e23fa245a4c3351",
      "tree": {
        "sha": "77a1125225219d72b551989318e1a3353a63f9d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77a1125225219d72b551989318e1a3353a63f9d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJag5IzAAoJEKY26XYx92fgZPkQAJzLkH6e51c9oOkYRD1y33EN\nnp/TOLVYT3eVC8MSMrFcOjZ3iwfkJ/7tUcV/APvHeZlCCbCEHjglXABqCN9I6/Rj\n+gY2ifx8SebPxgrAmMmKAavW8YlDCroCezUiLN/GjqD7W4/SY3P0C7rFWNdiQxao\ng99Oc76BZBu09GUG2t7fLFZntVhIyo7AigGd5HTErFDA4medvKthKUQVY9u9b+A5\n8L0rk+EoD6OhkW1LOp73Kae0hAVZvNl0xy/PmKReotSrdfffmNrt8HacAwZ5+gaP\nakqfd/MDNk4UcFVurVz13YZioNk7yx8n/0lz10su8jLiKpE0aGZp2T9RVyGBt1Yf\nHePJipq/rvwN2HSG4nSPheR6MUgz9d5UYpndVw7Ejc+aJ7mdNLs/MgINXp8Fjnmc\njer9ycwQBew2//3TP770p/Ii+ZDMSQIVPggcb5jSEI61hOCo8KCOtcN1vfVwMcU2\n7pbfvl7Ldu+fIRuvHv7yL46pT4VKr7NQ2VF7Nuy5DWYsXHefvP6vAOty6Oofq2I2\n8mwQH7NSZP5NFgo0pUXXm9AnBNOxACUslJaJLIXSNhphtWFdio/xbhHTG9BTeegO\nJl+G6GCLZ8V+1BDZ5hMPHFzYIMNaaKJnyiApFkn6VfWF2yaq8pYK6K/bXQxfFy58\nGNNGkbrVhsWwHFQVIaLz\n=P08w\n-----END PGP SIGNATURE-----",
        "payload": "tree 77a1125225219d72b551989318e1a3353a63f9d9\nparent f4f4f51f1a940a239c9b406fe3b362bf3303cbce\nparent b7f6002ed5d12b461eb56b768d06f2468cd0c12e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1518571516 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1518572082 -0800\n\nMerge #12424: Fix rescan test failure due to unset g_address_type, g_change_type\n\nb7f6002ed5 Fix rescan test failure due to unset g_address_type, g_change_type (Russell Yanofsky)\n\nPull request description:\n\n  New global variables were introduced in #11403 and not setting them causes:\n\n  ```\n  test_bitcoin: wallet/wallet.cpp:4259: CTxDestination GetDestinationForKey(const CPubKey&, OutputType): Assertion `false' failed.\n  unknown location(0): fatal error in \"importwallet_rescan\": signal: SIGABRT (application abort requested)\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/importwallet_rescan\n  ```\n\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bug #12150. Example travis failure is https://travis-ci.org/bitcoin/bitcoin/jobs/340642010\n\nTree-SHA512: ab40662b3356892b726f1f552e22d58d86b5e982538741e52b37ee447a0c97c76c24ae543687edf2e25d9dd925722909d37abfae95d93bf09e23fa245a4c3351\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      },
      {
        "sha": "b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7f6002ed5d12b461eb56b768d06f2468cd0c12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7f6002ed5d12b461eb56b768d06f2468cd0c12e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9db5d639227fbe6348ea79d6be1b5fb28542a3a2",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252ae7111cbff09a4cbc5caee9e02b6ed3580476/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252ae7111cbff09a4cbc5caee9e02b6ed3580476/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "patch": "@@ -451,6 +451,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n+    g_address_type = OUTPUT_TYPE_DEFAULT;\n+    g_change_type = OUTPUT_TYPE_DEFAULT;\n+\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;"
      }
    ]
  },
  {
    "sha": "5f605e172baee35421eb20736601befdd8cad796",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjYwNWUxNzJiYWVlMzU0MjFlYjIwNzM2NjAxYmVmZGQ4Y2FkNzk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-13T21:04:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-14T01:37:47Z"
      },
      "message": "Make signrawtransaction accept P2SH-P2WSH redeemscripts",
      "tree": {
        "sha": "3991b450a2bb676a26c51ac025cf56c176ce784f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3991b450a2bb676a26c51ac025cf56c176ce784f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f605e172baee35421eb20736601befdd8cad796",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f605e172baee35421eb20736601befdd8cad796",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bbc0459a7c1226c4638832d89a7af8c85e06344c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f605e172baee35421eb20736601befdd8cad796/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f605e172baee35421eb20736601befdd8cad796/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5f605e172baee35421eb20736601befdd8cad796",
        "patch": "@@ -848,6 +848,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGMyMTg4ZGEyN2ZkZjZmYTYyZGQ0NzdiMDBiOGYwZWRlOTk0YTBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T11:48:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T11:53:46Z"
      },
      "message": "Merge #12232: Improve \"Turn Windows Features On or Off\" step\n\n9b6454c Improve \"Turn Windows Features On or Off\" step (Ernest Hemingway)\n\nPull request description:\n\n  Originally, this readme suggests searching for 'turn' to open this dialog but this will not necessarily work on all windows 10 PCs. It's better to use the executable name instead, which is consistent across installations.\n\nTree-SHA512: e5b95dd69a9a186ea5cd9c7aac2283e77f1857ecf628f8ad6ac0411f362c8aeb52e3bcffb46b90e3bab52f45fa244f269b1777f83d3e0519ac8a95935f7fb5b4",
      "tree": {
        "sha": "a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahCNKAAoJEB5K7WKYbNJd31IH/0GzpH4nF7BGAT0JVO5zr6i+\nnOUmNoLh4zrsv+4RDKCTIMAda1u90uVr8ET5qYtJn3Snw1cZJZQDQdudKsr7t+BU\nMgop7Hu+2XF29Xka+8mHVGXzKrXEqzGlWD1tEL4g01laQe7GY/IKqXQ4od3igT7U\nIFkEmcxkm2FeyBN93dM8d/Pczjjg75avX49l+E0gjVKSsYNYsQTC59NhyIpRWtgY\njuKbv8QnNEQWshNMO/DtBQlJ2ZpxC/XqDVX0BjxPEN58Eg/qeoYknWSnv3Xq57BE\n82dcGVF5cBRxpqPk2gQ8Yl5g0F0kATcJDUKto4UoiaWBkvgsmnzu401IG4DTg3U=\n=fJtt\n-----END PGP SIGNATURE-----",
        "payload": "tree a1b16da9ac2c7a47e02360e1502fbeeb5b4e2468\nparent 252ae7111cbff09a4cbc5caee9e02b6ed3580476\nparent 9b6454c52ae5d53394fc6542e9f3e02a1388fbe9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518608932 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518609226 +0100\n\nMerge #12232: Improve \"Turn Windows Features On or Off\" step\n\n9b6454c Improve \"Turn Windows Features On or Off\" step (Ernest Hemingway)\n\nPull request description:\n\n  Originally, this readme suggests searching for 'turn' to open this dialog but this will not necessarily work on all windows 10 PCs. It's better to use the executable name instead, which is consistent across installations.\n\nTree-SHA512: e5b95dd69a9a186ea5cd9c7aac2283e77f1857ecf628f8ad6ac0411f362c8aeb52e3bcffb46b90e3bab52f45fa244f269b1777f83d3e0519ac8a95935f7fb5b4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ae7111cbff09a4cbc5caee9e02b6ed3580476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ae7111cbff09a4cbc5caee9e02b6ed3580476"
      },
      {
        "sha": "9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b6454c52ae5d53394fc6542e9f3e02a1388fbe9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a10654c7eea4c3a8de3542d5b664d4b65c10ac56",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "patch": "@@ -34,10 +34,9 @@ Full instructions to install WSL are available on the above link.\n To install WSL on Windows 10 with Fall Creators Update installed (version >= 16215.0) do the following:\n \n 1. Enable the Windows Subsystem for Linux feature\n-  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n-  * Select Windows Subsystem for Linux\n-  * Click OK\n-  * Restart if necessary\n+  * Open the Windows Features dialog (`OptionalFeatures.exe`)\n+  * Enable 'Windows Susbsystem for Linux'\n+  * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)\n   * Click Install"
      }
    ]
  },
  {
    "sha": "f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTA2YzBhN2Y4ZWE2YmFlMDg5MTc3ODg0ZTQ0ZTM4Y2QyYmZlYjIz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-14T13:23:43Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-02-14T13:23:43Z"
      },
      "message": "[qt] send: Clear All also resets coin control options",
      "tree": {
        "sha": "691fd590ca9690fd78e8c3c7daf0a1dddf48d58f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/691fd590ca9690fd78e8c3c7daf0a1dddf48d58f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqEOF8ACgkQV/+b28ww\nEAn6dRAAjzgPGnMIhVlbT2Sjm9hrb/pvinl5/yBs5HNS7vVZi04sB9A0F372qP5C\nJexwaCQiB6WXD0kiYn1bd63ztLF6ViD+AdrhF+ywjF4JNdGXHIuSLnf3rONePcin\ntT2qFBiBlhBhi1cIvlcV6gSv6z4wirDJNaTARfByC2pLjEqPGydQ3UY37h+n9mPV\n7K/BxzEnbvNva9moABPLQgFWK1TRvxI19O0elCYRZm0atwwLT++fAl6+ctSsK8r0\nefCuPvyU0AlLDs62Ebqpxn+qNsgkaWRgKDIU5hhRx4/lg2bxKU0lGduxwilQ8RHB\n/an/A0UGIJ/ExPgk24e0zF9t3OKF24Zf/TSOjuAq4U2ky19aWG1muqd0BvssU4Lk\nbnLLbbtIHDN//CFFWj+K++ZEkjDIAesYt7KNRvQNCHnNlRBAlOXXeLdtW8n+IbmA\nbmUw1pI8zm7D8qofI3rCPejfXfqetAMGXF8V6crIdLXShlq9zPvXTBEDu1vlC3Dh\nfQDkycYdmyI8uGV0RO2Fks2o6TgvDs4JqM8RjtjjliTXd5D9LTo7UDye4iDrekZe\nh+XNbGasg6jegBzaQA+2T0j8q03s1MAm2/tX05ifH9LwBR+XH1/+27kBwmTKOZkU\n20/uAOilK/NcA75XNIhDECqetwJ56o9Gpj8J1Pw7CCbyNTH99fs=\n=z4to\n-----END PGP SIGNATURE-----",
        "payload": "tree 691fd590ca9690fd78e8c3c7daf0a1dddf48d58f\nparent fdc2188da27fdf6fa62dd477b00b8f0ede994a0e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1518614623 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1518614623 +0100\n\n[qt] send: Clear All also resets coin control options\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f506c0a7f8ea6bae089177884e44e38cd2bfeb23/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f3433ef57d335cdbe31c2f7208a72dd154de2fc8",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f506c0a7f8ea6bae089177884e44e38cd2bfeb23/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f506c0a7f8ea6bae089177884e44e38cd2bfeb23/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
        "patch": "@@ -375,6 +375,12 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n void SendCoinsDialog::clear()\n {\n+    // Clear coin control settings\n+    CoinControlDialog::coinControl()->UnSelectAll();\n+    ui->checkBoxCoinControlChange->setChecked(false);\n+    ui->lineEditCoinControlChange->clear();\n+    coinControlUpdateLabels();\n+\n     // Remove entries until only one left\n     while(ui->entries->count())\n     {"
      }
    ]
  },
  {
    "sha": "0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2M0NWVkYzBmOGE4ZThkNzU2OWM4OTZlNDg3ZmY1ZjhmMTFjNDQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:42:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:43:55Z"
      },
      "message": "Merge #12409: rpc: Reject deprecated reserveChangeKey in fundrawtransaction\n\nfa5f518 rpc: Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8506d1494b13c4582b1379e3b8c3906016f1980ebe847727a43a90e7bb9f71b896a1792bc97a8dc7320ccce0534050eb04f92a6f82f811d08efa74a98b3e43f0",
      "tree": {
        "sha": "324b8409d1910b3ed6c9985fbb2a8e5e983e9a22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/324b8409d1910b3ed6c9985fbb2a8e5e983e9a22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahFk7AAoJEB5K7WKYbNJdzWMH/29Xno4wXhEWFDcYx/GfLMEd\nIKEWRSxjDqPojNIEkyAp/7mVpG79PBuep9kPB0EtNjCDf+99vNBr0Qk3/o8Ppd28\nlDlXdbdYXUCqQizIknGsOez266xd4Myd0Q0LhoYPW4H0JuGRouZ/ChblqPNiLXrm\nYuqwSY3XCQULpvpoM+83qYI689/CX6UUcb5mzZRA9yHrKFXCtfVhThdG5Ngsyt9v\nw7T5mnbLREbnTKlKG3CrHgyzxu/X10dMPMA/YLwjH7e8P7EgIxHZcTsFb7EEKRnO\naDQ2RtIEQwdowJX6t4pEBRKcYhcmFDBlq7Gy3ppTldumaN6iNnKiPgW2AGYJQfY=\n=wB4O\n-----END PGP SIGNATURE-----",
        "payload": "tree 324b8409d1910b3ed6c9985fbb2a8e5e983e9a22\nparent fdc2188da27fdf6fa62dd477b00b8f0ede994a0e\nparent fa5f51830d2649cace2fc827084093019497c151\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518622960 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518623035 +0100\n\nMerge #12409: rpc: Reject deprecated reserveChangeKey in fundrawtransaction\n\nfa5f518 rpc: Reject deprecated reserveChangeKey in fundrawtransaction (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 8506d1494b13c4582b1379e3b8c3906016f1980ebe847727a43a90e7bb9f71b896a1792bc97a8dc7320ccce0534050eb04f92a6f82f811d08efa74a98b3e43f0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdc2188da27fdf6fa62dd477b00b8f0ede994a0e"
      },
      {
        "sha": "fa5f51830d2649cace2fc827084093019497c151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5f51830d2649cace2fc827084093019497c151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5f51830d2649cace2fc827084093019497c151"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "528cb81a385fe0b793f19a79b4d9c74c10d3a4f6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -56,6 +56,13 @@ frequently tested on them.\n Notable changes\n ===============\n \n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n+\n Credits\n =======\n "
      },
      {
        "sha": "c03f7d7923901d3007acb69252d6dc0049f2ce2b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -3129,7 +3129,6 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 {\"change_type\", UniValueType(UniValue::VSTR)},\n                 {\"includeWatching\", UniValueType(UniValue::VBOOL)},\n                 {\"lockUnspents\", UniValueType(UniValue::VBOOL)},\n-                {\"reserveChangeKey\", UniValueType(UniValue::VBOOL)}, // DEPRECATED (and ignored), should be removed in 0.16 or so.\n                 {\"feeRate\", UniValueType()}, // will be checked below\n                 {\"subtractFeeFromOutputs\", UniValueType(UniValue::VARR)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},"
      },
      {
        "sha": "4d3be18516d49373f082ea917afbdf2b5df34dd5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "patch": "@@ -181,6 +181,9 @@ def run_test(self):\n \n         assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n+        # reserveChangeKey was deprecated and is now removed\n+        assert_raises_rpc_error(-3, \"Unexpected key reserveChangeKey\", lambda: self.nodes[2].fundrawtransaction(hexstring=rawtx, options={'reserveChangeKey': True}))\n+\n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n         ############################################################"
      }
    ]
  },
  {
    "sha": "6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmI5YzEzZjlhMmIwZmYxMzI4Yjc2MDVkNGI5MDFhNjQ2YWIzNWZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:52:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T15:52:46Z"
      },
      "message": "Merge #11866: Do not un-mark fInMempool on wallet txn if ATMP fails.\n\n6ef86c9 Do not un-mark fInMempool on wallet txn if ATMP fails. (Matt Corallo)\n\nPull request description:\n\n  Irrespective of the failure reason, un-marking fInMempool\n  out-of-order is incorrect - it should be unmarked when\n  TransactionRemovedFromMempool fires.\n\n  Clean up of #11839, which I think was the wrong fix.\n\nTree-SHA512: 580731297eeac4c4c99ec695e15b09febf62249237bc367fcd1830fc811d3166f9336e7aba7f2f6f8601960984ae22cebed781200db0f04e7cd2008db1a83f64",
      "tree": {
        "sha": "6b723f764f4f9d851bf1b0bf5051c273b4fe9c44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b723f764f4f9d851bf1b0bf5051c273b4fe9c44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahFtOAAoJEB5K7WKYbNJdcAUH/R6/1eZ+vBa239Yjk65XQrRy\nKRFglQPBypAuL2dWhddoYbao25JKLcyy64AK7qepj+YkX8IkSY+trB2YgCZkNMoj\ncdww2gH88oswm67s4Gudwg5XV7SSo3NfZHsfWxSrDeNQCLn3PLQJIuB/KIZVEZ3y\nVswNJNp+N5jsxYQG3F9Wx5bP9rKsZbvjvG+4Eao1eE41FoW156b7Zfb1qvPp1jhG\n0ahrkVB4GP3qwAHYh12kDTyyo54UMjIH4s3DwSaRsqbQjUJiBBgKhJ5ZMmbt5209\nes/L8C6aqDzooF74zHI6XII7UBQHkZA6Tazu3XnSzfsRkVIZ70CuLb46HucXvtA=\n=7OZs\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b723f764f4f9d851bf1b0bf5051c273b4fe9c44\nparent 0cc45edc0f8a8e8d7569c896e487ff5f8f11c445\nparent 6ef86c92e7fcba866160d7a346fb260d7e4ab5bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518623555 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518623566 +0100\n\nMerge #11866: Do not un-mark fInMempool on wallet txn if ATMP fails.\n\n6ef86c9 Do not un-mark fInMempool on wallet txn if ATMP fails. (Matt Corallo)\n\nPull request description:\n\n  Irrespective of the failure reason, un-marking fInMempool\n  out-of-order is incorrect - it should be unmarked when\n  TransactionRemovedFromMempool fires.\n\n  Clean up of #11839, which I think was the wrong fix.\n\nTree-SHA512: 580731297eeac4c4c99ec695e15b09febf62249237bc367fcd1830fc811d3166f9336e7aba7f2f6f8601960984ae22cebed781200db0f04e7cd2008db1a83f64\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cc45edc0f8a8e8d7569c896e487ff5f8f11c445"
      },
      {
        "sha": "6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ef86c92e7fcba866160d7a346fb260d7e4ab5bb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a57c472126e0a84b6f5fdbe95c372d89a67ece7c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "patch": "@@ -4179,19 +4179,14 @@ int CMerkleTx::GetBlocksToMaturity() const\n \n bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    // Quick check to avoid re-setting fInMempool to false\n-    if (mempool.exists(tx->GetHash())) {\n-        return false;\n-    }\n-\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a\n     // user could call sendmoney in a loop and hit spurious out of funds errors\n     // because we think that the transaction they just generated's change is\n     // unavailable as we're not yet aware its in mempool.\n     bool ret = ::AcceptToMemoryPool(mempool, state, tx, nullptr /* pfMissingInputs */,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nAbsurdFee);\n-    fInMempool = ret;\n+    fInMempool |= ret;\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzgyMDk5YTE1MWE2ODA1MjNjZDhmZjVlM2ZjYjlkNWNjMTgyYmRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T16:25:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-14T16:26:53Z"
      },
      "message": "Merge #11733: qt: Remove redundant locks\n\nd6f3a73 Remove redundant locks (practicalswift)\n\nPull request description:\n\n  Remove redundant locks:\n  * ~~`FindNode(...)` is locking `cs_vNodes` internally~~\n  * `SetAddressBook(...)` is locking `cs_wallet` internally\n  * `DelAddressBook(...)` is locking `cs_wallet` internally\n\n  **Note to reviewers:** From what I can tell these locks are redundantly held from a data integrity perspective (guarding specific variables), and they do not appear to be needed from a data consistency perspective (ensuring a consistent state at the right points). Review thoroughly and please let me know if I'm mistaken :-)\n\nTree-SHA512: 7e3ca2d52fecb16385dc65051b5b20d81b502c0025d70b0c489eb3881866bdd57947a9c96931f7b213f5a8a76b6d2c7b084dff0ef2028a1e9ca9ccfd83e5b91e",
      "tree": {
        "sha": "beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahGNNAAoJEB5K7WKYbNJdAWAH/3/2zdmO39NXh0mMavfniCKF\nu6qDHdiQ4xITrbJ+8VHqrRIDVQGnVfa+Aw6q1iCreysK8szAUacO6NOLiuNVpmMy\nEsQH6jrJCMkxNha7Ei6FwYEWmdjhyMewZWbQ/nNv9Wh+truVDCGm3FdrOovI9QLa\nkPh/nEIBUSC5S4i3+BXih4XcVqQrXZGENFhQ47PCK8bDfe8pU5M2QH6LtNBlfrCU\ng/wm4ckfLse/24NoQdjmqEVdytb8y/WP4/BoDBs+VBbiASW44+FlJ3lT4YkLN7nh\nc6xoE7BFUWg/LKFtQeTxlzM5Fh9pYoRpTF8y7zCxZ6O2kBOWJ5H95mtCK/7tJjk=\n=4Njl\n-----END PGP SIGNATURE-----",
        "payload": "tree beec2c41d354e8ca7174e2a9a29d7c3d0c0f2e75\nparent 6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd\nparent d6f3a737361d8fb562f08763f613a6529b870d1e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518625557 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518625613 +0100\n\nMerge #11733: qt: Remove redundant locks\n\nd6f3a73 Remove redundant locks (practicalswift)\n\nPull request description:\n\n  Remove redundant locks:\n  * ~~`FindNode(...)` is locking `cs_vNodes` internally~~\n  * `SetAddressBook(...)` is locking `cs_wallet` internally\n  * `DelAddressBook(...)` is locking `cs_wallet` internally\n\n  **Note to reviewers:** From what I can tell these locks are redundantly held from a data integrity perspective (guarding specific variables), and they do not appear to be needed from a data consistency perspective (ensuring a consistent state at the right points). Review thoroughly and please let me know if I'm mistaken :-)\n\nTree-SHA512: 7e3ca2d52fecb16385dc65051b5b20d81b502c0025d70b0c489eb3881866bdd57947a9c96931f7b213f5a8a76b6d2c7b084dff0ef2028a1e9ca9ccfd83e5b91e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bb9c13f9a2b0ff1328b7605d4b901a646ab35fd"
      },
      {
        "sha": "d6f3a737361d8fb562f08763f613a6529b870d1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6f3a737361d8fb562f08763f613a6529b870d1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6f3a737361d8fb562f08763f613a6529b870d1e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ffb5bff4defaed342a0f3b192c9bb2b2adccd1ba",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e782099a151a680523cd8ff5e3fcb9d5cc182bdd/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "patch": "@@ -393,11 +393,8 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     }\n \n     // Add entry\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n-                               (type == Send ? \"send\" : \"receive\"));\n-    }\n+    wallet->SetAddressBook(DecodeDestination(strAddress), strLabel,\n+                           (type == Send ? \"send\" : \"receive\"));\n     return QString::fromStdString(strAddress);\n }\n \n@@ -411,10 +408,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex &parent\n         // Also refuse to remove receiving addresses.\n         return false;\n     }\n-    {\n-        LOCK(wallet->cs_wallet);\n-        wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n-    }\n+    wallet->DelAddressBook(DecodeDestination(rec->address.toStdString()));\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGExYWY2ZDhmNzkzNTdkZGQxOGZmODAzMjRiYmFjY2E2M2FiOTVh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T01:54:41Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T01:54:41Z"
      },
      "message": "Fix typo in test_runner.py causing error",
      "tree": {
        "sha": "94e8c619a679c8e45177df9c8321fde5ef00a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e8c619a679c8e45177df9c8321fde5ef00a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "945f645eac2adaa8d50a32fd4ecd623fa930e643",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada1af6d8f79357ddd18ff80324bbacca63ab95a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada1af6d8f79357ddd18ff80324bbacca63ab95a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "patch": "@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))"
      }
    ]
  },
  {
    "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjA4OWM1MWNjNGFmMmY3ZTFjMGVjNzViZTk0NDllZTIyMmIxZDY5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T04:10:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T04:10:22Z"
      },
      "message": "Merge #12438: [Tests] Fix trivial typo in test_runner.py causing error\n\nada1af6d8f Fix typo in test_runner.py causing error (MeshCollider)\n\nPull request description:\n\n  In the case that a test fails, the typo in run_tests() (introduced in #11858) will cause an error rather than printing out the combined logs, hiding the cause of the failure.\n\nTree-SHA512: 7d7aa406d92750320ed20610cc5f174cdc94086f630af8c0c4db2003497132e0c56d59b94312fb42ad4507904a2fa858226a4a9337450930bf206183fc35c0a0",
      "tree": {
        "sha": "94e8c619a679c8e45177df9c8321fde5ef00a793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/94e8c619a679c8e45177df9c8321fde5ef00a793"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahQguAAoJENLqSFDnUosl3x0P/1e+yudK+zN7/x0iEtmV/ta/\ncSxg1CHwdsZ1ltgX7YtJeKXYtk4fObYDTOGQXzQBpRnEtUcPOGWpI/1beFtWgAds\nud9Y04zVKSOLmY02XhyfTsroNp/vZZ1MvRZz/m5CqndPc490SjWHF8pkEuCByetO\nd2asNXKUIgeqMhJ9edzVIRlAHBcXvjjW2d5iTY+bWzsmCDTAbdx1oAKG4h4LpTNM\nT5TC17IDXqt+JM+l/I5aoB1RRuTLTb4PDqCMvOnjYzWSJr7TgccmNoX1eA9ttSuA\ndyA5uO4iLgVF76hHywT3A/4yUGQJrTHc23XR1nHKjuBucsowholJkoqruhAxI6VT\nW8G2bBdlke4xpShQBD+HypSMUv+D0WkXC5g9TVIpNzswmeMZU3zjuEZY86NVC287\nwV0FY53LaBYdRl48LGAQx4QgFYaciLxiRGChTAdDF7EzY+ucvmeHkQQGR7hTdQ6h\nH1qHYdmmqPXKbBXDOhrW8G6LSNOzI2WmOVtKDyeDzwe2F0sL4Brfr5gNDXqrTHuW\nReXWkTVvwX4y72mez39VyhHJhr1qAh0Se/lCmzuNhV9o805ft1v+S9M9IjmJ3WgE\ne6o0QAZx4iklvZsfjoPMa/yHHayXN+IIN0FvgfTRjfJrUiPfvYYTM/heM6860h4D\nj5FVQcsrnlvLrLlzbDNV\n=IQmg\n-----END PGP SIGNATURE-----",
        "payload": "tree 94e8c619a679c8e45177df9c8321fde5ef00a793\nparent e782099a151a680523cd8ff5e3fcb9d5cc182bdd\nparent ada1af6d8f79357ddd18ff80324bbacca63ab95a\nauthor MarcoFalke <falke.marco@gmail.com> 1518667819 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518667822 -0500\n\nMerge #12438: [Tests] Fix trivial typo in test_runner.py causing error\n\nada1af6d8f Fix typo in test_runner.py causing error (MeshCollider)\n\nPull request description:\n\n  In the case that a test fails, the typo in run_tests() (introduced in #11858) will cause an error rather than printing out the combined logs, hiding the cause of the failure.\n\nTree-SHA512: 7d7aa406d92750320ed20610cc5f174cdc94086f630af8c0c4db2003497132e0c56d59b94312fb42ad4507904a2fa858226a4a9337450930bf206183fc35c0a0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e782099a151a680523cd8ff5e3fcb9d5cc182bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e782099a151a680523cd8ff5e3fcb9d5cc182bdd"
      },
      {
        "sha": "ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada1af6d8f79357ddd18ff80324bbacca63ab95a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada1af6d8f79357ddd18ff80324bbacca63ab95a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "945f645eac2adaa8d50a32fd4ecd623fa930e643",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "patch": "@@ -342,7 +342,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([sys.executble, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n     print_results(test_results, max_len_name, (int(time.time() - time0)))"
      }
    ]
  },
  {
    "sha": "5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTEwODU5YTgwYmQ1NzFmYTNkOGZkOGI1MjcyNjlmMmU2Zjg0ODhm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T00:57:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:43Z"
      },
      "message": "[depends] expat 2.2.5",
      "tree": {
        "sha": "b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsGhsBAAtWwEqErXmQcCf1dcVEmK5nK9A5Dc5SSJ5Mn1StFuKbuRWrTTeMnTjqvW\nfUJOSFc1IG3rXjpv0iYf9xbpdPp8AMQPjcbslR68DWbxJCZ1wBBKuU/b5aFujmef\nAtrnVCB12FkuJpFfSvn8sUDVQy/RxoLKW1//m+xXSCtSjuSUqlGOw0sXuXd2aRi7\nQcv6pewUerptwh02W5EFePRG6IQYI//xHGfeD6h35xoPTsAu4zVDpWpidSzftme7\nr/qSjmGzkBVdHiit59zHM7gVh1lsUc86rfIsB6/dCz3czoawVeGHDhIGmt5HdIT1\n8JPPrX8zR2ENf3TRWdXVPNOet0VPMauS1aW7ilGeNrwI+Q2gMLRGygiaftpNhhMk\nksXLRfH9Xb2F4/22A5W7XJJBcsydLhD5RFeSoRNGI3g/0BK3N1RRaExFuhDvBysS\nYJ57Dv1XcWZ7qFIP4mFAicio76N5H6qmU/ZonN9LUlkwqWJv/Ye2RYlJs/0tv7qm\nnN+lFaK8nFUULd5qWBuHki2FO39XiLTaipZESifPtoGn0XogMgdeRnlFGo50GeXd\n+1sowMAJusU+gWqDLoyaTxZi8iW4/n/uhCBPIRMqXAvWps+JouLAasbMUreGAAHj\nByC5jK4eBQE36hQ8T3NsK0jiH3gPYwQFNWp84Ce7XxC9sHjsa/Y=\n=bpuY\n-----END PGP SIGNATURE-----",
        "payload": "tree b515e4c06e8ab87ebb0d1a7b7ab057790a9b7773\nparent b2089c51cc4af2f7e1c0ec75be9449ee222b1d69\nauthor fanquake <fanquake@gmail.com> 1518224255 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691483 +0800\n\n[depends] expat 2.2.5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.2.1\n-$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=1868cadae4c82a018e361e2b2091de103cd820aaacb0d6cfa49bd2cd83978885\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "62516d0881289678eb15e9b365db7c3074b88f94",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a10859a80bd571fa3d8fd8b527269f2e6f8488f/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "patch": "@@ -10,7 +10,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |"
      }
    ]
  },
  {
    "sha": "61647a4b868f3d798cdac2404de0f474720ba1fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTY0N2E0Yjg2OGYzZDc5OGNkYWMyNDA0ZGUwZjQ3NDcyMGJhMWZh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:00:14Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] ccache 3.4.1",
      "tree": {
        "sha": "6b3788d119e55975fee6dc7ec8b36182c74ed519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b3788d119e55975fee6dc7ec8b36182c74ed519"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsHacBAAroYZG7aSP/LokCd1alnAQNDVgybv81Gp0GoR2dfS2XZDlule8r5VzjlO\nTDWxLOX4vqsb/eVmL5ngT4GZ1cxUsBXY8OkzoHco3BsRNmqVRubnTMnaK7F9NYCW\ng9e1IbDrg2Duow5JEjfF3ssknQSE1CjLgMegYJp297cSftHDwbzdK7l8p57eYGKi\n0+103rpEzWUnXtjU8xEB8sloslTF5G/I/2sicH4En65LG2TE/io4qM9g+vMMf9CM\neji+vOcsS9yTrj2uz3yNAsz1tBOIaXwJ8viOzTVEWfyLWFAaMezom8qTD8sKjzPU\nijtGOeRi7Q7FzMqXnlo8B4ftcMhEYrd62GVOX+32SvYTC/BFHJ/dgFG+z5ilCXFw\nYn2+WfyHLky82ZvA2KAmF16a5nZ4HJokjgGcwBkc/dBzIG/ltRL19GnmKVFlKRun\nJEuUawwGEfmwy7brxdWIGfGX9V+0xb47tQyQJKlrIooz5F/BSB4ajxRx9rtnEcFl\n78UVQx3h9Ltne5Y3/QVpWMAtNHiYqOA1CslU1wYkydKhhFDx4OobFNKYIDZu+uWh\njCe+MT4ASywOnju/qEcUE+RbWbluFzXBY12OgHqtLMeO+T3Wo5sqqfsRkv/WrG0K\neOTb+/Og8l2WjWtNloJPUshfxE8gZo8jSCpgs14tsUoe2LzN/9M=\n=4+MO\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b3788d119e55975fee6dc7ec8b36182c74ed519\nparent 5a10859a80bd571fa3d8fd8b527269f2e6f8488f\nauthor fanquake <fanquake@gmail.com> 1518224414 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] ccache 3.4.1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61647a4b868f3d798cdac2404de0f474720ba1fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a10859a80bd571fa3d8fd8b527269f2e6f8488f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a10859a80bd571fa3d8fd8b527269f2e6f8488f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61647a4b868f3d798cdac2404de0f474720ba1fa/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61647a4b868f3d798cdac2404de0f474720ba1fa/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=61647a4b868f3d798cdac2404de0f474720ba1fa",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.3.4\n+$(package)_version=3.4.1\n $(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fa9d7f38367431bc86b19ad107d709ca7ecf1574fdacca01698bdf0a47cd8567\n+$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "e87615eba28ab8863a8e46f46ac9a517d7494818",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61647a4b868f3d798cdac2404de0f474720ba1fa/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61647a4b868f3d798cdac2404de0f474720ba1fa/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=61647a4b868f3d798cdac2404de0f474720ba1fa",
        "patch": "@@ -7,7 +7,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n+| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n | Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "41550d6d138b54fca13eca0d288796d43b1c33ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTU1MGQ2ZDEzOGI1NGZjYTEzZWNhMGQyODg3OTZkNDNiMWMzM2Vj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:07:32Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] miniupnpc 2.0.20180203",
      "tree": {
        "sha": "be443faf72bb1d4965c28baa34a4b6efbfcb4a4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be443faf72bb1d4965c28baa34a4b6efbfcb4a4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsESlxAAqCSGZGXD8Nw+J2JcS5kdz7Dld29pyMBp+7oYlxIHEEFIieSXS/P6D8IJ\nwhimwbWbh6XDH0zzx+sIminEMsGfz3WWrr5AR81/uUZuUdqKzPWaVhv/XNFD2REa\n/AS/iHRx/KbeJy75a+YnhOd/2JdH/GLNlSG3QNyTPPpJ97abr/fuZDWFg+uYeXDG\nrKSH8oVJ3mell9i2naxvvY0ehBHUpnfkT9WFdJw4JYMKUP9i0sejvY0II/ki2NIj\nwgU0JQQxCj4V4KhC6QW/hViZc9lkMuZo47joUF8aScMmtWYO72OBY8qu1MS1dsXt\n/7hlqi/BbzQtPd+6cOFf6kjXaYO7SBYRReV7p5cD4D6m3lm4vf1OBJ6hz4HL+r8L\nxB+ZFNPBlR/F0Iyqnkt84SD908xVNeqYHhR4pRAsxK7irVJ5jxXBvx4OovR71pg4\nnoQMKJDbceSSV14zUve9T1zsaaR+M6aNpNy0typqU24BYlH2DvichSAbnFPHcqUm\nUivo2PVBROjqVrxwum3dh06Al/I9Rm+VIBxZLn9qbv+slgXOIzaQSEP3L2wrWBtK\nNTi+os69lSELmkM8susP2c69qU1+xYy4p/kbOMHWeI6sd+YS5SM0ob8DbY5+oACb\n18Fm/3HDetb0zjTEC9vOYkfkCeOV9n5XuK4bS6pS/eXc41RZeKk=\n=3MMg\n-----END PGP SIGNATURE-----",
        "payload": "tree be443faf72bb1d4965c28baa34a4b6efbfcb4a4a\nparent 61647a4b868f3d798cdac2404de0f474720ba1fa\nauthor fanquake <fanquake@gmail.com> 1518224852 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] miniupnpc 2.0.20180203\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41550d6d138b54fca13eca0d288796d43b1c33ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61647a4b868f3d798cdac2404de0f474720ba1fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61647a4b868f3d798cdac2404de0f474720ba1fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61647a4b868f3d798cdac2404de0f474720ba1fa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "81517965ddef58c04f72dab936b15ea9a996d046",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41550d6d138b54fca13eca0d288796d43b1c33ec/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41550d6d138b54fca13eca0d288796d43b1c33ec/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=41550d6d138b54fca13eca0d288796d43b1c33ec",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=2.0.20170509\n+$(package)_version=2.0.20180203\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=d3c368627f5cdfb66d3ebd64ca39ba54d6ff14a61966dbecb8dd296b7039f16a\n+$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      },
      {
        "sha": "5e698126d4271923a715628ca458a1f519cb79df",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41550d6d138b54fca13eca0d288796d43b1c33ec/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41550d6d138b54fca13eca0d288796d43b1c33ec/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=41550d6d138b54fca13eca0d288796d43b1c33ec",
        "patch": "@@ -18,7 +18,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L74) |\n-| MiniUPnPc | [2.0.20170509](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L76) |\n | protobuf | [2.6.3](https://github.com/google/protobuf/releases) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzM1ZDQ1ZjI4Y2Q0ZmRlZTQ3MzY0ZWM0NzMwOWQ3ZGQ4Zjk0ZWE5",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-10T01:12:55Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T10:44:44Z"
      },
      "message": "[depends] latest config.guess and config.sub",
      "tree": {
        "sha": "9a16fab3ea05fe6ae376340a3f7fe072d1662fee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a16fab3ea05fe6ae376340a3f7fe072d1662fee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFZJwACgkQLuufXMCV\nJsHgmw/7Bf0d+lrAVJ3jA7bF4Z9ERFt5vh13+TB4smmDg+8VXZcVsbTmJN7FN247\n8Y2me/KMrsqUWZMlECPPItuvVpUdHSmAQWQrG7jW90Dp8K2qH6dJrzw/dJJ3BL5V\nGLzohMkweAmPnOGep9ep5wD4u2p4EJrEmyNqKsjIqvE+OXLYt9NeaydmkfTVV7Md\nlObGgXm8XJm26o50wB2vnzD8UodVZWibJ5LW/uSxmZ4Ajt1IXHXNYHYzyRtu0+QA\nOKY7lxiaixlwcaHoJX0SmXRuKxeD+WxLuWPT5Tl7MZIbDHDlq1uNj1IUUluo76gl\nmMuA4NlHTc4i3IS8Z5GUlTnuNOvtimcHIoyGdozw02xL3ouElEQ8naxmrm4LdwsD\nYHc7enoJ7iSi10yojuTnGim17CUYkaoAow1cdWiFNqv8tIMBlUf/Mqm6Eq2XTTot\nlt0uful8ZSYRVi60YuMwHwAGLo5OlZnUIggqB+huR/cRKNpQNOTPDoH14jkYHvA+\nWRNenYWIrXLPMgMekUK3VAzxUMgpuVSlm6hkcRCXaf9DT0WXXUcZQhYjj8SrbTQn\nkbRM/9sBCBnHo9bN0UyTYpHHxYdp2camLGEHfbLJck8FYzRtcNYjZYF86qCKRNct\now75utlL7Bh9JP2beBwVJI1WrfSzhFtqVtByt6c/PgU8pmRwR2M=\n=is34\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a16fab3ea05fe6ae376340a3f7fe072d1662fee\nparent 41550d6d138b54fca13eca0d288796d43b1c33ec\nauthor fanquake <fanquake@gmail.com> 1518225175 +0800\ncommitter fanquake <fanquake@gmail.com> 1518691484 +0800\n\n[depends] latest config.guess and config.sub\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41550d6d138b54fca13eca0d288796d43b1c33ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41550d6d138b54fca13eca0d288796d43b1c33ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41550d6d138b54fca13eca0d288796d43b1c33ec"
      }
    ],
    "stats": {
      "total": 822,
      "additions": 398,
      "deletions": 424
    },
    "files": [
      {
        "sha": "9baaa270bfc7f08d6c6eb85b84f9742318a58d84",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 293,
        "deletions": 283,
        "changes": 576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-03-05'\n+timestamp='2018-01-26'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-03-05'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -27,7 +27,7 @@ timestamp='2017-03-05'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -39,7 +39,7 @@ Usage: $0 [OPTION]\n \n Output the configuration name of the system \\`$me' is run on.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -107,9 +107,9 @@ trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n dummy=$tmp/dummy ;\n tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\n case $CC_FOR_BUILD,$HOST_CC,$CC in\n- ,,)    echo \"int x;\" > $dummy.c ;\n+ ,,)    echo \"int x;\" > \"$dummy.c\" ;\n \tfor c in cc gcc c89 c99 ; do\n-\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n+\t  if ($c -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n \t     CC_FOR_BUILD=\"$c\"; break ;\n \t  fi ;\n \tdone ;\n@@ -132,14 +132,14 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n-case \"${UNAME_SYSTEM}\" in\n+case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n \t# If the system lacks a compiler, then just pick glibc.\n \t# We could probably try harder.\n \tLIBC=gnu\n \n-\teval $set_cc_for_build\n-\tcat <<-EOF > $dummy.c\n+\teval \"$set_cc_for_build\"\n+\tcat <<-EOF > \"$dummy.c\"\n \t#include <features.h>\n \t#if defined(__UCLIBC__)\n \tLIBC=uclibc\n@@ -149,13 +149,20 @@ Linux|GNU|GNU/*)\n \tLIBC=gnu\n \t#endif\n \tEOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\n+\t# If ldd exists, use it to detect musl libc.\n+\tif command -v ldd >/dev/null && \\\n+\t\tldd --version 2>&1 | grep -q ^musl\n+\tthen\n+\t    LIBC=musl\n+\tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -169,30 +176,30 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# portion of the name.  We always set it to \"unknown\".\n \tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    /sbin/$sysctl 2>/dev/null || \\\n-\t    /usr/sbin/$sysctl 2>/dev/null || \\\n+\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n+\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n \t    echo unknown)`\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo ${UNAME_MACHINE_ARCH} | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo ${UNAME_MACHINE_ARCH} | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n-\t\tmachine=${arch}${endian}-unknown\n+\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n+\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n-\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n+\t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n \t# to ELF recently (or will in the future) and ABI.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\tos=netbsdelf\n \t\t;;\n \t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n-\t\teval $set_cc_for_build\n+\t\teval \"$set_cc_for_build\"\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n \t\tthen\n@@ -208,57 +215,66 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo ${UNAME_MACHINE_ARCH} | sed -e \"$expr\"`\n+\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"${UNAME_VERSION}\" in\n+\tcase \"$UNAME_VERSION\" in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n \t# contains redundant information, the shorter form:\n \t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n-\techo \"${machine}-${os}${release}${abi}\"\n+\techo \"$machine-${os}${release}${abi}\"\n \texit ;;\n     *:Bitrig:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:LibertyBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-libertybsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:MidnightBSD:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:ekkoBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:SolidBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"\n \texit ;;\n     macppc:MirBSD:*:*)\n-\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n+\techo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MirBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:Sortix:*:*)\n-\techo ${UNAME_MACHINE}-unknown-sortix\n+\techo \"$UNAME_MACHINE\"-unknown-sortix\n+\texit ;;\n+    *:Redox:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-redox\n \texit ;;\n+    mips:OSF1:*.*)\n+        echo mips-dec-osf1\n+        exit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -310,28 +326,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n \texit $exitcode ;;\n-    Alpha\\ *:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# Should we change UNAME_MACHINE based on the output of uname instead\n-\t# of the specific Alpha model?\n-\techo alpha-pc-interix\n-\texit ;;\n-    21064:Windows_NT:50:3)\n-\techo alpha-dec-winnt3.5\n-\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n     *:[Aa]miga[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-amigaos\n+\techo \"$UNAME_MACHINE\"-unknown-amigaos\n \texit ;;\n     *:[Mm]orph[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-morphos\n+\techo \"$UNAME_MACHINE\"-unknown-morphos\n \texit ;;\n     *:OS/390:*:*)\n \techo i370-ibm-openedition\n@@ -343,7 +350,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo powerpc-ibm-os400\n \texit ;;\n     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n-\techo arm-acorn-riscix${UNAME_RELEASE}\n+\techo arm-acorn-riscix\"$UNAME_RELEASE\"\n \texit ;;\n     arm*:riscos:*:*|arm*:RISCOS:*:*)\n \techo arm-unknown-riscos\n@@ -370,19 +377,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n-\techo i386-pc-auroraux${UNAME_RELEASE}\n+\techo i386-pc-auroraux\"$UNAME_RELEASE\"\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n@@ -395,13 +402,13 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:*:*)\n \tcase \"`/usr/bin/arch -k`\" in\n@@ -410,25 +417,25 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n+\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n \texit ;;\n     sun3*:SunOS:*:*)\n-\techo m68k-sun-sunos${UNAME_RELEASE}\n+\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = x && UNAME_RELEASE=3\n+\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n-\t\techo m68k-sun-sunos${UNAME_RELEASE}\n+\t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \t    sun4)\n-\t\techo sparc-sun-sunos${UNAME_RELEASE}\n+\t\techo sparc-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \tesac\n \texit ;;\n     aushp:SunOS:*:*)\n-\techo sparc-auspex-sunos${UNAME_RELEASE}\n+\techo sparc-auspex-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     # The situation for MiNT is a little confusing.  The machine name\n     # can be virtually everything (everything which is not\n@@ -439,44 +446,44 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     # MiNT.  But MiNT is downward compatible to TOS, so this should\n     # be no problem.\n     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n-\techo m68k-milan-mint${UNAME_RELEASE}\n+\techo m68k-milan-mint\"$UNAME_RELEASE\"\n \texit ;;\n     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n-\techo m68k-hades-mint${UNAME_RELEASE}\n+\techo m68k-hades-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n-\techo m68k-unknown-mint${UNAME_RELEASE}\n+\techo m68k-unknown-mint\"$UNAME_RELEASE\"\n \texit ;;\n     m68k:machten:*:*)\n-\techo m68k-apple-machten${UNAME_RELEASE}\n+\techo m68k-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     powerpc:machten:*:*)\n-\techo powerpc-apple-machten${UNAME_RELEASE}\n+\techo powerpc-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     RISC*:Mach:*:*)\n \techo mips-dec-mach_bsd4.3\n \texit ;;\n     RISC*:ULTRIX:*:*)\n-\techo mips-dec-ultrix${UNAME_RELEASE}\n+\techo mips-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     VAX*:ULTRIX*:*:*)\n-\techo vax-dec-ultrix${UNAME_RELEASE}\n+\techo vax-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     2020:CLIX:*:* | 2430:CLIX:*:*)\n-\techo clipper-intergraph-clix${UNAME_RELEASE}\n+\techo clipper-intergraph-clix\"$UNAME_RELEASE\"\n \texit ;;\n     mips:*:*:UMIPS | mips:*:*:RISCos)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n #ifdef __cplusplus\n #include <stdio.h>  /* for printf() prototype */\n \tint main (int argc, char *argv[]) {\n@@ -485,23 +492,23 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n #endif\n \t#if defined (host_mips) && defined (MIPSEB)\n \t#if defined (SYSTYPE_SYSV)\n-\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_SVR4)\n-\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n-\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#endif\n \t  exit (-1);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n-\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n+\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n+\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n-\techo mips-mips-riscos${UNAME_RELEASE}\n+\techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n     Motorola:PowerMAX_OS:*:*)\n \techo powerpc-motorola-powermax\n@@ -527,17 +534,17 @@ EOF\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n+\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n \tthen\n-\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n-\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n+\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n+\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n \t    then\n-\t\techo m88k-dg-dgux${UNAME_RELEASE}\n+\t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n-\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n+\t\techo m88k-dg-dguxbcs\"$UNAME_RELEASE\"\n \t    fi\n \telse\n-\t    echo i586-dg-dgux${UNAME_RELEASE}\n+\t    echo i586-dg-dgux\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n@@ -554,7 +561,7 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n+\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n@@ -566,14 +573,14 @@ EOF\n \tif [ -x /usr/bin/oslevel ] ; then\n \t\tIBM_REV=`/usr/bin/oslevel`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n+\techo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:2:3)\n \tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n-\t\teval $set_cc_for_build\n-\t\tsed 's/^\t\t//' << EOF >$dummy.c\n+\t\teval \"$set_cc_for_build\"\n+\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n \t\t#include <sys/systemcfg.h>\n \n \t\tmain()\n@@ -584,7 +591,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -598,7 +605,7 @@ EOF\n \texit ;;\n     *:AIX:*:[4567])\n \tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n-\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n+\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n@@ -607,18 +614,18 @@ EOF\n \t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n \t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n+\techo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:*:*)\n \techo rs6000-ibm-aix\n \texit ;;\n-    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n+    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n \techo romp-ibm-bsd4.4\n \texit ;;\n     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n-\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n+\techo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to\n \texit ;;                             # report: romp-ibm BSD 4.3\n     *:BOSX:*:*)\n \techo rs6000-bull-bosx\n@@ -633,28 +640,28 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"${UNAME_MACHINE}\" in\n-\t    9000/31? )            HP_ARCH=m68000 ;;\n-\t    9000/[34]?? )         HP_ARCH=m68k ;;\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tcase \"$UNAME_MACHINE\" in\n+\t    9000/31?)            HP_ARCH=m68000 ;;\n+\t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n \t\tif [ -x /usr/bin/getconf ]; then\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"${sc_cpu_version}\" in\n+\t\t    case \"$sc_cpu_version\" in\n \t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n \t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"${sc_kernel_bits}\" in\n+\t\t\tcase \"$sc_kernel_bits\" in\n \t\t\t  32) HP_ARCH=hppa2.0n ;;\n \t\t\t  64) HP_ARCH=hppa2.0w ;;\n \t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n-\t\t    eval $set_cc_for_build\n-\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n+\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\t    eval \"$set_cc_for_build\"\n+\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n \t\t#define _HPUX_SOURCE\n \t\t#include <stdlib.h>\n@@ -687,13 +694,13 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = hppa2.0w ]\n+\tif [ \"$HP_ARCH\" = hppa2.0w ]\n \tthen\n-\t    eval $set_cc_for_build\n+\t    eval \"$set_cc_for_build\"\n \n \t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n \t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n@@ -712,15 +719,15 @@ EOF\n \t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n-\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n+\techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\techo ia64-hp-hpux${HPUX_REV}\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#include <unistd.h>\n \tint\n \tmain ()\n@@ -745,11 +752,11 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n-    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n \techo hppa1.1-hp-bsd\n \texit ;;\n     9000/8??:4.3bsd:*:*)\n@@ -758,17 +765,17 @@ EOF\n     *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n \techo hppa1.0-hp-mpeix\n \texit ;;\n-    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n \techo hppa1.1-hp-osf\n \texit ;;\n     hp8??:OSF1:*:*)\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n \tif [ -x /usr/sbin/sysversion ] ; then\n-\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n-\t    echo ${UNAME_MACHINE}-unknown-osf1\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1\n \tfi\n \texit ;;\n     parisc*:Lites*:*:*)\n@@ -793,128 +800,109 @@ EOF\n \techo c4-convex-bsd\n \texit ;;\n     CRAY*Y-MP:*:*:*)\n-\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*[A-Z]90:*:*:*)\n-\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n+\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n \t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n \t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n \t      -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*TS:*:*:*)\n-\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*T3E:*:*:*)\n-\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*SV1:*:*:*)\n-\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     *:UNICOS/mp:*:*)\n-\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n \tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n-\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     sparc*:BSD/OS:*:*)\n-\techo sparc-unknown-bsdi${UNAME_RELEASE}\n+\techo sparc-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:BSD/OS:*:*)\n-\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:FreeBSD:*:*)\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase ${UNAME_PROCESSOR} in\n+\tcase \"$UNAME_PROCESSOR\" in\n \t    amd64)\n \t\tUNAME_PROCESSOR=x86_64 ;;\n \t    i386)\n \t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n-\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     i*:CYGWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-cygwin\n+\techo \"$UNAME_MACHINE\"-pc-cygwin\n \texit ;;\n     *:MINGW64*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw64\n+\techo \"$UNAME_MACHINE\"-pc-mingw64\n \texit ;;\n     *:MINGW*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-mingw32\n \texit ;;\n     *:MSYS*:*)\n-\techo ${UNAME_MACHINE}-pc-msys\n-\texit ;;\n-    i*:windows32*:*)\n-\t# uname -m includes \"-pc\" on this system.\n-\techo ${UNAME_MACHINE}-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-msys\n \texit ;;\n     i*:PW*:*)\n-\techo ${UNAME_MACHINE}-pc-pw32\n+\techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase ${UNAME_MACHINE} in\n+\tcase \"$UNAME_MACHINE\" in\n \t    x86)\n-\t\techo i586-pc-interix${UNAME_RELEASE}\n+\t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    authenticamd | genuineintel | EM64T)\n-\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n+\t\techo x86_64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    IA64)\n-\t\techo ia64-unknown-interix${UNAME_RELEASE}\n+\t\techo ia64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \tesac ;;\n-    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n-\techo i${UNAME_MACHINE}-pc-mks\n-\texit ;;\n-    8664:Windows_NT:*)\n-\techo x86_64-pc-mks\n-\texit ;;\n-    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n-\t# UNAME_MACHINE based on the output of uname instead of i386?\n-\techo i586-pc-interix\n-\texit ;;\n     i*:UWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-uwin\n+\techo \"$UNAME_MACHINE\"-pc-uwin\n \texit ;;\n     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n \techo x86_64-unknown-cygwin\n \texit ;;\n-    p*:CYGWIN*:*)\n-\techo powerpcle-unknown-cygwin\n-\texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n \texit ;;\n     i*86:Minix:*:*)\n-\techo ${UNAME_MACHINE}-pc-minix\n+\techo \"$UNAME_MACHINE\"-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -928,63 +916,63 @@ EOF\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n \tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\t    echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     e2k:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     k1om:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#undef CPU\n \t#undef ${UNAME_MACHINE}\n \t#undef ${UNAME_MACHINE}el\n@@ -998,70 +986,70 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"\n+\ttest \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }\n \t;;\n     mips64el:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     openrisc*:Linux:*:*)\n-\techo or1k-unknown-linux-${LIBC}\n+\techo or1k-unknown-linux-\"$LIBC\"\n \texit ;;\n     or32:Linux:*:* | or1k*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-${LIBC}\n+\techo sparc-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-${LIBC}\n+\techo hppa64-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n-\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n+\t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-${LIBC}\n+\techo powerpc64-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-${LIBC}\n+\techo powerpc-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc64le:Linux:*:*)\n-\techo powerpc64le-unknown-linux-${LIBC}\n+\techo powerpc64le-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppcle:Linux:*:*)\n-\techo powerpcle-unknown-linux-${LIBC}\n+\techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n     riscv32:Linux:*:* | riscv64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1075,34 +1063,34 @@ EOF\n \t# I am not positive that other SVR4 systems won't match this,\n \t# I just have to hope.  -- rms.\n \t# Use sysv4.2uw... so that sysv4* matches it.\n-\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"\n \texit ;;\n     i*86:OS/2:*:*)\n \t# If we were able to find `uname', then EMX Unix compatibility\n \t# is probably installed.\n-\techo ${UNAME_MACHINE}-pc-os2-emx\n+\techo \"$UNAME_MACHINE\"-pc-os2-emx\n \texit ;;\n     i*86:XTS-300:*:STOP)\n-\techo ${UNAME_MACHINE}-unknown-stop\n+\techo \"$UNAME_MACHINE\"-unknown-stop\n \texit ;;\n     i*86:atheos:*:*)\n-\techo ${UNAME_MACHINE}-unknown-atheos\n+\techo \"$UNAME_MACHINE\"-unknown-atheos\n \texit ;;\n     i*86:syllable:*:*)\n-\techo ${UNAME_MACHINE}-pc-syllable\n+\techo \"$UNAME_MACHINE\"-pc-syllable\n \texit ;;\n     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n-\techo i386-unknown-lynxos${UNAME_RELEASE}\n+\techo i386-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     i*86:*DOS:*:*)\n-\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n+\techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n-    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n-\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n+    i*86:*:4.*:*)\n+\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n-\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"\n \tfi\n \texit ;;\n     i*86:*:5:[678]*)\n@@ -1112,12 +1100,12 @@ EOF\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n \tesac\n-\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n \t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n-\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n \t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n@@ -1127,9 +1115,9 @@ EOF\n \t\t\t&& UNAME_MACHINE=i686\n \t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i686\n-\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv32\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv32\n \tfi\n \texit ;;\n     pc:*:*:*)\n@@ -1149,9 +1137,9 @@ EOF\n \texit ;;\n     i860:*:4.*:*) # i860-SVR4\n \tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n-\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n+\t  echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4\n \telse # Add other i860-SVR4 vendors below as they are discovered.\n-\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n+\t  echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4\n \tfi\n \texit ;;\n     mini*:CTIX:SYS*5:*)\n@@ -1171,9 +1159,9 @@ EOF\n \ttest -r /etc/.relid \\\n \t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4; exit; } ;;\n@@ -1182,28 +1170,28 @@ EOF\n \ttest -r /etc/.relid \\\n \t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n-\techo m68k-unknown-lynxos${UNAME_RELEASE}\n+\techo m68k-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     mc68030:UNIX_System_V:4.*:*)\n \techo m68k-atari-sysv4\n \texit ;;\n     TSUNAMI:LynxOS:2.*:*)\n-\techo sparc-unknown-lynxos${UNAME_RELEASE}\n+\techo sparc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     rs6000:LynxOS:2.*:*)\n-\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n+\techo rs6000-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n-\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n+\techo powerpc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     SM[BE]S:UNIX_SV:*:*)\n-\techo mips-dde-sysv${UNAME_RELEASE}\n+\techo mips-dde-sysv\"$UNAME_RELEASE\"\n \texit ;;\n     RM*:ReliantUNIX-*:*:*)\n \techo mips-sni-sysv4\n@@ -1214,7 +1202,7 @@ EOF\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n \t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\t\techo ${UNAME_MACHINE}-sni-sysv4\n+\t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n \tfi\n@@ -1234,23 +1222,23 @@ EOF\n \texit ;;\n     i*86:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n-\techo ${UNAME_MACHINE}-stratus-vos\n+\techo \"$UNAME_MACHINE\"-stratus-vos\n \texit ;;\n     *:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n \techo hppa1.1-stratus-vos\n \texit ;;\n     mc68*:A/UX:*:*)\n-\techo m68k-apple-aux${UNAME_RELEASE}\n+\techo m68k-apple-aux\"$UNAME_RELEASE\"\n \texit ;;\n     news*:NEWS-OS:6*:*)\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n \tif [ -d /usr/nec ]; then\n-\t\techo mips-nec-sysv${UNAME_RELEASE}\n+\t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n-\t\techo mips-unknown-sysv${UNAME_RELEASE}\n+\t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n@@ -1269,49 +1257,56 @@ EOF\n \techo x86_64-unknown-haiku\n \texit ;;\n     SX-4:SUPER-UX:*:*)\n-\techo sx4-nec-superux${UNAME_RELEASE}\n+\techo sx4-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-5:SUPER-UX:*:*)\n-\techo sx5-nec-superux${UNAME_RELEASE}\n+\techo sx5-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-6:SUPER-UX:*:*)\n-\techo sx6-nec-superux${UNAME_RELEASE}\n+\techo sx6-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-7:SUPER-UX:*:*)\n-\techo sx7-nec-superux${UNAME_RELEASE}\n+\techo sx7-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8:SUPER-UX:*:*)\n-\techo sx8-nec-superux${UNAME_RELEASE}\n+\techo sx8-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8R:SUPER-UX:*:*)\n-\techo sx8r-nec-superux${UNAME_RELEASE}\n+\techo sx8r-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-ACE:SUPER-UX:*:*)\n-\techo sxace-nec-superux${UNAME_RELEASE}\n+\techo sxace-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     Power*:Rhapsody:*:*)\n-\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n+\techo powerpc-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Rhapsody:*:*)\n-\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif test \"$UNAME_PROCESSOR\" = unknown ; then\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n-\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n+\tif test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then\n \t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t    grep IS_64BIT_ARCH >/dev/null\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n \t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n \t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n \t\t    esac\n \t\tfi\n+\t\t# On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n+\t\tif (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_PPC >/dev/null\n+\t\tthen\n+\t\t    UNAME_PROCESSOR=powerpc\n+\t\tfi\n \t    fi\n \telif test \"$UNAME_PROCESSOR\" = i386 ; then\n \t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n@@ -1322,30 +1317,33 @@ EOF\n \t    # that Apple uses in portable devices.\n \t    UNAME_PROCESSOR=x86_64\n \tfi\n-\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n \tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n-\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"\n \texit ;;\n     *:QNX:*:4*)\n \techo i386-pc-qnx\n \texit ;;\n-    NEO-?:NONSTOP_KERNEL:*:*)\n-\techo neo-tandem-nsk${UNAME_RELEASE}\n+    NEO-*:NONSTOP_KERNEL:*:*)\n+\techo neo-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     NSE-*:NONSTOP_KERNEL:*:*)\n-\techo nse-tandem-nsk${UNAME_RELEASE}\n+\techo nse-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSR-?:NONSTOP_KERNEL:*:*)\n-\techo nsr-tandem-nsk${UNAME_RELEASE}\n+    NSR-*:NONSTOP_KERNEL:*:*)\n+\techo nsr-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSX-?:NONSTOP_KERNEL:*:*)\n-\techo nsx-tandem-nsk${UNAME_RELEASE}\n+    NSV-*:NONSTOP_KERNEL:*:*)\n+\techo nsv-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSX-*:NONSTOP_KERNEL:*:*)\n+\techo nsx-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     *:NonStop-UX:*:*)\n \techo mips-compaq-nonstopux\n@@ -1354,7 +1352,7 @@ EOF\n \techo bs2000-siemens-sysv\n \texit ;;\n     DS/*:UNIX_System_V:*:*)\n-\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"\n \texit ;;\n     *:Plan9:*:*)\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n@@ -1365,7 +1363,7 @@ EOF\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n-\techo ${UNAME_MACHINE}-unknown-plan9\n+\techo \"$UNAME_MACHINE\"-unknown-plan9\n \texit ;;\n     *:TOPS-10:*:*)\n \techo pdp10-unknown-tops10\n@@ -1386,14 +1384,14 @@ EOF\n \techo pdp10-unknown-its\n \texit ;;\n     SEI:*:*:SEIUX)\n-\techo mips-sei-seiux${UNAME_RELEASE}\n+\techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     *:*VMS:*:*)\n \tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"${UNAME_MACHINE}\" in\n+\tcase \"$UNAME_MACHINE\" in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1402,32 +1400,44 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n \texit ;;\n     i*86:rdos:*:*)\n-\techo ${UNAME_MACHINE}-pc-rdos\n+\techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n     i*86:AROS:*:*)\n-\techo ${UNAME_MACHINE}-pc-aros\n+\techo \"$UNAME_MACHINE\"-pc-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n-\techo ${UNAME_MACHINE}-unknown-esx\n+\techo \"$UNAME_MACHINE\"-unknown-esx\n \texit ;;\n     amd64:Isilon\\ OneFS:*:*)\n \techo x86_64-unknown-onefs\n \texit ;;\n esac\n \n+echo \"$0: unable to guess system type\" >&2\n+\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+    mips:Linux | mips64:Linux)\n+\t# If we got here on MIPS GNU/Linux, output extra information.\n+\tcat >&2 <<EOF\n+\n+NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\n+the system type. Please install a C compiler and try again.\n+EOF\n+\t;;\n+esac\n+\n cat >&2 <<EOF\n-$0: unable to guess system type\n \n This script (version $timestamp), has failed to recognize the\n-operating system you are using. If your script is old, overwrite\n-config.guess and config.sub with the latest versions from:\n+operating system you are using. If your script is old, overwrite *all*\n+copies of config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n If $0 has already been updated, send the following data and any\n information you think might be pertinent to config-patches@gnu.org to\n@@ -1450,16 +1460,16 @@ hostinfo               = `(hostinfo) 2>/dev/null`\n /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n \n-UNAME_MACHINE = ${UNAME_MACHINE}\n-UNAME_RELEASE = ${UNAME_RELEASE}\n-UNAME_SYSTEM  = ${UNAME_SYSTEM}\n-UNAME_VERSION = ${UNAME_VERSION}\n+UNAME_MACHINE = \"$UNAME_MACHINE\"\n+UNAME_RELEASE = \"$UNAME_RELEASE\"\n+UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n+UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n \n exit 1\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "818892c1c31fdbe97b7a9515662a01da0371e09f",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 105,
        "deletions": 141,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3335d45f28cd4fdee47364ec47309d7dd8f94ea9/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-04-02'\n+timestamp='2018-01-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-04-02'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -33,7 +33,7 @@ timestamp='2017-04-02'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -57,7 +57,7 @@ Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -94,7 +94,7 @@ while test $# -gt 0 ; do\n \n     *local*)\n        # First pass through any local machine types.\n-       echo $1\n+       echo \"$1\"\n        exit ;;\n \n     * )\n@@ -112,24 +112,24 @@ esac\n \n # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n # Here we must recognize all the valid KERNEL-OS combinations.\n-maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n+maybe_os=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n   kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n     ;;\n   android-linux)\n     os=-linux-android\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n     ;;\n   *)\n-    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n-    if [ $basic_machine != $1 ]\n-    then os=`echo $1 | sed 's/.*-/-/'`\n+    basic_machine=`echo \"$1\" | sed 's/-[^-]*$//'`\n+    if [ \"$basic_machine\" != \"$1\" ]\n+    then os=`echo \"$1\" | sed 's/.*-/-/'`\n     else os=; fi\n     ;;\n esac\n@@ -178,44 +178,44 @@ case $os in\n \t\t;;\n \t-sco6)\n \t\tos=-sco5v6\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5)\n \t\tos=-sco3.2v5\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco4)\n \t\tos=-sco3.2v4\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2.[4-9]*)\n \t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2v[4-9]*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5v6*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco*)\n \t\tos=-sco3.2v2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-udk*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-isc)\n \t\tos=-isc2.2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-clix*)\n \t\tbasic_machine=clipper-intergraph\n \t\t;;\n \t-isc*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-lynx*178)\n \t\tos=-lynxos178\n@@ -227,10 +227,7 @@ case $os in\n \t\tos=-lynxos\n \t\t;;\n \t-ptx*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n-\t\t;;\n-\t-windowsnt*)\n-\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-sequent/'`\n \t\t;;\n \t-psos*)\n \t\tos=-psos\n@@ -299,7 +296,7 @@ case $basic_machine in\n \t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 | or1k | or1knd | or32 \\\n-\t| pdp10 | pdp11 | pj | pjl \\\n+\t| pdp10 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pru \\\n \t| pyramid \\\n@@ -316,7 +313,6 @@ case $basic_machine in\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n \t| wasm32 \\\n-\t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n@@ -337,7 +333,7 @@ case $basic_machine in\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n-\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n+\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65)\n \t\t;;\n \tms1)\n \t\tbasic_machine=mt-unknown\n@@ -366,7 +362,7 @@ case $basic_machine in\n \t  ;;\n \t# Object if more than one company name word.\n \t*-*-*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n \t# Recognize the basic CPU types with company name.\n@@ -461,7 +457,7 @@ case $basic_machine in\n \t# Recognize the various machine names and aliases which stand\n \t# for a CPU type and a company and sometimes even an OS.\n \t386bsd)\n-\t\tbasic_machine=i386-unknown\n+\t\tbasic_machine=i386-pc\n \t\tos=-bsd\n \t\t;;\n \t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n@@ -495,7 +491,7 @@ case $basic_machine in\n \t\tbasic_machine=x86_64-pc\n \t\t;;\n \tamd64-*)\n-\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=x86_64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tamdahl)\n \t\tbasic_machine=580-amdahl\n@@ -540,21 +536,21 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tblackfin-*)\n-\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=bfin-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tbluegene*)\n \t\tbasic_machine=powerpc-ibm\n \t\tos=-cnk\n \t\t;;\n \tc54x-*)\n-\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic54x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc55x-*)\n-\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic55x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc6x-*)\n-\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic6x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc90)\n \t\tbasic_machine=c90-cray\n@@ -643,7 +639,7 @@ case $basic_machine in\n \t\tbasic_machine=rs6000-bull\n \t\tos=-bosx\n \t\t;;\n-\tdpx2* | dpx2*-bull)\n+\tdpx2*)\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n@@ -652,7 +648,7 @@ case $basic_machine in\n \t\tos=$os\"spe\"\n \t\t;;\n \te500v[12]-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=$os\"spe\"\n \t\t;;\n \tebmon29k)\n@@ -744,9 +740,6 @@ case $basic_machine in\n \thp9k8[0-9][0-9] | hp8[0-9][0-9])\n \t\tbasic_machine=hppa1.0-hp\n \t\t;;\n-\thppa-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \thppaosf)\n \t\tbasic_machine=hppa1.1-hp\n \t\tos=-osf\n@@ -759,26 +752,26 @@ case $basic_machine in\n \t\tbasic_machine=i370-ibm\n \t\t;;\n \ti*86v32)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv4\n \t\t;;\n \ti*86v)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv\n \t\t;;\n \ti*86sol2)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-solaris2\n \t\t;;\n \ti386mach)\n \t\tbasic_machine=i386-mach\n \t\tos=-mach\n \t\t;;\n-\ti386-vsta | vsta)\n+\tvsta)\n \t\tbasic_machine=i386-unknown\n \t\tos=-vsta\n \t\t;;\n@@ -797,19 +790,16 @@ case $basic_machine in\n \t\tos=-sysv\n \t\t;;\n \tleon-*|leon[3-9]-*)\n-\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\tbasic_machine=sparc-`echo \"$basic_machine\" | sed 's/-.*//'`\n \t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n \t\t;;\n \tm68knommu-*)\n-\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=m68k-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n-\tm88k-omron*)\n-\t\tbasic_machine=m88k-omron\n-\t\t;;\n \tmagnum | m3230)\n \t\tbasic_machine=mips-mips\n \t\tos=-sysv\n@@ -841,10 +831,10 @@ case $basic_machine in\n \t\tos=-mint\n \t\t;;\n \tmips3*-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`\n \t\t;;\n \tmips3*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`-unknown\n \t\t;;\n \tmonitor)\n \t\tbasic_machine=m68k-rom68k\n@@ -863,7 +853,7 @@ case $basic_machine in\n \t\tos=-msdos\n \t\t;;\n \tms1-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n \t\tbasic_machine=i686-pc\n@@ -905,7 +895,7 @@ case $basic_machine in\n \t\tbasic_machine=v70-nec\n \t\tos=-sysv\n \t\t;;\n-\tnext | m*-next )\n+\tnext | m*-next)\n \t\tbasic_machine=m68k-next\n \t\tcase $os in\n \t\t    -nextstep* )\n@@ -950,6 +940,9 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsv-tandem)\n+\t\tbasic_machine=nsv-tandem\n+\t\t;;\n \tnsx-tandem)\n \t\tbasic_machine=nsx-tandem\n \t\t;;\n@@ -985,7 +978,7 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tparisc-*)\n-\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=hppa-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tpbd)\n@@ -1001,7 +994,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\t;;\n \tpc98-*)\n-\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i386-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n@@ -1016,16 +1009,16 @@ case $basic_machine in\n \t\tbasic_machine=i786-pc\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n-\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i586-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium4-*)\n-\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i786-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpn)\n \t\tbasic_machine=pn-gould\n@@ -1035,23 +1028,23 @@ case $basic_machine in\n \tppc | ppcbe)\tbasic_machine=powerpc-unknown\n \t\t;;\n \tppc-* | ppcbe-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n-\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpcle-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64)\tbasic_machine=powerpc64-unknown\n \t\t;;\n-\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\tppc64-*) basic_machine=powerpc64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n-\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc64le-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tps2)\n \t\tbasic_machine=i386-ibm\n@@ -1105,17 +1098,10 @@ case $basic_machine in\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;\n-\tsh)\n-\t\tbasic_machine=sh-hitachi\n-\t\tos=-hms\n-\t\t;;\n \tsh5el)\n \t\tbasic_machine=sh5le-unknown\n \t\t;;\n-\tsh64)\n-\t\tbasic_machine=sh64-unknown\n-\t\t;;\n-\tsparclite-wrs | simso-wrs)\n+\tsimso-wrs)\n \t\tbasic_machine=sparclite-wrs\n \t\tos=-vxworks\n \t\t;;\n@@ -1134,7 +1120,7 @@ case $basic_machine in\n \t\tos=-sysv4\n \t\t;;\n \tstrongarm-* | thumb-*)\n-\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=arm-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tsun2)\n \t\tbasic_machine=m68000-sun\n@@ -1248,9 +1234,6 @@ case $basic_machine in\n \t\tbasic_machine=a29k-wrs\n \t\tos=-vxworks\n \t\t;;\n-\twasm32)\n-\t\tbasic_machine=wasm32-unknown\n-\t\t;;\n \tw65*)\n \t\tbasic_machine=w65-wdc\n \t\tos=-none\n@@ -1259,6 +1242,9 @@ case $basic_machine in\n \t\tbasic_machine=hppa1.1-winbond\n \t\tos=-proelf\n \t\t;;\n+\tx64)\n+\t\tbasic_machine=x86_64-pc\n+\t\t;;\n \txbox)\n \t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n@@ -1267,20 +1253,12 @@ case $basic_machine in\n \t\tbasic_machine=xps100-honeywell\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/^xscale/arm/'`\n \t\t;;\n \tymp)\n \t\tbasic_machine=ymp-cray\n \t\tos=-unicos\n \t\t;;\n-\tz8k-*-coff)\n-\t\tbasic_machine=z8k-unknown\n-\t\tos=-sim\n-\t\t;;\n-\tz80-*-coff)\n-\t\tbasic_machine=z80-unknown\n-\t\tos=-sim\n-\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1309,10 +1287,6 @@ case $basic_machine in\n \tvax)\n \t\tbasic_machine=vax-dec\n \t\t;;\n-\tpdp10)\n-\t\t# there are many clones, so DEC is not a safe bet\n-\t\tbasic_machine=pdp10-unknown\n-\t\t;;\n \tpdp11)\n \t\tbasic_machine=pdp11-dec\n \t\t;;\n@@ -1322,9 +1296,6 @@ case $basic_machine in\n \tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n-\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n-\t\tbasic_machine=sparc-sun\n-\t\t;;\n \tcydra)\n \t\tbasic_machine=cydra-cydrome\n \t\t;;\n@@ -1344,18 +1315,18 @@ case $basic_machine in\n \t\t# Make sure to match an already-canonicalized machine name.\n \t\t;;\n \t*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n \n # Here we canonicalize certain aliases for manufacturers.\n case $basic_machine in\n \t*-digital*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/digital.*/dec/'`\n \t\t;;\n \t*-commodore*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/commodore.*/cbm/'`\n \t\t;;\n \t*)\n \t\t;;\n@@ -1366,8 +1337,8 @@ esac\n if [ x\"$os\" != x\"\" ]\n then\n case $os in\n-\t# First match some system type aliases\n-\t# that might get confused with valid system types.\n+\t# First match some system type aliases that might get confused\n+\t# with valid system types.\n \t# -solaris* is a basic system type, with this one exception.\n \t-auroraux)\n \t\tos=-auroraux\n@@ -1378,18 +1349,19 @@ case $os in\n \t-solaris)\n \t\tos=-solaris2\n \t\t;;\n-\t-svr4*)\n-\t\tos=-sysv4\n-\t\t;;\n \t-unixware*)\n \t\tos=-sysv4.2uw\n \t\t;;\n \t-gnu/linux*)\n \t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n \t\t;;\n-\t# First accept the basic system types.\n+\t# es1800 is here to avoid being matched by es* (a different OS)\n+\t-es1800*)\n+\t\tos=-ose\n+\t\t;;\n+\t# Now accept the basic system types.\n \t# The portable systems comes first.\n-\t# Each alternative MUST END IN A *, to match a version number.\n+\t# Each alternative MUST end in a * to match a version number.\n \t# -sysv* is not here because it comes later, after sysvr4.\n \t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n \t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n@@ -1399,7 +1371,7 @@ case $os in\n \t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n-\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n+\t      | -hiux* | -knetbsd* | -mirbsd* | -netbsd* \\\n \t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n@@ -1410,14 +1382,14 @@ case $os in\n \t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n-\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n+\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n-\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n+\t      | -morphos* | -superux* | -rtmk* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox* | -bme*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1434,12 +1406,12 @@ case $os in\n \t-nto*)\n \t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n \t\t;;\n-\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n-\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n+\t-sim | -xray | -os68k* | -v88r* \\\n+\t      | -windows* | -osx | -abug | -netware* | -os9* \\\n \t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n \t\t;;\n \t-mac*)\n-\t\tos=`echo $os | sed -e 's|mac|macos|'`\n+\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n \t\t;;\n \t-linux-dietlibc)\n \t\tos=-linux-dietlibc\n@@ -1448,10 +1420,10 @@ case $os in\n \t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n \t\t;;\n \t-sunos5*)\n-\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n \t\t;;\n \t-sunos6*)\n-\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n \t\t;;\n \t-opened*)\n \t\tos=-openedition\n@@ -1462,12 +1434,6 @@ case $os in\n \t-wince*)\n \t\tos=-wince\n \t\t;;\n-\t-osfrose*)\n-\t\tos=-osfrose\n-\t\t;;\n-\t-osf*)\n-\t\tos=-osf\n-\t\t;;\n \t-utek*)\n \t\tos=-bsd\n \t\t;;\n@@ -1492,7 +1458,7 @@ case $os in\n \t-nova*)\n \t\tos=-rtmk-nova\n \t\t;;\n-\t-ns2 )\n+\t-ns2)\n \t\tos=-nextstep2\n \t\t;;\n \t-nsk*)\n@@ -1514,7 +1480,7 @@ case $os in\n \t-oss*)\n \t\tos=-sysv3\n \t\t;;\n-\t-svr4)\n+\t-svr4*)\n \t\tos=-sysv4\n \t\t;;\n \t-svr3)\n@@ -1529,24 +1495,28 @@ case $os in\n \t-ose*)\n \t\tos=-ose\n \t\t;;\n-\t-es1800*)\n-\t\tos=-ose\n-\t\t;;\n-\t-xenix)\n-\t\tos=-xenix\n-\t\t;;\n \t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n \t\tos=-mint\n \t\t;;\n-\t-aros*)\n-\t\tos=-aros\n-\t\t;;\n \t-zvmoe)\n \t\tos=-zvmoe\n \t\t;;\n \t-dicos*)\n \t\tos=-dicos\n \t\t;;\n+\t-pikeos*)\n+\t\t# Until real need of OS specific support for\n+\t\t# particular features comes up, bare metal\n+\t\t# configurations are quite functional.\n+\t\tcase $basic_machine in\n+\t\t    arm*)\n+\t\t\tos=-eabi\n+\t\t\t;;\n+\t\t    *)\n+\t\t\tos=-elf\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n \t-nacl*)\n \t\t;;\n \t-ios)\n@@ -1556,7 +1526,7 @@ case $os in\n \t*)\n \t\t# Get rid of the `-' at the beginning of $os.\n \t\tos=`echo $os | sed 's/[^-]*-//'`\n-\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n@@ -1652,9 +1622,6 @@ case $basic_machine in\n \t*-be)\n \t\tos=-beos\n \t\t;;\n-\t*-haiku)\n-\t\tos=-haiku\n-\t\t;;\n \t*-ibm)\n \t\tos=-aix\n \t\t;;\n@@ -1694,7 +1661,7 @@ case $basic_machine in\n \tm88k-omron*)\n \t\tos=-luna\n \t\t;;\n-\t*-next )\n+\t*-next)\n \t\tos=-nextstep\n \t\t;;\n \t*-sequent)\n@@ -1709,9 +1676,6 @@ case $basic_machine in\n \ti370-*)\n \t\tos=-mvs\n \t\t;;\n-\t*-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \t*-gould)\n \t\tos=-sysv\n \t\t;;\n@@ -1821,15 +1785,15 @@ case $basic_machine in\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n-\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed \"s/unknown/$vendor/\"`\n \t\t;;\n esac\n \n-echo $basic_machine$os\n+echo \"$basic_machine$os\"\n exit\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      }
    ]
  },
  {
    "sha": "25409b16fd593f45168e839fe21ed0f642908e11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTQwOWIxNmZkNTkzZjQ1MTY4ZTgzOWZlMjFlZDBmNjQyOTA4ZTEx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T11:12:49Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-02-15T11:12:49Z"
      },
      "message": "fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS",
      "tree": {
        "sha": "a62902e611d30e37b0027bf631f980a01ebbb30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a62902e611d30e37b0027bf631f980a01ebbb30a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25409b16fd593f45168e839fe21ed0f642908e11",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAlqFazEACgkQLuufXMCV\nJsGApg//dM3AKJuzDCG9jZKoe1qJgkpPrPU1b5vJrlg+WXCrWPcAtQXIwHeUScLe\nqJeIS4pfneoOS8H3ltJh8uf3wPu2eXNp6a08k1rODpTP58MC+uyxfb26MTkvqZ3H\nsQIhDWkJFvJ2Umr1gbl33JGP8qWcgtJmExIUEDhC6vpqqYJ5pkKFmLnn4m7wOLUo\nk9Zrs2xD57Na94Wp8XnWdNgTOPwnDK3d9VNnhJjMjmAYmjdFyZY3UK4ufdohk9qh\n+oc4/TyXC1WqRcVvtGvygFv5XGIN1iDaHvB3rIk1UHML+AO3b0LXne9gofKB+Q2Q\nbG1dB6r84DycGGJzYg0+LA60avkV0Q+zK49O5HOCb1Nb3sxwDNbyO5lFFxEdnGzD\n8ulUeC86QaRo0m7zD137dbRw7agemUSM5OPFgLVdCUI64FNu5mqvT4/iJEbnC3U3\nvR6az9EsMDvoRtKqqgVw/oqe09v8saJwoTTKL8GAkIIojWFM6xSgox83VRQvWdkI\n/ztUn8PLSkaL9XDrWT7r6KBeyBJRrlR4h0rXFRtb7fYODZP0jdi9owji7miFkdIP\n4jauaN0M0GBUi0nURd2MzS0Pq7X2xZUcmhQzNswCgTuQFCDD2TpZP9WRS7aOILRq\nGIPnj3jeMRJNU8ko8FqH6TVBPEN8YQUUkCWfEV91UHmfqQjpG7k=\n=4fNI\n-----END PGP SIGNATURE-----",
        "payload": "tree a62902e611d30e37b0027bf631f980a01ebbb30a\nparent 3335d45f28cd4fdee47364ec47309d7dd8f94ea9\nauthor fanquake <fanquake@gmail.com> 1518693169 +0800\ncommitter fanquake <fanquake@gmail.com> 1518693169 +0800\n\nfixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25409b16fd593f45168e839fe21ed0f642908e11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3335d45f28cd4fdee47364ec47309d7dd8f94ea9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3335d45f28cd4fdee47364ec47309d7dd8f94ea9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9976db43c28122df8eeef56263f4c35a28af3ba4",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25409b16fd593f45168e839fe21ed0f642908e11/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25409b16fd593f45168e839fe21ed0f642908e11/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=25409b16fd593f45168e839fe21ed0f642908e11",
        "patch": "@@ -9,6 +9,7 @@ $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTBmYmYwOTgxN2ZjMmYyODU2N2QxZmZhNmI1NWI3ZmI4ZDIzZGYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T12:06:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T12:08:43Z"
      },
      "message": "Merge #12417: Upgrade mac_alias to 2.0.7\n\nfc1bfcf Update mac_alias to 2.0.7 (Douglas Roark)\ndeee216 Delete mac_alias patch (Douglas Roark)\n\nPull request description:\n\n  The patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\n  Note that this PR won't be complete until a new version of mac_alias containing the patch has been released, and the depends system is updated to reflect the new version.\n\nTree-SHA512: e13f1b45c0a56e95645b1aff77036c8a24c29c3f18ea0d386fba8d6d0f5fd07c434afc09dcd644d46ca096d6a7a0d5097f1eca3be5b5a5475eb3d54407044fd9",
      "tree": {
        "sha": "e5f22a6518b3ed64ac01fc833e4286d12ea2fc80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5f22a6518b3ed64ac01fc833e4286d12ea2fc80"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahXhLAAoJEB5K7WKYbNJdMMcIAI+voi7D7XweKbzlByfI9kmj\nVMjN3AVYP53iHLAxBtoOG0nG67+Ums6yxGKgn9BkI8dNqZKIz+EqJ2Z3cHEHsuHZ\nsM8ks7U+eC52BbM1BCGQeXjcmVWC+BDeFm0pcGp4C+ykwD2laonQVaJkvxcWjEmQ\n26igEXbgo6LprOXhWYK5uCTT85/5UjQhBd8XSNtr5O1VSSVLJlrk/xNleyXCmPOm\nkB8i3TYX+sGG+nZxhOyg+bzs9XS5UxLPzMHD4MnpMW94ncZTyD49Cu7AV6yObQXh\nPCy30YsHv9+wlcyfL8AmoAcPQuKILobNnw5HzN/MB5xbm0YU6fBvIqvOXL25s+o=\n=xv7i\n-----END PGP SIGNATURE-----",
        "payload": "tree e5f22a6518b3ed64ac01fc833e4286d12ea2fc80\nparent b2089c51cc4af2f7e1c0ec75be9449ee222b1d69\nparent fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518696400 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518696523 +0100\n\nMerge #12417: Upgrade mac_alias to 2.0.7\n\nfc1bfcf Update mac_alias to 2.0.7 (Douglas Roark)\ndeee216 Delete mac_alias patch (Douglas Roark)\n\nPull request description:\n\n  The patch Bitcoin Core has been maintaining for mac_alias was pulled by the mac_alias maintainer in commit 4f31cb084c1c6a8626128b0b00842020b6db9037. Delete the patch and remove the patch from the depends system.\n\n  Note that this PR won't be complete until a new version of mac_alias containing the patch has been released, and the depends system is updated to reflect the new version.\n\nTree-SHA512: e13f1b45c0a56e95645b1aff77036c8a24c29c3f18ea0d386fba8d6d0f5fd07c434afc09dcd644d46ca096d6a7a0d5097f1eca3be5b5a5475eb3d54407044fd9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69"
      },
      {
        "sha": "fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc1bfcf9fd2c24846a9f9caa42f5370f192c3d40"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 2,
      "deletions": 63
    },
    "files": [
      {
        "sha": "306c8356567bcef2100ab5c265d3713d793913b4",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "patch": "@@ -1,14 +1,9 @@\n package=native_mac_alias\n-$(package)_version=2.0.6\n+$(package)_version=2.0.7\n $(package)_download_path=https://github.com/al45tair/mac_alias/archive/\n $(package)_file_name=v$($(package)_version).tar.gz\n-$(package)_sha256_hash=78a3332d9a597eebf09ae652d38ad1e263b28db5c2e6dd725fad357b03b77371\n+$(package)_sha256_hash=6f606d3b6bccd2112aeabf1a063f5b5ece87005a5d7e97c8faca23b916e88838\n $(package)_install_libdir=$(build_prefix)/lib/python/dist-packages\n-$(package)_patches=python3.patch\n-\n-define $(package)_preprocess_cmds\n-    patch -p1 < $($(package)_patch_dir)/python3.patch\n-endef\n \n define $(package)_build_cmds\n     python setup.py build"
      },
      {
        "sha": "6f2f5534a275d57d3dcb8287823b85e663152904",
        "filename": "depends/patches/native_mac_alias/python3.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/depends/patches/native_mac_alias/python3.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69/depends/patches/native_mac_alias/python3.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_mac_alias/python3.patch?ref=b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "patch": "@@ -1,56 +0,0 @@\n-diff -dur a/mac_alias/alias.py b/mac_alias/alias.py\n---- a/mac_alias/alias.py\n-+++ b/mac_alias/alias.py\n-@@ -258,10 +258,10 @@\n-         alias = Alias()\n-         alias.appinfo = appinfo\n-             \n--        alias.volume = VolumeInfo (volname.replace('/',':'),\n-+        alias.volume = VolumeInfo (volname.decode().replace('/',':'),\n-                                    voldate, fstype, disktype,\n-                                    volattrs, volfsid)\n--        alias.target = TargetInfo (kind, filename.replace('/',':'),\n-+        alias.target = TargetInfo (kind, filename.decode().replace('/',':'),\n-                                    folder_cnid, cnid,\n-                                    crdate, creator_code, type_code)\n-         alias.target.levels_from = levels_from\n-@@ -276,9 +276,9 @@\n-                 b.read(1)\n- \n-             if tag == TAG_CARBON_FOLDER_NAME:\n--                alias.target.folder_name = value.replace('/',':')\n-+                alias.target.folder_name = value.decode().replace('/',':')\n-             elif tag == TAG_CNID_PATH:\n--                alias.target.cnid_path = struct.unpack(b'>%uI' % (length // 4),\n-+                alias.target.cnid_path = struct.unpack('>%uI' % (length // 4),\n-                                                            value)\n-             elif tag == TAG_CARBON_PATH:\n-                 alias.target.carbon_path = value\n-@@ -313,9 +313,9 @@\n-                 alias.target.creation_date \\\n-                     = mac_epoch + datetime.timedelta(seconds=seconds)\n-             elif tag == TAG_POSIX_PATH:\n--                alias.target.posix_path = value\n-+                alias.target.posix_path = value.decode()\n-             elif tag == TAG_POSIX_PATH_TO_MOUNTPOINT:\n--                alias.volume.posix_path = value\n-+                alias.volume.posix_path = value.decode()\n-             elif tag == TAG_RECURSIVE_ALIAS_OF_DISK_IMAGE:\n-                 alias.volume.disk_image_alias = Alias.from_bytes(value)\n-             elif tag == TAG_USER_HOME_LENGTH_PREFIX:\n-@@ -467,12 +467,12 @@\n- \n-         b.write(struct.pack(b'>hhQhhQ',\n-                 TAG_HIGH_RES_VOLUME_CREATION_DATE,\n--                8, long(voldate * 65536),\n-+                8, int(voldate * 65536),\n-                 TAG_HIGH_RES_CREATION_DATE,\n--                8, long(crdate * 65536)))\n-+                8, int(crdate * 65536)))\n- \n-         if self.target.cnid_path:\n--            cnid_path = struct.pack(b'>%uI' % len(self.target.cnid_path),\n-+            cnid_path = struct.pack('>%uI' % len(self.target.cnid_path),\n-                                     *self.target.cnid_path)\n-             b.write(struct.pack(b'>hh', TAG_CNID_PATH,\n-                                  len(cnid_path)))"
      }
    ]
  },
  {
    "sha": "737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzdlZDhiYjc3ZDE5YjkzOWU4ZDEwZTBkNjU1NWE0ZGRjYWJhOWQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T13:31:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T13:33:27Z"
      },
      "message": "Merge #12415: Interrupt loading thread after shutdown request\n\n2e9406c Interrupt loading thread after shutdown request (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This change (currently) avoids loading the mempool if shutdown is requested.\n\nTree-SHA512: 3dca3a6ea5b09bd71db0974584d93dfe81819bc0bdbb4d9b6fa0474755306d1403f6c058ecb8211384493a8f7ca3a9134173db744b7344043cfc7d79286c8fd4",
      "tree": {
        "sha": "8ddcad24a9eedd18e7031421fcdfe0655fb3713c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ddcad24a9eedd18e7031421fcdfe0655fb3713c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahYwnAAoJEB5K7WKYbNJdOGQIAI0YbOguvobKgbibsqhTUggc\nZEdgsvhJbYigo7AGmb5EkeLBO1la4VN16bbG4TYcRAsAmJzM3uVMe/VdVOva2e35\nRanTLx2SPPEt/BOI4P4omii/x7Twzz6v9N9Ugp9XFKf4YM5jGAeyia4+9zaKMaTw\nAHNbf/rSsdamBfdcxxDpEjk8Bfxcbq5VmJx9M10Sdw5lgNSg96c+epgLZOpL6e6w\n8VCGVYiF+fMseUR1xiHo3S8DdfZtq3byQmwGSjrjOGXGASiEkZjOjbXV4aLi/eZH\nwD5P8qIRHT95tMyKWqoEYrv96SwMs3cXWOjkkq7CxvXbCmHT/YgEaZCN/dJzfn4=\n=M6qN\n-----END PGP SIGNATURE-----",
        "payload": "tree 8ddcad24a9eedd18e7031421fcdfe0655fb3713c\nparent ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0\nparent 2e9406c0c588ddf6f039fd3ff73c978177483869\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518701467 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518701607 +0100\n\nMerge #12415: Interrupt loading thread after shutdown request\n\n2e9406c Interrupt loading thread after shutdown request (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  This change (currently) avoids loading the mempool if shutdown is requested.\n\nTree-SHA512: 3dca3a6ea5b09bd71db0974584d93dfe81819bc0bdbb4d9b6fa0474755306d1403f6c058ecb8211384493a8f7ca3a9134173db744b7344043cfc7d79286c8fd4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae0fbf09817fc2f28567d1ffa6b55b7fb8d23df0"
      },
      {
        "sha": "2e9406c0c588ddf6f039fd3ff73c978177483869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e9406c0c588ddf6f039fd3ff73c978177483869",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e9406c0c588ddf6f039fd3ff73c978177483869"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "895a5358f4ff05b86641df68a9b9b4189e0d658c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "patch": "@@ -680,11 +680,13 @@ void ThreadImport(std::vector<fs::path> vImportFiles)\n     if (!ActivateBestChain(state, chainparams)) {\n         LogPrintf(\"Failed to connect best block\");\n         StartShutdown();\n+        return;\n     }\n \n     if (gArgs.GetBoolArg(\"-stopafterblockimport\", DEFAULT_STOPAFTERBLOCKIMPORT)) {\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n+        return;\n     }\n     } // End scope of CImportingNow\n     if (gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {"
      }
    ]
  },
  {
    "sha": "bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmEzOTExNGUyY2Y0NzEyZmU3NGQ3YjE5ZDUxNjU1M2Y0M2U1ZmEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:09:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:10:37Z"
      },
      "message": "Merge #12426: qt: Initialize members in WalletModel\n\nfa27623 qt: Initialize members in WalletModel (MarcoFalke)\n\nPull request description:\n\n  This prevents segfaults (or errors when running qt in valgrind)\n\n  ```\n  Conditional jump or move depends on uninitialised value(s)\n      WalletModel::checkBalanceChanged() (walletmodel.cpp:156)\n\nTree-SHA512: 38c8c03c7fa947edb3f1c13eab2ac7a62ef8f8141603c2329a7dc5821a887a349af8014dc739b762e046f410f44a9c6653b6930f08b53496cf66381cadc06246",
      "tree": {
        "sha": "562cefd2edb32964a68ad6d227964cb8f2cc8822",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/562cefd2edb32964a68ad6d227964cb8f2cc8822"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahaLtAAoJEB5K7WKYbNJdk34H/0Sv3m2sZUSwaAR+FC+mekmh\nGYmntVJPYAW7JBYUpgtrCjg+2emzF0ADm6q6KZ19bfYKKB3+c1AMo/xhd/aViO0M\nYYxhGpWahnr8kKGBCdkb5+Az0BB4JKc4Kg8dKl6zuDxXc1+/bQnsqLxTUYJlRJs4\ne0mOmTnQ9++1WC5wmAWVbWU8D1JeUiH528btaq+fxhu3h/cOz8iWPkZYyNXd187Q\n/WKDCT+ivZCDAyGCA06Bk3IRYUyZa/FRMWpXavYcvBwvv1xhxzzBI/w5ic1U4GhS\nrmi9nINchKN7WdZ0R+3GsCCacCsBvYgyayvxk9Nk4P+S0k8oFbeAPRnIKEE35oY=\n=bL0g\n-----END PGP SIGNATURE-----",
        "payload": "tree 562cefd2edb32964a68ad6d227964cb8f2cc8822\nparent 737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8\nparent fa27623edbe7530d667e05d513066d1bd5339f41\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518707371 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518707437 +0100\n\nMerge #12426: qt: Initialize members in WalletModel\n\nfa27623 qt: Initialize members in WalletModel (MarcoFalke)\n\nPull request description:\n\n  This prevents segfaults (or errors when running qt in valgrind)\n\n  ```\n  Conditional jump or move depends on uninitialised value(s)\n      WalletModel::checkBalanceChanged() (walletmodel.cpp:156)\n\nTree-SHA512: 38c8c03c7fa947edb3f1c13eab2ac7a62ef8f8141603c2329a7dc5821a887a349af8014dc739b762e046f410f44a9c6653b6930f08b53496cf66381cadc06246\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/737ed8bb77d19b939e8d10e0d6555a4ddcaba9d8"
      },
      {
        "sha": "fa27623edbe7530d667e05d513066d1bd5339f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27623edbe7530d667e05d513066d1bd5339f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27623edbe7530d667e05d513066d1bd5339f41"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "34954a6bfa98feab6ef9f05dcd4e6693cca2c464",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa39114e2cf4712fe74d7b19d516553f43e5fa0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "patch": "@@ -42,6 +42,7 @@ WalletModel::WalletModel(const PlatformStyle *platformStyle, CWallet *_wallet, O\n     transactionTableModel(0),\n     recentRequestsTableModel(0),\n     cachedBalance(0), cachedUnconfirmedBalance(0), cachedImmatureBalance(0),\n+    cachedWatchOnlyBalance{0}, cachedWatchUnconfBalance{0}, cachedWatchImmatureBalance{0},\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {"
      }
    ]
  },
  {
    "sha": "fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzg4OGJmY2FjYjg3NWM0NWJjOGY5ZDdjYTEzNTdhYjcwYTMwNDkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T13:12:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:24:45Z"
      },
      "message": "util: Fix multiple use of LockDirectory\n\nThis commit fixes problems with calling LockDirectory multiple times on\nthe same directory, or from multiple threads. It also fixes the build on\nOpenBSD.\n\n- Wrap the boost::interprocess::file_lock in a std::unique_ptr inside\n  the map that keeps track of per-directory locks. This fixes a build\n  issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD\n  6.2, and should have no observable effect otherwise.\n\n- Protect the locks map using a mutex.\n\n- Make sure that only locks that are successfully acquired are inserted\n  in the map.\n\n- Open the lock file for appending only if we know we don't have the\n  lock yet - The `FILE* file = fsbridge::fopen(pathLockFile, \"a\");`\n  wipes the 'we own this lock' administration, likely because it opens\n  a new fd for the locked file then closes it.",
      "tree": {
        "sha": "569fcde0c6b00df3b90bcc5a4cb5139452cfa596",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/569fcde0c6b00df3b90bcc5a4cb5139452cfa596"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "49f40dc942296201af6cc5d5ad1543a43b67c329",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc888bfcacb875c45bc8f9d7ca1357ab70a30490/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "patch": "@@ -375,18 +375,32 @@ int LogPrintStr(const std::string &str)\n \n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    // A map that contains all the currently held directory locks. After\n+    // successful locking, these will be held here until the global\n+    // destructor cleans them up and thus automatically unlocks them.\n+    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n+    // Protect the map with a mutex\n+    static std::mutex cs;\n+    std::lock_guard<std::mutex> ulock(cs);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n-        if (probe_only) {\n-            lock.unlock();\n+        if (!probe_only) {\n+            // Lock successful and we're not just probing, put it into the map\n+            locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());"
      }
    ]
  },
  {
    "sha": "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDRjYmQyNmU0MjIwOTgyZjdmMmY2MGU0NDcxOTlkNmY2MmFlMjU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-13T12:53:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:25:13Z"
      },
      "message": "test: Add unit test for LockDirectory\n\nAdd a unit test for LockDirectory, introduced in #11281.",
      "tree": {
        "sha": "4c8f244dacd9238dd810b5821175bb72b1d49808",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c8f244dacd9238dd810b5821175bb72b1d49808"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc888bfcacb875c45bc8f9d7ca1357ab70a30490",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc888bfcacb875c45bc8f9d7ca1357ab70a30490"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 154,
      "deletions": 9
    },
    "files": [
      {
        "sha": "4b2da3e2193a7490f5a20b3c6bf9bac528b88396",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <stdint.h>\n #include <vector>\n+#ifndef WIN32\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#endif\n \n #include <boost/test/unit_test.hpp>\n \n@@ -603,4 +607,130 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n+{\n+    *result = LockDirectory(dirname, lockname);\n+}\n+\n+#ifndef WIN32 // Cannot do this test on WIN32 due to lack of fork()\n+static constexpr char LockCommand = 'L';\n+static constexpr char UnlockCommand = 'U';\n+static constexpr char ExitCommand = 'X';\n+\n+static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+{\n+    char ch;\n+    int rv;\n+    while (true) {\n+        rv = read(fd, &ch, 1); // Wait for command\n+        assert(rv == 1);\n+        switch(ch) {\n+        case LockCommand:\n+            ch = LockDirectory(dirname, lockname);\n+            rv = write(fd, &ch, 1);\n+            assert(rv == 1);\n+            break;\n+        case UnlockCommand:\n+            ReleaseDirectoryLocks();\n+            ch = true; // Always succeeds\n+            rv = write(fd, &ch, 1);\n+            break;\n+        case ExitCommand:\n+            close(fd);\n+            exit(0);\n+        default:\n+            assert(0);\n+        }\n+    }\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_CASE(test_LockDirectory)\n+{\n+    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    const std::string lockname = \".lock\";\n+#ifndef WIN32\n+    // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n+    // it: there is BOOST_TEST_IGNORE_SIGCHLD but that only works when defined\n+    // at build-time of the boost library\n+    void (*old_handler)(int) = signal(SIGCHLD, SIG_DFL);\n+\n+    // Fork another process for testing before creating the lock, so that we\n+    // won't fork while holding the lock (which might be undefined, and is not\n+    // relevant as test case as that is avoided with -daemonize).\n+    int fd[2];\n+    BOOST_CHECK_EQUAL(socketpair(AF_UNIX, SOCK_STREAM, 0, fd), 0);\n+    pid_t pid = fork();\n+    if (!pid) {\n+        BOOST_CHECK_EQUAL(close(fd[1]), 0); // Child: close parent end\n+        TestOtherProcess(dirname, lockname, fd[0]);\n+    }\n+    BOOST_CHECK_EQUAL(close(fd[0]), 0); // Parent: close child end\n+#endif\n+    // Lock on non-existent directory should fail\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), false);\n+\n+    fs::create_directories(dirname);\n+\n+    // Probing lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Persistent lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from the same thread should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from a different thread within the same process should succeed\n+    bool threadresult;\n+    std::thread thr(TestOtherThread, dirname, lockname, &threadresult);\n+    thr.join();\n+    BOOST_CHECK_EQUAL(threadresult, true);\n+#ifndef WIN32\n+    // Try to aquire lock in child process while we're holding it, this should fail.\n+    char ch;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, false);\n+\n+    // Give up our lock\n+    ReleaseDirectoryLocks();\n+    // Probing lock from our side now should succeed, but not hold on to the lock.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Try to acquire the lock in the child process, this should be succesful.\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should fail.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), false);\n+\n+    // Unlock the lock in the child process\n+    BOOST_CHECK_EQUAL(write(fd[1], &UnlockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should succeed.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Re-lock the lock in the child process, then wait for it to exit, check\n+    // successful return. After that, we check that exiting the process\n+    // has released the lock as we would expect by probing it.\n+    int processstatus;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(write(fd[1], &ExitCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(waitpid(pid, &processstatus, 0), pid);\n+    BOOST_CHECK_EQUAL(processstatus, 0);\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Restore SIGCHLD\n+    signal(SIGCHLD, old_handler);\n+    BOOST_CHECK_EQUAL(close(fd[1]), 0); // Close our side of the socketpair\n+#endif\n+    // Clean up\n+    ReleaseDirectoryLocks();\n+    fs::remove_all(dirname);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "dcf7ed38b11953a826086aecc716893f8fa10f06",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -373,19 +373,22 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n-    // A map that contains all the currently held directory locks. After\n-    // successful locking, these will be held here until the global\n-    // destructor cleans them up and thus automatically unlocks them.\n-    static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> locks;\n-    // Protect the map with a mutex\n-    static std::mutex cs;\n-    std::lock_guard<std::mutex> ulock(cs);\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n \n     // If a lock for this directory already exists in the map, don't try to re-lock it\n-    if (locks.count(pathLockFile.string())) {\n+    if (dir_locks.count(pathLockFile.string())) {\n         return true;\n     }\n \n@@ -400,14 +403,20 @@ bool LockDirectory(const fs::path& directory, const std::string lockfile_name, b\n         }\n         if (!probe_only) {\n             // Lock successful and we're not just probing, put it into the map\n-            locks.emplace(pathLockFile.string(), std::move(lock));\n+            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n     }\n     return true;\n }\n \n+void ReleaseDirectoryLocks()\n+{\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n+    dir_locks.clear();\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "9490a5678f2a8695203c66d562298ac07c6415fe",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d4cbd26e4220982f7f2f60e447199d6f62ae254/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "patch": "@@ -174,6 +174,12 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+\n+/** Release all directory locks. This is used for unit testing only, at runtime\n+ * the global destructor will take care of the locks.\n+ */\n+void ReleaseDirectoryLocks();\n+\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);"
      }
    ]
  },
  {
    "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDY1OTM3ZWM2MDEzMjZiNDc5NjU0YTVhZDE0ODQ3YWRjZGIyMTRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:35:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T15:35:42Z"
      },
      "message": "Merge #12356: Fix 'mempool min fee not met' debug output\n\nbb00c95 Consistently use FormatStateMessage in RPC error output (Ben Woosley)\n8b8a1c4 Add test for 'mempool min fee not met' rpc error (Ben Woosley)\nc04e0f6 Fix 'mempool min fee not met' debug output (Ben Woosley)\n\nPull request description:\n\n  Output the value that is tested, rather than the unmodified fee value.\n\n  Prompted by looking into: #11955\n\nTree-SHA512: fc0bad47d4af375d208f657a6ccbad6ef7f4e2989ae2ce1171226c22fa92847494a2c55cca687bd5a1548663ed3313569bcc31c00d53c0c193a1b865dd8a7657",
      "tree": {
        "sha": "c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd65937ec601326b479654a5ad14847adcdb214c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahajOAAoJEB5K7WKYbNJd4eMH/1TCFHgjJydOQUrnBehNisxe\nCV782F82KivBSTKIjm0dnoiem4aE/dh+qzk8LzpSZVsvMkkHHtHPvxMdeUX7xsGJ\nyhoxtiwvH1TZThzbN1ZSVcLhgZu5GZrpSV5jzp/aW/L6RYXdbtlAU8V357NguuPM\n1nqbV87Rak5LlTIQjfHvbpwFwKMa3q6jLSfGXLlCVf7Jbej8yefxTdGRzN8TGooF\nHX2N/dH6w2YFgpQ/vuHWtL8bS/l8Dq1ZgoYrX689i0yau4CsXlrVdv1sa2l9CqX1\n70D6KzfcuKgb4N7dhMYmUz92i/K9H+BA1H0wj8Rwf0pxXlqPu+/JRAArOG2jBIY=\n=m2DP\n-----END PGP SIGNATURE-----",
        "payload": "tree c0faa5bb308e49fbcdb648fbfae5aa26f5e4f60c\nparent bfa39114e2cf4712fe74d7b19d516553f43e5fa0\nparent bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518708912 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518708942 +0100\n\nMerge #12356: Fix 'mempool min fee not met' debug output\n\nbb00c95 Consistently use FormatStateMessage in RPC error output (Ben Woosley)\n8b8a1c4 Add test for 'mempool min fee not met' rpc error (Ben Woosley)\nc04e0f6 Fix 'mempool min fee not met' debug output (Ben Woosley)\n\nPull request description:\n\n  Output the value that is tested, rather than the unmodified fee value.\n\n  Prompted by looking into: #11955\n\nTree-SHA512: fc0bad47d4af375d208f657a6ccbad6ef7f4e2989ae2ce1171226c22fa92847494a2c55cca687bd5a1548663ed3313569bcc31c00d53c0c193a1b865dd8a7657\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa39114e2cf4712fe74d7b19d516553f43e5fa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa39114e2cf4712fe74d7b19d516553f43e5fa0"
      },
      {
        "sha": "bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb00c95c16f50c5dfab1aa8fbb6c873318a6acc8"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 25,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f1352a13cfae498cd415f422140a5607f3b3088a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -1434,7 +1434,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1472,7 +1472,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n     }\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1509,7 +1509,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n     ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n-        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+        throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n     }\n \n     return NullUniValue;\n@@ -1563,7 +1563,7 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n             pindex = chainActive.Tip();\n         }\n     }\n-    \n+\n     assert(pindex != nullptr);\n \n     if (request.params[0].isNull()) {"
      },
      {
        "sha": "3f3bfa0cfd9d831acc42dc336dd4bf7b499da0c6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -264,11 +264,11 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     if (state.IsValid())\n         return NullUniValue;\n \n-    std::string strRejectReason = state.GetRejectReason();\n     if (state.IsError())\n-        throw JSONRPCError(RPC_VERIFY_ERROR, strRejectReason);\n+        throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));\n     if (state.IsInvalid())\n     {\n+        std::string strRejectReason = state.GetRejectReason();\n         if (strRejectReason.empty())\n             return \"rejected\";\n         return strRejectReason;"
      },
      {
        "sha": "803cd28649c35d6a813e538124df6f7c70d056ff",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -981,12 +981,12 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n         if (!AcceptToMemoryPool(mempool, state, std::move(tx), &fMissingInputs,\n                                 nullptr /* plTxnReplaced */, false /* bypass_limits */, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n-                throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n+                throw JSONRPCError(RPC_TRANSACTION_REJECTED, FormatStateMessage(state));\n             } else {\n                 if (fMissingInputs) {\n                     throw JSONRPCError(RPC_TRANSACTION_ERROR, \"Missing inputs\");\n                 }\n-                throw JSONRPCError(RPC_TRANSACTION_ERROR, state.GetRejectReason());\n+                throw JSONRPCError(RPC_TRANSACTION_ERROR, FormatStateMessage(state));\n             }\n         } else {\n             // If wallet is enabled, ensure that the wallet has been made aware"
      },
      {
        "sha": "d9e877f2ebee955f00a05855a308edbc1651563f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -712,7 +712,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n         CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nModifiedFees, mempoolRejectFee));\n         }\n \n         // No transactions are allowed below minRelayTxFee except from disconnected blocks"
      },
      {
        "sha": "9cae660c60097f87fbaf0dca62845a071cd970cf",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -274,7 +274,7 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     CValidationState state;\n     if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n+        errors.push_back(strprintf(\"The transaction was rejected: %s\", FormatStateMessage(state)));\n         return Result::WALLET_ERROR;\n     }\n \n@@ -297,4 +297,3 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n }\n \n } // namespace feebumper\n-"
      },
      {
        "sha": "8f378acd1a38d23dd807a61e30930bba4bbd0a41",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -435,7 +435,7 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     }\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n-        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n }\n@@ -1155,7 +1155,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n     if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n-        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", FormatStateMessage(state));\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "408a01c50b7a525caedc0cb8400415c46e6c5cc2",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -3092,7 +3092,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         {\n             // Broadcast\n             if (!wtx.AcceptToMemoryPool(maxTxFee, state)) {\n-                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", state.GetRejectReason());\n+                LogPrintf(\"CommitTransaction(): Transaction cannot be broadcast immediately, %s\\n\", FormatStateMessage(state));\n                 // TODO: if we expect the failure to be long term or permanent, instead delete wtx from the wallet and return failure.\n             } else {\n                 wtx.RelayWalletTransaction(connman);"
      },
      {
        "sha": "740c498ce6bb4f8ecc7165afa63057b3eb1b6f37",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -21,7 +21,7 @@\n from io import BytesIO\n import time\n \n-NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n+NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n def trueDummy(tx):\n     scriptSig = CScript(tx.vin[0].scriptSig)"
      },
      {
        "sha": "7e01663c96bd577445c0b9240ed680b4eb285590",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -50,5 +50,15 @@ def run_test(self):\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))\n         assert_greater_than(self.nodes[0].getmempoolinfo()['mempoolminfee'], Decimal('0.00001000'))\n \n+        self.log.info('Create a mempool tx that will not pass mempoolminfee')\n+        us0 = utxos.pop()\n+        inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n+        outputs = {self.nodes[0].getnewaddress() : 0.0001}\n+        tx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n+        txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n+        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+\n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      },
      {
        "sha": "8cea9c27833a994a627cfec28aebc402c997a1d1",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd65937ec601326b479654a5ad14847adcdb214c/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fd65937ec601326b479654a5ad14847adcdb214c",
        "patch": "@@ -120,7 +120,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"min relay fee not met (code 66)\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      }
    ]
  },
  {
    "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDk5NjhmNGQwMDY2OGI5OTBhZTE5YWVkMDI0ZmYzZmQyNzA3MmI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T17:17:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T17:17:19Z"
      },
      "message": "Merge #12200: Bind functional test nodes to 127.0.0.1\n\n65682da [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\n\n  Easiest way to reproduce a popup without running the test suite:\n\n  ```sh\n  src/bitcoind -regtest -bind=127.0.0.1 # No popup\n  src/bitcoind -regtest # Popup\n  ```\n\nTree-SHA512: ffa92f148a2ead2ceca978c285882979639be23eb31ad6a27aa81df9fdddba5d493719c92c09a351a81d638f6f739c351a721e42168d77ead60abe074df773d6",
      "tree": {
        "sha": "da933149c67d9a433bb2ffcaf7439e59ceaef35c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da933149c67d9a433bb2ffcaf7439e59ceaef35c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahcCfAAoJEB5K7WKYbNJdMkIH/24YHj5iYSDn/xz9+CV8LdH4\nvNWMGBg88bpLaIjfIdQZFK7bMP3D48Sarpc9U1jaPy56r1xJpWyYfszxnUCCbhEE\nYcNrWVI0Z9homJMYq64zv3bqNRQhcsL2kID8nqzCO/UqJYXPBv1eJh9XhExBoaS6\nFcd/pTjQ+4eQDqZ332s3uJOLS7DnFZgihdO6oYQrSrxr2CByMTcv+lyTwEqFWMhD\nrXdKXjwGOvWLs7jY4u88c0w5oTzJu16oNwlEKphtWvgxiE+1hce/ueXXIwIKTyuR\nQsurKQURg/KvToqyb1pX27Sh17r9aloTIOdHM/r4I6+6V5sLFmpqC5Tblj+pYmE=\n=P3vM\n-----END PGP SIGNATURE-----",
        "payload": "tree da933149c67d9a433bb2ffcaf7439e59ceaef35c\nparent fd65937ec601326b479654a5ad14847adcdb214c\nparent 65682da7e57af544abb46a7d8a7f4fdca0c73f56\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518715027 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518715039 +0100\n\nMerge #12200: Bind functional test nodes to 127.0.0.1\n\n65682da [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To test, make an arbitrary whitespace change to `src/bitcoind.cpp` and recompile. This normally resets the firewall's memory.\n\n  Easiest way to reproduce a popup without running the test suite:\n\n  ```sh\n  src/bitcoind -regtest -bind=127.0.0.1 # No popup\n  src/bitcoind -regtest # Popup\n  ```\n\nTree-SHA512: ffa92f148a2ead2ceca978c285882979639be23eb31ad6a27aa81df9fdddba5d493719c92c09a351a81d638f6f739c351a721e42168d77ead60abe074df773d6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c"
      },
      {
        "sha": "65682da7e57af544abb46a7d8a7f4fdca0c73f56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65682da7e57af544abb46a7d8a7f4fdca0c73f56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65682da7e57af544abb46a7d8a7f4fdca0c73f56"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8bf75ca1ae31d8eac951aed80d1d70093b80eddd",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d09968f4d00668b990ae19aed024ff3fd27072b8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d09968f4d00668b990ae19aed024ff3fd27072b8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d09968f4d00668b990ae19aed024ff3fd27072b8",
        "patch": "@@ -292,6 +292,7 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n+        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjhiMzg3NzUyZThjNDkzYThlODc3OTVhZTZkZGI3OGI0NWIxYTVk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-10-05T17:43:47Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2018-02-15T18:31:45Z"
      },
      "message": "Fix overly eager BIP30 bypass",
      "tree": {
        "sha": "5db4d9f72c9b45ab91457d7c643893086a528ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5db4d9f72c9b45ab91457d7c643893086a528ab5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cad504bf4c302f7a72e0a0e191f3fdbafda7340f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cad504bf4c302f7a72e0a0e191f3fdbafda7340f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cad504bf4c302f7a72e0a0e191f3fdbafda7340f"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 54,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf58504eb148a8e50ee28d06289d177744b79ba5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 1,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
        "patch": "@@ -1858,12 +1858,65 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n     // duplicate transactions descending from the known pairs either.\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n+\n+    // BIP34 requires that a block at height X (block X) has its coinbase\n+    // scriptSig start with a CScriptNum of X (indicated height X).  The above\n+    // logic of no longer requiring BIP30 once BIP34 activates is flawed in the\n+    // case that there is a block X before the BIP34 height of 227,931 which has\n+    // an indicated height Y where Y is greater than X.  The coinbase for block\n+    // X would also be a valid coinbase for block Y, which could be a BIP30\n+    // violation.  An exhaustive search of all mainnet coinbases before the\n+    // BIP34 height which have an indicated height greater than the block height\n+    // reveals many occurrences. The 3 lowest indicated heights found are\n+    // 209,921, 490,897, and 1,983,702 and thus coinbases for blocks at these 3\n+    // heights would be the first opportunity for BIP30 to be violated.\n+\n+    // The search reveals a great many blocks which have an indicated height\n+    // greater than 1,983,702, so we simply remove the optimization to skip\n+    // BIP30 checking for blocks at height 1,983,702 or higher.  Before we reach\n+    // that block in another 25 years or so, we should take advantage of a\n+    // future consensus change to do a new and improved version of BIP34 that\n+    // will actually prevent ever creating any duplicate coinbases in the\n+    // future.\n+    static constexpr int BIP34_IMPLIES_BIP30_LIMIT = 1983702;\n+\n+    // There is no potential to create a duplicate coinbase at block 209,921\n+    // because this is still before the BIP34 height and so explicit BIP30\n+    // checking is still active.\n+\n+    // The final case is block 176,684 which has an indicated height of\n+    // 490,897. Unfortunately, this issue was not discovered until about 2 weeks\n+    // before block 490,897 so there was not much opportunity to address this\n+    // case other than to carefully analyze it and determine it would not be a\n+    // problem. Block 490,897 was, in fact, mined with a different coinbase than\n+    // block 176,684, but it is important to note that even if it hadn't been or\n+    // is remined on an alternate fork with a duplicate coinbase, we would still\n+    // not run into a BIP30 violation.  This is because the coinbase for 176,684\n+    // is spent in block 185,956 in transaction\n+    // d4f7fbbf92f4a3014a230b2dc70b8058d02eb36ac06b4a0736d9d60eaa9e8781.  This\n+    // spending transaction can't be duplicated because it also spends coinbase\n+    // 0328dd85c331237f18e781d692c92de57649529bd5edf1d01036daea32ffde29.  This\n+    // coinbase has an indicated height of over 4.2 billion, and wouldn't be\n+    // duplicatable until that height, and it's currently impossible to create a\n+    // chain that long. Nevertheless we may wish to consider a future soft fork\n+    // which retroactively prevents block 490,897 from creating a duplicate\n+    // coinbase. The two historical BIP30 violations often provide a confusing\n+    // edge case when manipulating the UTXO and it would be simpler not to have\n+    // another edge case to deal with.\n+\n+    // testnet3 has no blocks before the BIP34 height with indicated heights\n+    // post BIP34 before approximately height 486,000,000 and presumably will\n+    // be reset before it reaches block 1,983,702 and starts doing unnecessary\n+    // BIP30 checking again.\n     assert(pindex->pprev);\n     CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n     fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n-    if (fEnforceBIP30) {\n+    // TODO: Remove BIP30 checking from block height 1,983,702 on, once we have a\n+    // consensus change that ensures coinbases at those heights can not\n+    // duplicate earlier coinbases.\n+    if (fEnforceBIP30 || pindex->nHeight >= BIP34_IMPLIES_BIP30_LIMIT) {\n         for (const auto& tx : block.vtx) {\n             for (size_t o = 0; o < tx->vout.size(); o++) {\n                 if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {"
      }
    ]
  },
  {
    "sha": "face7220b776e3decf9889b2c20c9d5f935e971e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWNlNzIyMGI3NzZlM2RlY2Y5ODg5YjJjMjBjOWQ1ZjkzNWU5NzFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:01:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:00:28Z"
      },
      "message": "qa: Move common args to bitcoin.conf",
      "tree": {
        "sha": "9f99a410b351a2368727f4f963e509f77d0c70d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f99a410b351a2368727f4f963e509f77d0c70d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJahdjMAAoJEM4rdWl+aaVI4fYMAJplkvPWtuA5V9Il5AFAQIHE\ngki1ihSnwzKWcmiAV9mnOQ3z3hlaw/c1r9/naY/g5aqUOCA9k4p8Rwncs5hCsnJm\njMwOdsGl0FLvSFFotGRhh1hjHj8kOoeN9Feuh+5ULszIgAFSpanHqTmMGWFqFrsY\nCxS032irZ7x7/392zFOiyJrFynR987uWcig+fObgjxAovCooXaRc1Sz8xOVq2ePc\ntYNFceVwI/rhBZktsN3p9piDbQSdNLbX5DLSo+9A3ZhDTFlbqSgBKl1fxMXeEKRO\nCP9wd2KgEAO9hx++MAn8FAuw6V0eiMDFuYlzeUEC0vg6IJPoPRjZSKkvLUhjU/1i\nV89HXepa7WE4BAR6JpCw/gfv7IQqiK+z5qUEWUnREdl0CUU1GYE9iKc8k3L2Qo3G\ncGt3jwSt1D1/PVA+ZwvUPONBegA/YnXcy0Y2P5E8WYsNFr9sbAsbr8g66f8M7RB0\n0KMQOCyD6xutzNUc3IJ9Dvro/mPegS28YkGs54gjGg==\n=uCjv\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f99a410b351a2368727f4f963e509f77d0c70d7\nparent d09968f4d00668b990ae19aed024ff3fd27072b8\nauthor MarcoFalke <falke.marco@gmail.com> 1518721303 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518721228 -0500\n\nqa: Move common args to bitcoin.conf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/face7220b776e3decf9889b2c20c9d5f935e971e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e87f6d33f0dcb5bf7065c7f29be63aa2bf06333",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -46,6 +46,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-rest\"]] * self.num_nodes\n \n     def setup_network(self, split=False):\n         super().setup_network()"
      },
      {
        "sha": "ecb91b315e013c0ca907bb6dc687e594219664e7",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -392,7 +392,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))"
      },
      {
        "sha": "93a052f7857e380b4cae6fcdfc779e1ca33d2d19",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -57,9 +57,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n-        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        # Most callers will just need to add extra args to the standard list below.\n+        # For those callers that need more flexibity, they can just set the args property directly.\n+        # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n         self.use_cli = use_cli"
      },
      {
        "sha": "fb67e1530f33a3d9353279920ea2808151ece973",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/face7220b776e3decf9889b2c20c9d5f935e971e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=face7220b776e3decf9889b2c20c9d5f935e971e",
        "patch": "@@ -291,6 +291,9 @@ def initialize_datadir(dirname, n):\n         f.write(\"regtest=1\\n\")\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n+        f.write(\"server=1\\n\")\n+        f.write(\"keypool=1\\n\")\n+        f.write(\"discover=0\\n\")\n         f.write(\"listenonion=0\\n\")\n         f.write(\"bind=127.0.0.1\\n\")\n     return datadir"
      }
    ]
  },
  {
    "sha": "fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZiZjdmNzRlMWEwMDhlZjI1Y2JmZTliYTZiYWVlNDhhM2Q5MjEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:37:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-15T19:39:04Z"
      },
      "message": "devtools: Exclude patches from lint-whitespace",
      "tree": {
        "sha": "1c8482c3190b1f3f3e8fcb3563c1103b8e37328e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c8482c3190b1f3f3e8fcb3563c1103b8e37328e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJaheHYAAoJEM4rdWl+aaVI1+AL/jYrDWEaEloWfLvi7vgiAmTK\ncs9FlBbo2D3CmJ8Da5lxd99iRXS3alwsHEvAHNbEyRDFHYVONyGudPPU0bJijUrr\n2SXb5Yj+JvZ4C/x115WsIEyEJjYyTUz+iE1N4YLxGoFo8GaDE6Xf6pUfwrF/XxSf\niVyVPsljgOExAnh8M65O8RzZoE1k5pgIEO1uR2i8g6BfJ/jpxoqQtUhWNy1zhcmi\nBwp+E4jn2k6wMYowxseokpWHnue5XUaU/Twjl+/eyTsaC7ZH9nqVbLgH1wpJxAuZ\n656SwO9Du237aYMoNSovD+EJQX3cdGGvTnP9lWaLiPl7N4vj3SWXcG7vcXcj2hDF\nqOHaQ3b2ck9fXYFhC5XDrzvXjIdX7/jSzi4txbcAiBNGA/hTY57cJQPMrAr60Pvv\n4IJA8B6SHkSgtIlS5CUeQD4wdDybLhIMTs59HNTlph9f5Z8qFc27rsAGj4o74BJA\ntWfgTCdoXWzBAzO/OJm2xrunIQIYMSlNHNjktgJAIA==\n=z8Q8\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c8482c3190b1f3f3e8fcb3563c1103b8e37328e\nparent fd65937ec601326b479654a5ad14847adcdb214c\nauthor MarcoFalke <falke.marco@gmail.com> 1518723451 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518723544 -0500\n\ndevtools: Exclude patches from lint-whitespace\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd65937ec601326b479654a5ad14847adcdb214c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd65937ec601326b479654a5ad14847adcdb214c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd65937ec601326b479654a5ad14847adcdb214c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af9a57910adf2dc3806a71d9f8716651f3045ff8",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "patch": "@@ -16,7 +16,7 @@ if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n fi\n \n showdiff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi"
      }
    ]
  },
  {
    "sha": "58715f6d073f2751a49332ddfc235e080fb8d413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODcxNWY2ZDA3M2YyNzUxYTQ5MzMyZGRmYzIzNWUwODBmYjhkNDEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:02:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:10:42Z"
      },
      "message": "Merge #12422: util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build\n\n1d4cbd2 test: Add unit test for LockDirectory (Wladimir J. van der Laan)\nfc888bf util: Fix multiple use of LockDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Wrap the `boost::interprocess::file_lock` in a `std::unique_ptr` inside the map that keeps track of per-directory locks.\n\n  This fixes a build issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD 6.2, and should have no effect otherwise.\n\n  Also add a unit test, make the function thread-safe, and fix Linux versus Windows behavior inconsistency.\n\n  Meant to fix #12413.\n\nTree-SHA512: 1a94c714c932524a51212c46e8951c129337d57b00fd3da5a347c6bcf6a947706cd440f39df935591b2079995136917f71ca7435fb356f6e8a128c509a62ec32",
      "tree": {
        "sha": "58256693b9a57dff515449e3f3f342455c9330f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58256693b9a57dff515449e3f3f342455c9330f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfdSAAoJEB5K7WKYbNJdsWAIAL0G61HP/0NJvW519N81czFq\nLyKzuY0a14/lMWFnVjaZ4mJrAGX2Shqaf7HFxwvID+RuRVK2553ZN6Zvg2Kkh9Vw\n2mQYp9Iywa9ei7Nsxc0QxeoL1Ku4djLm7uwt+qZZdOiLNEGnhHngglHIYSKhIu3F\nvhMk3pmDuBigHi/P7m8xogNzoPYQx34GO8saK3sUR8huxg88DqwhP8qdzpyZi7+9\nSaq8YZ5qUzUo7RWKN7mmf2dQItsvsaq0ZRH+vtva1xwXVKkGIueUV4r2quf025CW\nboEkC/OrcHr7bPAht1jM8rLBtf1PCCgOf8zCk154DtZFHGQw1LTSbppWC2foo5A=\n=TqxT\n-----END PGP SIGNATURE-----",
        "payload": "tree 58256693b9a57dff515449e3f3f342455c9330f5\nparent d09968f4d00668b990ae19aed024ff3fd27072b8\nparent 1d4cbd26e4220982f7f2f60e447199d6f62ae254\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518728559 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518729042 +0100\n\nMerge #12422: util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build\n\n1d4cbd2 test: Add unit test for LockDirectory (Wladimir J. van der Laan)\nfc888bf util: Fix multiple use of LockDirectory (Wladimir J. van der Laan)\n\nPull request description:\n\n  Wrap the `boost::interprocess::file_lock` in a `std::unique_ptr` inside the map that keeps track of per-directory locks.\n\n  This fixes a build issue with the clang 4.0.0+boost-1.58.0p8 version combo on OpenBSD 6.2, and should have no effect otherwise.\n\n  Also add a unit test, make the function thread-safe, and fix Linux versus Windows behavior inconsistency.\n\n  Meant to fix #12413.\n\nTree-SHA512: 1a94c714c932524a51212c46e8951c129337d57b00fd3da5a347c6bcf6a947706cd440f39df935591b2079995136917f71ca7435fb356f6e8a128c509a62ec32\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58715f6d073f2751a49332ddfc235e080fb8d413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      },
      {
        "sha": "1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d4cbd26e4220982f7f2f60e447199d6f62ae254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d4cbd26e4220982f7f2f60e447199d6f62ae254"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 165,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4b2da3e2193a7490f5a20b3c6bf9bac528b88396",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -13,6 +13,10 @@\n \n #include <stdint.h>\n #include <vector>\n+#ifndef WIN32\n+#include <sys/types.h>\n+#include <sys/wait.h>\n+#endif\n \n #include <boost/test/unit_test.hpp>\n \n@@ -603,4 +607,130 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n     BOOST_CHECK(!ParseFixedPoint(\"1.\", 8, &amount));\n }\n \n+static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n+{\n+    *result = LockDirectory(dirname, lockname);\n+}\n+\n+#ifndef WIN32 // Cannot do this test on WIN32 due to lack of fork()\n+static constexpr char LockCommand = 'L';\n+static constexpr char UnlockCommand = 'U';\n+static constexpr char ExitCommand = 'X';\n+\n+static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+{\n+    char ch;\n+    int rv;\n+    while (true) {\n+        rv = read(fd, &ch, 1); // Wait for command\n+        assert(rv == 1);\n+        switch(ch) {\n+        case LockCommand:\n+            ch = LockDirectory(dirname, lockname);\n+            rv = write(fd, &ch, 1);\n+            assert(rv == 1);\n+            break;\n+        case UnlockCommand:\n+            ReleaseDirectoryLocks();\n+            ch = true; // Always succeeds\n+            rv = write(fd, &ch, 1);\n+            break;\n+        case ExitCommand:\n+            close(fd);\n+            exit(0);\n+        default:\n+            assert(0);\n+        }\n+    }\n+}\n+#endif\n+\n+BOOST_AUTO_TEST_CASE(test_LockDirectory)\n+{\n+    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    const std::string lockname = \".lock\";\n+#ifndef WIN32\n+    // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n+    // it: there is BOOST_TEST_IGNORE_SIGCHLD but that only works when defined\n+    // at build-time of the boost library\n+    void (*old_handler)(int) = signal(SIGCHLD, SIG_DFL);\n+\n+    // Fork another process for testing before creating the lock, so that we\n+    // won't fork while holding the lock (which might be undefined, and is not\n+    // relevant as test case as that is avoided with -daemonize).\n+    int fd[2];\n+    BOOST_CHECK_EQUAL(socketpair(AF_UNIX, SOCK_STREAM, 0, fd), 0);\n+    pid_t pid = fork();\n+    if (!pid) {\n+        BOOST_CHECK_EQUAL(close(fd[1]), 0); // Child: close parent end\n+        TestOtherProcess(dirname, lockname, fd[0]);\n+    }\n+    BOOST_CHECK_EQUAL(close(fd[0]), 0); // Parent: close child end\n+#endif\n+    // Lock on non-existent directory should fail\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), false);\n+\n+    fs::create_directories(dirname);\n+\n+    // Probing lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Persistent lock on new directory should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from the same thread should succeed\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname), true);\n+\n+    // Another lock on the directory from a different thread within the same process should succeed\n+    bool threadresult;\n+    std::thread thr(TestOtherThread, dirname, lockname, &threadresult);\n+    thr.join();\n+    BOOST_CHECK_EQUAL(threadresult, true);\n+#ifndef WIN32\n+    // Try to aquire lock in child process while we're holding it, this should fail.\n+    char ch;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, false);\n+\n+    // Give up our lock\n+    ReleaseDirectoryLocks();\n+    // Probing lock from our side now should succeed, but not hold on to the lock.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Try to acquire the lock in the child process, this should be succesful.\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should fail.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), false);\n+\n+    // Unlock the lock in the child process\n+    BOOST_CHECK_EQUAL(write(fd[1], &UnlockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n+    BOOST_CHECK_EQUAL((bool)ch, true);\n+\n+    // When we try to probe the lock now, it should succeed.\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Re-lock the lock in the child process, then wait for it to exit, check\n+    // successful return. After that, we check that exiting the process\n+    // has released the lock as we would expect by probing it.\n+    int processstatus;\n+    BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(write(fd[1], &ExitCommand, 1), 1);\n+    BOOST_CHECK_EQUAL(waitpid(pid, &processstatus, 0), pid);\n+    BOOST_CHECK_EQUAL(processstatus, 0);\n+    BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n+\n+    // Restore SIGCHLD\n+    signal(SIGCHLD, old_handler);\n+    BOOST_CHECK_EQUAL(close(fd[1]), 0); // Close our side of the socketpair\n+#endif\n+    // Clean up\n+    ReleaseDirectoryLocks();\n+    fs::remove_all(dirname);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "dcf7ed38b11953a826086aecc716893f8fa10f06",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 6,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -373,27 +373,50 @@ int LogPrintStr(const std::string &str)\n     return ret;\n }\n \n+/** A map that contains all the currently held directory locks. After\n+ * successful locking, these will be held here until the global destructor\n+ * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks\n+ * is called.\n+ */\n+static std::map<std::string, std::unique_ptr<boost::interprocess::file_lock>> dir_locks;\n+/** Mutex to protect dir_locks. */\n+static std::mutex cs_dir_locks;\n+\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n {\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n-    FILE* file = fsbridge::fopen(pathLockFile, \"a\"); // empty lock file; created if it doesn't exist.\n+\n+    // If a lock for this directory already exists in the map, don't try to re-lock it\n+    if (dir_locks.count(pathLockFile.string())) {\n+        return true;\n+    }\n+\n+    // Create empty lock file if it doesn't exist.\n+    FILE* file = fsbridge::fopen(pathLockFile, \"a\");\n     if (file) fclose(file);\n \n     try {\n-        static std::map<std::string, boost::interprocess::file_lock> locks;\n-        boost::interprocess::file_lock& lock = locks.emplace(pathLockFile.string(), pathLockFile.string().c_str()).first->second;\n-        if (!lock.try_lock()) {\n+        auto lock = MakeUnique<boost::interprocess::file_lock>(pathLockFile.string().c_str());\n+        if (!lock->try_lock()) {\n             return false;\n         }\n-        if (probe_only) {\n-            lock.unlock();\n+        if (!probe_only) {\n+            // Lock successful and we're not just probing, put it into the map\n+            dir_locks.emplace(pathLockFile.string(), std::move(lock));\n         }\n     } catch (const boost::interprocess::interprocess_exception& e) {\n         return error(\"Error while attempting to lock directory %s: %s\", directory.string(), e.what());\n     }\n     return true;\n }\n \n+void ReleaseDirectoryLocks()\n+{\n+    std::lock_guard<std::mutex> ulock(cs_dir_locks);\n+    dir_locks.clear();\n+}\n+\n /** Interpret string as boolean, for argument parsing */\n static bool InterpretBool(const std::string& strValue)\n {"
      },
      {
        "sha": "9490a5678f2a8695203c66d562298ac07c6415fe",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58715f6d073f2751a49332ddfc235e080fb8d413/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=58715f6d073f2751a49332ddfc235e080fb8d413",
        "patch": "@@ -174,6 +174,12 @@ int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n bool RenameOver(fs::path src, fs::path dest);\n bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+\n+/** Release all directory locks. This is used for unit testing only, at runtime\n+ * the global destructor will take care of the locks.\n+ */\n+void ReleaseDirectoryLocks();\n+\n bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);"
      }
    ]
  },
  {
    "sha": "5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWZmMWM3NDhkNTZhMjMxOGQxMGJmNmNkOTI1YjYwODQzNDllMTNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:21:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:21:57Z"
      },
      "message": "Merge #12349: shutdown: fix crash on shutdown with reindex-chainstate\n\nceaefdd fix possible shutdown assertion with -reindex-shutdown (Cory Fields)\n\nPull request description:\n\n  Fixes the assertion error reported here: https://github.com/bitcoin/bitcoin/pull/12349#issuecomment-365095741\n\nTree-SHA512: db8e2a275f92a99df7f17852d00eba6df996e412aa3ed3853a9ea0a8cb9800760677532efd52f92abbf2cdcc4210957a87a5f919ac998d46c205365a7a7dffca",
      "tree": {
        "sha": "03c972e45e70961ab15afb521d50fe253a1b2cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03c972e45e70961ab15afb521d50fe253a1b2cf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfn2AAoJEB5K7WKYbNJdkMMIAIuL4NMYlGSQALPT+F9Jho9x\nhWqIRym/gA9cPYBABO7iAqBh1vMFtThc/VkTL5bWiMzYayLEgLuOBtJbbvueQfBX\novKcp+pnxiUUl51blT6ThdDmIQVDJauD0UfqYrJu49BaTn6ySL69EDk23pyS9ja6\nJfQL+Fe9UgyEUp/gO43ZvF/VNgzmwWynkyamY556UxJ2xa/em5WM6Skcep9bhRMb\nReg1DiGlTwGSlePy3+d6AbBlK8Xg7F6fycMWGTd04oueJPYye+InIhM3Q878E53e\n77H3Q5gW+DT+WDg86wWeA1cNo7Us9TELOUmLllKsBHWFUTVdqOV7tAevnpsZf/4=\n=sr0n\n-----END PGP SIGNATURE-----",
        "payload": "tree 03c972e45e70961ab15afb521d50fe253a1b2cf0\nparent 58715f6d073f2751a49332ddfc235e080fb8d413\nparent ceaefdd5f362537a1908d0095059e4be788f3dee\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518729710 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518729717 +0100\n\nMerge #12349: shutdown: fix crash on shutdown with reindex-chainstate\n\nceaefdd fix possible shutdown assertion with -reindex-shutdown (Cory Fields)\n\nPull request description:\n\n  Fixes the assertion error reported here: https://github.com/bitcoin/bitcoin/pull/12349#issuecomment-365095741\n\nTree-SHA512: db8e2a275f92a99df7f17852d00eba6df996e412aa3ed3853a9ea0a8cb9800760677532efd52f92abbf2cdcc4210957a87a5f919ac998d46c205365a7a7dffca\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eff1c748d56a2318d10bf6cd925b6084349e13e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58715f6d073f2751a49332ddfc235e080fb8d413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58715f6d073f2751a49332ddfc235e080fb8d413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58715f6d073f2751a49332ddfc235e080fb8d413"
      },
      {
        "sha": "ceaefdd5f362537a1908d0095059e4be788f3dee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceaefdd5f362537a1908d0095059e4be788f3dee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceaefdd5f362537a1908d0095059e4be788f3dee"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e809f66e25e9f07fe5d36e2434b8bba79f9f7e8c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eff1c748d56a2318d10bf6cd925b6084349e13e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eff1c748d56a2318d10bf6cd925b6084349e13e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "patch": "@@ -2087,7 +2087,7 @@ bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &\n             nLastWrite = nNow;\n         }\n         // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n-        if (fDoFullFlush) {\n+        if (fDoFullFlush && !pcoinsTip->GetBestBlock().IsNull()) {\n             // Typical Coin structures on disk are around 48 bytes in size.\n             // Pushing a new one to the database can cause it to be written\n             // twice (once in the log, and once in the tables). This is already"
      }
    ]
  },
  {
    "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmE1NTZhZWUyMDMwZTNiN2U3NjA5ZDliMTFiNGQ2ZTVmZjNlYzJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:22:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-15T21:33:38Z"
      },
      "message": "Merge #12427: Make signrawtransaction accept P2SH-P2WSH redeemscripts\n\n5f605e1 Make signrawtransaction accept P2SH-P2WSH redeemscripts (Pieter Wuille)\n\nPull request description:\n\n  This is a quick fix for #12418, which is a regression in 0.16.\n\n  It permits specifying just the inner redeemscript to let `signrawtransaction` succeed. This inner redeemscript is already reported by `addmultisigaddress` & co.\n\n  #11708 uses a different approach, where `listunspent` reports both inner & outer redeemscript, but requires both to be provided to `signrawtransaction`. Part of #11708 is still needed even in combination with this PR however, as currently the inner redeemscript isn't reported by `listunspent`.\n\nTree-SHA512: a6fa2b2661ce04db25cf029dd31da39c0b4811d43692f816dfe0f77b4159b5e2952051664356a579f690ccd58a626e0975708afcd7ad5919366c490944e3a9a5",
      "tree": {
        "sha": "cf5a553a700cfbc4d8478e650f6cda94752cb13b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5a553a700cfbc4d8478e650f6cda94752cb13b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahfyyAAoJEB5K7WKYbNJdJtMH/i76XAUxlgQ0heVK1LOWkv/L\nYfQHBoRGo79ltvL7RDy9kEzxPm+zYJHSFm7zisRh9uU+iRqwNnxaaa1EK0x/VBKa\nH6BYIxJ6kdPGtFGFrDvNVimeDxNYs4wu8wTnepahqJlFLBkdVQLqjP+N8WdbDRbg\n7KWJxz66v2jBaFPytOsLy6ci6EhcW/cdwZJ2IZdMxUPWzZkl4LuwL3Owt2HQ4fLO\nnOqxlx736lWYDrq+bamrMxXtdoBNirsiLGtHC0w7bWmTYiLvYb5Ua4UQvdfIF82E\n+sbPSXqr3TwVnXIR+t1IsTtlBOEFUr10F/qAqyDh85SHIStBP2KDNOpQ37MKIZk=\n=kWDO\n-----END PGP SIGNATURE-----",
        "payload": "tree cf5a553a700cfbc4d8478e650f6cda94752cb13b\nparent 5eff1c748d56a2318d10bf6cd925b6084349e13e\nparent 5f605e172baee35421eb20736601befdd8cad796\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518729779 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518730418 +0100\n\nMerge #12427: Make signrawtransaction accept P2SH-P2WSH redeemscripts\n\n5f605e1 Make signrawtransaction accept P2SH-P2WSH redeemscripts (Pieter Wuille)\n\nPull request description:\n\n  This is a quick fix for #12418, which is a regression in 0.16.\n\n  It permits specifying just the inner redeemscript to let `signrawtransaction` succeed. This inner redeemscript is already reported by `addmultisigaddress` & co.\n\n  #11708 uses a different approach, where `listunspent` reports both inner & outer redeemscript, but requires both to be provided to `signrawtransaction`. Part of #11708 is still needed even in combination with this PR however, as currently the inner redeemscript isn't reported by `listunspent`.\n\nTree-SHA512: a6fa2b2661ce04db25cf029dd31da39c0b4811d43692f816dfe0f77b4159b5e2952051664356a579f690ccd58a626e0975708afcd7ad5919366c490944e3a9a5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eff1c748d56a2318d10bf6cd925b6084349e13e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eff1c748d56a2318d10bf6cd925b6084349e13e"
      },
      {
        "sha": "5f605e172baee35421eb20736601befdd8cad796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f605e172baee35421eb20736601befdd8cad796",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f605e172baee35421eb20736601befdd8cad796"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ef5f04e4ee71e1aa41d8cdf9d7df3361724c464d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "patch": "@@ -848,6 +848,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n+                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "501b43921c51d4cd3abda24903b14eb89145465d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDFiNDM5MjFjNTFkNGNkM2FiZGEyNDkwM2IxNGViODkxNDU0NjVk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-05T15:26:24Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-15T21:43:39Z"
      },
      "message": "rpc: Refactor blockhash parse in getchaintxstats",
      "tree": {
        "sha": "9ae5ed23afd007badb257f3c1f7d33d2e22ff1b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ae5ed23afd007badb257f3c1f7d33d2e22ff1b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/501b43921c51d4cd3abda24903b14eb89145465d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/501b43921c51d4cd3abda24903b14eb89145465d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 12,
      "deletions": 18
    },
    "files": [
      {
        "sha": "8007cebc37493cb93a6038ff1ce375394b22d659",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/501b43921c51d4cd3abda24903b14eb89145465d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/501b43921c51d4cd3abda24903b14eb89145465d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=501b43921c51d4cd3abda24903b14eb89145465d",
        "patch": "@@ -1542,25 +1542,19 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    bool havehash = !request.params[1].isNull();\n-    uint256 hash;\n-    if (havehash) {\n-        hash = uint256S(request.params[1].get_str());\n-    }\n-\n-    {\n+    if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        if (havehash) {\n-            auto it = mapBlockIndex.find(hash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-            }\n-            pindex = it->second;\n-            if (!chainActive.Contains(pindex)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n-            }\n-        } else {\n-            pindex = chainActive.Tip();\n+        pindex = chainActive.Tip();\n+    } else {\n+        uint256 hash = uint256S(request.params[1].get_str());\n+        LOCK(cs_main);\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        pindex = it->second;\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2U2Nzg2MjAzYWQyZjhiZWIwZDJmZjM0YjBmZjc2MjZiYzdlODc3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-01-04T01:01:05Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-15T21:43:45Z"
      },
      "message": "qa: Improve getchaintxstats functional test",
      "tree": {
        "sha": "2236f51054d44867fe77a7ba28965b0e313ef28f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2236f51054d44867fe77a7ba28965b0e313ef28f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "501b43921c51d4cd3abda24903b14eb89145465d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/501b43921c51d4cd3abda24903b14eb89145465d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/501b43921c51d4cd3abda24903b14eb89145465d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 16,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a9e14d3e3c52723c240a5b321738a5609eec18c4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "patch": "@@ -102,6 +102,22 @@ def _test_getblockchaininfo(self):\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n \n+        # Test `getchaintxstats` invalid extra parameters\n+        assert_raises_rpc_error(-1, 'getchaintxstats', self.nodes[0].getchaintxstats, 0, '', 0)\n+\n+        # Test `getchaintxstats` invalid `nblocks`\n+        assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", self.nodes[0].getchaintxstats, '')\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, -1)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, self.nodes[0].getblockcount())\n+\n+        # Test `getchaintxstats` invalid `blockhash`\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getchaintxstats, blockhash=0)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0')\n+        blockhash = self.nodes[0].getblockhash(200)\n+        self.nodes[0].invalidateblock(blockhash)\n+        assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n+        self.nodes[0].reconsiderblock(blockhash)\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n@@ -133,8 +149,6 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n-\n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()"
      }
    ]
  },
  {
    "sha": "d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2Y0MzhhMDI2Y2I2N2YyYWE4ZDEyZDk0ZGVmOWM2YmUyZDlhYTk3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-15T22:29:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-02-15T22:29:39Z"
      },
      "message": "gitian: bump descriptors for (0.)17",
      "tree": {
        "sha": "96dc125ae74d03139fcbb047363d64bc20a290db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96dc125ae74d03139fcbb047363d64bc20a290db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d09968f4d00668b990ae19aed024ff3fd27072b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d09968f4d00668b990ae19aed024ff3fd27072b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d09968f4d00668b990ae19aed024ff3fd27072b8"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e9ee0495a8e254e37124e113a6975bab07cf5de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.16\"\n+name: \"bitcoin-linux-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "a84dce3e3aec3ec6a269ba3293eb7af0fdbaa97e",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.16\"\n+name: \"bitcoin-osx-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "8a87d91754a91a86732fe5fcd5e34718d05f4dca",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.16\"\n+name: \"bitcoin-win-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTYzM2VjZDVjMThjYTI5Y2I1NTFmNzAxZTU3ZThjZWMzZTYwOWRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-04T16:42:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-15T23:11:06Z"
      },
      "message": "[rpc] split wallet and non-wallet parts of DescribeAddressVisitor",
      "tree": {
        "sha": "ce600b48acabc66921f2865c98186502d09728e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce600b48acabc66921f2865c98186502d09728e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39633ecd5c18ca29cb551f701e57e8cec3e609da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 63,
      "deletions": 26
    },
    "files": [
      {
        "sha": "a1e39be64e72c2d6c7e334f0fbcd33fcaa5470a0",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 26,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39633ecd5c18ca29cb551f701e57e8cec3e609da/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39633ecd5c18ca29cb551f701e57e8cec3e609da/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "patch": "@@ -33,13 +33,62 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n-    CWallet * const pwallet;\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID &keyID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID &scriptID) const {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n \n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+#ifdef ENABLE_WALLET\n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n \n     void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n     {\n@@ -54,7 +103,11 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue a(UniValue::VARR);\n         if (ExtractDestination(subscript, embedded)) {\n             // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n             subobj.pushKV(\"address\", EncodeDestination(embedded));\n             subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n@@ -81,13 +134,13 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n     }\n \n+    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n             obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n@@ -98,8 +151,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     UniValue operator()(const CScriptID &scriptID) const {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n         if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             ProcessSubScript(subscript, obj, true);\n         }\n@@ -110,10 +161,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n             obj.pushKV(\"pubkey\", HexStr(pubkey));\n         }\n@@ -124,10 +171,6 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n     {\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n         CRIPEMD160 hasher;\n         uint160 hash;\n         hasher.Write(id.begin(), 32).Finalize(hash.begin());\n@@ -137,15 +180,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         return obj;\n     }\n \n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n #endif\n \n@@ -219,8 +254,10 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n         ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n         ret.pushKVs(detail);\n+        UniValue wallet_detail = boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest);\n+        ret.pushKVs(wallet_detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }"
      }
    ]
  },
  {
    "sha": "a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjMzZmI0ZjFkMDM3ZTY4ZmY3MGVlZjNhOWY1YjdiZjFkNjMxOTE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T00:27:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T00:27:44Z"
      },
      "message": "Merge #12442: devtools: Exclude patches from lint-whitespace\n\nfafbf7f74e devtools: Exclude patches from lint-whitespace (MarcoFalke)\n\nPull request description:\n\n  By default, unified patches have trailing whitespace in all context lines. Thus, exclude patches from linting.\n\nTree-SHA512: 8f89f1584581e94dd4e34bd522cba21602bafe7933b4631a3abc5da5a8f25568810862d696618fe63c15edf3e046869ad5077d09373f09792985503c6a415538",
      "tree": {
        "sha": "d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahiWAAAoJENLqSFDnUoslm2sQAJthUMC/v8NnNwEmIzDmrHI5\norOSsd4JzJqDLO3OuC0HMr5QUDWNuQH8H1nH4sx0AJ22QJEksM+SYAPwvyPCnYkN\nNc5NQcxqc9YNPEnRwJcNNKW4mXh9fW4ta7zVYYHGLIbR/NFBFyFZq7q2p/deQASq\nQVhodXWicRofMmJc0JAxXoPLw4fja3bSr7EAedQCB987eLX/IDfk5+cqC9f5uBMW\nkGSM8mOZd+EHe0SWs/H3FgmzDc6FBoo2H9ssqXskCBR30NzvAbekLa8xFI2v7QTE\neYeAE1Oy70NZxzuSoiz5hO2zIl1OW+UE9eF/tz3/JKlE8AuY6zcWgo3GZTHd+zTJ\nRM6nieVLvTMVkBGn126H5OSJZ4xovtn83wjAgOnBTIfk4AlIHV03ESza3q7fMYko\nEYzymoqNP5fgLsH+TkAkBt12xCcn7OaiXfJJGImxnY7woDM4hsdgSOpjoQMoGDzz\nxc344hbV0G385Z1QSdPRKHRVeRdLVVcDJSIU/Q1yG3ZlqyjOKekLhGItdyD/VexH\n4im39ZghGrZ2WYvWZa7IlW95kMGvysEG8VQpR4f+fKhND3SYFOZsxlfX8mnUZN0F\nQ2+ghQ9S9sgWA0AFGco9O4+tqTCPgLuee0JIzqC2tKkKvZzMC+TklTmiWfPNKma+\nMcTg+V0KNbhzN+AlqYTd\n=qlwG\n-----END PGP SIGNATURE-----",
        "payload": "tree d2aaed69bfd2988e9abf9b81e3d6bf86e5f856c9\nparent 3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c\nparent fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210\nauthor MarcoFalke <falke.marco@gmail.com> 1518740862 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518740864 -0500\n\nMerge #12442: devtools: Exclude patches from lint-whitespace\n\nfafbf7f74e devtools: Exclude patches from lint-whitespace (MarcoFalke)\n\nPull request description:\n\n  By default, unified patches have trailing whitespace in all context lines. Thus, exclude patches from linting.\n\nTree-SHA512: 8f89f1584581e94dd4e34bd522cba21602bafe7933b4631a3abc5da5a8f25568810862d696618fe63c15edf3e046869ad5077d09373f09792985503c6a415538\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa556aee2030e3b7e7609d9b11b4d6e5ff3ec2c"
      },
      {
        "sha": "fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafbf7f74e1a008ef25cbfe9ba6baee48a3d9210"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "af9a57910adf2dc3806a71d9f8716651f3045ff8",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "patch": "@@ -16,7 +16,7 @@ if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n fi\n \n showdiff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi"
      }
    ]
  },
  {
    "sha": "1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjA1NWVmOWQ3OTg4ZDVlNjdhYTM1YWZkMDc0MjNmNTU4NjZiNmMw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T07:53:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:06:55Z"
      },
      "message": "Merge #12444: gitian: bump descriptors for (0.)17\n\nd7f438a gitian: bump descriptors for (0.)17 (Cory Fields)\n\nPull request description:\n\n  Bumping before we forget again. If we end up calling the next release 17.0, we'll have to fixup the descriptors anyway, so there's no harm in just doing the trivial bump now.\n\nTree-SHA512: f3401ec9f813132765280c60d47ae5d1697af5e6966a3798cb907dad10b7d76398032bf2a642a5a4de1055facec07a76a3055e0e9050cdab1d50caf32940e738",
      "tree": {
        "sha": "f1ea21764bd78adb9f80df2e56a40c06f1de753b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ea21764bd78adb9f80df2e56a40c06f1de753b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahpEfAAoJEB5K7WKYbNJdT1MH/2eFXIrjCM1x0BI0S7dA0awo\n2hFpcbmuUZqpAWKk3EOb8OUfaGM5tslPLqot3iHpRsnisKLQsOZaL1rt81E4oRin\n2MDHsuGDUUIW4mf5JLSbaMYoV7EcZF3BEzo+I6JY6YHAyEgSvBQRoCj7LJRWgRQT\nwagFVfDB1xU9G5+ndQFXtbCQvUSUqWaSUDgU9Db83U1UgdxPKzvTRawgjPEqp5+Z\nMiVCeJYcwga0TIUPbsQ/myKPuvZr+tHIAOTamOx77wV85MBCaZqP3Md4WJf27Qn7\nVGijD3rep7s0xZ8p2ZjHQoVFcdxoj5FYTqlIP2tC6MkHVQhHv/eCfLdE3c6wcFo=\n=M4V9\n-----END PGP SIGNATURE-----",
        "payload": "tree f1ea21764bd78adb9f80df2e56a40c06f1de753b\nparent a233fb4f1d037e68ff70eef3a9f5b7bf1d631918\nparent d7f438a026cb67f2aa8d12d94def9c6be2d9aa97\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518767598 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518768415 +0100\n\nMerge #12444: gitian: bump descriptors for (0.)17\n\nd7f438a gitian: bump descriptors for (0.)17 (Cory Fields)\n\nPull request description:\n\n  Bumping before we forget again. If we end up calling the next release 17.0, we'll have to fixup the descriptors anyway, so there's no harm in just doing the trivial bump now.\n\nTree-SHA512: f3401ec9f813132765280c60d47ae5d1697af5e6966a3798cb907dad10b7d76398032bf2a642a5a4de1055facec07a76a3055e0e9050cdab1d50caf32940e738\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a233fb4f1d037e68ff70eef3a9f5b7bf1d631918"
      },
      {
        "sha": "d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7f438a026cb67f2aa8d12d94def9c6be2d9aa97"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e9ee0495a8e254e37124e113a6975bab07cf5de",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.16\"\n+name: \"bitcoin-linux-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "a84dce3e3aec3ec6a269ba3293eb7af0fdbaa97e",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.16\"\n+name: \"bitcoin-osx-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      },
      {
        "sha": "8a87d91754a91a86732fe5fcd5e34718d05f4dca",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f055ef9d7988d5e67aa35afd07423f55866b6c0/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.16\"\n+name: \"bitcoin-win-0.17\"\n enable_cache: true\n suites:\n - \"trusty\""
      }
    ]
  },
  {
    "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmRjMmRhZjgyZDJlNGQ3YTZkZjIzMzIzNWRkODljM2FiOTkwYjIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:09:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T08:09:50Z"
      },
      "message": "Merge #12425: Add some script tests\n\nbe45a67 Add some script tests related to BOOL ops and odd values like negative 0. (Richard Kiss)\n\nPull request description:\n\n  Add some script tests related to BOOL ops and odd values like negative 0.\n\nTree-SHA512: 8e633f7ea5eea39e31016994baf60f295fa1dc8cae27aa5fcfc741ea97136bfb3ddc57bb62b9c6bf9fe256fc09cdd184906ba8e611e297cf8d2d363da2bbf1d4",
      "tree": {
        "sha": "53e9727cc8dd7f3120ffc0fffb6677f73247a21a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53e9727cc8dd7f3120ffc0fffb6677f73247a21a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahpHOAAoJEB5K7WKYbNJdBxEIAK5SFw42ycI/Ufic/UCrZczo\na1DDfU4Vo9f5cKv5fIAqO4rBAusOS7iuwZIaDA9CvvvQurB/2y61SxIdP1fKKTWx\n7NM0uWjiY8etUe0/LWEypSRDmIi7mpRGy4LPGML4EB1YY7YB5hCxWgH793LWvykZ\nG1MWpSf5hWJzkyDA8pKt1PnFp7pWEB5gip0RcjFZITPE+tGl0LdYBUTpf21tBPsT\nHnb7u6bxjtL92hzQPRUPIwimsSjIe9uTUJ22GUmKNHCYY9FcXO8F2x4dH+FFCRam\nYBrmEP10QD1SlNBiJf99WdDkzrc5oDYbQE05+dD9ls56Q2AvpHiCkWPuGR/A1ec=\n=MKbh\n-----END PGP SIGNATURE-----",
        "payload": "tree 53e9727cc8dd7f3120ffc0fffb6677f73247a21a\nparent 1f055ef9d7988d5e67aa35afd07423f55866b6c0\nparent be45a67895f1259eaee80cfb122a849a400ae1ad\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518768585 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518768590 +0100\n\nMerge #12425: Add some script tests\n\nbe45a67 Add some script tests related to BOOL ops and odd values like negative 0. (Richard Kiss)\n\nPull request description:\n\n  Add some script tests related to BOOL ops and odd values like negative 0.\n\nTree-SHA512: 8e633f7ea5eea39e31016994baf60f295fa1dc8cae27aa5fcfc741ea97136bfb3ddc57bb62b9c6bf9fe256fc09cdd184906ba8e611e297cf8d2d363da2bbf1d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f055ef9d7988d5e67aa35afd07423f55866b6c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f055ef9d7988d5e67aa35afd07423f55866b6c0"
      },
      {
        "sha": "be45a67895f1259eaee80cfb122a849a400ae1ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be45a67895f1259eaee80cfb122a849a400ae1ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be45a67895f1259eaee80cfb122a849a400ae1ad"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ccefe52246ee41d64699708be588bf84f5204e9e",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26dc2daf82d2e4d7a6df233235dd89c3ab990b23/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "patch": "@@ -168,6 +168,18 @@\n [\"1 0 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 1 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"0 0 BOOLOR\", \"NOT\", \"P2SH,STRICTENC\", \"OK\"],\n+[\"0x01 0x80\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLOR\"],\n+[\"0x01 0x00\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLOR\"],\n+[\"0x01 0x81\", \"DUP BOOLOR\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLOR\"],\n+[\"0x01 0x80\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative-0 negative-0 BOOLAND\"],\n+[\"0x01 0x00\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \" non-minimal-0  non-minimal-0 BOOLAND\"],\n+[\"0x01 0x81\", \"DUP BOOLAND\", \"P2SH,STRICTENC\", \"OK\", \"-1 -1 BOOLAND\"],\n+[\"0x01 0x00\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"non-minimal-0 NOT\"],\n+[\"0x01 0x80\", \"NOT\", \"P2SH,STRICTENC\", \"OK\", \"negative-0 NOT\"],\n+[\"0x01 0x81\", \"NOT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"negative 1 NOT\"],\n+[\"0x01 0x80 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"-0 0 NUMEQUAL\"],\n+[\"0x01 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n+[\"0x02 0x00 0x00 0\", \"NUMEQUAL\", \"P2SH\", \"OK\", \"non-minimal-0 0 NUMEQUAL\"],\n [\"16 17 BOOLOR\", \"NOP\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"OK\"],\n [\"11 10 1 ADD\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"OK\"],"
      }
    ]
  },
  {
    "sha": "dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDdlNDJjYmI0MzkwNzg4NzA1MDMxZmZhMGJjODkzZDI2ZjA1OTdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T10:57:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T11:00:19Z"
      },
      "message": "test: Add missing signal.h header\n\nutil_tests.cpp needs to include the signal.h header on FreeBSD.\n\nReported by denis2342 on IRC.",
      "tree": {
        "sha": "00f89e57da59de410f4a1e81dbfe3dc64c72af9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f89e57da59de410f4a1e81dbfe3dc64c72af9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e42cbb4390788705031ffa0bc893d26f0597e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "463bed59579dfb5d71e367afda5295f3651b3783",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd7e42cbb4390788705031ffa0bc893d26f0597e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd7e42cbb4390788705031ffa0bc893d26f0597e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "patch": "@@ -14,6 +14,7 @@\n #include <stdint.h>\n #include <vector>\n #ifndef WIN32\n+#include <signal.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n #endif"
      }
    ]
  },
  {
    "sha": "835a21b42402d546bd72f8a3f452f0c743fefe82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzVhMjFiNDI0MDJkNTQ2YmQ3MmY4YTNmNDUyZjBjNzQzZmVmZTgy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:04Z"
      },
      "message": "Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5\n\n64052c76c5 Merge #15: Add filename to corruption errors\n135ed0fb4e Add filename to corruption errors\n\ngit-subtree-dir: src/leveldb\ngit-subtree-split: 64052c76c567cff3dad32d1db0ef969d97b5882f",
      "tree": {
        "sha": "d14102bd5802c9b2d4472f712a0a66653e41f5cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d14102bd5802c9b2d4472f712a0a66653e41f5cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/835a21b42402d546bd72f8a3f452f0c743fefe82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b13a68e129f51b664e33b1894e33ebb7b94cdcc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b13a68e129f51b664e33b1894e33ebb7b94cdcc7"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/db_impl.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/leveldbutil.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/log_reader.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/db/repair.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/helpers/memenv/memenv.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/leveldb/env.h?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/table/format.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/env_posix.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/835a21b42402d546bd72f8a3f452f0c743fefe82/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/util/env_win.cc?ref=835a21b42402d546bd72f8a3f452f0c743fefe82",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE2ZGQyN2IxZjFmOTZmNWUxYTI2ZTgzMGUxYTgwMjU1YWZkYjVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:01:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T13:59:28Z"
      },
      "message": "Bump leveldb subtree",
      "tree": {
        "sha": "ac28ac960c3a60cfa750bf86d095ef01e0f72280",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac28ac960c3a60cfa750bf86d095ef01e0f72280"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJahuPAAAoJEM4rdWl+aaVICnUL/2gQj816lcpllx8n9KRFCm3q\nxwT8D9sTpsA7wg/t75dVcd/ZiGsYOxdUNCzKoG1FmSyW+OjL5Ffsgsxsf6EcD/cn\ns4GNolpnHP6qyNOU0Eohi4y1z3miQt2hzMeJxYGW2KehKFY9HZZwcDySUEKOSeii\nOMJRuQXkGduQiEUBX6Su4aprTm7miLH8j+kDBcBs1qKDduZ9iReIXm9CqjwT7k+L\nvImnYDizdt+vIlmOdC/zZRYQu0tJRi5WKgduqT7XFYUEO25VI6rzC4IDTHNpa/uE\n3js3xG1QyECpwd+v2pHrmIdpBzT8MovEKdS/k94Wz88X2PukNbqxY1FM2qjmx7CL\nfH3tzjv9VnrGA56i3hL5ct4G3hAn7pC6fUhNOXYlgJwRO7ZCH9UcYmCOiULi5uBE\nF5R0AiJtUkIkyoK7DhYWM/QB9kCLSbCOtkoOKtCDxBjNmP6Eixs2YDhXz7dtmXr2\n0EG2opxFfL0BjGi0TRdoyi2xwO18SUgAo9yeCkWJ4g==\n=I15k\n-----END PGP SIGNATURE-----",
        "payload": "tree ac28ac960c3a60cfa750bf86d095ef01e0f72280\nparent 13e31dd6548d64a5992f439e74bb424bf88aca04\nparent 835a21b42402d546bd72f8a3f452f0c743fefe82\nauthor MarcoFalke <falke.marco@gmail.com> 1518789695 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518789568 -0500\n\nBump leveldb subtree\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13e31dd6548d64a5992f439e74bb424bf88aca04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13e31dd6548d64a5992f439e74bb424bf88aca04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13e31dd6548d64a5992f439e74bb424bf88aca04"
      },
      {
        "sha": "835a21b42402d546bd72f8a3f452f0c743fefe82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835a21b42402d546bd72f8a3f452f0c743fefe82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/835a21b42402d546bd72f8a3f452f0c743fefe82"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "src/leveldb/db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/leveldbutil.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTYyZGRkMDE4NzNkMThkYmNhOTZjODFkNzU2YmUxMDIwMjQ5YjQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:13:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T14:13:47Z"
      },
      "message": "Merge #12447: test: Add missing signal.h header\n\ndd7e42cbb4 test: Add missing signal.h header (Wladimir J. van der Laan)\n\nPull request description:\n\n  util_tests.cpp needs to include the signal.h header on FreeBSD.\n\n  Reported by denis2342 on IRC.\n\nTree-SHA512: 0b946fc2770ca6043087f4fe22be96848d46efe44e3d4d45c5ee663e0f95b0e2e6145f4ade577a6257d0c0c4cfadf324111799e78b9e4e4be4da8a90f68e349f",
      "tree": {
        "sha": "00f89e57da59de410f4a1e81dbfe3dc64c72af9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00f89e57da59de410f4a1e81dbfe3dc64c72af9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJahucbAAoJENLqSFDnUosllOwP/3+Qfpv24Dk/dXZTJPoPGbom\njw/hAQhuhFgV3ToAVZxwFjHbnr6Rtnjz1ZsEIgd/r+kCNyk8wl6oDxEYQFTE2Wlj\nEJOEMAuFENHnitO20B83Q/hN71pqiWIGQv18JK3QeBG8AzrBM230fO5J/lgt/cJ8\nvgDwijbA47db1NkwUc5Ju8yRfRfE46AUCdjOi4hUQThDMjKxgxUTUvq5sexBOUOh\nKYozg/aja0Ci8NFpoNd97JXwCDwiYvadxzwtBKAwDSq06Qtmwqo9yytSS2WjDpsS\nCpYR7EZfBk3wRxtr5sp45oMVYaKGvwIC5XsUsJTtEMIMmFnaUudc9sA2T0AFfnRl\nmY6vS+UAJe1tqshc+BM5TnWQXPDgzvbz8vf2dMkIaPpIZI83RQOOk/kXLiYWu1Q9\nMyP2Y5Cc4NFw4hs2djDp2ist62oKFaGQNl88zsp4obtvIlYW6rx6wNSD0PyqaduC\ny+JozMmfxbyP9XiDKjySKfL8DOJFM4oQhd7sgNxuDr/vAnTBPcOIzs0Lj9vRYZmn\nkNreotFhl6+1dWIlu6oYuUJ0zKv369xF6DIxvtAM9xaJqUlCfKohdrnGF0LbvFB5\nQ0zWiJ4WBAXKzpxckT7iOd+oNMyg9OG1tjfZxY6Qm8pa7XkOd5CM0tYWZ1No80RY\n5CP3MWEuMAfGuRxkxYL0\n=LnUx\n-----END PGP SIGNATURE-----",
        "payload": "tree 00f89e57da59de410f4a1e81dbfe3dc64c72af9e\nparent 26dc2daf82d2e4d7a6df233235dd89c3ab990b23\nparent dd7e42cbb4390788705031ffa0bc893d26f0597e\nauthor MarcoFalke <falke.marco@gmail.com> 1518790425 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518790427 -0500\n\nMerge #12447: test: Add missing signal.h header\n\ndd7e42cbb4 test: Add missing signal.h header (Wladimir J. van der Laan)\n\nPull request description:\n\n  util_tests.cpp needs to include the signal.h header on FreeBSD.\n\n  Reported by denis2342 on IRC.\n\nTree-SHA512: 0b946fc2770ca6043087f4fe22be96848d46efe44e3d4d45c5ee663e0f95b0e2e6145f4ade577a6257d0c0c4cfadf324111799e78b9e4e4be4da8a90f68e349f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26dc2daf82d2e4d7a6df233235dd89c3ab990b23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26dc2daf82d2e4d7a6df233235dd89c3ab990b23"
      },
      {
        "sha": "dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e42cbb4390788705031ffa0bc893d26f0597e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e42cbb4390788705031ffa0bc893d26f0597e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "463bed59579dfb5d71e367afda5295f3651b3783",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a62ddd01873d18dbca96c81d756be1020249b45/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a62ddd01873d18dbca96c81d756be1020249b45/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4a62ddd01873d18dbca96c81d756be1020249b45",
        "patch": "@@ -14,6 +14,7 @@\n #include <stdint.h>\n #include <vector>\n #ifndef WIN32\n+#include <signal.h>\n #include <sys/types.h>\n #include <sys/wait.h>\n #endif"
      }
    ]
  },
  {
    "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWUwMzJiNDNjZWE4MzVjZjA2ZjgzYTVhNzI2ODVkYzAyMDMzYzQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T16:39:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-16T16:40:11Z"
      },
      "message": "Merge #12402: [depends] expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203\n\n25409b1 fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS (fanquake)\n3335d45 [depends] latest config.guess and config.sub (fanquake)\n41550d6 [depends] miniupnpc 2.0.20180203 (fanquake)\n61647a4 [depends] ccache 3.4.1 (fanquake)\n5a10859 [depends] expat 2.2.5 (fanquake)\n\nPull request description:\n\n  miniupnpc changelog: http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20180203.tar.gz\n  2.0.20180203 includes fixes for the recent buffer overflow and segfault issues, see https://github.com/miniupnp/miniupnp/issues/268.\n\n  expat changelog: https://github.com/libexpat/libexpat/blob/R_2_2_5/expat/Changes\n  2.2.2 & 2.2.3 included security fixes.\n\n  ccache changelog: https://ccache.samba.org/releasenotes.html#_ccache_3_4_1\n\n  Also includes latest config.guess and config.sub.\n\nTree-SHA512: 5115b6ccf2bc50c62fd16ab2350bdc752eef7db8b1e4fbe35998fe1aac3702baa6c7f5e471ec48f7c614278df20a68ee6a254dde7c3e2d5c6ce2d10257a5aa21",
      "tree": {
        "sha": "6fd224f7ab8e965fcb98a87dbf98307c644c058e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fd224f7ab8e965fcb98a87dbf98307c644c058e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJahwlrAAoJEB5K7WKYbNJdU60H/3vGa6YhL5ihXVtCpjYCClWu\ni9UamD9Yo+GElQl02boqi6yvh1fPazO/po4A+uPm2JcCzmi3+rN+E/KE1LgPLQPM\n5JO3TOyAwy9F1Iu+NAwBDW25yQW72IxELx+hVnKnpUkqYBZTGY+oQ6ZlcELRv3aq\n//EsyJGFUXvby9BdNlqJw+hmT86xBcxkTewOKd0D4iHQNvVXjRBGeE/ud77exeze\n7dcOPWXWKVUZRapSg2T2MocFthJc14WhHxubZVFQ+5JsIGemAKzUae0IhEedKj1k\nCLdFpZC2qLJL+8vh9MPI+g/KREL9BkvsVT0tf9A4QeP+78FGEc2CCkTFkFHt7UY=\n=OvHz\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fd224f7ab8e965fcb98a87dbf98307c644c058e\nparent 4a62ddd01873d18dbca96c81d756be1020249b45\nparent 25409b16fd593f45168e839fe21ed0f642908e11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1518799155 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1518799211 +0100\n\nMerge #12402: [depends] expat 2.2.5, ccache 3.4.1, miniupnpc 2.0.20180203\n\n25409b1 fixme: depends: Add D_DARWIN_C_SOURCE to miniupnpc CFLAGS (fanquake)\n3335d45 [depends] latest config.guess and config.sub (fanquake)\n41550d6 [depends] miniupnpc 2.0.20180203 (fanquake)\n61647a4 [depends] ccache 3.4.1 (fanquake)\n5a10859 [depends] expat 2.2.5 (fanquake)\n\nPull request description:\n\n  miniupnpc changelog: http://miniupnp.free.fr/files/changelog.php?file=miniupnpc-2.0.20180203.tar.gz\n  2.0.20180203 includes fixes for the recent buffer overflow and segfault issues, see https://github.com/miniupnp/miniupnp/issues/268.\n\n  expat changelog: https://github.com/libexpat/libexpat/blob/R_2_2_5/expat/Changes\n  2.2.2 & 2.2.3 included security fixes.\n\n  ccache changelog: https://ccache.samba.org/releasenotes.html#_ccache_3_4_1\n\n  Also includes latest config.guess and config.sub.\n\nTree-SHA512: 5115b6ccf2bc50c62fd16ab2350bdc752eef7db8b1e4fbe35998fe1aac3702baa6c7f5e471ec48f7c614278df20a68ee6a254dde7c3e2d5c6ce2d10257a5aa21\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45"
      },
      {
        "sha": "25409b16fd593f45168e839fe21ed0f642908e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25409b16fd593f45168e839fe21ed0f642908e11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25409b16fd593f45168e839fe21ed0f642908e11"
      }
    ],
    "stats": {
      "total": 843,
      "additions": 409,
      "deletions": 434
    },
    "files": [
      {
        "sha": "9baaa270bfc7f08d6c6eb85b84f9742318a58d84",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 293,
        "deletions": 283,
        "changes": 576,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Attempt to guess a canonical system name.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-03-05'\n+timestamp='2018-01-26'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-03-05'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -27,7 +27,7 @@ timestamp='2017-03-05'\n # Originally written by Per Bothner; maintained since 2000 by Ben Elliston.\n #\n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n #\n # Please send patches to <config-patches@gnu.org>.\n \n@@ -39,7 +39,7 @@ Usage: $0 [OPTION]\n \n Output the configuration name of the system \\`$me' is run on.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -50,7 +50,7 @@ version=\"\\\n GNU config.guess ($timestamp)\n \n Originally written by Per Bothner.\n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -107,9 +107,9 @@ trap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n dummy=$tmp/dummy ;\n tmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\n case $CC_FOR_BUILD,$HOST_CC,$CC in\n- ,,)    echo \"int x;\" > $dummy.c ;\n+ ,,)    echo \"int x;\" > \"$dummy.c\" ;\n \tfor c in cc gcc c89 c99 ; do\n-\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n+\t  if ($c -c -o \"$dummy.o\" \"$dummy.c\") >/dev/null 2>&1 ; then\n \t     CC_FOR_BUILD=\"$c\"; break ;\n \t  fi ;\n \tdone ;\n@@ -132,14 +132,14 @@ UNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\n UNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\n UNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n \n-case \"${UNAME_SYSTEM}\" in\n+case \"$UNAME_SYSTEM\" in\n Linux|GNU|GNU/*)\n \t# If the system lacks a compiler, then just pick glibc.\n \t# We could probably try harder.\n \tLIBC=gnu\n \n-\teval $set_cc_for_build\n-\tcat <<-EOF > $dummy.c\n+\teval \"$set_cc_for_build\"\n+\tcat <<-EOF > \"$dummy.c\"\n \t#include <features.h>\n \t#if defined(__UCLIBC__)\n \tLIBC=uclibc\n@@ -149,13 +149,20 @@ Linux|GNU|GNU/*)\n \tLIBC=gnu\n \t#endif\n \tEOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\"\n+\n+\t# If ldd exists, use it to detect musl libc.\n+\tif command -v ldd >/dev/null && \\\n+\t\tldd --version 2>&1 | grep -q ^musl\n+\tthen\n+\t    LIBC=musl\n+\tfi\n \t;;\n esac\n \n # Note: order is significant - the case branches are not exclusive.\n \n-case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM:$UNAME_RELEASE:$UNAME_VERSION\" in\n     *:NetBSD:*:*)\n \t# NetBSD (nbsd) targets should (where applicable) match one or\n \t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n@@ -169,30 +176,30 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# portion of the name.  We always set it to \"unknown\".\n \tsysctl=\"sysctl -n hw.machine_arch\"\n \tUNAME_MACHINE_ARCH=`(uname -p 2>/dev/null || \\\n-\t    /sbin/$sysctl 2>/dev/null || \\\n-\t    /usr/sbin/$sysctl 2>/dev/null || \\\n+\t    \"/sbin/$sysctl\" 2>/dev/null || \\\n+\t    \"/usr/sbin/$sysctl\" 2>/dev/null || \\\n \t    echo unknown)`\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    armeb) machine=armeb-unknown ;;\n \t    arm*) machine=arm-unknown ;;\n \t    sh3el) machine=shl-unknown ;;\n \t    sh3eb) machine=sh-unknown ;;\n \t    sh5el) machine=sh5le-unknown ;;\n \t    earmv*)\n-\t\tarch=`echo ${UNAME_MACHINE_ARCH} | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n-\t\tendian=`echo ${UNAME_MACHINE_ARCH} | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n-\t\tmachine=${arch}${endian}-unknown\n+\t\tarch=`echo \"$UNAME_MACHINE_ARCH\" | sed -e 's,^e\\(armv[0-9]\\).*$,\\1,'`\n+\t\tendian=`echo \"$UNAME_MACHINE_ARCH\" | sed -ne 's,^.*\\(eb\\)$,\\1,p'`\n+\t\tmachine=\"${arch}${endian}\"-unknown\n \t\t;;\n-\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n+\t    *) machine=\"$UNAME_MACHINE_ARCH\"-unknown ;;\n \tesac\n \t# The Operating System including object format, if it has switched\n \t# to ELF recently (or will in the future) and ABI.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\tos=netbsdelf\n \t\t;;\n \t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n-\t\teval $set_cc_for_build\n+\t\teval \"$set_cc_for_build\"\n \t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t\t| grep -q __ELF__\n \t\tthen\n@@ -208,57 +215,66 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Determine ABI tags.\n-\tcase \"${UNAME_MACHINE_ARCH}\" in\n+\tcase \"$UNAME_MACHINE_ARCH\" in\n \t    earm*)\n \t\texpr='s/^earmv[0-9]/-eabi/;s/eb$//'\n-\t\tabi=`echo ${UNAME_MACHINE_ARCH} | sed -e \"$expr\"`\n+\t\tabi=`echo \"$UNAME_MACHINE_ARCH\" | sed -e \"$expr\"`\n \t\t;;\n \tesac\n \t# The OS release\n \t# Debian GNU/NetBSD machines have a different userland, and\n \t# thus, need a distinct triplet. However, they do not need\n \t# kernel version information, so it can be replaced with a\n \t# suitable tag, in the style of linux-gnu.\n-\tcase \"${UNAME_VERSION}\" in\n+\tcase \"$UNAME_VERSION\" in\n \t    Debian*)\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n+\t\trelease=`echo \"$UNAME_RELEASE\" | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n \t# contains redundant information, the shorter form:\n \t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n-\techo \"${machine}-${os}${release}${abi}\"\n+\techo \"$machine-${os}${release}${abi}\"\n \texit ;;\n     *:Bitrig:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-bitrig\"$UNAME_RELEASE\"\n \texit ;;\n     *:OpenBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-openbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:LibertyBSD:*:*)\n \tUNAME_MACHINE_ARCH=`arch | sed 's/^.*BSD\\.//'`\n-\techo ${UNAME_MACHINE_ARCH}-unknown-libertybsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE_ARCH\"-unknown-libertybsd\"$UNAME_RELEASE\"\n+\texit ;;\n+    *:MidnightBSD:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-midnightbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:ekkoBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-ekkobsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:SolidBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-solidbsd\"$UNAME_RELEASE\"\n \texit ;;\n     macppc:MirBSD:*:*)\n-\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n+\techo powerpc-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:MirBSD:*:*)\n-\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-mirbsd\"$UNAME_RELEASE\"\n \texit ;;\n     *:Sortix:*:*)\n-\techo ${UNAME_MACHINE}-unknown-sortix\n+\techo \"$UNAME_MACHINE\"-unknown-sortix\n+\texit ;;\n+    *:Redox:*:*)\n+\techo \"$UNAME_MACHINE\"-unknown-redox\n \texit ;;\n+    mips:OSF1:*.*)\n+        echo mips-dec-osf1\n+        exit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -310,28 +326,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t# A Tn.n version is a released field test version.\n \t# A Xn.n version is an unreleased experimental baselevel.\n \t# 1.2 uses \"1.2\" for uname -r.\n-\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n+\techo \"$UNAME_MACHINE\"-dec-osf\"`echo \"$UNAME_RELEASE\" | sed -e 's/^[PVTX]//' | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\"\n \t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n \texitcode=$?\n \ttrap '' 0\n \texit $exitcode ;;\n-    Alpha\\ *:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# Should we change UNAME_MACHINE based on the output of uname instead\n-\t# of the specific Alpha model?\n-\techo alpha-pc-interix\n-\texit ;;\n-    21064:Windows_NT:50:3)\n-\techo alpha-dec-winnt3.5\n-\texit ;;\n     Amiga*:UNIX_System_V:4.0:*)\n \techo m68k-unknown-sysv4\n \texit ;;\n     *:[Aa]miga[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-amigaos\n+\techo \"$UNAME_MACHINE\"-unknown-amigaos\n \texit ;;\n     *:[Mm]orph[Oo][Ss]:*:*)\n-\techo ${UNAME_MACHINE}-unknown-morphos\n+\techo \"$UNAME_MACHINE\"-unknown-morphos\n \texit ;;\n     *:OS/390:*:*)\n \techo i370-ibm-openedition\n@@ -343,7 +350,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \techo powerpc-ibm-os400\n \texit ;;\n     arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n-\techo arm-acorn-riscix${UNAME_RELEASE}\n+\techo arm-acorn-riscix\"$UNAME_RELEASE\"\n \texit ;;\n     arm*:riscos:*:*|arm*:RISCOS:*:*)\n \techo arm-unknown-riscos\n@@ -370,19 +377,19 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t    sparc) echo sparc-icl-nx7; exit ;;\n \tesac ;;\n     s390x:SunOS:*:*)\n-\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$UNAME_MACHINE\"-ibm-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4H:SunOS:5.*:*)\n-\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-hal-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n-\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris2\"`echo \"$UNAME_RELEASE\" | sed -e 's/[^.]*//'`\"\n \texit ;;\n     i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n-\techo i386-pc-auroraux${UNAME_RELEASE}\n+\techo i386-pc-auroraux\"$UNAME_RELEASE\"\n \texit ;;\n     i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tSUN_ARCH=i386\n \t# If there is a compiler, see if it is configured for 64-bit objects.\n \t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n@@ -395,13 +402,13 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\tSUN_ARCH=x86_64\n \t    fi\n \tfi\n-\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo \"$SUN_ARCH\"-pc-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:6*:*)\n \t# According to config.sub, this is the proper way to canonicalize\n \t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n \t# it's likely to be more like Solaris than SunOS4.\n-\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo sparc-sun-solaris3\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     sun4*:SunOS:*:*)\n \tcase \"`/usr/bin/arch -k`\" in\n@@ -410,25 +417,25 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\t;;\n \tesac\n \t# Japanese Language versions have a version number like `4.1.3-JL'.\n-\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n+\techo sparc-sun-sunos\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/'`\"\n \texit ;;\n     sun3*:SunOS:*:*)\n-\techo m68k-sun-sunos${UNAME_RELEASE}\n+\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     sun*:*:4.2BSD:*)\n \tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n-\ttest \"x${UNAME_RELEASE}\" = x && UNAME_RELEASE=3\n+\ttest \"x$UNAME_RELEASE\" = x && UNAME_RELEASE=3\n \tcase \"`/bin/arch`\" in\n \t    sun3)\n-\t\techo m68k-sun-sunos${UNAME_RELEASE}\n+\t\techo m68k-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \t    sun4)\n-\t\techo sparc-sun-sunos${UNAME_RELEASE}\n+\t\techo sparc-sun-sunos\"$UNAME_RELEASE\"\n \t\t;;\n \tesac\n \texit ;;\n     aushp:SunOS:*:*)\n-\techo sparc-auspex-sunos${UNAME_RELEASE}\n+\techo sparc-auspex-sunos\"$UNAME_RELEASE\"\n \texit ;;\n     # The situation for MiNT is a little confusing.  The machine name\n     # can be virtually everything (everything which is not\n@@ -439,44 +446,44 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     # MiNT.  But MiNT is downward compatible to TOS, so this should\n     # be no problem.\n     atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n-\techo m68k-atari-mint${UNAME_RELEASE}\n+\techo m68k-atari-mint\"$UNAME_RELEASE\"\n \texit ;;\n     milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n-\techo m68k-milan-mint${UNAME_RELEASE}\n+\techo m68k-milan-mint\"$UNAME_RELEASE\"\n \texit ;;\n     hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n-\techo m68k-hades-mint${UNAME_RELEASE}\n+\techo m68k-hades-mint\"$UNAME_RELEASE\"\n \texit ;;\n     *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n-\techo m68k-unknown-mint${UNAME_RELEASE}\n+\techo m68k-unknown-mint\"$UNAME_RELEASE\"\n \texit ;;\n     m68k:machten:*:*)\n-\techo m68k-apple-machten${UNAME_RELEASE}\n+\techo m68k-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     powerpc:machten:*:*)\n-\techo powerpc-apple-machten${UNAME_RELEASE}\n+\techo powerpc-apple-machten\"$UNAME_RELEASE\"\n \texit ;;\n     RISC*:Mach:*:*)\n \techo mips-dec-mach_bsd4.3\n \texit ;;\n     RISC*:ULTRIX:*:*)\n-\techo mips-dec-ultrix${UNAME_RELEASE}\n+\techo mips-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     VAX*:ULTRIX*:*:*)\n-\techo vax-dec-ultrix${UNAME_RELEASE}\n+\techo vax-dec-ultrix\"$UNAME_RELEASE\"\n \texit ;;\n     2020:CLIX:*:* | 2430:CLIX:*:*)\n-\techo clipper-intergraph-clix${UNAME_RELEASE}\n+\techo clipper-intergraph-clix\"$UNAME_RELEASE\"\n \texit ;;\n     mips:*:*:UMIPS | mips:*:*:RISCos)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n #ifdef __cplusplus\n #include <stdio.h>  /* for printf() prototype */\n \tint main (int argc, char *argv[]) {\n@@ -485,23 +492,23 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n #endif\n \t#if defined (host_mips) && defined (MIPSEB)\n \t#if defined (SYSTYPE_SYSV)\n-\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssysv\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_SVR4)\n-\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%ssvr4\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n-\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n+\t  printf (\"mips-mips-riscos%sbsd\\\\n\", argv[1]); exit (0);\n \t#endif\n \t#endif\n \t  exit (-1);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n-\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n-\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" &&\n+\t  dummyarg=`echo \"$UNAME_RELEASE\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n+\t  SYSTEM_NAME=`\"$dummy\" \"$dummyarg\"` &&\n \t    { echo \"$SYSTEM_NAME\"; exit; }\n-\techo mips-mips-riscos${UNAME_RELEASE}\n+\techo mips-mips-riscos\"$UNAME_RELEASE\"\n \texit ;;\n     Motorola:PowerMAX_OS:*:*)\n \techo powerpc-motorola-powermax\n@@ -527,17 +534,17 @@ EOF\n     AViiON:dgux:*:*)\n \t# DG/UX returns AViiON for all architectures\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n+\tif [ \"$UNAME_PROCESSOR\" = mc88100 ] || [ \"$UNAME_PROCESSOR\" = mc88110 ]\n \tthen\n-\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n-\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n+\t    if [ \"$TARGET_BINARY_INTERFACE\"x = m88kdguxelfx ] || \\\n+\t       [ \"$TARGET_BINARY_INTERFACE\"x = x ]\n \t    then\n-\t\techo m88k-dg-dgux${UNAME_RELEASE}\n+\t\techo m88k-dg-dgux\"$UNAME_RELEASE\"\n \t    else\n-\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n+\t\techo m88k-dg-dguxbcs\"$UNAME_RELEASE\"\n \t    fi\n \telse\n-\t    echo i586-dg-dgux${UNAME_RELEASE}\n+\t    echo i586-dg-dgux\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n@@ -554,7 +561,7 @@ EOF\n \techo m68k-tektronix-bsd\n \texit ;;\n     *:IRIX*:*:*)\n-\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n+\techo mips-sgi-irix\"`echo \"$UNAME_RELEASE\"|sed -e 's/-/_/g'`\"\n \texit ;;\n     ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n \techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n@@ -566,14 +573,14 @@ EOF\n \tif [ -x /usr/bin/oslevel ] ; then\n \t\tIBM_REV=`/usr/bin/oslevel`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n+\techo \"$UNAME_MACHINE\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:2:3)\n \tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n-\t\teval $set_cc_for_build\n-\t\tsed 's/^\t\t//' << EOF >$dummy.c\n+\t\teval \"$set_cc_for_build\"\n+\t\tsed 's/^\t\t//' << EOF > \"$dummy.c\"\n \t\t#include <sys/systemcfg.h>\n \n \t\tmain()\n@@ -584,7 +591,7 @@ EOF\n \t\t\texit(0);\n \t\t\t}\n EOF\n-\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n+\t\tif $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"`\n \t\tthen\n \t\t\techo \"$SYSTEM_NAME\"\n \t\telse\n@@ -598,7 +605,7 @@ EOF\n \texit ;;\n     *:AIX:*:[4567])\n \tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n-\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n+\tif /usr/sbin/lsattr -El \"$IBM_CPU_ID\" | grep ' POWER' >/dev/null 2>&1; then\n \t\tIBM_ARCH=rs6000\n \telse\n \t\tIBM_ARCH=powerpc\n@@ -607,18 +614,18 @@ EOF\n \t\tIBM_REV=`/usr/bin/lslpp -Lqc bos.rte.libc |\n \t\t\t   awk -F: '{ print $3 }' | sed s/[0-9]*$/0/`\n \telse\n-\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n+\t\tIBM_REV=\"$UNAME_VERSION.$UNAME_RELEASE\"\n \tfi\n-\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n+\techo \"$IBM_ARCH\"-ibm-aix\"$IBM_REV\"\n \texit ;;\n     *:AIX:*:*)\n \techo rs6000-ibm-aix\n \texit ;;\n-    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n+    ibmrt:4.4BSD:*|romp-ibm:4.4BSD:*)\n \techo romp-ibm-bsd4.4\n \texit ;;\n     ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n-\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n+\techo romp-ibm-bsd\"$UNAME_RELEASE\"   # 4.3 with uname added to\n \texit ;;                             # report: romp-ibm BSD 4.3\n     *:BOSX:*:*)\n \techo rs6000-bull-bosx\n@@ -633,28 +640,28 @@ EOF\n \techo m68k-hp-bsd4.4\n \texit ;;\n     9000/[34678]??:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\tcase \"${UNAME_MACHINE}\" in\n-\t    9000/31? )            HP_ARCH=m68000 ;;\n-\t    9000/[34]?? )         HP_ARCH=m68k ;;\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\tcase \"$UNAME_MACHINE\" in\n+\t    9000/31?)            HP_ARCH=m68000 ;;\n+\t    9000/[34]??)         HP_ARCH=m68k ;;\n \t    9000/[678][0-9][0-9])\n \t\tif [ -x /usr/bin/getconf ]; then\n \t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n \t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n-\t\t    case \"${sc_cpu_version}\" in\n+\t\t    case \"$sc_cpu_version\" in\n \t\t      523) HP_ARCH=hppa1.0 ;; # CPU_PA_RISC1_0\n \t\t      528) HP_ARCH=hppa1.1 ;; # CPU_PA_RISC1_1\n \t\t      532)                      # CPU_PA_RISC2_0\n-\t\t\tcase \"${sc_kernel_bits}\" in\n+\t\t\tcase \"$sc_kernel_bits\" in\n \t\t\t  32) HP_ARCH=hppa2.0n ;;\n \t\t\t  64) HP_ARCH=hppa2.0w ;;\n \t\t\t  '') HP_ARCH=hppa2.0 ;;   # HP-UX 10.20\n \t\t\tesac ;;\n \t\t    esac\n \t\tfi\n-\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n-\t\t    eval $set_cc_for_build\n-\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n+\t\tif [ \"$HP_ARCH\" = \"\" ]; then\n+\t\t    eval \"$set_cc_for_build\"\n+\t\t    sed 's/^\t\t//' << EOF > \"$dummy.c\"\n \n \t\t#define _HPUX_SOURCE\n \t\t#include <stdlib.h>\n@@ -687,13 +694,13 @@ EOF\n \t\t    exit (0);\n \t\t}\n EOF\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n+\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" 2>/dev/null) && HP_ARCH=`\"$dummy\"`\n \t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n \t\tfi ;;\n \tesac\n-\tif [ ${HP_ARCH} = hppa2.0w ]\n+\tif [ \"$HP_ARCH\" = hppa2.0w ]\n \tthen\n-\t    eval $set_cc_for_build\n+\t    eval \"$set_cc_for_build\"\n \n \t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n \t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n@@ -712,15 +719,15 @@ EOF\n \t\tHP_ARCH=hppa64\n \t    fi\n \tfi\n-\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n+\techo \"$HP_ARCH\"-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     ia64:HP-UX:*:*)\n-\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n-\techo ia64-hp-hpux${HPUX_REV}\n+\tHPUX_REV=`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*.[0B]*//'`\n+\techo ia64-hp-hpux\"$HPUX_REV\"\n \texit ;;\n     3050*:HI-UX:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#include <unistd.h>\n \tint\n \tmain ()\n@@ -745,11 +752,11 @@ EOF\n \t  exit (0);\n \t}\n EOF\n-\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n+\t$CC_FOR_BUILD -o \"$dummy\" \"$dummy.c\" && SYSTEM_NAME=`\"$dummy\"` &&\n \t\t{ echo \"$SYSTEM_NAME\"; exit; }\n \techo unknown-hitachi-hiuxwe2\n \texit ;;\n-    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n+    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:*)\n \techo hppa1.1-hp-bsd\n \texit ;;\n     9000/8??:4.3bsd:*:*)\n@@ -758,17 +765,17 @@ EOF\n     *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n \techo hppa1.0-hp-mpeix\n \texit ;;\n-    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n+    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:*)\n \techo hppa1.1-hp-osf\n \texit ;;\n     hp8??:OSF1:*:*)\n \techo hppa1.0-hp-osf\n \texit ;;\n     i*86:OSF1:*:*)\n \tif [ -x /usr/sbin/sysversion ] ; then\n-\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1mk\n \telse\n-\t    echo ${UNAME_MACHINE}-unknown-osf1\n+\t    echo \"$UNAME_MACHINE\"-unknown-osf1\n \tfi\n \texit ;;\n     parisc*:Lites*:*:*)\n@@ -793,128 +800,109 @@ EOF\n \techo c4-convex-bsd\n \texit ;;\n     CRAY*Y-MP:*:*:*)\n-\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo ymp-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*[A-Z]90:*:*:*)\n-\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n+\techo \"$UNAME_MACHINE\"-cray-unicos\"$UNAME_RELEASE\" \\\n \t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n \t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n \t      -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*TS:*:*:*)\n-\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo t90-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*T3E:*:*:*)\n-\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo alphaev5-cray-unicosmk\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     CRAY*SV1:*:*:*)\n-\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo sv1-cray-unicos\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     *:UNICOS/mp:*:*)\n-\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n+\techo craynv-cray-unicosmp\"$UNAME_RELEASE\" | sed -e 's/\\.[^.]*$/.X/'\n \texit ;;\n     F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n \tFUJITSU_PROC=`uname -m | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz`\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | sed -e 's/ /_/'`\n \techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     5000:UNIX_System_V:4.*:*)\n \tFUJITSU_SYS=`uname -p | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/\\///'`\n-\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n+\tFUJITSU_REL=`echo \"$UNAME_RELEASE\" | tr ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz | sed -e 's/ /_/'`\n \techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n \texit ;;\n     i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n-\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-pc-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     sparc*:BSD/OS:*:*)\n-\techo sparc-unknown-bsdi${UNAME_RELEASE}\n+\techo sparc-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:BSD/OS:*:*)\n-\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-unknown-bsdi\"$UNAME_RELEASE\"\n \texit ;;\n     *:FreeBSD:*:*)\n \tUNAME_PROCESSOR=`/usr/bin/uname -p`\n-\tcase ${UNAME_PROCESSOR} in\n+\tcase \"$UNAME_PROCESSOR\" in\n \t    amd64)\n \t\tUNAME_PROCESSOR=x86_64 ;;\n \t    i386)\n \t\tUNAME_PROCESSOR=i586 ;;\n \tesac\n-\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_PROCESSOR\"-unknown-freebsd\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     i*:CYGWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-cygwin\n+\techo \"$UNAME_MACHINE\"-pc-cygwin\n \texit ;;\n     *:MINGW64*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw64\n+\techo \"$UNAME_MACHINE\"-pc-mingw64\n \texit ;;\n     *:MINGW*:*)\n-\techo ${UNAME_MACHINE}-pc-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-mingw32\n \texit ;;\n     *:MSYS*:*)\n-\techo ${UNAME_MACHINE}-pc-msys\n-\texit ;;\n-    i*:windows32*:*)\n-\t# uname -m includes \"-pc\" on this system.\n-\techo ${UNAME_MACHINE}-mingw32\n+\techo \"$UNAME_MACHINE\"-pc-msys\n \texit ;;\n     i*:PW*:*)\n-\techo ${UNAME_MACHINE}-pc-pw32\n+\techo \"$UNAME_MACHINE\"-pc-pw32\n \texit ;;\n     *:Interix*:*)\n-\tcase ${UNAME_MACHINE} in\n+\tcase \"$UNAME_MACHINE\" in\n \t    x86)\n-\t\techo i586-pc-interix${UNAME_RELEASE}\n+\t\techo i586-pc-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    authenticamd | genuineintel | EM64T)\n-\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n+\t\techo x86_64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \t    IA64)\n-\t\techo ia64-unknown-interix${UNAME_RELEASE}\n+\t\techo ia64-unknown-interix\"$UNAME_RELEASE\"\n \t\texit ;;\n \tesac ;;\n-    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n-\techo i${UNAME_MACHINE}-pc-mks\n-\texit ;;\n-    8664:Windows_NT:*)\n-\techo x86_64-pc-mks\n-\texit ;;\n-    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n-\t# How do we know it's Interix rather than the generic POSIX subsystem?\n-\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n-\t# UNAME_MACHINE based on the output of uname instead of i386?\n-\techo i586-pc-interix\n-\texit ;;\n     i*:UWIN*:*)\n-\techo ${UNAME_MACHINE}-pc-uwin\n+\techo \"$UNAME_MACHINE\"-pc-uwin\n \texit ;;\n     amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n \techo x86_64-unknown-cygwin\n \texit ;;\n-    p*:CYGWIN*:*)\n-\techo powerpcle-unknown-cygwin\n-\texit ;;\n     prep*:SunOS:5.*:*)\n-\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n+\techo powerpcle-unknown-solaris2\"`echo \"$UNAME_RELEASE\"|sed -e 's/[^.]*//'`\"\n \texit ;;\n     *:GNU:*:*)\n \t# the GNU system\n-\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n+\techo \"`echo \"$UNAME_MACHINE\"|sed -e 's,[-/].*$,,'`-unknown-$LIBC`echo \"$UNAME_RELEASE\"|sed -e 's,/.*$,,'`\"\n \texit ;;\n     *:GNU/*:*:*)\n \t# other systems with GNU libc and userland\n-\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n+\techo \"$UNAME_MACHINE-unknown-`echo \"$UNAME_SYSTEM\" | sed 's,^[^/]*/,,' | tr \"[:upper:]\" \"[:lower:]\"``echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`-$LIBC\"\n \texit ;;\n     i*86:Minix:*:*)\n-\techo ${UNAME_MACHINE}-pc-minix\n+\techo \"$UNAME_MACHINE\"-pc-minix\n \texit ;;\n     aarch64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     aarch64_be:Linux:*:*)\n \tUNAME_MACHINE=aarch64_be\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     alpha:Linux:*:*)\n \tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n@@ -928,63 +916,63 @@ EOF\n \tesac\n \tobjdump --private-headers /bin/sh | grep -q ld.so.1\n \tif test \"$?\" = 0 ; then LIBC=gnulibc1 ; fi\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arc:Linux:*:* | arceb:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     arm*:Linux:*:*)\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t    | grep -q __ARM_EABI__\n \tthen\n-\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\t    echo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \telse\n \t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n \t\t| grep -q __ARM_PCS_VFP\n \t    then\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabi\n \t    else\n-\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n+\t\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"eabihf\n \t    fi\n \tfi\n \texit ;;\n     avr32*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     cris:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     crisv32:Linux:*:*)\n-\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-axis-linux-\"$LIBC\"\n \texit ;;\n     e2k:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     frv:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     hexagon:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     ia64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     k1om:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m32r*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     m68*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     mips:Linux:*:* | mips64:Linux:*:*)\n-\teval $set_cc_for_build\n-\tsed 's/^\t//' << EOF >$dummy.c\n+\teval \"$set_cc_for_build\"\n+\tsed 's/^\t//' << EOF > \"$dummy.c\"\n \t#undef CPU\n \t#undef ${UNAME_MACHINE}\n \t#undef ${UNAME_MACHINE}el\n@@ -998,70 +986,70 @@ EOF\n \t#endif\n \t#endif\n EOF\n-\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n-\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n+\teval \"`$CC_FOR_BUILD -E \"$dummy.c\" 2>/dev/null | grep '^CPU'`\"\n+\ttest \"x$CPU\" != x && { echo \"$CPU-unknown-linux-$LIBC\"; exit; }\n \t;;\n     mips64el:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     openrisc*:Linux:*:*)\n-\techo or1k-unknown-linux-${LIBC}\n+\techo or1k-unknown-linux-\"$LIBC\"\n \texit ;;\n     or32:Linux:*:* | or1k*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     padre:Linux:*:*)\n-\techo sparc-unknown-linux-${LIBC}\n+\techo sparc-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc64:Linux:*:* | hppa64:Linux:*:*)\n-\techo hppa64-unknown-linux-${LIBC}\n+\techo hppa64-unknown-linux-\"$LIBC\"\n \texit ;;\n     parisc:Linux:*:* | hppa:Linux:*:*)\n \t# Look for CPU level\n \tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n-\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n-\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n-\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n+\t  PA7*) echo hppa1.1-unknown-linux-\"$LIBC\" ;;\n+\t  PA8*) echo hppa2.0-unknown-linux-\"$LIBC\" ;;\n+\t  *)    echo hppa-unknown-linux-\"$LIBC\" ;;\n \tesac\n \texit ;;\n     ppc64:Linux:*:*)\n-\techo powerpc64-unknown-linux-${LIBC}\n+\techo powerpc64-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc:Linux:*:*)\n-\techo powerpc-unknown-linux-${LIBC}\n+\techo powerpc-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppc64le:Linux:*:*)\n-\techo powerpc64le-unknown-linux-${LIBC}\n+\techo powerpc64le-unknown-linux-\"$LIBC\"\n \texit ;;\n     ppcle:Linux:*:*)\n-\techo powerpcle-unknown-linux-${LIBC}\n+\techo powerpcle-unknown-linux-\"$LIBC\"\n \texit ;;\n     riscv32:Linux:*:* | riscv64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     s390:Linux:*:* | s390x:Linux:*:*)\n-\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-ibm-linux-\"$LIBC\"\n \texit ;;\n     sh64*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sh*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     sparc:Linux:*:* | sparc64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     tile*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     vax:Linux:*:*)\n-\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-dec-linux-\"$LIBC\"\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-pc-linux-\"$LIBC\"\n \texit ;;\n     xtensa*:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo \"$UNAME_MACHINE\"-unknown-linux-\"$LIBC\"\n \texit ;;\n     i*86:DYNIX/ptx:4*:*)\n \t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n@@ -1075,34 +1063,34 @@ EOF\n \t# I am not positive that other SVR4 systems won't match this,\n \t# I just have to hope.  -- rms.\n \t# Use sysv4.2uw... so that sysv4* matches it.\n-\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE\"-pc-sysv4.2uw\"$UNAME_VERSION\"\n \texit ;;\n     i*86:OS/2:*:*)\n \t# If we were able to find `uname', then EMX Unix compatibility\n \t# is probably installed.\n-\techo ${UNAME_MACHINE}-pc-os2-emx\n+\techo \"$UNAME_MACHINE\"-pc-os2-emx\n \texit ;;\n     i*86:XTS-300:*:STOP)\n-\techo ${UNAME_MACHINE}-unknown-stop\n+\techo \"$UNAME_MACHINE\"-unknown-stop\n \texit ;;\n     i*86:atheos:*:*)\n-\techo ${UNAME_MACHINE}-unknown-atheos\n+\techo \"$UNAME_MACHINE\"-unknown-atheos\n \texit ;;\n     i*86:syllable:*:*)\n-\techo ${UNAME_MACHINE}-pc-syllable\n+\techo \"$UNAME_MACHINE\"-pc-syllable\n \texit ;;\n     i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n-\techo i386-unknown-lynxos${UNAME_RELEASE}\n+\techo i386-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     i*86:*DOS:*:*)\n-\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n+\techo \"$UNAME_MACHINE\"-pc-msdosdjgpp\n \texit ;;\n-    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n-\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n+    i*86:*:4.*:*)\n+\tUNAME_REL=`echo \"$UNAME_RELEASE\" | sed 's/\\/MP$//'`\n \tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n-\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-univel-sysv\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv\"$UNAME_REL\"\n \tfi\n \texit ;;\n     i*86:*:5:[678]*)\n@@ -1112,12 +1100,12 @@ EOF\n \t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n \t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n \tesac\n-\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n+\techo \"$UNAME_MACHINE-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}{$UNAME_VERSION}\"\n \texit ;;\n     i*86:*:3.2:*)\n \tif test -f /usr/options/cb.name; then\n \t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n-\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-isc\"$UNAME_REL\"\n \telif /bin/uname -X 2>/dev/null >/dev/null ; then\n \t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n \t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n@@ -1127,9 +1115,9 @@ EOF\n \t\t\t&& UNAME_MACHINE=i686\n \t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n \t\t\t&& UNAME_MACHINE=i686\n-\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n+\t\techo \"$UNAME_MACHINE\"-pc-sco\"$UNAME_REL\"\n \telse\n-\t\techo ${UNAME_MACHINE}-pc-sysv32\n+\t\techo \"$UNAME_MACHINE\"-pc-sysv32\n \tfi\n \texit ;;\n     pc:*:*:*)\n@@ -1149,9 +1137,9 @@ EOF\n \texit ;;\n     i860:*:4.*:*) # i860-SVR4\n \tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n-\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n+\t  echo i860-stardent-sysv\"$UNAME_RELEASE\" # Stardent Vistra i860-SVR4\n \telse # Add other i860-SVR4 vendors below as they are discovered.\n-\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n+\t  echo i860-unknown-sysv\"$UNAME_RELEASE\"  # Unknown i860-SVR4\n \tfi\n \texit ;;\n     mini*:CTIX:SYS*5:*)\n@@ -1171,9 +1159,9 @@ EOF\n \ttest -r /etc/.relid \\\n \t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t  && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t  && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n \t  && { echo i486-ncr-sysv4; exit; } ;;\n@@ -1182,28 +1170,28 @@ EOF\n \ttest -r /etc/.relid \\\n \t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n \t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n-\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i486-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; }\n \t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n-\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n+\t    && { echo i586-ncr-sysv4.3\"$OS_REL\"; exit; } ;;\n     m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n-\techo m68k-unknown-lynxos${UNAME_RELEASE}\n+\techo m68k-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     mc68030:UNIX_System_V:4.*:*)\n \techo m68k-atari-sysv4\n \texit ;;\n     TSUNAMI:LynxOS:2.*:*)\n-\techo sparc-unknown-lynxos${UNAME_RELEASE}\n+\techo sparc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     rs6000:LynxOS:2.*:*)\n-\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n+\techo rs6000-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n-\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n+\techo powerpc-unknown-lynxos\"$UNAME_RELEASE\"\n \texit ;;\n     SM[BE]S:UNIX_SV:*:*)\n-\techo mips-dde-sysv${UNAME_RELEASE}\n+\techo mips-dde-sysv\"$UNAME_RELEASE\"\n \texit ;;\n     RM*:ReliantUNIX-*:*:*)\n \techo mips-sni-sysv4\n@@ -1214,7 +1202,7 @@ EOF\n     *:SINIX-*:*:*)\n \tif uname -p 2>/dev/null >/dev/null ; then\n \t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\t\techo ${UNAME_MACHINE}-sni-sysv4\n+\t\techo \"$UNAME_MACHINE\"-sni-sysv4\n \telse\n \t\techo ns32k-sni-sysv\n \tfi\n@@ -1234,23 +1222,23 @@ EOF\n \texit ;;\n     i*86:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n-\techo ${UNAME_MACHINE}-stratus-vos\n+\techo \"$UNAME_MACHINE\"-stratus-vos\n \texit ;;\n     *:VOS:*:*)\n \t# From Paul.Green@stratus.com.\n \techo hppa1.1-stratus-vos\n \texit ;;\n     mc68*:A/UX:*:*)\n-\techo m68k-apple-aux${UNAME_RELEASE}\n+\techo m68k-apple-aux\"$UNAME_RELEASE\"\n \texit ;;\n     news*:NEWS-OS:6*:*)\n \techo mips-sony-newsos6\n \texit ;;\n     R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n \tif [ -d /usr/nec ]; then\n-\t\techo mips-nec-sysv${UNAME_RELEASE}\n+\t\techo mips-nec-sysv\"$UNAME_RELEASE\"\n \telse\n-\t\techo mips-unknown-sysv${UNAME_RELEASE}\n+\t\techo mips-unknown-sysv\"$UNAME_RELEASE\"\n \tfi\n \texit ;;\n     BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n@@ -1269,49 +1257,56 @@ EOF\n \techo x86_64-unknown-haiku\n \texit ;;\n     SX-4:SUPER-UX:*:*)\n-\techo sx4-nec-superux${UNAME_RELEASE}\n+\techo sx4-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-5:SUPER-UX:*:*)\n-\techo sx5-nec-superux${UNAME_RELEASE}\n+\techo sx5-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-6:SUPER-UX:*:*)\n-\techo sx6-nec-superux${UNAME_RELEASE}\n+\techo sx6-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-7:SUPER-UX:*:*)\n-\techo sx7-nec-superux${UNAME_RELEASE}\n+\techo sx7-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8:SUPER-UX:*:*)\n-\techo sx8-nec-superux${UNAME_RELEASE}\n+\techo sx8-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-8R:SUPER-UX:*:*)\n-\techo sx8r-nec-superux${UNAME_RELEASE}\n+\techo sx8r-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     SX-ACE:SUPER-UX:*:*)\n-\techo sxace-nec-superux${UNAME_RELEASE}\n+\techo sxace-nec-superux\"$UNAME_RELEASE\"\n \texit ;;\n     Power*:Rhapsody:*:*)\n-\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n+\techo powerpc-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Rhapsody:*:*)\n-\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-apple-rhapsody\"$UNAME_RELEASE\"\n \texit ;;\n     *:Darwin:*:*)\n \tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n-\teval $set_cc_for_build\n+\teval \"$set_cc_for_build\"\n \tif test \"$UNAME_PROCESSOR\" = unknown ; then\n \t    UNAME_PROCESSOR=powerpc\n \tfi\n-\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n+\tif test \"`echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'`\" -le 10 ; then\n \t    if [ \"$CC_FOR_BUILD\" != no_compiler_found ]; then\n \t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n-\t\t    (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n-\t\t    grep IS_64BIT_ARCH >/dev/null\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_64BIT_ARCH >/dev/null\n \t\tthen\n \t\t    case $UNAME_PROCESSOR in\n \t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n \t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n \t\t    esac\n \t\tfi\n+\t\t# On 10.4-10.6 one might compile for PowerPC via gcc -arch ppc\n+\t\tif (echo '#ifdef __POWERPC__'; echo IS_PPC; echo '#endif') | \\\n+\t\t       (CCOPTS=\"\" $CC_FOR_BUILD -E - 2>/dev/null) | \\\n+\t\t       grep IS_PPC >/dev/null\n+\t\tthen\n+\t\t    UNAME_PROCESSOR=powerpc\n+\t\tfi\n \t    fi\n \telif test \"$UNAME_PROCESSOR\" = i386 ; then\n \t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n@@ -1322,30 +1317,33 @@ EOF\n \t    # that Apple uses in portable devices.\n \t    UNAME_PROCESSOR=x86_64\n \tfi\n-\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-apple-darwin\"$UNAME_RELEASE\"\n \texit ;;\n     *:procnto*:*:* | *:QNX:[0123456789]*:*)\n \tUNAME_PROCESSOR=`uname -p`\n \tif test \"$UNAME_PROCESSOR\" = x86; then\n \t\tUNAME_PROCESSOR=i386\n \t\tUNAME_MACHINE=pc\n \tfi\n-\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n+\techo \"$UNAME_PROCESSOR\"-\"$UNAME_MACHINE\"-nto-qnx\"$UNAME_RELEASE\"\n \texit ;;\n     *:QNX:*:4*)\n \techo i386-pc-qnx\n \texit ;;\n-    NEO-?:NONSTOP_KERNEL:*:*)\n-\techo neo-tandem-nsk${UNAME_RELEASE}\n+    NEO-*:NONSTOP_KERNEL:*:*)\n+\techo neo-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     NSE-*:NONSTOP_KERNEL:*:*)\n-\techo nse-tandem-nsk${UNAME_RELEASE}\n+\techo nse-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSR-?:NONSTOP_KERNEL:*:*)\n-\techo nsr-tandem-nsk${UNAME_RELEASE}\n+    NSR-*:NONSTOP_KERNEL:*:*)\n+\techo nsr-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n-    NSX-?:NONSTOP_KERNEL:*:*)\n-\techo nsx-tandem-nsk${UNAME_RELEASE}\n+    NSV-*:NONSTOP_KERNEL:*:*)\n+\techo nsv-tandem-nsk\"$UNAME_RELEASE\"\n+\texit ;;\n+    NSX-*:NONSTOP_KERNEL:*:*)\n+\techo nsx-tandem-nsk\"$UNAME_RELEASE\"\n \texit ;;\n     *:NonStop-UX:*:*)\n \techo mips-compaq-nonstopux\n@@ -1354,7 +1352,7 @@ EOF\n \techo bs2000-siemens-sysv\n \texit ;;\n     DS/*:UNIX_System_V:*:*)\n-\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n+\techo \"$UNAME_MACHINE\"-\"$UNAME_SYSTEM\"-\"$UNAME_RELEASE\"\n \texit ;;\n     *:Plan9:*:*)\n \t# \"uname -m\" is not consistent, so use $cputype instead. 386\n@@ -1365,7 +1363,7 @@ EOF\n \telse\n \t    UNAME_MACHINE=\"$cputype\"\n \tfi\n-\techo ${UNAME_MACHINE}-unknown-plan9\n+\techo \"$UNAME_MACHINE\"-unknown-plan9\n \texit ;;\n     *:TOPS-10:*:*)\n \techo pdp10-unknown-tops10\n@@ -1386,14 +1384,14 @@ EOF\n \techo pdp10-unknown-its\n \texit ;;\n     SEI:*:*:SEIUX)\n-\techo mips-sei-seiux${UNAME_RELEASE}\n+\techo mips-sei-seiux\"$UNAME_RELEASE\"\n \texit ;;\n     *:DragonFly:*:*)\n-\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n+\techo \"$UNAME_MACHINE\"-unknown-dragonfly\"`echo \"$UNAME_RELEASE\"|sed -e 's/[-(].*//'`\"\n \texit ;;\n     *:*VMS:*:*)\n \tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n-\tcase \"${UNAME_MACHINE}\" in\n+\tcase \"$UNAME_MACHINE\" in\n \t    A*) echo alpha-dec-vms ; exit ;;\n \t    I*) echo ia64-dec-vms ; exit ;;\n \t    V*) echo vax-dec-vms ; exit ;;\n@@ -1402,32 +1400,44 @@ EOF\n \techo i386-pc-xenix\n \texit ;;\n     i*86:skyos:*:*)\n-\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE} | sed -e 's/ .*$//'`\n+\techo \"$UNAME_MACHINE\"-pc-skyos\"`echo \"$UNAME_RELEASE\" | sed -e 's/ .*$//'`\"\n \texit ;;\n     i*86:rdos:*:*)\n-\techo ${UNAME_MACHINE}-pc-rdos\n+\techo \"$UNAME_MACHINE\"-pc-rdos\n \texit ;;\n     i*86:AROS:*:*)\n-\techo ${UNAME_MACHINE}-pc-aros\n+\techo \"$UNAME_MACHINE\"-pc-aros\n \texit ;;\n     x86_64:VMkernel:*:*)\n-\techo ${UNAME_MACHINE}-unknown-esx\n+\techo \"$UNAME_MACHINE\"-unknown-esx\n \texit ;;\n     amd64:Isilon\\ OneFS:*:*)\n \techo x86_64-unknown-onefs\n \texit ;;\n esac\n \n+echo \"$0: unable to guess system type\" >&2\n+\n+case \"$UNAME_MACHINE:$UNAME_SYSTEM\" in\n+    mips:Linux | mips64:Linux)\n+\t# If we got here on MIPS GNU/Linux, output extra information.\n+\tcat >&2 <<EOF\n+\n+NOTE: MIPS GNU/Linux systems require a C compiler to fully recognize\n+the system type. Please install a C compiler and try again.\n+EOF\n+\t;;\n+esac\n+\n cat >&2 <<EOF\n-$0: unable to guess system type\n \n This script (version $timestamp), has failed to recognize the\n-operating system you are using. If your script is old, overwrite\n-config.guess and config.sub with the latest versions from:\n+operating system you are using. If your script is old, overwrite *all*\n+copies of config.guess and config.sub with the latest versions from:\n \n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess\n and\n-  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+  https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n If $0 has already been updated, send the following data and any\n information you think might be pertinent to config-patches@gnu.org to\n@@ -1450,16 +1460,16 @@ hostinfo               = `(hostinfo) 2>/dev/null`\n /usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n /usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n \n-UNAME_MACHINE = ${UNAME_MACHINE}\n-UNAME_RELEASE = ${UNAME_RELEASE}\n-UNAME_SYSTEM  = ${UNAME_SYSTEM}\n-UNAME_VERSION = ${UNAME_VERSION}\n+UNAME_MACHINE = \"$UNAME_MACHINE\"\n+UNAME_RELEASE = \"$UNAME_RELEASE\"\n+UNAME_SYSTEM  = \"$UNAME_SYSTEM\"\n+UNAME_VERSION = \"$UNAME_VERSION\"\n EOF\n \n exit 1\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "818892c1c31fdbe97b7a9515662a01da0371e09f",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 105,
        "deletions": 141,
        "changes": 246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n #! /bin/sh\n # Configuration validation subroutine script.\n-#   Copyright 1992-2017 Free Software Foundation, Inc.\n+#   Copyright 1992-2018 Free Software Foundation, Inc.\n \n-timestamp='2017-04-02'\n+timestamp='2018-01-15'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -15,7 +15,7 @@ timestamp='2017-04-02'\n # General Public License for more details.\n #\n # You should have received a copy of the GNU General Public License\n-# along with this program; if not, see <http://www.gnu.org/licenses/>.\n+# along with this program; if not, see <https://www.gnu.org/licenses/>.\n #\n # As a special exception to the GNU General Public License, if you\n # distribute this file as part of a program that contains a\n@@ -33,7 +33,7 @@ timestamp='2017-04-02'\n # Otherwise, we print the canonical config type on stdout and succeed.\n \n # You can get the latest version of this script from:\n-# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n+# https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub\n \n # This file is supposed to be the same for all GNU packages\n # and recognize all the CPU types, system types and aliases\n@@ -57,7 +57,7 @@ Usage: $0 [OPTION] CPU-MFR-OPSYS or ALIAS\n \n Canonicalize a configuration name.\n \n-Operation modes:\n+Options:\n   -h, --help         print this help, then exit\n   -t, --time-stamp   print date of last modification, then exit\n   -v, --version      print version number, then exit\n@@ -67,7 +67,7 @@ Report bugs and patches to <config-patches@gnu.org>.\"\n version=\"\\\n GNU config.sub ($timestamp)\n \n-Copyright 1992-2017 Free Software Foundation, Inc.\n+Copyright 1992-2018 Free Software Foundation, Inc.\n \n This is free software; see the source for copying conditions.  There is NO\n warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n@@ -94,7 +94,7 @@ while test $# -gt 0 ; do\n \n     *local*)\n        # First pass through any local machine types.\n-       echo $1\n+       echo \"$1\"\n        exit ;;\n \n     * )\n@@ -112,24 +112,24 @@ esac\n \n # Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n # Here we must recognize all the valid KERNEL-OS combinations.\n-maybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n+maybe_os=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\n case $maybe_os in\n   nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n   linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n   knetbsd*-gnu* | netbsd*-gnu* | netbsd*-eabi* | \\\n   kopensolaris*-gnu* | cloudabi*-eabi* | \\\n   storm-chaos* | os2-emx* | rtmk-nova*)\n     os=-$maybe_os\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n     ;;\n   android-linux)\n     os=-linux-android\n-    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n+    basic_machine=`echo \"$1\" | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n     ;;\n   *)\n-    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n-    if [ $basic_machine != $1 ]\n-    then os=`echo $1 | sed 's/.*-/-/'`\n+    basic_machine=`echo \"$1\" | sed 's/-[^-]*$//'`\n+    if [ \"$basic_machine\" != \"$1\" ]\n+    then os=`echo \"$1\" | sed 's/.*-/-/'`\n     else os=; fi\n     ;;\n esac\n@@ -178,44 +178,44 @@ case $os in\n \t\t;;\n \t-sco6)\n \t\tos=-sco5v6\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5)\n \t\tos=-sco3.2v5\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco4)\n \t\tos=-sco3.2v4\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2.[4-9]*)\n \t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco3.2v[4-9]*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco5v6*)\n \t\t# Don't forget version if it is 3.2v4 or newer.\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-sco*)\n \t\tos=-sco3.2v2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-udk*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-isc)\n \t\tos=-isc2.2\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-clix*)\n \t\tbasic_machine=clipper-intergraph\n \t\t;;\n \t-isc*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-pc/'`\n \t\t;;\n \t-lynx*178)\n \t\tos=-lynxos178\n@@ -227,10 +227,7 @@ case $os in\n \t\tos=-lynxos\n \t\t;;\n \t-ptx*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n-\t\t;;\n-\t-windowsnt*)\n-\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86-.*/86-sequent/'`\n \t\t;;\n \t-psos*)\n \t\tos=-psos\n@@ -299,7 +296,7 @@ case $basic_machine in\n \t| nios | nios2 | nios2eb | nios2el \\\n \t| ns16k | ns32k \\\n \t| open8 | or1k | or1knd | or32 \\\n-\t| pdp10 | pdp11 | pj | pjl \\\n+\t| pdp10 | pj | pjl \\\n \t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n \t| pru \\\n \t| pyramid \\\n@@ -316,7 +313,6 @@ case $basic_machine in\n \t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n \t| visium \\\n \t| wasm32 \\\n-\t| we32k \\\n \t| x86 | xc16x | xstormy16 | xtensa \\\n \t| z8k | z80)\n \t\tbasic_machine=$basic_machine-unknown\n@@ -337,7 +333,7 @@ case $basic_machine in\n \t\tbasic_machine=$basic_machine-unknown\n \t\tos=-none\n \t\t;;\n-\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n+\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65)\n \t\t;;\n \tms1)\n \t\tbasic_machine=mt-unknown\n@@ -366,7 +362,7 @@ case $basic_machine in\n \t  ;;\n \t# Object if more than one company name word.\n \t*-*-*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n \t# Recognize the basic CPU types with company name.\n@@ -461,7 +457,7 @@ case $basic_machine in\n \t# Recognize the various machine names and aliases which stand\n \t# for a CPU type and a company and sometimes even an OS.\n \t386bsd)\n-\t\tbasic_machine=i386-unknown\n+\t\tbasic_machine=i386-pc\n \t\tos=-bsd\n \t\t;;\n \t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n@@ -495,7 +491,7 @@ case $basic_machine in\n \t\tbasic_machine=x86_64-pc\n \t\t;;\n \tamd64-*)\n-\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=x86_64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tamdahl)\n \t\tbasic_machine=580-amdahl\n@@ -540,21 +536,21 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tblackfin-*)\n-\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=bfin-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tbluegene*)\n \t\tbasic_machine=powerpc-ibm\n \t\tos=-cnk\n \t\t;;\n \tc54x-*)\n-\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic54x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc55x-*)\n-\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic55x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc6x-*)\n-\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=tic6x-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tc90)\n \t\tbasic_machine=c90-cray\n@@ -643,7 +639,7 @@ case $basic_machine in\n \t\tbasic_machine=rs6000-bull\n \t\tos=-bosx\n \t\t;;\n-\tdpx2* | dpx2*-bull)\n+\tdpx2*)\n \t\tbasic_machine=m68k-bull\n \t\tos=-sysv3\n \t\t;;\n@@ -652,7 +648,7 @@ case $basic_machine in\n \t\tos=$os\"spe\"\n \t\t;;\n \te500v[12]-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=$os\"spe\"\n \t\t;;\n \tebmon29k)\n@@ -744,9 +740,6 @@ case $basic_machine in\n \thp9k8[0-9][0-9] | hp8[0-9][0-9])\n \t\tbasic_machine=hppa1.0-hp\n \t\t;;\n-\thppa-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \thppaosf)\n \t\tbasic_machine=hppa1.1-hp\n \t\tos=-osf\n@@ -759,26 +752,26 @@ case $basic_machine in\n \t\tbasic_machine=i370-ibm\n \t\t;;\n \ti*86v32)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv32\n \t\t;;\n \ti*86v4*)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv4\n \t\t;;\n \ti*86v)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-sysv\n \t\t;;\n \ti*86sol2)\n-\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n+\t\tbasic_machine=`echo \"$1\" | sed -e 's/86.*/86-pc/'`\n \t\tos=-solaris2\n \t\t;;\n \ti386mach)\n \t\tbasic_machine=i386-mach\n \t\tos=-mach\n \t\t;;\n-\ti386-vsta | vsta)\n+\tvsta)\n \t\tbasic_machine=i386-unknown\n \t\tos=-vsta\n \t\t;;\n@@ -797,19 +790,16 @@ case $basic_machine in\n \t\tos=-sysv\n \t\t;;\n \tleon-*|leon[3-9]-*)\n-\t\tbasic_machine=sparc-`echo $basic_machine | sed 's/-.*//'`\n+\t\tbasic_machine=sparc-`echo \"$basic_machine\" | sed 's/-.*//'`\n \t\t;;\n \tm68knommu)\n \t\tbasic_machine=m68k-unknown\n \t\tos=-linux\n \t\t;;\n \tm68knommu-*)\n-\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=m68k-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n-\tm88k-omron*)\n-\t\tbasic_machine=m88k-omron\n-\t\t;;\n \tmagnum | m3230)\n \t\tbasic_machine=mips-mips\n \t\tos=-sysv\n@@ -841,10 +831,10 @@ case $basic_machine in\n \t\tos=-mint\n \t\t;;\n \tmips3*-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`\n \t\t;;\n \tmips3*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/mips3/mips64/'`-unknown\n \t\t;;\n \tmonitor)\n \t\tbasic_machine=m68k-rom68k\n@@ -863,7 +853,7 @@ case $basic_machine in\n \t\tos=-msdos\n \t\t;;\n \tms1-*)\n-\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed -e 's/ms1-/mt-/'`\n \t\t;;\n \tmsys)\n \t\tbasic_machine=i686-pc\n@@ -905,7 +895,7 @@ case $basic_machine in\n \t\tbasic_machine=v70-nec\n \t\tos=-sysv\n \t\t;;\n-\tnext | m*-next )\n+\tnext | m*-next)\n \t\tbasic_machine=m68k-next\n \t\tcase $os in\n \t\t    -nextstep* )\n@@ -950,6 +940,9 @@ case $basic_machine in\n \tnsr-tandem)\n \t\tbasic_machine=nsr-tandem\n \t\t;;\n+\tnsv-tandem)\n+\t\tbasic_machine=nsv-tandem\n+\t\t;;\n \tnsx-tandem)\n \t\tbasic_machine=nsx-tandem\n \t\t;;\n@@ -985,7 +978,7 @@ case $basic_machine in\n \t\tos=-linux\n \t\t;;\n \tparisc-*)\n-\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=hppa-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\tos=-linux\n \t\t;;\n \tpbd)\n@@ -1001,7 +994,7 @@ case $basic_machine in\n \t\tbasic_machine=i386-pc\n \t\t;;\n \tpc98-*)\n-\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i386-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium | p5 | k5 | k6 | nexgen | viac3)\n \t\tbasic_machine=i586-pc\n@@ -1016,16 +1009,16 @@ case $basic_machine in\n \t\tbasic_machine=i786-pc\n \t\t;;\n \tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n-\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i586-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n-\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i686-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpentium4-*)\n-\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=i786-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tpn)\n \t\tbasic_machine=pn-gould\n@@ -1035,23 +1028,23 @@ case $basic_machine in\n \tppc | ppcbe)\tbasic_machine=powerpc-unknown\n \t\t;;\n \tppc-* | ppcbe-*)\n-\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppcle | powerpclittle)\n \t\tbasic_machine=powerpcle-unknown\n \t\t;;\n \tppcle-* | powerpclittle-*)\n-\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpcle-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64)\tbasic_machine=powerpc64-unknown\n \t\t;;\n-\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\tppc64-*) basic_machine=powerpc64-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tppc64le | powerpc64little)\n \t\tbasic_machine=powerpc64le-unknown\n \t\t;;\n \tppc64le-* | powerpc64little-*)\n-\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=powerpc64le-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tps2)\n \t\tbasic_machine=i386-ibm\n@@ -1105,17 +1098,10 @@ case $basic_machine in\n \tsequent)\n \t\tbasic_machine=i386-sequent\n \t\t;;\n-\tsh)\n-\t\tbasic_machine=sh-hitachi\n-\t\tos=-hms\n-\t\t;;\n \tsh5el)\n \t\tbasic_machine=sh5le-unknown\n \t\t;;\n-\tsh64)\n-\t\tbasic_machine=sh64-unknown\n-\t\t;;\n-\tsparclite-wrs | simso-wrs)\n+\tsimso-wrs)\n \t\tbasic_machine=sparclite-wrs\n \t\tos=-vxworks\n \t\t;;\n@@ -1134,7 +1120,7 @@ case $basic_machine in\n \t\tos=-sysv4\n \t\t;;\n \tstrongarm-* | thumb-*)\n-\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n+\t\tbasic_machine=arm-`echo \"$basic_machine\" | sed 's/^[^-]*-//'`\n \t\t;;\n \tsun2)\n \t\tbasic_machine=m68000-sun\n@@ -1248,9 +1234,6 @@ case $basic_machine in\n \t\tbasic_machine=a29k-wrs\n \t\tos=-vxworks\n \t\t;;\n-\twasm32)\n-\t\tbasic_machine=wasm32-unknown\n-\t\t;;\n \tw65*)\n \t\tbasic_machine=w65-wdc\n \t\tos=-none\n@@ -1259,6 +1242,9 @@ case $basic_machine in\n \t\tbasic_machine=hppa1.1-winbond\n \t\tos=-proelf\n \t\t;;\n+\tx64)\n+\t\tbasic_machine=x86_64-pc\n+\t\t;;\n \txbox)\n \t\tbasic_machine=i686-pc\n \t\tos=-mingw32\n@@ -1267,20 +1253,12 @@ case $basic_machine in\n \t\tbasic_machine=xps100-honeywell\n \t\t;;\n \txscale-* | xscalee[bl]-*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/^xscale/arm/'`\n \t\t;;\n \tymp)\n \t\tbasic_machine=ymp-cray\n \t\tos=-unicos\n \t\t;;\n-\tz8k-*-coff)\n-\t\tbasic_machine=z8k-unknown\n-\t\tos=-sim\n-\t\t;;\n-\tz80-*-coff)\n-\t\tbasic_machine=z80-unknown\n-\t\tos=-sim\n-\t\t;;\n \tnone)\n \t\tbasic_machine=none-none\n \t\tos=-none\n@@ -1309,10 +1287,6 @@ case $basic_machine in\n \tvax)\n \t\tbasic_machine=vax-dec\n \t\t;;\n-\tpdp10)\n-\t\t# there are many clones, so DEC is not a safe bet\n-\t\tbasic_machine=pdp10-unknown\n-\t\t;;\n \tpdp11)\n \t\tbasic_machine=pdp11-dec\n \t\t;;\n@@ -1322,9 +1296,6 @@ case $basic_machine in\n \tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n \t\tbasic_machine=sh-unknown\n \t\t;;\n-\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n-\t\tbasic_machine=sparc-sun\n-\t\t;;\n \tcydra)\n \t\tbasic_machine=cydra-cydrome\n \t\t;;\n@@ -1344,18 +1315,18 @@ case $basic_machine in\n \t\t# Make sure to match an already-canonicalized machine name.\n \t\t;;\n \t*)\n-\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': machine \\`\"$basic_machine\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n \n # Here we canonicalize certain aliases for manufacturers.\n case $basic_machine in\n \t*-digital*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/digital.*/dec/'`\n \t\t;;\n \t*-commodore*)\n-\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed 's/commodore.*/cbm/'`\n \t\t;;\n \t*)\n \t\t;;\n@@ -1366,8 +1337,8 @@ esac\n if [ x\"$os\" != x\"\" ]\n then\n case $os in\n-\t# First match some system type aliases\n-\t# that might get confused with valid system types.\n+\t# First match some system type aliases that might get confused\n+\t# with valid system types.\n \t# -solaris* is a basic system type, with this one exception.\n \t-auroraux)\n \t\tos=-auroraux\n@@ -1378,18 +1349,19 @@ case $os in\n \t-solaris)\n \t\tos=-solaris2\n \t\t;;\n-\t-svr4*)\n-\t\tos=-sysv4\n-\t\t;;\n \t-unixware*)\n \t\tos=-sysv4.2uw\n \t\t;;\n \t-gnu/linux*)\n \t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n \t\t;;\n-\t# First accept the basic system types.\n+\t# es1800 is here to avoid being matched by es* (a different OS)\n+\t-es1800*)\n+\t\tos=-ose\n+\t\t;;\n+\t# Now accept the basic system types.\n \t# The portable systems comes first.\n-\t# Each alternative MUST END IN A *, to match a version number.\n+\t# Each alternative MUST end in a * to match a version number.\n \t# -sysv* is not here because it comes later, after sysvr4.\n \t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n \t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n@@ -1399,7 +1371,7 @@ case $os in\n \t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n-\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n+\t      | -hiux* | -knetbsd* | -mirbsd* | -netbsd* \\\n \t      | -bitrig* | -openbsd* | -solidbsd* | -libertybsd* \\\n \t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n \t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n@@ -1410,14 +1382,14 @@ case $os in\n \t      | -midipix* | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n \t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n \t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n-\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n+\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* \\\n \t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n \t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n \t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n-\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n+\t      | -morphos* | -superux* | -rtmk* | -windiss* \\\n \t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n \t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* \\\n-\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox*)\n+\t      | -onefs* | -tirtos* | -phoenix* | -fuchsia* | -redox* | -bme*)\n \t# Remember, each alternative MUST END IN *, to match a version number.\n \t\t;;\n \t-qnx*)\n@@ -1434,12 +1406,12 @@ case $os in\n \t-nto*)\n \t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n \t\t;;\n-\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n-\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n+\t-sim | -xray | -os68k* | -v88r* \\\n+\t      | -windows* | -osx | -abug | -netware* | -os9* \\\n \t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n \t\t;;\n \t-mac*)\n-\t\tos=`echo $os | sed -e 's|mac|macos|'`\n+\t\tos=`echo \"$os\" | sed -e 's|mac|macos|'`\n \t\t;;\n \t-linux-dietlibc)\n \t\tos=-linux-dietlibc\n@@ -1448,10 +1420,10 @@ case $os in\n \t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n \t\t;;\n \t-sunos5*)\n-\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos5|solaris2|'`\n \t\t;;\n \t-sunos6*)\n-\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n+\t\tos=`echo \"$os\" | sed -e 's|sunos6|solaris3|'`\n \t\t;;\n \t-opened*)\n \t\tos=-openedition\n@@ -1462,12 +1434,6 @@ case $os in\n \t-wince*)\n \t\tos=-wince\n \t\t;;\n-\t-osfrose*)\n-\t\tos=-osfrose\n-\t\t;;\n-\t-osf*)\n-\t\tos=-osf\n-\t\t;;\n \t-utek*)\n \t\tos=-bsd\n \t\t;;\n@@ -1492,7 +1458,7 @@ case $os in\n \t-nova*)\n \t\tos=-rtmk-nova\n \t\t;;\n-\t-ns2 )\n+\t-ns2)\n \t\tos=-nextstep2\n \t\t;;\n \t-nsk*)\n@@ -1514,7 +1480,7 @@ case $os in\n \t-oss*)\n \t\tos=-sysv3\n \t\t;;\n-\t-svr4)\n+\t-svr4*)\n \t\tos=-sysv4\n \t\t;;\n \t-svr3)\n@@ -1529,24 +1495,28 @@ case $os in\n \t-ose*)\n \t\tos=-ose\n \t\t;;\n-\t-es1800*)\n-\t\tos=-ose\n-\t\t;;\n-\t-xenix)\n-\t\tos=-xenix\n-\t\t;;\n \t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n \t\tos=-mint\n \t\t;;\n-\t-aros*)\n-\t\tos=-aros\n-\t\t;;\n \t-zvmoe)\n \t\tos=-zvmoe\n \t\t;;\n \t-dicos*)\n \t\tos=-dicos\n \t\t;;\n+\t-pikeos*)\n+\t\t# Until real need of OS specific support for\n+\t\t# particular features comes up, bare metal\n+\t\t# configurations are quite functional.\n+\t\tcase $basic_machine in\n+\t\t    arm*)\n+\t\t\tos=-eabi\n+\t\t\t;;\n+\t\t    *)\n+\t\t\tos=-elf\n+\t\t\t;;\n+\t\tesac\n+\t\t;;\n \t-nacl*)\n \t\t;;\n \t-ios)\n@@ -1556,7 +1526,7 @@ case $os in\n \t*)\n \t\t# Get rid of the `-' at the beginning of $os.\n \t\tos=`echo $os | sed 's/[^-]*-//'`\n-\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n+\t\techo Invalid configuration \\`\"$1\"\\': system \\`\"$os\"\\' not recognized 1>&2\n \t\texit 1\n \t\t;;\n esac\n@@ -1652,9 +1622,6 @@ case $basic_machine in\n \t*-be)\n \t\tos=-beos\n \t\t;;\n-\t*-haiku)\n-\t\tos=-haiku\n-\t\t;;\n \t*-ibm)\n \t\tos=-aix\n \t\t;;\n@@ -1694,7 +1661,7 @@ case $basic_machine in\n \tm88k-omron*)\n \t\tos=-luna\n \t\t;;\n-\t*-next )\n+\t*-next)\n \t\tos=-nextstep\n \t\t;;\n \t*-sequent)\n@@ -1709,9 +1676,6 @@ case $basic_machine in\n \ti370-*)\n \t\tos=-mvs\n \t\t;;\n-\t*-next)\n-\t\tos=-nextstep3\n-\t\t;;\n \t*-gould)\n \t\tos=-sysv\n \t\t;;\n@@ -1821,15 +1785,15 @@ case $basic_machine in\n \t\t\t\tvendor=stratus\n \t\t\t\t;;\n \t\tesac\n-\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n+\t\tbasic_machine=`echo \"$basic_machine\" | sed \"s/unknown/$vendor/\"`\n \t\t;;\n esac\n \n-echo $basic_machine$os\n+echo \"$basic_machine$os\"\n exit\n \n # Local variables:\n-# eval: (add-hook 'write-file-hooks 'time-stamp)\n+# eval: (add-hook 'write-file-functions 'time-stamp)\n # time-stamp-start: \"timestamp='\"\n # time-stamp-format: \"%:y-%02m-%02d\"\n # time-stamp-end: \"'\""
      },
      {
        "sha": "acbc60eea3e8ace144fbfd2ea13cd16772eb8134",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n package=expat\n-$(package)_version=2.2.1\n-$(package)_download_path=https://downloads.sourceforge.net/project/expat/expat/$($(package)_version)\n+$(package)_version=2.2.5\n+$(package)_download_path=https://github.com/libexpat/libexpat/releases/download/R_2_2_5/\n $(package)_file_name=$(package)-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=1868cadae4c82a018e361e2b2091de103cd820aaacb0d6cfa49bd2cd83978885\n+$(package)_sha256_hash=d9dc32efba7e74f788fcc4f212a43216fc37cf5f23f4c2339664d473353aedf6\n \n define $(package)_set_vars\n $(package)_config_opts=--disable-static"
      },
      {
        "sha": "9976db43c28122df8eeef56263f4c35a28af3ba4",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,14 +1,15 @@\n package=miniupnpc\n-$(package)_version=2.0.20170509\n+$(package)_version=2.0.20180203\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=d3c368627f5cdfb66d3ebd64ca39ba54d6ff14a61966dbecb8dd296b7039f16a\n+$(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9cc220b7\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -1,8 +1,8 @@\n package=native_ccache\n-$(package)_version=3.3.4\n+$(package)_version=3.4.1\n $(package)_download_path=https://samba.org/ftp/ccache\n $(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=fa9d7f38367431bc86b19ad107d709ca7ecf1574fdacca01698bdf0a47cd8567\n+$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n \n define $(package)_set_vars\n $(package)_config_opts="
      },
      {
        "sha": "5e698126d4271923a715628ca458a1f519cb79df",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e032b43cea835cf06f83a5a72685dc02033c48/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e032b43cea835cf06f83a5a72685dc02033c48/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=59e032b43cea835cf06f83a5a72685dc02033c48",
        "patch": "@@ -7,18 +7,18 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.4](https://ccache.samba.org/download.html) |  | No |  |  |\n+| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n-| Expat | [2.2.1](https://libexpat.github.io/) |  | No | Yes |  |\n+| Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |\n | fontconfig | [2.12.1](https://www.freedesktop.org/software/fontconfig/release/) |  | No | Yes |  |\n | FreeType | [2.7.1](http://download.savannah.gnu.org/releases/freetype) |  | No |  |  |\n | GCC |  | [4.8+](https://gcc.gnu.org/) |  |  |  |\n | HarfBuzz-NG |  |  |  |  |  |\n | libevent | [2.1.8-stable](https://github.com/libevent/libevent/releases) | 2.0.22 | No |  |  |\n | libjpeg |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L75) |\n | libpng |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L74) |\n-| MiniUPnPc | [2.0.20170509](http://miniupnp.free.fr/files) |  | No |  |  |\n+| MiniUPnPc | [2.0.20180203](http://miniupnp.free.fr/files) |  | No |  |  |\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L76) |\n | protobuf | [2.6.3](https://github.com/google/protobuf/releases) |  | No |  |  |"
      }
    ]
  },
  {
    "sha": "1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTk4ZjMyMzA0Y2Q1NWI4M2VjYzYyM2VlMGY5ZTMwYjRlMDg3Yjdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-12-04T17:49:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:26Z"
      },
      "message": "[rpc] Move DescribeAddressVisitor to rpc/util",
      "tree": {
        "sha": "ec538026ed4ed137e19b75ea104f8ba3d71ab8f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec538026ed4ed137e19b75ea104f8ba3d71ab8f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39633ecd5c18ca29cb551f701e57e8cec3e609da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39633ecd5c18ca29cb551f701e57e8cec3e609da"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 83,
      "deletions": 54
    },
    "files": [
      {
        "sha": "aa1647a63a74df644e6e4efb43fc0e33cc1c461e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -215,6 +215,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/rawtransaction.cpp \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n+  rpc/util.cpp \\\n   script/sigcache.cpp \\\n   script/ismine.cpp \\\n   timedata.cpp \\"
      },
      {
        "sha": "f7d62a6326937a4aa859bf39890e49c5ba333d69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 54,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -33,57 +33,6 @@\n \n #include <univalue.h>\n \n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    explicit DescribeAddressVisitor() {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-\n #ifdef ENABLE_WALLET\n class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n {\n@@ -182,6 +131,15 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n \n     UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n };\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n #endif\n \n UniValue validateaddress(const JSONRPCRequest& request)\n@@ -254,10 +212,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n         ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        UniValue detail = DescribeWalletAddress(pwallet, dest);\n         ret.pushKVs(detail);\n-        UniValue wallet_detail = boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest);\n-        ret.pushKVs(wallet_detail);\n         if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n         }\n@@ -284,6 +240,8 @@ UniValue validateaddress(const JSONRPCRequest& request)\n                 }\n             }\n         }\n+#else\n+        ret.pushKvs = DescribeAddress(dest);\n #endif\n     }\n     return ret;"
      },
      {
        "sha": "cdcb68d15f94a9c13f14adb799c3e0dc28581591",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination& dest) const\n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}"
      },
      {
        "sha": "5380d45a8356288ae66bdd2623406cdbda3cdbb1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1598f32304cd55b83ecc623ee0f9e30b4e087b7d/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "patch": "@@ -5,6 +5,13 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <univalue.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/static_visitor.hpp>\n+\n #include <string>\n #include <vector>\n \n@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(const CTxDestination& dest);\n+\n #endif // BITCOIN_RPC_UTIL_H"
      }
    ]
  },
  {
    "sha": "b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOThiZmM1ZWQwZGExZWZlZjFlZmY1NTJhN2UxYTdjZTljYWYxMzBm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-13T01:53:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:32Z"
      },
      "message": "Create getaddressinfo RPC and deprecate parts of validateaddress\n\nMoves the parts of validateaddress which require the wallet into getaddressinfo\nwhich is part of the wallet RPCs. Mark those parts of validateaddress which\nrequire the wallet as deprecated.\n\nValidateaddress will  call getaddressinfo\nfor the data that both share for right now.\n\nMoves IsMine functions to libbitcoin_common and then links libbitcoin_wallet\nbefore libbitcoin_common in order to prevent linker errors since IsMine is no\nlonger used in libbitcoin_server.",
      "tree": {
        "sha": "6124ecff8ff0e24d707d85e790c591fac92ee2b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6124ecff8ff0e24d707d85e790c591fac92ee2b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1598f32304cd55b83ecc623ee0f9e30b4e087b7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1598f32304cd55b83ecc623ee0f9e30b4e087b7d"
      }
    ],
    "stats": {
      "total": 447,
      "additions": 253,
      "deletions": 194
    },
    "files": [
      {
        "sha": "9ca2b2c82a94a572612af6b5fccff8c339268888",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -135,10 +135,10 @@ BITCOIN_CORE_H = \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n+  script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  script/ismine.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -215,9 +215,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/rawtransaction.cpp \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n-  rpc/util.cpp \\\n   script/sigcache.cpp \\\n-  script/ismine.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n@@ -334,6 +332,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n+  script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   warnings.cpp \\\n@@ -390,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "13c27299f8980331ff6089ab124fec664dc32625",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -51,7 +52,6 @@ endif\n \n if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "61bd59e9edab595ac14632cb63bd370d0d5904fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 181,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -33,216 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj(UniValue::VOBJ);\n-            UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), embedded);\n-            subobj.pushKVs(detail);\n-            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n-            subobj.pushKVs(wallet_detail);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    explicit DescribeWalletAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n-};\n-\n-UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n-{\n-    UniValue ret(UniValue::VOBJ);\n-    UniValue detail = DescribeAddress(dest);\n-    ret.pushKVs(detail);\n-    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n-    return ret;\n-}\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = DescribeWalletAddress(pwallet, dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n-#else\n-        ret.pushKvs = DescribeAddress(dest);\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.pushKV(\"address\", currentAddress);\n+\n+            CScript scriptPubKey = GetScriptForDestination(dest);\n+            ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));;\n+\n+            UniValue detail = DescribeAddress(dest);\n+            ret.pushKVs(detail);\n+        }\n     }\n     return ret;\n }"
      },
      {
        "sha": "b504b842741b4f8110ac46a4f1d97f41a4848c57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -25,6 +25,7 @@\n #include <utilmoneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -3514,6 +3515,209 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = IsMine(*pwallet, dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    ret.pushKVs(detail);\n+    if (pwallet->mapAddressBook.count(dest)) {\n+        ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+    }\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (meta) {\n+        ret.pushKV(\"timestamp\", meta->nCreateTime);\n+        if (!meta->hdKeypath.empty()) {\n+            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+            ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n+        }\n+    }\n+    return ret;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3543,6 +3747,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n     { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },"
      },
      {
        "sha": "43cf0416650c1b0408eda63ee829ffdb226b955b",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n@@ -25,4 +26,6 @@ std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n+UniValue getaddressinfo(const JSONRPCRequest& request);\n+\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "b94b9d8fae2c4ab6af0804488e91f30c106b56c5",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -9,7 +9,7 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -18,10 +18,13 @@ def run_test(self):\n         # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-        #\n-        # There are currently no deprecated RPC methods in master, so this\n-        # test is currently empty.\n-        pass\n+\n+        self.log.info(\"Test validateaddress deprecation\")\n+        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\" # This is just some random address to pass as a parameter to validateaddress\n+        dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" not in dep_validate_address\n+        not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" in not_dep_val\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      },
      {
        "sha": "5d2428e6ef259a1b705f269348905f17facb235f",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -93,8 +93,8 @@ def get_balances(self, confirmed=True):\n \n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n-        info = self.nodes[node].validateaddress(address)\n-        assert(info['isvalid'])\n+        info = self.nodes[node].getaddressinfo(address)\n+        assert(self.nodes[node].validateaddress(address)['isvalid'])\n         if not multisig and typ == 'legacy':\n             # P2PKH\n             assert(not info['isscript'])"
      },
      {
        "sha": "d041b4c1958c5fa2f121afd7181f772c9f9277ce",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n         assert_equal(txout['value'], 50)\n-        \n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -442,5 +442,14 @@ def run_test(self):\n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n \n+        # Test getaddressinfo. Note that these addresses are taken from disablewallet.py\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n+        address_info = self.nodes[0].getaddressinfo(\"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info['address'], \"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info[\"scriptPubKey\"], \"76a9144e3854046c7bd1594ac904e4793b6a45b36dea0988ac\")\n+        assert not address_info[\"ismine\"]\n+        assert not address_info[\"iswatchonly\"]\n+        assert not address_info[\"isscript\"]\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      }
    ]
  },
  {
    "sha": "b22cce014852b082d80f1cc35f902b375cba0318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjJjY2UwMTQ4NTJiMDgyZDgwZjFjYzM1ZjkwMmIzNzVjYmEwMzE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-09T16:12:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-16T17:09:36Z"
      },
      "message": "scripted-diff: validateaddress to getaddressinfo in tests\n\nChange all instances of validateaddress to getaddressinfo since it seems that\nno test actually uses validateaddress for actually validating addresses.\n\n-BEGIN VERIFY SCRIPT-\nfind ./test/functional -path '*py' -not -path ./test/functional/wallet_disable.py -not -path ./test/functional/rpc_deprecated.py -not -path ./test/functional/wallet_address_types.py -exec sed -i'' -e 's/validateaddress/getaddressinfo/g' {} \\;\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "d0b165fa758a6b55077d1ff1ddca771efe11e4ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0b165fa758a6b55077d1ff1ddca771efe11e4ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22cce014852b082d80f1cc35f902b375cba0318",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cce014852b082d80f1cc35f902b375cba0318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b98bfc5ed0da1efef1eff552a7e1a7ce9caf130f"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 104,
      "deletions": 104
    },
    "files": [
      {
        "sha": "9093cc04e8638ed06151ec8d24a5458c035cdd61",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n-            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n@@ -274,8 +274,8 @@ def run_test(self):\n         uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n         self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n         compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n-        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n-        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+        assert ((self.nodes[0].getaddressinfo(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].getaddressinfo(compressed_spendable_address[0])['iscompressed'] == True))\n \n         self.nodes[0].importpubkey(pubkeys[0])\n         compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n@@ -308,7 +308,7 @@ def run_test(self):\n         solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with compressed keys should always be spendable\n@@ -325,7 +325,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with uncompressed keys should always be spendable\n@@ -342,7 +342,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -355,7 +355,7 @@ def run_test(self):\n                 solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n@@ -395,7 +395,7 @@ def run_test(self):\n \n         importlist = []\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bytes_to_hex_str(bare))\n@@ -473,7 +473,7 @@ def run_test(self):\n         premature_witaddress = []\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n@@ -485,7 +485,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n@@ -496,7 +496,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # P2WSH multisig without private key are seen after addwitnessaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -519,7 +519,7 @@ def run_test(self):\n             assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n-        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        v = self.nodes[0].getaddressinfo(compressed_solvable_address[1])\n         self.nodes[0].importaddress(v['hex'],\"\",False,True)\n         for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n             witaddress = self.nodes[0].addwitnessaddress(i)"
      },
      {
        "sha": "de436e3ea1055c424151e821f6d0ea10b08900cd",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         assert_equal(rawmatch[\"changepos\"], -1)\n \n         watchonly_address = self.nodes[0].getnewaddress()\n-        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n@@ -371,8 +371,8 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n \n@@ -401,11 +401,11 @@ def run_test(self):\n         addr4 = self.nodes[1].getnewaddress()\n         addr5 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-        addr3Obj = self.nodes[1].validateaddress(addr3)\n-        addr4Obj = self.nodes[1].validateaddress(addr4)\n-        addr5Obj = self.nodes[1].validateaddress(addr5)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[1].getaddressinfo(addr3)\n+        addr4Obj = self.nodes[1].getaddressinfo(addr4)\n+        addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])['address']\n \n@@ -431,8 +431,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n "
      },
      {
        "sha": "e4b8b2ec2bf38e8452754728b059aba6715c8b56",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -81,7 +81,7 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n-        pubkey = self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['pubkey']\n+        pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n         multisig = self.nodes[1].createmultisig(1, [pubkey])\n         self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)"
      },
      {
        "sha": "2cb902e8f00014aa088fdf63c8eb0a74707d7589",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -146,8 +146,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         # Tests for createmultisig and addmultisigaddress\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n@@ -173,9 +173,9 @@ def run_test(self):\n         addr2 = self.nodes[2].getnewaddress()\n         addr3 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n-        addr3Obj = self.nodes[2].validateaddress(addr3)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[2].getaddressinfo(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n \n@@ -219,12 +219,12 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "e1e01570cbf6f29b2c0550d7f3d9acbc1d396b1b",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -149,7 +149,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n     if not encode_p2sh:\n-        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+        assert_equal(node.getaddressinfo(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n     return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding"
      },
      {
        "sha": "b644f3495c6fe739aba1420f9ac6f94d943937c8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -317,7 +317,7 @@ def run_test(self):\n         self.nodes[1].importaddress(address_to_import)\n \n         # 3. Validate that the imported address is watch-only on node1\n-        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+        assert(self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"])\n \n         # 4. Check that the unspents after import are not spendable\n         assert_array_result(self.nodes[1].listunspent(),"
      },
      {
        "sha": "4db217d886e0f760be821be852db5be043c898bd",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -104,7 +104,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     # which spends it, and make sure bumpfee can be called on it.\n \n     segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n-    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress())\n     rbf_node.addwitnessaddress(segwit_out[\"address\"])\n     segwitid = send_to_witness(\n         use_p2wsh=False,"
      },
      {
        "sha": "e171a2600266092560e0d122fd40eacb4089c166",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -97,7 +97,7 @@ def run_test (self):\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n-            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            vaddr= self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n             addrs.append(vaddr)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n@@ -143,13 +143,13 @@ def run_test (self):\n         self.start_node(0, ['-wallet=w2'])\n \n         # Make sure the address is not IsMine before import\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n         self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n         # Now check IsMine is true\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "91f77dd5ba5f146863eac194effa7b29fa6d5d43",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -33,7 +33,7 @@ def run_test (self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n@@ -51,7 +51,7 @@ def run_test (self):\n         num_hd_adds = 300\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n-            hd_info = self.nodes[1].validateaddress(hd_add)\n+            hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n@@ -61,7 +61,7 @@ def run_test (self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()\n@@ -80,7 +80,7 @@ def run_test (self):\n         hd_add_2 = None\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n-            hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n+            hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n@@ -114,7 +114,7 @@ def run_test (self):\n         keypath = \"\"\n         for out in outs:\n             if out['value'] != 1:\n-                keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n+                keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['addresses'][0])['hdkeypath']\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n "
      },
      {
        "sha": "3288ce4b60e6cac8ce0a8e6ef566921dae37089e",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -134,7 +134,7 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "56ebc2622ab7729eae5f335d7d1d0b58182e98c2",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -21,7 +21,7 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -30,7 +30,7 @@ def run_test (self):\n         assert_equal(self.nodes[1].getblockcount(),1)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        address_info = self.nodes[1].getaddressinfo(node0_address1['address'])\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -39,15 +39,15 @@ def run_test (self):\n \n         # Bitcoin Address\n         self.log.info(\"Should import an address\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -67,37 +67,37 @@ def run_test (self):\n \n         # ScriptPubKey + internal\n         self.log.info(\"Should import a scriptPubKey with internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n         self.log.info(\"Should import an address with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -106,15 +106,15 @@ def run_test (self):\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -123,14 +123,14 @@ def run_test (self):\n         }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -140,14 +140,14 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         self.log.info(\"Should import an address with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -156,7 +156,7 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -175,7 +175,7 @@ def run_test (self):\n \n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -187,29 +187,29 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -218,16 +218,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -242,7 +242,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -252,9 +252,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -270,7 +270,7 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n@@ -279,9 +279,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -298,17 +298,17 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], True)\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -332,8 +332,8 @@ def run_test (self):\n \n         # Address + Public key + !Internal + Wrong pubkey\n         self.log.info(\"Should not import an address with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -344,16 +344,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -364,16 +364,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n         self.log.info(\"Should not import an address with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -384,16 +384,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -403,7 +403,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n@@ -419,7 +419,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -429,7 +429,7 @@ def run_test (self):\n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n         self.start_nodes()\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], watchonly_timestamp)"
      },
      {
        "sha": "4d349db23f9da1a42d2dec025e6b6086e4a65928",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n \n         #Check only one address\n-        address_info = self.nodes[0].validateaddress(address1)\n+        address_info = self.nodes[0].getaddressinfo(address1)\n         assert_equal(address_info['ismine'], True)\n \n         self.sync_all()\n@@ -35,15 +35,15 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(),101)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -86,13 +86,13 @@ def run_test(self):\n         assert_equal(balance3, Decimal('0.075'))\n \n         #Addresses Test - after import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], True)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n "
      },
      {
        "sha": "9825e4d89448fb1e6ab21a1d3438a475839bbb23",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -14,7 +14,7 @@ def set_test_params(self):\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()\n-        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n@@ -24,7 +24,7 @@ def run_test(self):\n         self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        addr_data = nodes[0].validateaddress(addr)\n+        addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])"
      },
      {
        "sha": "e7b76dfaf2ee3fdd10bdf8224778bf8efd6568f3",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22cce014852b082d80f1cc35f902b375cba0318/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=b22cce014852b082d80f1cc35f902b375cba0318",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n         # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+        assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      }
    ]
  },
  {
    "sha": "e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzEwMzg3Y2E5NWY3ZmE4YmExYWE2ZjU2OTg4NDMzOTFiODdjNzcy",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-16T07:26:35Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-16T19:06:32Z"
      },
      "message": "test: Fix bip68 sequence test to reflect updated rpc error message\n\nThe message changed in #12356",
      "tree": {
        "sha": "cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJahyu/AAoJEG7l83hfeLNFfCYIAKbRwzTySoYJzhWlXGXHDE1v\nMbZcMocfN6uC0om/KOMzRt/r4VvlOBoLkTiQgiEgu6Cr1KytogIQlPqsKXwzgc63\n1nHA6AC8An5KYZHbBJXOc6AHjjtQJdq4F1FwTpv4u0OPQl8HuJrPSWvwJ139yAmT\nUSFwHIa3z4m9VXdhzksZJc8e9evYdu8L2vzFAKnnKmSt9PjCH9jNl6FbW6t0+9ng\nF7L1aYPtM/6jbHYx/6n48U98rWJXhW/9iG5MKnSR7R0letfI7ANKFGQb+L7ldMs1\nXoCUWk0poVgC/VKXug9WNQ2JhzL/YMO0fqYAq+OYZ90ZTvVVHTm3os3xo5BMTC0=\n=oiNQ\n-----END PGP SIGNATURE-----",
        "payload": "tree cb0766c0c2dc3325998ccb74dc1cf6d74f0d18fe\nparent 4a62ddd01873d18dbca96c81d756be1020249b45\nauthor Ben Woosley <ben.woosley@gmail.com> 1518765995 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1518807992 -0800\n\ntest: Fix bip68 sequence test to reflect updated rpc error message\n\nThe message changed in #12356\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e710387ca95f7fa8ba1aa6f5698843391b87c772",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a62ddd01873d18dbca96c81d756be1020249b45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a62ddd01873d18dbca96c81d756be1020249b45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a62ddd01873d18dbca96c81d756be1020249b45"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be01a1ca53d7183b850353a3faf3b5802ce54905",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e710387ca95f7fa8ba1aa6f5698843391b87c772/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e710387ca95f7fa8ba1aa6f5698843391b87c772/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "patch": "@@ -14,7 +14,7 @@\n SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n \n # RPC error for non-BIP68 final transactions\n-NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+NOT_FINAL_ERROR = \"non-BIP68-final (code 64)\"\n \n class BIP68Test(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "fa9461473868132a6a23c672b2eea2d29287855d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk0NjE0NzM4NjgxMzJhNmEyM2M2NzJiMmVlYTJkMjkyODc4NTVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-14T21:30:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T19:21:52Z"
      },
      "message": "[doc] dev-notes: Members should be initialized\n\nAlso, remove mention of threads that were removed long ago",
      "tree": {
        "sha": "b990b04c8a4c1aa12546142a381d354b2ea153e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b990b04c8a4c1aa12546142a381d354b2ea153e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9461473868132a6a23c672b2eea2d29287855d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJahy9QAAoJEM4rdWl+aaVI/f8MAMibglEpisn2kbWQV2GmhgLM\nHKENnqUgRIt6e6DpG84tyC6x4qGD9dhsbI6K69RKwWVYwg+/+iFifnZIRY71eGVl\nvmJHm0yk8u5RECEFbLAUxM5kAsRODJY9t8BL994xixnebBl9+nfUtHWOOyoDgoSO\nMZAzK6TzGirdyScHMlIckO9FaGwyO2xkU9Fg2O+N3A/x4WSOuzni3EOUiUJFn4zY\nLKJGbnKPlVlrG75EPpaVSaCOwNAzyzr/7bXhzz1u3jhxiLaIwWOteHNum2xCFBMG\n8jlTnRRHL2qHcsGWnad+k3d3oYgmEQHOs9//nwDkJ2ygY/4AwbErLNZEfSow0LXi\njlsxDXsX/Rtw+e8v9vFhh7jHeLTxy00CK+X8aCYzV7d5sB0J16TLgCF9l6zag50B\nAVSnRAiwHKUIaqLeiQCHXcRXd/HMdsd8RplUqSstXEfqY8Bug9D2Zu4r32odYpcy\ndNki9+mNnAWYal+KyKhGPbQy0G3cDYJEFRybfge2zA==\n=UKZ2\n-----END PGP SIGNATURE-----",
        "payload": "tree b990b04c8a4c1aa12546142a381d354b2ea153e7\nparent f4f4f51f1a940a239c9b406fe3b362bf3303cbce\nauthor MarcoFalke <falke.marco@gmail.com> 1518643855 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518808912 -0500\n\n[doc] dev-notes: Members should be initialized\n\nAlso, remove mention of threads that were removed long ago\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9461473868132a6a23c672b2eea2d29287855d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9461473868132a6a23c672b2eea2d29287855d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9461473868132a6a23c672b2eea2d29287855d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4f4f51f1a940a239c9b406fe3b362bf3303cbce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4f4f51f1a940a239c9b406fe3b362bf3303cbce"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ac1f52b49204bb06fa25292b02331f7d48836778",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9461473868132a6a23c672b2eea2d29287855d/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9461473868132a6a23c672b2eea2d29287855d/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fa9461473868132a6a23c672b2eea2d29287855d",
        "patch": "@@ -238,12 +238,8 @@ Threads\n \n - DumpAddresses : Dumps IP addresses of nodes to peers.dat.\n \n-- ThreadFlushWalletDB : Close the wallet.dat file if it hasn't been used in 500ms.\n-\n - ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.\n \n-- BitcoinMiner : Generates bitcoins (if wallet is enabled).\n-\n - Shutdown : Does an orderly shutdown of everything.\n \n Ignoring IDE/editor files\n@@ -380,6 +376,18 @@ C++ data structures\n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n   that are not language lawyers\n \n+- Initialize all non-static class members where they are defined\n+\n+  - *Rationale*: Initializing the members in the declaration makes it easy to spot uninitialized ones,\n+  and avoids accidentally reading uninitialized memory\n+\n+```cpp\n+class A\n+{\n+    uint32_t m_count{0};\n+}\n+```\n+\n Strings and formatting\n ------------------------\n \n@@ -415,11 +423,11 @@ member name:\n ```c++\n class AddressBookPage\n {\n-    Mode mode;\n+    Mode m_mode;\n }\n \n AddressBookPage::AddressBookPage(Mode _mode) :\n-      mode(_mode)\n+      m_mode(_mode)\n ...\n ```\n "
      },
      {
        "sha": "fcb376c6cb1e642a65d2e0d45064abad0f5a5d95",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9461473868132a6a23c672b2eea2d29287855d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9461473868132a6a23c672b2eea2d29287855d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fa9461473868132a6a23c672b2eea2d29287855d",
        "patch": "@@ -30,12 +30,6 @@\n #include <queue>\n #include <utility>\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// BitcoinMiner\n-//\n-\n-//\n // Unconfirmed transactions in the memory pool often depend on other\n // transactions in the memory pool. When we select transactions from the\n // pool, we select by highest fee rate of a transaction combined with all"
      }
    ]
  },
  {
    "sha": "df47afb60070defaaee519ee39e82bd3d1c73491",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjQ3YWZiNjAwNzBkZWZhYWVlNTE5ZWUzOWU4MmJkM2QxYzczNDkx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-16T20:59:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-16T20:59:34Z"
      },
      "message": "Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\nThis reverts commit 65682da7e57af544abb46a7d8a7f4fdca0c73f56.",
      "tree": {
        "sha": "dbcfc136d8d38e527961ed949f49417d280eced0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbcfc136d8d38e527961ed949f49417d280eced0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df47afb60070defaaee519ee39e82bd3d1c73491",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fdc17133225d1affd1967c96db08bb3c6d57a55",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df47afb60070defaaee519ee39e82bd3d1c73491/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df47afb60070defaaee519ee39e82bd3d1c73491/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=df47afb60070defaaee519ee39e82bd3d1c73491",
        "patch": "@@ -292,7 +292,6 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n-        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2M1OWRjNTAyZjI5Y2YxZDc2MjkwNTU2YzIxZTM2NjE0NWUzYjJl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:09:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:09:37Z"
      },
      "message": "Merge #12464: Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\ndf47afb600 Revert \"[tests] bind functional test nodes to 127.0.0.1\" (John Newbery)\n\nPull request description:\n\n  #12200 was merged without test, and breaks `rpc_bind.py`. (Tested locally by @MarcoFalke and me).\n\n  This PR backs out the change.\n\n  Fixes #12462\n\nTree-SHA512: e92901a0ce05af86486d4f74457953a5502689b03bb2ad9a94f6fd1664385fdda8aa351e601e27ee6580227ea9adb4d7d7fbdc381e69af6b998d9c6f6d358751",
      "tree": {
        "sha": "dbcfc136d8d38e527961ed949f49417d280eced0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbcfc136d8d38e527961ed949f49417d280eced0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJah0iRAAoJENLqSFDnUosl5tkQAJhRLL9h1iUll8PYpWVnv53G\nP91fElv3fXmH2Zo4orBjtSYZ+jZxkDRVxEnnvcr4o1WTxti6OY6GKXwEeH1pNZMQ\nC9Y6XaCHX2wMjSZUZutpwOt8uSR73SAZ6h6mwD1Yk+lxNj8Kt6vvzvTnVAu9AfCc\n9Yi8xunaEKmBvNuz8kqqMLIjgkTzZRA5lU+eyVmNLqHSMSr5EjtB98H9pVXD0iB7\nFgJ22CR2NGW9KKg5sf3L84NoIYI0ZK4NxbztgEZE1cSAnNDBLtnnuW6j2ORHC7l2\npWThiVf1E8lEUShcp3UL7ohW2f7Geu+nl7lpjiHutfSczXwMEirncZd5+RDov1+/\nNyRZJFaPWhHcD38JlL4JOTjQtAKa7mFgh/2MFykrm611o36IVLFkm0BjLhzfqJ3x\nwxjApgJ+wVG5YdUUPw3XZcbfoQEyalCrZ/UR0tede6Zw+XDkfedt/KaFgx7fsCIu\nD8kq9tJbutpv7GikpqLoLyh0/Ln9I54TrNVLWPvhqCFAA0En/G6Lxx9tHFiDseX5\nkaHd2TuQdTVClkAwsYNIQ6suYiHBKX02J9MGpRBPd8V/iQLd/U9+v8SddcsVUoj5\nX9wp3qZJl7pazAwRIM0Rbo4u60+VdnRCfRTj5pkdWoo8OayML7NfyFd/F3i5XEhp\nBLDo0LB0TjS0hdXWKbV7\n=eRfl\n-----END PGP SIGNATURE-----",
        "payload": "tree dbcfc136d8d38e527961ed949f49417d280eced0\nparent 59e032b43cea835cf06f83a5a72685dc02033c48\nparent df47afb60070defaaee519ee39e82bd3d1c73491\nauthor MarcoFalke <falke.marco@gmail.com> 1518815374 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518815377 -0500\n\nMerge #12464: Revert \"[tests] bind functional test nodes to 127.0.0.1\"\n\ndf47afb600 Revert \"[tests] bind functional test nodes to 127.0.0.1\" (John Newbery)\n\nPull request description:\n\n  #12200 was merged without test, and breaks `rpc_bind.py`. (Tested locally by @MarcoFalke and me).\n\n  This PR backs out the change.\n\n  Fixes #12462\n\nTree-SHA512: e92901a0ce05af86486d4f74457953a5502689b03bb2ad9a94f6fd1664385fdda8aa351e601e27ee6580227ea9adb4d7d7fbdc381e69af6b998d9c6f6d358751\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59e032b43cea835cf06f83a5a72685dc02033c48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e032b43cea835cf06f83a5a72685dc02033c48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59e032b43cea835cf06f83a5a72685dc02033c48"
      },
      {
        "sha": "df47afb60070defaaee519ee39e82bd3d1c73491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df47afb60070defaaee519ee39e82bd3d1c73491",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df47afb60070defaaee519ee39e82bd3d1c73491"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7fdc17133225d1affd1967c96db08bb3c6d57a55",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c59dc502f29cf1d76290556c21e366145e3b2e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c59dc502f29cf1d76290556c21e366145e3b2e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=27c59dc502f29cf1d76290556c21e366145e3b2e",
        "patch": "@@ -292,7 +292,6 @@ def initialize_datadir(dirname, n):\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"listenonion=0\\n\")\n-        f.write(\"bind=127.0.0.1\\n\")\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzQ4MWZhNTAzMDEyMDFlZjVhNjA2NzVlZjg5OWFhNmNlOTRjYTAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:20:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-16T21:20:23Z"
      },
      "message": "Merge #12455: Fix bip68 sequence test to reflect updated rpc error message\n\ne710387ca9 test: Fix bip68 sequence test to reflect updated rpc error message (Ben Woosley)\n\nPull request description:\n\n  The message changed in #12356, but this test is in the extended test suite, so it didn't fail on CI.\n\nTree-SHA512: ce800e2636ab7bbba7876aa533e1684e75c37a7d2a119f9c4602fd89ac9215e2e28710a1f27feb642b6737ed858da049ebc52fdd476ff4637e3ac3bb1d8399ce",
      "tree": {
        "sha": "8c6e0652b161642a042ede1802114e30ce29668d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c6e0652b161642a042ede1802114e30ce29668d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJah0sXAAoJENLqSFDnUoslrMYQAKDxWA9Nc4TakRdBROGDzUDK\n0QYszt0vCwxwYs0jxeVWnAqvt6KdQHI+Y3p/RRs+T0HMGeOLki4zR7B+Tr0nh7Nx\ny7Cv8kmd6NvYWkpwpQYneve0a0mzy62KIB+qpzWxll8RT7GHNIi5XnbrgDgHYfIS\nKTbzvR/aPBzxUeHxwQQUZAYCWil/Azxtz9Vls2j/x5Pv5bEjSOLMPZTNdoYA1r6f\nbme1yBabVtzWRpuoREPGzomwi1oXR8DM0YbIKgeqM868ELmhoOwIvUKLfj33/1gZ\n0Bv169qk/8YCXpgU1OMRzpegtjY1fJuMnBgz6A1JedhOHxVCXeYKdOZ4UivSe36+\nhnoDBWD34auqjlZ4AHxTAQpuficenh05UAOkKTgKX/uOrwjOMlJFdxKTHQOwFV/Y\n3AxmHmMQdiqcGpisKH5F0WrXSdC3p+Qd6QkzTZO4H0R4vF41SJwjqwENMbYoTuMB\nbBj/VWk+EBsBlhXHIWm5COQoMZUpFgWhaURTanz7QCfgElPk6ion8mtqBokUmoF5\nmncHOTId+aHHT+ij4DtUnj3M4mVB0q9vOvoDD6VNvO17KzBCUgHSioPIITwXta9x\noRsB3We8A3lbwLTaZVRWjJ+8gcXtLzhC3jlI1wy8rqEbRM1UD66jjgoBYzXrtf+t\nujGW6NvAHMi/6V41fG0/\n=ShKz\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c6e0652b161642a042ede1802114e30ce29668d\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nparent e710387ca95f7fa8ba1aa6f5698843391b87c772\nauthor MarcoFalke <falke.marco@gmail.com> 1518816021 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518816023 -0500\n\nMerge #12455: Fix bip68 sequence test to reflect updated rpc error message\n\ne710387ca9 test: Fix bip68 sequence test to reflect updated rpc error message (Ben Woosley)\n\nPull request description:\n\n  The message changed in #12356, but this test is in the extended test suite, so it didn't fail on CI.\n\nTree-SHA512: ce800e2636ab7bbba7876aa533e1684e75c37a7d2a119f9c4602fd89ac9215e2e28710a1f27feb642b6737ed858da049ebc52fdd476ff4637e3ac3bb1d8399ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      },
      {
        "sha": "e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e710387ca95f7fa8ba1aa6f5698843391b87c772",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e710387ca95f7fa8ba1aa6f5698843391b87c772"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "be01a1ca53d7183b850353a3faf3b5802ce54905",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23481fa50301201ef5a60675ef899aa6ce94ca03/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23481fa50301201ef5a60675ef899aa6ce94ca03/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=23481fa50301201ef5a60675ef899aa6ce94ca03",
        "patch": "@@ -14,7 +14,7 @@\n SEQUENCE_LOCKTIME_MASK = 0x0000ffff\n \n # RPC error for non-BIP68 final transactions\n-NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n+NOT_FINAL_ERROR = \"non-BIP68-final (code 64)\"\n \n class BIP68Test(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjY2MWY5NzFhZWM5ZGZkYWI0NGM2MWMzNDMxYmI1MjMzZDAwY2Uw",
    "commit": {
      "author": {
        "name": "Josh Hartshorn",
        "email": "joshhartshorn1021@gmail.com",
        "date": "2018-02-17T06:01:40Z"
      },
      "committer": {
        "name": "Josh Hartshorn",
        "email": "joshhartshorn1021@gmail.com",
        "date": "2018-02-17T06:19:42Z"
      },
      "message": "fixes #12465 added missing terminating newline character in log message",
      "tree": {
        "sha": "f6d1ab3d4316927c4e9e7c23ad8d45e0a97b55f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d1ab3d4316927c4e9e7c23ad8d45e0a97b55f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0/comments",
    "author": {
      "login": "Aesti",
      "id": 1983634,
      "node_id": "MDQ6VXNlcjE5ODM2MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1983634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aesti",
      "html_url": "https://github.com/Aesti",
      "followers_url": "https://api.github.com/users/Aesti/followers",
      "following_url": "https://api.github.com/users/Aesti/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aesti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aesti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aesti/subscriptions",
      "organizations_url": "https://api.github.com/users/Aesti/orgs",
      "repos_url": "https://api.github.com/users/Aesti/repos",
      "events_url": "https://api.github.com/users/Aesti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aesti/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Aesti",
      "id": 1983634,
      "node_id": "MDQ6VXNlcjE5ODM2MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1983634?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Aesti",
      "html_url": "https://github.com/Aesti",
      "followers_url": "https://api.github.com/users/Aesti/followers",
      "following_url": "https://api.github.com/users/Aesti/following{/other_user}",
      "gists_url": "https://api.github.com/users/Aesti/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Aesti/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Aesti/subscriptions",
      "organizations_url": "https://api.github.com/users/Aesti/orgs",
      "repos_url": "https://api.github.com/users/Aesti/repos",
      "events_url": "https://api.github.com/users/Aesti/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Aesti/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c5d1ee792c8d8a11b8fe129ebb8b4e778e5f4d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b661f971aec9dfdab44c61c3431bb5233d00ce0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b661f971aec9dfdab44c61c3431bb5233d00ce0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "patch": "@@ -1526,7 +1526,7 @@ bool AppInitMain()\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n "
      }
    ]
  },
  {
    "sha": "daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWE4NGIzMzU0MGFhM2JjYjc0YWE4YjBjZjA4MzYyZDY4OGJiNGNl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T07:49:18Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T07:49:24Z"
      },
      "message": "Merge #12029: Build: Add a makefile target for Doxygen documentation\n\na777244e4 Build: Add a makefile target for Doxygen documentation (Andrea Comand)\n\nPull request description:\n\n  You can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\n\n  Fixes: #11949\n\nTree-SHA512: f2361ec7f771227367dd04bba1a444b44e59f13901463a678a5f2f579a10a56d67db2e29552e754e312a1c472a31593b6af189cbaac5cd351a428c57baf5ace7",
      "tree": {
        "sha": "78e80b894eab2329d40de40d420598365c95cf8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78e80b894eab2329d40de40d420598365c95cf8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqH3oQACgkQHrd2uwPH\nki0p5xAAxgtoUVbIA7wJINE47BKiTVpKI+i+dnIXemvwnijcod9hgSBWlrjX5J5X\nux9yuLEH4ObP0YGfJxgXySrvS8bdB9DzXkLV/vFxKCBR4Ovga4Xo2x9bqmDwfyhL\nzTT1qjRhy+9pFiQl13LDQXO71qk8xOJfngpn4yjJluGfRUMchNvEZ7JR3rHjS2Wu\naHKNjJdBoZTnacCb1tUzbg6kdV7pdMnC3MXlRxgKruv7RI1e7r8k0RaLAYdjr2+j\nqF/Ra/Kw65rDoYGuyxxnFQt/GFRl0hgpO08h3PGM3mf58BhhesPEQUy7Ruja/4CA\nhbacO3oHGrGSXKXDohdzVkIg1k0w3JDwovbXjY0C25C6HMIxaI7bUk1utfM14dPD\nFEXCcxwJtRUnfpYFGKj9G1oAW1/ZtZp6iIUGHaP/GAGHQD+JpLnl/koR6P8WBU0t\nuxnd/TTSoELtOHZvFu9aFs+cP1MwzBN14cRiBtITfe0h9MyjqGgWWW5AUjhznplA\nRgM8UQy6zUVUWGa+oI2IdEQVDleuWrdB8dR1pcn9u7iG95FJVfQi1dkXVVPA6RJV\nZ9P3nSO9bWWR1FJ94ydST4kccKeV49zf15RI7kCDpXtJU0vILRzneCUbgn7EF5kD\nHlA2DHBIAC9+I2fO0MMrzIC4bcEzcCaOADH8jw6B56EnbSJSQ+U=\n=gI31\n-----END PGP SIGNATURE-----",
        "payload": "tree 78e80b894eab2329d40de40d420598365c95cf8c\nparent 23481fa50301201ef5a60675ef899aa6ce94ca03\nparent a777244e48227db6d3fd06cd2500cc007dacfb10\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518853758 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518853764 +1100\n\nMerge #12029: Build: Add a makefile target for Doxygen documentation\n\na777244e4 Build: Add a makefile target for Doxygen documentation (Andrea Comand)\n\nPull request description:\n\n  You can now build the doxygen documentation with `make docs` and clean it with `make clean-docs`.\n\n  Fixes: #11949\n\nTree-SHA512: f2361ec7f771227367dd04bba1a444b44e59f13901463a678a5f2f579a10a56d67db2e29552e754e312a1c472a31593b6af189cbaac5cd351a428c57baf5ace7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23481fa50301201ef5a60675ef899aa6ce94ca03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23481fa50301201ef5a60675ef899aa6ce94ca03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23481fa50301201ef5a60675ef899aa6ce94ca03"
      },
      {
        "sha": "a777244e48227db6d3fd06cd2500cc007dacfb10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a777244e48227db6d3fd06cd2500cc007dacfb10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a777244e48227db6d3fd06cd2500cc007dacfb10"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 25,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f345760f2d91ca27fa75facb75da1b792a7f43d5",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -277,6 +277,22 @@ CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n-clean-local:\n+doc/doxygen/.stamp: doc/Doxyfile FORCE\n+\t$(MKDIR_P) $(@D)\n+\t$(DOXYGEN) $^\n+\t$(AM_V_at) touch $@\n+\n+if HAVE_DOXYGEN\n+docs: doc/doxygen/.stamp\n+else\n+docs:\n+\t@echo \"error: doxygen not found\"\n+endif\n+\n+clean-docs:\n+\trm -rf doc/doxygen\n+\n+clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache\n+"
      },
      {
        "sha": "c2e34a52ca1d091eef67075bc565d089c0f9b27a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -93,6 +93,11 @@ AC_PATH_PROG(HEXDUMP,hexdump)\n AC_PATH_TOOL(READELF, readelf)\n AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n+AC_PATH_PROG(DOXYGEN, doxygen)\n+if test -z \"$DOXYGEN\"; then\n+   AC_MSG_WARN([Doxygen not found])\n+fi\n+AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n \n@@ -1260,7 +1265,7 @@ AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n-AC_CONFIG_FILES([doc/Doxyfile])\n+AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])"
      },
      {
        "sha": "2ebfb59c086fd7f41cf0c71167fd03fabf292266",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "patch": "@@ -132,6 +132,8 @@ Not OK (used plenty in the current source, but not picked up):\n A full list of comment syntaxes picked up by doxygen can be found at http://www.stack.nl/~dimitri/doxygen/manual/docblocks.html,\n but if possible use one of the above styles.\n \n+Documentation can be generated with `make docs` and cleaned up with `make clean-docs`.\n+\n Development tips and tricks\n ---------------------------\n "
      }
    ]
  },
  {
    "sha": "eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjkxODM1MzVkNWZjMmRmZThjMGUyNjM3OGYyNjIxZDM0NzNjMzAz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T10:28:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T10:28:50Z"
      },
      "message": "Add setter for g_initial_block_download_completed",
      "tree": {
        "sha": "70b48dc82edef8dd5d44424e46143fff8e0581c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70b48dc82edef8dd5d44424e46143fff8e0581c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqIA/IACgkQHrd2uwPH\nki2RdQ//eqwdT+MIHSdttrUKM/7BTc0v4vZbKEJ3b3b6+h3bOdr9Y+4H3XmQKAWL\nrSjhnBuww5Nc9ArsF9W5HgGqbNwTdSa0AraH1qymVysYrxrX5WHMsJFbPQc5IAZY\nlNUUEDx4zy9Gdb9WEMyFYXLsOG3f7g0ynymBDYgrZQSNUSUD+qeO+uTg7AZQDD/y\nNsozJKnI49TztrlV0Re3SqLRfAi3CqTMi1JAAyDGplc+34INbLk2lKCm0fhfbqSK\n9AuCtOUkzWpySfSZsIz6TOxiOWNuQFibCSHwoZ6Z0kvq8bnlxViVRDo9nRNRmkWF\nVbdyQ1/MND1wp1/wta66LBqpcrpDLtd6NMrKOMW4gb6mIWmk9xYwPUErUF+7taMz\nmfSe2MVH2pSj8Ce+ZBaivWUOcJIe5/Hroo97m48ZUPHvP0Zik2wMZeb1ErghGOOI\n+4DpNmJoX4XiHdJgbzdkaSBnWtr0QeKXzGPNhyniz3N/irtYoGEP+HlWeIaJBTxB\nIckvRG26ZcUp1ectXSDctiO60ItkxxWuVLAM7uzHcOXWaruHVnbQ0ykITzYGLXtb\nOcUJTDjdSMKCJazDKVJ/DWkiO+GNN9hFVH3iZFwlxDKxzTs89HqqDKkRyDVOVUXj\nyWY0kUtTFvfkwXWU3vi1qbImLgWr16lQokHSM9nBNP37IG1sRQM=\n=IR3z\n-----END PGP SIGNATURE-----",
        "payload": "tree 70b48dc82edef8dd5d44424e46143fff8e0581c5\nparent 3f56df5b7564878330ddddddec8afa923a4f8390\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518863330 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518863330 +1100\n\nAdd setter for g_initial_block_download_completed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f56df5b7564878330ddddddec8afa923a4f8390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f56df5b7564878330ddddddec8afa923a4f8390",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f56df5b7564878330ddddddec8afa923a4f8390"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 17,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5a7c998af7ac0d799bb73dc6be9ca85776ba5f4a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -892,7 +892,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n-    g_initial_block_download_completed = !fInitialDownload;\n+    SetServiceFlagsIBDCache(!fInitialDownload);\n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain.\n         std::vector<uint256> vHashes;"
      },
      {
        "sha": "2ec26fbd3e5fb5c7a63a7b36029c1df31218c2b0",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -12,7 +12,7 @@\n # include <arpa/inet.h>\n #endif\n \n-std::atomic<bool> g_initial_block_download_completed(false);\n+static std::atomic<bool> g_initial_block_download_completed(false);\n \n namespace NetMsgType {\n const char *VERSION=\"version\";\n@@ -129,6 +129,17 @@ bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n }\n \n \n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n+        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n+    }\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+void SetServiceFlagsIBDCache(bool state) {\n+    g_initial_block_download_completed = state;\n+}\n+\n \n CAddress::CAddress() : CService()\n {"
      },
      {
        "sha": "e518d1194401b0ba21355656c27c8374654af2c2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9183535d5fc2dfe8c0e26378f2621d3473c303/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "patch": "@@ -278,7 +278,6 @@ enum ServiceFlags : uint64_t {\n     // BIP process.\n };\n \n-extern std::atomic<bool> g_initial_block_download_completed;\n /**\n  * Gets the set of service flags which are \"desirable\" for a given peer.\n  *\n@@ -303,12 +302,10 @@ extern std::atomic<bool> g_initial_block_download_completed;\n  * If the NODE_NONE return value is changed, contrib/seeds/makeseeds.py\n  * should be updated appropriately to filter for the same nodes.\n  */\n-static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n-    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n-        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n-    }\n-    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n-}\n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services);\n+\n+/** Set the current IBD status in order to figure out the desirable service flags */\n+void SetServiceFlagsIBDCache(bool status);\n \n /**\n  * A shortcut for (services & GetDesirableServiceFlags(services))"
      }
    ]
  },
  {
    "sha": "294a766eb85068ba6e397702b1aac50dcae8fb37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTRhNzY2ZWI4NTA2OGJhNmUzOTc3MDJiMWFhYzUwZGNhZThmYjM3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:17:06Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:17:24Z"
      },
      "message": "Merge #12468: Add missing newline in init.cpp log message\n\n8b661f971 fixes #12465 added missing terminating newline character in log message (Josh Hartshorn)\n\nPull request description:\n\n  Adding missing new line as detailed in #12465\n\nTree-SHA512: 48f1e3f892f7c13b862d24b4e807cc42310001cab65d771ddf758155f727554bf13c59fa9a6c9fb93d1d0466f03f142289b5fcad9d7938fd55b1a268fc1307ed",
      "tree": {
        "sha": "36b650d618d912eb6ba51cef1479a845d883cac5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36b650d618d912eb6ba51cef1479a845d883cac5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqID0QACgkQHrd2uwPH\nki0wkhAAjnFDtGuDL+uB/vdAlrNXISnGrENX28vWEHcOhT+e2SPdUQj1aMG65hVA\nHV366G/fHmCLTmm9souNGK4TEBTPHw5omLrYDpmiYFbEA5XnDf1Ry6sGkJM9wI0j\nEqGgoMEvznuWEvut0HtPaT+fksTExhrir8/omkOhEokusJBbwvdlrJqnkjB0LFwF\nanmAfeV3BqQLlfq0leAB7mcI8F0OLTprjTZllJ9FAnGPoXQRUw3KnBwkz9vVgPJu\npWRp2whclHTL1coRPdNeH9166Wd5DojXwgBIUB+xQVysm3k/E7Ycl5rFpssOBF6N\nIuQl/0zXpN0M6nV3/xXKsqbVfD+RSw6CdXYxoUAoIn2Z4mx2IoolOAyJdISa+jbl\nEVCsWixu6m5NBgZTNDIKroolBodi/jfqoBJizaLaEmj/xEFKrZjlfxFl1ZaUeoT0\nXZpOW4jLFXbTVmlLCGpWTUF5IAc8zLgjKAJozeTr9XqyDU0xdhES+JAdgpRSBLVW\nbI3I8NbTUnsq+Fl1etFUtydDNTik1WJrNfnPgCSDo4GXphHIliEUbV/xEO5PmzAC\n6A+Al6/tFsonmH3BkbPVttFcc9an9vUGXzFvaQyQSg4XZKmyOU2Px/06Da4mwF7z\nf7u/2sJzPuOLPrgZY+ZTUVXDKe1iGXHTrU7kwYEFGbnBZq7kHt8=\n=K3Gj\n-----END PGP SIGNATURE-----",
        "payload": "tree 36b650d618d912eb6ba51cef1479a845d883cac5\nparent daa84b33540aa3bcb74aa8b0cf08362d688bb4ce\nparent 8b661f971aec9dfdab44c61c3431bb5233d00ce0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518866226 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518866244 +1100\n\nMerge #12468: Add missing newline in init.cpp log message\n\n8b661f971 fixes #12465 added missing terminating newline character in log message (Josh Hartshorn)\n\nPull request description:\n\n  Adding missing new line as detailed in #12465\n\nTree-SHA512: 48f1e3f892f7c13b862d24b4e807cc42310001cab65d771ddf758155f727554bf13c59fa9a6c9fb93d1d0466f03f142289b5fcad9d7938fd55b1a268fc1307ed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/294a766eb85068ba6e397702b1aac50dcae8fb37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/daa84b33540aa3bcb74aa8b0cf08362d688bb4ce"
      },
      {
        "sha": "8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b661f971aec9dfdab44c61c3431bb5233d00ce0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b661f971aec9dfdab44c61c3431bb5233d00ce0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5c5d1ee792c8d8a11b8fe129ebb8b4e778e5f4d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/294a766eb85068ba6e397702b1aac50dcae8fb37/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/294a766eb85068ba6e397702b1aac50dcae8fb37/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=294a766eb85068ba6e397702b1aac50dcae8fb37",
        "patch": "@@ -1526,7 +1526,7 @@ bool AppInitMain()\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n-                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\",\n+                        LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; only checking available blocks\\n\",\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n "
      }
    ]
  },
  {
    "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTk4ZGZlZWJmNThiOGZjOWI3Yzk2NmFlMGY5OWFkMDc2MGQ3ODAw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:26:46Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-17T11:27:08Z"
      },
      "message": "Merge #10583: [RPC] Split part of validateaddress into getaddressinfo\n\nb22cce014 scripted-diff: validateaddress to getaddressinfo in tests (Andrew Chow)\nb98bfc5ed Create getaddressinfo RPC and deprecate parts of validateaddress (Andrew Chow)\n1598f3230 [rpc] Move DescribeAddressVisitor to rpc/util (John Newbery)\n39633ecd5 [rpc] split wallet and non-wallet parts of DescribeAddressVisitor (John Newbery)\n\nPull request description:\n\n  This PR makes a new RPC command called `getaddressinfo` which relies on the wallet. It contains all of `validateaddress`'s address info stuff. Those parts in `validateaddress` have been marked as deprecated. The tests have been updated to use `getaddressinfo` except the `disablewallet` test which is the only test that actually uses `validateaddress` to validate an address.\n\nTree-SHA512: ce00ed0f2416200b8de1e0a75e8517c024be0b6153457d302c3879b3491cce28191e7c29aed08ec7d2eeeadc62918f5c43a7cb79cd2e4b6d9291bd83ec31c852",
      "tree": {
        "sha": "50f3c13cc873959396d00038baa6ee297551d289",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50f3c13cc873959396d00038baa6ee297551d289"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqIEYwACgkQHrd2uwPH\nki1YHw/9EvAe//UeMeK0aOrF4VBHJ2RwI9BJa30guTNwUGk2TnMl9WtyWpEoJL4n\nJ/1/ixXTdbTGI2KkedUll0XukCDDg2sc+8pQdSFqqKsznZZWxctO7t5/sBegg0vC\nBMD1Ecfn9p6uyMwX8Q61CZx6+qXLRyB4GAnKwhY2GoXBtYTLPd5fq24dRWC1blVt\nCtKr01yCx3uoVVEmYhmhuRtBo/fQtamnlnvpjcm8z1n9npRKWVnG3uDJBRdjauJO\nCIYdza6RhEl0Vfmgwm6B2Ex0PJKbmEjw6WBrX+VRg85Y7yBPX8LyYIk/+4c8l7On\nx74jOO35c8BmMiX7yNojqYHDCl4Plucbp0Xe+f7PqX3sFVyeJ/BPdTjLWR6g622S\nNbXMcl2LJatsFgCm3f8XNPip1Oplt1+DC7Qo+7Udqudb2Gybyv4GJQ+Ihyowkt7b\nzqkjUcDWh8HXTI1qBvD1NBee7fM6E4zKXMFSQ+ev2J50Qx4mLYDVor0BXpxDWBHB\nrNmrICSfWHbDGB7qkr2hDHzIWKTsZ7hAK5z6dj8a3ZIluPR/WpHJfKA4Wg0i1WPe\n740eB6aiwuU4b+TAF1tOl5ZTwZkcwsV90IDQ4oOPxowx+mqCXqVZz7YjlxxCCPLo\ntUbYGmFPkHxDg+GdyB4CF4ULk9UQoVEXAmQ/UBkCj9eRV2RRjbk=\n=rMvN\n-----END PGP SIGNATURE-----",
        "payload": "tree 50f3c13cc873959396d00038baa6ee297551d289\nparent 294a766eb85068ba6e397702b1aac50dcae8fb37\nparent b22cce014852b082d80f1cc35f902b375cba0318\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1518866806 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1518866828 +1100\n\nMerge #10583: [RPC] Split part of validateaddress into getaddressinfo\n\nb22cce014 scripted-diff: validateaddress to getaddressinfo in tests (Andrew Chow)\nb98bfc5ed Create getaddressinfo RPC and deprecate parts of validateaddress (Andrew Chow)\n1598f3230 [rpc] Move DescribeAddressVisitor to rpc/util (John Newbery)\n39633ecd5 [rpc] split wallet and non-wallet parts of DescribeAddressVisitor (John Newbery)\n\nPull request description:\n\n  This PR makes a new RPC command called `getaddressinfo` which relies on the wallet. It contains all of `validateaddress`'s address info stuff. Those parts in `validateaddress` have been marked as deprecated. The tests have been updated to use `getaddressinfo` except the `disablewallet` test which is the only test that actually uses `validateaddress` to validate an address.\n\nTree-SHA512: ce00ed0f2416200b8de1e0a75e8517c024be0b6153457d302c3879b3491cce28191e7c29aed08ec7d2eeeadc62918f5c43a7cb79cd2e4b6d9291bd83ec31c852\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "294a766eb85068ba6e397702b1aac50dcae8fb37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/294a766eb85068ba6e397702b1aac50dcae8fb37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/294a766eb85068ba6e397702b1aac50dcae8fb37"
      },
      {
        "sha": "b22cce014852b082d80f1cc35f902b375cba0318",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22cce014852b082d80f1cc35f902b375cba0318",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22cce014852b082d80f1cc35f902b375cba0318"
      }
    ],
    "stats": {
      "total": 729,
      "additions": 427,
      "deletions": 302
    },
    "files": [
      {
        "sha": "9ca2b2c82a94a572612af6b5fccff8c339268888",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -135,10 +135,10 @@ BITCOIN_CORE_H = \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n+  script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n-  script/ismine.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -216,7 +216,6 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/safemode.cpp \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n-  script/ismine.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\\n@@ -333,6 +332,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n+  script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   warnings.cpp \\\n@@ -389,10 +389,10 @@ endif\n \n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n-  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "13c27299f8980331ff6089ab124fec664dc32625",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -35,6 +35,7 @@ bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n bench_bench_bitcoin_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_WALLET) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n@@ -51,7 +52,6 @@ endif\n \n if ENABLE_WALLET\n bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "61bd59e9edab595ac14632cb63bd370d0d5904fa",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 186,
        "changes": 207,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -33,221 +33,56 @@\n \n #include <univalue.h>\n \n-#ifdef ENABLE_WALLET\n-class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n-{\n-public:\n-    CWallet * const pwallet;\n-\n-    explicit DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n-\n-    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n-    {\n-        // Always present: script type and redeemscript\n-        txnouttype which_type;\n-        std::vector<std::vector<unsigned char>> solutions_data;\n-        Solver(subscript, which_type, solutions_data);\n-        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n-        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n-\n-        CTxDestination embedded;\n-        UniValue a(UniValue::VARR);\n-        if (ExtractDestination(subscript, embedded)) {\n-            // Only when the script corresponds to an address.\n-            UniValue subobj = boost::apply_visitor(*this, embedded);\n-            subobj.pushKV(\"address\", EncodeDestination(embedded));\n-            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n-            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n-            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n-            if (include_addresses) a.push_back(EncodeDestination(embedded));\n-        } else if (which_type == TX_MULTISIG) {\n-            // Also report some information on multisig scripts (which do not have a corresponding address).\n-            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n-            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n-            UniValue pubkeys(UniValue::VARR);\n-            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n-                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n-                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n-                pubkeys.push_back(HexStr(key.begin(), key.end()));\n-            }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n-        }\n-\n-        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n-        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n-        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n-        // inspecting multisig participants.\n-        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n-    }\n-\n-    UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n-\n-    UniValue operator()(const CKeyID &keyID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey vchPubKey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n-            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n-            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const CScriptID &scriptID) const {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", false);\n-        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n-            ProcessSubScript(subscript, obj, true);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0KeyHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CPubKey pubkey;\n-        obj.pushKV(\"isscript\", false);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n-            obj.pushKV(\"pubkey\", HexStr(pubkey));\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"isscript\", true);\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", 0);\n-        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n-        CRIPEMD160 hasher;\n-        uint160 hash;\n-        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n-        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n-            ProcessSubScript(subscript, obj);\n-        }\n-        return obj;\n-    }\n-\n-    UniValue operator()(const WitnessUnknown& id) const\n-    {\n-        UniValue obj(UniValue::VOBJ);\n-        CScript subscript;\n-        obj.pushKV(\"iswitness\", true);\n-        obj.pushKV(\"witness_version\", (int)id.version);\n-        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n-        return obj;\n-    }\n-};\n-#endif\n-\n UniValue validateaddress(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"validateaddress \\\"address\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n+            \"DEPRECATION WARNING: Parts of this command have been deprecated and moved to getaddressinfo. Clients must\\n\"\n+            \"transition to using getaddressinfo to access this information before upgrading to v0.18. The following deprecated\\n\"\n+            \"fields have moved to getaddressinfo and will only be shown here with -deprecatedrpc=validateaddress: ismine, iswatchonly,\\n\"\n+            \"script, hex, pubkeys, sigsrequired, pubkey, addresses, embedded, iscompressed, account, timestamp, hdkeypath, kdmasterkeyid.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to validate\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n-            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n-            \"  \\\"isscript\\\" : true|false,      (boolean, optional) If the address is P2SH or P2WSH. Not included for unknown witness types.\\n\"\n-            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is P2WPKH, P2WSH, or an unknown witness version\\n\"\n-            \"  \\\"witness_version\\\" : version   (number, optional) For all witness output types, gives the version number.\\n\"\n-            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) For all witness output types, gives the script or key hash present in the address.\\n\"\n-            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n-            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the P2SH or P2WSH address\\n\"\n-            \"  \\\"addresses\\\"                   (string, optional) Array of addresses associated with the known redeemscript (only if \\\"iswitness\\\" is false). This field is superseded by the \\\"pubkeys\\\" field and the address inside \\\"embedded\\\".\\n\"\n-            \"    [\\n\"\n-            \"      \\\"address\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"    [\\n\"\n-            \"      \\\"pubkey\\\"\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n-            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n-            \"  \\\"embedded\\\" : {...},           (object, optional) information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all validateaddress output fields for the embedded address, excluding \\\"isvalid\\\", metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n-            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n-            \"  \\\"account\\\" : \\\"account\\\"         (string) DEPRECATED. The account associated with the address, \\\"\\\" is the default account\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n-            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n             + HelpExampleRpc(\"validateaddress\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n         );\n \n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n     if (isValid)\n     {\n-        std::string currentAddress = EncodeDestination(dest);\n-        ret.pushKV(\"address\", currentAddress);\n-\n-        CScript scriptPubKey = GetScriptForDestination(dest);\n-        ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n-        ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n-        ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n-        ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n-            ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n-        }\n-        if (pwallet) {\n-            const CKeyMetadata* meta = nullptr;\n-            CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n-            if (!key_id.IsNull()) {\n-                auto it = pwallet->mapKeyMetadata.find(key_id);\n-                if (it != pwallet->mapKeyMetadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (!meta) {\n-                auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n-                if (it != pwallet->m_script_metadata.end()) {\n-                    meta = &it->second;\n-                }\n-            }\n-            if (meta) {\n-                ret.pushKV(\"timestamp\", meta->nCreateTime);\n-                if (!meta->hdKeypath.empty()) {\n-                    ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n-                    ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n-                }\n-            }\n+        if (!::vpwallets.empty() && IsDeprecatedRPCEnabled(\"validateaddress\")) {\n+            ret.pushKVs(getaddressinfo(request));\n         }\n #endif\n+        if (ret[\"address\"].isNull()) {\n+            std::string currentAddress = EncodeDestination(dest);\n+            ret.pushKV(\"address\", currentAddress);\n+\n+            CScript scriptPubKey = GetScriptForDestination(dest);\n+            ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));;\n+\n+            UniValue detail = DescribeAddress(dest);\n+            ret.pushKVs(detail);\n+        }\n     }\n     return ret;\n }"
      },
      {
        "sha": "cdcb68d15f94a9c13f14adb799c3e0dc28581591",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -66,3 +66,64 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n \n     return result;\n }\n+\n+class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    explicit DescribeAddressVisitor() {}\n+\n+    UniValue operator()(const CNoDestination& dest) const\n+    {\n+        return UniValue(UniValue::VOBJ);\n+    }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", false);\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", false);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"isscript\", true);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", 0);\n+        obj.pushKV(\"witness_program\", HexStr(id.begin(), id.end()));\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        obj.pushKV(\"iswitness\", true);\n+        obj.pushKV(\"witness_version\", (int)id.version);\n+        obj.pushKV(\"witness_program\", HexStr(id.program, id.program + id.length));\n+        return obj;\n+    }\n+};\n+\n+UniValue DescribeAddress(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DescribeAddressVisitor(), dest);\n+}"
      },
      {
        "sha": "5380d45a8356288ae66bdd2623406cdbda3cdbb1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -5,6 +5,13 @@\n #ifndef BITCOIN_RPC_UTIL_H\n #define BITCOIN_RPC_UTIL_H\n \n+#include <pubkey.h>\n+#include <script/standard.h>\n+#include <univalue.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/static_visitor.hpp>\n+\n #include <string>\n #include <vector>\n \n@@ -16,4 +23,6 @@ CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n \n+UniValue DescribeAddress(const CTxDestination& dest);\n+\n #endif // BITCOIN_RPC_UTIL_H"
      },
      {
        "sha": "b504b842741b4f8110ac46a4f1d97f41a4848c57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -25,6 +25,7 @@\n #include <utilmoneystr.h>\n #include <wallet/coincontrol.h>\n #include <wallet/feebumper.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -3514,6 +3515,209 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     return response;\n }\n \n+class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n+{\n+public:\n+    CWallet * const pwallet;\n+\n+    void ProcessSubScript(const CScript& subscript, UniValue& obj, bool include_addresses = false) const\n+    {\n+        // Always present: script type and redeemscript\n+        txnouttype which_type;\n+        std::vector<std::vector<unsigned char>> solutions_data;\n+        Solver(subscript, which_type, solutions_data);\n+        obj.pushKV(\"script\", GetTxnOutputType(which_type));\n+        obj.pushKV(\"hex\", HexStr(subscript.begin(), subscript.end()));\n+\n+        CTxDestination embedded;\n+        UniValue a(UniValue::VARR);\n+        if (ExtractDestination(subscript, embedded)) {\n+            // Only when the script corresponds to an address.\n+            UniValue subobj(UniValue::VOBJ);\n+            UniValue detail = DescribeAddress(embedded);\n+            subobj.pushKVs(detail);\n+            UniValue wallet_detail = boost::apply_visitor(*this, embedded);\n+            subobj.pushKVs(wallet_detail);\n+            subobj.pushKV(\"address\", EncodeDestination(embedded));\n+            subobj.pushKV(\"scriptPubKey\", HexStr(subscript.begin(), subscript.end()));\n+            // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n+            if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n+            obj.pushKV(\"embedded\", std::move(subobj));\n+            if (include_addresses) a.push_back(EncodeDestination(embedded));\n+        } else if (which_type == TX_MULTISIG) {\n+            // Also report some information on multisig scripts (which do not have a corresponding address).\n+            // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n+            obj.pushKV(\"sigsrequired\", solutions_data[0][0]);\n+            UniValue pubkeys(UniValue::VARR);\n+            for (size_t i = 1; i < solutions_data.size() - 1; ++i) {\n+                CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n+                if (include_addresses) a.push_back(EncodeDestination(key.GetID()));\n+                pubkeys.push_back(HexStr(key.begin(), key.end()));\n+            }\n+            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+        }\n+\n+        // The \"addresses\" field is confusing because it refers to public keys using their P2PKH address.\n+        // For that reason, only add the 'addresses' field when needed for backward compatibility. New applications\n+        // can use the 'embedded'->'address' field for P2SH or P2WSH wrapped addresses, and 'pubkeys' for\n+        // inspecting multisig participants.\n+        if (include_addresses) obj.pushKV(\"addresses\", std::move(a));\n+    }\n+\n+    explicit DescribeWalletAddressVisitor(CWallet* _pwallet) : pwallet(_pwallet) {}\n+\n+    UniValue operator()(const CNoDestination& dest) const { return UniValue(UniValue::VOBJ); }\n+\n+    UniValue operator()(const CKeyID& keyID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey vchPubKey;\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n+            obj.pushKV(\"pubkey\", HexStr(vchPubKey));\n+            obj.pushKV(\"iscompressed\", vchPubKey.IsCompressed());\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const CScriptID& scriptID) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n+            ProcessSubScript(subscript, obj, IsDeprecatedRPCEnabled(\"validateaddress\"));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0KeyHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CPubKey pubkey;\n+        if (pwallet && pwallet->GetPubKey(CKeyID(id), pubkey)) {\n+            obj.pushKV(\"pubkey\", HexStr(pubkey));\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        UniValue obj(UniValue::VOBJ);\n+        CScript subscript;\n+        CRIPEMD160 hasher;\n+        uint160 hash;\n+        hasher.Write(id.begin(), 32).Finalize(hash.begin());\n+        if (pwallet && pwallet->GetCScript(CScriptID(hash), subscript)) {\n+            ProcessSubScript(subscript, obj);\n+        }\n+        return obj;\n+    }\n+\n+    UniValue operator()(const WitnessUnknown& id) const { return UniValue(UniValue::VOBJ); }\n+};\n+\n+UniValue DescribeWalletAddress(CWallet* pwallet, const CTxDestination& dest)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    UniValue detail = DescribeAddress(dest);\n+    ret.pushKVs(detail);\n+    ret.pushKVs(boost::apply_visitor(DescribeWalletAddressVisitor(pwallet), dest));\n+    return ret;\n+}\n+\n+UniValue getaddressinfo(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1) {\n+        throw std::runtime_error(\n+            \"getaddressinfo \\\"address\\\"\\n\"\n+            \"\\nReturn information about the given bitcoin address. Some information requires the address\\n\"\n+            \"to be in the wallet.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"address\\\"                    (string, required) The bitcoin address to get the information of.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n+            \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex encoded scriptPubKey generated by the address\\n\"\n+            \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n+            \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n+            \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n+            \"  \\\"witness_version\\\" : version   (numeric, optional) The version number of the witness program\\n\"\n+            \"  \\\"witness_program\\\" : \\\"hex\\\"     (string, optional) The hex value of the witness program\\n\"\n+            \"  \\\"script\\\" : \\\"type\\\"             (string, optional) The output script type. Only if \\\"isscript\\\" is true and the redeemscript is known. Possible types: nonstandard, pubkey, pubkeyhash, scripthash, multisig, nulldata, witness_v0_keyhash, witness_v0_scripthash, witness_unknown\\n\"\n+            \"  \\\"hex\\\" : \\\"hex\\\",                (string, optional) The redeemscript for the p2sh address\\n\"\n+            \"  \\\"pubkeys\\\"                     (string, optional) Array of pubkeys associated with the known redeemscript (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"    [\\n\"\n+            \"      \\\"pubkey\\\"\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"  \\\"sigsrequired\\\" : xxxxx        (numeric, optional) Number of signatures required to spend multisig output (only if \\\"script\\\" is \\\"multisig\\\")\\n\"\n+            \"  \\\"pubkey\\\" : \\\"publickeyhex\\\",    (string, optional) The hex value of the raw public key, for single-key addresses (possibly embedded in P2SH or P2WSH)\\n\"\n+            \"  \\\"embedded\\\" : {...},           (object, optional) Information about the address embedded in P2SH or P2WSH, if relevant and known. It includes all getaddressinfo output fields for the embedded address, excluding metadata (\\\"timestamp\\\", \\\"hdkeypath\\\", \\\"hdmasterkeyid\\\") and relation to the wallet (\\\"ismine\\\", \\\"iswatchonly\\\", \\\"account\\\").\\n\"\n+            \"  \\\"iscompressed\\\" : true|false,  (boolean) If the address is compressed\\n\"\n+            \"  \\\"account\\\" : \\\"account\\\"         (string) The account associated with the address, \\\"\\\" is the default account\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,      (number, optional) The creation time of the key if available in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"hdkeypath\\\" : \\\"keypath\\\"       (string, optional) The HD keypath if the key is HD and available\\n\"\n+            \"  \\\"hdmasterkeyid\\\" : \\\"<hash160>\\\" (string, optional) The Hash160 of the HD master pubkey\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+            + HelpExampleRpc(\"getaddressinfo\", \"\\\"1PSSGeFHDnKNxiEyFrD1wcEaHr9hrQDDWc\\\"\")\n+        );\n+    }\n+\n+    LOCK(pwallet->cs_wallet);\n+\n+    UniValue ret(UniValue::VOBJ);\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+    // Make sure the destination is valid\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+    }\n+\n+    std::string currentAddress = EncodeDestination(dest);\n+    ret.pushKV(\"address\", currentAddress);\n+\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    ret.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n+\n+    isminetype mine = IsMine(*pwallet, dest);\n+    ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n+    ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    UniValue detail = DescribeWalletAddress(pwallet, dest);\n+    ret.pushKVs(detail);\n+    if (pwallet->mapAddressBook.count(dest)) {\n+        ret.pushKV(\"account\", pwallet->mapAddressBook[dest].name);\n+    }\n+    const CKeyMetadata* meta = nullptr;\n+    CKeyID key_id = GetKeyForDestination(*pwallet, dest);\n+    if (!key_id.IsNull()) {\n+        auto it = pwallet->mapKeyMetadata.find(key_id);\n+        if (it != pwallet->mapKeyMetadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (!meta) {\n+        auto it = pwallet->m_script_metadata.find(CScriptID(scriptPubKey));\n+        if (it != pwallet->m_script_metadata.end()) {\n+            meta = &it->second;\n+        }\n+    }\n+    if (meta) {\n+        ret.pushKV(\"timestamp\", meta->nCreateTime);\n+        if (!meta->hdKeypath.empty()) {\n+            ret.pushKV(\"hdkeypath\", meta->hdKeypath);\n+            ret.pushKV(\"hdmasterkeyid\", meta->hdMasterKeyID.GetHex());\n+        }\n+    }\n+    return ret;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3543,6 +3747,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n     { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n     { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n     { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },"
      },
      {
        "sha": "43cf0416650c1b0408eda63ee829ffdb226b955b",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -10,6 +10,7 @@\n class CRPCTable;\n class CWallet;\n class JSONRPCRequest;\n+class UniValue;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n@@ -25,4 +26,6 @@ std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n+UniValue getaddressinfo(const JSONRPCRequest& request);\n+\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "9093cc04e8638ed06151ec8d24a5458c035cdd61",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -96,7 +96,7 @@ def run_test(self):\n         wit_ids = [] # wit_ids[NODE][VER] is an array of txids that spend to a witness version VER pkscript to an address for NODE via bare witness\n         for i in range(3):\n             newaddress = self.nodes[i].getnewaddress()\n-            self.pubkey.append(self.nodes[i].validateaddress(newaddress)[\"pubkey\"])\n+            self.pubkey.append(self.nodes[i].getaddressinfo(newaddress)[\"pubkey\"])\n             multiscript = CScript([OP_1, hex_str_to_bytes(self.pubkey[-1]), OP_1, OP_CHECKMULTISIG])\n             p2sh_addr = self.nodes[i].addwitnessaddress(newaddress)\n             bip173_addr = self.nodes[i].addwitnessaddress(newaddress, False)\n@@ -274,8 +274,8 @@ def run_test(self):\n         uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n         self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n         compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n-        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n-        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+        assert ((self.nodes[0].getaddressinfo(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].getaddressinfo(compressed_spendable_address[0])['iscompressed'] == True))\n \n         self.nodes[0].importpubkey(pubkeys[0])\n         compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n@@ -308,7 +308,7 @@ def run_test(self):\n         solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with compressed keys should always be spendable\n@@ -325,7 +325,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # bare and p2sh multisig with uncompressed keys should always be spendable\n@@ -342,7 +342,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -355,7 +355,7 @@ def run_test(self):\n                 solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n \n         for i in uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n@@ -395,7 +395,7 @@ def run_test(self):\n \n         importlist = []\n         for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n                 importlist.append(bytes_to_hex_str(bare))\n@@ -473,7 +473,7 @@ def run_test(self):\n         premature_witaddress = []\n \n         for i in compressed_spendable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n@@ -485,7 +485,7 @@ def run_test(self):\n                 spendable_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in uncompressed_spendable_address + uncompressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n                 # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n@@ -496,7 +496,7 @@ def run_test(self):\n                 unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n \n         for i in compressed_solvable_address:\n-            v = self.nodes[0].validateaddress(i)\n+            v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 # P2WSH multisig without private key are seen after addwitnessaddress\n                 [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n@@ -519,7 +519,7 @@ def run_test(self):\n             assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n-        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        v = self.nodes[0].getaddressinfo(compressed_solvable_address[1])\n         self.nodes[0].importaddress(v['hex'],\"\",False,True)\n         for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n             witaddress = self.nodes[0].addwitnessaddress(i)"
      },
      {
        "sha": "b94b9d8fae2c4ab6af0804488e91f30c106b56c5",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -9,7 +9,7 @@ class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], [\"-deprecatedrpc=validateaddress\"]]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -18,10 +18,13 @@ def run_test(self):\n         # self.log.info(\"Make sure that -deprecatedrpc=createmultisig allows it to take addresses\")\n         # assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [self.nodes[0].getnewaddress()])\n         # self.nodes[1].createmultisig(1, [self.nodes[1].getnewaddress()])\n-        #\n-        # There are currently no deprecated RPC methods in master, so this\n-        # test is currently empty.\n-        pass\n+\n+        self.log.info(\"Test validateaddress deprecation\")\n+        SOME_ADDRESS = \"mnvGjUy3NMj67yJ6gkK5o9e5RS33Z2Vqcu\" # This is just some random address to pass as a parameter to validateaddress\n+        dep_validate_address = self.nodes[0].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" not in dep_validate_address\n+        not_dep_val = self.nodes[1].validateaddress(SOME_ADDRESS)\n+        assert \"ismine\" in not_dep_val\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      },
      {
        "sha": "de436e3ea1055c424151e821f6d0ea10b08900cd",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         assert_equal(rawmatch[\"changepos\"], -1)\n \n         watchonly_address = self.nodes[0].getnewaddress()\n-        watchonly_pubkey = self.nodes[0].validateaddress(watchonly_address)[\"pubkey\"]\n+        watchonly_pubkey = self.nodes[0].getaddressinfo(watchonly_address)[\"pubkey\"]\n         watchonly_amount = Decimal(200)\n         self.nodes[3].importpubkey(watchonly_pubkey, \"\", True)\n         watchonly_txid = self.nodes[0].sendtoaddress(watchonly_address, watchonly_amount)\n@@ -371,8 +371,8 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n \n@@ -401,11 +401,11 @@ def run_test(self):\n         addr4 = self.nodes[1].getnewaddress()\n         addr5 = self.nodes[1].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[1].validateaddress(addr2)\n-        addr3Obj = self.nodes[1].validateaddress(addr3)\n-        addr4Obj = self.nodes[1].validateaddress(addr4)\n-        addr5Obj = self.nodes[1].validateaddress(addr5)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[1].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[1].getaddressinfo(addr3)\n+        addr4Obj = self.nodes[1].getaddressinfo(addr4)\n+        addr5Obj = self.nodes[1].getaddressinfo(addr5)\n \n         mSigObj = self.nodes[1].addmultisigaddress(4, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey'], addr4Obj['pubkey'], addr5Obj['pubkey']])['address']\n \n@@ -431,8 +431,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n "
      },
      {
        "sha": "e4b8b2ec2bf38e8452754728b059aba6715c8b56",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -81,7 +81,7 @@ def run_test(self):\n                            {\"category\":\"receive\",\"amount\":Decimal(\"0.44\")},\n                            {\"txid\":txid, \"account\" : \"toself\"} )\n \n-        pubkey = self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['pubkey']\n+        pubkey = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n         multisig = self.nodes[1].createmultisig(1, [pubkey])\n         self.nodes[0].importaddress(multisig[\"redeemScript\"], \"watchonly\", False, True)\n         txid = self.nodes[1].sendtoaddress(multisig[\"address\"], 0.1)"
      },
      {
        "sha": "2cb902e8f00014aa088fdf63c8eb0a74707d7589",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -146,8 +146,8 @@ def run_test(self):\n         addr1 = self.nodes[2].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[2].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[2].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         # Tests for createmultisig and addmultisigaddress\n         assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n@@ -173,9 +173,9 @@ def run_test(self):\n         addr2 = self.nodes[2].getnewaddress()\n         addr3 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n-        addr3Obj = self.nodes[2].validateaddress(addr3)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n+        addr3Obj = self.nodes[2].getaddressinfo(addr3)\n \n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n \n@@ -219,12 +219,12 @@ def run_test(self):\n         addr1 = self.nodes[1].getnewaddress()\n         addr2 = self.nodes[2].getnewaddress()\n \n-        addr1Obj = self.nodes[1].validateaddress(addr1)\n-        addr2Obj = self.nodes[2].validateaddress(addr2)\n+        addr1Obj = self.nodes[1].getaddressinfo(addr1)\n+        addr2Obj = self.nodes[2].getaddressinfo(addr2)\n \n         self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n         mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-        mSigObjValid = self.nodes[2].validateaddress(mSigObj)\n+        mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n \n         txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n         decTx = self.nodes[0].gettransaction(txId)"
      },
      {
        "sha": "e1e01570cbf6f29b2c0550d7f3d9acbc1d396b1b",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -149,7 +149,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n     else:\n         addr = key_to_p2sh_p2wpkh(pubkey) if encode_p2sh else key_to_p2wpkh(pubkey)\n     if not encode_p2sh:\n-        assert_equal(node.validateaddress(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n+        assert_equal(node.getaddressinfo(addr)['scriptPubKey'], witness_script(use_p2wsh, pubkey))\n     return node.createrawtransaction([utxo], {addr: amount})\n \n # Create a transaction spending a given utxo to a segwit output corresponding"
      },
      {
        "sha": "5d2428e6ef259a1b705f269348905f17facb235f",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -93,8 +93,8 @@ def get_balances(self, confirmed=True):\n \n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n-        info = self.nodes[node].validateaddress(address)\n-        assert(info['isvalid'])\n+        info = self.nodes[node].getaddressinfo(address)\n+        assert(self.nodes[node].validateaddress(address)['isvalid'])\n         if not multisig and typ == 'legacy':\n             # P2PKH\n             assert(not info['isscript'])"
      },
      {
        "sha": "b644f3495c6fe739aba1420f9ac6f94d943937c8",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -66,7 +66,7 @@ def run_test(self):\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n         assert_equal(txout['value'], 50)\n-        \n+\n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -317,7 +317,7 @@ def run_test(self):\n         self.nodes[1].importaddress(address_to_import)\n \n         # 3. Validate that the imported address is watch-only on node1\n-        assert(self.nodes[1].validateaddress(address_to_import)[\"iswatchonly\"])\n+        assert(self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"])\n \n         # 4. Check that the unspents after import are not spendable\n         assert_array_result(self.nodes[1].listunspent(),\n@@ -442,5 +442,14 @@ def run_test(self):\n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))\n \n+        # Test getaddressinfo. Note that these addresses are taken from disablewallet.py\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n+        address_info = self.nodes[0].getaddressinfo(\"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info['address'], \"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n+        assert_equal(address_info[\"scriptPubKey\"], \"76a9144e3854046c7bd1594ac904e4793b6a45b36dea0988ac\")\n+        assert not address_info[\"ismine\"]\n+        assert not address_info[\"iswatchonly\"]\n+        assert not address_info[\"isscript\"]\n+\n if __name__ == '__main__':\n     WalletTest().main()"
      },
      {
        "sha": "4db217d886e0f760be821be852db5be043c898bd",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -104,7 +104,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n     # which spends it, and make sure bumpfee can be called on it.\n \n     segwit_in = next(u for u in rbf_node.listunspent() if u[\"amount\"] == Decimal(\"0.001\"))\n-    segwit_out = rbf_node.validateaddress(rbf_node.getnewaddress())\n+    segwit_out = rbf_node.getaddressinfo(rbf_node.getnewaddress())\n     rbf_node.addwitnessaddress(segwit_out[\"address\"])\n     segwitid = send_to_witness(\n         use_p2wsh=False,"
      },
      {
        "sha": "e171a2600266092560e0d122fd40eacb4089c166",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -97,7 +97,7 @@ def run_test (self):\n         addrs = []\n         for i in range(0,test_addr_count):\n             addr = self.nodes[0].getnewaddress()\n-            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            vaddr= self.nodes[0].getaddressinfo(addr) #required to get hd keypath\n             addrs.append(vaddr)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n@@ -143,13 +143,13 @@ def run_test (self):\n         self.start_node(0, ['-wallet=w2'])\n \n         # Make sure the address is not IsMine before import\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n         self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n         # Now check IsMine is true\n-        result = self.nodes[0].validateaddress(multisig_addr)\n+        result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "91f77dd5ba5f146863eac194effa7b29fa6d5d43",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -33,7 +33,7 @@ def run_test (self):\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n@@ -51,7 +51,7 @@ def run_test (self):\n         num_hd_adds = 300\n         for i in range(num_hd_adds):\n             hd_add = self.nodes[1].getnewaddress()\n-            hd_info = self.nodes[1].validateaddress(hd_add)\n+            hd_info = self.nodes[1].getaddressinfo(hd_add)\n             assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n             assert_equal(hd_info[\"hdmasterkeyid\"], masterkeyid)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n@@ -61,7 +61,7 @@ def run_test (self):\n \n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n-        change_addrV= self.nodes[1].validateaddress(change_addr)\n+        change_addrV= self.nodes[1].getaddressinfo(change_addr)\n         assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()\n@@ -80,7 +80,7 @@ def run_test (self):\n         hd_add_2 = None\n         for _ in range(num_hd_adds):\n             hd_add_2 = self.nodes[1].getnewaddress()\n-            hd_info_2 = self.nodes[1].validateaddress(hd_add_2)\n+            hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n@@ -114,7 +114,7 @@ def run_test (self):\n         keypath = \"\"\n         for out in outs:\n             if out['value'] != 1:\n-                keypath = self.nodes[1].validateaddress(out['scriptPubKey']['addresses'][0])['hdkeypath']\n+                keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['addresses'][0])['hdkeypath']\n \n         assert_equal(keypath[0:7], \"m/0'/1'\")\n "
      },
      {
        "sha": "3288ce4b60e6cac8ce0a8e6ef566921dae37089e",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -134,7 +134,7 @@ def run_test(self):\n         # each possible type of wallet import RPC.\n         for i, variant in enumerate(IMPORT_VARIANTS):\n             variant.label = \"label {} {}\".format(i, variant)\n-            variant.address = self.nodes[1].validateaddress(self.nodes[1].getnewaddress(variant.label))\n+            variant.address = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress(variant.label))\n             variant.key = self.nodes[1].dumpprivkey(variant.address[\"address\"])\n             variant.initial_amount = 10 - (i + 1) / 4.0\n             variant.initial_txid = self.nodes[0].sendtoaddress(variant.address[\"address\"], variant.initial_amount)"
      },
      {
        "sha": "56ebc2622ab7729eae5f335d7d1d0b58182e98c2",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -21,7 +21,7 @@ def run_test (self):\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n \n-        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n \n         #Check only one address\n         assert_equal(node0_address1['ismine'], True)\n@@ -30,7 +30,7 @@ def run_test (self):\n         assert_equal(self.nodes[1].getblockcount(),1)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        address_info = self.nodes[1].getaddressinfo(node0_address1['address'])\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -39,15 +39,15 @@ def run_test (self):\n \n         # Bitcoin Address\n         self.log.info(\"Should import an address\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n             },\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -67,37 +67,37 @@ def run_test (self):\n \n         # ScriptPubKey + internal\n         self.log.info(\"Should import a scriptPubKey with internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal flag\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Public key + !Internal\n         self.log.info(\"Should import an address with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -106,15 +106,15 @@ def run_test (self):\n             \"pubkeys\": [ address['pubkey'] ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n \n         # ScriptPubKey + Public key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -123,14 +123,14 @@ def run_test (self):\n         }]\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Public key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -140,14 +140,14 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # Address + Private key + !watchonly\n         self.log.info(\"Should import an address with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -156,7 +156,7 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -175,7 +175,7 @@ def run_test (self):\n \n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -187,29 +187,29 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n         # ScriptPubKey + Private key + internal\n         self.log.info(\"Should import a scriptPubKey with internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n             \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n             \"internal\": True\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         # ScriptPubKey + Private key + !internal\n         self.log.info(\"Should not import a scriptPubKey without internal and with private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -218,16 +218,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # P2SH address\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -242,7 +242,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['isscript'], True)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -252,9 +252,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -270,7 +270,7 @@ def run_test (self):\n             \"redeemscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n@@ -279,9 +279,9 @@ def run_test (self):\n \n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -298,17 +298,17 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['timestamp'], timestamp)\n \n         p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n         assert_equal(p2shunspent['spendable'], False)\n         assert_equal(p2shunspent['solvable'], True)\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n-        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['pubkey'], sig_address_2['pubkey'], sig_address_3['pubkey']])\n         self.nodes[1].generate(100)\n         transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n@@ -332,8 +332,8 @@ def run_test (self):\n \n         # Address + Public key + !Internal + Wrong pubkey\n         self.log.info(\"Should not import an address with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -344,16 +344,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Public key + internal + Wrong pubkey\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         request = [{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -364,16 +364,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # Address + Private key + !watchonly + Wrong private key\n         self.log.info(\"Should not import an address with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": address['address']\n@@ -384,16 +384,16 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n \n \n         # ScriptPubKey + Private key + internal + Wrong private key\n         self.log.info(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n-        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n-        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": address['scriptPubKey'],\n             \"timestamp\": \"now\",\n@@ -403,7 +403,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n         assert_equal(result[0]['error']['message'], 'Consistency check failed')\n-        address_assert = self.nodes[1].validateaddress(address['address'])\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal('timestamp' in address_assert, False)\n@@ -419,7 +419,7 @@ def run_test (self):\n             \"timestamp\": \"now\",\n         }])\n         assert_equal(result[0]['success'], True)\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n@@ -429,7 +429,7 @@ def run_test (self):\n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n         self.start_nodes()\n-        address_assert = self.nodes[1].validateaddress(watchonly_address)\n+        address_assert = self.nodes[1].getaddressinfo(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], watchonly_timestamp)"
      },
      {
        "sha": "4d349db23f9da1a42d2dec025e6b6086e4a65928",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -26,7 +26,7 @@ def run_test(self):\n         address3_privkey = self.nodes[0].dumpprivkey(address3)                              # Using privkey\n \n         #Check only one address\n-        address_info = self.nodes[0].validateaddress(address1)\n+        address_info = self.nodes[0].getaddressinfo(address1)\n         assert_equal(address_info['ismine'], True)\n \n         self.sync_all()\n@@ -35,15 +35,15 @@ def run_test(self):\n         assert_equal(self.nodes[1].getblockcount(),101)\n \n         #Address Test - before import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n \n@@ -86,13 +86,13 @@ def run_test(self):\n         assert_equal(balance3, Decimal('0.075'))\n \n         #Addresses Test - after import\n-        address_info = self.nodes[1].validateaddress(address1)\n+        address_info = self.nodes[1].getaddressinfo(address1)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address2)\n+        address_info = self.nodes[1].getaddressinfo(address2)\n         assert_equal(address_info['iswatchonly'], True)\n         assert_equal(address_info['ismine'], False)\n-        address_info = self.nodes[1].validateaddress(address3)\n+        address_info = self.nodes[1].getaddressinfo(address3)\n         assert_equal(address_info['iswatchonly'], False)\n         assert_equal(address_info['ismine'], True)\n "
      },
      {
        "sha": "9825e4d89448fb1e6ab21a1d3438a475839bbb23",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -14,7 +14,7 @@ def set_test_params(self):\n     def run_test(self):\n         nodes = self.nodes\n         addr_before_encrypting = nodes[0].getnewaddress()\n-        addr_before_encrypting_data = nodes[0].validateaddress(addr_before_encrypting)\n+        addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n@@ -24,7 +24,7 @@ def run_test(self):\n         self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n-        addr_data = nodes[0].validateaddress(addr)\n+        addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])"
      },
      {
        "sha": "e7b76dfaf2ee3fdd10bdf8224778bf8efd6568f3",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "patch": "@@ -68,7 +68,7 @@ def run_test(self):\n         assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n \n         # Check that we have marked all keys up to the used keypool key as used\n-        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+        assert_equal(self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n \n if __name__ == '__main__':\n     KeypoolRestoreTest().main()"
      }
    ]
  },
  {
    "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTc5YzA1NWNkMzBkMjFiYTVmOGM3ZjgxZWY5MTFkNWQ0ZTI5NWE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T19:23:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:00Z"
      },
      "message": "Split signrawtransaction into wallet and non-wallet\n\nSplits signrwatransaction into a wallet version (signrawtransactionwithwallet) and\nnon-wallet version (signrawtransactionwithkey). signrawtransaction is marked as DEPRECATED\nand will call the right signrawtransaction* command as per the parameters in order to\nmaintain compatibility.\n\nUpdated signrawtransactions test to use new RPCs",
      "tree": {
        "sha": "22c28017f71d4f9b0dddb77cc41e733095ec84a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22c28017f71d4f9b0dddb77cc41e733095ec84a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 594,
      "additions": 380,
      "deletions": 214
    },
    "files": [
      {
        "sha": "ac822d6c5e0b29102db645049a8cf99607960d76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/safemode.h \\\n   rpc/server.h \\\n+  rpc/rawtransaction.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\"
      },
      {
        "sha": "1aa4de03ca2dd0bf144267632ed9ee33520affcc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -70,6 +70,7 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithkey\"\n     << \"walletpassphrase\"\n     << \"walletpassphrasechange\"\n     << \"encryptwallet\";\n@@ -624,7 +625,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n         // peer table signal handling - cache selected node ids\n         connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n-        \n+\n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -772,7 +773,7 @@ void RPCConsole::clear(bool clearHistory)\n #else\n     QString clsKey = \"Ctrl-L\";\n #endif\n-\t \n+\n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n@@ -1144,7 +1145,7 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n@@ -1161,7 +1162,7 @@ void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)"
      },
      {
        "sha": "9d0e0b97d16c2decf2bb06c9554ed5eb636d91c6",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -82,8 +82,8 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransaction(abc)\", false, &filtered);\n-    QVERIFY(filtered == \"signrawtransaction(\u2026)\");\n+    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);"
      },
      {
        "sha": "a95ea0cf92ecad52adb72f863f11980172228e94",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -94,6 +94,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "813afde4db4ee9116528486724e0aaeb64b59e72",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 134,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -28,7 +29,6 @@\n #include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n #endif\n \n #include <future>\n@@ -672,88 +672,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    ObserveSafeMode();\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -765,36 +690,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (!request.params[2].isNull()) {\n-        fGivenKeys = true;\n-        UniValue keys = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            UniValue k = keys[idx];\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-            CKey key = vchSecret.GetKey();\n-            if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n-            tempKeystore.AddKey(key);\n-        }\n-    }\n-#ifdef ENABLE_WALLET\n-    else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n-    }\n-#endif\n-\n     // Add previous txouts given in the RPC call:\n-    if (!request.params[1].isNull()) {\n-        UniValue prevTxs = request.params[1].get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n-            if (!p.isObject())\n+            if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n \n             UniValue prevOut = p.get_obj();\n \n@@ -808,8 +711,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0)\n+            if (nOut < 0) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n \n             COutPoint out(txid, nOut);\n             std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n@@ -834,8 +738,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            // given), add redeemScript to the keystore so it can be signed:\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"txid\", UniValueType(UniValue::VSTR)},\n@@ -847,22 +751,16 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 if (!v.isNull()) {\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n-                    tempKeystore.AddCScript(redeemScript);\n+                    keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }\n     }\n \n-#ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n-#else\n-    const CKeyStore& keystore = tempKeystore;\n-#endif\n-\n     int nHashType = SIGHASH_ALL;\n-    if (!request.params[3].isNull()) {\n+    if (!hashType.isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n@@ -871,11 +769,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n+        std::string strHashType = hashType.get_str();\n+        if (mapSigHashValues.count(strHashType)) {\n             nHashType = mapSigHashValues[strHashType];\n-        else\n+        } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        }\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -899,8 +798,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n         UpdateTransaction(mtx, i, sigdata);\n@@ -927,6 +827,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                               (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    const UniValue& keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n+            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n+            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+}\n+\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1025,18 +1107,19 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       {\"proof\"} },\n+{ //  category              name                            actor (function)            argNames\n+  //  --------------------- ------------------------        -----------------------     ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+\n+    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2186c1d5e715dc1b5fd574e47784db82620b1ee1",
        "filename": "src/rpc/rawtransaction.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+class CMutableTransaction;\n+class UniValue;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "108c1a063e01fcbd956d1655d867da9e00261ffc",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -69,14 +69,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n-\n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n@@ -119,9 +111,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n "
      },
      {
        "sha": "8b95c56a5fc84cd270ab107d362bfda3d8b5623a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 56,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/mining.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3236,6 +3237,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3731,62 +3801,63 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n-{ //  category              name                        actor (function)           argNames\n-    //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwallets\",              &listwallets,              {} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n+    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n+    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n+    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n+    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbyaccount,          {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n+    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"setaccount\",                       &setaccount,                    {\"address\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n+    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "84f161abb56374b41c55d1e1a55c827d58a96190",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -27,5 +27,5 @@ void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n-\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "ea560d160e5f578bc94e82a4c2730d2da2bf8c8b",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -33,7 +33,7 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -84,7 +84,7 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned\n@@ -112,7 +112,7 @@ def script_verification_error_test(self):\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n         assert 'complete' in rawTxSigned"
      },
      {
        "sha": "63169360b45e768ccf36165ab5f03c2abf0e2b64",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -472,7 +472,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n+    signresult = from_node.signrawtransactionwithwallet(rawtx)\n     txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n \n     return (txid, signresult[\"hex\"], fee)\n@@ -552,7 +552,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids"
      },
      {
        "sha": "d742ec461831830d7a357ac6dd2a668ecfe9dcb0",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      }
    ]
  },
  {
    "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWZmZjY1YTRiMDg1MjU4N2UwYjA2ZDkzYzMzZTJhZDQzOWQzNGU3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-05T23:49:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/*.py\nsed -i 's/\\<signrawtransaction\\>/signrawtransactionwithwallet/g' test/functional/test_framework/*.py\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0f959cdd9ba5d0c1e1185efcc16e008f91f0558f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f959cdd9ba5d0c1e1185efcc16e008f91f0558f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e79c055cd30d21ba5f8c7f81ef911d5d4e295a8"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 62,
      "deletions": 62
    },
    "files": [
      {
        "sha": "e5db9e18c72c68aa4e747cef85b6d1d37cf34099",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -70,7 +70,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n         tx1.vout = [CTxOut(value, CScript([b'a']))]\n \n-        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -176,7 +176,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n             tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n-            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -205,7 +205,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -278,7 +278,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -338,7 +338,7 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -388,7 +388,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "71d3d040022c07c981cee5af85d40acf025b4286",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -51,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        signresult = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "e9a8945e76c01281eecd098a31f9f3dced9b867a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -41,7 +41,7 @@ def cltv_validate(node, tx, height):\n     tx.nLockTime = height\n \n     # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransaction(ToHex(tx))\n+    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n@@ -54,7 +54,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8b5e5681e459d8d5c62d07e60a631092147db975",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -118,7 +118,7 @@ def create_transaction(self, node, txid, to_address, amount):\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "cef257cf9b8286aefd9aa9b37170a3967d7e2dbf",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -206,7 +206,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "02dcc3e55dcb37b68e25e776fea57e4ba839e7e6",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8a56d3eefa4852ec0a4101ba786ef6e5d03cefbd",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -91,7 +91,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)"
      },
      {
        "sha": "7db6a03b452084455ea1cd772c19935ed1d1f105",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -102,7 +102,7 @@ def create_transaction(self, node, txid, to_address, amount):\n         inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "d6ab5ecc37603ab09308763aea53bb255eac0261",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -42,7 +42,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransaction(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "fa1732c4c5512d9d73fe62b281a17d021873a2ec",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -221,7 +221,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n@@ -559,7 +559,7 @@ def run_test(self):\n \n             self.nodes[1].importaddress(scriptPubKey, \"\", False)\n             rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n-            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            rawtxfund = self.nodes[1].signrawtransactionwithwallet(rawtxfund)[\"hex\"]\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n@@ -578,7 +578,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -630,7 +630,7 @@ def create_and_mine_tx_from_txids(self, txids, success = True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "47f7efd3e78b2bc1376dfe7b4f65a232d3efa339",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -57,7 +57,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "23797d83db3dbad0443be87e74dc05fe8635a917",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -25,7 +25,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransaction(rawtx)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n@@ -205,7 +205,7 @@ def run_test(self):\n         for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         tx0_id = txid\n         value = send_value\n@@ -229,7 +229,7 @@ def run_test(self):\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n         outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n         "
      },
      {
        "sha": "eabed5d63379a9baca93e9139d45dc01579ac2c5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111191\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n-        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        timelock_tx = self.nodes[0].signrawtransactionwithwallet(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n         assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n "
      },
      {
        "sha": "32e2b47fc9d737eae508dee45829f0f9a132463d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n         outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        tx_hex = self.nodes[0].signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met"
      },
      {
        "sha": "5fb9a361d9f9b4604863645339fad579115660a5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -449,7 +449,7 @@ def run_test(self):\n         rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -503,7 +503,7 @@ def run_test(self):\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -564,7 +564,7 @@ def run_test(self):\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -622,9 +622,9 @@ def run_test(self):\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n-        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert(not signedtx[\"complete\"])\n-        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -131,7 +131,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.999}\n         tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        tx2_signed = self.nodes[1].signrawtransactionwithwallet(tx2)[\"hex\"]\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n@@ -148,7 +148,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n         tx3 = bytes_to_hex_str(tx3_modified.serialize())\n-        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n@@ -162,7 +162,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n         tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n@@ -174,7 +174,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = bytes_to_hex_str(tx3_b.serialize())\n-        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n "
      },
      {
        "sha": "e074f5bd7436868ed2dc9f69419c7bcf72975401",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -6,7 +6,7 @@\n \n Test the following RPCs:\n    - createrawtransaction\n-   - signrawtransaction\n+   - signrawtransactionwithwallet\n    - sendrawtransaction\n    - decoderawtransaction\n    - getrawtransaction\n@@ -104,7 +104,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n \n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n@@ -202,10 +202,10 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n@@ -247,11 +247,11 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxPartialSigned2 = self.nodes[2].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])"
      },
      {
        "sha": "c52a7397dc85ecc20fcf8c39d7a5b5d33db0e29e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -34,9 +34,9 @@ def run_test(self):\n \n         node0utxos = self.nodes[0].listunspent(1)\n         tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -55,7 +55,7 @@ def run_test(self):\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "43982cd09ada0c589ce5981fe18e84d87d493cc8",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -160,7 +160,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n+        signed = node.signrawtransactionwithwallet(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:"
      },
      {
        "sha": "34a21ff8fe136c0b063b69ead137aa26fdd06776",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -499,7 +499,7 @@ def create_confirmed_utxos(fee, node, count):\n         outputs[addr1] = satoshi_round(send_value / 2)\n         outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n-        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n@@ -533,7 +533,7 @@ def create_tx(node, coinbase, to_address, amount):\n     inputs = [{\"txid\": coinbase, \"vout\": 0}]\n     outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n "
      },
      {
        "sha": "7e0635d80f7ec5af5019bc763f7aae46342ba040",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n-        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n@@ -67,7 +67,7 @@ def run_test(self):\n         inputs.append({\"txid\":txC, \"vout\":nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n-        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # In mempool txs from self should increase balance from change\n@@ -138,7 +138,7 @@ def run_test(self):\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signed = self.nodes[0].signrawtransaction(tx)\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n "
      },
      {
        "sha": "f686cb6ea57e32de87f931a7f36b48ab1307a5f4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n             outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+            txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n         self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n@@ -225,7 +225,7 @@ def run_test(self):\n \n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n-        signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n+        signedRawTx = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n@@ -400,7 +400,7 @@ def run_test(self):\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n "
      },
      {
        "sha": "3e496248fd82a51dd32c00aade00049c3a1a5d09",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -121,7 +121,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     }], {dest_address: Decimal(\"0.0005\"),\n          rbf_node.getrawchangeaddress(): Decimal(\"0.0003\")})\n-    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfsigned = rbf_node.signrawtransactionwithwallet(rbfraw)\n     rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n     assert rbfid in rbf_node.getrawmempool()\n \n@@ -150,8 +150,8 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     } for utxo in utxos]\n     output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n-    signedtx = rbf_node.signrawtransaction(rawtx)\n-    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n+    signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n@@ -162,7 +162,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n-    tx = rbf_node.signrawtransaction(tx)\n+    tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n@@ -277,7 +277,7 @@ def spend_one_input(node, dest_address):\n     rawtx = node.createrawtransaction(\n         [tx_input], {dest_address: Decimal(\"0.00050000\"),\n                      node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n-    signedtx = node.signrawtransaction(rawtx)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n "
      },
      {
        "sha": "25e27166611dd2d326d891faa08737b4be19de87",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -158,7 +158,7 @@ def test_double_spend(self):\n             'vout': utxo['vout'],\n         }]\n         txid1 = self.nodes[1].sendrawtransaction(\n-            self.nodes[1].signrawtransaction(\n+            self.nodes[1].signrawtransactionwithwallet(\n                 self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n \n         # send from nodes[2] using utxo to nodes[3]\n@@ -167,7 +167,7 @@ def test_double_spend(self):\n             self.nodes[2].getnewaddress(): change,\n         }\n         self.nodes[2].sendrawtransaction(\n-            self.nodes[2].signrawtransaction(\n+            self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n \n         # generate on both sides\n@@ -232,7 +232,7 @@ def test_double_send(self):\n             'txid': utxo['txid'],\n             'vout': utxo['vout'],\n         }]\n-        signedtxres = self.nodes[2].signrawtransaction(\n+        signedtxres = self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n         assert signedtxres['complete']\n "
      },
      {
        "sha": "f16756eeaaa32b6cbb58dd98c92134c8d2632bb7",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eefff65a4b0852587e0b06d93c33e2ad439d34e7/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         outputs[node1_address] = 1240\n         outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        doublespend = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each"
      }
    ]
  },
  {
    "sha": "d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjAyMzQ4ODViY2MwN2IxYTdmODVkZWQ3NzMxNTQ5ZWMyZmNmZWZh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-12T22:02:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-02-17T16:42:01Z"
      },
      "message": "Add test for signrawtransaction\n\nAdd a brief test for signrawtransaction to ensure that compatibility is maintained.",
      "tree": {
        "sha": "a483234aad7e42b19523050aacceecf1d6a7cae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a483234aad7e42b19523050aacceecf1d6a7cae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eefff65a4b0852587e0b06d93c33e2ad439d34e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eefff65a4b0852587e0b06d93c33e2ad439d34e7"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 17,
      "deletions": 7
    },
    "files": [
      {
        "sha": "18829ef4b8a14c65239cb8522a2513e171190584",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d60234885bcc07b1a7f85ded7731549ec2fcfefa/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransactionwithwallet RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -12,6 +12,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -36,12 +37,15 @@ def successful_signing_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], True)\n+        assert rawTxSigned['complete']\n \n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Perform the same test on signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -87,8 +91,7 @@ def script_verification_error_test(self):\n         rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 4) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -109,14 +112,17 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n         rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 8) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -134,6 +140,10 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      }
    ]
  },
  {
    "sha": "4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDE0ZDA2ZmNiZDYzYzY0MjU3YzA5ZWYwYTA5YWQ4NGVmZGI2ZDJl",
    "commit": {
      "author": {
        "name": "DaveFromBinary",
        "email": "36311895+DaveFromBinary@users.noreply.github.com",
        "date": "2018-02-16T18:32:50Z"
      },
      "committer": {
        "name": "DaveFromBinary",
        "email": "36311895+DaveFromBinary@users.noreply.github.com",
        "date": "2018-02-18T00:23:06Z"
      },
      "message": "docs: clarified systemd installation instructions in init.md for Ubuntu users.\n\nAdded a note to init.md to clarify the .service copy path for newer versions of Ubuntu because it differs from the described copy path.\n\nAlso noted what version of Ubuntu switched to systemd for the default system init.",
      "tree": {
        "sha": "066da0706b094dde1ee51823ce580fac215c12b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/066da0706b094dde1ee51823ce580fac215c12b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e/comments",
    "author": {
      "login": "DaveFromBinary",
      "id": 36311895,
      "node_id": "MDQ6VXNlcjM2MzExODk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/36311895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaveFromBinary",
      "html_url": "https://github.com/DaveFromBinary",
      "followers_url": "https://api.github.com/users/DaveFromBinary/followers",
      "following_url": "https://api.github.com/users/DaveFromBinary/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaveFromBinary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaveFromBinary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaveFromBinary/subscriptions",
      "organizations_url": "https://api.github.com/users/DaveFromBinary/orgs",
      "repos_url": "https://api.github.com/users/DaveFromBinary/repos",
      "events_url": "https://api.github.com/users/DaveFromBinary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaveFromBinary/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DaveFromBinary",
      "id": 36311895,
      "node_id": "MDQ6VXNlcjM2MzExODk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/36311895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DaveFromBinary",
      "html_url": "https://github.com/DaveFromBinary",
      "followers_url": "https://api.github.com/users/DaveFromBinary/followers",
      "following_url": "https://api.github.com/users/DaveFromBinary/following{/other_user}",
      "gists_url": "https://api.github.com/users/DaveFromBinary/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DaveFromBinary/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DaveFromBinary/subscriptions",
      "organizations_url": "https://api.github.com/users/DaveFromBinary/orgs",
      "repos_url": "https://api.github.com/users/DaveFromBinary/repos",
      "events_url": "https://api.github.com/users/DaveFromBinary/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DaveFromBinary/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ffd13ae1f9e93d017b234a718fb31b66b39b8b06",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
        "patch": "@@ -84,6 +84,8 @@ Installing this .service file consists of just copying it to\n To test, run `systemctl start bitcoind` and to enable for system startup run\n `systemctl enable bitcoind`\n \n+NOTE: When installing for systemd in Debian/Ubuntu the .service file needs to be copied to the /lib/systemd/system directory instead.\n+\n ### OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n@@ -93,6 +95,8 @@ check ownership and permissions and make it executable.  Test it with\n \n ### Upstart (for Debian/Ubuntu based distributions)\n \n+Upstart is the default init system for Debian/Ubuntu versions older than 15.04. If you are using version 15.04 or newer and haven't manually configured upstart you should follow the systemd instructions instead.\n+\n Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n "
      }
    ]
  },
  {
    "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2ZlMjE4NjI2YjA1MjA0ZTlmYmM5NWJhNWQ5NWNhMGViNzJlYzli",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-18T23:04:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-18T23:04:57Z"
      },
      "message": "Merge #12308: contrib: Add support for out-of-tree builds in gen-manpages.sh\n\n526e28220a contrib: Add support for out-of-tree builds in gen-manpages.sh (Wladimir J. van der Laan)\n\nPull request description:\n\n  This adds support for setting the environment variable `BUILDDIR` to point to executables that are outside the source directory.\n\n  E.g. to invoke the tool when the build is in $PWD/build:\n\n  ```bash\n  BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n  ```\n\n  This avoids having to manually copy the generated manpages after they end up in the build instead of source path, when setting TOPDIR instead.\n\nTree-SHA512: 8dc6dd7a47a0c014ae7d27f0ac9d86f69238ec6bac8a3007b975bb88c9f37014755c716c5e62604dd91baad2f8a41fd1544cdca3ba4b59bc76602e6593f4a4a7",
      "tree": {
        "sha": "52601806b5cd25049590df2d9ba1149cfd4fb6ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52601806b5cd25049590df2d9ba1149cfd4fb6ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaigaZAAoJENLqSFDnUoslC04P/005h3UXCtpdguFjPDOTOeNt\n86CMZYdj4vlDrBhZAYv80tnZQ2RdNG6Eo7sz/bROwlbh9cePcYh02Q+deq/nLYam\nHzJ1bnJnnYRhTDhz40r/nlyWvYNx0wFKRPJTgMB0EOXzFdXR1RfiqHvGdawoAvm0\nu5EfzR1U8lwhLGQz5ERWIHiUaauNhTcKeGQ4HXktdS1Vuzkk80dDb33gFeTGEznk\nDFns4C15LHLDz+vElDYVn80VQgHoYqDGMBQVwhrvQcBFIzyNJSQIF7/LPavKPEDy\ndTzgLj1aUgljTunUu1HzRyzTNT5AD2nDAhe14V2fLtC0WZHZwCwvXTQ/005ccmQK\nO242YGgxnEbfGbcPPHv4y1lafnXZGB/sRult1g3OEG7YnNfhzMcIpfiHv2PKO6KI\nvRhzN9Ir+hIXbpS2eyMl/Al5chDr9MxLRPg5XhkzPJXH84007HqWGg7vKpq9dB3z\nPjaMe3fDjPri3wo+huiUwNdkBbU/XdSeo1tDuXWkO4wuw2WAqaAGx0NyEuexqXVx\nkbsYJjKJMSQ6a1hwRD5rKoq2ckuCoERwK5BQ4FHAlDQnCIXrhXlWI9UH947hTRZ3\nT8bt9Iv0I3OP/zlaj29tqfEz4DCG1l2Vf1m8AuMd4gX+vTyqB7O996u7xzBagMDX\n2UUYTa68v6wM9bDK9kay\n=xam8\n-----END PGP SIGNATURE-----",
        "payload": "tree 52601806b5cd25049590df2d9ba1149cfd4fb6ce\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nparent 526e28220a351db2f439793b4a310c8863c123a9\nauthor MarcoFalke <falke.marco@gmail.com> 1518995094 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1518995097 -0500\n\nMerge #12308: contrib: Add support for out-of-tree builds in gen-manpages.sh\n\n526e28220a contrib: Add support for out-of-tree builds in gen-manpages.sh (Wladimir J. van der Laan)\n\nPull request description:\n\n  This adds support for setting the environment variable `BUILDDIR` to point to executables that are outside the source directory.\n\n  E.g. to invoke the tool when the build is in $PWD/build:\n\n  ```bash\n  BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n  ```\n\n  This avoids having to manually copy the generated manpages after they end up in the build instead of source path, when setting TOPDIR instead.\n\nTree-SHA512: 8dc6dd7a47a0c014ae7d27f0ac9d86f69238ec6bac8a3007b975bb88c9f37014755c716c5e62604dd91baad2f8a41fd1544cdca3ba4b59bc76602e6593f4a4a7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      },
      {
        "sha": "526e28220a351db2f439793b4a310c8863c123a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/526e28220a351db2f439793b4a310c8863c123a9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/526e28220a351db2f439793b4a310c8863c123a9"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8ca8fa90669abd0081db75c6e4dfbf9bb589b25a",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "patch": "@@ -85,6 +85,14 @@ gen-manpages.sh\n A small script to automatically create manpages in ../../doc/man by running the release binaries with the -help option.\n This requires help2man which can be found at: https://www.gnu.org/software/help2man/\n \n+With in-tree builds this tool can be run from any directory within the\n+repostitory. To use this tool with out-of-tree builds set `BUILDDIR`. For\n+example:\n+\n+```bash\n+BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n+```\n+\n git-subtree-check.sh\n ====================\n "
      },
      {
        "sha": "27c80548c1e1769c915261941b7c003d76e15065",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "patch": "@@ -1,13 +1,15 @@\n #!/bin/bash\n \n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}\n-SRCDIR=${SRCDIR:-$TOPDIR/src}\n+BUILDDIR=${BUILDDIR:-$TOPDIR}\n+\n+BINDIR=${BINDIR:-$BUILDDIR/src}\n MANDIR=${MANDIR:-$TOPDIR/doc/man}\n \n-BITCOIND=${BITCOIND:-$SRCDIR/bitcoind}\n-BITCOINCLI=${BITCOINCLI:-$SRCDIR/bitcoin-cli}\n-BITCOINTX=${BITCOINTX:-$SRCDIR/bitcoin-tx}\n-BITCOINQT=${BITCOINQT:-$SRCDIR/qt/bitcoin-qt}\n+BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n+BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n+BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n+BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n "
      }
    ]
  },
  {
    "sha": "fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxZDY4YTJlM2YyMTQ4YzM1MzlhMTFiNjFmZjgzNWUzMTQxYzBk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-18T00:27:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-19T04:42:01Z"
      },
      "message": "qa: Fix python TypeError in script.py",
      "tree": {
        "sha": "9750a16d5e036f63b1ba81a1d4ef5309dc4a0ff9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9750a16d5e036f63b1ba81a1d4ef5309dc4a0ff9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJailWZAAoJEM4rdWl+aaVI+2IMALLQhNwWp3hQcBICKrjGd1y7\nJyC+ErR935Nq0y+cfbv8an1iSoRhdPbv2B9gLM4wlfFMSo0IjVunWwnQljh/ubk3\nwumLwairAdwq09PZ68i4JTwMXTaB1RsMCqA4Gl0E54bjaSfzrbZwX0w/sDmsQCQI\nSuYrMKLQnO850x8iY6qd904bsco85wIVfpvwe3axa10CzTqGg4i2jx78gy4XlZXW\nC++aH+80GptdHtN00r76h2Pk+GFlQ/Sijg8quLJZcFkKdsBwc9wLRz1WIMFVEnOJ\n6YVZn6b0A6a19nBuA2S2p1gyi0zeNXE2XCpDo/GW5szngWYH1FBR6fWOn8REkhSc\ndEUtP/OpHCgksgR9XdAGwm42Gsk07OtU1sMZJOBWyCcdGmLhWmTqd+BEzbdYQWS8\nh8Fgqdsfd5GnLWuxBspfBlNJB9YiYH99spwXNEK1/bp2LcwpjsCJAxdcZJhXBPLf\n7V1tIiHtkeUgmBVDcHjUwDWzCRZyBXbW8in++kQ9lg==\n=rMmB\n-----END PGP SIGNATURE-----",
        "payload": "tree 9750a16d5e036f63b1ba81a1d4ef5309dc4a0ff9\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nauthor MarcoFalke <falke.marco@gmail.com> 1518913641 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519015321 -0500\n\nqa: Fix python TypeError in script.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d68a2e3f2148c3539a11b61ff835e3141c0d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6fe0b445da67c1c61425ca49f8a850b0146c3189",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41d68a2e3f2148c3539a11b61ff835e3141c0d/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41d68a2e3f2148c3539a11b61ff835e3141c0d/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
        "patch": "@@ -526,11 +526,9 @@ def __iter__(self):\n                     yield CScriptOp(opcode)\n \n     def __repr__(self):\n-        # For Python3 compatibility add b before strings so testcases don't\n-        # need to change\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return b\"x('%s')\" % hexlify(o).decode('ascii')\n+                return \"x('%s')\" % hexlify(o).decode('ascii')\n             else:\n                 return repr(o)\n "
      }
    ]
  },
  {
    "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmM2ZTQ4YjI5ODMxODlkYzBjZTdkZTBhMDM4ZTUzMjliYzA3YjFi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:29:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:38:47Z"
      },
      "message": "Merge #10579: [RPC] Split signrawtransaction into wallet and non-wallet RPC command\n\nd60234885b Add test for signrawtransaction (Andrew Chow)\neefff65a4b scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests (Andrew Chow)\n1e79c055cd Split signrawtransaction into wallet and non-wallet (Andrew Chow)\n\nPull request description:\n\n  This PR is part of #10570. It also builds on top of #10571.\n\n  This PR splits `signrawtransaction` into two commands, `signrawtransactionwithkey` and `signrawtransactionwithwallet`. `signrawtransactionwithkey` requires private keys to be passed in and does not use the wallet for any signing. `signrawtransactionwithwallet` uses the wallet to sign a raw transaction and does not have any parameters to take private keys.\n\n  The `signrawtransaction` RPC has been marked as deprecated and will call the appropriate RPC command based upon the parameters given. A test was added to check this behavior is still consistent with the original behavior.\n\n  All tests that used `signrawtransaction` have been updated to use one of the two new RPCs. Most uses were changed to `signrawtransactionwithwallet`. These were changed via a scripted diff.\n\nTree-SHA512: d0adf5b4cd7077639c504ec07bee262a3b94658d34db0a5c86a263b6393f7aa62f45129eafe29a7c861aa58440dd19348ee0c8b685e8a62d6f4adae8ec8f8cb3",
      "tree": {
        "sha": "4dd12a11b09f9e5d734f4c9d78992bcb19da4cde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dd12a11b09f9e5d734f4c9d78992bcb19da4cde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJai4o3AAoJEKY26XYx92fg7G4P/0V1X0ohebHRhytEDe0hubks\nnkSRAZbXtLk3ATBRm/FXM2OCMCfRdHAZkVPoBKhU114KvexbxxuIqBZwruOkKQqZ\nHsKiA4ftvYkwzwJKDBN8UarmKtxBlfZtNb4C5CzxNELpKelN076bQdw+5tPsVlft\nFd0SG0dvgaaJIYPTDE4VS4A4g3e+VomfKPlXywbFAUqv5U+02UQ7b6AzTz5DGOEm\n1A6CviJJ1G2oSX2nGhvPiIwD3Bbuu5nHpQr/nmSQFfPxIjaEpmHJZ8hH6uUZdpp2\n9RVe6iNvwB0wlIoVe4N8OhPo/L+2I5jZpfvACMx/AAC3rV9+WcIVi7Vn6yQYrexd\nI6eWtotf1yFnQkBzOzzJedwJdcchBtoQUY5gsyM98dA01d7NGAyR/qSATy141RWv\nQOkK79yhvLEmR2yIp7A5y2yVdypcC8xoLFUWBZG4pe0VC3QqP/iCHQjBnagxHTAa\ncNRgqHDo7ileYJXJxPHovjef4IwKWA1DNqAuTxO3wNhrUVVebcUOdzMVU6kO9Azg\n7i0zRzqii8l9V+DSY5A3xb4yB/R5pzsjPXMJEZo55UimNHqyFt8Q40/XcSmu37nf\nvQOGHk314qYWyTtkn+JsHPWor4t1MUF26bPFL6KRXkt9QlGDEcOSpPMXtj9r8A9t\n7rb9P5APSNU6laYlBhDK\n=Aor4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4dd12a11b09f9e5d734f4c9d78992bcb19da4cde\nparent dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b\nparent d60234885bcc07b1a7f85ded7731549ec2fcfefa\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1519093762 -0800\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1519094327 -0800\n\nMerge #10579: [RPC] Split signrawtransaction into wallet and non-wallet RPC command\n\nd60234885b Add test for signrawtransaction (Andrew Chow)\neefff65a4b scripted-diff: change signrawtransaction to signrawtransactionwithwallet in tests (Andrew Chow)\n1e79c055cd Split signrawtransaction into wallet and non-wallet (Andrew Chow)\n\nPull request description:\n\n  This PR is part of #10570. It also builds on top of #10571.\n\n  This PR splits `signrawtransaction` into two commands, `signrawtransactionwithkey` and `signrawtransactionwithwallet`. `signrawtransactionwithkey` requires private keys to be passed in and does not use the wallet for any signing. `signrawtransactionwithwallet` uses the wallet to sign a raw transaction and does not have any parameters to take private keys.\n\n  The `signrawtransaction` RPC has been marked as deprecated and will call the appropriate RPC command based upon the parameters given. A test was added to check this behavior is still consistent with the original behavior.\n\n  All tests that used `signrawtransaction` have been updated to use one of the two new RPCs. Most uses were changed to `signrawtransactionwithwallet`. These were changed via a scripted diff.\n\nTree-SHA512: d0adf5b4cd7077639c504ec07bee262a3b94658d34db0a5c86a263b6393f7aa62f45129eafe29a7c861aa58440dd19348ee0c8b685e8a62d6f4adae8ec8f8cb3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      },
      {
        "sha": "d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d60234885bcc07b1a7f85ded7731549ec2fcfefa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d60234885bcc07b1a7f85ded7731549ec2fcfefa"
      }
    ],
    "stats": {
      "total": 740,
      "additions": 458,
      "deletions": 282
    },
    "files": [
      {
        "sha": "ac822d6c5e0b29102db645049a8cf99607960d76",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   rpc/protocol.h \\\n   rpc/safemode.h \\\n   rpc/server.h \\\n+  rpc/rawtransaction.h \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\"
      },
      {
        "sha": "1aa4de03ca2dd0bf144267632ed9ee33520affcc",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -70,6 +70,7 @@ const QStringList historyFilter = QStringList()\n     << \"importmulti\"\n     << \"signmessagewithprivkey\"\n     << \"signrawtransaction\"\n+    << \"signrawtransactionwithkey\"\n     << \"walletpassphrase\"\n     << \"walletpassphrasechange\"\n     << \"encryptwallet\";\n@@ -624,7 +625,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         connect(model->getPeerTableModel(), SIGNAL(layoutChanged()), this, SLOT(peerLayoutChanged()));\n         // peer table signal handling - cache selected node ids\n         connect(model->getPeerTableModel(), SIGNAL(layoutAboutToBeChanged()), this, SLOT(peerLayoutAboutToChange()));\n-        \n+\n         // set up ban table\n         ui->banlistWidget->setModel(model->getBanTableModel());\n         ui->banlistWidget->verticalHeader()->hide();\n@@ -772,7 +773,7 @@ void RPCConsole::clear(bool clearHistory)\n #else\n     QString clsKey = \"Ctrl-L\";\n #endif\n-\t \n+\n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n                         tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n@@ -1144,7 +1145,7 @@ void RPCConsole::disconnectSelectedNode()\n {\n     if(!g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)\n@@ -1161,7 +1162,7 @@ void RPCConsole::banSelectedNode(int bantime)\n {\n     if (!clientModel || !g_connman)\n         return;\n-    \n+\n     // Get selected peer addresses\n     QList<QModelIndex> nodes = GUIUtil::getEntryData(ui->peerWidget, PeerTableModel::NetNodeId);\n     for(int i = 0; i < nodes.count(); i++)"
      },
      {
        "sha": "9d0e0b97d16c2decf2bb06c9554ed5eb636d91c6",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -82,8 +82,8 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"signmessagewithprivkey abc,def\", false, &filtered);\n     QVERIFY(filtered == \"signmessagewithprivkey(\u2026)\");\n-    RPCConsole::RPCParseCommandLine(result, \"signrawtransaction(abc)\", false, &filtered);\n-    QVERIFY(filtered == \"signrawtransaction(\u2026)\");\n+    RPCConsole::RPCParseCommandLine(result, \"signrawtransactionwithkey(abc)\", false, &filtered);\n+    QVERIFY(filtered == \"signrawtransactionwithkey(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrase(help())\", false, &filtered);\n     QVERIFY(filtered == \"walletpassphrase(\u2026)\");\n     RPCConsole::RPCParseCommandLine(result, \"walletpassphrasechange(help(walletpassphrasechange(abc)))\", false, &filtered);"
      },
      {
        "sha": "a95ea0cf92ecad52adb72f863f11980172228e94",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -94,6 +94,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"decoderawtransaction\", 1, \"iswitness\" },\n     { \"signrawtransaction\", 1, \"prevtxs\" },\n     { \"signrawtransaction\", 2, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 1, \"privkeys\" },\n+    { \"signrawtransactionwithkey\", 2, \"prevtxs\" },\n+    { \"signrawtransactionwithwallet\", 1, \"prevtxs\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"combinerawtransaction\", 0, \"txs\" },\n     { \"fundrawtransaction\", 1, \"options\" },"
      },
      {
        "sha": "813afde4db4ee9116528486724e0aaeb64b59e72",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 217,
        "deletions": 134,
        "changes": 351,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <primitives/transaction.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <script/script.h>\n@@ -28,7 +29,6 @@\n #include <utilstrencodings.h>\n #ifdef ENABLE_WALLET\n #include <wallet/rpcwallet.h>\n-#include <wallet/wallet.h>\n #endif\n \n #include <future>\n@@ -672,88 +672,13 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n     return EncodeHexTx(mergedTx);\n }\n \n-UniValue signrawtransaction(const JSONRPCRequest& request)\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival, CBasicKeyStore *keystore, bool is_temp_keystore, const UniValue& hashType)\n {\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-#endif\n-\n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n-        throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n-            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n-            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the block chain.\\n\"\n-            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n-            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n-#ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n-#endif\n-\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n-            \"2. \\\"prevtxs\\\"       (string, optional) A json array of previous dependent transaction outputs\\n\"\n-            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n-            \"       {\\n\"\n-            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n-            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n-            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n-            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n-            \"       }\\n\"\n-            \"       ,...\\n\"\n-            \"    ]\\n\"\n-            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n-            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n-            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n-            \"      ,...\\n\"\n-            \"    ]\\n\"\n-            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n-            \"       \\\"ALL\\\"\\n\"\n-            \"       \\\"NONE\\\"\\n\"\n-            \"       \\\"SINGLE\\\"\\n\"\n-            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n-            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n-\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n-            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n-            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n-            \"    {\\n\"\n-            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n-            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n-            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n-            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n-            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n-            \"    }\\n\"\n-            \"    ,...\\n\"\n-            \"  ]\\n\"\n-            \"}\\n\"\n-\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n-        );\n-\n-    ObserveSafeMode();\n-#ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n-\n-    CMutableTransaction mtx;\n-    if (!DecodeHexTx(mtx, request.params[0].get_str(), true))\n-        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n-\n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n     CCoinsViewCache view(&viewDummy);\n     {\n-        LOCK(mempool.cs);\n+        LOCK2(cs_main, mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n@@ -765,36 +690,14 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         view.SetBackend(viewDummy); // switch back to avoid locking mempool for too long\n     }\n \n-    bool fGivenKeys = false;\n-    CBasicKeyStore tempKeystore;\n-    if (!request.params[2].isNull()) {\n-        fGivenKeys = true;\n-        UniValue keys = request.params[2].get_array();\n-        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n-            UniValue k = keys[idx];\n-            CBitcoinSecret vchSecret;\n-            bool fGood = vchSecret.SetString(k.get_str());\n-            if (!fGood)\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-            CKey key = vchSecret.GetKey();\n-            if (!key.IsValid())\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n-            tempKeystore.AddKey(key);\n-        }\n-    }\n-#ifdef ENABLE_WALLET\n-    else if (pwallet) {\n-        EnsureWalletIsUnlocked(pwallet);\n-    }\n-#endif\n-\n     // Add previous txouts given in the RPC call:\n-    if (!request.params[1].isNull()) {\n-        UniValue prevTxs = request.params[1].get_array();\n-        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+    if (!prevTxsUnival.isNull()) {\n+        UniValue prevTxs = prevTxsUnival.get_array();\n+        for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n-            if (!p.isObject())\n+            if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n+            }\n \n             UniValue prevOut = p.get_obj();\n \n@@ -808,8 +711,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n             int nOut = find_value(prevOut, \"vout\").get_int();\n-            if (nOut < 0)\n+            if (nOut < 0) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"vout must be positive\");\n+            }\n \n             COutPoint out(txid, nOut);\n             std::vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n@@ -834,8 +738,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             }\n \n             // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            // given), add redeemScript to the keystore so it can be signed:\n+            if (is_temp_keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"txid\", UniValueType(UniValue::VSTR)},\n@@ -847,22 +751,16 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 if (!v.isNull()) {\n                     std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n-                    tempKeystore.AddCScript(redeemScript);\n+                    keystore->AddCScript(redeemScript);\n                     // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    tempKeystore.AddCScript(GetScriptForWitness(redeemScript));\n+                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n                 }\n             }\n         }\n     }\n \n-#ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n-#else\n-    const CKeyStore& keystore = tempKeystore;\n-#endif\n-\n     int nHashType = SIGHASH_ALL;\n-    if (!request.params[3].isNull()) {\n+    if (!hashType.isNull()) {\n         static std::map<std::string, int> mapSigHashValues = {\n             {std::string(\"ALL\"), int(SIGHASH_ALL)},\n             {std::string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n@@ -871,11 +769,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = request.params[3].get_str();\n-        if (mapSigHashValues.count(strHashType))\n+        std::string strHashType = hashType.get_str();\n+        if (mapSigHashValues.count(strHashType)) {\n             nHashType = mapSigHashValues[strHashType];\n-        else\n+        } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid sighash param\");\n+        }\n     }\n \n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n@@ -899,8 +798,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n \n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n-        if (!fHashSingle || (i < mtx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        if (!fHashSingle || (i < mtx.vout.size())) {\n+            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+        }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n \n         UpdateTransaction(mtx, i, sigdata);\n@@ -927,6 +827,188 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithkey \\\"hexstring\\\" [\\\"privatekey1\\\",...] ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second argument is an array of base58-encoded private\\n\"\n+            \"keys that will be the only keys used to sign the transaction.\\n\"\n+            \"The third optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"privkeys\\\"                       (string, required) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                               (json array of strings)\\n\"\n+            \"      \\\"privatekey\\\"                  (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithkey\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    CBasicKeyStore keystore;\n+    const UniValue& keys = request.params[1].get_array();\n+    for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n+        UniValue k = keys[idx];\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(k.get_str())) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        }\n+        keystore.AddKey(key);\n+    }\n+\n+    return SignTransaction(mtx, request.params[2], &keystore, true, request.params[3]);\n+}\n+\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n+{\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+        throw std::runtime_error(\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"\\nDEPRECATED. Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n+            \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n+#ifdef ENABLE_WALLET\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+#endif\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"     (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"       (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [               (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"privkeys\\\"     (string, optional) A json array of base58-encoded private keys for signing\\n\"\n+            \"    [                  (json array of strings, or 'null' if none provided)\\n\"\n+            \"      \\\"privatekey\\\"   (string) private key in base58-encoding\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"4. \\\"sighashtype\\\"     (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,   (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                 (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",           (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",       (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,            (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"           (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n+        );\n+\n+    if (!IsDeprecatedRPCEnabled(\"signrawtransaction\")) {\n+        throw JSONRPCError(RPC_METHOD_DEPRECATED, \"signrawtransaction is deprecated and will be fully removed in v0.18. \"\n+            \"To use signrawtransaction in v0.17, restart bitcoind with -deprecatedrpc=signrawtransaction.\\n\"\n+            \"Projects should transition to using signrawtransactionwithkey and signrawtransactionwithwallet before upgrading to v0.18\");\n+    }\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    // Make a JSONRPCRequest to pass on to the right signrawtransaction* command\n+    JSONRPCRequest new_request;\n+    new_request.id = request.id;\n+    new_request.params.setArray();\n+\n+    // For signing with private keys\n+    if (!request.params[2].isNull()) {\n+        new_request.params.push_back(request.params[0]);\n+        // Note: the prevtxs and privkeys are reversed for signrawtransactionwithkey\n+        new_request.params.push_back(request.params[2]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithkey(new_request);\n+    }\n+    // Otherwise sign with the wallet which does not take a privkeys parameter\n+#ifdef ENABLE_WALLET\n+    else {\n+        new_request.params.push_back(request.params[0]);\n+        new_request.params.push_back(request.params[1]);\n+        new_request.params.push_back(request.params[3]);\n+        return signrawtransactionwithwallet(new_request);\n+    }\n+#endif\n+    // If we have made it this far, then wallet is disabled and no private keys were given, so fail here.\n+    throw JSONRPCError(RPC_INVALID_PARAMETER, \"No private keys available.\");\n+}\n+\n UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1025,18 +1107,19 @@ UniValue sendrawtransaction(const JSONRPCRequest& request)\n }\n \n static const CRPCCommand commands[] =\n-{ //  category              name                      actor (function)         argNames\n-  //  --------------------- ------------------------  -----------------------  ----------\n-    { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      {\"txid\",\"verbose\",\"blockhash\"} },\n-    { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n-    { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   {\"hexstring\",\"iswitness\"} },\n-    { \"rawtransactions\",    \"decodescript\",           &decodescript,           {\"hexstring\"} },\n-    { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"combinerawtransaction\",  &combinerawtransaction,  {\"txs\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n-\n-    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          {\"txids\", \"blockhash\"} },\n-    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       {\"proof\"} },\n+{ //  category              name                            actor (function)            argNames\n+  //  --------------------- ------------------------        -----------------------     ----------\n+    { \"rawtransactions\",    \"getrawtransaction\",            &getrawtransaction,         {\"txid\",\"verbose\",\"blockhash\"} },\n+    { \"rawtransactions\",    \"createrawtransaction\",         &createrawtransaction,      {\"inputs\",\"outputs\",\"locktime\",\"replaceable\"} },\n+    { \"rawtransactions\",    \"decoderawtransaction\",         &decoderawtransaction,      {\"hexstring\",\"iswitness\"} },\n+    { \"rawtransactions\",    \"decodescript\",                 &decodescript,              {\"hexstring\"} },\n+    { \"rawtransactions\",    \"sendrawtransaction\",           &sendrawtransaction,        {\"hexstring\",\"allowhighfees\"} },\n+    { \"rawtransactions\",    \"combinerawtransaction\",        &combinerawtransaction,     {\"txs\"} },\n+    { \"rawtransactions\",    \"signrawtransaction\",           &signrawtransaction,        {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransactionwithkey\",    &signrawtransactionwithkey, {\"hexstring\",\"privkeys\",\"prevtxs\",\"sighashtype\"} },\n+\n+    { \"blockchain\",         \"gettxoutproof\",                &gettxoutproof,             {\"txids\", \"blockhash\"} },\n+    { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n \n void RegisterRawTransactionRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "2186c1d5e715dc1b5fd574e47784db82620b1ee1",
        "filename": "src/rpc/rawtransaction.h",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -0,0 +1,15 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RPC_RAWTRANSACTION_H\n+#define BITCOIN_RPC_RAWTRANSACTION_H\n+\n+class CBasicKeyStore;\n+class CMutableTransaction;\n+class UniValue;\n+\n+/** Sign a transaction with the given keystore and previous transactions */\n+UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxs, CBasicKeyStore *keystore, bool tempKeystore, const UniValue& hashType);\n+\n+#endif // BITCOIN_RPC_RAWTRANSACTION_H"
      },
      {
        "sha": "108c1a063e01fcbd956d1655d867da9e00261ffc",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -69,14 +69,6 @@ BOOST_AUTO_TEST_CASE(rpc_rawparams)\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false\"));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"decoderawtransaction \")+rawtx+\" false extra\"), std::runtime_error);\n \n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction null\"), std::runtime_error);\n-    BOOST_CHECK_THROW(CallRPC(\"signrawtransaction ff00\"), std::runtime_error);\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" [] [] NONE|ANYONECANPAY\"));\n-    BOOST_CHECK_THROW(CallRPC(std::string(\"signrawtransaction \")+rawtx+\" null null badenum\"), std::runtime_error);\n-\n     // Only check failure cases for sendrawtransaction, there's no network to send to...\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction\"), std::runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"sendrawtransaction null\"), std::runtime_error);\n@@ -119,9 +111,9 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n-    r = CallRPC(std::string(\"signrawtransaction \")+notsigned+\" \"+prevout+\" \"+\"[\"+privkey1+\",\"+privkey2+\"]\");\n+    r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n }\n "
      },
      {
        "sha": "8b95c56a5fc84cd270ab107d362bfda3d8b5623a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 56,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -16,6 +16,7 @@\n #include <policy/policy.h>\n #include <policy/rbf.h>\n #include <rpc/mining.h>\n+#include <rpc/rawtransaction.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n@@ -3236,6 +3237,75 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+        throw std::runtime_error(\n+            \"signrawtransactionwithwallet \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] sighashtype )\\n\"\n+            \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n+            \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n+\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"hexstring\\\"                      (string, required) The transaction hex string\\n\"\n+            \"2. \\\"prevtxs\\\"                        (string, optional) An json array of previous dependent transaction outputs\\n\"\n+            \"     [                              (json array of json objects, or 'null' if none provided)\\n\"\n+            \"       {\\n\"\n+            \"         \\\"txid\\\":\\\"id\\\",               (string, required) The transaction id\\n\"\n+            \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n+            \"         \\\"scriptPubKey\\\": \\\"hex\\\",     (string, required) script key\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\",     (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n+            \"       }\\n\"\n+            \"       ,...\\n\"\n+            \"    ]\\n\"\n+            \"3. \\\"sighashtype\\\"                    (string, optional, default=ALL) The signature hash type. Must be one of\\n\"\n+            \"       \\\"ALL\\\"\\n\"\n+            \"       \\\"NONE\\\"\\n\"\n+            \"       \\\"SINGLE\\\"\\n\"\n+            \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n+            \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"hex\\\" : \\\"value\\\",                  (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"  \\\"complete\\\" : true|false,          (boolean) If the transaction has a complete set of signatures\\n\"\n+            \"  \\\"errors\\\" : [                      (json array of objects) Script verification errors (if there are any)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"txid\\\" : \\\"hash\\\",              (string) The hash of the referenced, previous transaction\\n\"\n+            \"      \\\"vout\\\" : n,                   (numeric) The index of the output to spent and used as input\\n\"\n+            \"      \\\"scriptSig\\\" : \\\"hex\\\",          (string) The hex-encoded signature script\\n\"\n+            \"      \\\"sequence\\\" : n,               (numeric) Script sequence number\\n\"\n+            \"      \\\"error\\\" : \\\"text\\\"              (string) Verification or signing error related to the input\\n\"\n+            \"    }\\n\"\n+            \"    ,...\\n\"\n+            \"  ]\\n\"\n+            \"}\\n\"\n+\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+            + HelpExampleRpc(\"signrawtransactionwithwallet\", \"\\\"myhex\\\"\")\n+        );\n+\n+    RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n+\n+    CMutableTransaction mtx;\n+    if (!DecodeHexTx(mtx, request.params[0].get_str(), true)) {\n+        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+    }\n+\n+    // Sign the transaction\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    return SignTransaction(mtx, request.params[1], pwallet, false, request.params[2]);\n+}\n+\n UniValue bumpfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -3731,62 +3801,63 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue rescanblockchain(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n-{ //  category              name                        actor (function)           argNames\n-    //  --------------------- ------------------------    -----------------------  ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       {\"hexstring\",\"options\",\"iswitness\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n-    { \"hidden\",             \"addwitnessaddress\",        &addwitnessaddress,        {\"address\",\"p2sh\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",           &getaddressinfo,           {\"address\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            {\"account\",\"address_type\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"listwallets\",              &listwallets,              {} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        {\"txid\"} },\n-    { \"wallet\",             \"rescanblockchain\",         &rescanblockchain,         {\"start_height\", \"stop_height\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 {\"nblocks\",\"maxtries\"} },\n+{ //  category              name                                actor (function)                argNames\n+    //  --------------------- ------------------------          -----------------------         ----------\n+    { \"rawtransactions\",    \"fundrawtransaction\",               &fundrawtransaction,            {\"hexstring\",\"options\",\"iswitness\"} },\n+    { \"hidden\",             \"resendwallettransactions\",         &resendwallettransactions,      {} },\n+    { \"wallet\",             \"abandontransaction\",               &abandontransaction,            {\"txid\"} },\n+    { \"wallet\",             \"abortrescan\",                      &abortrescan,                   {} },\n+    { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"account\",\"address_type\"} },\n+    { \"hidden\",             \"addwitnessaddress\",                &addwitnessaddress,             {\"address\",\"p2sh\"} },\n+    { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n+    { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n+    { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n+    { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n+    { \"wallet\",             \"getaccountaddress\",                &getaccountaddress,             {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"account\",\"address_type\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbyaccount,          {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n+    { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n+    { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n+    { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n+    { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"importwallet\",                     &importwallet,                  {\"filename\"} },\n+    { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n+    { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n+    { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n+    { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n+    { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n+    { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n+    { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+    { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n+    { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n+    { \"wallet\",             \"setaccount\",                       &setaccount,                    {\"address\",\"account\"} },\n+    { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n+    { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n+    { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n+    { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n+    { \"wallet\",             \"walletpassphrasechange\",           &walletpassphrasechange,        {\"oldpassphrase\",\"newpassphrase\"} },\n+    { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },\n+    { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n+    { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n+\n+    { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "84f161abb56374b41c55d1e1a55c827d58a96190",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -27,5 +27,5 @@ void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n \n UniValue getaddressinfo(const JSONRPCRequest& request);\n-\n+UniValue signrawtransactionwithwallet(const JSONRPCRequest& request);\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      },
      {
        "sha": "e5db9e18c72c68aa4e747cef85b6d1d37cf34099",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -70,7 +70,7 @@ def test_disable_flag(self):\n         tx1.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), nSequence=sequence_value)] \n         tx1.vout = [CTxOut(value, CScript([b'a']))]\n \n-        tx1_signed = self.nodes[0].signrawtransaction(ToHex(tx1))[\"hex\"]\n+        tx1_signed = self.nodes[0].signrawtransactionwithwallet(ToHex(tx1))[\"hex\"]\n         tx1_id = self.nodes[0].sendrawtransaction(tx1_signed)\n         tx1_id = int(tx1_id, 16)\n \n@@ -176,7 +176,7 @@ def test_sequence_lock_confirmed_inputs(self):\n             # Overestimate the size of the tx - signatures should be less than 120 bytes, and leave 50 for the output\n             tx_size = len(ToHex(tx))//2 + 120*num_inputs + 50\n             tx.vout.append(CTxOut(int(value-self.relayfee*tx_size*COIN/1000), CScript([b'a'])))\n-            rawtx = self.nodes[0].signrawtransaction(ToHex(tx))[\"hex\"]\n+            rawtx = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n@@ -205,7 +205,7 @@ def test_sequence_lock_unconfirmed_inputs(self):\n         tx2.nVersion = 2\n         tx2.vin = [CTxIn(COutPoint(tx1.sha256, 0), nSequence=0)]\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -278,7 +278,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n-        raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n+        raw_tx5 = self.nodes[0].signrawtransactionwithwallet(ToHex(tx5))[\"hex\"]\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n@@ -338,7 +338,7 @@ def test_bip68_not_consensus(self):\n         tx2.vout = [CTxOut(int(tx1.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n \n         # sign tx2\n-        tx2_raw = self.nodes[0].signrawtransaction(ToHex(tx2))[\"hex\"]\n+        tx2_raw = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))[\"hex\"]\n         tx2 = FromHex(tx2, tx2_raw)\n         tx2.rehash()\n \n@@ -388,7 +388,7 @@ def test_version2_relay(self):\n         rawtxfund = self.nodes[1].fundrawtransaction(rawtx)['hex']\n         tx = FromHex(CTransaction(), rawtxfund)\n         tx.nVersion = 2\n-        tx_signed = self.nodes[1].signrawtransaction(ToHex(tx))[\"hex\"]\n+        tx_signed = self.nodes[1].signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n         self.nodes[1].sendrawtransaction(tx_signed)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "71d3d040022c07c981cee5af85d40acf025b4286",
        "filename": "test/functional/feature_bip9_softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip9_softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_bip9_softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip9_softforks.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -51,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n+        signresult = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "e9a8945e76c01281eecd098a31f9f3dced9b867a",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -41,7 +41,7 @@ def cltv_validate(node, tx, height):\n     tx.nLockTime = height\n \n     # Need to re-sign, since nSequence and nLockTime changed\n-    signed_result = node.signrawtransaction(ToHex(tx))\n+    signed_result = node.signrawtransactionwithwallet(ToHex(tx))\n     new_tx = CTransaction()\n     new_tx.deserialize(BytesIO(hex_str_to_bytes(signed_result['hex'])))\n \n@@ -54,7 +54,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8b5e5681e459d8d5c62d07e60a631092147db975",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -118,7 +118,7 @@ def create_transaction(self, node, txid, to_address, amount):\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "cef257cf9b8286aefd9aa9b37170a3967d7e2dbf",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -206,7 +206,7 @@ def generate_small_transactions(self, node, count, utxo_list):\n                 tx.vout.append(CTxOut(output_amount, hex_str_to_bytes(utxo['scriptPubKey'])))\n \n             # Sign and send the transaction to get into the mempool\n-            tx_signed_hex = node.signrawtransaction(ToHex(tx))['hex']\n+            tx_signed_hex = node.signrawtransactionwithwallet(ToHex(tx))['hex']\n             node.sendrawtransaction(tx_signed_hex)\n             num_transactions += 1\n "
      },
      {
        "sha": "02dcc3e55dcb37b68e25e776fea57e4ba839e7e6",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -42,7 +42,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n     outputs = { to_address : amount }\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     tx = CTransaction()\n     tx.deserialize(BytesIO(hex_str_to_bytes(signresult['hex'])))\n     return tx"
      },
      {
        "sha": "8a56d3eefa4852ec0a4101ba786ef6e5d03cefbd",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -91,7 +91,7 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the proper ScriptSig\n     if (initial_split):\n-        completetx = from_node.signrawtransaction(ToHex(tx))[\"hex\"]\n+        completetx = from_node.signrawtransactionwithwallet(ToHex(tx))[\"hex\"]\n     else:\n         tx.vin[0].scriptSig = SCRIPT_SIG[prevtxout[\"vout\"]]\n         completetx = ToHex(tx)"
      },
      {
        "sha": "7db6a03b452084455ea1cd772c19935ed1d1f105",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -102,7 +102,7 @@ def create_transaction(self, node, txid, to_address, amount):\n         inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signresult = node.signrawtransaction(rawtx)\n+        signresult = node.signrawtransactionwithwallet(rawtx)\n         tx = CTransaction()\n         f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)"
      },
      {
        "sha": "d6ab5ecc37603ab09308763aea53bb255eac0261",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -42,7 +42,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    signed_tx = node.signrawtransaction(txToHex(tx2))\n+    signed_tx = node.signrawtransactionwithwallet(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "fa1732c4c5512d9d73fe62b281a17d021873a2ec",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -221,7 +221,7 @@ def run_test(self):\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n         tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n-        tx2_hex = self.nodes[0].signrawtransaction(ToHex(tx))['hex']\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n         assert(not tx.wit.is_null())\n@@ -559,7 +559,7 @@ def run_test(self):\n \n             self.nodes[1].importaddress(scriptPubKey, \"\", False)\n             rawtxfund = self.nodes[1].fundrawtransaction(transaction)['hex']\n-            rawtxfund = self.nodes[1].signrawtransaction(rawtxfund)[\"hex\"]\n+            rawtxfund = self.nodes[1].signrawtransactionwithwallet(rawtxfund)[\"hex\"]\n             txid = self.nodes[1].sendrawtransaction(rawtxfund)\n \n             assert_equal(self.nodes[1].gettransaction(txid, True)[\"txid\"], txid)\n@@ -578,7 +578,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n@@ -630,7 +630,7 @@ def create_and_mine_tx_from_txids(self, txids, success = True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "47f7efd3e78b2bc1376dfe7b4f65a232d3efa339",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -32,7 +32,7 @@ def run_test(self):\n         self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -57,7 +57,7 @@ def run_test(self):\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n-        txFS = self.nodes[0].signrawtransaction(txF['hex'])\n+        txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n         assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':"
      },
      {
        "sha": "23797d83db3dbad0443be87e74dc05fe8635a917",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -25,7 +25,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         for i in range(num_outputs):\n             outputs[node.getnewaddress()] = send_value\n         rawtx = node.createrawtransaction(inputs, outputs)\n-        signedtx = node.signrawtransaction(rawtx)\n+        signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n@@ -205,7 +205,7 @@ def run_test(self):\n         for i in range(2):\n             outputs[self.nodes[0].getnewaddress()] = send_value\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         tx0_id = txid\n         value = send_value\n@@ -229,7 +229,7 @@ def run_test(self):\n         inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n         outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n         "
      },
      {
        "sha": "eabed5d63379a9baca93e9139d45dc01579ac2c5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         # Set the time lock\n         timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111191\", 1)\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n-        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        timelock_tx = self.nodes[0].signrawtransactionwithwallet(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n         assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n "
      },
      {
        "sha": "32e2b47fc9d737eae508dee45829f0f9a132463d",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -116,7 +116,7 @@ def run_test(self):\n         inputs.append({\"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n         outputs[self.nodes[0].getnewaddress()] = utxo[\"amount\"]\n         raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        tx_hex = self.nodes[0].signrawtransaction(raw_tx)[\"hex\"]\n+        tx_hex = self.nodes[0].signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met"
      },
      {
        "sha": "5fb9a361d9f9b4604863645339fad579115660a5",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -449,7 +449,7 @@ def run_test(self):\n         rawtx = self.nodes[2].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[2].fundrawtransaction(rawtx)\n \n-        signedTx = self.nodes[2].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[2].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[2].sendrawtransaction(signedTx['hex'])\n         self.sync_all()\n         self.nodes[1].generate(1)\n@@ -503,7 +503,7 @@ def run_test(self):\n \n         #now we need to unlock\n         self.nodes[1].walletpassphrase(\"test\", 600)\n-        signedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        signedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(signedTx['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n@@ -564,7 +564,7 @@ def run_test(self):\n         outputs = {self.nodes[0].getnewaddress():0.15,self.nodes[0].getnewaddress():0.04}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         fundedTx = self.nodes[1].fundrawtransaction(rawtx)\n-        fundedAndSignedTx = self.nodes[1].signrawtransaction(fundedTx['hex'])\n+        fundedAndSignedTx = self.nodes[1].signrawtransactionwithwallet(fundedTx['hex'])\n         txId = self.nodes[1].sendrawtransaction(fundedAndSignedTx['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)\n@@ -622,9 +622,9 @@ def run_test(self):\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n-        signedtx = self.nodes[3].signrawtransaction(result[\"hex\"])\n+        signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n         assert(not signedtx[\"complete\"])\n-        signedtx = self.nodes[0].signrawtransaction(signedtx[\"hex\"])\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n         assert(signedtx[\"complete\"])\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)"
      },
      {
        "sha": "0dd7372e6bfb776d0cc5f5753d54dd74ae287d41",
        "filename": "test/functional/rpc_listtransactions.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_listtransactions.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -131,7 +131,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\":utxo_to_use[\"txid\"], \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.999}\n         tx2 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx2_signed = self.nodes[1].signrawtransaction(tx2)[\"hex\"]\n+        tx2_signed = self.nodes[1].signrawtransactionwithwallet(tx2)[\"hex\"]\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n@@ -148,7 +148,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n         tx3 = bytes_to_hex_str(tx3_modified.serialize())\n-        tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n+        tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n         assert(is_opt_in(self.nodes[0], txid_3))\n@@ -162,7 +162,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         inputs = [{\"txid\": txid_3, \"vout\":utxo_to_use[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress(): 0.997}\n         tx4 = self.nodes[1].createrawtransaction(inputs, outputs)\n-        tx4_signed = self.nodes[1].signrawtransaction(tx4)[\"hex\"]\n+        tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n         assert(not is_opt_in(self.nodes[1], txid_4))\n@@ -174,7 +174,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n         tx3_b = bytes_to_hex_str(tx3_b.serialize())\n-        tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n+        tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))\n "
      },
      {
        "sha": "e074f5bd7436868ed2dc9f69419c7bcf72975401",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -6,7 +6,7 @@\n \n Test the following RPCs:\n    - createrawtransaction\n-   - signrawtransaction\n+   - signrawtransactionwithwallet\n    - sendrawtransaction\n    - decoderawtransaction\n    - getrawtransaction\n@@ -104,7 +104,7 @@ def run_test(self):\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n         outputs = { self.nodes[0].getnewaddress() : 4.998 }\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n \n         # This will raise an exception since there are missing inputs\n         assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n@@ -202,10 +202,10 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned = self.nodes[1].signrawtransaction(rawTx, inputs)\n+        rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n+        rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n@@ -247,11 +247,11 @@ def run_test(self):\n         inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned1)\n         assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n \n-        rawTxPartialSigned2 = self.nodes[2].signrawtransaction(rawTx2, inputs)\n+        rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n         self.log.info(rawTxPartialSigned2)\n         assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n         rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])"
      },
      {
        "sha": "18829ef4b8a14c65239cb8522a2513e171190584",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -2,7 +2,7 @@\n # Copyright (c) 2015-2017 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n+\"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n@@ -12,6 +12,7 @@ class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-deprecatedrpc=signrawtransaction\"]]\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -33,15 +34,18 @@ def successful_signing_test(self):\n         outputs = {'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB': 0.1}\n \n         rawTx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, inputs)\n \n         # 1) The transaction has a complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], True)\n+        assert rawTxSigned['complete']\n \n         # 2) No script verification error occurred\n         assert 'errors' not in rawTxSigned\n \n+        # Perform the same test on signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, inputs, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def script_verification_error_test(self):\n         \"\"\"Create and sign a raw transaction with valid (vin 0), invalid (vin 1) and one missing (vin 2) input script.\n \n@@ -84,11 +88,10 @@ def script_verification_error_test(self):\n         # Make sure decoderawtransaction throws if there is extra data\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithkey(rawTx, privKeys, scripts)\n \n         # 3) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 4) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -109,14 +112,17 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['vout'], inputs[2]['vout'])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n         # Now test signing failure for transaction with input witnesses\n         p2wpkh_raw_tx = \"01000000000102fff7f7881a8099afa6940d42d1e7f6362bec38171ea3edf433541db4e4ad969f00000000494830450221008b9d1dc26ba6a9cb62127b02742fa9d754cd3bebf337f7a55d114c8e5cdd30be022040529b194ba3f9281a99f2b1c0a19c0489bc22ede944ccf4ecbab4cc618ef3ed01eeffffffef51e1b804cc89d182d279655c3aa89e815b1b309fe287d9b2b55d57b90ec68a0100000000ffffffff02202cb206000000001976a9148280b37df378db99f66f85c95a783a76ac7a6d5988ac9093510d000000001976a9143bde42dbee7e4dbe6a21b2d50ce2f0167faa815988ac000247304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee0121025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee635711000000\"\n \n-        rawTxSigned = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        rawTxSigned = self.nodes[0].signrawtransactionwithwallet(p2wpkh_raw_tx)\n \n         # 7) The transaction has no complete set of signatures\n-        assert 'complete' in rawTxSigned\n-        assert_equal(rawTxSigned['complete'], False)\n+        assert not rawTxSigned['complete']\n \n         # 8) Two script verification errors occurred\n         assert 'errors' in rawTxSigned\n@@ -134,6 +140,10 @@ def script_verification_error_test(self):\n         assert_equal(rawTxSigned['errors'][1]['witness'], [\"304402203609e17b84f6a7d30c80bfa610b5b4542f32a8a0d5447a12fb1366d7f01cc44a0220573a954c4518331561406f90300e8f3358f51928d43c212a8caed02de67eebee01\", \"025476c2e83188368da1ff3e292e7acafcdb3566bb0ad253f62fc70f07aeee6357\"])\n         assert not rawTxSigned['errors'][0]['witness']\n \n+        # Perform same test with signrawtransaction\n+        rawTxSigned2 = self.nodes[0].signrawtransaction(p2wpkh_raw_tx)\n+        assert_equal(rawTxSigned, rawTxSigned2)\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()"
      },
      {
        "sha": "c52a7397dc85ecc20fcf8c39d7a5b5d33db0e29e",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -34,9 +34,9 @@ def run_test(self):\n \n         node0utxos = self.nodes[0].listunspent(1)\n         tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx1)[\"hex\"])\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n-        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransactionwithwallet(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n         assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n@@ -55,7 +55,7 @@ def run_test(self):\n \n         txin_spent = self.nodes[1].listunspent(1).pop()\n         tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 49.98})\n-        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        txid3 = self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransactionwithwallet(tx3)[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "43982cd09ada0c589ce5981fe18e84d87d493cc8",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -160,7 +160,7 @@ def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=True, insert_redeem_script=\"\"):\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n-        signed = node.signrawtransaction(tx_to_witness)\n+        signed = node.signrawtransactionwithwallet(tx_to_witness)\n         assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:"
      },
      {
        "sha": "34a21ff8fe136c0b063b69ead137aa26fdd06776",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -472,7 +472,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     outputs[to_node.getnewaddress()] = float(amount)\n \n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    signresult = from_node.signrawtransaction(rawtx)\n+    signresult = from_node.signrawtransactionwithwallet(rawtx)\n     txid = from_node.sendrawtransaction(signresult[\"hex\"], True)\n \n     return (txid, signresult[\"hex\"], fee)\n@@ -499,7 +499,7 @@ def create_confirmed_utxos(fee, node, count):\n         outputs[addr1] = satoshi_round(send_value / 2)\n         outputs[addr2] = satoshi_round(send_value / 2)\n         raw_tx = node.createrawtransaction(inputs, outputs)\n-        signed_tx = node.signrawtransaction(raw_tx)[\"hex\"]\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx)[\"hex\"]\n         node.sendrawtransaction(signed_tx)\n \n     while (node.getmempoolinfo()['size'] > 0):\n@@ -533,7 +533,7 @@ def create_tx(node, coinbase, to_address, amount):\n     inputs = [{\"txid\": coinbase, \"vout\": 0}]\n     outputs = {to_address: amount}\n     rawtx = node.createrawtransaction(inputs, outputs)\n-    signresult = node.signrawtransaction(rawtx)\n+    signresult = node.signrawtransactionwithwallet(rawtx)\n     assert_equal(signresult[\"complete\"], True)\n     return signresult[\"hex\"]\n \n@@ -552,7 +552,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         newtx = rawtx[0:92]\n         newtx = newtx + txouts\n         newtx = newtx + rawtx[94:]\n-        signresult = node.signrawtransaction(newtx, None, None, \"NONE\")\n+        signresult = node.signrawtransactionwithwallet(newtx, None, \"NONE\")\n         txid = node.sendrawtransaction(signresult[\"hex\"], True)\n         txids.append(txid)\n     return txids"
      },
      {
        "sha": "7e0635d80f7ec5af5019bc763f7aae46342ba040",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -55,7 +55,7 @@ def run_test(self):\n \n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"14.99998\")\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"5\")\n-        signed = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txAB1 = self.nodes[0].sendrawtransaction(signed[\"hex\"])\n \n         # Identify the 14.99998btc output\n@@ -67,7 +67,7 @@ def run_test(self):\n         inputs.append({\"txid\":txC, \"vout\":nC})\n         outputs = {}\n         outputs[self.nodes[0].getnewaddress()] = Decimal(\"24.9996\")\n-        signed2 = self.nodes[0].signrawtransaction(self.nodes[0].createrawtransaction(inputs, outputs))\n+        signed2 = self.nodes[0].signrawtransactionwithwallet(self.nodes[0].createrawtransaction(inputs, outputs))\n         txABC2 = self.nodes[0].sendrawtransaction(signed2[\"hex\"])\n \n         # In mempool txs from self should increase balance from change\n@@ -138,7 +138,7 @@ def run_test(self):\n         outputs = {}\n         outputs[self.nodes[1].getnewaddress()] = Decimal(\"9.9999\")\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signed = self.nodes[0].signrawtransaction(tx)\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n         self.nodes[1].sendrawtransaction(signed[\"hex\"])\n         self.nodes[1].generate(1)\n "
      },
      {
        "sha": "f686cb6ea57e32de87f931a7f36b48ab1307a5f4",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -140,7 +140,7 @@ def run_test(self):\n             inputs.append({ \"txid\" : utxo[\"txid\"], \"vout\" : utxo[\"vout\"]})\n             outputs[self.nodes[2].getnewaddress(\"from1\")] = utxo[\"amount\"] - 3\n             raw_tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-            txns_to_send.append(self.nodes[0].signrawtransaction(raw_tx))\n+            txns_to_send.append(self.nodes[0].signrawtransactionwithwallet(raw_tx))\n \n         # Have node 1 (miner) send the transactions\n         self.nodes[1].sendrawtransaction(txns_to_send[0][\"hex\"], True)\n@@ -225,7 +225,7 @@ def run_test(self):\n \n         rawTx = self.nodes[1].createrawtransaction(inputs, outputs).replace(\"c0833842\", \"00000000\") #replace 11.11 with 0.0 (int32)\n         decRawTx = self.nodes[1].decoderawtransaction(rawTx)\n-        signedRawTx = self.nodes[1].signrawtransaction(rawTx)\n+        signedRawTx = self.nodes[1].signrawtransactionwithwallet(rawTx)\n         decRawTx = self.nodes[1].decoderawtransaction(signedRawTx['hex'])\n         zeroValueTxid= decRawTx['txid']\n         self.nodes[1].sendrawtransaction(signedRawTx['hex'])\n@@ -400,7 +400,7 @@ def run_test(self):\n         node0_balance = self.nodes[0].getbalance()\n         # Split into two chains\n         rawtx = self.nodes[0].createrawtransaction([{\"txid\":singletxid, \"vout\":0}], {chain_addrs[0]:node0_balance/2-Decimal('0.01'), chain_addrs[1]:node0_balance/2-Decimal('0.01')})\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         singletxid = self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n "
      },
      {
        "sha": "3e496248fd82a51dd32c00aade00049c3a1a5d09",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -121,7 +121,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n         \"sequence\": BIP125_SEQUENCE_NUMBER\n     }], {dest_address: Decimal(\"0.0005\"),\n          rbf_node.getrawchangeaddress(): Decimal(\"0.0003\")})\n-    rbfsigned = rbf_node.signrawtransaction(rbfraw)\n+    rbfsigned = rbf_node.signrawtransactionwithwallet(rbfraw)\n     rbfid = rbf_node.sendrawtransaction(rbfsigned[\"hex\"])\n     assert rbfid in rbf_node.getrawmempool()\n \n@@ -150,8 +150,8 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     } for utxo in utxos]\n     output_val = sum(utxo[\"amount\"] for utxo in utxos) - Decimal(\"0.001\")\n     rawtx = rbf_node.createrawtransaction(inputs, {dest_address: output_val})\n-    signedtx = rbf_node.signrawtransaction(rawtx)\n-    signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n+    signedtx = rbf_node.signrawtransactionwithwallet(rawtx)\n+    signedtx = peer_node.signrawtransactionwithwallet(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n     assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n@@ -162,7 +162,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     # parent is send-to-self, so we don't have to check which output is change when creating the child tx\n     parent_id = spend_one_input(rbf_node, rbf_node_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n-    tx = rbf_node.signrawtransaction(tx)\n+    tx = rbf_node.signrawtransactionwithwallet(tx)\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n@@ -277,7 +277,7 @@ def spend_one_input(node, dest_address):\n     rawtx = node.createrawtransaction(\n         [tx_input], {dest_address: Decimal(\"0.00050000\"),\n                      node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n-    signedtx = node.signrawtransaction(rawtx)\n+    signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n "
      },
      {
        "sha": "25e27166611dd2d326d891faa08737b4be19de87",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -158,7 +158,7 @@ def test_double_spend(self):\n             'vout': utxo['vout'],\n         }]\n         txid1 = self.nodes[1].sendrawtransaction(\n-            self.nodes[1].signrawtransaction(\n+            self.nodes[1].signrawtransactionwithwallet(\n                 self.nodes[1].createrawtransaction(utxoDicts, recipientDict))['hex'])\n \n         # send from nodes[2] using utxo to nodes[3]\n@@ -167,7 +167,7 @@ def test_double_spend(self):\n             self.nodes[2].getnewaddress(): change,\n         }\n         self.nodes[2].sendrawtransaction(\n-            self.nodes[2].signrawtransaction(\n+            self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict2))['hex'])\n \n         # generate on both sides\n@@ -232,7 +232,7 @@ def test_double_send(self):\n             'txid': utxo['txid'],\n             'vout': utxo['vout'],\n         }]\n-        signedtxres = self.nodes[2].signrawtransaction(\n+        signedtxres = self.nodes[2].signrawtransactionwithwallet(\n                 self.nodes[2].createrawtransaction(utxoDicts, recipientDict))\n         assert signedtxres['complete']\n "
      },
      {
        "sha": "d742ec461831830d7a357ac6dd2a668ecfe9dcb0",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -78,7 +78,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransaction(clone_raw, None, None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_raw, None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      },
      {
        "sha": "f16756eeaaa32b6cbb58dd98c92134c8d2632bb7",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         outputs[node1_address] = 1240\n         outputs[change_address] = 1248 - 1240 + doublespend_fee\n         rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        doublespend = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         assert_equal(doublespend[\"complete\"], True)\n \n         # Create two spends using 1 50 BTC coin each"
      }
    ]
  },
  {
    "sha": "32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmU2OWZhMGRmOGZjMWNmYzhhYzRmODM4MWJjNTRiOGYzM2UxYzM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-19T23:49:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:20Z"
      },
      "message": "Replace CBitcoinSecret with {Encode,Decode}Secret",
      "tree": {
        "sha": "cd00b30d48911729cef8bd436797177bd8ebeb33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd00b30d48911729cef8bd436797177bd8ebeb33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 180,
      "additions": 62,
      "deletions": 118
    },
    "files": [
      {
        "sha": "826fe630bc82190f38269c22f541224b6eea21a5",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 26,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -323,39 +323,35 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n }\n } // namespace\n \n-void CBitcoinSecret::SetKey(const CKey& vchSecret)\n+CKey DecodeSecret(const std::string& str)\n {\n-    assert(vchSecret.IsValid());\n-    SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n-    if (vchSecret.IsCompressed())\n-        vchData.push_back(1);\n+    CKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n+            bool compressed = data.size() == 33 + privkey_prefix.size();\n+            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+        }\n+    }\n+    memory_cleanse(data.data(), data.size());\n+    return key;\n }\n \n-CKey CBitcoinSecret::GetKey()\n+std::string EncodeSecret(const CKey& key)\n {\n-    CKey ret;\n-    assert(vchData.size() >= 32);\n-    ret.Set(vchData.begin(), vchData.begin() + 32, vchData.size() > 32 && vchData[32] == 1);\n+    assert(key.IsValid());\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    data.insert(data.end(), key.begin(), key.end());\n+    if (key.IsCompressed()) {\n+        data.push_back(1);\n+    }\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n     return ret;\n }\n \n-bool CBitcoinSecret::IsValid() const\n-{\n-    bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n-    bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n-    return fExpectedFormat && fCorrectVersion;\n-}\n-\n-bool CBitcoinSecret::SetString(const char* pszSecret)\n-{\n-    return CBase58Data::SetString(pszSecret) && IsValid();\n-}\n-\n-bool CBitcoinSecret::SetString(const std::string& strSecret)\n-{\n-    return SetString(strSecret.c_str());\n-}\n-\n std::string EncodeDestination(const CTxDestination& dest)\n {\n     return boost::apply_visitor(DestinationEncoder(Params()), dest);"
      },
      {
        "sha": "c3dea060b6817e4e0d973f7314f077c782d357e1",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -94,21 +94,8 @@ class CBase58Data\n     bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n };\n \n-/**\n- * A base58-encoded secret key\n- */\n-class CBitcoinSecret : public CBase58Data\n-{\n-public:\n-    void SetKey(const CKey& vchSecret);\n-    CKey GetKey();\n-    bool IsValid() const;\n-    bool SetString(const char* pszSecret);\n-    bool SetString(const std::string& strSecret);\n-\n-    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }\n-    CBitcoinSecret() {}\n-};\n+CKey DecodeSecret(const std::string& str);\n+std::string EncodeSecret(const CKey& key);\n \n template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n {"
      },
      {
        "sha": "4770635c6af61693d7095a77c624a5837cf98bb8",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -563,12 +563,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n     for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n         if (!keysObj[kidx].isStr())\n             throw std::runtime_error(\"privatekey not a std::string\");\n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(keysObj[kidx].getValStr());\n-        if (!fGood)\n+        CKey key = DecodeSecret(keysObj[kidx].getValStr());\n+        if (!key.IsValid()) {\n             throw std::runtime_error(\"privatekey not valid\");\n-\n-        CKey key = vchSecret.GetKey();\n+        }\n         tempKeystore.AddKey(key);\n     }\n "
      },
      {
        "sha": "8d62fbe5c27592850460bb78cc9f71de256fb116",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -224,13 +224,10 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n \n-    CBitcoinSecret vchSecret;\n-    bool fGood = vchSecret.SetString(strPrivkey);\n-    if (!fGood)\n+    CKey key = DecodeSecret(strPrivkey);\n+    if (!key.IsValid()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-    CKey key = vchSecret.GetKey();\n-    if (!key.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+    }\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;"
      },
      {
        "sha": "d87d733609512afabae96e98acce1133e48d2b6e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -896,13 +896,9 @@ UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     const UniValue& keys = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n         UniValue k = keys[idx];\n-        CBitcoinSecret vchSecret;\n-        if (!vchSecret.SetString(k.get_str())) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-        }\n-        CKey key = vchSecret.GetKey();\n+        CKey key = DecodeSecret(k.get_str());\n         if (!key.IsValid()) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n         }\n         keystore.AddKey(key);\n     }"
      },
      {
        "sha": "56a81edfb450d355db6b84d9cd444887a7e5acd2",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n {\n     UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-    CBitcoinSecret secret;\n+    CKey privkey;\n     CTxDestination destination;\n     SelectParams(CBaseChainParams::MAIN);\n \n@@ -97,9 +97,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n         if (isPrivkey) {\n             bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n             // Must be valid private key\n-            BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n-            BOOST_CHECK_MESSAGE(secret.IsValid(), \"!IsValid:\" + strTest);\n-            CKey privkey = secret.GetKey();\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n             BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n             BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n \n@@ -129,8 +128,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             }\n \n             // Public key must be invalid private key\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n }\n@@ -158,9 +157,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n             CKey key;\n             key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n             assert(key.IsValid());\n-            CBitcoinSecret secret;\n-            secret.SetKey(key);\n-            BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n+            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n         } else {\n             CTxDestination dest;\n             CScript exp_script(exp_payload.begin(), exp_payload.end());\n@@ -179,7 +176,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n {\n     UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n-    CBitcoinSecret secret;\n+    CKey privkey;\n     CTxDestination destination;\n \n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n@@ -197,8 +194,8 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n             SelectParams(chain);\n             destination = DecodeDestination(exp_base58string);\n             BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n         }\n     }\n }"
      },
      {
        "sha": "27a749045c2be789186f38d17835c5c4d92aee7d",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -85,10 +85,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n     std::string strSecret = std::string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n-    CBitcoinSecret vchSecret;\n-    BOOST_CHECK(vchSecret.SetString(strSecret));\n-\n-    CKey key = vchSecret.GetKey();\n+    CKey key = DecodeSecret(strSecret);\n     CPubKey pubkey = key.GetPubKey();\n     std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());\n "
      },
      {
        "sha": "5a1464d653c2214b1b2d932d65f587ea40528ce7",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -32,21 +32,16 @@ BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {\n-    CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C, baddress1;\n-    BOOST_CHECK( bsecret1.SetString (strSecret1));\n-    BOOST_CHECK( bsecret2.SetString (strSecret2));\n-    BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n-    BOOST_CHECK( bsecret2C.SetString(strSecret2C));\n-    BOOST_CHECK(!baddress1.SetString(strAddressBad));\n-\n-    CKey key1  = bsecret1.GetKey();\n-    BOOST_CHECK(key1.IsCompressed() == false);\n-    CKey key2  = bsecret2.GetKey();\n-    BOOST_CHECK(key2.IsCompressed() == false);\n-    CKey key1C = bsecret1C.GetKey();\n-    BOOST_CHECK(key1C.IsCompressed() == true);\n-    CKey key2C = bsecret2C.GetKey();\n-    BOOST_CHECK(key2C.IsCompressed() == true);\n+    CKey key1  = DecodeSecret(strSecret1);\n+    BOOST_CHECK(key1.IsValid() && !key1.IsCompressed());\n+    CKey key2  = DecodeSecret(strSecret2);\n+    BOOST_CHECK(key2.IsValid() && !key2.IsCompressed());\n+    CKey key1C = DecodeSecret(strSecret1C);\n+    BOOST_CHECK(key1C.IsValid() && key1C.IsCompressed());\n+    CKey key2C = DecodeSecret(strSecret2C);\n+    BOOST_CHECK(key2C.IsValid() && key2C.IsCompressed());\n+    CKey bad_key = DecodeSecret(strAddressBad);\n+    BOOST_CHECK(!bad_key.IsValid());\n \n     CPubKey pubkey1  = key1. GetPubKey();\n     CPubKey pubkey2  = key2. GetPubKey();"
      },
      {
        "sha": "502d49d0aa723bb3ccc3d568bb8279b41d9e2b53",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 29,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "patch": "@@ -147,13 +147,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n         }\n \n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(strSecret);\n-\n-        if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-\n-        CKey key = vchSecret.GetKey();\n-        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        CKey key = DecodeSecret(strSecret);\n+        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n \n         CPubKey pubkey = key.GetPubKey();\n         assert(key.VerifyPubKey(pubkey));\n@@ -554,9 +549,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n             boost::split(vstr, line, boost::is_any_of(\" \"));\n             if (vstr.size() < 2)\n                 continue;\n-            CBitcoinSecret vchSecret;\n-            if (vchSecret.SetString(vstr[0])) {\n-                CKey key = vchSecret.GetKey();\n+            CKey key = DecodeSecret(vstr[0]);\n+            if (key.IsValid()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 assert(key.VerifyPubKey(pubkey));\n                 CKeyID keyid = pubkey.GetID();\n@@ -659,7 +653,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!pwallet->GetKey(keyid, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n-    return CBitcoinSecret(vchSecret).ToString();\n+    return EncodeSecret(vchSecret);\n }\n \n \n@@ -755,7 +749,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n-            file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n+            file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n             if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n                file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n@@ -911,17 +905,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 for (size_t i = 0; i < keys.size(); i++) {\n                     const std::string& privkey = keys[i].get_str();\n \n-                    CBitcoinSecret vchSecret;\n-                    bool fGood = vchSecret.SetString(privkey);\n-\n-                    if (!fGood) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CKey key = vchSecret.GetKey();\n+                    CKey key = DecodeSecret(privkey);\n \n                     if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                     }\n \n                     CPubKey pubkey = key.GetPubKey();\n@@ -1018,16 +1005,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 const std::string& strPrivkey = keys[0].get_str();\n \n                 // Checks.\n-                CBitcoinSecret vchSecret;\n-                bool fGood = vchSecret.SetString(strPrivkey);\n+                CKey key = DecodeSecret(strPrivkey);\n \n-                if (!fGood) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n-\n-                CKey key = vchSecret.GetKey();\n                 if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                 }\n \n                 CPubKey pubKey = key.GetPubKey();"
      }
    ]
  },
  {
    "sha": "ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmZlMjE3YjE1ZDIxNjU2YTE3M2U1YzEwMmY4MjZkMTdjNmM4YmU0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T00:13:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Stop using CBase58Data for ext keys",
      "tree": {
        "sha": "4a461f0b2f02f96935d87faef0fcd7c10feeb415",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a461f0b2f02f96935d87faef0fcd7c10feeb415"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebfe217b15d21656a173e5c102f826d17c6c8be4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32e69fa0df8fc1cfc8ac4f8381bc54b8f33e1c38"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 56,
      "deletions": 138
    },
    "files": [
      {
        "sha": "b2c3161d146342f01b0a3c9445b24244642e4852",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 61,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -152,67 +152,6 @@ bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRe\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n \n-CBase58Data::CBase58Data()\n-{\n-    vchVersion.clear();\n-    vchData.clear();\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)\n-{\n-    vchVersion = vchVersionIn;\n-    vchData.resize(nSize);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), pdata, nSize);\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n-{\n-    SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n-}\n-\n-bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n-{\n-    std::vector<unsigned char> vchTemp;\n-    bool rc58 = DecodeBase58Check(psz, vchTemp);\n-    if ((!rc58) || (vchTemp.size() < nVersionBytes)) {\n-        vchData.clear();\n-        vchVersion.clear();\n-        return false;\n-    }\n-    vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n-    vchData.resize(vchTemp.size() - nVersionBytes);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), vchTemp.data() + nVersionBytes, vchData.size());\n-    memory_cleanse(vchTemp.data(), vchTemp.size());\n-    return true;\n-}\n-\n-bool CBase58Data::SetString(const std::string& str)\n-{\n-    return SetString(str.c_str());\n-}\n-\n-std::string CBase58Data::ToString() const\n-{\n-    std::vector<unsigned char> vch = vchVersion;\n-    vch.insert(vch.end(), vchData.begin(), vchData.end());\n-    return EncodeBase58Check(vch);\n-}\n-\n-int CBase58Data::CompareTo(const CBase58Data& b58) const\n-{\n-    if (vchVersion < b58.vchVersion)\n-        return -1;\n-    if (vchVersion > b58.vchVersion)\n-        return 1;\n-    if (vchData < b58.vchData)\n-        return -1;\n-    if (vchData > b58.vchData)\n-        return 1;\n-    return 0;\n-}\n-\n namespace\n {\n class DestinationEncoder : public boost::static_visitor<std::string>\n@@ -352,6 +291,53 @@ std::string EncodeSecret(const CKey& key)\n     return ret;\n }\n \n+CExtPubKey DecodeExtPubKey(const std::string& str)\n+{\n+    CExtPubKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtPubKey(const CExtPubKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    return ret;\n+}\n+\n+CExtKey DecodeExtKey(const std::string& str)\n+{\n+    CExtKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtKey(const CExtKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n std::string EncodeDestination(const CTxDestination& dest)\n {\n     return boost::apply_visitor(DestinationEncoder(Params()), dest);"
      },
      {
        "sha": "db33d0859c1f1e5a9054edcff3f3957d9d0f06c9",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 4,
        "deletions": 61,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -64,70 +64,13 @@ inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRe\n  */\n inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n-/**\n- * Base class for all base58-encoded data\n- */\n-class CBase58Data\n-{\n-protected:\n-    //! the version byte(s)\n-    std::vector<unsigned char> vchVersion;\n-\n-    //! the actually encoded data\n-    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n-    vector_uchar vchData;\n-\n-    CBase58Data();\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize);\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend);\n-\n-public:\n-    bool SetString(const char* psz, unsigned int nVersionBytes = 1);\n-    bool SetString(const std::string& str);\n-    std::string ToString() const;\n-    int CompareTo(const CBase58Data& b58) const;\n-\n-    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n-    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n-    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n-    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n-    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n-};\n-\n CKey DecodeSecret(const std::string& str);\n std::string EncodeSecret(const CKey& key);\n \n-template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n-{\n-public:\n-    void SetKey(const K &key) {\n-        unsigned char vch[Size];\n-        key.Encode(vch);\n-        SetData(Params().Base58Prefix(Type), vch, vch+Size);\n-    }\n-\n-    K GetKey() {\n-        K ret;\n-        if (vchData.size() == Size) {\n-            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n-            ret.Decode(vchData.data());\n-        }\n-        return ret;\n-    }\n-\n-    CBitcoinExtKeyBase(const K &key) {\n-        SetKey(key);\n-    }\n-\n-    CBitcoinExtKeyBase(const std::string& strBase58c) {\n-        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n-    }\n-\n-    CBitcoinExtKeyBase() {}\n-};\n-\n-typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n-typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n+CExtKey DecodeExtKey(const std::string& str);\n+std::string EncodeExtKey(const CExtKey& extkey);\n+CExtPubKey DecodeExtPubKey(const std::string& str);\n+std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);"
      },
      {
        "sha": "d4c29b2635c2eb95d28c88b4239a564953e886be",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 12,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -99,20 +99,12 @@ void RunTest(const TestVector &test) {\n         pubkey.Encode(data);\n \n         // Test private key\n-        CBitcoinExtKey b58key; b58key.SetKey(key);\n-        BOOST_CHECK(b58key.ToString() == derive.prv);\n-\n-        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n-        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n-        assert(checkKey == key); //ensure a base58 decoded key also matches\n+        BOOST_CHECK(EncodeExtKey(key) == derive.prv);\n+        BOOST_CHECK(DecodeExtKey(derive.prv) == key); //ensure a base58 decoded key also matches\n \n         // Test public key\n-        CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n-        BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n-\n-        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n-        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n-        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+        BOOST_CHECK(EncodeExtPubKey(pubkey) == derive.pub);\n+        BOOST_CHECK(DecodeExtPubKey(derive.pub) == pubkey); //ensure a base58 decoded pubkey also matches\n \n         // Derive new keys\n         CExtKey keyNew;"
      },
      {
        "sha": "bf6c0815fed4466ce30c0b177ce9d5cde881825b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebfe217b15d21656a173e5c102f826d17c6c8be4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "patch": "@@ -736,10 +736,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             CExtKey masterKey;\n             masterKey.SetMaster(key.begin(), key.size());\n \n-            CBitcoinExtKey b58extkey;\n-            b58extkey.SetKey(masterKey);\n-\n-            file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+            file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {"
      }
    ]
  },
  {
    "sha": "119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTliMGY4NWUyYzhiOTcyOTIyOGFhZDVkOTQ2MTQ0ZDU3YWQwZjVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T01:12:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Split key_io (address/key encodings) off from base58",
      "tree": {
        "sha": "995176b950d3a072f68e3f799d166362407c5c08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/995176b950d3a072f68e3f799d166362407c5c08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebfe217b15d21656a173e5c102f826d17c6c8be4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebfe217b15d21656a173e5c102f826d17c6c8be4"
      }
    ],
    "stats": {
      "total": 556,
      "additions": 295,
      "deletions": 261
    },
    "files": [
      {
        "sha": "a213924a5f35d2e995a6f6f591364061c420d660",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -105,6 +105,7 @@ BITCOIN_CORE_H = \\\n   indirectmap.h \\\n   init.h \\\n   key.h \\\n+  key_io.h \\\n   keystore.h \\\n   dbwrapper.h \\\n   limitedmap.h \\\n@@ -327,6 +328,7 @@ libbitcoin_common_a_SOURCES = \\\n   core_read.cpp \\\n   core_write.cpp \\\n   key.cpp \\\n+  key_io.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\"
      },
      {
        "sha": "982e123a1d36f54c784287724cb757c281402c43",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,20 +4,12 @@\n \n #include <base58.h>\n \n-#include <bech32.h>\n #include <hash.h>\n-#include <script/script.h>\n #include <uint256.h>\n-#include <utilstrencodings.h>\n \n-#include <boost/variant/apply_visitor.hpp>\n-#include <boost/variant/static_visitor.hpp>\n-\n-#include <algorithm>\n #include <assert.h>\n #include <string.h>\n \n-\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -151,209 +143,3 @@ bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRe\n {\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n-\n-namespace\n-{\n-class DestinationEncoder : public boost::static_visitor<std::string>\n-{\n-private:\n-    const CChainParams& m_params;\n-\n-public:\n-    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n-\n-    std::string operator()(const CKeyID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const CScriptID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const WitnessV0KeyHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessUnknown& id) const\n-    {\n-        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n-            return {};\n-        }\n-        std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const CNoDestination& no) const { return {}; }\n-};\n-\n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n-{\n-    std::vector<unsigned char> data;\n-    uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n-        // base58-encoded Bitcoin addresses.\n-        // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n-        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n-            return CKeyID(hash);\n-        }\n-        // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n-        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n-            return CScriptID(hash);\n-        }\n-    }\n-    data.clear();\n-    auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n-        // Bech32 decoding\n-        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n-        // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n-            if (version == 0) {\n-                {\n-                    WitnessV0KeyHash keyid;\n-                    if (data.size() == keyid.size()) {\n-                        std::copy(data.begin(), data.end(), keyid.begin());\n-                        return keyid;\n-                    }\n-                }\n-                {\n-                    WitnessV0ScriptHash scriptid;\n-                    if (data.size() == scriptid.size()) {\n-                        std::copy(data.begin(), data.end(), scriptid.begin());\n-                        return scriptid;\n-                    }\n-                }\n-                return CNoDestination();\n-            }\n-            if (version > 16 || data.size() < 2 || data.size() > 40) {\n-                return CNoDestination();\n-            }\n-            WitnessUnknown unk;\n-            unk.version = version;\n-            std::copy(data.begin(), data.end(), unk.program);\n-            unk.length = data.size();\n-            return unk;\n-        }\n-    }\n-    return CNoDestination();\n-}\n-} // namespace\n-\n-CKey DecodeSecret(const std::string& str)\n-{\n-    CKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n-        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n-            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n-            bool compressed = data.size() == 33 + privkey_prefix.size();\n-            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n-        }\n-    }\n-    memory_cleanse(data.data(), data.size());\n-    return key;\n-}\n-\n-std::string EncodeSecret(const CKey& key)\n-{\n-    assert(key.IsValid());\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n-    data.insert(data.end(), key.begin(), key.end());\n-    if (key.IsCompressed()) {\n-        data.push_back(1);\n-    }\n-    std::string ret = EncodeBase58Check(data);\n-    memory_cleanse(data.data(), data.size());\n-    return ret;\n-}\n-\n-CExtPubKey DecodeExtPubKey(const std::string& str)\n-{\n-    CExtPubKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n-        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n-            key.Decode(data.data() + prefix.size());\n-        }\n-    }\n-    return key;\n-}\n-\n-std::string EncodeExtPubKey(const CExtPubKey& key)\n-{\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n-    size_t size = data.size();\n-    data.resize(size + BIP32_EXTKEY_SIZE);\n-    key.Encode(data.data() + size);\n-    std::string ret = EncodeBase58Check(data);\n-    return ret;\n-}\n-\n-CExtKey DecodeExtKey(const std::string& str)\n-{\n-    CExtKey key;\n-    std::vector<unsigned char> data;\n-    if (DecodeBase58Check(str, data)) {\n-        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n-        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n-            key.Decode(data.data() + prefix.size());\n-        }\n-    }\n-    return key;\n-}\n-\n-std::string EncodeExtKey(const CExtKey& key)\n-{\n-    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n-    size_t size = data.size();\n-    data.resize(size + BIP32_EXTKEY_SIZE);\n-    key.Encode(data.data() + size);\n-    std::string ret = EncodeBase58Check(data);\n-    memory_cleanse(data.data(), data.size());\n-    return ret;\n-}\n-\n-std::string EncodeDestination(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n-}\n-\n-CTxDestination DecodeDestination(const std::string& str)\n-{\n-    return DecodeDestination(str, Params());\n-}\n-\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n-{\n-    return IsValidDestination(DecodeDestination(str, params));\n-}\n-\n-bool IsValidDestinationString(const std::string& str)\n-{\n-    return IsValidDestinationString(str, Params());\n-}"
      },
      {
        "sha": "8f2833bec9a944d2fe44b88c3a7b43dd59ab8169",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 21,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,12 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <chainparams.h>\n-#include <key.h>\n-#include <pubkey.h>\n-#include <script/standard.h>\n-#include <support/allocators/zeroafterfree.h>\n-\n #include <string>\n #include <vector>\n \n@@ -56,25 +50,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n-\n-CKey DecodeSecret(const std::string& str);\n-std::string EncodeSecret(const CKey& key);\n-\n-CExtKey DecodeExtKey(const std::string& str);\n-std::string EncodeExtKey(const CExtKey& extkey);\n-CExtPubKey DecodeExtPubKey(const std::string& str);\n-std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n-\n-std::string EncodeDestination(const CTxDestination& dest);\n-CTxDestination DecodeDestination(const std::string& str);\n-bool IsValidDestinationString(const std::string& str);\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "fcd836fb450dcbefdcc5d542a6c2709fbaf8270b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -6,11 +6,11 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>"
      },
      {
        "sha": "91742b7d1b550fd20160bd9dcda4619d2f5d6959",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <core_io.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <serialize.h>"
      },
      {
        "sha": "82ae733006728706a4481b9e2a435d93eae6c0c3",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <httprpc.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <httpserver.h>\n+#include <key_io.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <random.h>"
      },
      {
        "sha": "20df945d8def1ec16d081735cdc386f51442b450",
        "filename": "src/key_io.cpp",
        "status": "added",
        "additions": 223,
        "deletions": 0,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -0,0 +1,223 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+\n+#include <base58.h>\n+#include <bech32.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/apply_visitor.hpp>\n+#include <boost/variant/static_visitor.hpp>\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <algorithm>\n+\n+namespace\n+{\n+class DestinationEncoder : public boost::static_visitor<std::string>\n+{\n+private:\n+    const CChainParams& m_params;\n+\n+public:\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n+\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n+\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n+{\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n+    return CNoDestination();\n+}\n+} // namespace\n+\n+CKey DecodeSecret(const std::string& str)\n+{\n+    CKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n+            bool compressed = data.size() == 33 + privkey_prefix.size();\n+            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+        }\n+    }\n+    memory_cleanse(data.data(), data.size());\n+    return key;\n+}\n+\n+std::string EncodeSecret(const CKey& key)\n+{\n+    assert(key.IsValid());\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    data.insert(data.end(), key.begin(), key.end());\n+    if (key.IsCompressed()) {\n+        data.push_back(1);\n+    }\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+CExtPubKey DecodeExtPubKey(const std::string& str)\n+{\n+    CExtPubKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtPubKey(const CExtPubKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    return ret;\n+}\n+\n+CExtKey DecodeExtKey(const std::string& str)\n+{\n+    CExtKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtKey(const CExtKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+std::string EncodeDestination(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n+}\n+\n+CTxDestination DecodeDestination(const std::string& str)\n+{\n+    return DecodeDestination(str, Params());\n+}\n+\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n+{\n+    return IsValidDestination(DecodeDestination(str, params));\n+}\n+\n+bool IsValidDestinationString(const std::string& str)\n+{\n+    return IsValidDestinationString(str, Params());\n+}"
      },
      {
        "sha": "6fc9a8059a543b725283544e79cb1d406faf0351",
        "filename": "src/key_io.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KEYIO_H\n+#define BITCOIN_KEYIO_H\n+\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+\n+#include <string>\n+\n+CKey DecodeSecret(const std::string& str);\n+std::string EncodeSecret(const CKey& key);\n+\n+CExtKey DecodeExtKey(const std::string& str);\n+std::string EncodeExtKey(const CExtKey& extkey);\n+CExtPubKey DecodeExtPubKey(const std::string& str);\n+std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n+\n+std::string EncodeDestination(const CTxDestination& dest);\n+CTxDestination DecodeDestination(const std::string& str);\n+bool IsValidDestinationString(const std::string& str);\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+\n+#endif // BITCOIN_KEYIO_H"
      },
      {
        "sha": "4f9a79d654546cee5f3dbe3981c45191b54a44d3",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -7,10 +7,9 @@\n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <wallet/wallet.h>\n \n-\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "6a76358a7834561c2c81d0df633c6d1ba967a3eb",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <qt/bitcoinaddressvalidator.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n \n /* Base58 characters are:\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""
      },
      {
        "sha": "b83755ab3092e216423ecca43b53e73e3f0e564d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <wallet/coincontrol.h>\n #include <init.h>\n+#include <key_io.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <validation.h> // For mempool"
      },
      {
        "sha": "4aa5827761dccb382816042fb4144d883bb19513",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,7 +9,10 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n+#include <base58.h>\n+#include <chainparams.h>\n #include <primitives/transaction.h>\n+#include <key_io.h>\n #include <init.h>\n #include <policy/policy.h>\n #include <protocol.h>"
      },
      {
        "sha": "357e98a53c6c5b632195a7ca9f22f248688c4fee",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <qt/paymentrequestplus.h>\n \n+#include <script/script.h>\n #include <util.h>\n \n #include <stdexcept>"
      },
      {
        "sha": "b1b60cf582dbd970d80a583dabf1f4ace73b6404",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,7 +10,8 @@\n #include <qt/paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n-#include <base58.h>\n+#include <amount.h>\n+#include <script/script.h>\n \n #include <openssl/x509.h>\n "
      },
      {
        "sha": "8ad4fa31f18ae719225049ee5a07ad236facd61e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -8,9 +8,9 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <policy/policy.h>\n+#include <key_io.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "db5a8a4ebec30bcc6fa7c43409d94f5238e00fd2",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsentry.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n+#include <key_io.h>\n #include <wallet/coincontrol.h>\n #include <validation.h> // mempool and minRelayTxFee\n #include <ui_interface.h>"
      },
      {
        "sha": "8dade8df7984eb97c921389e0e81392727fd5ced",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,8 +10,8 @@\n #include <qt/platformstyle.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h> // For strMessageMagic\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "29ef4b4c9e7ec029fe71c4e7c25113d4d20aea1c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/test/paymentrequestdata.h>\n \n #include <amount.h>\n+#include <chainparams.h>\n #include <random.h>\n #include <script/script.h>\n #include <script/standard.h>"
      },
      {
        "sha": "5ba75cc91de34321d4d0a085d72cd5ab187a41e1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -10,6 +10,7 @@\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n #include <qt/walletmodel.h>\n+#include <key_io.h>\n #include <test/test_bitcoin.h>\n #include <validation.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "a68488ac9be5b6fb431151ffcbea643cab9990fe",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,8 +9,8 @@\n #include <qt/paymentserver.h>\n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <script/script.h>\n #include <timedata.h>"
      },
      {
        "sha": "2830149655e0f4b12123c60415a69362c2b7120a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <timedata.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "e7d9d276d70cda4edad3a9846de4145d0404ccac",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h> // for g_connman"
      },
      {
        "sha": "811996b98f7f92b853f2698c10d3228b0c66a616",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,6 +5,11 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n+#include <amount.h>\n+#include <key.h>\n+#include <serialize.h>\n+#include <script/standard.h>\n+\n #include <qt/paymentrequestplus.h>\n #include <qt/walletmodeltransaction.h>\n "
      },
      {
        "sha": "3073a49d0db3c526cc56c85ba3c26dcfc6d0f799",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n@@ -13,6 +12,7 @@\n #include <core_io.h>\n #include <init.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <miner.h>\n #include <net.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "6f0913410399375406c0507cadda92ff8a749d69",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <clientversion.h>\n #include <core_io.h>\n #include <crypto/ripemd160.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <httpserver.h>\n #include <net.h>"
      },
      {
        "sha": "8dcfb48e9ae137a9c96f7f0eb65dbf0a72b2ae7e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <coins.h>\n #include <consensus/validation.h>\n@@ -12,6 +11,7 @@\n #include <keystore.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <net.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "35401bf876b2570891c3c45c4d49c2f334ffb5a7",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <rpc/server.h>\n \n-#include <base58.h>\n #include <fs.h>\n #include <init.h>\n+#include <key_io.h>\n #include <random.h>\n #include <sync.h>\n #include <ui_interface.h>"
      },
      {
        "sha": "593962e7104eb99a36af56c8250e2133fe16150d",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>"
      },
      {
        "sha": "63885a7affbb09a4a7908512e0f2d02a01877a03",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -9,6 +9,7 @@\n #include <test/data/base58_keys_valid.json.h>\n \n #include <key.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <test/test_bitcoin.h>\n #include <uint256.h>"
      },
      {
        "sha": "3c9ff1877dd8fda9964e6df06ab6e33132f11c6f",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include <base58.h>\n #include <key.h>\n+#include <key_io.h>\n #include <uint256.h>\n #include <util.h>\n #include <utilstrencodings.h>"
      },
      {
        "sha": "73c8eb5168abb941fdde90b93c1a0502b6237a43",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <bloom.h>\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <key.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <primitives/block.h>\n #include <random.h>"
      },
      {
        "sha": "64c57f0705f00bf362a32e7a1b2702cf8a977cab",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <key.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <uint256.h>\n #include <util.h>"
      },
      {
        "sha": "892e4f2dac98b43e10ec8e1ef178fa8ebd6ec971",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,8 +5,8 @@\n #include <rpc/server.h>\n #include <rpc/client.h>\n \n-#include <base58.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <netbase.h>\n \n #include <test/test_bitcoin.h>"
      },
      {
        "sha": "a2b7ce6b02a01247777f81741c2ce70b60fe9bf1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <wallet/init.h>"
      },
      {
        "sha": "52b68e97ee1e71d75bf86bdd004f6a46ed743aa7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -4,12 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n-#include <base58.h>\n #include <chain.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <httpserver.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "3b86fdc4854c74eb01c54e2926ba490af57b1ae7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <wallet/wallet.h>\n \n-#include <base58.h>\n #include <checkpoints.h>\n #include <chain.h>\n #include <wallet/coincontrol.h>\n@@ -14,6 +13,7 @@\n #include <fs.h>\n #include <wallet/init.h>\n #include <key.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h>"
      },
      {
        "sha": "c14fbd1e8ca7c91bf0da22ee2b4194116af19010",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/119b0f85e2c8b9729228aad5d946144d57ad0f5b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "patch": "@@ -5,10 +5,10 @@\n \n #include <wallet/walletdb.h>\n \n-#include <base58.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <fs.h>\n+#include <key_io.h>\n #include <protocol.h>\n #include <serialize.h>\n #include <sync.h>"
      }
    ]
  },
  {
    "sha": "92f1f8b3197c2ba3cf65556070509838098975a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmYxZjhiMzE5N2MyYmEzY2Y2NTU1NjA3MDUwOTgzODA5ODk3NWE0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-20T23:57:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-02-20T02:55:21Z"
      },
      "message": "Split off key_io_tests from base58_tests",
      "tree": {
        "sha": "6096fc5d7b30a3ab33a633e721eed3a8a2259eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6096fc5d7b30a3ab33a633e721eed3a8a2259eae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92f1f8b3197c2ba3cf65556070509838098975a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f1f8b3197c2ba3cf65556070509838098975a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92f1f8b3197c2ba3cf65556070509838098975a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f1f8b3197c2ba3cf65556070509838098975a4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/119b0f85e2c8b9729228aad5d946144d57ad0f5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/119b0f85e2c8b9729228aad5d946144d57ad0f5b"
      }
    ],
    "stats": {
      "total": 298,
      "additions": 156,
      "deletions": 142
    },
    "files": [
      {
        "sha": "4ee9102519dff8615d37c5834de4eac4e0264c9f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -9,13 +9,13 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n-  test/data/script_tests.json \\\n-  test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n-  test/data/base58_keys_invalid.json \\\n+  test/data/key_io_valid.json \\\n+  test/data/key_io_invalid.json \\\n+  test/data/script_tests.json \\\n+  test/data/sighash.json \\\n   test/data/tx_invalid.json \\\n-  test/data/tx_valid.json \\\n-  test/data/sighash.json\n+  test/data/tx_valid.json\n \n RAW_TEST_FILES =\n \n@@ -45,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n   test/dbwrapper_tests.cpp \\"
      },
      {
        "sha": "f90d4f90cb655ca2a19b5a909b892737d4da6015",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 137,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -2,18 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n-\n #include <test/data/base58_encode_decode.json.h>\n-#include <test/data/base58_keys_invalid.json.h>\n-#include <test/data/base58_keys_valid.json.h>\n \n-#include <key.h>\n-#include <key_io.h>\n-#include <script/script.h>\n+#include <base58.h>\n #include <test/test_bitcoin.h>\n-#include <uint256.h>\n-#include <util.h>\n #include <utilstrencodings.h>\n \n #include <univalue.h>\n@@ -74,132 +66,4 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Goal: check that parsed keys match test payload\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-    CKey privkey;\n-    CTxDestination destination;\n-    SelectParams(CBaseChainParams::MAIN);\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            // Must be valid private key\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n-\n-            // Private key must be invalid public key\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        } else {\n-            // Must be valid public key\n-            destination = DecodeDestination(exp_base58string);\n-            CScript script = GetScriptForDestination(destination);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-\n-            // Try flipped case version\n-            for (char& c : exp_base58string) {\n-                if (c >= 'a' && c <= 'z') {\n-                    c = (c - 'a') + 'A';\n-                } else if (c >= 'A' && c <= 'Z') {\n-                    c = (c - 'A') + 'a';\n-                }\n-            }\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n-            if (IsValidDestination(destination)) {\n-                script = GetScriptForDestination(destination);\n-                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-            }\n-\n-            // Public key must be invalid private key\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n-        }\n-    }\n-}\n-\n-// Goal: check that generated keys match test vectors\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            CKey key;\n-            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n-            assert(key.IsValid());\n-            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n-        } else {\n-            CTxDestination dest;\n-            CScript exp_script(exp_payload.begin(), exp_payload.end());\n-            ExtractDestination(exp_script, dest);\n-            std::string address = EncodeDestination(dest);\n-\n-            BOOST_CHECK_EQUAL(address, exp_base58string);\n-        }\n-    }\n-\n-    SelectParams(CBaseChainParams::MAIN);\n-}\n-\n-\n-// Goal: check that base58 parsing code is robust against a variety of corrupted data\n-BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n-    CKey privkey;\n-    CTxDestination destination;\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-\n-        // must be invalid as public and as private key\n-        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n-            SelectParams(chain);\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n-            privkey = DecodeSecret(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n-        }\n-    }\n-}\n-\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "previous_filename": "src/test/data/base58_keys_invalid.json"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/key_io_valid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "previous_filename": "src/test/data/base58_keys_valid.json"
      },
      {
        "sha": "1ac1e0015bf3e569c641680966cd42c2ae6642dc",
        "filename": "src/test/key_io_tests.cpp",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92f1f8b3197c2ba3cf65556070509838098975a4/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=92f1f8b3197c2ba3cf65556070509838098975a4",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/data/key_io_invalid.json.h>\n+#include <test/data/key_io_valid.json.h>\n+\n+#include <key.h>\n+#include <key_io.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+extern UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(key_io_tests, BasicTestingSetup)\n+\n+// Goal: check that parsed keys match test payload\n+BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+    CKey privkey;\n+    CTxDestination destination;\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            // Must be valid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n+\n+            // Private key must be invalid public key\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n+        } else {\n+            // Must be valid public key\n+            destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+\n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n+\n+            // Public key must be invalid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+        }\n+    }\n+}\n+\n+// Goal: check that generated keys match test vectors\n+BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            CKey key;\n+            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n+            assert(key.IsValid());\n+            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n+        } else {\n+            CTxDestination dest;\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n+            std::string address = EncodeDestination(dest);\n+\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n+        }\n+    }\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+}\n+\n+\n+// Goal: check that base58 parsing code is robust against a variety of corrupted data\n+BOOST_AUTO_TEST_CASE(key_io_invalid)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_invalid, json_tests::key_io_invalid + sizeof(json_tests::key_io_invalid))); // Negative testcases\n+    CKey privkey;\n+    CTxDestination destination;\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+\n+        // must be invalid as public and as private key\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmUxYjVkOTc5N2I2NWQzY2UxM2E3Y2JhY2UxNWZiZWRiY2Q0MDE4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-20T04:20:36Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-20T04:21:54Z"
      },
      "message": "[test] Round target fee to 8 decimals in assert_fee_amount\n\nThe output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\nAssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\nThe above looks like the expected fee is 6175 sats when in reality it's 618.",
      "tree": {
        "sha": "0ec33d72d5d4101755e4c556a6b52b9662aed2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ec33d72d5d4101755e4c556a6b52b9662aed2cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqLomUACgkQV692LbM1\nMyI/0w/+N9lva3KYt5bVVml0CC7iwm8GWc4dembpkmtaVtIulofbuqZBKdBiX0lU\nM1I+YCPHQdJ3lBzxry2YbVOONnLLAiA25axAmg5bhDr5PgMK9Q/XW2T7ZJ/u7Tzt\n6qiSfzDuDnKK0VcGZKZzb1tx6OH+Qh7htBiCpPb02arjKDaDCPseruVw6BDxXVfL\nbVoL4TFgw2C86leJsasU9gQ1DhUDUtm7qIf2wIcFsuMvLf7/sGQ3w1G544oBMpxd\nZHmCi+G2aN7xsv9ZA6ONmqGLjRBH1iIqvo+X5s3ShitJ7w9O4d7kD+TG+mr1yt9c\n2wqT5UD4C2ME2MoNgW/w5+PrVtds5ttcJEbCAsASS6Jqy7aOyo4atrt8mWAnuYAt\nxe3Ki7Jo8cMLbw5XegAAChgtVYCDEv/Tn0VmgUQ8xtp+kjZCfwEzCyaG4D11ZvBR\n/jlpADPafRS5auzJcztMX3iyp196dafwTAIsgD7HPPtprlUGR052S+r8SyS3wsSt\n8CZIIzjbJjbKFyUdld0Zh3hncvCV6IOqEmCLAlYG8fNTQ12M9fqA4QlyeIm7O6aP\nIORx+sk1bxxmqSumy2ktgBprAMFZs1EI8aVyj6EQPcLHooImQmM832yRwgjuZMU5\nFDRlkkRX6AuIvNoDPKTCeGi7kd8eHAfrsV2EYHnS7wy8nOOiIdc=\n=D5KC\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ec33d72d5d4101755e4c556a6b52b9662aed2cf\nparent dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519100436 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519100514 +0900\n\n[test] Round target fee to 8 decimals in assert_fee_amount\n\nThe output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\nAssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\nThe above looks like the expected fee is 6175 sats when in reality it's 618.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcfe218626b05204e9fbc95ba5d95ca0eb72ec9b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "644f2d868aa35fc74e956493b9d7d0d7e8c7fbbf",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "patch": "@@ -26,7 +26,7 @@\n \n def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n+    target_fee = round(tx_size * fee_per_kB / 1000, 8)\n     if fee < target_fee:\n         raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off"
      }
    ]
  },
  {
    "sha": "d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmVlNmUzZTA1NDI2OTgzODMyZWE0ZjRjNWJiNDQ3MjM3NjNkOWQ4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-20T09:47:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-20T09:48:38Z"
      },
      "message": "init: Remove translation for `-blockmaxsize` option help\n\nMove `-blockmaxsize`, a deprecated option which is replaced by\n`-blockmaxweight`, to debug options and remove the translation.\n\nThis message is absolutely terrible for translators (esp the `* 4`\npart).",
      "tree": {
        "sha": "c652d710a4c4d8c5fc70c7f3b32afbadf8d897d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c652d710a4c4d8c5fc70c7f3b32afbadf8d897d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1cc5c5f9c746156dae462ae9b35801f450477ae9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2ee6e3e05426983832ea4f4c5bb44723763d9d8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "patch": "@@ -490,7 +490,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", \"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\");\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)"
      }
    ]
  },
  {
    "sha": "a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmU2ZTM5YThiYWYwNzU2MjQwNDI3Y2M1ZGM1ZmNlNWFlYTUxZjBk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-20T10:03:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-20T10:05:03Z"
      },
      "message": "Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings",
      "tree": {
        "sha": "824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqL8s8ACgkQHrd2uwPH\nki0vSw/+PaRpFMRMDhFvOpBqORlttNgrjkkkz8QnQVO0hrqw9yoR31cncsVp9X1d\n6NuFBWvATznUylRKALV3fR0BAHQcuFKcYT+PxCAwQ8UXiePsaNQS3DiuRW5skxN6\nmca3bzV2kcPeJaXgKcuLPjcrHe3NHnzsshlO2hNkOMBoMUPVoSuUtViEBnmnVUqj\nYyEp7Nz0BYDHK9YIuUNlr8IRCfAez3R1z6ceu8X3Iz7Hz5HkqqURsHieS52g/gbZ\nry2fE8WQlRN0F/vhRSKIvaSEp0zc6gpRd/LjLubCeV0k7wmNtj5hEZMZ+N/iYA72\nBeXXBUZuUgtZlv4InCj48vneVPc9WPwyyhupCxXokyAnmwd493HatYTdSMRSoMW9\ndAOHD0KZu3e0rRMgsYZfSRUpcYJHAG0W6zUZDFZ7DhzaCrGs2vemAPNlnj0JgOls\njaUTe3STEXfM/D9kA3pegrgJzxOs/pglNpSQwGKRW2e6XDzU8bOdLs2HMoFMiRel\nBoUdEQ1pUBswRC7k1nqUCvoBvRjMNCdEF1WHGMGapKUK6ieDYI/XY3l9NrA+ztNA\nmtsfmzP4fGZor5QWYZi+Bx8JxSLX/WTjTucn8KGOxigXtU7KUrmTesJPJ2/4ux8u\nogmJm+ETbQwBpkhQzWZ3NuZfBejIE/3Zdw1jvbqQTG5eV/Hjl8s=\n=ib7e\n-----END PGP SIGNATURE-----",
        "payload": "tree 824ecbd1e9e7b32ee4be8e0a5b68f4a3e7533615\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1519121030 +1100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519121103 +1100\n\nBugfix: respect user defined configuration file (-conf) when open conf. file from QT settings\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a46e0561b9dccd83ed67d3847c6aceeaadd52174",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "patch": "@@ -417,7 +417,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME);\n+    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      }
    ]
  },
  {
    "sha": "ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzkxZWE2NGMyYjFkYWVjOGZlZTBiZmRlNDQzYzE4Y2Y4NzU5NWFl",
    "commit": {
      "author": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2018-02-16T17:49:51Z"
      },
      "committer": {
        "name": "Henrik Jonsson",
        "email": "me@hkjn.me",
        "date": "2018-02-20T14:42:14Z"
      },
      "message": "[depends] Allow depends system to support armv7l",
      "tree": {
        "sha": "68edbad26dbf5c48d04d8f1b64b23f0a030ec949",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68edbad26dbf5c48d04d8f1b64b23f0a030ec949"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/comments",
    "author": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hkjn",
      "id": 287215,
      "node_id": "MDQ6VXNlcjI4NzIxNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287215?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hkjn",
      "html_url": "https://github.com/hkjn",
      "followers_url": "https://api.github.com/users/hkjn/followers",
      "following_url": "https://api.github.com/users/hkjn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hkjn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hkjn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hkjn/subscriptions",
      "organizations_url": "https://api.github.com/users/hkjn/orgs",
      "repos_url": "https://api.github.com/users/hkjn/repos",
      "events_url": "https://api.github.com/users/hkjn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hkjn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14e94ba453a9f31655d69ee64c5a608bc5db2eda",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -21,7 +21,6 @@ BUILD_ID_SALT ?= salt\n host:=$(BUILD)\n ifneq ($(HOST),)\n host:=$(HOST)\n-host_toolchain:=$(HOST)-\n endif\n \n ifneq ($(DEBUG),)"
      },
      {
        "sha": "144e5f88b7820ae9d920f1d0e5ad850c44ca67d2",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -1,3 +1,7 @@\n+ifneq ($(host),$(build))\n+host_toolchain:=$(host)-\n+endif\n+\n default_host_CC = $(host_toolchain)gcc\n default_host_CXX = $(host_toolchain)g++\n default_host_AR = $(host_toolchain)ar"
      },
      {
        "sha": "37f0c28a529ca1930263c1cdf06a64cf5ccaf7d0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac91ea64c2b1daec8fee0bfde443c18cf87595ae/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "patch": "@@ -47,6 +47,7 @@ $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32\n+$(package)_config_opts_armv7l_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTE3Y2ZlNDVlZWU5MTY5NDA5ZTc0YTQ0ZWY0YTg2NmJlMjViYzM1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-20T20:25:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-20T20:25:03Z"
      },
      "message": "Merge #12489: Bugfix: respect user defined configuration file (-conf) in QT settings\n\na6e6e39a8b Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings (Jonas Schnelli)\n\nPull request description:\n\n  Fixes #12488.\n\n  In master, opening the configuration file from the GUI settings will always open the file \"bitcoin.conf\" regardless of the `-conf=` settings.\n  This PR makes the GUI settings open configuration file function respect the `-conf` option.\n\nTree-SHA512: fb54cc699b4d2a3947f749fdf5f1a51251ffd67d0f6c6a937a5b80f0ba5a5c1085d0eef190453bbc04696d4d76c2c266de0fe9712e65e4bb36116158b54263d4",
      "tree": {
        "sha": "cf5fb71a3d464670d600908d5687cb16bd1d7bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5fb71a3d464670d600908d5687cb16bd1d7bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajIQfAAoJENLqSFDnUoslUYMQAInAS/JFGSAdreW3wjP0Ydko\neukqMQyhie6WgZA/22wBjetLzSY90lThD6yWdwbfsx5iumPkiai+7IYT2zfs9gM3\n3xfQWtnEbChojHsas1uIQGtJ2689WDpSb7qNA4JbZi+F50vfnVrJJJCseUMsDXkq\n86EY8bQZ2cqrNx9I6C2fIiNH/wPBOOMrwwPQhTc+EksfQ9luE3NTXg8hCHRdgMKq\n3RefhemFMjdRh0P9mMowprEYJNY8mydHpIklGTbjgJtmstnycpu/jFhgWqNH8W/t\n8qLbP7jsNT5Up7R/JEgDjS0W2lL/r2plA9jMlNwSQy5S09+XSzGrEI01OTbhosjp\n9BsPcR11TDwLab1Bogmx9EAPpAvgSd6VPZVNpc3ptasjbadvmIbCt/5SRMTqB11D\nVxkt7phrFcB+t5HxMj6bOjRAigC//u9F4zfXNq7tN9DZhBWmXQ3N6ANdi5kxCcUr\nIAyyEPnuJzyB0Xz3h248uXbb+nh4Px92y9Cmu7+1sqPzZC9wEmurj5//YXkuK1Gf\nO4vZxYuRMn7cEocRxusMtUv+8ThrmJJkJNEpkLorj/J+9Qhz5MZxpybaoKzXSvAp\n3PKuI06BTS8+4dKeolFNyr9Wk9WMUe7pilJZIdUPyqcWi9XiUnTm1yH3yQz5IrSx\nC8LrEoz4aHiS0tJQGZbY\n=M/A/\n-----END PGP SIGNATURE-----",
        "payload": "tree cf5fb71a3d464670d600908d5687cb16bd1d7bc5\nparent ffc6e48b2983189dc0ce7de0a038e5329bc07b1b\nparent a6e6e39a8baf0756240427cc5dc5fce5aea51f0d\nauthor MarcoFalke <falke.marco@gmail.com> 1519158300 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519158303 -0500\n\nMerge #12489: Bugfix: respect user defined configuration file (-conf) in QT settings\n\na6e6e39a8b Bugfix: respect user defined configuration file (-conf) when open conf. file from QT settings (Jonas Schnelli)\n\nPull request description:\n\n  Fixes #12488.\n\n  In master, opening the configuration file from the GUI settings will always open the file \"bitcoin.conf\" regardless of the `-conf=` settings.\n  This PR makes the GUI settings open configuration file function respect the `-conf` option.\n\nTree-SHA512: fb54cc699b4d2a3947f749fdf5f1a51251ffd67d0f6c6a937a5b80f0ba5a5c1085d0eef190453bbc04696d4d76c2c266de0fe9712e65e4bb36116158b54263d4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffc6e48b2983189dc0ce7de0a038e5329bc07b1b"
      },
      {
        "sha": "a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e6e39a8baf0756240427cc5dc5fce5aea51f0d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a46e0561b9dccd83ed67d3847c6aceeaadd52174",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e117cfe45eee9169409e74a44ef4a866be25bc35/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e117cfe45eee9169409e74a44ef4a866be25bc35/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=e117cfe45eee9169409e74a44ef4a866be25bc35",
        "patch": "@@ -417,7 +417,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME);\n+    boost::filesystem::path pathConfig = GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      }
    ]
  },
  {
    "sha": "eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWNjNWIyNGY4MzJiOGZkZTQxMTk2MjI5NzBiNGUzZjcyYzA2OWI1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-20T22:16:33Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-20T22:16:37Z"
      },
      "message": "Declare CMutableTransaction a struct in rawtransaction.h\n\nBecause it's a struct.",
      "tree": {
        "sha": "7dd38cca12bdd85b13fa429498434cb06380da54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd38cca12bdd85b13fa429498434cb06380da54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJajJ5QAAoJEG7l83hfeLNF8WQIAKPxpVoWVNV6BXGVLB26gMhf\nogc6EBHYeTHtlJkEhHcaXBP61ROqlM6UOJS0gT1rEI13Pah0PnUodNBeAtpjG9ju\nNl/M1anXAa2Hk17uLXwHTzBF01MQTY5nZvpD9UqmmqcEVPhxR3b8kyHI/hhxWl2n\nkLZSFrElb65WMxKtVHMp0/VQsrqIuDOsb4zJDQLsK2eW+X160j8/LoXaAWzbOjR5\nkO5OwAb5xfLBQ0tebgxcMKBY4KoUTiYMIaHHRxasRy6IHzy0FCDqBRfApZxA6UhS\nkhdfF5U5Pj7A8rybWQ6D/A73X+qsq39vq3VRPMreeyLH+CkhWWU5TRy6YI4SbD0=\n=OekD\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dd38cca12bdd85b13fa429498434cb06380da54\nparent e117cfe45eee9169409e74a44ef4a866be25bc35\nauthor Ben Woosley <ben.woosley@gmail.com> 1519164993 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1519164997 -0800\n\nDeclare CMutableTransaction a struct in rawtransaction.h\n\nBecause it's a struct.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eacc5b24f832b8fde4119622970b4e3f72c069b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9d1f2cf06b090adca276e473e4aae7776a19dc",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eacc5b24f832b8fde4119622970b4e3f72c069b5/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eacc5b24f832b8fde4119622970b4e3f72c069b5/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_H\n \n class CBasicKeyStore;\n-class CMutableTransaction;\n+struct CMutableTransaction;\n class UniValue;\n \n /** Sign a transaction with the given keystore and previous transactions */"
      }
    ]
  },
  {
    "sha": "e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGM5MjRjNTE3OTJlMmI3YzI1NmEwMGRmZDAzYWE4YzllYmEzY2Vh",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-02-21T16:08:20Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-02-21T16:08:20Z"
      },
      "message": "createmultisig no longer takes addresses",
      "tree": {
        "sha": "4fe6c04b6a3ff4033f84ccdaacd58696c4efbfd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe6c04b6a3ff4033f84ccdaacd58696c4efbfd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89005ddad1c4a9732ecae47c7de34b4de157f48f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89005ddad1c4a9732ecae47c7de34b4de157f48f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "aba004a63984a610388e29daa4f3cb9cd08cdd34",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "patch": "@@ -263,7 +263,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n             \"     [\\n\"\n             \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\""
      }
    ]
  },
  {
    "sha": "e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGZmY2FjYzIxODdkMzQxOWM4ZWExMmI4MmZiMDZkODJkODc1MWQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T20:42:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T20:42:49Z"
      },
      "message": "Merge #12494: Declare CMutableTransaction a struct in rawtransaction.h\n\neacc5b24f8 Declare CMutableTransaction a struct in rawtransaction.h (Ben Woosley)\n\nPull request description:\n\n  Because it's a struct.\n\n  Fix for #10579 - this was called out in code review. https://github.com/bitcoin/bitcoin/pull/10579#discussion_r168936821\n\nTree-SHA512: 10758a667218481de6f50b5ed874e92eb350c621f7a6355fba7da6ab42b09e1764f827e89491c8663e554fcfd23f124b299f968237c6ad1ff7819e211bd7e521",
      "tree": {
        "sha": "7dd38cca12bdd85b13fa429498434cb06380da54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd38cca12bdd85b13fa429498434cb06380da54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajdnJAAoJENLqSFDnUoslatMP+wbQPJI9JEYdHp6JU5gdNvkq\nusg+VlMYTCLOulDNKfQCW4PA8W3sC0WvxOn+0mMKL3bQIV60aTO0SaNlgEfwdBS7\nxbXJEtEZJ9e6MioxXq9purX/FmOVxnIzL+tdK20D8zQtp+wAwlotOaRNAhsF+NGD\nJVwg8ygVNX41Hv4PxBX7wGDUslicycWF2NdUMHxNBUxYamMzvqKjiGzVr78xZJej\nL9q4LzB5eBe1PYXh3APZJfyMHWSD1XLJLQi6wtrAap9ngARx7izu+xWahWl5sG9n\nlyVor3pOUFGdCtIFRq7SHoo7GcaaVXLL54v6iD+qPeMstpfpvNdpMtyE96WwUGTr\ne68nAiKWRR/8peowK9ilHe07Wwx3RhW5EkRecCa0FRk0ineM9t/nqNagxEfY7tyw\naAUyOzUW6mJUSwINj/1i2v/9Fja0scVQYxODy5dnDTRN2ojx0rP9qXctuww3Hk1f\ngkyCMKo9Md4HQuCJ5cnS2aAzvbl3PX8XDhcmkvZf7GbZMHfped/ZTk9CwxqCFPf+\nY6hgmbeaOyMgKUtgFk8wNI727ErR1Nzb1+4CxFkeO5WjeSeg6sdrjNRb3NCq5uR+\nmgZUWEwas7aX+Umjas1vQZaRkr6euVQod1mPB8kVSHPYRsFjxV2z8QirhDc45UE4\nrRKV8620GKlICpDrvofr\n=3+VF\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dd38cca12bdd85b13fa429498434cb06380da54\nparent e117cfe45eee9169409e74a44ef4a866be25bc35\nparent eacc5b24f832b8fde4119622970b4e3f72c069b5\nauthor MarcoFalke <falke.marco@gmail.com> 1519245767 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519245769 -0500\n\nMerge #12494: Declare CMutableTransaction a struct in rawtransaction.h\n\neacc5b24f8 Declare CMutableTransaction a struct in rawtransaction.h (Ben Woosley)\n\nPull request description:\n\n  Because it's a struct.\n\n  Fix for #10579 - this was called out in code review. https://github.com/bitcoin/bitcoin/pull/10579#discussion_r168936821\n\nTree-SHA512: 10758a667218481de6f50b5ed874e92eb350c621f7a6355fba7da6ab42b09e1764f827e89491c8663e554fcfd23f124b299f968237c6ad1ff7819e211bd7e521\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35"
      },
      {
        "sha": "eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eacc5b24f832b8fde4119622970b4e3f72c069b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eacc5b24f832b8fde4119622970b4e3f72c069b5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec9d1f2cf06b090adca276e473e4aae7776a19dc",
        "filename": "src/rpc/rawtransaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/src/rpc/rawtransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2/src/rpc/rawtransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.h?ref=e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "patch": "@@ -6,7 +6,7 @@\n #define BITCOIN_RPC_RAWTRANSACTION_H\n \n class CBasicKeyStore;\n-class CMutableTransaction;\n+struct CMutableTransaction;\n class UniValue;\n \n /** Sign a transaction with the given keystore and previous transactions */"
      }
    ]
  },
  {
    "sha": "0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTI2NTkxNmQxYzZhNjNlNGEzODIxZGFiOWRiNTk3YjVlYzY0YjQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T22:01:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-21T22:01:26Z"
      },
      "message": "Merge #12503: [RPC] createmultisig no longer takes addresses\n\ne4c924c517 createmultisig no longer takes addresses (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: a6a752ef2282c5c893dd1a6ff5ccab42d3de1989847af627d82d41605ea19abc0aaf68567a62b6478933ba7eea09f911087b410ba7d3a815331ef15ec1ff9df0",
      "tree": {
        "sha": "573600393242dea530b953de614e095f96f34ad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/573600393242dea530b953de614e095f96f34ad4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJajew2AAoJENLqSFDnUoslnisQAKEQZqX2hJm062VcvBANPfiZ\nJIuZackxstMqP0WEEK7pw3nF8lK3nksAhJXWo3IhIAI6i9qFl4GoQpfdujEgMEOW\n1NCglpm2NyJsRTiIuUoODqDHsOPEL6OTcCHBmRjU85fsXKmCviggaj106cTojKvr\nouvggR3gKLxeSHoM2UoSg1WLiXSJsal3SpTcoATXlAUtLPNpCPOkx/NAL5Et2GfB\nH8/WTv55Hcyla92q5BivvjcG3nzLhpUXQQAVE8DNjlcBvYfuiBYpPkiry9ZqblKr\nHKxetCYZfRtLTHyd9r0RJPJyGfpfD9zuoQsrKzNjS0cJUjgfGswlWGfpJZelBbXX\nWeSW3OoloQ0i+jPcZdeYEKZyk18NHPKAY6c9wmNyJ3fo1H70/hFJIvfhnxcRvDqE\nNxJJNOYakaIHAmT7tfUD2xKHNggv6jXzwvH9AI+MQTvvIx4MOhbNxCQPSdbMnB4X\nYj01vaxtQX43PUWlNcMoi6OLDE6QqFKZUW/uL+cSPvlN6925DcZ9iQNU3QkmYJvK\ncvshrs7wyPKA6U9tMfpGmiTcGOD5KVrrIwA7PTIZ89lztv8q/xGsrqLVJzYRRBM6\nlJU919YlMWGPz/pAuMoKlquOlX6U898cYgpfnQHYqYK0fDo6cuhNSezl7V4h388O\n/oDw0h43388aSdEJXVsI\n=xWXm\n-----END PGP SIGNATURE-----",
        "payload": "tree 573600393242dea530b953de614e095f96f34ad4\nparent e4ffcacc2187d3419c8ea12b82fb06d82d8751d2\nparent e4c924c51792e2b7c256a00dfd03aa8c9eba3cea\nauthor MarcoFalke <falke.marco@gmail.com> 1519250484 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519250486 -0500\n\nMerge #12503: [RPC] createmultisig no longer takes addresses\n\ne4c924c517 createmultisig no longer takes addresses (Gregory Sanders)\n\nPull request description:\n\nTree-SHA512: a6a752ef2282c5c893dd1a6ff5ccab42d3de1989847af627d82d41605ea19abc0aaf68567a62b6478933ba7eea09f911087b410ba7d3a815331ef15ec1ff9df0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4ffcacc2187d3419c8ea12b82fb06d82d8751d2"
      },
      {
        "sha": "e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4c924c51792e2b7c256a00dfd03aa8c9eba3cea"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f573c7dbeb4573771140445f0f2137963654a25c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e265916d1c6a63e4a3821dab9db597b5ec64b46/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e265916d1c6a63e4a3821dab9db597b5ec64b46/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "patch": "@@ -98,7 +98,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys or addresses.\\n\"\n+            \"1. nrequired                    (numeric, required) The number of required signatures out of the n keys.\\n\"\n             \"2. \\\"keys\\\"                       (string, required) A json array of hex-encoded public keys\\n\"\n             \"     [\\n\"\n             \"       \\\"key\\\"                    (string) The hex-encoded public key\\n\""
      }
    ]
  },
  {
    "sha": "4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTI4Zjc0ZmMyMDJhYThmZjE1MmZmMjRmODMxOTMzOGZkYWYzZmQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T07:17:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T07:18:02Z"
      },
      "message": "Merge #12487: init: Remove translation for `-blockmaxsize` option help\n\nd2ee6e3 init: Remove translation for `-blockmaxsize` option help (Wladimir J. van der Laan)\n\nPull request description:\n\n  Move `-blockmaxsize`, a deprecated option which is replaced by `-blockmaxweight`, to debug options and remove the translation.\n\n  This message is absolutely terrible for translators (esp the `* 4` part).\n\n  (for 0.17 we should probably remove this option completely?)\n\n  (reported by French Language Coordinator)\n\nTree-SHA512: 379150c9217672d2f2f93b4c02a3ac638e77ca56fb518e30c56c46d59f89eac422b4f540e70a9abd3c6ad653ac4b786d4734621b18f93804885d81e223f1a908",
      "tree": {
        "sha": "4b78037afda204bfaf67d04260683cf4b8f56604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b78037afda204bfaf67d04260683cf4b8f56604"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJajm6qAAoJEB5K7WKYbNJdRWEH/0UqNdcaWPeRC/lp15Op6nsm\nPUsRrQ+VZlZ1bCWC3Va8ysCK4fzTJ2i6xrcU5wtgyXikE/jN4NjSNgMgBivpHy8q\n/TtwTeVM7modz4PBWY8mhjA2bvsT47c08oXWQwn4l2+R1CQ2OXfscztqZy5mPYEv\nVaZJHf91Ee2GTvLRJUCiogRy+S3ujMyYMA8wa7cPJDv9k994FTWHEBqrLeznsPc3\nlKyWNfbYfMF5uSYjLpPe3NRZZ/w31lsYaGI10TfYOlNC/4E0+kNqMwKKUeF2qbLH\nvbm1RlRtT5GZRDbekmz1FimERlDNnuKXIhlzNzr3s0pctJG4eovA4uUfI4MzcY8=\n=O69w\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b78037afda204bfaf67d04260683cf4b8f56604\nparent 0e265916d1c6a63e4a3821dab9db597b5ec64b46\nparent d2ee6e3e05426983832ea4f4c5bb44723763d9d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519283834 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519283882 +0100\n\nMerge #12487: init: Remove translation for `-blockmaxsize` option help\n\nd2ee6e3 init: Remove translation for `-blockmaxsize` option help (Wladimir J. van der Laan)\n\nPull request description:\n\n  Move `-blockmaxsize`, a deprecated option which is replaced by `-blockmaxweight`, to debug options and remove the translation.\n\n  This message is absolutely terrible for translators (esp the `* 4` part).\n\n  (for 0.17 we should probably remove this option completely?)\n\n  (reported by French Language Coordinator)\n\nTree-SHA512: 379150c9217672d2f2f93b4c02a3ac638e77ca56fb518e30c56c46d59f89eac422b4f540e70a9abd3c6ad653ac4b786d4734621b18f93804885d81e223f1a908\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e265916d1c6a63e4a3821dab9db597b5ec64b46"
      },
      {
        "sha": "d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2ee6e3e05426983832ea4f4c5bb44723763d9d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2ee6e3e05426983832ea4f4c5bb44723763d9d8"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1cc5c5f9c746156dae462ae9b35801f450477ae9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4528f74fc202aa8ff152ff24f8319338fdaf3fd6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "patch": "@@ -490,7 +490,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n+    if (showDebug)\n+        strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", \"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\");\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)"
      }
    ]
  },
  {
    "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWU2NGEyMWJhMjVjYTg2ZmUyYmJiNTgxNjgxZGMyMGQ2MTNmYjQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T15:03:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-22T15:04:42Z"
      },
      "message": "Merge #12451: Bump leveldb subtree\n\n835a21b Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5 (MarcoFalke)\n\nPull request description:\n\n  Pull in changes from https://github.com/bitcoin/bitcoin/pull/11674#issuecomment-348174674.\n\n  Merges cleanly into master and 0.16 branch.\n\nTree-SHA512: 819c042c0dfac8dc3078fc182c1e22d4a85b343967475d3389be5b5b056361114d8c9892437cd1dc4b45808c27880c0e166e047afc2c2bd2bbc33e55336a8c33",
      "tree": {
        "sha": "ee4d90384abb7d859dba05c42bcd3af9477e5552",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee4d90384abb7d859dba05c42bcd3af9477e5552"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJajtwKAAoJEB5K7WKYbNJdbQgIAIcm1bj1TBuMIJZjX4d/P6XF\naUjRasVPGBn8xvMrqhArkLK/Z9lWN7KlF9NDOGaGycGz3FWiLgt+9J1KJMSYnJzq\nhOKsw9kDFquJz6KfxGRDIaP8Y5Tuqagv40UqRjvjs3mi9cR0y8oUPv3sNyRr22R9\nKvLzqKKDx2BLhbNUfEITpwNTAh8T1hG03w04K4Jv5ywLACQEb8PeavZ0ywSPeiSX\nO3VJOI+FJH0kA90jgsls1r8D7uarUiwBiySXAS2J6XnsI21b1C7ewOkalg3SdMd7\nB59VQ/NkzInan9zc28PhBdwZZDXZEH3tfc09eNzA6s+ttvZO71PMCiY3/PWUiE4=\n=s+pn\n-----END PGP SIGNATURE-----",
        "payload": "tree ee4d90384abb7d859dba05c42bcd3af9477e5552\nparent 4528f74fc202aa8ff152ff24f8319338fdaf3fd6\nparent faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519311809 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519311882 +0100\n\nMerge #12451: Bump leveldb subtree\n\n835a21b Squashed 'src/leveldb/' changes from c521b3ac65..64052c76c5 (MarcoFalke)\n\nPull request description:\n\n  Pull in changes from https://github.com/bitcoin/bitcoin/pull/11674#issuecomment-348174674.\n\n  Merges cleanly into master and 0.16 branch.\n\nTree-SHA512: 819c042c0dfac8dc3078fc182c1e22d4a85b343967475d3389be5b5b056361114d8c9892437cd1dc4b45808c27880c0e166e047afc2c2bd2bbc33e55336a8c33\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4528f74fc202aa8ff152ff24f8319338fdaf3fd6"
      },
      {
        "sha": "faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa6dd27b1f1f96f5e1a26e830e1a80255afdb5f"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 32,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3bb58e560aa7c099c7937d226315d1ed46273d43",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -414,7 +414,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number, bool last_log,\n          status.ok()) {\n     if (record.size() < 12) {\n       reporter.Corruption(\n-          record.size(), Status::Corruption(\"log record too small\"));\n+          record.size(), Status::Corruption(\"log record too small\", fname));\n       continue;\n     }\n     WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "d06d64d640b19f60a37571dcb887be5f36ce1514",
        "filename": "src/leveldb/db/leveldbutil.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/leveldbutil.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/leveldbutil.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/leveldbutil.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -19,6 +19,7 @@ class StdoutPrinter : public WritableFile {\n   virtual Status Close() { return Status::OK(); }\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n+  virtual std::string GetName() const { return \"[stdout]\"; }\n };\n \n bool HandleDumpCommand(Env* env, char** files, int num) {"
      },
      {
        "sha": "8b6ad136d7dab58717e7d2ced614e1fb78024d8a",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -186,7 +186,7 @@ uint64_t Reader::LastRecordOffset() {\n }\n \n void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n-  ReportDrop(bytes, Status::Corruption(reason));\n+  ReportDrop(bytes, Status::Corruption(reason, file_->GetName()));\n }\n \n void Reader::ReportDrop(uint64_t bytes, const Status& reason) {"
      },
      {
        "sha": "7281e3d3457fe3a088a18472c25b699b986b42d5",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -203,7 +203,7 @@ class Repairer {\n     while (reader.ReadRecord(&record, &scratch)) {\n       if (record.size() < 12) {\n         reporter.Corruption(\n-            record.size(), Status::Corruption(\"log record too small\"));\n+            record.size(), Status::Corruption(\"log record too small\", logname));\n         continue;\n       }\n       WriteBatchInternal::SetContents(&batch, record);"
      },
      {
        "sha": "68c0614a59e5e98d635cf9b8b5d8b2ff0f75be22",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -176,6 +176,7 @@ class SequentialFileImpl : public SequentialFile {\n     return Status::OK();\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n   uint64_t pos_;\n@@ -196,6 +197,7 @@ class RandomAccessFileImpl : public RandomAccessFile {\n     return file_->Read(offset, n, result, scratch);\n   }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };\n@@ -218,6 +220,7 @@ class WritableFileImpl : public WritableFile {\n   virtual Status Flush() { return Status::OK(); }\n   virtual Status Sync() { return Status::OK(); }\n \n+  virtual std::string GetName() const { return \"[memenv]\"; }\n  private:\n   FileState* file_;\n };"
      },
      {
        "sha": "275d441eaeee49aa3418b0f672d03bd61d8bab6c",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -191,6 +191,9 @@ class SequentialFile {\n   // REQUIRES: External synchronization\n   virtual Status Skip(uint64_t n) = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   SequentialFile(const SequentialFile&);\n@@ -215,6 +218,9 @@ class RandomAccessFile {\n   virtual Status Read(uint64_t offset, size_t n, Slice* result,\n                       char* scratch) const = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   RandomAccessFile(const RandomAccessFile&);\n@@ -234,6 +240,9 @@ class WritableFile {\n   virtual Status Flush() = 0;\n   virtual Status Sync() = 0;\n \n+  // Get a name for the file, only for error reporting\n+  virtual std::string GetName() const = 0;\n+\n  private:\n   // No copying allowed\n   WritableFile(const WritableFile&);"
      },
      {
        "sha": "285e1c0de39d7f6a915f1812c9f18c17a4bcf908",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -82,7 +82,7 @@ Status ReadBlock(RandomAccessFile* file,\n   }\n   if (contents.size() != n + kBlockTrailerSize) {\n     delete[] buf;\n-    return Status::Corruption(\"truncated block read\");\n+    return Status::Corruption(\"truncated block read\", file->GetName());\n   }\n \n   // Check the crc of the type and the block contents\n@@ -92,7 +92,7 @@ Status ReadBlock(RandomAccessFile* file,\n     const uint32_t actual = crc32c::Value(data, n + 1);\n     if (actual != crc) {\n       delete[] buf;\n-      s = Status::Corruption(\"block checksum mismatch\");\n+      s = Status::Corruption(\"block checksum mismatch\", file->GetName());\n       return s;\n     }\n   }\n@@ -119,13 +119,13 @@ Status ReadBlock(RandomAccessFile* file,\n       size_t ulength = 0;\n       if (!port::Snappy_GetUncompressedLength(data, n, &ulength)) {\n         delete[] buf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       char* ubuf = new char[ulength];\n       if (!port::Snappy_Uncompress(data, n, ubuf)) {\n         delete[] buf;\n         delete[] ubuf;\n-        return Status::Corruption(\"corrupted compressed block contents\");\n+        return Status::Corruption(\"corrupted compressed block contents\", file->GetName());\n       }\n       delete[] buf;\n       result->data = Slice(ubuf, ulength);\n@@ -135,7 +135,7 @@ Status ReadBlock(RandomAccessFile* file,\n     }\n     default:\n       delete[] buf;\n-      return Status::Corruption(\"bad block type\");\n+      return Status::Corruption(\"bad block type\", file->GetName());\n   }\n \n   return Status::OK();"
      },
      {
        "sha": "4676bc2240c97b1eceb3e9961e5cee832b58492f",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -121,6 +121,8 @@ class PosixSequentialFile: public SequentialFile {\n     }\n     return Status::OK();\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // pread() based random-access\n@@ -172,6 +174,8 @@ class PosixRandomAccessFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n // mmap() based random-access\n@@ -206,6 +210,8 @@ class PosixMmapReadableFile: public RandomAccessFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n class PosixWritableFile : public WritableFile {\n@@ -287,6 +293,8 @@ class PosixWritableFile : public WritableFile {\n     }\n     return s;\n   }\n+\n+  virtual std::string GetName() const { return filename_; }\n };\n \n static int LockOrUnlock(int fd, bool lock) {"
      },
      {
        "sha": "81380216bb09b7afd9c85760bb729a28716bb069",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae64a21ba25ca86fe2bbb581681dc20d613fb44/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "patch": "@@ -78,6 +78,7 @@ class Win32SequentialFile : public SequentialFile\n     virtual Status Read(size_t n, Slice* result, char* scratch);\n     virtual Status Skip(uint64_t n);\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init();\n     void _CleanUp();\n@@ -94,6 +95,7 @@ class Win32RandomAccessFile : public RandomAccessFile\n     virtual ~Win32RandomAccessFile();\n     virtual Status Read(uint64_t offset, size_t n, Slice* result,char* scratch) const;\n     BOOL isEnable();\n+    virtual std::string GetName() const { return _filename; }\n private:\n     BOOL _Init(LPCWSTR path);\n     void _CleanUp();\n@@ -114,6 +116,7 @@ class Win32WritableFile : public WritableFile\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n+    virtual std::string GetName() const { return filename_; }\n private:\n     std::string filename_;\n     ::HANDLE _hFile;"
      }
    ]
  },
  {
    "sha": "fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRiMzljYTYyMzc3ODEzNDZjYTNkYTMxOWUyYmQ5ZTQ4YTVhNjA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-17T19:29:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-22T19:53:14Z"
      },
      "message": "test: Plug memory leaks and stack-use-after-scope",
      "tree": {
        "sha": "1f441104a6e3bd684d1a7c1e3669b07615a437f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f441104a6e3bd684d1a7c1e3669b07615a437f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJajx+qAAoJEM4rdWl+aaVIO3oMAKC+B6Ei70kD2mtRCTpF0ueW\n6kR0tEEhAaQVUNkBEwBPi0R7LXzCofCvxf7xRJHcjSasXQXFSh6pjiHTVjwLAMWh\nC94LtoQidBISSwNac9X4/xS4UoZqm85nPILmZzVpjvYlVx0glyGSyjXH6QOHCOx1\nNT29Yvqn+O0deuJ7UTIrpV8Fvde8pSenzCburL1ohmczedxofXrkn5XN4V0k6ZYx\nQkquowW9Wav5G0Wnz6hAAgC+ibSzyn/YDb1hm1hD2k2MiV449ibWVSfb63sdx7t5\naV/U8fEzqJcb6GyOwtFbLG5q/iky6AQOJuvfFt2AcODRftcO3wEXskSByeLZcH3J\n8eeVkKUOZecE5ssyCyoiebi7OZuowc+0o67GL1zYQCxx8gznjd0IfqB62Tvb9Zbh\nUDikXgw/IZRalrPBH/A2QvPyD/9SyDcCY9CM3/6fE9E8l0mI2b/L0na9URKrZvV7\nI8oLJBVbGOOzCQTc1+0jLljTU3fNyfLUYmUVLhRjnw==\n=eAdK\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f441104a6e3bd684d1a7c1e3669b07615a437f0\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nauthor MarcoFalke <falke.marco@gmail.com> 1518895796 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519329194 -0500\n\ntest: Plug memory leaks and stack-use-after-scope\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f438b60e97623dc12ae2c3b4e0f6a5ac04cce02",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -37,11 +37,6 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n-        // Empty wallet.\n-        for (COutput output : vCoins)\n-            delete output.tx;\n-        vCoins.clear();\n-\n         // Add coins.\n         for (int i = 0; i < 1000; i++)\n             addCoin(1000 * COIN, wallet, vCoins);\n@@ -53,6 +48,12 @@ static void CoinSelection(benchmark::State& state)\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n+\n+        // Empty wallet.\n+        for (COutput& output : vCoins) {\n+            delete output.tx;\n+        }\n+        vCoins.clear();\n     }\n }\n "
      },
      {
        "sha": "8e0ec5243b13e72f7b0dabca42b2d50284f0e205",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -406,11 +406,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         boost::thread_group tg;\n         std::mutex m;\n         std::condition_variable cv;\n+        bool has_lock{false};\n+        bool has_tried{false};\n+        bool done{false};\n+        bool done_ack{false};\n         {\n-            bool has_lock {false};\n-            bool has_tried {false};\n-            bool done {false};\n-            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "95c4825b840f0522bd29a9faac4b9be6b96e933b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -28,6 +28,9 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n+    for (CNode* node : g_connman->vNodes) {\n+        delete node;\n+    }\n     g_connman->vNodes.clear();\n }\n "
      }
    ]
  },
  {
    "sha": "55f89da1a5048cf275c37bceef664e7c04831a35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWY4OWRhMWE1MDQ4Y2YyNzVjMzdiY2VlZjY2NGU3YzA0ODMxYTM1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-22T21:30:47Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-22T21:30:50Z"
      },
      "message": "Don't test against the mempool min fee information in mempool_limit.py\n\nBecause the right-hand side of this comparison can be influenced\nexternally, e.g. via the -maxmempool argument, the existing mempool state,\nhost memory usage, etc.",
      "tree": {
        "sha": "4564212425977f58d20441436914330cab039dc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4564212425977f58d20441436914330cab039dc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55f89da1a5048cf275c37bceef664e7c04831a35",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f89da1a5048cf275c37bceef664e7c04831a35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55f89da1a5048cf275c37bceef664e7c04831a35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f89da1a5048cf275c37bceef664e7c04831a35/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5382fe439e4edb6eb34991a19935cf910bfcc049",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55f89da1a5048cf275c37bceef664e7c04831a35/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55f89da1a5048cf275c37bceef664e7c04831a35/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=55f89da1a5048cf275c37bceef664e7c04831a35",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n         txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzM2YzllMDVlYmQ3MWYyZWVhYjQ5MGRlN2Y5ZmJhOWVhOGI0MTY5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-23T07:10:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-23T07:10:42Z"
      },
      "message": "Avoid unintentional unsigned integer wraparounds in tests",
      "tree": {
        "sha": "2288814a29ae4c38f18fdd8e594e82541879db47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2288814a29ae4c38f18fdd8e594e82541879db47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "01c3a6cedd1bc11a4c507187ae21c137df29dc3f",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
        "patch": "@@ -206,7 +206,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.erase(InsecureRandRange(test.size()));\n             }\n             if (InsecureRandBits(3) == 2) {\n-                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (InsecureRandRange(5)) - 2));\n+                int new_size = std::max(0, std::min(30, (int)test.size() + (int)InsecureRandRange(5) - 2));\n                 test.resize(new_size);\n             }\n             if (InsecureRandBits(3) == 3) {"
      },
      {
        "sha": "179df7dd3871faa2a6cdd23a13a49e9b5d893b0e",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
        "patch": "@@ -56,8 +56,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     int counter[10] = { 0 };\n     FastRandomContext rng(42);\n     auto zeroToNine = [](FastRandomContext& rc) -> int { return rc.randrange(10); }; // [0, 9]\n-    auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + rc.randrange(1012); }; // [-11, 1000]\n-    auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + rc.randrange(2001); }; // [-1000, 1000]\n+    auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + (int)rc.randrange(1012); }; // [-11, 1000]\n+    auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + (int)rc.randrange(2001); }; // [-1000, 1000]\n \n     boost::chrono::system_clock::time_point start = boost::chrono::system_clock::now();\n     boost::chrono::system_clock::time_point now = start;"
      },
      {
        "sha": "e6510cc214bb81221c256c63f1c98057e89b942c",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
        "patch": "@@ -82,7 +82,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     wtx.mapValue[\"comment\"] = \"y\";\n     {\n         CMutableTransaction tx(*wtx.tx);\n-        --tx.nLockTime;  // Just to change the hash :)\n+        ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);\n@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     wtx.mapValue[\"comment\"] = \"x\";\n     {\n         CMutableTransaction tx(*wtx.tx);\n-        --tx.nLockTime;  // Just to change the hash :)\n+        ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);"
      }
    ]
  },
  {
    "sha": "8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzMzOTYxMzEzZDlhNmZkOWU2ZTE0ZjEzNjA1NzQ2OGE5MjliM2Ux",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:01:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:07:27Z"
      },
      "message": "Merge #12486: [test] Round target fee to 8 decimals in assert_fee_amount\n\n42e1b5d [test] Round target fee to 8 decimals in assert_fee_amount (Karl-Johan Alm)\n\nPull request description:\n\n  The output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\n  ```\n  AssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\n  ```\n  The above looks like the expected fee is 6175 sats when in reality it's 618.\n\nTree-SHA512: ddbff2926a88890d6e34a58db36f0b15a917a80064be6e40e9bcbec3f05ae6202d02adcd7873733945b043fa121d4a56dd930446ec368078fe1935cbfff898ce",
      "tree": {
        "sha": "5a88cc9d7394fdb8819150dad28625f804917cf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a88cc9d7394fdb8819150dad28625f804917cf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakDw/AAoJEB5K7WKYbNJdPBsH/1M+apfcrOVV1KtQxlOiKo9Q\n0XWiBtFov+vSjZceNIMRFIErVGUkvAaCjTUF8cO8U4tbACPpgpGumvwOQEv9sYzW\nbdrmojuJ4XlfazUF1fNeqdPUaGPmV9B1uidLYmVtfYtOrJ/KtbS3AcDXmwF2CBBG\nV4arMKTEfBAFbwaGVD9jG/Js38HRus7IU2QGPdsrMvqPVlK6IMvLGf8kKQETMFRy\n5jfCRjMAm/RmhVil6P7fNbDuHjr/ZhsbLoOctOkyieSIr/dDiOjjOKh2ZYOTVyYF\nW+FLgbG1VKj/qryFLecPV4ve0T5HV4clJPFMqj/Z2JZE3n4P1khpwL/hCR0MK4o=\n=+p3e\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a88cc9d7394fdb8819150dad28625f804917cf5\nparent aae64a21ba25ca86fe2bbb581681dc20d613fb44\nparent 42e1b5d9797b65d3ce13a7cbace15fbedbcd4018\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519401693 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402047 +0100\n\nMerge #12486: [test] Round target fee to 8 decimals in assert_fee_amount\n\n42e1b5d [test] Round target fee to 8 decimals in assert_fee_amount (Karl-Johan Alm)\n\nPull request description:\n\n  The output would produce arbitrary number of decimal points, sometimes resulting in 9 decimals:\n  ```\n  AssertionError: Fee of 0.00000415 BTC too low! (Should be 0.000006175 BTC)\n  ```\n  The above looks like the expected fee is 6175 sats when in reality it's 618.\n\nTree-SHA512: ddbff2926a88890d6e34a58db36f0b15a917a80064be6e40e9bcbec3f05ae6202d02adcd7873733945b043fa121d4a56dd930446ec368078fe1935cbfff898ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c33961313d9a6fd9e6e14f136057468a929b3e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae64a21ba25ca86fe2bbb581681dc20d613fb44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aae64a21ba25ca86fe2bbb581681dc20d613fb44"
      },
      {
        "sha": "42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42e1b5d9797b65d3ce13a7cbace15fbedbcd4018"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4fe586b848ac33240b8046a3289254490d3ad142",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c33961313d9a6fd9e6e14f136057468a929b3e1/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c33961313d9a6fd9e6e14f136057468a929b3e1/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "patch": "@@ -26,7 +26,7 @@\n \n def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n-    target_fee = tx_size * fee_per_kB / 1000\n+    target_fee = round(tx_size * fee_per_kB / 1000, 8)\n     if fee < target_fee:\n         raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n     # allow the wallet's estimation to be at most 2 bytes off"
      }
    ]
  },
  {
    "sha": "28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGI4MDYxZDlmMWMwYTQ0YmYzZGZmNGQ0N2YwMTE4N2U4NjFiMWIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:11:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:13:15Z"
      },
      "message": "Merge #12474: [depends] Allow depends system to support armv7l\n\nac91ea6 [depends] Allow depends system to support armv7l (Henrik Jonsson)\n\nPull request description:\n\n  Credit for the actual patches goes to @theuni, I just tested them on an armv7l machine.\n\n  This change allows the depends system to build our dependencies on 32-bit ARM / armv7l architecture. I.e. with this patch, the following steps now builds fine:\n  ```\n  $ uname -m\n  armv7l\n  $ ./autogen.sh\n  $ cd depends && make NO_QT=1 && cd ..\n  $ ./configure --prefix=$(pwd)/depends/armv7l-unknown-linux-gnueabihf\n  $ make\n  ```\n\n  Without this patch, the `cd depends && make NO_QT=1` command fails on armv7l.\n\nTree-SHA512: 1a81be2f1346e0e7080e83a991d9851f0371438262a34580eda5f43ebd220a3ce1ed0d783c43a0a8aed18082bbb1afc91e5c9bf3f4a36eecc82b6a9b6eff5e4c",
      "tree": {
        "sha": "d46c115a5c08b8fae7860d474d480ae0864588f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d46c115a5c08b8fae7860d474d480ae0864588f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakD2bAAoJEB5K7WKYbNJd8VAIAMwghcLGzL05LOmd9Z33/Iwg\npet9n9hgUSMN9K6r/4HtYKcs4P/qDgdY7HS3KrMku0EYk3lJ0eqEY4EEct5HtLKn\nAH6GRWYw5AybFXxZGnD/0F7WgQewqHcgV0zZgXavyxlO4X84vAYE4gel85Gj1Dkz\nH6L627CiwZDQeq5svDMilf3pZ9b1QZM85K7FBg8l4TkjqkoR2zHimqCF1n31Tpdr\nOoPW9NsDvWbf6UMtHZgJCzHNC6doTLTF1sInQdUyvpM+Jwx5lmirLK7+4XcByZ84\nemaIenTvxk44r5fYDlVfzdjPzxn2wdgH4mQoMtOi1TulejTYDkU4PzP2JJqKwJg=\n=gRg6\n-----END PGP SIGNATURE-----",
        "payload": "tree d46c115a5c08b8fae7860d474d480ae0864588f7\nparent 8c33961313d9a6fd9e6e14f136057468a929b3e1\nparent ac91ea64c2b1daec8fee0bfde443c18cf87595ae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519402299 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402395 +0100\n\nMerge #12474: [depends] Allow depends system to support armv7l\n\nac91ea6 [depends] Allow depends system to support armv7l (Henrik Jonsson)\n\nPull request description:\n\n  Credit for the actual patches goes to @theuni, I just tested them on an armv7l machine.\n\n  This change allows the depends system to build our dependencies on 32-bit ARM / armv7l architecture. I.e. with this patch, the following steps now builds fine:\n  ```\n  $ uname -m\n  armv7l\n  $ ./autogen.sh\n  $ cd depends && make NO_QT=1 && cd ..\n  $ ./configure --prefix=$(pwd)/depends/armv7l-unknown-linux-gnueabihf\n  $ make\n  ```\n\n  Without this patch, the `cd depends && make NO_QT=1` command fails on armv7l.\n\nTree-SHA512: 1a81be2f1346e0e7080e83a991d9851f0371438262a34580eda5f43ebd220a3ce1ed0d783c43a0a8aed18082bbb1afc91e5c9bf3f4a36eecc82b6a9b6eff5e4c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c33961313d9a6fd9e6e14f136057468a929b3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c33961313d9a6fd9e6e14f136057468a929b3e1"
      },
      {
        "sha": "ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac91ea64c2b1daec8fee0bfde443c18cf87595ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac91ea64c2b1daec8fee0bfde443c18cf87595ae"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "14e94ba453a9f31655d69ee64c5a608bc5db2eda",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -21,7 +21,6 @@ BUILD_ID_SALT ?= salt\n host:=$(BUILD)\n ifneq ($(HOST),)\n host:=$(HOST)\n-host_toolchain:=$(HOST)-\n endif\n \n ifneq ($(DEBUG),)"
      },
      {
        "sha": "144e5f88b7820ae9d920f1d0e5ad850c44ca67d2",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -1,3 +1,7 @@\n+ifneq ($(host),$(build))\n+host_toolchain:=$(host)-\n+endif\n+\n default_host_CC = $(host_toolchain)gcc\n default_host_CXX = $(host_toolchain)g++\n default_host_AR = $(host_toolchain)ar"
      },
      {
        "sha": "37f0c28a529ca1930263c1cdf06a64cf5ccaf7d0",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "patch": "@@ -47,6 +47,7 @@ $(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32\n+$(package)_config_opts_armv7l_linux=linux-generic32\n $(package)_config_opts_aarch64_linux=linux-generic64\n $(package)_config_opts_mipsel_linux=linux-generic32\n $(package)_config_opts_mips_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2QxZTYxNTVjYTYyYTZkOTFjYThkNWViMjNlYTY0Zjk0ZDA5OGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:16:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-23T16:17:07Z"
      },
      "message": "Merge #12477: test: Plug memory leaks and stack-use-after-scope\n\nfadb39c test: Plug memory leaks and stack-use-after-scope (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 7bd6bbba43c7870bbd9732d73ecfc520f21701168e6fb4ad099a08ea5b21d9cd09215e70d22fb92a1af03993204ef89ad74b3e80d9fa5a10831c3e7cf2dd04cd",
      "tree": {
        "sha": "6e2e5174c510ecbe8741fb22c59e5f6b26e21e56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e2e5174c510ecbe8741fb22c59e5f6b26e21e56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJakD6DAAoJEB5K7WKYbNJd744H/2kRB5Lbk9haD4KTrgqTvkg3\nJRVd+AmzWLC9a3N0BIbZtSumHcwY5gJh+6pdmAkY4PaGiMaU7Of5bkLGKiRKMZcz\nvQts2syDCBVTEZgqOpFIrxOEhxvQPWbfA4SM4/ClDN3bQ7dlXYs4jvq4zzIFQWA/\n+sGAwVq9fQgdcfoJp0hIbFuRGZPb5QlOyAZ58GJaGyqs9OoMdCyPsKhnqLYzEg4S\nT74zkbaQKJZC/7Z2OirY3BjYNELgHSsjFCrkxmahRkb57z3/Igg9X1FezEWsps5b\nx7qdTZ760CnWRHPSwHOfuxnki2PJD06DvZFejqVNil9a07uGsfonzxOywgfex0A=\n=jhIG\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e2e5174c510ecbe8741fb22c59e5f6b26e21e56\nparent 28b8061d9f1c0a44bf3dff4d47f01187e861b1b0\nparent fadb39ca6237781346ca3da319e2bd9e48a5a604\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519402605 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519402627 +0100\n\nMerge #12477: test: Plug memory leaks and stack-use-after-scope\n\nfadb39c test: Plug memory leaks and stack-use-after-scope (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: 7bd6bbba43c7870bbd9732d73ecfc520f21701168e6fb4ad099a08ea5b21d9cd09215e70d22fb92a1af03993204ef89ad74b3e80d9fa5a10831c3e7cf2dd04cd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28b8061d9f1c0a44bf3dff4d47f01187e861b1b0"
      },
      {
        "sha": "fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb39ca6237781346ca3da319e2bd9e48a5a604"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f438b60e97623dc12ae2c3b4e0f6a5ac04cce02",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -37,11 +37,6 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n-        // Empty wallet.\n-        for (COutput output : vCoins)\n-            delete output.tx;\n-        vCoins.clear();\n-\n         // Add coins.\n         for (int i = 0; i < 1000; i++)\n             addCoin(1000 * COIN, wallet, vCoins);\n@@ -53,6 +48,12 @@ static void CoinSelection(benchmark::State& state)\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n+\n+        // Empty wallet.\n+        for (COutput& output : vCoins) {\n+            delete output.tx;\n+        }\n+        vCoins.clear();\n     }\n }\n "
      },
      {
        "sha": "8e0ec5243b13e72f7b0dabca42b2d50284f0e205",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -406,11 +406,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         boost::thread_group tg;\n         std::mutex m;\n         std::condition_variable cv;\n+        bool has_lock{false};\n+        bool has_tried{false};\n+        bool done{false};\n+        bool done_ack{false};\n         {\n-            bool has_lock {false};\n-            bool has_tried {false};\n-            bool done {false};\n-            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "95c4825b840f0522bd29a9faac4b9be6b96e933b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "patch": "@@ -28,6 +28,9 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n+    for (CNode* node : g_connman->vNodes) {\n+        delete node;\n+    }\n     g_connman->vNodes.clear();\n }\n "
      }
    ]
  },
  {
    "sha": "07090c5339436f856e79a8036d1c85deeb453803",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzA5MGM1MzM5NDM2Zjg1NmU3OWE4MDM2ZDFjODVkZWViNDUzODAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-23T17:36:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-23T17:37:06Z"
      },
      "message": "Merge #12443: qa: Move common args to bitcoin.conf\n\nface7220b7 qa: Move common args to bitcoin.conf (MarcoFalke)\n\nPull request description:\n\n  Beside removing duplicates of the same args in the code, this actually helps with debugging after a test failure.\n\n  For example, `bitcoin-qt` has `server` turned off, so you'd have to turn it on every time, if you wanted to debug a temporary test datadir created by the test framework.\n  Also, `keypool` would fill up if you forget to specify `-keypool=1`.\n\nTree-SHA512: 996bec8738dc0fce7297ab1fc5b4fbe3aa31b9b6241f8c4e685db728925363ccaca6145ad1edc6bee2f360e02ac4b9a53fcdff74eb79de90793393742d52b559",
      "tree": {
        "sha": "fa054551809120aaa605798ed8b46041c8668c19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa054551809120aaa605798ed8b46041c8668c19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07090c5339436f856e79a8036d1c85deeb453803",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJakFFCAAoJENLqSFDnUoslVoIQAK0wfE20SOmMdnAyxpv2v9Er\nPHFxyIYWl71y1O1hpOiBmyxfAROx852/hmLf45EeI5w0nAdrmgBwBIDZC9zBiFaI\nATlgVoRHT5v6isDWtiI5nYjCbRak0kUD707QTG2UA0jKrqoBy2Vxhc0FfzYJGCK6\nk2yMEVHsEO6HYLUln8Ewy8RtPcxVoz/aNqf702qImTPeWWzGpMNdliPyEDpxzoFU\nf+c6KtY4X7nbeKSKvyfn49DlRR7li4fEDTW0sFk9AunCPlE9dpjoTBeGT4tF/JcU\nNHn5RpBcPNkNfKfMho3/6e3xzYdza+5AWAUjr8cmmKOsNnwpXwIgTU+1g9RdrSvQ\nmp+f3muXIes8qEbApGXblm50YDkO4vH6zZlhk87Z2fPiPywhuuCClpECPLxuVwTe\nDLZPrKHLPIXh2OJ7Ex9RgUuuG+WZgEseEQVSzXayfzuzzLpfericc9gRkJgorUXC\nNiDOMiKvXxEijF2fPfR2qK3/4ZWFp3ZyoX84uZaJLwdPrZJ9ZoO+YqOJYkOS4WV8\niwCdsUdk0BbAIriuGpdUpHPASwGwd0adkP3N9cpk+cWCMjOPjg3JvnZWRfA5RMWS\nuP+AorFToB/GGJUOTByYOKYOquG5EIkbRFJlMBZ5XkMlBnfI5eqFVnT3fExKWPy9\nKJ7Icfc1LdKfWVMXaEjX\n=4Y80\n-----END PGP SIGNATURE-----",
        "payload": "tree fa054551809120aaa605798ed8b46041c8668c19\nparent acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5\nparent face7220b776e3decf9889b2c20c9d5f935e971e\nauthor MarcoFalke <falke.marco@gmail.com> 1519407419 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519407426 -0500\n\nMerge #12443: qa: Move common args to bitcoin.conf\n\nface7220b7 qa: Move common args to bitcoin.conf (MarcoFalke)\n\nPull request description:\n\n  Beside removing duplicates of the same args in the code, this actually helps with debugging after a test failure.\n\n  For example, `bitcoin-qt` has `server` turned off, so you'd have to turn it on every time, if you wanted to debug a temporary test datadir created by the test framework.\n  Also, `keypool` would fill up if you forget to specify `-keypool=1`.\n\nTree-SHA512: 996bec8738dc0fce7297ab1fc5b4fbe3aa31b9b6241f8c4e685db728925363ccaca6145ad1edc6bee2f360e02ac4b9a53fcdff74eb79de90793393742d52b559\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07090c5339436f856e79a8036d1c85deeb453803",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acd1e6155ca62a6d91ca8d5eb23ea64f94d098b5"
      },
      {
        "sha": "face7220b776e3decf9889b2c20c9d5f935e971e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/face7220b776e3decf9889b2c20c9d5f935e971e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/face7220b776e3decf9889b2c20c9d5f935e971e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3e87f6d33f0dcb5bf7065c7f29be63aa2bf06333",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -46,6 +46,7 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-rest\"]] * self.num_nodes\n \n     def setup_network(self, split=False):\n         super().setup_network()"
      },
      {
        "sha": "ecb91b315e013c0ca907bb6dc687e594219664e7",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -392,7 +392,7 @@ def _initialize_chain(self):\n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n                 datadir = initialize_datadir(self.options.cachedir, i)\n-                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))"
      },
      {
        "sha": "93a052f7857e380b4cae6fcdfc779e1ca33d2d19",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -57,9 +57,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n-        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        # Most callers will just need to add extra args to the standard list below.\n+        # For those callers that need more flexibity, they can just set the args property directly.\n+        # Note that common args are set in the config file (see initialize_datadir)\n         self.extra_args = extra_args\n-        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n         self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n         self.use_cli = use_cli"
      },
      {
        "sha": "e9e7bbd8e4e89006c7416260ce8b02f9becaef1e",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07090c5339436f856e79a8036d1c85deeb453803/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=07090c5339436f856e79a8036d1c85deeb453803",
        "patch": "@@ -291,6 +291,9 @@ def initialize_datadir(dirname, n):\n         f.write(\"regtest=1\\n\")\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n+        f.write(\"server=1\\n\")\n+        f.write(\"keypool=1\\n\")\n+        f.write(\"discover=0\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n "
      }
    ]
  },
  {
    "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjMzNTNkZTkwNTk4ZjA4YTY4ZDk2NmM1MGI1N2NlYWViNWI1ZDk2",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:05:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:13:43Z"
      },
      "message": "Merge #12287: Optimise lock behaviour for GuessVerificationProgress()\n\n90ba2df11 Fix missing cs_main lock for GuessVerificationProgress() (Jonas Schnelli)\n\nPull request description:\n\n  `GuessVerificationProgress()` needs `cs_main` due to accessing the `pindex->nChainTx`.\n  This adds a `AssertLockHeld` in `GuessVerificationProgress()` and adds the missing locks in...\n  * `LoadChainTip()`\n  * `ScanForWalletTransactions()` (got missed in #11281)\n  * GUI, `ClientModel::getVerificationProgress()` <--- **this may have GUI performance impacts**, but could be relaxed later with a cache or something more efficient.\n\nTree-SHA512: 13302946571422375f32af8e396b9d2c1180f2693ea363aeba9e98c8266ddec64fe7862bfdcbb5a93a4b12165a61eec1e51e4e7d7a8515fa50879095dc163412",
      "tree": {
        "sha": "9a82d0a0149581eb84d1a9c2680523444a818363",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a82d0a0149581eb84d1a9c2680523444a818363"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqSDccACgkQHrd2uwPH\nki3fJhAAqB5/OR3JRp2zy+3Z2uS0Lzc8CmOV0qhjEr7i5BBRC3rqF/Aoe9P09aoy\nrPQEhSD4r4aWvQSFOrtKbNN1TjYQVcDbBSUVJGbOzUY+kj8A7vE0h0kUSHrFvS0X\n/lfoUDTwDvYLEkHsZGeAnsIKT76SC3paNV5i0zCKHtaSPP2jDmmd5go8KfGZXAyr\nQQ7xUadBeGrZxWR8RN1+D0/+dd90QpXNxmbbbkeKCf1aq40qWJKULi8DwzP+VUkz\n7+MPX2E4whUQD1XbXFW3SQQ7dh9OnaID3ffegitDbWWL8AJH8IS7WOWw1fYIzOkl\nOI4UlBSUNeHlstazZ2HYgjQ8y9BcakOT4CORY5LUVTxCu8yqGMuVsMIeeqlWp14e\n7lghaZ8cMvlzVcIP3Tj67xkn7iRz4AUo77GpHiXs9c8CN29xdWu5TrXOfgY1WeNi\n29UcB7K+xb4jpoqPRvh3LvlT2gC95whhJNE+YzmF6U/U2diuyn+5QggVTr5onIkZ\n28IfdVH9nlzu874hgJtG9LRWjbNPwT85hlYQ3Fwgraq3x3hV+Im3WYU7y7CEolxp\nto2LPBBIMWXDSuLM0LyjyhJNZYA+HGsLEls5xx4SCTst0ZjDjY0rWYLMHI8LB6XA\nMVPxVm2Hiw8+m0JpA04ynPgbKSR3fnZ14h0ycQwu21pHNwatUsc=\n=2JCS\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a82d0a0149581eb84d1a9c2680523444a818363\nparent 07090c5339436f856e79a8036d1c85deeb453803\nparent 90ba2df11b5bc943ac48b49b5da8023864dc842d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1519520734 +0800\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519521223 +0800\n\nMerge #12287: Optimise lock behaviour for GuessVerificationProgress()\n\n90ba2df11 Fix missing cs_main lock for GuessVerificationProgress() (Jonas Schnelli)\n\nPull request description:\n\n  `GuessVerificationProgress()` needs `cs_main` due to accessing the `pindex->nChainTx`.\n  This adds a `AssertLockHeld` in `GuessVerificationProgress()` and adds the missing locks in...\n  * `LoadChainTip()`\n  * `ScanForWalletTransactions()` (got missed in #11281)\n  * GUI, `ClientModel::getVerificationProgress()` <--- **this may have GUI performance impacts**, but could be relaxed later with a cache or something more efficient.\n\nTree-SHA512: 13302946571422375f32af8e396b9d2c1180f2693ea363aeba9e98c8266ddec64fe7862bfdcbb5a93a4b12165a61eec1e51e4e7d7a8515fa50879095dc163412\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07090c5339436f856e79a8036d1c85deeb453803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07090c5339436f856e79a8036d1c85deeb453803"
      },
      {
        "sha": "90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90ba2df11b5bc943ac48b49b5da8023864dc842d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90ba2df11b5bc943ac48b49b5da8023864dc842d"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "eaf2896bc38b3ef2cd4307375d31af80aa203043",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -138,9 +138,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n {\n     CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    LOCK(cs_main);\n     if (!tip)\n     {\n-        LOCK(cs_main);\n         tip = chainActive.Tip();\n     }\n     return GuessVerificationProgress(Params().TxData(), tip);"
      },
      {
        "sha": "d2438b0609a201cbc4fd065060d648d1f7507a6f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -4658,6 +4658,7 @@ bool DumpMempool(void)\n }\n \n //! Guess how far we are in the verification process at the given block index\n+//! require cs_main if pindex has not been validated yet (because nChainTx might be unset)\n double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pindex) {\n     if (pindex == nullptr)\n         return 0.0;"
      },
      {
        "sha": "b35f8c7f2bfcf5ebe2208a21e4781242c783f52a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3353de90598f08a68d966c50b57ceaeb5b5d96/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "patch": "@@ -1668,20 +1668,15 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n             dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n         }\n+        double gvp = dProgressStart;\n         while (pindex && !fAbortRescan)\n         {\n             if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) {\n-                double gvp = 0;\n-                {\n-                    LOCK(cs_main);\n-                    gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n-                }\n                 ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((gvp - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n             }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n-                LOCK(cs_main);\n-                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+                LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n             }\n \n             CBlock block;\n@@ -1705,6 +1700,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             {\n                 LOCK(cs_main);\n                 pindex = chainActive.Next(pindex);\n+                gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n                 if (tip != chainActive.Tip()) {\n                     tip = chainActive.Tip();\n                     // in case the tip has changed, update progress max\n@@ -1713,7 +1709,7 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             }\n         }\n         if (pindex && fAbortRescan) {\n-            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n+            LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, gvp);\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n     }"
      }
    ]
  },
  {
    "sha": "8222e057fe60934a57b1d8226b0e1bd071f8dac2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjIyZTA1N2ZlNjA5MzRhNTdiMWQ4MjI2YjBlMWJkMDcxZjhkYWMy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-12T20:32:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:33:46Z"
      },
      "message": "Disable wallet fallbackfee by default on mainnet",
      "tree": {
        "sha": "8439061439ed2cb0ee480b8246243ee91f4f70e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8439061439ed2cb0ee480b8246243ee91f4f70e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8222e057fe60934a57b1d8226b0e1bd071f8dac2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqSEnwACgkQHrd2uwPH\nki2YIhAAk+QvJrPTUkDyh6q4T9kdyoHJ8yqepxlbLqCOITuz7uXo9MsiV4q7vNkS\noKmaRql+3YvhZrQbqeB/zDYDn2g+mij9XQtiQ6qOR9MUYDWPXKWgD3ixw9+oBvX2\nRHZVkFYciJLrRHWCKD+PE3XOW0xh4LwgTSTPMBxsia97PgLPG6/k0iVUq+iErTne\nlinTIcHBEKtNq7Nxl8eWvCLJDMY7rXY7T8KHFNHdfJN5qHrBQlzev4K2UayUq0/E\nIEvLsUtuhPC+pKRt5tGWTDxqWEK/lPcEiK7cCNkHY8a4/Y3zZh8ArPkUYJnKX+jd\nLCmN2AkuLwA6tajUjqryq1gasvxopRGG2x8sWN2HJAL8ksUhDlb1L2hNprB25E+8\nZeGOQ8pvRTOK8QrYQCN+dD16/wKg32awL5wP0dqyqfLRCD258Az3WWaO1Vnjwqbe\nC9BfBxJutE3Ptf72ZgRc55EMgPISYoTtbun2s9mFyxVYwVXTH/WdsyLuL22ttVkt\nzw2isaGvKKQt5mfNgVGNU10Pyapyn72OnhalU0COhNB/iHO3GX9xCqVVKrndfZiV\nOTYc4lAq0h7/1iXjdItpFuWBTtOB5BkTtqmHUP/RK82M8jPjMzkcggzzFGeuXASk\nYJ96410ugB88saK4OyAlhsQ4k+AsuoGWFAV4huazV6ztggk9R1A=\n=gFyp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8439061439ed2cb0ee480b8246243ee91f4f70e9\nparent 67447ba06057b8e83f962c82491d2fe6c5211f50\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513110770 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519522426 +0800\n\nDisable wallet fallbackfee by default on mainnet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8222e057fe60934a57b1d8226b0e1bd071f8dac2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8222e057fe60934a57b1d8226b0e1bd071f8dac2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8222e057fe60934a57b1d8226b0e1bd071f8dac2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67447ba06057b8e83f962c82491d2fe6c5211f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67447ba06057b8e83f962c82491d2fe6c5211f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67447ba06057b8e83f962c82491d2fe6c5211f50"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c2b3480f9d41ed2db94c6363f20fc651a8db5577",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -175,6 +175,9 @@ class CMainParams : public CChainParams {\n                         //   (the tx=... number in the SetBestChain debug.log lines)\n             3.5         // * estimated number of transactions per second after that timestamp\n         };\n+\n+        /* disable fallback fee on mainnet */\n+        m_fallback_fee_enabled = false;\n     }\n };\n \n@@ -266,6 +269,8 @@ class CTestNetParams : public CChainParams {\n             0.09\n         };\n \n+        /* enable fallback fee on testnet */\n+        m_fallback_fee_enabled = true;\n     }\n };\n \n@@ -343,6 +348,9 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         bech32_hrp = \"bcrt\";\n+\n+        /* enable fallback fee on regtest */\n+        m_fallback_fee_enabled = true;\n     }\n };\n "
      },
      {
        "sha": "6b1f813afb47267ba10abf1ece3d5b2cd98246cf",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -65,6 +65,8 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n+    /** Return true if the fallback fee is by default enabled for this network */\n+    bool IsFallbackFeeEnabled() const { return m_fallback_fee_enabled; }\n     /** Return the list of hostnames to look up for DNS seeds */\n     const std::vector<std::string>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n@@ -91,6 +93,7 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n+    bool m_fallback_fee_enabled;\n };\n \n /**"
      },
      {
        "sha": "0dc557e3a9187f11d9f3d2acd9ef6ff0af5e2aa0",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -158,6 +158,8 @@ void TestGUI()\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     bitdb.MakeMock();\n+    g_wallet_allow_fallback_fee = true;\n+\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));\n     bool firstRun;"
      },
      {
        "sha": "385fdc963a9a5973212cdafe3a8ca62c63d4f9b2",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -53,6 +53,9 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n             fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n+\n+            // directly return if fallback fee is disabled (feerate 0 == disabled)\n+            if (CWallet::fallbackFee.GetFee(1000) == 0) return fee_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n         CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);"
      },
      {
        "sha": "9ac48bff77c7ef8c1f15e284508e555a57a2773a",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <wallet/init.h>\n \n+#include <chainparams.h>\n #include <net.h>\n #include <util.h>\n #include <utilmoneystr.h>\n@@ -123,6 +124,8 @@ bool WalletParameterInteraction()\n                         _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         CWallet::minTxFee = CFeeRate(n);\n     }\n+\n+    g_wallet_allow_fallback_fee = Params().IsFallbackFeeEnabled();\n     if (gArgs.IsArgSet(\"-fallbackfee\"))\n     {\n         CAmount nFeePerK = 0;\n@@ -132,6 +135,7 @@ bool WalletParameterInteraction()\n             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         CWallet::fallbackFee = CFeeRate(nFeePerK);\n+        g_wallet_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\"))\n     {"
      },
      {
        "sha": "6ec5ca29ade1f0bfe545c18057fdae8d23b63782",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -11,6 +11,7 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n {\n     bitdb.MakeMock();\n+    g_wallet_allow_fallback_fee = true;\n \n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;"
      },
      {
        "sha": "1f56cb373579944d563a3b3e669b6581fd65b662",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -44,6 +44,7 @@ bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n+bool g_wallet_allow_fallback_fee = false; //<! will be defined via chainparams\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n@@ -2922,6 +2923,11 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                if (feeCalc.reason == FeeReason::FALLBACK && !g_wallet_allow_fallback_fee) {\n+                    // eventually allow a fallback fee\n+                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                    return false;\n+                }\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee."
      },
      {
        "sha": "8d4b7018728e12fe1127f65ac0ef1fde9df3512a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8222e057fe60934a57b1d8226b0e1bd071f8dac2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "patch": "@@ -39,6 +39,7 @@ extern CFeeRate payTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n+extern bool g_wallet_allow_fallback_fee;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n@@ -65,6 +66,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n+static const bool DEFAULT_WALLET_ALLOW_FALLBACKFEE = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n "
      }
    ]
  },
  {
    "sha": "3f592b81dcca3d2ef11403a623a6ba5b017567d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjU5MmI4MWRjY2EzZDJlZjExNDAzYTYyM2E2YmE1YjAxNzU2N2Q3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-12T22:33:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-02-25T01:38:38Z"
      },
      "message": "[QA] add wallet-rbf test",
      "tree": {
        "sha": "374d6d45cfaa0b6c86853c79881aa0b2290ccbfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/374d6d45cfaa0b6c86853c79881aa0b2290ccbfd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f592b81dcca3d2ef11403a623a6ba5b017567d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlqSE6IACgkQHrd2uwPH\nki15EQ//clBSYejwHWAumyiQ/ppcChLYt2lZaHxjWa6TJhnTd8h22vv/UOfQPVIf\np17pZsVOls2Svo8n9nX2f+rJtZuVIA1G3o+QdiDLyMYSKvvz6TufJLj4BZHaO/pN\nlREaJ8Qk5MJO0zaIRmqHaIV8NmM/dWQEdDVEKEsFgMXVtJCAMSGO4FVVd8PbXhBv\nUCIBT7nHPQZldKryPo74wS74CMcIsK6vyvmidw8CeD97+xhh/UdgTC/hUQR51NOd\nZ7iIfijrFgVEFTSb/iYH8XLYLVz/Ubeo1rEjiGkLwBHkHRf15FVLBqx5IkOsJf+r\nTIYZnxUgaDz1LR/sI47bg84NGmuMDNRJDJzTaOkLGii4PXXq9wiRdm3ICB5x0l2K\nT8lOLhTcXjkHYRdACO/S1qNKH/uF/dCXORtPzoSnEZuw5G0R8QSLyJlJI80pwMXL\nMQdZ9eo1KE8Qfx26R89Qj4TlE/Z1eJlsClKErNh9k95qdykjw8xwoON8Xsx3WlM7\nI1f8eIAuoD1Ydf2k3XMCs8hFNjp1P76PQBVdKe6xITWQi4EByx3UEu1R7G+3GAG3\nvFSxuloPObteRPf5DbJV6WCS9Uold8rl1Xg7jxJ9zZmBOJnc2eEO8GgeHVjdW69I\nXePIL7IMjKJQtyNq8JABcnPojPkvryARRFssjH6cG0fQP8jMDio=\n=qjcN\n-----END PGP SIGNATURE-----",
        "payload": "tree 374d6d45cfaa0b6c86853c79881aa0b2290ccbfd\nparent 8222e057fe60934a57b1d8226b0e1bd071f8dac2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513118019 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1519522718 +0800\n\n[QA] add wallet-rbf test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f592b81dcca3d2ef11403a623a6ba5b017567d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f592b81dcca3d2ef11403a623a6ba5b017567d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f592b81dcca3d2ef11403a623a6ba5b017567d7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8222e057fe60934a57b1d8226b0e1bd071f8dac2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8222e057fe60934a57b1d8226b0e1bd071f8dac2"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45cbd56e70cceedbaecf4ace16b686c5524bfc51",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f592b81dcca3d2ef11403a623a6ba5b017567d7/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f592b81dcca3d2ef11403a623a6ba5b017567d7/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=3f592b81dcca3d2ef11403a623a6ba5b017567d7",
        "patch": "@@ -126,6 +126,7 @@\n     'feature_cltv.py',\n     'rpc_uptime.py',\n     'wallet_resendwallettransactions.py',\n+    'wallet_fallbackfee.py',\n     'feature_minchainwork.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',"
      },
      {
        "sha": "e9cd052344033f318502d367a54b06cd48255868",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f592b81dcca3d2ef11403a623a6ba5b017567d7/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f592b81dcca3d2ef11403a623a6ba5b017567d7/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=3f592b81dcca3d2ef11403a623a6ba5b017567d7",
        "patch": "@@ -0,0 +1,28 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class WalletRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.nodes[0].generate(101)\n+\n+        # sending a transaction without fee estimations must be possible by default on regtest\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+\n+        # test sending a tx with disabled fallback fee (must fail)\n+        self.restart_node(0, extra_args=[\"-fallbackfee=0\"])\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendfrom(\"\", self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n+\n+if __name__ == '__main__':\n+    WalletRBFTest().main()"
      }
    ]
  },
  {
    "sha": "fc44cb108b8d2d701fd453657d0837b1e539bcb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzQ0Y2IxMDhiOGQyZDcwMWZkNDUzNjU3ZDA4MzdiMWU1MzliY2I3",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-18T15:51:17Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-26T00:02:44Z"
      },
      "message": "[RPC] Add list of child transactions to verbose output of getrawmempool",
      "tree": {
        "sha": "83b5ea86e3b99bf1462cc951d1790b7469742004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83b5ea86e3b99bf1462cc951d1790b7469742004"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc44cb108b8d2d701fd453657d0837b1e539bcb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc44cb108b8d2d701fd453657d0837b1e539bcb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc44cb108b8d2d701fd453657d0837b1e539bcb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc44cb108b8d2d701fd453657d0837b1e539bcb7/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4528f74fc202aa8ff152ff24f8319338fdaf3fd6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4528f74fc202aa8ff152ff24f8319338fdaf3fd6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6db70890c9a70649ed82a1a3de859f74ac17b540",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc44cb108b8d2d701fd453657d0837b1e539bcb7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc44cb108b8d2d701fd453657d0837b1e539bcb7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fc44cb108b8d2d701fd453657d0837b1e539bcb7",
        "patch": "@@ -372,6 +372,9 @@ std::string EntryDescriptionString()\n            \"    \\\"wtxid\\\" : hash,         (string) hash of serialized transaction, including witness data\\n\"\n            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+           \"       ... ]\\n\"\n+           \"    \\\"spentby\\\" : [           (array) unconfirmed transactions spending outputs from this transaction\\n\"\n+           \"        \\\"transactionid\\\",    (string) child transaction id\\n\"\n            \"       ... ]\\n\";\n }\n \n@@ -406,6 +409,15 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     }\n \n     info.pushKV(\"depends\", depends);\n+\n+    UniValue spent(UniValue::VARR);\n+    const CTxMemPool::txiter &it = mempool.mapTx.find(tx.GetHash());\n+    const CTxMemPool::setEntries &setChildren = mempool.GetMemPoolChildren(it);\n+    for (const CTxMemPool::txiter &childiter : setChildren) {\n+        spent.push_back(childiter->GetTx().GetHash().ToString());\n+    }\n+\n+    info.pushKV(\"spentby\", spent);\n }\n \n UniValue mempoolToJSON(bool fVerbose)"
      }
    ]
  },
  {
    "sha": "1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGZiNGU3ZDc1M2U5MjgyYzg5ZDU1YmRlMzU4YjhhZDk2ZDNiZmMy",
    "commit": {
      "author": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-18T15:54:20Z"
      },
      "committer": {
        "name": "Conor Scott",
        "email": "conor.r.scott.88@gmail.com",
        "date": "2018-02-26T00:02:54Z"
      },
      "message": "[Tests] Check output of parent/child tx list from getrawmempool, getmempooldescendants, getmempoolancestors, and REST interface",
      "tree": {
        "sha": "e3e98fbf6dc7c4c55bbe1d2881b8519f047e1528",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3e98fbf6dc7c4c55bbe1d2881b8519f047e1528"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2/comments",
    "author": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "conscott",
      "id": 14220652,
      "node_id": "MDQ6VXNlcjE0MjIwNjUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/14220652?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/conscott",
      "html_url": "https://github.com/conscott",
      "followers_url": "https://api.github.com/users/conscott/followers",
      "following_url": "https://api.github.com/users/conscott/following{/other_user}",
      "gists_url": "https://api.github.com/users/conscott/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/conscott/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/conscott/subscriptions",
      "organizations_url": "https://api.github.com/users/conscott/orgs",
      "repos_url": "https://api.github.com/users/conscott/repos",
      "events_url": "https://api.github.com/users/conscott/events{/privacy}",
      "received_events_url": "https://api.github.com/users/conscott/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc44cb108b8d2d701fd453657d0837b1e539bcb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc44cb108b8d2d701fd453657d0837b1e539bcb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc44cb108b8d2d701fd453657d0837b1e539bcb7"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 46,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c94175cfdad9fd10737db3a0430346ee53a045b",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
        "patch": "@@ -295,8 +295,10 @@ def run_test(self):\n         # check that there are our submitted transactions in the TX memory pool\n         json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        for tx in txs:\n+        for i, tx in enumerate(txs):\n             assert_equal(tx in json_obj, True)\n+            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n+            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n \n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)"
      },
      {
        "sha": "8880db80021012ebad9440c46720d02857ef1b8a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 43,
        "deletions": 3,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
        "patch": "@@ -47,14 +47,18 @@ def run_test(self):\n             value = sent_value\n             chain.append(txid)\n \n-        # Check mempool has MAX_ANCESTORS transactions in it, and descendant\n+        # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n         # count and fees should look correct\n         mempool = self.nodes[0].getrawmempool(True)\n         assert_equal(len(mempool), MAX_ANCESTORS)\n         descendant_count = 1\n         descendant_fees = 0\n         descendant_size = 0\n \n+        ancestor_size = sum([mempool[tx]['size'] for tx in mempool])\n+        ancestor_count = MAX_ANCESTORS\n+        ancestor_fees = sum([mempool[tx]['fee'] for tx in mempool])\n+\n         descendants = []\n         ancestors = list(chain)\n         for x in reversed(chain):\n@@ -71,14 +75,43 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n \n+            # Check that ancestor calculations are correct\n+            assert_equal(mempool[x]['ancestorcount'], ancestor_count)\n+            assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN)\n+            assert_equal(mempool[x]['ancestorsize'], ancestor_size)\n+            ancestor_size -= mempool[x]['size']\n+            ancestor_fees -= mempool[x]['fee']\n+            ancestor_count -= 1\n+\n+            # Check that parent/child list is correct\n+            assert_equal(mempool[x]['spentby'], descendants[-1:])\n+            assert_equal(mempool[x]['depends'], ancestors[-2:-1])\n+\n             # Check that getmempooldescendants is correct\n             assert_equal(sorted(descendants), sorted(self.nodes[0].getmempooldescendants(x)))\n+\n+            # Check getmempooldescendants verbose output is correct\n+            for descendant, dinfo in self.nodes[0].getmempooldescendants(x, True).items():\n+                assert_equal(dinfo['depends'], [chain[chain.index(descendant)-1]])\n+                if dinfo['descendantcount'] > 1:\n+                    assert_equal(dinfo['spentby'], [chain[chain.index(descendant)+1]])\n+                else:\n+                    assert_equal(dinfo['spentby'], [])\n             descendants.append(x)\n \n             # Check that getmempoolancestors is correct\n             ancestors.remove(x)\n             assert_equal(sorted(ancestors), sorted(self.nodes[0].getmempoolancestors(x)))\n \n+            # Check that getmempoolancestors verbose output is correct\n+            for ancestor, ainfo in self.nodes[0].getmempoolancestors(x, True).items():\n+                assert_equal(ainfo['spentby'], [chain[chain.index(ancestor)+1]])\n+                if ainfo['ancestorcount'] > 1:\n+                    assert_equal(ainfo['depends'], [chain[chain.index(ancestor)-1]])\n+                else:\n+                    assert_equal(ainfo['depends'], [])\n+\n+\n         # Check that getmempoolancestors/getmempooldescendants correctly handle verbose=true\n         v_ancestors = self.nodes[0].getmempoolancestors(chain[-1], True)\n         assert_equal(len(v_ancestors), len(chain)-1)\n@@ -100,7 +133,7 @@ def run_test(self):\n         for x in chain:\n             ancestor_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n-        \n+\n         # Undo the prioritisetransaction for later tests\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n@@ -149,6 +182,7 @@ def run_test(self):\n         vout = utxo[1]['vout']\n \n         transaction_package = []\n+        tx_children = []\n         # First create one parent tx with 10 children\n         (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n         parent_transaction = txid\n@@ -159,11 +193,17 @@ def run_test(self):\n         for i in range(MAX_DESCENDANTS - 1):\n             utxo = transaction_package.pop(0)\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+            if utxo['txid'] is parent_transaction:\n+                tx_children.append(txid)\n             for j in range(10):\n                 transaction_package.append({'txid': txid, 'vout': j, 'amount': sent_value})\n \n         mempool = self.nodes[0].getrawmempool(True)\n         assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n+        assert_equal(sorted(mempool[parent_transaction]['spentby']), sorted(tx_children))\n+\n+        for child in tx_children:\n+            assert_equal(mempool[child]['depends'], [parent_transaction])\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n@@ -232,7 +272,7 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n-        \n+\n         # Now try to disconnect the tip on each node...\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())"
      }
    ]
  },
  {
    "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y0ZGQzMTNlNWZlNTg5MDNjYWYyZjRkMDQ4MjdlN2Y3OTQ0ZTE3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T11:23:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T11:25:01Z"
      },
      "message": "doc: Add historical release notes for 0.16.0\n\nTree-SHA512: 4c33c9c85bf31aa7c73b09ba9f2295eec477adc90934e51323ed50228be0dde9341a2d99ccf7adb184060fe2293533436bccfdbdfe5a30efcd61127ebb5359b8",
      "tree": {
        "sha": "89d8fe0ac8f816db99478cc2de103ac41990ee2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89d8fe0ac8f816db99478cc2de103ac41990ee2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJak+6NAAoJEB5K7WKYbNJdXksH/i9d1Kl0FGB314qZOCxmSPpJ\nyBjpCXEEO5nav/R4/nBQNUh4792/uEUO6PoeIiBQgqjXjjhLFNPMcb8W6h6fGbtb\n0UByCyCZyjaK4APvV38CCW52D1cwoM7xHo11VT8s99dKOSwiOrNIC9tqmWk/gXI5\n20VTR+gpFXOU3sI+wp+xOIZ7GA2lIj8z7FUu8vN1O0NQlAYdXkOL2r1hTFkKixis\nZXkJCLdIr/GwGFn2jUGH3QO8RBWb5n1zKMFTnNQNYAc0o+8sTrPzjDC28+2Xa6mN\nlYPKZ4XXb+hRPa7ki5MarXEvclkwstXQjPqA15aTKww7XXjFoyJWrLMlkmBE+Bk=\n=qEb7\n-----END PGP SIGNATURE-----",
        "payload": "tree 89d8fe0ac8f816db99478cc2de103ac41990ee2d\nparent bf3353de90598f08a68d966c50b57ceaeb5b5d96\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519644220 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519644301 +0100\n\ndoc: Add historical release notes for 0.16.0\n\nTree-SHA512: 4c33c9c85bf31aa7c73b09ba9f2295eec477adc90934e51323ed50228be0dde9341a2d99ccf7adb184060fe2293533436bccfdbdfe5a30efcd61127ebb5359b8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96"
      }
    ],
    "stats": {
      "total": 720,
      "additions": 720,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8f158b3481cfa033cf05400581cb0319fb8e3c45",
        "filename": "doc/release-notes/release-notes-0.16.0.md",
        "status": "added",
        "additions": 720,
        "deletions": 0,
        "changes": 720,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/doc/release-notes/release-notes-0.16.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f4dd313e5fe58903caf2f4d04827e7f7944e17/doc/release-notes/release-notes-0.16.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.16.0.md?ref=d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "patch": "@@ -0,0 +1,720 @@\n+Bitcoin Core version 0.16.0 is now available from:\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.16.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or newer, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0 or higher. Upgrading\n+directly from 0.7.x and earlier without re-downloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+Wallets created in 0.16 and later are not compatible with versions prior to 0.16\n+and will not work if you try to use newly created wallets in older versions. Existing\n+wallets that were created with older versions are not affected by this.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+Wallet changes\n+---------------\n+\n+### Segwit Wallet\n+\n+Bitcoin Core 0.16.0 introduces full support for segwit in the wallet and user interfaces. A new `-addresstype` argument has been added, which supports `legacy`, `p2sh-segwit` (default), and `bech32` addresses. It controls what kind of addresses are produced by `getnewaddress`, `getaccountaddress`, and `createmultisigaddress`. A `-changetype` argument has also been added, with the same options, and by default equal to `-addresstype`, to control which kind of change is used.\n+\n+A new `address_type` parameter has been added to the `getnewaddress` and `addmultisigaddress` RPCs to specify which type of address to generate.\n+A `change_type` argument has been added to the `fundrawtransaction` RPC to override the `-changetype` argument for specific transactions.\n+\n+- All segwit addresses created through `getnewaddress` or `*multisig` RPCs explicitly get their redeemscripts added to the wallet file. This means that downgrading after creating a segwit address will work, as long as the wallet file is up to date.\n+- All segwit keys in the wallet get an implicit redeemscript added, without it being written to the file. This means recovery of an old backup will work, as long as you use new software.\n+- All keypool keys that are seen used in transactions explicitly get their redeemscripts added to the wallet files. This means that downgrading after recovering from a backup that includes a segwit address will work\n+\n+Note that some RPCs do not yet support segwit addresses. Notably, `signmessage`/`verifymessage` doesn't support segwit addresses, nor does `importmulti` at this time. Support for segwit in those RPCs will continue to be added in future versions.\n+\n+P2WPKH change outputs are now used by default if any destination in the transaction is a P2WPKH or P2WSH output. This is done to ensure the change output is as indistinguishable from the other outputs as possible in either case.\n+\n+### BIP173 (Bech32) Address support (\"bc1...\" addresses)\n+\n+Full support for native segwit addresses (BIP173 / Bech32) has now been added.\n+This includes the ability to send to BIP173 addresses (including non-v0 ones), and generating these\n+addresses (including as default new addresses, see above).\n+\n+A checkbox has been added to the GUI to select whether a Bech32 address or P2SH-wrapped address should be generated when using segwit addresses. When launched with `-addresstype=bech32` it is checked by default. When launched with `-addresstype=legacy` it is unchecked and disabled.\n+\n+### HD-wallets by default\n+\n+Due to a backward-incompatible change in the wallet database, wallets created\n+with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n+will only create hierarchical deterministic (HD) wallets. Note that this only applies\n+to new wallets; wallets made with previous versions will not be upgraded to be HD.\n+\n+### Replace-By-Fee by default in GUI\n+\n+The send screen now uses BIP125 RBF by default, regardless of `-walletrbf`.\n+There is a checkbox to mark the transaction as final.\n+\n+The RPC default remains unchanged: to use RBF, launch with `-walletrbf=1` or\n+use the `replaceable` argument for individual transactions.\n+\n+### Wallets directory configuration (`-walletdir`)\n+\n+Bitcoin Core now has more flexibility in where the wallets directory can be\n+located. Previously wallet database files were stored at the top level of the\n+bitcoin data directory. The behavior is now:\n+\n+- For new installations (where the data directory doesn't already exist),\n+  wallets will now be stored in a new `wallets/` subdirectory inside the data\n+  directory by default.\n+- For existing nodes (where the data directory already exists), wallets will be\n+  stored in the data directory root by default. If a `wallets/` subdirectory\n+  already exists in the data directory root, then wallets will be stored in the\n+  `wallets/` subdirectory by default.\n+- The location of the wallets directory can be overridden by specifying a\n+  `-walletdir=<path>` option where `<path>` can be an absolute path to a\n+  directory or directory symlink.\n+\n+Care should be taken when choosing the wallets directory location, as if it\n+becomes unavailable during operation, funds may be lost.\n+\n+Build: Minimum GCC bumped to 4.8.x\n+------------------------------------\n+The minimum version of the GCC compiler required to compile Bitcoin Core is now 4.8. No effort will be\n+made to support older versions of GCC. See discussion in issue #11732 for more information.\n+The minimum version for the Clang compiler is still 3.3. Other minimum dependency versions can be found in `doc/dependencies.md` in the repository.\n+\n+Support for signalling pruned nodes (BIP159)\n+---------------------------------------------\n+Pruned nodes can now signal BIP159's NODE_NETWORK_LIMITED using service bits, in preparation for\n+full BIP159 support in later versions. This would allow pruned nodes to serve the most recent blocks. However, the current change does not yet include support for connecting to these pruned peers.\n+\n+Performance: SHA256 assembly enabled by default\n+-------------------------------------------------\n+The SHA256 hashing optimizations for architectures supporting SSE4, which lead to ~50% speedups in SHA256 on supported hardware (~5% faster synchronization and block validation), have now been enabled by default. In previous versions they were enabled using the `--enable-experimental-asm` flag when building, but are now the default and no longer deemed experimental.\n+\n+GUI changes\n+-----------\n+- Uses of \"\u00b5BTC\" in the GUI now also show the more colloquial term \"bits\", specified in BIP176.\n+- The option to reuse a previous address has now been removed. This was justified by the need to \"resend\" an invoice, but now that we have the request history, that need should be gone.\n+- Support for searching by TXID has been added, rather than just address and label.\n+- A \"Use available balance\" option has been added to the send coins dialog, to add the remaining available wallet balance to a transaction output.\n+- A toggle for unblinding the password fields on the password dialog has been added.\n+\n+RPC changes\n+------------\n+\n+### New `rescanblockchain` RPC\n+\n+A new RPC `rescanblockchain` has been added to manually invoke a blockchain rescan.\n+The RPC supports start and end-height arguments for the rescan, and can be used in a\n+multiwallet environment to rescan the blockchain at runtime.\n+\n+### New `savemempool` RPC\n+A new `savemempool` RPC has been added which allows the current mempool to be saved to\n+disk at any time to avoid it being lost due to crashes / power loss.\n+\n+### Safe mode disabled by default\n+\n+Safe mode is now disabled by default and must be manually enabled (with `-disablesafemode=0`) if you wish to use it. Safe mode is a feature that disables a subset of RPC calls - mostly related to the wallet and sending - automatically in case certain problem conditions with the network are detected. However, developers have come to regard these checks as not reliable enough to act on automatically. Even with safe mode disabled, they will still cause warnings in the `warnings` field of the `getneworkinfo` RPC and launch the `-alertnotify` command.\n+\n+### Renamed script for creating JSON-RPC credentials\n+\n+The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`. This script can be\n+used to create `rpcauth` credentials for a JSON-RPC user.\n+\n+### Validateaddress improvements\n+\n+The `validateaddress` RPC output has been extended with a few new fields, and support for segwit addresses (both P2SH and Bech32). Specifically:\n+* A new field `iswitness` is True for P2WPKH and P2WSH addresses (\"bc1...\" addresses), but not for P2SH-wrapped segwit addresses (see below).\n+* The existing field `isscript` will now also report True for P2WSH addresses.\n+* A new field `embedded` is present for all script addresses where the script is known and matches something that can be interpreted as a known address. This is particularly true for P2SH-P2WPKH and P2SH-P2WSH addresses. The value for `embedded` includes much of the information `validateaddress` would report if invoked directly on the embedded address.\n+* For multisig scripts a new `pubkeys` field was added that reports the full public keys involved in the script (if known). This is a replacement for the existing `addresses` field (which reports the same information but encoded as P2PKH addresses), represented in a more useful and less confusing way. The `addresses` field remains present for non-segwit addresses for backward compatibility.\n+* For all single-key addresses with known key (even when wrapped in P2SH or P2WSH), the `pubkey` field will be present. In particular, this means that invoking `validateaddress` on the output of `getnewaddress` will always report the `pubkey`, even when the address type is P2SH-P2WPKH.\n+\n+### Low-level changes\n+\n+- The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:\n+  * `getblockchaininfo`\n+  * `getnetworkinfo`\n+  * `getwalletinfo`\n+  * `getmininginfo`\n+- The wallet RPC `getreceivedbyaddress` will return an error if called with an address not in the wallet.\n+- The wallet RPC `addwitnessaddress` was deprecated and will be removed in version 0.17,\n+  set the `address_type` argument of `getnewaddress`, or option `-addresstype=[bech32|p2sh-segwit]` instead.\n+- `dumpwallet` now includes hex-encoded scripts from the wallet in the dumpfile, and\n+  `importwallet` now imports these scripts, but corresponding addresses may not be added\n+  correctly or a manual rescan may be required to find relevant transactions.\n+- The RPC `getblockchaininfo` now includes an `errors` field.\n+- A new `blockhash` parameter has been added to the `getrawtransaction` RPC which allows for a raw transaction to be fetched from a specific block if known, even without `-txindex` enabled.\n+- The `decoderawtransaction` and `fundrawtransaction` RPCs now have optional `iswitness` parameters to override the\n+  heuristic witness checks if necessary.\n+- The `walletpassphrase` timeout is now clamped to 2^30 seconds.\n+- Using addresses with the `createmultisig` RPC is now deprecated, and will be removed in a later version. Public keys should be used instead.\n+- Blockchain rescans now no longer lock the wallet for the entire rescan process, so other RPCs can now be used at the same time (although results of balances / transactions may be incorrect or incomplete until the rescan is complete).\n+- The `logging` RPC has now been made public rather than hidden.\n+- An `initialblockdownload` boolean has been added to the `getblockchaininfo` RPC to indicate whether the node is currently in IBD or not.\n+- `minrelaytxfee` is now included in the output of `getmempoolinfo`\n+\n+Other changed command-line options\n+----------------------------------\n+- `-debuglogfile=<file>` can be used to specify an alternative debug logging file.\n+- bitcoin-cli now has an `-stdinrpcpass` option to allow the RPC password to be read from standard input.\n+- The `-usehd` option has been removed.\n+- bitcoin-cli now supports a new `-getinfo` flag which returns an output like that of the now-removed `getinfo` RPC.\n+\n+Testing changes\n+----------------\n+- The default regtest JSON-RPC port has been changed to 18443 to avoid conflict with testnet's default of 18332.\n+- Segwit is now always active in regtest mode by default. Thus, if you upgrade a regtest node you will need to either -reindex or use the old rules by adding `vbparams=segwit:0:999999999999` to your regtest bitcoin.conf. Failure to do this will result in a CheckBlockIndex() assertion failure that will look like: Assertion `(pindexFirstNeverProcessed != nullptr) == (pindex->nChainTx == 0)' failed.\n+\n+0.16.0 change log\n+------------------\n+\n+### Block and transaction handling\n+- #10953 `aeed345` Combine scriptPubKey and amount as CTxOut in CScriptCheck (jl2012)\n+- #11309 `93d20a7` Minor cleanups for AcceptToMemoryPool (morcos)\n+- #11418 `38c201f` Add error string for CLEANSTACK script violation (maaku)\n+- #11411 `339da9c` Change SignatureHash input index check to an assert (jimpo)\n+- #11406 `e12522d` Add state message print to AcceptBlock failure message (TheBlueMatt)\n+- #11062 `26fee4f` Mark mempool import fails that were found in mempool as 'already there' (kallewoof)\n+- #11269 `61fb806` CTxMemPoolEntry::UpdateAncestorState: modifySiagOps param type (donaloconnor)\n+- #11747 `e970396` Fix: Open files read only if requested (Elbandi)\n+- #11737 `46d1ebf` Document partial validation in ConnectBlock() (sdaftuar)\n+- #10699 `c090262` Make all script validation flags backward compatible (sipa)\n+- #10279 `214046f` Add a CChainState class to validation.cpp to take another step towards clarifying internal interfaces (TheBlueMatt)\n+- #11824 `d9fdac1` Block ActivateBestChain to empty validationinterface queue (TheBlueMatt)\n+- #12127 `9501dc2` Remove unused mempool index (sdaftuar)\n+- #12118 `44080a9` Sort mempool by min(feerate, ancestor_feerate) (sdaftuar)\n+- #8498 `0e3a411` Minimize the number of times it is checked that no money... (jtimon)\n+- #12368 `3f5012b` Hold mempool.cs for the duration of ATMP (TheBlueMatt)\n+- #12401 `d44cd7e` Reset pblocktree before deleting LevelDB file (Sjors)\n+- #12415 `f893824` Interrupt loading thread after shutdown request (promag)\n+\n+### P2P protocol and network code\n+- #10596 `6866b49` Add vConnect to CConnman::Options (benma)\n+- #10663 `9d31ed2` Split resolve out of connect (theuni)\n+- #11113 `fef65c4` Ignore getheaders requests for very old side blocks (jimpo)\n+- #11585 `5aeaa9c` addrman: Add missing lock in Clear() (CAddrMan) (practicalswift)\n+- #11524 `5ef3b69` De-duplicate connection eviction logic (tjps)\n+- #11580 `1f4375f` Do not send (potentially) invalid headers in response to getheaders (TheBlueMatt)\n+- #11655 `aca77a4` Assert state.m_chain_sync.m_work_header in ConsiderEviction (practicalswift)\n+- #11744 `3ff6ff5` Add missing locks in net.{cpp,h} (practicalswift)\n+- #11740 `59d3dc8` Implement BIP159 NODE_NETWORK_LIMITED (pruned peers) *signaling only* (jonasschnelli)\n+- #11583 `37ffa16` Do not make it trivial for inbound peers to generate log entries (TheBlueMatt)\n+- #11363 `ba2f195` Split socket create/connect (theuni)\n+- #11917 `bc66765` Add testnet DNS seed:  seed.testnet.bitcoin.sprovoost.nl (Sjors)\n+- #11512 `6e89de5` Use GetDesireableServiceFlags in seeds, dnsseeds, fixing static seed adding (TheBlueMatt)\n+- #12262 `16bac24` Hardcoded seed update (laanwj)\n+- #12270 `9cf6393` Update chainTxData for 0.16 (laanwj)\n+- #12392 `0f61651` Fix ignoring tx data requests when fPauseSend is set on a peer (TheBlueMatt)\n+\n+### Wallet\n+- #11039 `fc51565` Avoid second mapWallet lookup (promag)\n+- #10952 `2621673` Remove vchDefaultKey and have better first run detection (achow101)\n+- #11007 `fc5c237` Fix potential memory leak when loading a corrupted wallet file (practicalswift)\n+- #10976 `07c92b9` Move some static functions out of wallet.h/cpp (ryanofsky)\n+- #11117 `961901f` Prepare for non-Base58 addresses (sipa)\n+- #10916 `e6ab88a` add missing lock to crypter GetKeys() (benma)\n+- #10767 `791a0e6` Clarify wallet initialization / destruction interface (jnewbery)\n+- #11250 `c22a53c` Bump wallet version to 159900 and remove the `usehd` option (achow101)\n+- #11307 `4f7e37e` Display non-HD error on first run (MarcoFalke)\n+- #11408 `69c7ece` Fix parameter name typo in ErasePurpose walletdb method (PierreRochard)\n+- #11167 `aa624b6` Full BIP173 (Bech32) support (sipa)\n+- #11594 `0ecc630` Improve -disablewallet parameter interaction (promag)\n+- #10368 `77ba4bf` Remove helper conversion operator from wallet (kallewoof)\n+- #11074 `99ec126` Assert that CWallet::SyncMetaData finds oldest transaction (BitonicEelis)\n+- #11272 `e6e3fc3` CKeystore/CCrypter: move relevant implementation out of the header (jonasschnelli)\n+- #10286 `927a1d7` Call wallet notify callbacks in scheduler thread (without cs_main) (TheBlueMatt)\n+- #10600 `4ed8180` Make feebumper class stateless (ryanofsky)\n+- #11466 `d080a7d` Specify custom wallet directory with -walletdir param (MeshCollider)\n+- #11839 `8ab6c0b` Don't attempt mempool entry for wallet transactions on startup (instagibbs)\n+- #11854 `2214954` Split up key and script metadata for better type safety (ryanofsky)\n+- #11870 `ef8ba7d` Remove unnecessary mempool lock in ReacceptWalletTransactions (promag)\n+- #11864 `2ae58d5` Make CWallet::FundTransaction atomic (promag)\n+- #11886 `df71819` Clarify getbalance meaning a tiny bit in response to questions (TheBlueMatt)\n+- #11923 `81c89e9` Remove unused fNoncriticalErrors variable from CWalletDB::FindWalletTx (PierreRochard)\n+- #11726 `604e08c` Cleanups + nit fixes for walletdir PR (MeshCollider)\n+- #11403 `d889c03` Segwit wallet support (sipa)\n+- #11970 `b7450cd` Add test coverage for bitcoin-cli multiwallet calls (ryanofsky)\n+- #11904 `66e3af7` Add a lock to the wallet directory (MeshCollider)\n+- #12101 `c7978be` Clamp walletpassphrase timeout to 2^30 seconds and check its bounds (achow101)\n+- #12210 `17180fa` Deprecate addwitnessaddress (laanwj)\n+- #12220 `f4c942e` Error if relative -walletdir is specified (ryanofsky)\n+- #11281 `8470e64` Avoid permanent cs_main/cs_wallet lock during RescanFromTime (jonasschnelli)\n+- #12119 `9594139` Use P2WPKH change output if any destination is P2WPKH or P2WSH (Sjors)\n+- #12213 `eadb2da` Add address type option to addmultisigaddress (promag)\n+- #12276 `7936446` Remove duplicate mapWallet lookups (promag)\n+\n+### RPC and other APIs\n+- #11008 `3841aaf` Enable disablesafemode by default (gmaxwell)\n+- #11050 `7ed57d3` Avoid treating null RPC arguments different from missing arguments (ryanofsky)\n+- #10997 `affe927` Add option -stdinrpcpass to bitcoin-cli to allow RPC password to be read from standard input (jharvell)\n+- #11179 `e0e3cbb` Push down safe mode checks (laanwj)\n+- #11203 `d745b4c` add wtxid to mempool entry output (sdaftuar)\n+- #11099 `bc561b4` Add savemempool RPC (greenaddress)\n+- #10838 `66a5b41` (finally) remove getinfo (TheBlueMatt)\n+- #10753 `7fcd61b` test: Check RPC argument mapping (laanwj)\n+- #11288 `0f8e095` More user-friendly error message when partially signing (MeshCollider)\n+- #11031 `ef8340d` deprecate estimatefee (jnewbery)\n+- #10858 `9a8e916` Add \"errors\" field to getblockchaininfo and unify \"errors\" field in get*info RPCs (achow101)\n+- #11021 `90926db` Fix getchaintxstats() (AkioNak)\n+- #11367 `3a93270` getblockchaininfo: Add disk_size, prune_target_size (esotericnonsense)\n+- #11006 `a1d78b5` Improve shutdown process (promag)\n+- #11529 `ff92fbf` Avoid slow transaction search with txindex enabled (promag)\n+- #11618 `87d90ef` Lock cs_main in blockToJSON/blockheaderToJSON (practicalswift)\n+- #11626 `998c304` Make `logging` RPC public (laanwj)\n+- #11258 `033c786` Add initialblockdownload to getblockchaininfo (jnewbery)\n+- #11087 `99bc0b4` Diagnose unsuitable outputs in lockunspent() (BitonicEelis)\n+- #11710 `9388639` cli: Reject arguments to -getinfo (laanwj)\n+- #11738 `d4267a3` Fix sendrawtransaction hang when sending a tx already in mempool (TheBlueMatt)\n+- #11753 `32c9b57` clarify abortrescan rpc use (instagibbs)\n+- #11191 `ef14f2e` Improve help text and behavior of RPC-logging (AkioNak)\n+- #10874 `9e38d35` getblockchaininfo: Loop through the bip9 soft fork deployments instead of hard coding (achow101)\n+- #10275 `497d0e0` Allow fetching tx directly from specified block in getrawtransaction (kallewoof)\n+- #11178 `fee0370` Add iswitness parameter to decode- and fundrawtransaction RPCs (MeshCollider)\n+- #11667 `711d16c` Add scripts to dumpwallet RPC (MeshCollider)\n+- #11475 `9bad8d6` mempoolinfo should take ::minRelayTxFee into account (mess110)\n+- #12001 `a9a49e6` Adding ::minRelayTxFee amount to getmempoolinfo and updating help (jeffrade)\n+- #12198 `adce1de` Add deprecation error for `getinfo` (laanwj)\n+- #11415 `69ec021` Disallow using addresses in createmultisig (achow101)\n+- #12278 `288deac` Add special error for genesis coinbase to getrawtransaction (MeshCollider)\n+- #11362 `c6223b3` Remove nBlockMaxSize from miner opt struct as it is no longer used (gmaxwell)\n+- #10825 `28485c7` Set regtest JSON-RPC port to 18443 to avoid conflict with testnet 18332 (fametrano)\n+- #11303 `e542728` Fix estimatesmartfee rounding display issue (TheBlueMatt)\n+- #7061 `8c2de82` Add RPC call \"rescanblockchain <startheight> <stopheight>\" (jonasschnelli)\n+- #11055 `95e14dc` RPC getreceivedbyaddress should return error if called with address not owned by the wallet (jnewbery)\n+- #12366 `93de37a` http: Join worker threads before deleting work queue (laanwj)\n+- #12315 `758a41e` Bech32 addresses in dumpwallet (fivepiece)\n+- #12427 `3762ac1` Make signrawtransaction accept P2SH-P2WSH redeemscripts (sipa)\n+\n+### GUI\n+- #10964 `64e66bb` Pass SendCoinsRecipient (208 bytes) by reference (practicalswift)\n+- #11169 `5b8af7b` Make tabs toolbar no longer have a context menu (achow101)\n+- #10911 `9c8f365` Fix typo and access key in optionsdialog.ui (keystrike)\n+- #10770 `ea729d5` Drop upgrade-cancel callback registration for a generic \"cancelable\" (TheBlueMatt)\n+- #11156 `a3624dd` Fix memory leaks in qt/guiutil.cpp (danra)\n+- #11268 `31e72b2` [macOS] remove Growl support, remove unused code (jonasschnelli)\n+- #11193 `c5c77bd` Terminate string *pszExePath after readlink and without using memset (practicalswift)\n+- #11508 `ffa5159` Fix crash via division by zero assertion (jonasschnelli)\n+- #11499 `6157e8c` Add upload and download info to the peerlist (debug menu) (aarongolliver)\n+- #11480 `ffc0b11` Add toggle for unblinding password fields (tjps)\n+- #11316 `22cdf93` Add use available balance in send coins dialog (CryptAxe, promag)\n+- #3716 `13e352d` Receive: Remove option to reuse a previous address (luke-jr)\n+- #11690 `f0c1f8a` Fix the StartupWMClass for bitoin-qt, so gnome-shell can recognize it (eklitzke)\n+- #10920 `f6f8d54` Fix potential memory leak in newPossibleKey(ChangeCWallet *wallet) (practicalswift)\n+- #11698 `7293d06` RPC-Console nested commands documentation  (lmlsna)\n+- #11395 `38d31f9` Enable searching by transaction id (luke-jr)\n+- #11556 `91eeaa0` Improved copy for RBF checkbox and tooltip (Sjors)\n+- #11809 `80f9dad` Fix proxy setting options dialog crash (laanwj)\n+- #11616 `8585bb8` Update ban-state in case of dirty-state during periodic sweep (jonasschnelli)\n+- #11605 `f19ca12` Enable RBF by default in QT (Sjors)\n+- #12074 `a1136f0` Optimizes boolean expression model && model->haveWatchOnly() (251Labs)\n+- #12035 `eeb6d52` Change \u00b5BTC to bits (jb55)\n+- #12092 `fd4ca17` Replaces numbered place marker %2 with %1 (251Labs)\n+- #12173 `bbc91b7` Use flexible font size for QRCode image address (jonasschnelli)\n+- #12211 `10d10d7` Avoid potential null dereference in ReceiveCoinsDialog constructor (ryanofsky)\n+- #12261 `f359afc` Bump BLOCK_CHAIN_SIZE to 200GB (laanwj)\n+- #11991 `062c8b6` Receive: checkbox for bech32 address (Sjors)\n+- #11644 `045a809` Fix qt build broken by 5a5e4e9 (TheBlueMatt)\n+- #11448 `d473e6d` reset addrProxy/addrSeparateProxyTor if colon char missing (mess110)\n+- #12377 `604f289` qt: Poll ShutdownTimer after init is done (MarcoFalke)\n+- #12374 `daaae36` qt: Make sure splash screen is freed on AppInitMain fail (laanwj)\n+- #12349 `ad10b90` shutdown: fix crash on shutdown with reindex-chainstate (theuni)\n+\n+### Build system\n+- #10923 `2c9f5ec` travis: Build with --enable-werror under OS X (practicalswift)\n+- #11176 `df8c722` build: Rename --enable-experimental-asm to --enable-asm and enable by default (laanwj)\n+- #11286 `11dacc6` [depends] Don't build libevent sample code (fanquake)\n+- #7142 `801dd40` Travis: Test build against system libs (& Qt4) (luke-jr)\n+- #11380 `390771b` Remove outdated share/certs/ directory (MeshCollider)\n+- #11391 `7632310` Remove lxcbr0 lines from gitian-build.sh (MeshCollider)\n+- #11435 `167cef8` build: Make \"make clean\" remove all files created when running \"make check\" (practicalswift)\n+- #11460 `e022463` [depends] mac_alias 2.0.6, ds_store 1.1.2 (fanquake)\n+- #11541 `bb9ab0f` Build: Fix Automake warnings when running autogen.sh (fanquake)\n+- #11611 `0e70791` [build] Don't fail when passed --disable-lcov and lcov isn't available (fanquake)\n+- #11651 `3c098a8` refactor: Make all #includes relative to project root (laanwj, MeshCollider, ryanofsky)\n+- #11621 `1f7695b` [build] Add temp_bitcoin_locale_qrc to CLEAN_QT to fix make distcheck (fanquake)\n+- #11755 `84fa645` [Docs] Bump minimum required version of GCC to 4.8 (fanquake)\n+- #9254 `6d3dc52` [depends] ZeroMQ 4.2.2 (fanquake)\n+- #11842 `3c8f0a3` [build] Add missing stuff to clean-local (kallewoof)\n+- #11936 `483bb67` [build] Warn that only libconsensus can be built without Boost (fanquake)\n+- #11945 `7a11ba7` Improve BSD compatibility of contrib/install_db4.sh (laanwj)\n+- #11981 `180a255` Fix gitian build after libzmq bump (theuni)\n+- #11903 `8f68fd2` [trivial] Add required package dependencies for depends cross compilation (jonasschnelli)\n+- #12168 `45cf8a0`  #include sys/fcntl.h to just fcntl.h (without sys/) (jsarenik)\n+- #12095 `3fa1ab4` Use BDB_LIBS/CFLAGS and pass --disable-replication (fanquake)\n+- #11711 `6378e5c` bitcoin_qt.m4: Minor fixes and clean-ups (fanquake)\n+- #11989 `90d4104` .gitignore: add QT Creator artifacts (Sjors)\n+- #11577 `c0ae864` Fix warnings (-Wsign-compare) when building with DEBUG_ADDRMAN (practicalswift)\n+\n+### Tests and QA\n+- #11024 `3e55f13` Remove OldSetKeyFromPassphrase/OldEncrypt/OldDecrypt (practicalswift)\n+- #10679 `31b2612` Document the non-DER-conformance of one test in tx_valid.json (schildbach)\n+- #11160 `ede386c` Improve versionbits_computeblockversion test code consistency (danra)\n+- #10303 `f088a1b` Include ms/blk stats in Connect* benchmarks (kallewoof)\n+- #10777 `d81dccf` Avoid redundant assignments. Remove unused variables (practicalswift)\n+- #11260 `52f8877` travis: Assert default datadir isn't created, Run scripted diff only once (MarcoFalke)\n+- #11271 `638e6c5` travis: filter out pyenv (theuni)\n+- #11285 `3255d63` Add -usehd to excluded args in check-doc.py (MeshCollider)\n+- #11297 `16e4184` Make sure ~/.bitcoin doesn't exist before build (MeshCollider)\n+- #11311 `cce94c5` travis: Revert default datadir check (MarcoFalke)\n+- #11300 `f4ed44a` Add a lint check for trailing whitespace (MeshCollider)\n+- #11323 `4ce2f3d` mininode: add an optimistic write and disable nagle (theuni)\n+- #11370 `2d85899` Add getblockchaininfo functional test (promag)\n+- #11365 `f199b8a` Add Qt GUI tests to Overview and ReceiveCoin Page (anditto)\n+- #11293 `dbc4ae0` Deduplicate CMerkleBlock construction code, add test coverage (jamesob)\n+- #10440 `9e8ef9d` Add libFuzzer support (practicalswift)\n+- #10941 `364da2c` Add blocknotify and walletnotify functional tests (promag)\n+- #11420 `8928093` Bump univalue subtree and fix json formatting in tests (MarcoFalke)\n+- #10099 `424be03` Slightly Improve Unit Tests for Checkqueue (JeremyRubin)\n+- #11513 `14b860b` A few Python3 tidy ups (jnewbery)\n+- #11486 `2ca518d` Add uacomment tests (mess110)\n+- #11452 `02ac8c8` Improve ZMQ functional test (promag)\n+- #10409 `b5545d8` Add fuzz testing for BlockTransactions and BlockTransactionsRequest (practicalswift)\n+- #11389 `dd56166` Support having segwit always active in regtest (sipa, ajtowns, jnewbery)\n+- #11562 `5776582` bench: use std::chrono rather than gettimeofday (theuni)\n+- #11182 `f7388e9` Add P2P interface to TestNode (jnewbery)\n+- #11552 `b5f9f02` Improve wallet-accounts test (ryanofsky)\n+- #11638 `5e3f5e4` Dead mininode code (jnewbery)\n+- #11646 `fe503e1` Require a steady clock for bench with at least micro precision (TheBlueMatt)\n+- #11468 `76b3349` Make comp test framework more debuggable (jnewbery)\n+- #11623 `ee92243` Add missing locks to tests (practicalswift)\n+- #11035 `927e528` [contrib] Add Valgrind suppressions file (practicalswift)\n+- #11641 `7adeea3` Only allow disconnecting all NodeConns (MarcoFalke)\n+- #11677 `3bdf242` Remove unused NodeConn members (MarcoFalke)\n+- #11699 `66d46c7` [travis-ci] Only run linters on Pull Requests (jnewbery)\n+- #11654 `084f52f` Initialize recently introduced non-static class member lastCycles to zero in constructor (practicalswift)\n+- #11648 `ccc70a2` Add messages.py (jnewbery)\n+- #11713 `49667a7` Fix for mismatched extern definition in wallet tests (sipsorcery)\n+- #11707 `0d89fa0` Fix sendheaders (jnewbery)\n+- #11718 `9cdd2bc` Move pwalletMain to wallet test fixture (laanwj)\n+- #11714 `901ba3e` Test that mempool rejects coinbase transactions (jamesob)\n+- #11743 `3d6ad40` Add multiwallet prefix test (MarcoFalke)\n+- #11683 `a892218` Remove unused mininode functions {ser,deser}_int_vector(...). Remove unused imports (practicalswift)\n+- #11712 `9f2c2db` Split NodeConn from NodeConnCB (jnewbery)\n+- #11791 `13e31dd` Rename NodeConn and NodeConnCB (jnewbery)\n+- #11835 `f60b4ad` Add Travis check for unused Python imports (practicalswift)\n+- #11849 `ad1820c` Assert that only one NetworkThread exists (jnewbery)\n+- #11877 `d4991c0` Improve createrawtransaction functional tests (promag)\n+- #11220 `2971fd0` Check specific validation error in miner tests (Sjors)\n+- #11947 `797441e` Fix rawtransactions test (laanwj)\n+- #11946 `8049241` Remove unused variable (firstAddrnServices) (practicalswift)\n+- #11867 `18a1bba` Improve node network test (jnewbery)\n+- #11883 `cfd99dd` Add configuration file/argument testing (MeshCollider)\n+- #11879 `d4e404a` Remove redundant univalue_tests.cpp (jnewbery)\n+- #11748 `20166f8` Adding unit tests for GetDifficulty in blockchain.cpp (merehap)\n+- #11517 `5180a86` Improve benchmark precision (martinus)\n+- #11291 `a332a7d` Fix string concatenation to os.path.join and add exception case (dongsam)\n+- #11965 `d38d1a3` Note on test order in test_runner (MarcoFalke)\n+- #11997 `ddff344` util_tests.cpp: actually check ignored args (ajtowns)\n+- #12079 `45173fa` Improve prioritisetransaction test coverage (promag)\n+- #12150 `92a810d` Fix ListCoins test failure due to unset g_address_type, g_change_type (ryanofsky)\n+- #12133 `1d2eaba` Fix rare failure in p2p-segwit.py (sdaftuar)\n+- #12082 `0910cbe` Adding test case for SINGLE|ANYONECANPAY hash type in tx_valid.json (Christewart)\n+- #11796 `4db16ec` Functional test naming convention (ajtowns)\n+- #12227 `b987ca4` test_runner: Readable output if create_cache.py fails (ryanofsky)\n+- #12089 `126000b` Make TestNodeCLI command optional in send_cli (MarcoFalke)\n+- #11774 `6970b30` Rename functional tests (ajtowns)\n+- #12264 `598a9c4` Fix versionbits warning test (jnewbery)\n+- #12217 `1213be6` Add missing syncwithvalidationinterfacequeue to tests (MarcoFalke)\n+- #12292 `eebe458` Fix names of excluded extended tests for travis (ajtowns)\n+- #11789 `60d739e` [travis-ci] Combine logs on failure (jnewbery)\n+- #11838 `3e50024` Add getrawtransaction in_active_chain=False test (MarcoFalke)\n+- #12206 `898f560` Sync with validationinterface queue in sync_mempools (MarcoFalke)\n+- #12424 `ff44101` Fix rescan test failure due to unset g_address_type, g_change_type (ryanofsky)\n+- #12388 `e2431d1` travis: Full clone for git subtree check (MarcoFalke)\n+\n+### Documentation\n+- #10680 `6366941` Fix inconsistencies and grammar in various files (MeshCollider)\n+- #11011 `7db65c3` Add a comment on the use of prevector in script (gmaxwell)\n+- #10878 `c58128f` Fix Markdown formatting issues in init.md (dongcarl)\n+- #11066 `9e00a62` Document the preference of nullptr over NULL or (void*)0 (practicalswift)\n+- #11094 `271e40a` Hash in ZMQ hash is raw bytes, not hex (runn1ng)\n+- #11026 `ea3ac59` Bugfix: Use testnet RequireStandard for -acceptnonstdtxn default (luke-jr)\n+- #11058 `4b65fa5` Comments: More comments on functions/globals in standard.h (jimpo)\n+- #11112 `3f726c9` [developer-notes] By default, declare single-argument constructors \"explicit\" (practicalswift)\n+- #11155 `a084767` Trivial: Documentation fixes for CVectorWriter ctors (danra)\n+- #11136 `108222b` Docs: Add python3 to list of dependencies on some platforms (danra)\n+- #11216 `81f8c03` Update hmac_sha256.h (utsavgupta)\n+- #11236 `ba05971` Add note on translations to CONTRIBUTING.md (MeshCollider)\n+- #11173 `4eb1f39` RPC: Fix currency unit string in the help text (AkioNak)\n+- #11135 `21e2f2f` Update developer notes with RPC response guidelines (promag)\n+- #11219 `bcc8a62` explain how to recompile a modified unit test (Sjors)\n+- #10779 `f656147` Create dependencies.md (flack)\n+- #10682 `2a56baf` Move the AreInputsStandard documentation next to its implementation (esneider)\n+- #11276 `ee50c9e` Update CONTRIBUTING.md to reduce unnecessary review workload (jonasschnelli)\n+- #11264 `b148803` Fix broken Markdown table in dependencies.md (practicalswift)\n+- #10691 `ce82985` Properly comment about shutdown process in init.cpp file (wraith7)\n+- #11330 `ae233c4` Fix comments for DEFAULT_WHITELIST[FORCE]RELAY (danra)\n+- #11340 `d6d2c85` Fix validation comments (danra)\n+- #11305 `2847480` Update release notes and manpages for 0.16 (MarcoFalke)\n+- #11132 `551d7bf` Document assumptions that are being made to avoid NULL pointer dereferences (practicalswift)\n+- #11390 `12ed800` Document scripted-diff (jnewbery)\n+- #11392 `a3b4c59` Fix stale link in gitian-building.md (shooterman)\n+- #11401 `4202273` Move gitian building to external repo (MarcoFalke)\n+- #11414 `bbc901d` Remove partial gitian build instructions from descriptors dir (fanquake)\n+- #11571 `c95832d` Fixed a couple small grammatical errors (BitsInMyBlood)\n+- #11624 `f9b74ef` Change formatting for sequence of steps (vivganes)\n+- #11597 `6f01dcf` Fix error messages in CFeeBumper (kallewoof)\n+- #11438 `7fbf3c6` Updated Windows build doc for WSL/Xenial workaround (sipsorcery)\n+- #11663 `41aa9c4` Add getreceivedbyaddress release notes (MarcoFalke)\n+- #11533 `cbb54e7` Update WSL installation notes for Fall Creators update (Thoragh)\n+- #11680 `4db82b7` Add instructions for lcov report generation (jamesob)\n+- #11686 `54aedc0` Make ISSUE_TEMPLATE a bit shorter, mention hardware tests (TheBlueMatt)\n+- #11704 `ea68190` Windows build doc update (sipsorcery)\n+- #11706 `5197100` Make default issue text all comments to make issues more readable (TheBlueMatt)\n+- #11140 `1429132` Improve #endif comments (danra)\n+- #11729 `7a43fbb` links to code style guides (Sjors)\n+- #11793 `8879d50` Bump OS X version to 10.13 (Varunram)\n+- #11783 `16fff80` Fix shutdown in case of errors during initialization (laanwj)\n+- #11804 `00d25e9` Fixed outdated link with archive.is (TimothyShimmin)\n+- #11960 `4307062` Fix link to installation script (laudaa)\n+- #12027 `63a4dc1` Remove boost --c++ flag from osx build instructions (fernandezpablo85)\n+- #12062 `5961b23` Increment MIT Licence copyright header year on files modified in 2017 (akx20000a)\n+- #12063 `36a5a44` Update license year range to 2018 (akx20000a)\n+- #12093 `5691028` Fix incorrect Markdown link (practicalswift)\n+- #12143 `b0d626d` Fix link for BIP159 pull request (azuchi)\n+- #12112 `3c62868` Remove the ending slashes from RPC URI format (jackycjh)\n+- #12166 `e839d65` Clarify -walletdir usage (jnewbery)\n+- #12241 `b030133` Fix incorrect link in /test/ README.md (fanquake)\n+- #12187 `b5e4b9b` Updating benchmarkmarking.md with an updated sample output (jeffrade)\n+- #12294 `7cf1aea` Create NetBSD build instructions and fix compilation (fanquake)\n+- #12251 `cc5870a` initwallet: Do not translate highly technical addresstype help (MarcoFalke)\n+- #11984 `efae366` Update OpenBSD build instructions for 6.2 (cont'd) (laanwj)\n+- #12293 `9d9c418` Mention that HD is enabled if hdmasterkeyid is present in getwalletinfo RPC help (fanquake)\n+- #12077 `c04cb48` Correct `sendmany` curl example (251Labs)\n+- #10677 `b3ecb7b` Document that addmultisigaddress is intended for non-watchonly addresses (instagibbs)\n+- #12177 `cad504b` Fix address_type help text of getnewaddress and getrawchangeaddress (mruddy)\n+\n+### Refactoring\n+- #9964 `b6a4891` Add const to methods that do not modify the object for which it is called (practicalswift)\n+- #10965 `655970d` Replace deprecated throw() with noexcept specifier (C++11) (practicalswift)\n+- #10645 `c484ec6` Use nullptr (C++11) instead of zero (0) as the null pointer constant (practicalswift)\n+- #10901 `22e301a` Fix constness of ArgsManager methods (promag)\n+- #10969 `4afb5aa` Declare single-argument (non-converting) constructors \"explicit\" (practicalswift)\n+- #11071 `dbf6bd6` Use static_assert(\u2026, \u2026) (C++11) instead of assert(\u2026) where appropriate (practicalswift)\n+- #10809 `c559884` optim: mark a few classes final (theuni)\n+- #10843 `2ab7c63` Add attribute [[noreturn]] (C++11) to functions that will not return (practicalswift)\n+- #11151 `7fd49d0` Fix header guards using reserved identifiers (danra)\n+- #11138 `2982511` Compat: Simplify bswap_16 implementation (danra)\n+- #11161 `745bbdc` Remove redundant explicitly defined copy ctors (danra)\n+- #11144 `cee4fe1` Move local include to before system includes (danra)\n+- #10781 `60dd9cc` Python cleanups (practicalswift)\n+- #10701 `50fae68` Remove the virtual specifier for functions with the override specifier (practicalswift)\n+- #11164 `38a54a5` Fix boost headers included as user instead of system headers (danra)\n+- #11143 `3aa60b7` Fix include path for bitcoin-config.h (danra)\n+- #8330 `59e1789` Structure Packing Optimizations in C{,Mutable}Transaction (JeremyRubin)\n+- #10845 `39ae413` Remove unreachable code (practicalswift)\n+- #11238 `6acdb1f` Add assertions before potential null deferences (MeshCollider)\n+- #11259 `089b742` Remove duplicate destination decoding (promag)\n+- #11232 `2f0d3e6` Ensure that data types are consistent (jjz)\n+- #10793 `efb4383` Changing &var[0] to var.data() (MeshCollider)\n+- #11196 `e278f86` Switch memory_cleanse implementation to BoringSSL's to ensure memory clearing even with -lto (maaku)\n+- #10888 `9821274` range-based loops and const qualifications in net.cpp (benma)\n+- #11351 `6c4fecf` Refactor: Modernize disallowed copy constructors/assignment (danra)\n+- #11385 `94c9015` Remove some unused functions and methods (sipa)\n+- #11301 `8776787` add m_added_nodes to connman options (benma)\n+- #11432 `058c0f9` Remove unused fTry from push_lock (promag)\n+- #11107 `e93fff1` Fix races in AppInitMain and others with lock and atomic bools (MeshCollider)\n+- #9572 `17f2ace` Skip witness sighash cache for non-segwit transactions (jl2012)\n+- #10961 `da0478e` Improve readability of DecodeBase58Check(...) (practicalswift)\n+- #11133 `a865b38` Document assumptions that are being made to avoid division by zero (practicalswift)\n+- #11073 `3bb77eb` Remove dead store in ecdsa_signature_parse_der_lax (BitonicEelis)\n+- #10898 `470c730` Fix invalid checks (NULL checks after dereference, redundant checks, etc.) (practicalswift)\n+- #11495 `50d72b3` [trivial] Make namespace explicit for is_regular_file (jnewbery)\n+- #11511 `db2f83e` [Init] Remove redundant exit(EXIT_FAILURE) instances and replace with return false (donaloconnor)\n+- #10866 `ef8a634` Fix -Wthread-safety-analysis warnings. Compile with -Wthread-safety-analysis if available (practicalswift)\n+- #11221 `0dec4cc` Refactor: simpler read (gnuser)\n+- #10696 `ef3758d` Remove redundant nullptr checks before deallocation (practicalswift)\n+- #11043 `5e9be16` Use std::unique_ptr (C++11) where possible (practicalswift)\n+- #11353 `05a7619` Small refactor of CCoinsViewCache::BatchWrite() (danra)\n+- #10749 `2adbddb` Use compile-time constants instead of unnamed enumerations (remove \"enum hack\") (practicalswift)\n+- #11603 `a933cb1` Move RPC registration out of AppInitParameterInteraction (ryanofsky)\n+- #11722 `26efc22` Switched sync.{cpp,h} to std threading primitives (tjps)\n+- #10493 `fbce66a` Use range-based for loops (C++11) when looping over map elements (practicalswift)\n+- #11337 `0d7e0a3` Fix code constness in CBlockIndex::GetAncestor() overloads (danra)\n+- #11516 `0e722e8` crypto: Add test cases covering the relevant HMAC-SHA{256,512} key length boundaries (practicalswift)\n+- #10574 `5d132e8` Remove includes in .cpp files for things the corresponding .h file already included (practicalswift)\n+- #11884 `66479c0` Remove unused include in hash.cpp (kallewoof)\n+- #10839 `c66adb2` Don't use pass by reference to const for cheaply-copied types (bool, char, etc.) (practicalswift)\n+- #10657 `79399c8` Utils: Improvements to ECDSA key-handling code (str4d)\n+- #12250 `e37ca2b` Make CKey::Load references const (ryanofsky)\n+- #12108 `9220426` Remove unused fQuit var from checkqueue.h (donaloconnor)\n+- #12159 `f3c7062` Use the character based overload for std::string::find (kekimusmaximus)\n+- #12266 `3448907` Move scheduler/threadGroup into common-init instead of per-app (TheBlueMatt)\n+\n+### Miscellaneous\n+- #11246 `777519b` github-merge: Coalesce git fetches (laanwj)\n+- #10871 `c9a4aa8` Handle getinfo in bitcoin-cli w/ -getinfo (revival of #8843) (achow101)\n+- #11419 `093074b` Utils: Fix launchctl not being able to stop bitcoind (OmeGak)\n+- #11394 `6e4e98e` Perform a weaker subtree check in Travis (sipa)\n+- #11702 `4122112` [build] Add a script for installing db4 (jamesob)\n+- #11794 `dd49862` Prefix leveldb debug logging (laanwj)\n+- #11781 `24df9af` Add `-debuglogfile` option (laanwj)\n+- #10773 `c17f11f` Shell script cleanups (practicalswift)\n+- #11829 `7630a1f` Test datadir specified in conf file exists (MeshCollider)\n+- #11836 `d44535d` Rename rpcuser.py to rpcauth.py (hkjn)\n+- #11831 `d48ab83` Always return true if AppInitMain got to the end (TheBlueMatt)\n+- #11943 `1808660` contrib: fix typo in install_db4.sh help message (laanwj)\n+- #12075 `c991b30` [scripts] Add missing univalue file to copyright_header.py (fanquake)\n+- #12197 `000ac4f` Log debug build status and warn when running benchmarks (laanwj)\n+- #10672 `6ab0e4c` Avoid division by zero in the case of a corrupt estimates file (practicalswift)\n+- #11273 `cdd6bbf` Ignore old format estimation file (Xekyo)\n+- #11951 `1fb34e0` Remove dead feeest-file read code for old versions (TheBlueMatt)\n+- #11421 `9ccafb1` Merge current secp256k1 subtree (MarcoFalke)\n+- #11573 `2631d55` [Util] Update tinyformat.h (fanquake)\n+- #10529 `331352f` Improve bitcoind systemd service file (Flowdalic)\n+- #11620 `70fec9e` [build] .gitignore: add background.tiff (Sjors)\n+- #11558 `68e021e` Minimal code changes to allow msvc compilation (sipsorcery)\n+- #11284 `10bee0d` Fix invalid memory access in CScript::operator+= (guidovranken, ajtowns)\n+- #10939 `a1f7f18` [init] Check non-emptiness of -blocknotify command prior to executing (practicalswift)\n+- #11467 `937613d` Fix typos. Use nullptr instead of NULL (practicalswift)\n+- #11834 `5bea05b` [verify-commits] Fix gpg.sh's echoing for commits with '\\n' (TheBlueMatt)\n+- #11830 `a13e443` rpcuser.py: Use 'python' not 'python2' (hkjn)\n+- #12194 `7abb0f0` Add change type option to fundrawtransaction (promag)\n+- #12269 `2ae7cf8` Update defaultAssumeValid to block 506067 (gmaxwell)\n+- #11952 `9ab9963` univalue: Bump subtree (MarcoFalke)\n+- #12367 `09fc859` Fix two fast-shutdown bugs (TheBlueMatt)\n+- #12422 `4d54e7a` util: Make LockDirectory thread-safe, consistent, and fix OpenBSD 6.2 build (laanwj)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- 251\n+- Aaron Clauson\n+- Aaron Golliver\n+- aaron-hanson\n+- Adam Langley\n+- Akio Nakamura\n+- Akira Takizawa\n+- Alejandro Avil\u00e9s\n+- Alex Morcos\n+- Alin Rus\n+- Anditto Heristyo\n+- Andras Elso\n+- Andreas Schildbach\n+- Andrew Chow\n+- Anthony Towns\n+- azuchi\n+- Carl Dong\n+- Chris Moore\n+- Chris Stewart\n+- Christian Gentry\n+- Cory Fields\n+- Cristian Mircea Messel\n+- CryptAxe\n+- Dan Raviv\n+- Daniel Edgecumbe\n+- danra\n+- david60\n+- Donal O'Connor\n+- dongsamb\n+- Dusty Williams\n+- Eelis\n+- esneider\n+- Evan Klitzke\n+- fanquake\n+- Ferdinando M. Ametrano\n+- fivepiece\n+- flack\n+- Florian Schmaus\n+- gnuser\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Henrik Jonsson\n+- Jack Grigg\n+- Jacky C\n+- James Evans\n+- James O'Beirne\n+- Jan Sarenik\n+- Jeff Rade\n+- Jeremiah Buddenhagen\n+- Jeremy Rubin\n+- Jim Posen\n+- jjz\n+- Joe Harvell\n+- Johannes Kanig\n+- John Newbery\n+- Johnson Lau\n+- Jonas Nick\n+- Jonas Schnelli\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Karel B\u00edlek\n+- Karl-Johan Alm\n+- klemens\n+- Kyuntae Ethan Kim\n+- laudaa\n+- Lawrence Nahum\n+- Lucas Betschart\n+- Luke Dashjr\n+- Luke Mlsna\n+- MarcoFalke\n+- Mark Friedenbach\n+- Marko Bencun\n+- Martin Ankerl\n+- Matt Corallo\n+- mruddy\n+- Murch\n+- NicolasDorier\n+- Pablo Fernandez\n+- Paul Berg\n+- Pedro Branco\n+- Pierre Rochard\n+- Pieter Wuille\n+- practicalswift\n+- Randolf Richardson\n+- Russell Yanofsky\n+- Samuel Dobson\n+- Sean Erle Johnson\n+- Shooter\n+- Sjors Provoost\n+- Suhas Daftuar\n+- Thomas Snider\n+- Thoragh\n+- Tim Shimmin\n+- Tomas van der Wansem\n+- Utsav Gupta\n+- Varunram Ganesh\n+- Vivek Ganesan\n+- Werner Lemberg\n+- William Casarin\n+- Willy Ko\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "228b086b9a3de02b534474027353a80dead2c292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjhiMDg2YjlhM2RlMDJiNTM0NDc0MDI3MzUzYTgwZGVhZDJjMjky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T15:35:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-26T15:51:20Z"
      },
      "message": "Merge #12083: Improve getchaintxstats test coverage\n\n57e6786 qa: Improve getchaintxstats functional test (Jo\u00e3o Barbosa)\n501b439 rpc: Refactor blockhash parse in getchaintxstats (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 61dec5cb68122998df7ec7b5239830f3caf0fe7185c107a66f27653ab2531a800db19a09050671b6fa8dbb5b53181da861eb31199c79d8635f246ccfa0d10efd",
      "tree": {
        "sha": "8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/228b086b9a3de02b534474027353a80dead2c292",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJalCz4AAoJEB5K7WKYbNJd7iUH/045roAUVpMXeX75jSLtGbky\nc3e6US3/wSoo1R1rEns//4MpXqTB2AeXFdsshL9mm6WzQabUKyz8zMeQHZFz9Tj1\nsJ1/zi7toy3Ywjw+7XHpKx7qxYpspPeuutVN6tY85AjXNudTb1837EC5MyO6/Cpr\nFucR4QVz19jb8CTMXxlNuUJ6qAStrw6lcIvN/h6h08jXWW8+CaV/Rf09uoTxn26E\nUAfMPkj9dQVQhBCGcxXi4a4KDu70xpIGASCZxO/92ysxzHW+z9OTlMG4/KEVADaR\n8pR5CCPjTF7RC4oyO/K+xIaodcBHFRWu7RnDV34QIeZQ/8QcSmUkq+usmF6TmW0=\n=QxOE\n-----END PGP SIGNATURE-----",
        "payload": "tree 8216f04c1463d6de3e5ddb69f9dfdb4a4aa85f19\nparent d3f4dd313e5fe58903caf2f4d04827e7f7944e17\nparent 57e6786203ad2f8beb0d2ff34b0ff7626bc7e877\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519659356 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519660280 +0100\n\nMerge #12083: Improve getchaintxstats test coverage\n\n57e6786 qa: Improve getchaintxstats functional test (Jo\u00e3o Barbosa)\n501b439 rpc: Refactor blockhash parse in getchaintxstats (Jo\u00e3o Barbosa)\n\nPull request description:\n\nTree-SHA512: 61dec5cb68122998df7ec7b5239830f3caf0fe7185c107a66f27653ab2531a800db19a09050671b6fa8dbb5b53181da861eb31199c79d8635f246ccfa0d10efd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17"
      },
      {
        "sha": "57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57e6786203ad2f8beb0d2ff34b0ff7626bc7e877"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 28,
      "deletions": 20
    },
    "files": [
      {
        "sha": "8007cebc37493cb93a6038ff1ce375394b22d659",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -1542,25 +1542,19 @@ UniValue getchaintxstats(const JSONRPCRequest& request)\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n-    bool havehash = !request.params[1].isNull();\n-    uint256 hash;\n-    if (havehash) {\n-        hash = uint256S(request.params[1].get_str());\n-    }\n-\n-    {\n+    if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        if (havehash) {\n-            auto it = mapBlockIndex.find(hash);\n-            if (it == mapBlockIndex.end()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-            }\n-            pindex = it->second;\n-            if (!chainActive.Contains(pindex)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n-            }\n-        } else {\n-            pindex = chainActive.Tip();\n+        pindex = chainActive.Tip();\n+    } else {\n+        uint256 hash = uint256S(request.params[1].get_str());\n+        LOCK(cs_main);\n+        auto it = mapBlockIndex.find(hash);\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        pindex = it->second;\n+        if (!chainActive.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n "
      },
      {
        "sha": "a9e14d3e3c52723c240a5b321738a5609eec18c4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -102,6 +102,22 @@ def _test_getblockchaininfo(self):\n     def _test_getchaintxstats(self):\n         self.log.info(\"Test getchaintxstats\")\n \n+        # Test `getchaintxstats` invalid extra parameters\n+        assert_raises_rpc_error(-1, 'getchaintxstats', self.nodes[0].getchaintxstats, 0, '', 0)\n+\n+        # Test `getchaintxstats` invalid `nblocks`\n+        assert_raises_rpc_error(-1, \"JSON value is not an integer as expected\", self.nodes[0].getchaintxstats, '')\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, -1)\n+        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, self.nodes[0].getblockcount())\n+\n+        # Test `getchaintxstats` invalid `blockhash`\n+        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getchaintxstats, blockhash=0)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getchaintxstats, blockhash='0')\n+        blockhash = self.nodes[0].getblockhash(200)\n+        self.nodes[0].invalidateblock(blockhash)\n+        assert_raises_rpc_error(-8, \"Block is not in main chain\", self.nodes[0].getchaintxstats, blockhash=blockhash)\n+        self.nodes[0].reconsiderblock(blockhash)\n+\n         chaintxstats = self.nodes[0].getchaintxstats(1)\n         # 200 txs plus genesis tx\n         assert_equal(chaintxstats['txcount'], 201)\n@@ -133,8 +149,6 @@ def _test_getchaintxstats(self):\n         assert('window_interval' not in chaintxstats)\n         assert('txrate' not in chaintxstats)\n \n-        assert_raises_rpc_error(-8, \"Invalid block count: should be between 0 and the block's height - 1\", self.nodes[0].getchaintxstats, 201)\n-\n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]\n         res = node.gettxoutsetinfo()"
      }
    ]
  },
  {
    "sha": "d918eb78645900cc79898787c32619f913264d0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTE4ZWI3ODY0NTkwMGNjNzk4OTg3ODdjMzI2MTlmOTEzMjY0ZDBh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-26T19:19:29Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-26T19:19:29Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "e037b422aa1d11708b25069cac40f09992568716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e037b422aa1d11708b25069cac40f09992568716"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d918eb78645900cc79898787c32619f913264d0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d918eb78645900cc79898787c32619f913264d0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d918eb78645900cc79898787c32619f913264d0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d918eb78645900cc79898787c32619f913264d0a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cff4ea93627a2b93e64dd7394f0dbad8e755c042",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d918eb78645900cc79898787c32619f913264d0a/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d918eb78645900cc79898787c32619f913264d0a/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=d918eb78645900cc79898787c32619f913264d0a",
        "patch": "@@ -35,7 +35,7 @@ To install WSL on Windows 10 with Fall Creators Update installed (version >= 162\n \n 1. Enable the Windows Subsystem for Linux feature\n   * Open the Windows Features dialog (`OptionalFeatures.exe`)\n-  * Enable 'Windows Susbsystem for Linux'\n+  * Enable 'Windows Subsystem for Linux'\n   * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)"
      },
      {
        "sha": "9093cbb86dc0026da0ef1e325b5fd67b0821d0c2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d918eb78645900cc79898787c32619f913264d0a/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d918eb78645900cc79898787c32619f913264d0a/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d918eb78645900cc79898787c32619f913264d0a",
        "patch": "@@ -688,7 +688,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n     thr.join();\n     BOOST_CHECK_EQUAL(threadresult, true);\n #ifndef WIN32\n-    // Try to aquire lock in child process while we're holding it, this should fail.\n+    // Try to acquire lock in child process while we're holding it, this should fail.\n     char ch;\n     BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n     BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n@@ -699,7 +699,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n     // Probing lock from our side now should succeed, but not hold on to the lock.\n     BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n \n-    // Try to acquire the lock in the child process, this should be succesful.\n+    // Try to acquire the lock in the child process, this should be successful.\n     BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n     BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n     BOOST_CHECK_EQUAL((bool)ch, true);"
      },
      {
        "sha": "59eae78cbd94d151a5ce5ed9e0f60fda6d4d001e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d918eb78645900cc79898787c32619f913264d0a/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d918eb78645900cc79898787c32619f913264d0a/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=d918eb78645900cc79898787c32619f913264d0a",
        "patch": "@@ -49,7 +49,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                     # count key types\n                     for addrObj in addrs:\n                         if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labled entry in the wallet should contain both a native address\n+                            # a labeled entry in the wallet should contain both a native address\n                             # and the p2sh-p2wpkh address that was added at wallet setup\n                             if len(addr.split(\",\")) == 2:\n                                 addr_list = addr.split(\",\")"
      }
    ]
  },
  {
    "sha": "b22c289ae6ec81e64678e314b562b0d8a0a14809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjJjMjg5YWU2ZWM4MWU2NDY3OGUzMTRiNTYyYjBkOGEwYTE0ODA5",
    "commit": {
      "author": {
        "name": "Randolf Richardson",
        "email": "randolf@richardson.tw",
        "date": "2018-02-26T21:52:25Z"
      },
      "committer": {
        "name": "Randolf Richardson",
        "email": "randolf@richardson.tw",
        "date": "2018-02-27T01:42:23Z"
      },
      "message": "[docs] Minor improvements to Compatibility Notes\n\nProgressed from Windows Vista to Windows 7 for OS testing statement.",
      "tree": {
        "sha": "5c244521b48c9f9638ba83c31e9a20e9d36e797b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c244521b48c9f9638ba83c31e9a20e9d36e797b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22c289ae6ec81e64678e314b562b0d8a0a14809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22c289ae6ec81e64678e314b562b0d8a0a14809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22c289ae6ec81e64678e314b562b0d8a0a14809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22c289ae6ec81e64678e314b562b0d8a0a14809/comments",
    "author": {
      "login": "randolf",
      "id": 33541170,
      "node_id": "MDQ6VXNlcjMzNTQxMTcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33541170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randolf",
      "html_url": "https://github.com/randolf",
      "followers_url": "https://api.github.com/users/randolf/followers",
      "following_url": "https://api.github.com/users/randolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/randolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randolf/subscriptions",
      "organizations_url": "https://api.github.com/users/randolf/orgs",
      "repos_url": "https://api.github.com/users/randolf/repos",
      "events_url": "https://api.github.com/users/randolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randolf",
      "id": 33541170,
      "node_id": "MDQ6VXNlcjMzNTQxMTcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33541170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randolf",
      "html_url": "https://github.com/randolf",
      "followers_url": "https://api.github.com/users/randolf/followers",
      "following_url": "https://api.github.com/users/randolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/randolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randolf/subscriptions",
      "organizations_url": "https://api.github.com/users/randolf/orgs",
      "repos_url": "https://api.github.com/users/randolf/repos",
      "events_url": "https://api.github.com/users/randolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac49dc790952deeb619d19f64b202911256c2a70",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22c289ae6ec81e64678e314b562b0d8a0a14809/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22c289ae6ec81e64678e314b562b0d8a0a14809/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b22c289ae6ec81e64678e314b562b0d8a0a14809",
        "patch": "@@ -48,7 +48,7 @@ Compatibility\n ==============\n \n Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+the Linux kernel, macOS 10.8+, and Windows 7 and newer (Windows XP is not supported).\n \n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them."
      }
    ]
  },
  {
    "sha": "cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmFhYzJhNjBmM2FjNjNhZThkZWNjYjAzZDg4YmQ1NTk0NDliNzhj",
    "commit": {
      "author": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-07T04:58:41Z"
      },
      "committer": {
        "name": "murrayn",
        "email": "github@nesbitt.ca",
        "date": "2018-02-27T04:54:16Z"
      },
      "message": "Add build support for 'gprof' profiling.",
      "tree": {
        "sha": "222cced02251afee94609b5fd22e2de2930e50f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/222cced02251afee94609b5fd22e2de2930e50f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d32528e733f2711b34dbc41fbb2bb0f153bf7e9a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "38544f41757e03d58335f759038550872a18e15a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
        "patch": "@@ -143,9 +143,9 @@ AC_ARG_WITH([qrencode],\n \n AC_ARG_ENABLE([hardening],\n   [AS_HELP_STRING([--disable-hardening],\n-  [do not attempt to harden the resulting executables (default is to harden)])],\n+  [do not attempt to harden the resulting executables (default is to harden when possible)])],\n   [use_hardening=$enableval],\n-  [use_hardening=yes])\n+  [use_hardening=auto])\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n@@ -214,6 +214,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+# Enable gprof profiling\n+AC_ARG_ENABLE([gprof],\n+    [AS_HELP_STRING([--enable-gprof],\n+                    [use gprof profiling compiler flags (default is no)])],\n+    [enable_gprof=$enableval],\n+    [enable_gprof=no])\n+\n # Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n@@ -553,12 +560,30 @@ else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n \n+if test \"x$enable_gprof\" = xyes; then\n+    dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n+    dnl we simply make them mutually exclusive here. Additionally, hardened toolchains may force\n+    dnl -pie by default, in which case it needs to be turned off with -no-pie.\n+\n+    if test x$use_hardening = xyes; then\n+        AC_MSG_ERROR(gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof)\n+    fi\n+    use_hardening=no\n+    AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$CXXFLAG_WERROR]])\n+\n+    AX_CHECK_LINK_FLAG([[-no-pie]], [GPROF_LDFLAGS=\"-no-pie\"])\n+    AX_CHECK_LINK_FLAG([[-pg]],[GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$GPROF_LDFLAGS]])\n+fi\n+\n if test x$TARGET_OS != xwindows; then\n   # All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n if test x$use_hardening != xno; then\n+  use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n@@ -1237,6 +1262,8 @@ AC_SUBST(BITCOIN_TX_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(ERROR_CXXFLAGS)\n+AC_SUBST(GPROF_CXXFLAGS)\n+AC_SUBST(GPROF_LDFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)\n@@ -1330,6 +1357,7 @@ echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  use asm       = $use_asm\"\n echo \"  debug enabled = $enable_debug\"\n+echo \"  gprof enabled = $enable_gprof\"\n echo \"  werror        = $enable_werror\"\n echo\n echo \"  target os     = $TARGET_OS\""
      },
      {
        "sha": "d9b2790fb7ad983fa7a848237f53522f1522fa27",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
        "patch": "@@ -140,6 +140,10 @@ Development tips and tricks\n Run configure with the --enable-debug option, then make. Or run configure with\n CXXFLAGS=\"-g -ggdb -O0\" or whatever debug flags you need.\n \n+**compiling for gprof profiling**\n+\n+Run configure with the --enable-gprof option, then make.\n+\n **debug.log**\n \n If the code is behaving strangely, take a look in the debug.log file in the data directory;"
      },
      {
        "sha": "45f343fb04e5780de81312aa38d188c792c4cf7a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfaac2a60f3ac63ae8deccb03d88bd559449b78c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
        "patch": "@@ -4,8 +4,8 @@\n \n DIST_SUBDIRS = secp256k1 univalue\n \n-AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n-AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) $(GPROF_LDFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n EXTRA_LIBRARIES =\n "
      }
    ]
  },
  {
    "sha": "d16bfaab93a2926eca89087347a0c46dd88ee358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTZiZmFhYjkzYTI5MjZlY2E4OTA4NzM0N2EwYzQ2ZGQ4OGVlMzU4",
    "commit": {
      "author": {
        "name": "Tamas Blummer",
        "email": "tamas.blummer@gmail.com",
        "date": "2018-02-27T10:43:46Z"
      },
      "committer": {
        "name": "Tamas Blummer",
        "email": "tamas.blummer@gmail.com",
        "date": "2018-02-27T10:43:46Z"
      },
      "message": "fix version typo",
      "tree": {
        "sha": "0b9ccf6841c24a956656482c77d53d390bb53393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b9ccf6841c24a956656482c77d53d390bb53393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d16bfaab93a2926eca89087347a0c46dd88ee358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16bfaab93a2926eca89087347a0c46dd88ee358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d16bfaab93a2926eca89087347a0c46dd88ee358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16bfaab93a2926eca89087347a0c46dd88ee358/comments",
    "author": {
      "login": "tamasblummer",
      "id": 4289351,
      "node_id": "MDQ6VXNlcjQyODkzNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tamasblummer",
      "html_url": "https://github.com/tamasblummer",
      "followers_url": "https://api.github.com/users/tamasblummer/followers",
      "following_url": "https://api.github.com/users/tamasblummer/following{/other_user}",
      "gists_url": "https://api.github.com/users/tamasblummer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tamasblummer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tamasblummer/subscriptions",
      "organizations_url": "https://api.github.com/users/tamasblummer/orgs",
      "repos_url": "https://api.github.com/users/tamasblummer/repos",
      "events_url": "https://api.github.com/users/tamasblummer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tamasblummer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tamasblummer",
      "id": 4289351,
      "node_id": "MDQ6VXNlcjQyODkzNTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4289351?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tamasblummer",
      "html_url": "https://github.com/tamasblummer",
      "followers_url": "https://api.github.com/users/tamasblummer/followers",
      "following_url": "https://api.github.com/users/tamasblummer/following{/other_user}",
      "gists_url": "https://api.github.com/users/tamasblummer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tamasblummer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tamasblummer/subscriptions",
      "organizations_url": "https://api.github.com/users/tamasblummer/orgs",
      "repos_url": "https://api.github.com/users/tamasblummer/repos",
      "events_url": "https://api.github.com/users/tamasblummer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tamasblummer/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fee2b765ba8a9bc8aee9c260a092f6c246b3a61f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d16bfaab93a2926eca89087347a0c46dd88ee358/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d16bfaab93a2926eca89087347a0c46dd88ee358/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d16bfaab93a2926eca89087347a0c46dd88ee358",
        "patch": "@@ -89,7 +89,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n             \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n             \"    \\\"pingwait\\\": n,             (numeric) ping wait (if non-zero)\\n\"\n-            \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n+            \"    \\\"version\\\": v,              (numeric) The peer version, such as 70001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n             \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\""
      }
    ]
  },
  {
    "sha": "9e2ed253f50500e1db4927d511d3ac0d47aed8df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTJlZDI1M2Y1MDUwMGUxZGI0OTI3ZDUxMWQzYWMwZDQ3YWVkOGRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-27T14:56:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-02-27T14:56:35Z"
      },
      "message": "Merge #12556: [Trivial] fix version typo in getpeerinfo RPC call help\n\nd16bfaa fix version typo (Tamas Blummer)\n\nPull request description:\n\n  RPC getpeeerinfo help output uses non-existent protocol version 7001. Changed to 70001.\n\nTree-SHA512: aea634d739b51bf26e3f871e8bf2bf812eb62a5d87008ead3ed27ec8bd9b753ad0a958eb21f580e505d7f2b36d60e5d9901dc8e0d25f34b7ef9533fddc898844",
      "tree": {
        "sha": "0b9ccf6841c24a956656482c77d53d390bb53393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b9ccf6841c24a956656482c77d53d390bb53393"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJalXGjAAoJEB5K7WKYbNJdC90H/iGaTZwx5SvzYAykVAx1pdjL\nYJaOfmkjGsCRiDjvDnsISTHqhA8kk06rCspjpynrpB8IRLnU3W+VTZ8RJDatMuCG\nXaUz+D1VxHjgixYKKWYvzN77WjuKGyZZJcwOn8qN9HpHyYr+IpyhJ0YhrT1u0Xyk\nE4Ox2mimaAfXHUq4e0YPWTMTAIlMgkPVJ8GkB+jyGlxK8pKwEgM8mu08XyW3zoLB\nWJtZJ5ZT0nMxyTdhv8yPNJPx4MreyzPanVu90zvyizJjCj+O/SFBUG6MrdJClMvS\nGk0SOV3kyNdOQ4snOUOI7tzm5Fn5t0cXM/IJQupkTyZYQYu1aPjxoLTY8OAfL18=\n=bznn\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b9ccf6841c24a956656482c77d53d390bb53393\nparent 228b086b9a3de02b534474027353a80dead2c292\nparent d16bfaab93a2926eca89087347a0c46dd88ee358\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519743385 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519743395 +0100\n\nMerge #12556: [Trivial] fix version typo in getpeerinfo RPC call help\n\nd16bfaa fix version typo (Tamas Blummer)\n\nPull request description:\n\n  RPC getpeeerinfo help output uses non-existent protocol version 7001. Changed to 70001.\n\nTree-SHA512: aea634d739b51bf26e3f871e8bf2bf812eb62a5d87008ead3ed27ec8bd9b753ad0a958eb21f580e505d7f2b36d60e5d9901dc8e0d25f34b7ef9533fddc898844\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      },
      {
        "sha": "d16bfaab93a2926eca89087347a0c46dd88ee358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d16bfaab93a2926eca89087347a0c46dd88ee358",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d16bfaab93a2926eca89087347a0c46dd88ee358"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fee2b765ba8a9bc8aee9c260a092f6c246b3a61f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2ed253f50500e1db4927d511d3ac0d47aed8df/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2ed253f50500e1db4927d511d3ac0d47aed8df/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "patch": "@@ -89,7 +89,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n             \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n             \"    \\\"pingwait\\\": n,             (numeric) ping wait (if non-zero)\\n\"\n-            \"    \\\"version\\\": v,              (numeric) The peer version, such as 7001\\n\"\n+            \"    \\\"version\\\": v,              (numeric) The peer version, such as 70001\\n\"\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n             \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\""
      }
    ]
  },
  {
    "sha": "f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGU3YWE3MDIwOTViMjJiYTU3YTc2M2M1YzA5M2UxNWQ0MTU4NmQx",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T02:45:57Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T19:42:06Z"
      },
      "message": "Add new prevector benchmarks.\n\nThis prepares for a series of two additional commits which optimize\nprevector performance.",
      "tree": {
        "sha": "e9acd6a0af2ab274264d5b2191984a9992c5b712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9acd6a0af2ab274264d5b2191984a9992c5b712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e7aa702095b22ba57a763c5c093e15d41586d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "228b086b9a3de02b534474027353a80dead2c292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/228b086b9a3de02b534474027353a80dead2c292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/228b086b9a3de02b534474027353a80dead2c292"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 88,
      "deletions": 37
    },
    "files": [
      {
        "sha": "748c5b7887db6e903da020047c2db6e6a0256c9e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -27,7 +27,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/lockedpool.cpp \\\n   bench/perf.cpp \\\n   bench/perf.h \\\n-  bench/prevector_destructor.cpp\n+  bench/prevector.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n "
      },
      {
        "sha": "d0f28d1a3e4fb96361e5f50db6315c05fafacf5e",
        "filename": "src/bench/prevector.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2015-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <prevector.h>\n+\n+#include <bench/bench.h>\n+\n+struct nontrivial_t {\n+    int x;\n+    nontrivial_t() :x(-1) {}\n+};\n+static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n+              \"expected nontrivial_t to not be trivially constructible\");\n+\n+typedef unsigned char trivial_t;\n+static_assert(IS_TRIVIALLY_CONSTRUCTIBLE<trivial_t>::value,\n+              \"expected trivial_t to be trivially constructible\");\n+\n+template <typename T>\n+static void PrevectorDestructor(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t1.resize(29);\n+        }\n+    }\n+}\n+\n+template <typename T>\n+static void PrevectorClear(benchmark::State& state)\n+{\n+\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t0.clear();\n+            t1.resize(29);\n+            t0.clear();\n+        }\n+    }\n+}\n+\n+template <typename T>\n+void PrevectorResize(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        prevector<28, T> t0;\n+        prevector<28, T> t1;\n+        for (auto x = 0; x < 1000; ++x) {\n+            t0.resize(28);\n+            t0.resize(0);\n+            t1.resize(29);\n+            t1.resize(0);\n+        }\n+    }\n+}\n+\n+#define PREVECTOR_TEST(name, nontrivops, trivops)                       \\\n+    static void Prevector ## name ## Nontrivial(benchmark::State& state) { \\\n+        PrevectorResize<nontrivial_t>(state);                           \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Nontrivial, nontrivops);             \\\n+    static void Prevector ## name ## Trivial(benchmark::State& state) { \\\n+        PrevectorResize<trivial_t>(state);                              \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Trivial, trivops);\n+\n+PREVECTOR_TEST(Clear, 28300, 88600)\n+PREVECTOR_TEST(Destructor, 28800, 88900)\n+PREVECTOR_TEST(Resize, 28900, 90300)"
      },
      {
        "sha": "39d0ee5eb194a214aeda584bd4a150156a78bce6",
        "filename": "src/bench/prevector_destructor.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/228b086b9a3de02b534474027353a80dead2c292/src/bench/prevector_destructor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/228b086b9a3de02b534474027353a80dead2c292/src/bench/prevector_destructor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector_destructor.cpp?ref=228b086b9a3de02b534474027353a80dead2c292",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2015-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <bench/bench.h>\n-#include <prevector.h>\n-\n-static void PrevectorDestructor(benchmark::State& state)\n-{\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t1.resize(29);\n-        }\n-    }\n-}\n-\n-static void PrevectorClear(benchmark::State& state)\n-{\n-\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t0.clear();\n-            t1.resize(29);\n-            t0.clear();\n-        }\n-    }\n-}\n-\n-BENCHMARK(PrevectorDestructor, 5700);\n-BENCHMARK(PrevectorClear, 5600);"
      },
      {
        "sha": "8a0f901304e528aeb957574961a7ef0dde7a86f5",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0e7aa702095b22ba57a763c5c093e15d41586d1/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "patch": "@@ -10,6 +10,16 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <type_traits>\n+\n+// GCC 4.8 is missing some C++11 type_traits,\n+// https://www.gnu.org/software/gcc/gcc-5/changes.html\n+#if defined(__GNUC__) && __GNUC__ < 5\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivial\n+#else\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_constructible\n+#endif\n+\n #ifdef WIN32\n #ifdef _WIN32_WINNT\n #undef _WIN32_WINNT"
      }
    ]
  },
  {
    "sha": "e46be25f0e19d574157752a5c0b674907a1578e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDZiZTI1ZjBlMTlkNTc0MTU3NzUyYTVjMGI2NzQ5MDdhMTU3OGU2",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2017-12-22T10:04:30Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T19:42:33Z"
      },
      "message": "Reduce redundant code of prevector and speed it up\n\nIn prevector.h, the code which like item_ptr(size()) apears in the loop.\nBoth item_ptr() and size() judge whether values are held directly or\nindirectly, but in most cases it is sufficient to make that judgement\nonce outside the loop.\n\nThis PR adds 2 private function fill() which has the loop to initialize\nby specified value (or iterator of the other prevector's element),\nbut don't call item_ptr() in their loop.\nOther functions(assign(), constructor, operator=(), insert())\nthat has similar loop, call fill() instead of original loop.\n\nAlso, resize() was changed like fill(), but it calls the default\nconstructor for that element each time.",
      "tree": {
        "sha": "66d7155ce0b5ffa5e34fdd281dc9314667050307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66d7155ce0b5ffa5e34fdd281dc9314667050307"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e46be25f0e19d574157752a5c0b674907a1578e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0e7aa702095b22ba57a763c5c093e15d41586d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0e7aa702095b22ba57a763c5c093e15d41586d1"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 42,
      "deletions": 49
    },
    "files": [
      {
        "sha": "75d6abfb0eedee6a7c1b087e3f70f26e0e728b51",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 42,
        "deletions": 49,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e46be25f0e19d574157752a5c0b674907a1578e6/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e46be25f0e19d574157752a5c0b674907a1578e6/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=e46be25f0e19d574157752a5c0b674907a1578e6",
        "patch": "@@ -194,16 +194,29 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n+    void fill(T* dst, size_type count, const T& value) {\n+        for (size_type i = 0; i < count; ++i) {\n+            new(static_cast<void*>(dst + i)) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void fill(T* dst, InputIterator first, InputIterator last) {\n+        while (first != last) {\n+            new(static_cast<void*>(dst)) T(*first);\n+            ++dst;\n+            ++first;\n+        }\n+    }\n+\n public:\n     void assign(size_type n, const T& val) {\n         clear();\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n@@ -213,11 +226,8 @@ class prevector {\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector() : _size(0), _union{{}} {}\n@@ -228,31 +238,23 @@ class prevector {\n \n     explicit prevector(size_type n, const T& val = T()) : _size(0) {\n         change_capacity(n);\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n     prevector(InputIterator first, InputIterator last) : _size(0) {\n         size_type n = last - first;\n         change_capacity(n);\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        size_type n = other.size();\n+        change_capacity(n);\n+        _size += n;\n+        fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n     prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {\n@@ -263,14 +265,7 @@ class prevector {\n         if (&other == this) {\n             return *this;\n         }\n-        resize(0);\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        assign(other.begin(), other.end());\n         return *this;\n     }\n \n@@ -314,15 +309,16 @@ class prevector {\n     }\n \n     void resize(size_type new_size) {\n-        if (size() > new_size) {\n+        size_type cur_size = size();\n+        if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        while (size() < new_size) {\n+        for (T* p = item_ptr(0); cur_size < new_size; cur_size++) {\n             _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T();\n+            new(static_cast<void*>(p + cur_size)) T();\n         }\n     }\n \n@@ -346,10 +342,11 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + 1, ptr, (size() - p) * sizeof(T));\n         _size++;\n-        new(static_cast<void*>(item_ptr(p))) T(value);\n-        return iterator(item_ptr(p));\n+        new(static_cast<void*>(ptr)) T(value);\n+        return iterator(ptr);\n     }\n \n     void insert(iterator pos, size_type count, const T& value) {\n@@ -358,11 +355,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        for (size_type i = 0; i < count; i++) {\n-            new(static_cast<void*>(item_ptr(p + i))) T(value);\n-        }\n+        fill(item_ptr(p), count, value);\n     }\n \n     template<typename InputIterator>\n@@ -373,13 +369,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        while (first != last) {\n-            new(static_cast<void*>(item_ptr(p))) T(*first);\n-            ++p;\n-            ++first;\n-        }\n+        fill(ptr, first, last);\n     }\n \n     iterator erase(iterator pos) {"
      }
    ]
  },
  {
    "sha": "5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFkNjM1Yjc4YzgzNTlhZGFlOWIyYWYwMTViNjdiNzMyNWMwZTBi",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T05:39:22Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-27T21:27:51Z"
      },
      "message": "Use memset() to optimize prevector::resize()\n\nFurther optimize prevector::resize() (which is called by a number of\nother prevector methods) to use memset to initialize memory when the\nprevector contains trivial types.",
      "tree": {
        "sha": "c556e3e9a5600432b4234d8db3f2a7efcefd32dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c556e3e9a5600432b4234d8db3f2a7efcefd32dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aad635b78c8359adae9b2af015b67b7325c0e0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e46be25f0e19d574157752a5c0b674907a1578e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e46be25f0e19d574157752a5c0b674907a1578e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e46be25f0e19d574157752a5c0b674907a1578e6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "103ead82ccb34fbe24622c05e67ab6d399710567",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 25,
        "deletions": 6,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aad635b78c8359adae9b2af015b67b7325c0e0b/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aad635b78c8359adae9b2af015b67b7325c0e0b/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=5aad635b78c8359adae9b2af015b67b7325c0e0b",
        "patch": "@@ -10,9 +10,12 @@\n #include <stdint.h>\n #include <string.h>\n \n+#include <cstddef>\n #include <iterator>\n #include <type_traits>\n \n+#include <compat.h>\n+\n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n@@ -194,8 +197,21 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n-    void fill(T* dst, size_type count, const T& value) {\n-        for (size_type i = 0; i < count; ++i) {\n+    void fill(T* dst, ptrdiff_t count) {\n+        if (IS_TRIVIALLY_CONSTRUCTIBLE<T>::value) {\n+            // The most common use of prevector is where T=unsigned char. For\n+            // trivially constructible types, we can use memset() to avoid\n+            // looping.\n+            ::memset(dst, 0, count * sizeof(T));\n+        } else {\n+            for (auto i = 0; i < count; ++i) {\n+                new(static_cast<void*>(dst + i)) T();\n+            }\n+        }\n+    }\n+\n+    void fill(T* dst, ptrdiff_t count, const T& value) {\n+        for (auto i = 0; i < count; ++i) {\n             new(static_cast<void*>(dst + i)) T(value);\n         }\n     }\n@@ -310,16 +326,19 @@ class prevector {\n \n     void resize(size_type new_size) {\n         size_type cur_size = size();\n+        if (cur_size == new_size) {\n+            return;\n+        }\n         if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n+            return;\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        for (T* p = item_ptr(0); cur_size < new_size; cur_size++) {\n-            _size++;\n-            new(static_cast<void*>(p + cur_size)) T();\n-        }\n+        ptrdiff_t increase = new_size - cur_size;\n+        fill(item_ptr(cur_size), increase);\n+        _size += increase;\n     }\n \n     void reserve(size_type new_capacity) {"
      }
    ]
  },
  {
    "sha": "22b4aae0284511e9a6a957197dae237a1799aa20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmI0YWFlMDI4NDUxMWU5YTZhOTU3MTk3ZGFlMjM3YTE3OTlhYTIw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-28T10:59:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-02-28T10:59:19Z"
      },
      "message": "[arith_uint256] Avoid unnecessary this-copy using prefix operator",
      "tree": {
        "sha": "999ddb89909306ec02a16d4e33975d6ec112297b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/999ddb89909306ec02a16d4e33975d6ec112297b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22b4aae0284511e9a6a957197dae237a1799aa20",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqWi4cACgkQV692LbM1\nMyISoRAAh0g1m4/PcbmtMDYEdB8lSh1a+oRa6cbKDg+J6EuVY528k5mNKBgE71i/\nWnI5bKEZx5D654TmAkxhRlOmY3iQLPYrDWBT7zyI7h3sgEWPNPCp/xNkUMTiAXys\n6esylh+Aa0nN5vNroklRmJe5fNaQ1Cji0CMt+Or7/gj0VNaljwJn85J+T55K94S7\nEqVXTXDMx8XZE0y9HhWlhswJnChnHw2MTasqGLoiSX/e4E9tPK4aS2wSiFFyV/oE\nYDWTODlA/Ht8tYiYHShRfjsSRIjkd2aiuh8MJoUDqDJO3OaZRKZ9SmBF0rvabkAz\nW0B8maU0kjxNZsDzpL0IBMrUVR9kT1qMQpUMt25XOn9qRsgsa+fnnZunsYa+WBeu\nQgu24sOz+zncmYIm1OF5eGEHRB4yhU3/1XXDuB0lNXqWxaAIPARfySaFpSrvxWwF\n7sewD8qMpG4W9CduY+0XSEc/lLG+BHgIYu8MmQuJPb78y3c4jCnjLztNTqgtKy7s\nRPnoMmzKIcGYdKinwUYa3NLtc+de+gdMGcwlBITuwa6AapTL5GNTiRGnmNBGf4TA\nI9cS1yxdz9jKroOvhexFWf3Y61K9g10PBW0+X7VWEtKIer+rG+xrGpMX2/TK/TAT\nFkFUfiwVApFxVlA/3LL9JQ0IZ5Hc5iYfkYvs1lhYEtFBFwXyDwk=\n=3S+L\n-----END PGP SIGNATURE-----",
        "payload": "tree 999ddb89909306ec02a16d4e33975d6ec112297b\nparent bf3353de90598f08a68d966c50b57ceaeb5b5d96\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519815559 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1519815559 +0900\n\n[arith_uint256] Avoid unnecessary this-copy using prefix operator\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4aae0284511e9a6a957197dae237a1799aa20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4aae0284511e9a6a957197dae237a1799aa20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4aae0284511e9a6a957197dae237a1799aa20/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f4cc8c2bf77ea1de8ffa2ce8756ac4a14e624a5",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22b4aae0284511e9a6a957197dae237a1799aa20/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22b4aae0284511e9a6a957197dae237a1799aa20/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=22b4aae0284511e9a6a957197dae237a1799aa20",
        "patch": "@@ -85,7 +85,7 @@ class base_uint\n         base_uint ret;\n         for (int i = 0; i < WIDTH; i++)\n             ret.pn[i] = ~pn[i];\n-        ret++;\n+        ++ret;\n         return ret;\n     }\n "
      }
    ]
  },
  {
    "sha": "874e8180858450e7cc597e8ed9b047c35e000dda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzRlODE4MDg1ODQ1MGU3Y2M1OTdlOGVkOWIwNDdjMzVlMDAwZGRh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-02-28T17:36:19Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2018-02-28T17:37:14Z"
      },
      "message": "Allow dustrelayfee to be set to zero",
      "tree": {
        "sha": "7c4573daddedd687bb2e2992e88cdd1b34f39a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c4573daddedd687bb2e2992e88cdd1b34f39a04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/874e8180858450e7cc597e8ed9b047c35e000dda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874e8180858450e7cc597e8ed9b047c35e000dda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/874e8180858450e7cc597e8ed9b047c35e000dda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874e8180858450e7cc597e8ed9b047c35e000dda/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "51b3d2ab8a384788dcf3a15cbaed66a6516f14c3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/874e8180858450e7cc597e8ed9b047c35e000dda/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/874e8180858450e7cc597e8ed9b047c35e000dda/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=874e8180858450e7cc597e8ed9b047c35e000dda",
        "patch": "@@ -1057,7 +1057,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-dustrelayfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n) || 0 == n)\n+        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n             return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }"
      }
    ]
  },
  {
    "sha": "90eac8c1f2250800fb701eae601d86f66d6067c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGVhYzhjMWYyMjUwODAwZmI3MDFlYWU2MDFkODZmNjZkNjA2N2M2",
    "commit": {
      "author": {
        "name": "Kosta Zertsekel",
        "email": "zertsekel@gmail.com",
        "date": "2018-03-01T05:26:18Z"
      },
      "committer": {
        "name": "Kosta Zertsekel",
        "email": "zertsekel@gmail.com",
        "date": "2018-03-01T05:31:35Z"
      },
      "message": "Add tests for HexStr corner cases\n\nSigned-off-by: Kosta Zertsekel <zertsekel@gmail.com>",
      "tree": {
        "sha": "34dd8f42c400847701d6aa0f3eb63378c845084a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34dd8f42c400847701d6aa0f3eb63378c845084a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90eac8c1f2250800fb701eae601d86f66d6067c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eac8c1f2250800fb701eae601d86f66d6067c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90eac8c1f2250800fb701eae601d86f66d6067c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eac8c1f2250800fb701eae601d86f66d6067c6/comments",
    "author": {
      "login": "kostaz",
      "id": 451660,
      "node_id": "MDQ6VXNlcjQ1MTY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kostaz",
      "html_url": "https://github.com/kostaz",
      "followers_url": "https://api.github.com/users/kostaz/followers",
      "following_url": "https://api.github.com/users/kostaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/kostaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kostaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kostaz/subscriptions",
      "organizations_url": "https://api.github.com/users/kostaz/orgs",
      "repos_url": "https://api.github.com/users/kostaz/repos",
      "events_url": "https://api.github.com/users/kostaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kostaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kostaz",
      "id": 451660,
      "node_id": "MDQ6VXNlcjQ1MTY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kostaz",
      "html_url": "https://github.com/kostaz",
      "followers_url": "https://api.github.com/users/kostaz/followers",
      "following_url": "https://api.github.com/users/kostaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/kostaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kostaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kostaz/subscriptions",
      "organizations_url": "https://api.github.com/users/kostaz/orgs",
      "repos_url": "https://api.github.com/users/kostaz/repos",
      "events_url": "https://api.github.com/users/kostaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kostaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a99f9be0ebd4062fd73648d525b2c7961f845580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99f9be0ebd4062fd73648d525b2c7961f845580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a99f9be0ebd4062fd73648d525b2c7961f845580"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "541ed81cca893a8ca75a1ff2773f4dcf6080509d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90eac8c1f2250800fb701eae601d86f66d6067c6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90eac8c1f2250800fb701eae601d86f66d6067c6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=90eac8c1f2250800fb701eae601d86f66d6067c6",
        "patch": "@@ -94,6 +94,20 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n         HexStr(ParseHex_expected, ParseHex_expected + 5, true),\n         \"04 67 8a fd b0\");\n \n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected + sizeof(ParseHex_expected),\n+               ParseHex_expected + sizeof(ParseHex_expected)),\n+        \"\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected + sizeof(ParseHex_expected),\n+               ParseHex_expected + sizeof(ParseHex_expected), true),\n+        \"\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected, ParseHex_expected),\n+        \"\");\n+\n     BOOST_CHECK_EQUAL(\n         HexStr(ParseHex_expected, ParseHex_expected, true),\n         \"\");"
      }
    ]
  },
  {
    "sha": "ac48861815832e924bc355553f677f54ace984c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYzQ4ODYxODE1ODMyZTkyNGJjMzU1NTUzZjY3N2Y1NGFjZTk4NGM1",
    "commit": {
      "author": {
        "name": "Kosta Zertsekel",
        "email": "zertsekel@gmail.com",
        "date": "2018-03-01T05:26:56Z"
      },
      "committer": {
        "name": "Kosta Zertsekel",
        "email": "zertsekel@gmail.com",
        "date": "2018-03-01T05:31:35Z"
      },
      "message": "Add tests for HexStr std::reverse_iterator cases\n\nSigned-off-by: Kosta Zertsekel <zertsekel@gmail.com>",
      "tree": {
        "sha": "b33d17efcdfbc065f25964cdb4fe141e053bfad5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b33d17efcdfbc065f25964cdb4fe141e053bfad5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ac48861815832e924bc355553f677f54ace984c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac48861815832e924bc355553f677f54ace984c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ac48861815832e924bc355553f677f54ace984c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac48861815832e924bc355553f677f54ace984c5/comments",
    "author": {
      "login": "kostaz",
      "id": 451660,
      "node_id": "MDQ6VXNlcjQ1MTY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kostaz",
      "html_url": "https://github.com/kostaz",
      "followers_url": "https://api.github.com/users/kostaz/followers",
      "following_url": "https://api.github.com/users/kostaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/kostaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kostaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kostaz/subscriptions",
      "organizations_url": "https://api.github.com/users/kostaz/orgs",
      "repos_url": "https://api.github.com/users/kostaz/repos",
      "events_url": "https://api.github.com/users/kostaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kostaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kostaz",
      "id": 451660,
      "node_id": "MDQ6VXNlcjQ1MTY2MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/451660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kostaz",
      "html_url": "https://github.com/kostaz",
      "followers_url": "https://api.github.com/users/kostaz/followers",
      "following_url": "https://api.github.com/users/kostaz/following{/other_user}",
      "gists_url": "https://api.github.com/users/kostaz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kostaz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kostaz/subscriptions",
      "organizations_url": "https://api.github.com/users/kostaz/orgs",
      "repos_url": "https://api.github.com/users/kostaz/repos",
      "events_url": "https://api.github.com/users/kostaz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kostaz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90eac8c1f2250800fb701eae601d86f66d6067c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eac8c1f2250800fb701eae601d86f66d6067c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90eac8c1f2250800fb701eae601d86f66d6067c6"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d8db200e4fc04fde784c95e263cf78aa69e69213",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ac48861815832e924bc355553f677f54ace984c5/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ac48861815832e924bc355553f677f54ace984c5/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ac48861815832e924bc355553f677f54ace984c5",
        "patch": "@@ -117,6 +117,58 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n     BOOST_CHECK_EQUAL(\n         HexStr(ParseHex_vec, true),\n         \"04 67 8a fd b0\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_vec.rbegin(), ParseHex_vec.rend()),\n+        \"b0fd8a6704\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_vec.rbegin(), ParseHex_vec.rend(), true),\n+        \"b0 fd 8a 67 04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 1),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 1),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 5),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"b0fd8a6704\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 5),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"b0 fd 8a 67 04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 65),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"5f1df16b2b704c8a578d0bbaf74d385cde12c11ee50455f3c438ef4c3fbcf649b6de611feae06279a60939e028a8d65c10b73071a6f16719274855feb0fd8a6704\"\n+    );\n }\n \n "
      }
    ]
  },
  {
    "sha": "18307849b405f9e2067eaa8091b105838f413707",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODMwNzg0OWI0MDVmOWUyMDY3ZWFhODA5MWIxMDU4MzhmNDEzNzA3",
    "commit": {
      "author": {
        "name": "532479301",
        "email": "532479301@qq.com",
        "date": "2018-03-01T09:20:27Z"
      },
      "committer": {
        "name": "532479301",
        "email": "532479301@qq.com",
        "date": "2018-03-01T09:20:27Z"
      },
      "message": "Consensus: Fix bug when compiler do not support __builtin_clz*\n\n#ifdef is not correct since defination is defined to 0 or 1. Should change to #if",
      "tree": {
        "sha": "35f80c882b70311b97efc230f8e78e441c28a3a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35f80c882b70311b97efc230f8e78e441c28a3a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18307849b405f9e2067eaa8091b105838f413707",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18307849b405f9e2067eaa8091b105838f413707",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18307849b405f9e2067eaa8091b105838f413707",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18307849b405f9e2067eaa8091b105838f413707/comments",
    "author": {
      "login": "532479301",
      "id": 14291548,
      "node_id": "MDQ6VXNlcjE0MjkxNTQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/14291548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/532479301",
      "html_url": "https://github.com/532479301",
      "followers_url": "https://api.github.com/users/532479301/followers",
      "following_url": "https://api.github.com/users/532479301/following{/other_user}",
      "gists_url": "https://api.github.com/users/532479301/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/532479301/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/532479301/subscriptions",
      "organizations_url": "https://api.github.com/users/532479301/orgs",
      "repos_url": "https://api.github.com/users/532479301/repos",
      "events_url": "https://api.github.com/users/532479301/events{/privacy}",
      "received_events_url": "https://api.github.com/users/532479301/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "532479301",
      "id": 14291548,
      "node_id": "MDQ6VXNlcjE0MjkxNTQ4",
      "avatar_url": "https://avatars.githubusercontent.com/u/14291548?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/532479301",
      "html_url": "https://github.com/532479301",
      "followers_url": "https://api.github.com/users/532479301/followers",
      "following_url": "https://api.github.com/users/532479301/following{/other_user}",
      "gists_url": "https://api.github.com/users/532479301/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/532479301/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/532479301/subscriptions",
      "organizations_url": "https://api.github.com/users/532479301/orgs",
      "repos_url": "https://api.github.com/users/532479301/repos",
      "events_url": "https://api.github.com/users/532479301/events{/privacy}",
      "received_events_url": "https://api.github.com/users/532479301/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2ed253f50500e1db4927d511d3ac0d47aed8df"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e9d6dc82aa76d35b2c8d7cd7be3cecb902ba4d9",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18307849b405f9e2067eaa8091b105838f413707/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18307849b405f9e2067eaa8091b105838f413707/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=18307849b405f9e2067eaa8091b105838f413707",
        "patch": "@@ -82,12 +82,12 @@ void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#ifdef HAVE_DECL___BUILTIN_CLZL\n+#if HAVE_DECL___BUILTIN_CLZL\n     if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n         return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n     }\n #endif\n-#ifdef HAVE_DECL___BUILTIN_CLZLL\n+#if HAVE_DECL___BUILTIN_CLZLL\n     if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n         return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n     }"
      }
    ]
  },
  {
    "sha": "e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2Q5ZmM1YzUzMTZhNjM5MTdlMDc2Y2E1OGEwYjU1MmVhMGQ1NmFl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-01T09:40:36Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-01T09:40:36Z"
      },
      "message": "[qt] navigate to  transaction history page after send\n\nThe transaction will be selected. When sending to multiple\ndestinations, all will be selected (thanks @promag).",
      "tree": {
        "sha": "ba6d8fe20433a696f1c8781a99d3e25e2e173d3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6d8fe20433a696f1c8781a99d3e25e2e173d3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqXypYACgkQV/+b28ww\nEAkzVg//TWM7N67OlVp5G+BD75wU7JZp63etveMC87uJ5dTkl0rslUQHaLAFUeY4\nxkEu6isBgOpEPRcsJETvEw26cUXZEaCFufLsZ7sYaPV9CeMfwFGcIwKIn8UZHKgw\niCK5elOp7X1akllCodDL9Elb4fJRjfunctu/kQTEEFhq54BYEjSdRYdJ7IEGkmPS\nENLxvj+s46nnkvotNLeoN5/JWToPLJbGrhr1h+qhU+/9hpgOlpwde8BSdCa4UEYW\nH1c0F6K4MDPUMuoKVKgVTDwDcTEBri2NLzSQQnQEwQxrhSzkunymNvyteLA9Hm0U\n/chQnZZkBqtkXgrJs7NyH3jqqALVbcWBPV261Z4ARwja2uLpBPWOlcv4O/HiJWmG\njZ4nTAU061IBZ2J9plaMmwz2+Tx0EOgjYK9r+J3t//kS02zvqBNkwadopjJdFzm+\nsLt0UJz3k7mOTRYAe9wziLiASykC+psamqckEIHGSnwD1K0Taj3eTWFKtvKv4pqF\ns7aNwVpYxKLYxsI2JFs45ncYemA3er4vVwhBmO35o2NNIJT09zi+9uljKo86ldqk\nwtG1ReWKt23Xo5bE/EueLdWcx0RBeOG79tA6dlOwoNhIplfWCxfBJteok1gtKlmF\njlMRUEaXoyATDbCNPtlx75bVY4VMn/K1haAkh0915bITlKdXTok=\n=iPHP\n-----END PGP SIGNATURE-----",
        "payload": "tree ba6d8fe20433a696f1c8781a99d3e25e2e173d3c\nparent c997f8808256521397f1c003bb1e9896fee6eaa0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1519897236 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1519897236 +0100\n\n[qt] navigate to  transaction history page after send\n\nThe transaction will be selected. When sending to multiple\ndestinations, all will be selected (thanks @promag).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c997f8808256521397f1c003bb1e9896fee6eaa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c997f8808256521397f1c003bb1e9896fee6eaa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c997f8808256521397f1c003bb1e9896fee6eaa0"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 42,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ab381bfb5d49fbf0850767298a5fa820c1e5f8e1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -29,6 +29,7 @@\n #include <init.h>\n #include <rpc/server.h>\n #include <ui_interface.h>\n+#include <uint256.h>\n #include <util.h>\n #include <warnings.h>\n \n@@ -80,6 +81,7 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n Q_DECLARE_METATYPE(CAmount)\n+Q_DECLARE_METATYPE(uint256)\n \n static void InitMessage(const std::string &message)\n {"
      },
      {
        "sha": "ef36aab1a4307a2619a74f53b1b9f1b8506ecdb7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -369,6 +369,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n+        Q_EMIT coinsSent(currentTransaction.getTransaction()->GetHash());\n     }\n     fNewRecipientAllowed = true;\n }"
      },
      {
        "sha": "48885bbcad77f1418a759241ce90e8d1d3d40dfe",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -54,6 +54,9 @@ public Q_SLOTS:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n+Q_SIGNALS:\n+    void coinsSent(const uint256& txid);\n+\n private:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;"
      },
      {
        "sha": "006f9fe4437490fdfe90ff8c92bfcf28d20cb843",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -263,8 +263,7 @@ void TransactionView::setModel(WalletModel *_model)\n \n void TransactionView::chooseDate(int idx)\n {\n-    if(!transactionProxyModel)\n-        return;\n+    if (!transactionProxyModel) return;\n     QDate current = QDate::currentDate();\n     dateRangeWidget->setVisible(false);\n     switch(dateWidget->itemData(idx).toInt())\n@@ -592,6 +591,32 @@ void TransactionView::focusTransaction(const QModelIndex &idx)\n     transactionView->setFocus();\n }\n \n+void TransactionView::focusTransaction(const uint256& txid)\n+{\n+    if (!transactionProxyModel)\n+        return;\n+\n+    const QModelIndexList results = this->model->getTransactionTableModel()->match(\n+        this->model->getTransactionTableModel()->index(0,0),\n+        TransactionTableModel::TxHashRole,\n+        QString::fromStdString(txid.ToString()), -1);\n+\n+    transactionView->setFocus();\n+    transactionView->selectionModel()->clearSelection();\n+    for (const QModelIndex& index : results) {\n+        const QModelIndex targetIndex = transactionProxyModel->mapFromSource(index);\n+        transactionView->selectionModel()->select(\n+            targetIndex,\n+            QItemSelectionModel::Rows | QItemSelectionModel::Select);\n+        // Called once per destination to ensure all results are in view, unless\n+        // transactions are not ordered by (ascending or descending) date.\n+        transactionView->scrollTo(targetIndex);\n+        // scrollTo() does not scroll far enough the first time when transactions\n+        // are ordered by ascending date.\n+        if (index == results[0]) transactionView->scrollTo(targetIndex);\n+    }\n+}\n+\n // We override the virtual resizeEvent of the QWidget to adjust tables column\n // sizes as the tables width is proportional to the dialogs width.\n void TransactionView::resizeEvent(QResizeEvent* event)"
      },
      {
        "sha": "66dc5bc86bf1f961ca8de02ec29378597b53ff27",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <qt/guiutil.h>\n \n+#include <uint256.h>\n+\n #include <QWidget>\n #include <QKeyEvent>\n \n@@ -116,7 +118,7 @@ public Q_SLOTS:\n     void changedSearch();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n-\n+    void focusTransaction(const uint256& txid);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONVIEW_H"
      },
      {
        "sha": "64497a3431d1a60c184024466aba81da317da183",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "patch": "@@ -68,6 +68,9 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n     connect(overviewPage, SIGNAL(outOfSyncWarningClicked()), this, SLOT(requestedSyncWarningInfo()));\n \n+    // Highlight transaction after send\n+    connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), transactionView, SLOT(focusTransaction(uint256)));\n+\n     // Double-clicking on a transaction on the transaction history page shows details\n     connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n \n@@ -91,6 +94,9 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         // Clicking on a transaction on the overview page simply sends you to transaction history page\n         connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), gui, SLOT(gotoHistoryPage()));\n \n+        // Navigate to transaction history page after send\n+        connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), gui, SLOT(gotoHistoryPage()));\n+\n         // Receive and report messages\n         connect(this, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n "
      }
    ]
  },
  {
    "sha": "32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk4N2Q1YWViYzRlMGZiNzU3YWQ3N2RjNzI3ZTVkN2VlOWQzOTRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T11:12:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T11:13:08Z"
      },
      "message": "Merge #12549: Make prevector::resize() and other prevector operations much faster\n\n5aad635 Use memset() to optimize prevector::resize() (Evan Klitzke)\ne46be25 Reduce redundant code of prevector and speed it up (Akio Nakamura)\nf0e7aa7 Add new prevector benchmarks. (Evan Klitzke)\n\nPull request description:\n\n  This branch optimizes various `prevector` operations, especially resizing vectors. While profiling the `loadblk` thread I noticed that a lot of time was being spent in `prevector::resize()` which led to this work. I have some data here indicating that it takes up **37%** of the time in `ReadBlockFromDisk()`: https://monad.io/readblockfromdisk.svg\n\n  This branch improves things significantly. For trivial types, the new results for the prevector benchmark are:\n\n   * `PrevectorClearTrivial` which tests `prevector::clear()` becomes 24.6x faster\n   * `PrevectorDestructorTrivial` which tests `prevector::~prevector()` becomes 20.5x faster\n   * `PrevectorResizeTrivial` which tests `prevector::resize()` becomes 20.3x faster\n\n  Note that in practice it looks like the prevector is only used to contain `unsigned char` types, which is a trivial type. The benchmarks are testing a bit of an extreme case, but the changes here are motivated by the profiling data for `ReadBlockFromDisk()` I linked to above.\n\n  The pull request here consists of a series of three commits:\n   * The first adds new benchmarks but does not change the prevector code.\n   * The second is from @AkioNak , and merges some prevector optimizations he submitted in #11988\n   * The third optimizes `prevector::resize()` to use `memset()` when the prevector contains trivially constructible types\n\nTree-SHA512: 28f7cbb91a19f9f43b6a5942781d7eb2e3197389186b666f086b69df12bee37773140f765426d715bfb8ebff79cb27a5f1206d0325b54b4aa65598b50fb18368",
      "tree": {
        "sha": "c40fa26e4d0350f6609b3557030c800ea9921631",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c40fa26e4d0350f6609b3557030c800ea9921631"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJal+BEAAoJEB5K7WKYbNJdq2UIAM2wB2PnHyapUhJB85C6VD9F\nLKNWu6GPC2VWR2DfJb3pwkMPecjf+j8hwmodV/wMRw5K02vL8E9AkcVmjezon4WE\nftONUmatv/LCyzem+4/33EAQs1ogk4ITFIjlvph+Pw82cZFnbdaq1w3SBk1cWl0M\nnmvBoHYl/onGrNrkdBacf/hDVysnUjSboQds4gumK90NE7VZiEuYUiiHzDqqOT9P\nmbwsjPE6xVZsA+iThdQVD6UMZSW8WzDYo+sEH3yb4cbx/k8UVRs3ujoY2G79vzHa\nMEViFTJeJ/0XFcren7ByftBWz4bnotdQ4m45hB1NGQ+Y34SEgPgK8nYn3dSCI4E=\n=ByLr\n-----END PGP SIGNATURE-----",
        "payload": "tree c40fa26e4d0350f6609b3557030c800ea9921631\nparent 9e2ed253f50500e1db4927d511d3ac0d47aed8df\nparent 5aad635b78c8359adae9b2af015b67b7325c0e0b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519902775 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519902788 +0100\n\nMerge #12549: Make prevector::resize() and other prevector operations much faster\n\n5aad635 Use memset() to optimize prevector::resize() (Evan Klitzke)\ne46be25 Reduce redundant code of prevector and speed it up (Akio Nakamura)\nf0e7aa7 Add new prevector benchmarks. (Evan Klitzke)\n\nPull request description:\n\n  This branch optimizes various `prevector` operations, especially resizing vectors. While profiling the `loadblk` thread I noticed that a lot of time was being spent in `prevector::resize()` which led to this work. I have some data here indicating that it takes up **37%** of the time in `ReadBlockFromDisk()`: https://monad.io/readblockfromdisk.svg\n\n  This branch improves things significantly. For trivial types, the new results for the prevector benchmark are:\n\n   * `PrevectorClearTrivial` which tests `prevector::clear()` becomes 24.6x faster\n   * `PrevectorDestructorTrivial` which tests `prevector::~prevector()` becomes 20.5x faster\n   * `PrevectorResizeTrivial` which tests `prevector::resize()` becomes 20.3x faster\n\n  Note that in practice it looks like the prevector is only used to contain `unsigned char` types, which is a trivial type. The benchmarks are testing a bit of an extreme case, but the changes here are motivated by the profiling data for `ReadBlockFromDisk()` I linked to above.\n\n  The pull request here consists of a series of three commits:\n   * The first adds new benchmarks but does not change the prevector code.\n   * The second is from @AkioNak , and merges some prevector optimizations he submitted in #11988\n   * The third optimizes `prevector::resize()` to use `memset()` when the prevector contains trivially constructible types\n\nTree-SHA512: 28f7cbb91a19f9f43b6a5942781d7eb2e3197389186b666f086b69df12bee37773140f765426d715bfb8ebff79cb27a5f1206d0325b54b4aa65598b50fb18368\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e2ed253f50500e1db4927d511d3ac0d47aed8df"
      },
      {
        "sha": "5aad635b78c8359adae9b2af015b67b7325c0e0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aad635b78c8359adae9b2af015b67b7325c0e0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5aad635b78c8359adae9b2af015b67b7325c0e0b"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 151,
      "deletions": 88
    },
    "files": [
      {
        "sha": "748c5b7887db6e903da020047c2db6e6a0256c9e",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "patch": "@@ -27,7 +27,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/lockedpool.cpp \\\n   bench/perf.cpp \\\n   bench/perf.h \\\n-  bench/prevector_destructor.cpp\n+  bench/prevector.cpp\n \n nodist_bench_bench_bitcoin_SOURCES = $(GENERATED_BENCH_FILES)\n "
      },
      {
        "sha": "d0f28d1a3e4fb96361e5f50db6315c05fafacf5e",
        "filename": "src/bench/prevector.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/bench/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/bench/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector.cpp?ref=32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright (c) 2015-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat.h>\n+#include <prevector.h>\n+\n+#include <bench/bench.h>\n+\n+struct nontrivial_t {\n+    int x;\n+    nontrivial_t() :x(-1) {}\n+};\n+static_assert(!IS_TRIVIALLY_CONSTRUCTIBLE<nontrivial_t>::value,\n+              \"expected nontrivial_t to not be trivially constructible\");\n+\n+typedef unsigned char trivial_t;\n+static_assert(IS_TRIVIALLY_CONSTRUCTIBLE<trivial_t>::value,\n+              \"expected trivial_t to be trivially constructible\");\n+\n+template <typename T>\n+static void PrevectorDestructor(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t1.resize(29);\n+        }\n+    }\n+}\n+\n+template <typename T>\n+static void PrevectorClear(benchmark::State& state)\n+{\n+\n+    while (state.KeepRunning()) {\n+        for (auto x = 0; x < 1000; ++x) {\n+            prevector<28, T> t0;\n+            prevector<28, T> t1;\n+            t0.resize(28);\n+            t0.clear();\n+            t1.resize(29);\n+            t0.clear();\n+        }\n+    }\n+}\n+\n+template <typename T>\n+void PrevectorResize(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        prevector<28, T> t0;\n+        prevector<28, T> t1;\n+        for (auto x = 0; x < 1000; ++x) {\n+            t0.resize(28);\n+            t0.resize(0);\n+            t1.resize(29);\n+            t1.resize(0);\n+        }\n+    }\n+}\n+\n+#define PREVECTOR_TEST(name, nontrivops, trivops)                       \\\n+    static void Prevector ## name ## Nontrivial(benchmark::State& state) { \\\n+        PrevectorResize<nontrivial_t>(state);                           \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Nontrivial, nontrivops);             \\\n+    static void Prevector ## name ## Trivial(benchmark::State& state) { \\\n+        PrevectorResize<trivial_t>(state);                              \\\n+    }                                                                   \\\n+    BENCHMARK(Prevector ## name ## Trivial, trivops);\n+\n+PREVECTOR_TEST(Clear, 28300, 88600)\n+PREVECTOR_TEST(Destructor, 28800, 88900)\n+PREVECTOR_TEST(Resize, 28900, 90300)"
      },
      {
        "sha": "39d0ee5eb194a214aeda584bd4a150156a78bce6",
        "filename": "src/bench/prevector_destructor.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e2ed253f50500e1db4927d511d3ac0d47aed8df/src/bench/prevector_destructor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e2ed253f50500e1db4927d511d3ac0d47aed8df/src/bench/prevector_destructor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/prevector_destructor.cpp?ref=9e2ed253f50500e1db4927d511d3ac0d47aed8df",
        "patch": "@@ -1,36 +0,0 @@\n-// Copyright (c) 2015-2017 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <bench/bench.h>\n-#include <prevector.h>\n-\n-static void PrevectorDestructor(benchmark::State& state)\n-{\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t1.resize(29);\n-        }\n-    }\n-}\n-\n-static void PrevectorClear(benchmark::State& state)\n-{\n-\n-    while (state.KeepRunning()) {\n-        for (auto x = 0; x < 1000; ++x) {\n-            prevector<28, unsigned char> t0;\n-            prevector<28, unsigned char> t1;\n-            t0.resize(28);\n-            t0.clear();\n-            t1.resize(29);\n-            t0.clear();\n-        }\n-    }\n-}\n-\n-BENCHMARK(PrevectorDestructor, 5700);\n-BENCHMARK(PrevectorClear, 5600);"
      },
      {
        "sha": "8a0f901304e528aeb957574961a7ef0dde7a86f5",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "patch": "@@ -10,6 +10,16 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <type_traits>\n+\n+// GCC 4.8 is missing some C++11 type_traits,\n+// https://www.gnu.org/software/gcc/gcc-5/changes.html\n+#if defined(__GNUC__) && __GNUC__ < 5\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivial\n+#else\n+#define IS_TRIVIALLY_CONSTRUCTIBLE std::is_trivially_constructible\n+#endif\n+\n #ifdef WIN32\n #ifdef _WIN32_WINNT\n #undef _WIN32_WINNT"
      },
      {
        "sha": "103ead82ccb34fbe24622c05e67ab6d399710567",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 63,
        "deletions": 51,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "patch": "@@ -10,9 +10,12 @@\n #include <stdint.h>\n #include <string.h>\n \n+#include <cstddef>\n #include <iterator>\n #include <type_traits>\n \n+#include <compat.h>\n+\n #pragma pack(push, 1)\n /** Implements a drop-in replacement for std::vector<T> which stores up to N\n  *  elements directly (without heap allocation). The types Size and Diff are\n@@ -194,16 +197,42 @@ class prevector {\n     T* item_ptr(difference_type pos) { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n     const T* item_ptr(difference_type pos) const { return is_direct() ? direct_ptr(pos) : indirect_ptr(pos); }\n \n+    void fill(T* dst, ptrdiff_t count) {\n+        if (IS_TRIVIALLY_CONSTRUCTIBLE<T>::value) {\n+            // The most common use of prevector is where T=unsigned char. For\n+            // trivially constructible types, we can use memset() to avoid\n+            // looping.\n+            ::memset(dst, 0, count * sizeof(T));\n+        } else {\n+            for (auto i = 0; i < count; ++i) {\n+                new(static_cast<void*>(dst + i)) T();\n+            }\n+        }\n+    }\n+\n+    void fill(T* dst, ptrdiff_t count, const T& value) {\n+        for (auto i = 0; i < count; ++i) {\n+            new(static_cast<void*>(dst + i)) T(value);\n+        }\n+    }\n+\n+    template<typename InputIterator>\n+    void fill(T* dst, InputIterator first, InputIterator last) {\n+        while (first != last) {\n+            new(static_cast<void*>(dst)) T(*first);\n+            ++dst;\n+            ++first;\n+        }\n+    }\n+\n public:\n     void assign(size_type n, const T& val) {\n         clear();\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n@@ -213,11 +242,8 @@ class prevector {\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector() : _size(0), _union{{}} {}\n@@ -228,31 +254,23 @@ class prevector {\n \n     explicit prevector(size_type n, const T& val = T()) : _size(0) {\n         change_capacity(n);\n-        while (size() < n) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(val);\n-        }\n+        _size += n;\n+        fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n     prevector(InputIterator first, InputIterator last) : _size(0) {\n         size_type n = last - first;\n         change_capacity(n);\n-        while (first != last) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*first);\n-            ++first;\n-        }\n+        _size += n;\n+        fill(item_ptr(0), first, last);\n     }\n \n     prevector(const prevector<N, T, Size, Diff>& other) : _size(0) {\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        size_type n = other.size();\n+        change_capacity(n);\n+        _size += n;\n+        fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n     prevector(prevector<N, T, Size, Diff>&& other) : _size(0) {\n@@ -263,14 +281,7 @@ class prevector {\n         if (&other == this) {\n             return *this;\n         }\n-        resize(0);\n-        change_capacity(other.size());\n-        const_iterator it = other.begin();\n-        while (it != other.end()) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T(*it);\n-            ++it;\n-        }\n+        assign(other.begin(), other.end());\n         return *this;\n     }\n \n@@ -314,16 +325,20 @@ class prevector {\n     }\n \n     void resize(size_type new_size) {\n-        if (size() > new_size) {\n+        size_type cur_size = size();\n+        if (cur_size == new_size) {\n+            return;\n+        }\n+        if (cur_size > new_size) {\n             erase(item_ptr(new_size), end());\n+            return;\n         }\n         if (new_size > capacity()) {\n             change_capacity(new_size);\n         }\n-        while (size() < new_size) {\n-            _size++;\n-            new(static_cast<void*>(item_ptr(size() - 1))) T();\n-        }\n+        ptrdiff_t increase = new_size - cur_size;\n+        fill(item_ptr(cur_size), increase);\n+        _size += increase;\n     }\n \n     void reserve(size_type new_capacity) {\n@@ -346,10 +361,11 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + 1), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + 1, ptr, (size() - p) * sizeof(T));\n         _size++;\n-        new(static_cast<void*>(item_ptr(p))) T(value);\n-        return iterator(item_ptr(p));\n+        new(static_cast<void*>(ptr)) T(value);\n+        return iterator(ptr);\n     }\n \n     void insert(iterator pos, size_type count, const T& value) {\n@@ -358,11 +374,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        for (size_type i = 0; i < count; i++) {\n-            new(static_cast<void*>(item_ptr(p + i))) T(value);\n-        }\n+        fill(item_ptr(p), count, value);\n     }\n \n     template<typename InputIterator>\n@@ -373,13 +388,10 @@ class prevector {\n         if (capacity() < new_size) {\n             change_capacity(new_size + (new_size >> 1));\n         }\n-        memmove(item_ptr(p + count), item_ptr(p), (size() - p) * sizeof(T));\n+        T* ptr = item_ptr(p);\n+        memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n         _size += count;\n-        while (first != last) {\n-            new(static_cast<void*>(item_ptr(p))) T(*first);\n-            ++p;\n-            ++first;\n-        }\n+        fill(ptr, first, last);\n     }\n \n     iterator erase(iterator pos) {"
      }
    ]
  },
  {
    "sha": "be263faf871f244b2302b927a775c421044de79e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTI2M2ZhZjg3MWYyNDRiMjMwMmI5MjdhNzc1YzQyMTA0NGRlNzll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T11:18:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T11:36:38Z"
      },
      "message": "Merge #12421: [qt] navigate to  transaction history page after send\n\ne7d9fc5 [qt] navigate to  transaction history page after send (Sjors Provoost)\n\nPull request description:\n\n  Before this change QT just remained on the Send tab, which I found confusing. Now it switches to the Transactions tab. This makes it more clear to the user that the send actually succeeded, and here they can monitor progress.\n\n  Ideally I would like to highlight the transaction, e.g. by refactoring `TransactionView::focusTransaction(const QModelIndex &idx)` to accept a transaction hash, but I'm not sure how to do that.\n\nTree-SHA512: 8aa93e03874de8434e18951f8aec47377814c0bcaf7eda4766fc41d5a4e32806346e12e4139e4d45468dfdf0b786f5a7faa393a31b8cd6c65ccac21fb3782c33",
      "tree": {
        "sha": "18f2550ee110958dab93544614c3cd67416ba9d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18f2550ee110958dab93544614c3cd67416ba9d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be263faf871f244b2302b927a775c421044de79e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJal+XGAAoJEB5K7WKYbNJdJvoH/0169YJqZLWS6mnz3NYnX/1J\nWh9tmVFljNf4lzQg412xyiatYZVj5Zvq9UbrbvV69sWg0RdECtjZF9tuUMVPHYuQ\ngBp9bly75k9RsyMFre8emBbpgHXfgTD7cUBzr5Tj6YwNAJxobAfdXw9Q1ObICey7\n3Y77hJaVILGiHtsz8nW6/Kqvb9CERW6VxVRs0iD+kyckLVzf8n2FGfwoGqqIctcT\nNVCSJHM2bL4jmC4RrQvo59iCGqem0RylMyTcQCQcjdEx0gfYPurfFuzSgK4hMSk7\nf1eeZik5TepoYgkHytDoYeyvu4w16jd9z+fO4eDIU+mic1r2JQMgdv67R4eY148=\n=OLfw\n-----END PGP SIGNATURE-----",
        "payload": "tree 18f2550ee110958dab93544614c3cd67416ba9d5\nparent 32987d5aebc4e0fb757ad77dc727e5d7ee9d394b\nparent e7d9fc5c5316a63917e076ca58a0b552ea0d56ae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519903105 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519904198 +0100\n\nMerge #12421: [qt] navigate to  transaction history page after send\n\ne7d9fc5 [qt] navigate to  transaction history page after send (Sjors Provoost)\n\nPull request description:\n\n  Before this change QT just remained on the Send tab, which I found confusing. Now it switches to the Transactions tab. This makes it more clear to the user that the send actually succeeded, and here they can monitor progress.\n\n  Ideally I would like to highlight the transaction, e.g. by refactoring `TransactionView::focusTransaction(const QModelIndex &idx)` to accept a transaction hash, but I'm not sure how to do that.\n\nTree-SHA512: 8aa93e03874de8434e18951f8aec47377814c0bcaf7eda4766fc41d5a4e32806346e12e4139e4d45468dfdf0b786f5a7faa393a31b8cd6c65ccac21fb3782c33\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be263faf871f244b2302b927a775c421044de79e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be263faf871f244b2302b927a775c421044de79e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be263faf871f244b2302b927a775c421044de79e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32987d5aebc4e0fb757ad77dc727e5d7ee9d394b"
      },
      {
        "sha": "e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7d9fc5c5316a63917e076ca58a0b552ea0d56ae"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 42,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ab381bfb5d49fbf0850767298a5fa820c1e5f8e1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -29,6 +29,7 @@\n #include <init.h>\n #include <rpc/server.h>\n #include <ui_interface.h>\n+#include <uint256.h>\n #include <util.h>\n #include <warnings.h>\n \n@@ -80,6 +81,7 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n Q_DECLARE_METATYPE(CAmount)\n+Q_DECLARE_METATYPE(uint256)\n \n static void InitMessage(const std::string &message)\n {"
      },
      {
        "sha": "ef36aab1a4307a2619a74f53b1b9f1b8506ecdb7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -369,6 +369,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         accept();\n         CoinControlDialog::coinControl()->UnSelectAll();\n         coinControlUpdateLabels();\n+        Q_EMIT coinsSent(currentTransaction.getTransaction()->GetHash());\n     }\n     fNewRecipientAllowed = true;\n }"
      },
      {
        "sha": "48885bbcad77f1418a759241ce90e8d1d3d40dfe",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -54,6 +54,9 @@ public Q_SLOTS:\n     void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n                     const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n+Q_SIGNALS:\n+    void coinsSent(const uint256& txid);\n+\n private:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;"
      },
      {
        "sha": "006f9fe4437490fdfe90ff8c92bfcf28d20cb843",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -263,8 +263,7 @@ void TransactionView::setModel(WalletModel *_model)\n \n void TransactionView::chooseDate(int idx)\n {\n-    if(!transactionProxyModel)\n-        return;\n+    if (!transactionProxyModel) return;\n     QDate current = QDate::currentDate();\n     dateRangeWidget->setVisible(false);\n     switch(dateWidget->itemData(idx).toInt())\n@@ -592,6 +591,32 @@ void TransactionView::focusTransaction(const QModelIndex &idx)\n     transactionView->setFocus();\n }\n \n+void TransactionView::focusTransaction(const uint256& txid)\n+{\n+    if (!transactionProxyModel)\n+        return;\n+\n+    const QModelIndexList results = this->model->getTransactionTableModel()->match(\n+        this->model->getTransactionTableModel()->index(0,0),\n+        TransactionTableModel::TxHashRole,\n+        QString::fromStdString(txid.ToString()), -1);\n+\n+    transactionView->setFocus();\n+    transactionView->selectionModel()->clearSelection();\n+    for (const QModelIndex& index : results) {\n+        const QModelIndex targetIndex = transactionProxyModel->mapFromSource(index);\n+        transactionView->selectionModel()->select(\n+            targetIndex,\n+            QItemSelectionModel::Rows | QItemSelectionModel::Select);\n+        // Called once per destination to ensure all results are in view, unless\n+        // transactions are not ordered by (ascending or descending) date.\n+        transactionView->scrollTo(targetIndex);\n+        // scrollTo() does not scroll far enough the first time when transactions\n+        // are ordered by ascending date.\n+        if (index == results[0]) transactionView->scrollTo(targetIndex);\n+    }\n+}\n+\n // We override the virtual resizeEvent of the QWidget to adjust tables column\n // sizes as the tables width is proportional to the dialogs width.\n void TransactionView::resizeEvent(QResizeEvent* event)"
      },
      {
        "sha": "66dc5bc86bf1f961ca8de02ec29378597b53ff27",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <qt/guiutil.h>\n \n+#include <uint256.h>\n+\n #include <QWidget>\n #include <QKeyEvent>\n \n@@ -116,7 +118,7 @@ public Q_SLOTS:\n     void changedSearch();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n-\n+    void focusTransaction(const uint256& txid);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONVIEW_H"
      },
      {
        "sha": "64497a3431d1a60c184024466aba81da317da183",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be263faf871f244b2302b927a775c421044de79e/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be263faf871f244b2302b927a775c421044de79e/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=be263faf871f244b2302b927a775c421044de79e",
        "patch": "@@ -68,6 +68,9 @@ WalletView::WalletView(const PlatformStyle *_platformStyle, QWidget *parent):\n     connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), transactionView, SLOT(focusTransaction(QModelIndex)));\n     connect(overviewPage, SIGNAL(outOfSyncWarningClicked()), this, SLOT(requestedSyncWarningInfo()));\n \n+    // Highlight transaction after send\n+    connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), transactionView, SLOT(focusTransaction(uint256)));\n+\n     // Double-clicking on a transaction on the transaction history page shows details\n     connect(transactionView, SIGNAL(doubleClicked(QModelIndex)), transactionView, SLOT(showDetails()));\n \n@@ -91,6 +94,9 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         // Clicking on a transaction on the overview page simply sends you to transaction history page\n         connect(overviewPage, SIGNAL(transactionClicked(QModelIndex)), gui, SLOT(gotoHistoryPage()));\n \n+        // Navigate to transaction history page after send\n+        connect(sendCoinsPage, SIGNAL(coinsSent(uint256)), gui, SLOT(gotoHistoryPage()));\n+\n         // Receive and report messages\n         connect(this, SIGNAL(message(QString,QString,unsigned int)), gui, SLOT(message(QString,QString,unsigned int)));\n "
      }
    ]
  },
  {
    "sha": "39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWRjYWMyN2ExYmVhZTQ4ZDFiMGZhMjdmMzBkMzUwNTkwM2UwZWFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T12:50:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T13:11:01Z"
      },
      "message": "Merge #12570: Add test cases for HexStr (std::reverse_iterator and corner cases)\n\nac48861 Add tests for HexStr std::reverse_iterator cases (Kosta Zertsekel)\n90eac8c Add tests for HexStr corner cases (Kosta Zertsekel)\n\nPull request description:\n\nTree-SHA512: 6298d6fdc344e67a9ea6dc74eadb04e68f4f49fc4511d4a8765cafce7eeb8603f96ebedd82c13811326bcaf1ee511946419b651ca411f711baca91bec51947d6",
      "tree": {
        "sha": "e056eaca7ab880f1dcd6c65c7118b4a0292695d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e056eaca7ab880f1dcd6c65c7118b4a0292695d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJal/vlAAoJEB5K7WKYbNJdZDMH/i05MS5ilN8+pJYSMXOfefnG\nL1FxPY9JufmZTRLQN12dkAjq5K0QOV3MzEPzX6b2pXJt/yyuDRBLsV8SMeaHnTXx\n7MB4r9ntD5e6Lv//0Fsx+xt+kv3D0Y1A4CudEEyJpG6HbFrbuxEklWguI9xoNkLZ\nGVaBejm7GHcFvrGfFGHfVTA3NnLqmUbpqPSTiP6NVS/n0gqDXOJD5NH06UYuzcuy\nMJVF6QLEi6VXBvmpBbpSSx9R/XEjV/puTsD2c+0gwd53NW+pdgdY6ss5O8NtZye9\nNWNmWFK8+ISi0jdDVUMzv3nSFaP5+5OG+8f8mcFsugQJyh12d/5JM1zw3qXHje4=\n=CLfS\n-----END PGP SIGNATURE-----",
        "payload": "tree e056eaca7ab880f1dcd6c65c7118b4a0292695d1\nparent be263faf871f244b2302b927a775c421044de79e\nparent ac48861815832e924bc355553f677f54ace984c5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519908650 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519909861 +0100\n\nMerge #12570: Add test cases for HexStr (std::reverse_iterator and corner cases)\n\nac48861 Add tests for HexStr std::reverse_iterator cases (Kosta Zertsekel)\n90eac8c Add tests for HexStr corner cases (Kosta Zertsekel)\n\nPull request description:\n\nTree-SHA512: 6298d6fdc344e67a9ea6dc74eadb04e68f4f49fc4511d4a8765cafce7eeb8603f96ebedd82c13811326bcaf1ee511946419b651ca411f711baca91bec51947d6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcac27a1beae48d1b0fa27f30d3505903e0eaa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be263faf871f244b2302b927a775c421044de79e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be263faf871f244b2302b927a775c421044de79e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be263faf871f244b2302b927a775c421044de79e"
      },
      {
        "sha": "ac48861815832e924bc355553f677f54ace984c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ac48861815832e924bc355553f677f54ace984c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ac48861815832e924bc355553f677f54ace984c5"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "35d3a608252058d906d4d60e387d22a22461655e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39dcac27a1beae48d1b0fa27f30d3505903e0eaa/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39dcac27a1beae48d1b0fa27f30d3505903e0eaa/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
        "patch": "@@ -81,6 +81,20 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n         HexStr(ParseHex_expected, ParseHex_expected + 5, true),\n         \"04 67 8a fd b0\");\n \n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected + sizeof(ParseHex_expected),\n+               ParseHex_expected + sizeof(ParseHex_expected)),\n+        \"\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected + sizeof(ParseHex_expected),\n+               ParseHex_expected + sizeof(ParseHex_expected), true),\n+        \"\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_expected, ParseHex_expected),\n+        \"\");\n+\n     BOOST_CHECK_EQUAL(\n         HexStr(ParseHex_expected, ParseHex_expected, true),\n         \"\");\n@@ -90,6 +104,58 @@ BOOST_AUTO_TEST_CASE(util_HexStr)\n     BOOST_CHECK_EQUAL(\n         HexStr(ParseHex_vec, true),\n         \"04 67 8a fd b0\");\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_vec.rbegin(), ParseHex_vec.rend()),\n+        \"b0fd8a6704\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(ParseHex_vec.rbegin(), ParseHex_vec.rend(), true),\n+        \"b0 fd 8a 67 04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 1),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 1),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 5),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"b0fd8a6704\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 5),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected), true),\n+        \"b0 fd 8a 67 04\"\n+    );\n+\n+    BOOST_CHECK_EQUAL(\n+        HexStr(std::reverse_iterator<const uint8_t *>(ParseHex_expected + 65),\n+               std::reverse_iterator<const uint8_t *>(ParseHex_expected)),\n+        \"5f1df16b2b704c8a578d0bbaf74d385cde12c11ee50455f3c438ef4c3fbcf649b6de611feae06279a60939e028a8d65c10b73071a6f16719274855feb0fd8a6704\"\n+    );\n }\n \n "
      }
    ]
  },
  {
    "sha": "5c2aff8d95a932f82a9472975b1d183da6c99e5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzJhZmY4ZDk1YTkzMmY4MmE5NDcyOTc1YjFkMTgzZGE2Yzk5ZTVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T14:14:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T14:31:15Z"
      },
      "message": "Merge #10387: Eventually connect to NODE_NETWORK_LIMITED peers\n\neb91835 Add setter for g_initial_block_download_completed (Jonas Schnelli)\n3f56df5 [QA] add NODE_NETWORK_LIMITED address relay and sync test (Jonas Schnelli)\n158e1a6 [QA] fix mininode CAddress ser/deser (Jonas Schnelli)\nfa999af [QA] Allow addrman loopback tests (add debug option -addrmantest) (Jonas Schnelli)\n6fe57bd Connect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD (Jonas Schnelli)\n31c45a9 Accept addresses with NODE_NETWORK_LIMITED flag (Jonas Schnelli)\n\nPull request description:\n\n  Eventually connect to peers signalling NODE_NETWORK_LIMITED if we are out of IBD.\n  Accept and relay NODE_NETWORK_LIMITED peers in addrman.\n\nTree-SHA512: 8a238fc97f767f81cae1866d6cc061390f23a72af4a711d2f7158c77f876017986abb371d213d1c84019eef7be4ca951e8e6f83fda36769c4e1a1d763f787037",
      "tree": {
        "sha": "3d01672f1247510698e7cc390041e9ac91aec486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d01672f1247510698e7cc390041e9ac91aec486"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c2aff8d95a932f82a9472975b1d183da6c99e5f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJamA6zAAoJEB5K7WKYbNJdpaoH/j4KqvfTN5TV5xSbNckMV+20\nolxyPy8nWq4DaI/31dVAN+UJEA/3IhwT72aY6gFBdIVA+BpZ1QoYc/9rcxxSAWeT\nJHwWUkE2y9kCXAnK71wOsj88elg4t5Z2dS+pygY+Yorh3zpzdOUhK+XabSOgbA43\nFak/1Ku7qB7jrE83yGN8YChy2cywz45xvIXI0lfSXG+n+tSc88mMnR8FNAl6l24E\ny2atDBMsomwAvlX/H+gyaqhNiUOWi2EgdQJt9G40cUdvWcuaAFAuP162UZh1rqv+\nlZIaMJk14YlRy5G15RNaszP65shof0XZVOOB07VQ5ql00Y2Y5Yrh+eGC0lktVzg=\n=718u\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d01672f1247510698e7cc390041e9ac91aec486\nparent 39dcac27a1beae48d1b0fa27f30d3505903e0eaa\nparent eb9183535d5fc2dfe8c0e26378f2621d3473c303\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519913649 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519914675 +0100\n\nMerge #10387: Eventually connect to NODE_NETWORK_LIMITED peers\n\neb91835 Add setter for g_initial_block_download_completed (Jonas Schnelli)\n3f56df5 [QA] add NODE_NETWORK_LIMITED address relay and sync test (Jonas Schnelli)\n158e1a6 [QA] fix mininode CAddress ser/deser (Jonas Schnelli)\nfa999af [QA] Allow addrman loopback tests (add debug option -addrmantest) (Jonas Schnelli)\n6fe57bd Connect to peers signaling NODE_NETWORK_LIMITED when out-of-IBD (Jonas Schnelli)\n31c45a9 Accept addresses with NODE_NETWORK_LIMITED flag (Jonas Schnelli)\n\nPull request description:\n\n  Eventually connect to peers signalling NODE_NETWORK_LIMITED if we are out of IBD.\n  Accept and relay NODE_NETWORK_LIMITED peers in addrman.\n\nTree-SHA512: 8a238fc97f767f81cae1866d6cc061390f23a72af4a711d2f7158c77f876017986abb371d213d1c84019eef7be4ca951e8e6f83fda36769c4e1a1d763f787037\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2aff8d95a932f82a9472975b1d183da6c99e5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2aff8d95a932f82a9472975b1d183da6c99e5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2aff8d95a932f82a9472975b1d183da6c99e5f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39dcac27a1beae48d1b0fa27f30d3505903e0eaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39dcac27a1beae48d1b0fa27f30d3505903e0eaa"
      },
      {
        "sha": "eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9183535d5fc2dfe8c0e26378f2621d3473c303",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9183535d5fc2dfe8c0e26378f2621d3473c303"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 119,
      "deletions": 23
    },
    "files": [
      {
        "sha": "47bcdf2294ba0395898f2fce99ef68ff1b909b4c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -448,6 +448,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-addrmantest\", \"Allows to test address relay on localhost\");\n     }\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + \" \" + _(\"<category> can be:\") + \" \" + ListLogCategories() + \".\");"
      },
      {
        "sha": "c7c19f83a1393d6e0e0706dfbf2a4cfa138ecf4d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -181,6 +181,10 @@ void AdvertiseLocal(CNode *pnode)\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n         CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n+            // use IPv4 loopback during addrmantest\n+            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode->GetLocalServices());\n+        }\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n@@ -189,7 +193,7 @@ void AdvertiseLocal(CNode *pnode)\n         {\n             addrLocal.SetIP(pnode->GetAddrLocal());\n         }\n-        if (addrLocal.IsRoutable())\n+        if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n         {\n             LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n             FastRandomContext insecure_rand;\n@@ -2718,6 +2722,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     m_manual_connection = false;\n     fClient = false; // set by version message\n+    m_limited_node = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;"
      },
      {
        "sha": "96f04d83e057bb6038623179b607f0454810c868",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -641,6 +641,7 @@ class CNode\n     bool fOneShot;\n     bool m_manual_connection;\n     bool fClient;\n+    bool m_limited_node; //after BIP159\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;"
      },
      {
        "sha": "ddf0dbbbea5dd5f799772be0fa85f97557eee28b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -892,6 +892,7 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n \n+    SetServiceFlagsIBDCache(!fInitialDownload);\n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain.\n         std::vector<uint256> vHashes;\n@@ -1642,7 +1643,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             pfrom->cleanSubVer = cleanSubVer;\n         }\n         pfrom->nStartingHeight = nStartingHeight;\n-        pfrom->fClient = !(nServices & NODE_NETWORK);\n+\n+        // set nodes not relaying blocks and tx and not serving (parts) of the historical blockchain as \"clients\"\n+        pfrom->fClient = (!(nServices & NODE_NETWORK) && !(nServices & NODE_NETWORK_LIMITED));\n+\n+        // set nodes not capable of serving the complete blockchain history as \"limited nodes\"\n+        pfrom->m_limited_node = (!(nServices & NODE_NETWORK) && (nServices & NODE_NETWORK_LIMITED));\n+\n         {\n             LOCK(pfrom->cs_filter);\n             pfrom->fRelayTxes = fRelay; // set to true after we get the first filter* message\n@@ -1801,7 +1808,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // We only bother storing full nodes, though this may include\n             // things which we would not make an outbound connection to, in\n             // part because we may make feeler connections to them.\n-            if (!MayHaveUsefulAddressDB(addr.nServices))\n+            if (!MayHaveUsefulAddressDB(addr.nServices) && !HasAllDesirableServiceFlags(addr.nServices))\n                 continue;\n \n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n@@ -3611,7 +3618,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n         // Message: getdata (blocks)\n         //\n         std::vector<CInv> vGetData;\n-        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);"
      },
      {
        "sha": "2ec26fbd3e5fb5c7a63a7b36029c1df31218c2b0",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -12,6 +12,8 @@\n # include <arpa/inet.h>\n #endif\n \n+static std::atomic<bool> g_initial_block_download_completed(false);\n+\n namespace NetMsgType {\n const char *VERSION=\"version\";\n const char *VERACK=\"verack\";\n@@ -127,6 +129,17 @@ bool CMessageHeader::IsValid(const MessageStartChars& pchMessageStartIn) const\n }\n \n \n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n+    if ((services & NODE_NETWORK_LIMITED) && g_initial_block_download_completed) {\n+        return ServiceFlags(NODE_NETWORK_LIMITED | NODE_WITNESS);\n+    }\n+    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n+}\n+\n+void SetServiceFlagsIBDCache(bool state) {\n+    g_initial_block_download_completed = state;\n+}\n+\n \n CAddress::CAddress() : CService()\n {"
      },
      {
        "sha": "e518d1194401b0ba21355656c27c8374654af2c2",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -15,6 +15,7 @@\n #include <uint256.h>\n #include <version.h>\n \n+#include <atomic>\n #include <stdint.h>\n #include <string>\n \n@@ -301,9 +302,10 @@ enum ServiceFlags : uint64_t {\n  * If the NODE_NONE return value is changed, contrib/seeds/makeseeds.py\n  * should be updated appropriately to filter for the same nodes.\n  */\n-static ServiceFlags GetDesirableServiceFlags(ServiceFlags services) {\n-    return ServiceFlags(NODE_NETWORK | NODE_WITNESS);\n-}\n+ServiceFlags GetDesirableServiceFlags(ServiceFlags services);\n+\n+/** Set the current IBD status in order to figure out the desirable service flags */\n+void SetServiceFlagsIBDCache(bool status);\n \n /**\n  * A shortcut for (services & GetDesirableServiceFlags(services))\n@@ -316,10 +318,10 @@ static inline bool HasAllDesirableServiceFlags(ServiceFlags services) {\n \n /**\n  * Checks if a peer with the given service flags may be capable of having a\n- * robust address-storage DB. Currently an alias for checking NODE_NETWORK.\n+ * robust address-storage DB.\n  */\n static inline bool MayHaveUsefulAddressDB(ServiceFlags services) {\n-    return services & NODE_NETWORK;\n+    return (services & NODE_NETWORK) || (services & NODE_NETWORK_LIMITED);\n }\n \n /** A CService with information about it as peer */"
      },
      {
        "sha": "81a41d6a977b3c604d34de3de24c931a1536c794",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 70,
        "deletions": 8,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -8,16 +8,21 @@\n and that it responds to getdata requests for blocks correctly:\n     - send a block within 288 + 2 of the tip\n     - disconnect peers who request blocks older than that.\"\"\"\n-from test_framework.messages import CInv, msg_getdata\n-from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, NetworkThread, P2PInterface\n+from test_framework.messages import CInv, msg_getdata, msg_verack\n+from test_framework.mininode import NODE_BLOOM, NODE_NETWORK_LIMITED, NODE_WITNESS, P2PInterface, wait_until, mininode_lock, network_thread_start, network_thread_join\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, disconnect_nodes, connect_nodes_bi, sync_blocks\n \n class P2PIgnoreInv(P2PInterface):\n+    firstAddrnServices = 0\n     def on_inv(self, message):\n         # The node will send us invs for other blocks. Ignore them.\n         pass\n-\n+    def on_addr(self, message):\n+        self.firstAddrnServices = message.addrs[0].nServices\n+    def wait_for_addr(self, timeout=5):\n+        test_function = lambda: self.last_message.get(\"addr\")\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n     def send_getdata_for_block(self, blockhash):\n         getdata_request = msg_getdata()\n         getdata_request.inv.append(CInv(2, int(blockhash, 16)))\n@@ -26,12 +31,24 @@ def send_getdata_for_block(self, blockhash):\n class NodeNetworkLimitedTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n-        self.extra_args = [['-prune=550']]\n+        self.num_nodes = 3\n+        self.extra_args = [['-prune=550', '-addrmantest'], [], []]\n+\n+    def disconnect_all(self):\n+        disconnect_nodes(self.nodes[0], 1)\n+        disconnect_nodes(self.nodes[1], 0)\n+        disconnect_nodes(self.nodes[2], 1)\n+        disconnect_nodes(self.nodes[2], 0)\n+        disconnect_nodes(self.nodes[0], 2)\n+        disconnect_nodes(self.nodes[1], 2)\n+\n+    def setup_network(self):\n+        super(NodeNetworkLimitedTest, self).setup_network()\n+        self.disconnect_all()\n \n     def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        NetworkThread().start()\n+        network_thread_start()\n         node.wait_for_verack()\n \n         expected_services = NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED\n@@ -43,7 +60,9 @@ def run_test(self):\n         assert_equal(int(self.nodes[0].getnetworkinfo()['localservices'], 16), expected_services)\n \n         self.log.info(\"Mine enough blocks to reach the NODE_NETWORK_LIMITED range.\")\n-        blocks = self.nodes[0].generate(292)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        blocks = self.nodes[1].generate(292)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n \n         self.log.info(\"Make sure we can max retrive block at tip-288.\")\n         node.send_getdata_for_block(blocks[1])  # last block in valid range\n@@ -53,5 +72,48 @@ def run_test(self):\n         node.send_getdata_for_block(blocks[0])  # first block outside of the 288+2 limit\n         node.wait_for_disconnect(5)\n \n+        self.log.info(\"Check local address relay, do a fresh connection.\")\n+        self.nodes[0].disconnect_p2ps()\n+        network_thread_join()\n+        node1 = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n+        network_thread_start()\n+        node1.wait_for_verack()\n+        node1.send_message(msg_verack())\n+\n+        node1.wait_for_addr()\n+        #must relay address with NODE_NETWORK_LIMITED\n+        assert_equal(node1.firstAddrnServices, 1036)\n+\n+        self.nodes[0].disconnect_p2ps()\n+        node1.wait_for_disconnect()\n+\n+        # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n+        # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible\n+        connect_nodes_bi(self.nodes, 0, 2)\n+        try:\n+            sync_blocks([self.nodes[0], self.nodes[2]], timeout=5)\n+        except:\n+            pass\n+        # node2 must remain at heigh 0\n+        assert_equal(self.nodes[2].getblockheader(self.nodes[2].getbestblockhash())['height'], 0)\n+\n+        # now connect also to node 1 (non pruned)\n+        connect_nodes_bi(self.nodes, 1, 2)\n+\n+        # sync must be possible\n+        sync_blocks(self.nodes)\n+\n+        # disconnect all peers\n+        self.disconnect_all()\n+\n+        # mine 10 blocks on node 0 (pruned node)\n+        self.nodes[0].generate(10)\n+\n+        # connect node1 (non pruned) with node0 (pruned) and check if the can sync\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        # sync must be possible, node 1 is no longer in IBD and should therefore connect to node 0 (NODE_NETWORK_LIMITED)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+\n if __name__ == '__main__':\n     NodeNetworkLimitedTest().main()"
      },
      {
        "sha": "e032be133750e5ac6bc3ca0da1d2fbe2d26e84db",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c2aff8d95a932f82a9472975b1d183da6c99e5f/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c2aff8d95a932f82a9472975b1d183da6c99e5f/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "patch": "@@ -186,19 +186,24 @@ def ToHex(obj):\n \n class CAddress():\n     def __init__(self):\n+        self.time = 0\n         self.nServices = 1\n         self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n-    def deserialize(self, f):\n+    def deserialize(self, f, with_time=True):\n+        if with_time:\n+            self.time = struct.unpack(\"<i\", f.read(4))[0]\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.pchReserved = f.read(12)\n         self.ip = socket.inet_ntoa(f.read(4))\n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n-    def serialize(self):\n+    def serialize(self, with_time=True):\n         r = b\"\"\n+        if with_time:\n+            r += struct.pack(\"<i\", self.time)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += self.pchReserved\n         r += socket.inet_aton(self.ip)\n@@ -856,11 +861,11 @@ def deserialize(self, f):\n         self.nServices = struct.unpack(\"<Q\", f.read(8))[0]\n         self.nTime = struct.unpack(\"<q\", f.read(8))[0]\n         self.addrTo = CAddress()\n-        self.addrTo.deserialize(f)\n+        self.addrTo.deserialize(f, False)\n \n         if self.nVersion >= 106:\n             self.addrFrom = CAddress()\n-            self.addrFrom.deserialize(f)\n+            self.addrFrom.deserialize(f, False)\n             self.nNonce = struct.unpack(\"<Q\", f.read(8))[0]\n             self.strSubVer = deser_string(f)\n         else:\n@@ -888,8 +893,8 @@ def serialize(self):\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += struct.pack(\"<q\", self.nTime)\n-        r += self.addrTo.serialize()\n-        r += self.addrFrom.serialize()\n+        r += self.addrTo.serialize(False)\n+        r += self.addrFrom.serialize(False)\n         r += struct.pack(\"<Q\", self.nNonce)\n         r += ser_string(self.strSubVer)\n         r += struct.pack(\"<i\", self.nStartingHeight)"
      }
    ]
  },
  {
    "sha": "987a80995a69578f0645eb107689fca908819729",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODdhODA5OTVhNjk1NzhmMDY0NWViMTA3Njg5ZmNhOTA4ODE5NzI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T17:27:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T18:01:52Z"
      },
      "message": "Merge #11882: Disable default fallbackfee on mainnet\n\n3f592b8 [QA] add wallet-rbf test (Jonas Schnelli)\n8222e05 Disable wallet fallbackfee by default on mainnet (Jonas Schnelli)\n\nPull request description:\n\n  Removes the default fallback fee on mainnet (but keeps it on testnet/regtest).\n\n  Transactions using the fallbackfee in case the fallback fee has not been set are getting rejected.\n\nTree-SHA512: e54d2594b7f954e640cc513a18b0bfbe189f15e15bdeed4fe02b7677f939bca1731fef781b073127ffd4ce08a595fb118259b8826cdaa077ff7d5ae9495810db",
      "tree": {
        "sha": "9e6e159cd9c0e43bd4c0a1fc797741bea5e42e8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e6e159cd9c0e43bd4c0a1fc797741bea5e42e8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/987a80995a69578f0645eb107689fca908819729",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJamEAQAAoJEB5K7WKYbNJdnVQH/j5JtyzbsGasC4/pOKuRLADI\nKTl2G7NeuqCMUA1K49RAD87UPnjIk2yuVn3V66Ww6a91quyfApv39TuY/A5eYEqR\ny6j/dI0fjOHqijk0hi8EhOmelpwJJlkgQ95dRhWtnUYBr2M8GcRwB6tivhNFnmDq\n01vWyoBp0zX7D4rnOwSzb6bHTWtxX+Q3Y7ll97D7pcmKVfn/p/s03s5vTwZeMb8n\nwYJlOQpOVbTm7tce6rITnTURzXMeQYUTjzZ43dfn7blheE2+6o+Fu66hIUMK972K\nRm57K45oENWT/HrL0f6Z5Lkxi19GVyTH4F21o7ASpwMecnvUQphwCeijxeaYP7I=\n=SCFs\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e6e159cd9c0e43bd4c0a1fc797741bea5e42e8a\nparent 5c2aff8d95a932f82a9472975b1d183da6c99e5f\nparent 3f592b81dcca3d2ef11403a623a6ba5b017567d7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519925228 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519927312 +0100\n\nMerge #11882: Disable default fallbackfee on mainnet\n\n3f592b8 [QA] add wallet-rbf test (Jonas Schnelli)\n8222e05 Disable wallet fallbackfee by default on mainnet (Jonas Schnelli)\n\nPull request description:\n\n  Removes the default fallback fee on mainnet (but keeps it on testnet/regtest).\n\n  Transactions using the fallbackfee in case the fallback fee has not been set are getting rejected.\n\nTree-SHA512: e54d2594b7f954e640cc513a18b0bfbe189f15e15bdeed4fe02b7677f939bca1731fef781b073127ffd4ce08a595fb118259b8826cdaa077ff7d5ae9495810db\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a80995a69578f0645eb107689fca908819729",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/987a80995a69578f0645eb107689fca908819729",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a80995a69578f0645eb107689fca908819729/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2aff8d95a932f82a9472975b1d183da6c99e5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2aff8d95a932f82a9472975b1d183da6c99e5f"
      },
      {
        "sha": "3f592b81dcca3d2ef11403a623a6ba5b017567d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f592b81dcca3d2ef11403a623a6ba5b017567d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f592b81dcca3d2ef11403a623a6ba5b017567d7"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c2b3480f9d41ed2db94c6363f20fc651a8db5577",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -175,6 +175,9 @@ class CMainParams : public CChainParams {\n                         //   (the tx=... number in the SetBestChain debug.log lines)\n             3.5         // * estimated number of transactions per second after that timestamp\n         };\n+\n+        /* disable fallback fee on mainnet */\n+        m_fallback_fee_enabled = false;\n     }\n };\n \n@@ -266,6 +269,8 @@ class CTestNetParams : public CChainParams {\n             0.09\n         };\n \n+        /* enable fallback fee on testnet */\n+        m_fallback_fee_enabled = true;\n     }\n };\n \n@@ -343,6 +348,9 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         bech32_hrp = \"bcrt\";\n+\n+        /* enable fallback fee on regtest */\n+        m_fallback_fee_enabled = true;\n     }\n };\n "
      },
      {
        "sha": "6b1f813afb47267ba10abf1ece3d5b2cd98246cf",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -65,6 +65,8 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n+    /** Return true if the fallback fee is by default enabled for this network */\n+    bool IsFallbackFeeEnabled() const { return m_fallback_fee_enabled; }\n     /** Return the list of hostnames to look up for DNS seeds */\n     const std::vector<std::string>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n@@ -91,6 +93,7 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n     CCheckpointData checkpointData;\n     ChainTxData chainTxData;\n+    bool m_fallback_fee_enabled;\n };\n \n /**"
      },
      {
        "sha": "0dc557e3a9187f11d9f3d2acd9ef6ff0af5e2aa0",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -158,6 +158,8 @@ void TestGUI()\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     bitdb.MakeMock();\n+    g_wallet_allow_fallback_fee = true;\n+\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));\n     bool firstRun;"
      },
      {
        "sha": "385fdc963a9a5973212cdafe3a8ca62c63d4f9b2",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -53,6 +53,9 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n             fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n+\n+            // directly return if fallback fee is disabled (feerate 0 == disabled)\n+            if (CWallet::fallbackFee.GetFee(1000) == 0) return fee_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n         CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);"
      },
      {
        "sha": "9ac48bff77c7ef8c1f15e284508e555a57a2773a",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <wallet/init.h>\n \n+#include <chainparams.h>\n #include <net.h>\n #include <util.h>\n #include <utilmoneystr.h>\n@@ -123,6 +124,8 @@ bool WalletParameterInteraction()\n                         _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         CWallet::minTxFee = CFeeRate(n);\n     }\n+\n+    g_wallet_allow_fallback_fee = Params().IsFallbackFeeEnabled();\n     if (gArgs.IsArgSet(\"-fallbackfee\"))\n     {\n         CAmount nFeePerK = 0;\n@@ -132,6 +135,7 @@ bool WalletParameterInteraction()\n             InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n                         _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         CWallet::fallbackFee = CFeeRate(nFeePerK);\n+        g_wallet_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n     }\n     if (gArgs.IsArgSet(\"-discardfee\"))\n     {"
      },
      {
        "sha": "6ec5ca29ade1f0bfe545c18057fdae8d23b63782",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -11,6 +11,7 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n {\n     bitdb.MakeMock();\n+    g_wallet_allow_fallback_fee = true;\n \n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;"
      },
      {
        "sha": "af07be311ef540c80abb6e0787731cb47b450267",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -43,6 +43,7 @@ bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n+bool g_wallet_allow_fallback_fee = false; //<! will be defined via chainparams\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n@@ -2918,6 +2919,11 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                 }\n \n                 nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                if (feeCalc.reason == FeeReason::FALLBACK && !g_wallet_allow_fallback_fee) {\n+                    // eventually allow a fallback fee\n+                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                    return false;\n+                }\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee."
      },
      {
        "sha": "8d4b7018728e12fe1127f65ac0ef1fde9df3512a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -39,6 +39,7 @@ extern CFeeRate payTxFee;\n extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n extern bool fWalletRbf;\n+extern bool g_wallet_allow_fallback_fee;\n \n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n@@ -65,6 +66,7 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n+static const bool DEFAULT_WALLET_ALLOW_FALLBACKFEE = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n "
      },
      {
        "sha": "082191098efb25440cf2577e328e72ffd1786e60",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -126,6 +126,7 @@\n     'feature_cltv.py',\n     'rpc_uptime.py',\n     'wallet_resendwallettransactions.py',\n+    'wallet_fallbackfee.py',\n     'feature_minchainwork.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',"
      },
      {
        "sha": "e9cd052344033f318502d367a54b06cd48255868",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/987a80995a69578f0645eb107689fca908819729/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/987a80995a69578f0645eb107689fca908819729/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=987a80995a69578f0645eb107689fca908819729",
        "patch": "@@ -0,0 +1,28 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class WalletRBFTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.nodes[0].generate(101)\n+\n+        # sending a transaction without fee estimations must be possible by default on regtest\n+        self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+\n+        # test sending a tx with disabled fallback fee (must fail)\n+        self.restart_node(0, extra_args=[\"-fallbackfee=0\"])\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].fundrawtransaction(self.nodes[0].createrawtransaction([], {self.nodes[0].getnewaddress(): 1})))\n+        assert_raises_rpc_error(-4, \"Fee estimation failed\", lambda: self.nodes[0].sendfrom(\"\", self.nodes[0].getnewaddress(), 1))\n+        assert_raises_rpc_error(-6, \"Fee estimation failed\", lambda: self.nodes[0].sendmany(\"\", {self.nodes[0].getnewaddress(): 1}))\n+\n+if __name__ == '__main__':\n+    WalletRBFTest().main()"
      }
    ]
  },
  {
    "sha": "a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGE1ZmM3YzE3Y2Q2M2ZhZTM5ZGIzYjAxYjRiYzFiMGEzMmI2ZTFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T19:16:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T19:30:32Z"
      },
      "message": "Merge #12546: [docs] Minor improvements to Compatibility Notes\n\nb22c289 [docs] Minor improvements to Compatibility Notes (Randolf Richardson)\n\nPull request description:\n\n  Progressed from Windows Vista to Windows 7 for OS testing statement.\n\nTree-SHA512: b8027c3d284d6f7197b434f29fdff9da9b9b1daa2b05cd900eb6d216df4930d9cfa6280e23e9f493aa6bcc874cb32ea377034d64783f535986e8c069acf8319d",
      "tree": {
        "sha": "06d0364425ce31e765e676e0dbe4b90450971a55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06d0364425ce31e765e676e0dbe4b90450971a55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJamFTYAAoJEB5K7WKYbNJdE/kIALS+PpEg9S0wA+XHCz8lDBba\nJk8lZVHnCL8Gc3Q6xoRuNut77Z0N+CLJ6AXXyQ7AEfNPzfvgl+VaoN3uEHrgQPr2\nVZ+1YCOj0xl1lEKhcJnORKW5kaX1hg0QI30S8PX3lAA4R6D5TGt1Fw5YL2nbMHxG\ncvhU9OvynEGYqu8OU7jGMxnXa9x0ISHn2v6ZCuFjrfzlNf0NEuLGy0pHzcnlBV2P\n5NEMnttaSab5NodHBq5MNVeDINy8fLnToCT6f/PRHuip5GyCXDsU4h6DJuXFS5XO\ndZJAHHkXxfo3VHJnyj0qL93tnTk0loNA9lDU0GUbhzajycFX6G+7GdkmKd2ga5g=\n=+Dhf\n-----END PGP SIGNATURE-----",
        "payload": "tree 06d0364425ce31e765e676e0dbe4b90450971a55\nparent 987a80995a69578f0645eb107689fca908819729\nparent b22c289ae6ec81e64678e314b562b0d8a0a14809\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519931766 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519932632 +0100\n\nMerge #12546: [docs] Minor improvements to Compatibility Notes\n\nb22c289 [docs] Minor improvements to Compatibility Notes (Randolf Richardson)\n\nPull request description:\n\n  Progressed from Windows Vista to Windows 7 for OS testing statement.\n\nTree-SHA512: b8027c3d284d6f7197b434f29fdff9da9b9b1daa2b05cd900eb6d216df4930d9cfa6280e23e9f493aa6bcc874cb32ea377034d64783f535986e8c069acf8319d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "987a80995a69578f0645eb107689fca908819729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/987a80995a69578f0645eb107689fca908819729",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/987a80995a69578f0645eb107689fca908819729"
      },
      {
        "sha": "b22c289ae6ec81e64678e314b562b0d8a0a14809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22c289ae6ec81e64678e314b562b0d8a0a14809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22c289ae6ec81e64678e314b562b0d8a0a14809"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ac49dc790952deeb619d19f64b202911256c2a70",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
        "patch": "@@ -48,7 +48,7 @@ Compatibility\n ==============\n \n Bitcoin Core is extensively tested on multiple operating systems using\n-the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+the Linux kernel, macOS 10.8+, and Windows 7 and newer (Windows XP is not supported).\n \n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them."
      }
    ]
  },
  {
    "sha": "0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmMwOTVlZmQ4ZGQyNTc3MGFmMzk4Y2IyYjczY2Q2NWIzYmM5Zjg5",
    "commit": {
      "author": {
        "name": "Randolf Richardson",
        "email": "randolf@richardson.tw",
        "date": "2018-02-21T15:49:49Z"
      },
      "committer": {
        "name": "Randolf Richardson",
        "email": "randolf@richardson.tw",
        "date": "2018-03-01T19:43:44Z"
      },
      "message": "[qt] Improved \"custom fee\" explanation in tooltip",
      "tree": {
        "sha": "518136f9b46183cdf430e5fe95fa2547c8708295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/518136f9b46183cdf430e5fe95fa2547c8708295"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc095efd8dd25770af398cb2b73cd65b3bc9f89/comments",
    "author": {
      "login": "randolf",
      "id": 33541170,
      "node_id": "MDQ6VXNlcjMzNTQxMTcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33541170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randolf",
      "html_url": "https://github.com/randolf",
      "followers_url": "https://api.github.com/users/randolf/followers",
      "following_url": "https://api.github.com/users/randolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/randolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randolf/subscriptions",
      "organizations_url": "https://api.github.com/users/randolf/orgs",
      "repos_url": "https://api.github.com/users/randolf/repos",
      "events_url": "https://api.github.com/users/randolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randolf",
      "id": 33541170,
      "node_id": "MDQ6VXNlcjMzNTQxMTcw",
      "avatar_url": "https://avatars.githubusercontent.com/u/33541170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randolf",
      "html_url": "https://github.com/randolf",
      "followers_url": "https://api.github.com/users/randolf/followers",
      "following_url": "https://api.github.com/users/randolf/following{/other_user}",
      "gists_url": "https://api.github.com/users/randolf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randolf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randolf/subscriptions",
      "organizations_url": "https://api.github.com/users/randolf/orgs",
      "repos_url": "https://api.github.com/users/randolf/repos",
      "events_url": "https://api.github.com/users/randolf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randolf/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e117cfe45eee9169409e74a44ef4a866be25bc35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e117cfe45eee9169409e74a44ef4a866be25bc35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e117cfe45eee9169409e74a44ef4a866be25bc35"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6b31ddea9094e98497d66abe55cf408607306789",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bc095efd8dd25770af398cb2b73cd65b3bc9f89/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bc095efd8dd25770af398cb2b73cd65b3bc9f89/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
        "patch": "@@ -848,7 +848,9 @@\n                  <item>\n                   <widget class=\"QLabel\" name=\"labelCustomPerKilobyte\">\n                    <property name=\"toolTip\">\n-                    <string>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</string>\n+                    <string>Specify a custom fee per kB (1,000 bytes) of the transaction's virtual size.\n+\n+Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis per kB\" for a transaction size of 500 bytes (half of 1 kB) would ultimately yield a fee of only 50 satoshis.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>"
      }
    ]
  },
  {
    "sha": "87c4320dfc8eff46f13851ab8a1651a84d2301da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2M0MzIwZGZjOGVmZjQ2ZjEzODUxYWI4YTE2NTFhODRkMjMwMWRh",
    "commit": {
      "author": {
        "name": "Ken Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-03-01T19:49:08Z"
      },
      "committer": {
        "name": "Ken Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-03-01T19:49:08Z"
      },
      "message": "gitian-build.sh: fix signProg being recognized as two parameters",
      "tree": {
        "sha": "292634b418538393149be1e24bdd024d57f83cad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/292634b418538393149be1e24bdd024d57f83cad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87c4320dfc8eff46f13851ab8a1651a84d2301da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87c4320dfc8eff46f13851ab8a1651a84d2301da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87c4320dfc8eff46f13851ab8a1651a84d2301da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87c4320dfc8eff46f13851ab8a1651a84d2301da/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07090c5339436f856e79a8036d1c85deeb453803",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07090c5339436f856e79a8036d1c85deeb453803",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07090c5339436f856e79a8036d1c85deeb453803"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "94d6a89c7b22bff126edb1c0ca8e3c92be9cac02",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87c4320dfc8eff46f13851ab8a1651a84d2301da/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87c4320dfc8eff46f13851ab8a1651a84d2301da/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=87c4320dfc8eff46f13851ab8a1651a84d2301da",
        "patch": "@@ -77,7 +77,7 @@ while :; do\n         -S|--signer)\n \t    if [ -n \"$2\" ]\n \t    then\n-\t\tSIGNER=$2\n+\t\tSIGNER=\"$2\"\n \t\tshift\n \t    else\n \t\techo 'Error: \"--signer\" requires a non-empty argument.'\n@@ -190,7 +190,7 @@ fi\n # Get signer\n if [[ -n \"$1\" ]]\n then\n-    SIGNER=$1\n+    SIGNER=\"$1\"\n     shift\n fi\n \n@@ -203,7 +203,7 @@ then\n fi\n \n # Check that a signer is specified\n-if [[ $SIGNER == \"\" ]]\n+if [[ \"$SIGNER\" == \"\" ]]\n then\n     echo \"$scriptName: Missing signer.\"\n     echo \"Try $scriptName --help for more information\"\n@@ -272,7 +272,7 @@ then\n \t    echo \"Compiling ${VERSION} Linux\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/${VERSION}\n \tfi\n \t# Windows\n@@ -282,7 +282,7 @@ then\n \t    echo \"Compiling ${VERSION} Windows\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n \t    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n \t    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -293,7 +293,7 @@ then\n \t    echo \"Compiling ${VERSION} Mac OSX\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n \t    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -306,9 +306,9 @@ then\n             echo \"Committing ${VERSION} Unsigned Sigs\"\n             echo \"\"\n             pushd gitian.sigs\n-            git add ${VERSION}-linux/${SIGNER}\n-            git add ${VERSION}-win-unsigned/${SIGNER}\n-            git add ${VERSION}-osx-unsigned/${SIGNER}\n+            git add ${VERSION}-linux/\"${SIGNER}\"\n+            git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+            git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n             git commit -a -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n             popd\n         fi\n@@ -358,7 +358,7 @@ then\n \t    echo \"Signing ${VERSION} Windows\"\n \t    echo \"\"\n \t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n \t    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/${VERSION}\n \t    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -369,7 +369,7 @@ then\n \t    echo \"Signing ${VERSION} Mac OSX\"\n \t    echo \"\"\n \t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \t    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/${VERSION}/bitcoin-${VERSION}-osx.dmg\n \tfi\n \tpopd\n@@ -381,8 +381,8 @@ then\n             echo \"\"\n             echo \"Committing ${VERSION} Signed Sigs\"\n             echo \"\"\n-            git add ${VERSION}-win-signed/${SIGNER}\n-            git add ${VERSION}-osx-signed/${SIGNER}\n+            git add ${VERSION}-win-signed/\"${SIGNER}\"\n+            git add ${VERSION}-osx-signed/\"${SIGNER}\"\n             git commit -a -m \"Add ${VERSION} signed binary sigs for ${SIGNER}\"\n             popd\n         fi"
      }
    ]
  },
  {
    "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGEwYWVkNTExOTRhZDgyZGE4ZTAxMWI5NmY5NTYxYzY4NWU0MGI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T19:50:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-01T19:51:05Z"
      },
      "message": "Merge #12182: Remove useless string initializations\n\n19ac86e Remove useless string initialization. (Alin Rus)\n\nPull request description:\n\nTree-SHA512: 4273dd7e8ed083cc9d05fc70967465e405085b630c000f829648dd44dd0cfe2249f6af1498b02f54b4ca73833130b802488bae8eca0d4d0b803a6f0122b19e8f",
      "tree": {
        "sha": "422b2bb0699cdc1a8753441c47bd08cd5eaf0a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/422b2bb0699cdc1a8753441c47bd08cd5eaf0a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJamFmpAAoJEB5K7WKYbNJdbQwH/izG84x1DoPuuUH0Du/xTn+a\n28820OuOwOkWikJq5Ma7WvpXmZVhFEYNWjk7qKD1CXClO5ochsXm3ymKcUhxu/GX\nTN+P/T2p71CvK4xWkhxRgZpNvUC7XQVQCw9flQwVFMeXoimuco+K8VoJ4SfYMQKn\nWRXEW4c+EsMeTu442AA2erswSlCULq/l2lK/blx3zTfV3eW1ImJEUcvBB0qx3OEn\n1QA4n8tWtDTcjOTCSBNcnahm5UZchfMuImpxvwERfoeqw3pP5kspmz5MwyrSt/Cx\ntEvEddpyfJ6YyIk13R4e3d+8yCA668gqfVzcJ4NUC5zPl6VR5p/px5Us7eobAOE=\n=ksPB\n-----END PGP SIGNATURE-----",
        "payload": "tree 422b2bb0699cdc1a8753441c47bd08cd5eaf0a13\nparent a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f\nparent 19ac86e2063432fca1f21fd3ef9770e7bde5d0ff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1519933833 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1519933865 +0100\n\nMerge #12182: Remove useless string initializations\n\n19ac86e Remove useless string initialization. (Alin Rus)\n\nPull request description:\n\nTree-SHA512: 4273dd7e8ed083cc9d05fc70967465e405085b630c000f829648dd44dd0cfe2249f6af1498b02f54b4ca73833130b802488bae8eca0d4d0b803a6f0122b19e8f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4a5fc7c17cd63fae39db3b01b4bc1b0a32b6e1f"
      },
      {
        "sha": "19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19ac86e2063432fca1f21fd3ef9770e7bde5d0ff"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3ea3141d5e58acc79b8930cf1504dcfc6e0735c3",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a0aed51194ad82da8e011b96f9561c685e40b7/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a0aed51194ad82da8e011b96f9561c685e40b7/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=90a0aed51194ad82da8e011b96f9561c685e40b7",
        "patch": "@@ -139,7 +139,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     if (pszName[0] == 0)\n         return false;\n     int port = portDefault;\n-    std::string hostname = \"\";\n+    std::string hostname;\n     SplitHostPort(std::string(pszName), port, hostname);\n \n     std::vector<CNetAddr> vIP;"
      },
      {
        "sha": "8cba59dbbca050a74936657faaad54547a0a19b8",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a0aed51194ad82da8e011b96f9561c685e40b7/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a0aed51194ad82da8e011b96f9561c685e40b7/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=90a0aed51194ad82da8e011b96f9561c685e40b7",
        "patch": "@@ -90,7 +90,7 @@ static enum RetFormat ParseDataFormat(std::string& param, const std::string& str\n \n static std::string AvailableDataFormatsString()\n {\n-    std::string formats = \"\";\n+    std::string formats;\n     for (unsigned int i = 0; i < ARRAYLEN(rf_names); i++)\n         if (strlen(rf_names[i].name) > 0) {\n             formats.append(\".\");"
      },
      {
        "sha": "e03234060d8eb2a287b5b9f8fe64b5519981b7f4",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a0aed51194ad82da8e011b96f9561c685e40b7/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a0aed51194ad82da8e011b96f9561c685e40b7/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=90a0aed51194ad82da8e011b96f9561c685e40b7",
        "patch": "@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     ipv4Addr.s_addr = 0xa0b0c001;\n     \n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n-    std::string pszDest = \"\";\n+    std::string pszDest;\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default."
      },
      {
        "sha": "ebafe078f4b699795316ffb036851832901cd5f2",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a0aed51194ad82da8e011b96f9561c685e40b7/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a0aed51194ad82da8e011b96f9561c685e40b7/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=90a0aed51194ad82da8e011b96f9561c685e40b7",
        "patch": "@@ -127,7 +127,7 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n-    std::string strRet = \"\";\n+    std::string strRet;\n     strRet.reserve((len+2)/3*4);\n \n     int mode=0, left=0;\n@@ -267,7 +267,7 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n     static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n-    std::string strRet=\"\";\n+    std::string strRet;\n     strRet.reserve((len+4)/5*8);\n \n     int mode=0, left=0;"
      },
      {
        "sha": "930e8bbbb4e222246ae1d4e28ff817b8d708f76b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90a0aed51194ad82da8e011b96f9561c685e40b7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90a0aed51194ad82da8e011b96f9561c685e40b7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=90a0aed51194ad82da8e011b96f9561c685e40b7",
        "patch": "@@ -279,7 +279,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n         );\n \n \n-    std::string strLabel = \"\";\n+    std::string strLabel;\n     if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n \n@@ -452,7 +452,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n         );\n \n \n-    std::string strLabel = \"\";\n+    std::string strLabel;\n     if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n "
      }
    ]
  },
  {
    "sha": "ee041196fce27b384b09e4556bceaac20ffd8deb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTA0MTE5NmZjZTI3YjM4NGIwOWU0NTU2YmNlYWFjMjBmZmQ4ZGVi",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2018-03-01T20:55:01Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2018-03-01T21:27:13Z"
      },
      "message": "Show a transaction's virtual size in its details dialog.",
      "tree": {
        "sha": "7d6fe275486fc7c9e35eafe44e612873241ed703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d6fe275486fc7c9e35eafe44e612873241ed703"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee041196fce27b384b09e4556bceaac20ffd8deb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee041196fce27b384b09e4556bceaac20ffd8deb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee041196fce27b384b09e4556bceaac20ffd8deb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee041196fce27b384b09e4556bceaac20ffd8deb/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f30e563277d1c69ac2134bcd4cb0a5b3411c809",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee041196fce27b384b09e4556bceaac20ffd8deb/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee041196fce27b384b09e4556bceaac20ffd8deb/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ee041196fce27b384b09e4556bceaac20ffd8deb",
        "patch": "@@ -17,6 +17,7 @@\n #include <util.h>\n #include <wallet/db.h>\n #include <wallet/wallet.h>\n+#include <policy/policy.h>\n \n #include <stdint.h>\n #include <string>\n@@ -241,6 +242,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxID() + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n+    strHTML += \"<b>\" + tr(\"Transaction virtual size\") + \":</b> \" + QString::number(GetVirtualTransactionSize(*wtx.tx)) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)"
      }
    ]
  },
  {
    "sha": "7ba2d5785251c90c5fea134917a4f53a3f632b9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmEyZDU3ODUyNTFjOTBjNWZlYTEzNDkxN2E0ZjUzYTNmNjMyYjlh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-02T19:50:49Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-02T19:50:49Z"
      },
      "message": "Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee\n\nNew global variables were introduced in #11882 and not setting them causes:\n\n    wallet/test/wallet_tests.cpp(638): error in \"ListCoins\": check wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy) failed\n    wallet/test/wallet_tests.cpp(679): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n    wallet/test/wallet_tests.cpp(686): error in \"ListCoins\": check available.size() == 2 failed [1 != 2]\n    wallet/test/wallet_tests.cpp(705): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n\nIt's possible to reproduce the failure reliably by running:\n\n    src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ListCoins\n\nFailures happen nondeterministically because boost test framework doesn't run\ntests in a specified order, and tests that run previously can set the global\nvariables and mask the bug.",
      "tree": {
        "sha": "a3f50ec81e0f8eeb814dc1f588f43c774a480cc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3f50ec81e0f8eeb814dc1f588f43c774a480cc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ba2d5785251c90c5fea134917a4f53a3f632b9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba2d5785251c90c5fea134917a4f53a3f632b9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba2d5785251c90c5fea134917a4f53a3f632b9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba2d5785251c90c5fea134917a4f53a3f632b9a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cd49292138aef7d0a8a007e56fc53c0db0128675",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "patch": "@@ -158,8 +158,6 @@ void TestGUI()\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     bitdb.MakeMock();\n-    g_wallet_allow_fallback_fee = true;\n-\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));\n     bool firstRun;"
      },
      {
        "sha": "18abf9a9db34d6782ea294cf4b583d955d5fd0a8",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "patch": "@@ -11,8 +11,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n {\n     bitdb.MakeMock();\n-    g_wallet_allow_fallback_fee = true;\n-\n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;\n     g_change_type = OUTPUT_TYPE_DEFAULT;"
      },
      {
        "sha": "bb7be2df337d2f03a999e123a3b563a998031af8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "patch": "@@ -43,7 +43,7 @@ bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n-bool g_wallet_allow_fallback_fee = false; //<! will be defined via chainparams\n+bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;"
      },
      {
        "sha": "4db45f16ef51751a5cc1d73de1738a7f34eb96b6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ba2d5785251c90c5fea134917a4f53a3f632b9a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "patch": "@@ -66,7 +66,6 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n-static const bool DEFAULT_WALLET_ALLOW_FALLBACKFEE = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n "
      }
    ]
  },
  {
    "sha": "a9761cae1c108c143215491af40a3578966116ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTc2MWNhZTFjMTA4YzE0MzIxNTQ5MWFmNDBhMzU3ODk2NjExNmFk",
    "commit": {
      "author": {
        "name": "Dimitris Apostolou",
        "email": "dimitris.apostolou@icloud.com",
        "date": "2018-03-02T21:00:25Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-03-02T21:00:25Z"
      },
      "message": "Fix typos and cleanup\n\n[ci-skip]",
      "tree": {
        "sha": "3df6916b4f6e5139b28a9d4a289d1a594a449d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3df6916b4f6e5139b28a9d4a289d1a594a449d51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9761cae1c108c143215491af40a3578966116ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJambtpCRBK7hj4Ov3rIwAAdHIIAF9UenvUZJNzOFyV+aP5gD40\n8PVTui6qurdbnYegwmF0yQgOcxvRU6MMAfnELJ2mzUd+qzvQ4hGklrscYEPta+yz\nF45gTFZSXbBaV5n/X/7YuEuSP/AGs1M8NJSIDRkB9pYJ4BGSQMyASB8B3qwrE6Zi\nh+Z13vbWnbVnAaG8auDvEvVsaw5xP2MqzHk7iagTzZisHVAaBt8BP69KfhpCAXvv\ntqiS1FtOo0QON8YUCE3by2BFQaVRYkTYKzIx3Vs0i87JewzV5FgnKkkQFwnH+aXg\n6phTZVlc2Ra1R9VsTg/lYHk4vHreUsiwUgecXCYyrkMr9tceTGPJ95UqL3QXhbQ=\n=2JV9\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 3df6916b4f6e5139b28a9d4a289d1a594a449d51\nparent 90a0aed51194ad82da8e011b96f9561c685e40b7\nauthor Dimitris Apostolou <dimitris.apostolou@icloud.com> 1520024425 +0200\ncommitter GitHub <noreply@github.com> 1520024425 +0200\n\nFix typos and cleanup\n\n[ci-skip]\r\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9761cae1c108c143215491af40a3578966116ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9761cae1c108c143215491af40a3578966116ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9761cae1c108c143215491af40a3578966116ad/comments",
    "author": {
      "login": "rex4539",
      "id": 227442,
      "node_id": "MDQ6VXNlcjIyNzQ0Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/227442?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rex4539",
      "html_url": "https://github.com/rex4539",
      "followers_url": "https://api.github.com/users/rex4539/followers",
      "following_url": "https://api.github.com/users/rex4539/following{/other_user}",
      "gists_url": "https://api.github.com/users/rex4539/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rex4539/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rex4539/subscriptions",
      "organizations_url": "https://api.github.com/users/rex4539/orgs",
      "repos_url": "https://api.github.com/users/rex4539/repos",
      "events_url": "https://api.github.com/users/rex4539/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rex4539/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "975be4be9ed63d2c203b79ccf5a02ce82ceb8ad0",
        "filename": "doc/README_osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9761cae1c108c143215491af40a3578966116ad/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9761cae1c108c143215491af40a3578966116ad/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=a9761cae1c108c143215491af40a3578966116ad",
        "patch": "@@ -1,4 +1,4 @@\n-Deterministic OS X Dmg Notes.\n+Deterministic OS X DMG Notes.\n \n Working OS X DMGs are created in Linux by combining a recent clang,\n the Apple binutils (ld, ar, etc) and DMG authoring tools."
      },
      {
        "sha": "7010edfcd38f2fa1eff002c0f952e6702515195d",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9761cae1c108c143215491af40a3578966116ad/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9761cae1c108c143215491af40a3578966116ad/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=a9761cae1c108c143215491af40a3578966116ad",
        "patch": "@@ -45,7 +45,7 @@ Only supports JSON as output format.\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n-* pruneheight : (numeric) heighest block available\n+* pruneheight : (numeric) highest block available\n * softforks : (array) status of softforks in progress\n * bip9_softforks : (object) status of BIP9 softforks in progress\n "
      },
      {
        "sha": "5a9c59914e3fb302121a81d382477b8ed82ba4e2",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9761cae1c108c143215491af40a3578966116ad/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9761cae1c108c143215491af40a3578966116ad/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=a9761cae1c108c143215491af40a3578966116ad",
        "patch": "@@ -52,7 +52,7 @@ The client it used to fetch updated translations. If you are having problems, or\n \n `pip install transifex-client`\n \n-Setup your transifex client config as follows. Please *ignore the token field*.\n+Setup your Transifex client config as follows. Please *ignore the token field*.\n \n ```ini\n nano ~/.transifexrc"
      },
      {
        "sha": "5d67df9d22117513c21580f7559d00517b3dcc82",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9761cae1c108c143215491af40a3578966116ad/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9761cae1c108c143215491af40a3578966116ad/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=a9761cae1c108c143215491af40a3578966116ad",
        "patch": "@@ -101,6 +101,6 @@ and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n \n There are several possibilities that ZMQ notification can get lost\n-during transmission depending on the communication type your are\n+during transmission depending on the communication type you are\n using. Bitcoind appends an up-counting sequence number to each\n notification which allows listeners to detect lost notifications."
      }
    ]
  },
  {
    "sha": "6058766de4b717aed7137b70f9384f35231739d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDU4NzY2ZGU0YjcxN2FlZDcxMzdiNzBmOTM4NGYzNTIzMTczOWQ5",
    "commit": {
      "author": {
        "name": "Micha\u0142 Zabielski",
        "email": "zabielski.michal@gmail.com",
        "date": "2018-03-03T05:05:53Z"
      },
      "committer": {
        "name": "Micha\u0142 Zabielski",
        "email": "zabielski.michal@gmail.com",
        "date": "2018-03-03T05:05:53Z"
      },
      "message": "Remove deprecated PyZMQ call from Python ZMQ example\n\nPyZMQ 17.0.0 has deprecated and removed zmq.asyncio.install() call\nwith advice to use asyncio native run-loop instead of zmq specific.\n\nThis caused exception when running the contrib/zmq/zmq_sub*.py examples.\n\nThis commit simply follows the advice.",
      "tree": {
        "sha": "22f0a3ca4d109d1d3a5026a89bc3ba2b5ca43265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22f0a3ca4d109d1d3a5026a89bc3ba2b5ca43265"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6058766de4b717aed7137b70f9384f35231739d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6058766de4b717aed7137b70f9384f35231739d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6058766de4b717aed7137b70f9384f35231739d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6058766de4b717aed7137b70f9384f35231739d9/comments",
    "author": {
      "login": "kosciej",
      "id": 3895770,
      "node_id": "MDQ6VXNlcjM4OTU3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3895770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kosciej",
      "html_url": "https://github.com/kosciej",
      "followers_url": "https://api.github.com/users/kosciej/followers",
      "following_url": "https://api.github.com/users/kosciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/kosciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kosciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kosciej/subscriptions",
      "organizations_url": "https://api.github.com/users/kosciej/orgs",
      "repos_url": "https://api.github.com/users/kosciej/repos",
      "events_url": "https://api.github.com/users/kosciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kosciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kosciej",
      "id": 3895770,
      "node_id": "MDQ6VXNlcjM4OTU3NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3895770?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kosciej",
      "html_url": "https://github.com/kosciej",
      "followers_url": "https://api.github.com/users/kosciej/followers",
      "following_url": "https://api.github.com/users/kosciej/following{/other_user}",
      "gists_url": "https://api.github.com/users/kosciej/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kosciej/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kosciej/subscriptions",
      "organizations_url": "https://api.github.com/users/kosciej/orgs",
      "repos_url": "https://api.github.com/users/kosciej/repos",
      "events_url": "https://api.github.com/users/kosciej/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kosciej/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "60768dc59a962934d85092c8b67b282ee0db1d6b",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6058766de4b717aed7137b70f9384f35231739d9/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6058766de4b717aed7137b70f9384f35231739d9/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=6058766de4b717aed7137b70f9384f35231739d9",
        "patch": "@@ -38,7 +38,7 @@\n \n class ZMQHandler():\n     def __init__(self):\n-        self.loop = zmq.asyncio.install()\n+        self.loop = asyncio.get_event_loop()\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)"
      },
      {
        "sha": "0df843c9a3f46c6ae146bc0d9975e79da0370537",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6058766de4b717aed7137b70f9384f35231739d9/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6058766de4b717aed7137b70f9384f35231739d9/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=6058766de4b717aed7137b70f9384f35231739d9",
        "patch": "@@ -42,7 +42,7 @@\n \n class ZMQHandler():\n     def __init__(self):\n-        self.loop = zmq.asyncio.install()\n+        self.loop = asyncio.get_event_loop()\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)"
      }
    ]
  },
  {
    "sha": "ded6a2afa549f693dcabb430ce0862f8631360c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWQ2YTJhZmE1NDlmNjkzZGNhYmI0MzBjZTA4NjJmODYzMTM2MGM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-03T14:24:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-03T14:24:55Z"
      },
      "message": "Merge #12584: Fix typos and cleanup documentation\n\na9761cae1c Fix typos and cleanup (Dimitris Apostolou)\n\nPull request description:\n\n  [ci-skip]\n\nTree-SHA512: 6d7e02d8fdf6add702bbfe4439ace9c8621b45d21111abc69d85be9120347b06a029bc1885665547c1230ebc41da9d97210f6d1325b7692a4585356969ecb127",
      "tree": {
        "sha": "3df6916b4f6e5139b28a9d4a289d1a594a449d51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3df6916b4f6e5139b28a9d4a289d1a594a449d51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ded6a2afa549f693dcabb430ce0862f8631360c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJamrA3AAoJENLqSFDnUoslYy4P/0XqUM4eVHaY/Ucj0DbAzo16\nyQfqJZBP8Si+9HEQtWHXnKdw8tBBUc+NH1Zb94VkiZtTNdnlFCBvn+9TL5RGeWSi\nRksVHcH5Ghv0q7kplKYBOwTLqEa3KepAqALTDr1Z1zJU/1/Dh9fIzgCedhBr4WZr\nR/mTbQXTkG8tVz7UuytUOzBYX9cwEEYiWWh/ALhD7GMhgYPDYXCjn6Ob7iMxFXIN\nHQYCysIA0NpDVDiTW9F+Wp9VaUZRY5qTZJabfShZ1T4OEcnTqJFZ94qvqjZEpiMw\nDQSi0iIYwA033vyQZb0IVti50GHu7X/3Thqb+WdjuWqouyCWQ1yFeAirTsMD2Bs1\nqu3UJMh7mHAQa/aMRjX6vSoJu7KhpoGavzVj7SbL8hqOZmaPR9A/gqM7SEjRaVt/\nYU0X+dM7caoVH0K63sFALEglePlG1+TZ4jk5yw7oHjiGatzhQXio0+3spzMDNebp\nel28YMpJQXqm7D/0MiHhGMZueRkWEduF51dvEqRrlkCaJBemrQUYaEFKegp3CK4G\n25juQ3YtOlJmTRQFdwRZ3I2MPUi4UBNS+ZR/e8d5da/SGGWjIFOFbtIwH7UV1mvV\nSU7EzmTW2h8cgPpLZvn0p0g2SIRGHjkZki1kT+kbcHBFHRC/YImWTce/kujs9kW0\nnAHEC0IxBYbEtWgZJ6u/\n=eNC8\n-----END PGP SIGNATURE-----",
        "payload": "tree 3df6916b4f6e5139b28a9d4a289d1a594a449d51\nparent 90a0aed51194ad82da8e011b96f9561c685e40b7\nparent a9761cae1c108c143215491af40a3578966116ad\nauthor MarcoFalke <falke.marco@gmail.com> 1520087068 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520087095 -0500\n\nMerge #12584: Fix typos and cleanup documentation\n\na9761cae1c Fix typos and cleanup (Dimitris Apostolou)\n\nPull request description:\n\n  [ci-skip]\n\nTree-SHA512: 6d7e02d8fdf6add702bbfe4439ace9c8621b45d21111abc69d85be9120347b06a029bc1885665547c1230ebc41da9d97210f6d1325b7692a4585356969ecb127\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded6a2afa549f693dcabb430ce0862f8631360c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ded6a2afa549f693dcabb430ce0862f8631360c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded6a2afa549f693dcabb430ce0862f8631360c8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90a0aed51194ad82da8e011b96f9561c685e40b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90a0aed51194ad82da8e011b96f9561c685e40b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90a0aed51194ad82da8e011b96f9561c685e40b7"
      },
      {
        "sha": "a9761cae1c108c143215491af40a3578966116ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9761cae1c108c143215491af40a3578966116ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9761cae1c108c143215491af40a3578966116ad"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "975be4be9ed63d2c203b79ccf5a02ce82ceb8ad0",
        "filename": "doc/README_osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/README_osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/README_osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.md?ref=ded6a2afa549f693dcabb430ce0862f8631360c8",
        "patch": "@@ -1,4 +1,4 @@\n-Deterministic OS X Dmg Notes.\n+Deterministic OS X DMG Notes.\n \n Working OS X DMGs are created in Linux by combining a recent clang,\n the Apple binutils (ld, ar, etc) and DMG authoring tools."
      },
      {
        "sha": "7010edfcd38f2fa1eff002c0f952e6702515195d",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=ded6a2afa549f693dcabb430ce0862f8631360c8",
        "patch": "@@ -45,7 +45,7 @@ Only supports JSON as output format.\n * verificationprogress : (numeric) estimate of verification progress [0..1]\n * chainwork : (string) total amount of work in active chain, in hexadecimal\n * pruned : (boolean) if the blocks are subject to pruning\n-* pruneheight : (numeric) heighest block available\n+* pruneheight : (numeric) highest block available\n * softforks : (array) status of softforks in progress\n * bip9_softforks : (object) status of BIP9 softforks in progress\n "
      },
      {
        "sha": "5a9c59914e3fb302121a81d382477b8ed82ba4e2",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=ded6a2afa549f693dcabb430ce0862f8631360c8",
        "patch": "@@ -52,7 +52,7 @@ The client it used to fetch updated translations. If you are having problems, or\n \n `pip install transifex-client`\n \n-Setup your transifex client config as follows. Please *ignore the token field*.\n+Setup your Transifex client config as follows. Please *ignore the token field*.\n \n ```ini\n nano ~/.transifexrc"
      },
      {
        "sha": "5d67df9d22117513c21580f7559d00517b3dcc82",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ded6a2afa549f693dcabb430ce0862f8631360c8/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=ded6a2afa549f693dcabb430ce0862f8631360c8",
        "patch": "@@ -101,6 +101,6 @@ and just the tip will be notified. It is up to the subscriber to\n retrieve the chain from the last known block to the new tip.\n \n There are several possibilities that ZMQ notification can get lost\n-during transmission depending on the communication type your are\n+during transmission depending on the communication type you are\n using. Bitcoind appends an up-counting sequence number to each\n notification which allows listeners to detect lost notifications."
      }
    ]
  },
  {
    "sha": "d8a99f65e53019becdd8d2631396012bafb29741",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGE5OWY2NWU1MzAxOWJlY2RkOGQyNjMxMzk2MDEyYmFmYjI5NzQx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-14T02:25:46Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Allow wallet files in multiple directories\n\nRemove requirement that two wallet files can only be opened at the same time if\nthey are contained in the same directory.\n\nThis change mostly consists of updates to function signatures (updating\nfunctions to take fs::path arguments, instead of combinations of strings,\nfs::path, and CDBEnv / CWalletDBWrapper arguments).",
      "tree": {
        "sha": "7e873886811beddc9bca0c21d21d3c6fc0d7ede3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e873886811beddc9bca0c21d21d3c6fc0d7ede3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8a99f65e53019becdd8d2631396012bafb29741",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a99f65e53019becdd8d2631396012bafb29741",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1"
      }
    ],
    "stats": {
      "total": 352,
      "additions": 201,
      "deletions": 151
    },
    "files": [
      {
        "sha": "98965840c7b95651e1066ba102810cf6d3ed8ca7",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -32,7 +32,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet;\n+    const CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     std::vector<COutput> vCoins;\n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "af4e36c04f66debac9164d62d4ab0fdbd6427021",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -157,9 +157,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    bitdb.MakeMock();\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    CWallet wallet(std::move(dbw));\n+    CWallet wallet(\"mock\", CWalletDBWrapper::CreateMock());\n     bool firstRun;\n     wallet.LoadWallet(firstRun);\n     {\n@@ -260,9 +258,6 @@ void TestGUI()\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n }\n \n }"
      },
      {
        "sha": "88463d10b2865d1ced82f57f396bd4593df7e33f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 30,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -52,20 +52,44 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n         }\n     }\n }\n+\n+CCriticalSection cs_db;\n+std::map<std::string, CDBEnv> g_dbenvs; //!< Map from directory name to open db environment.\n } // namespace\n \n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+{\n+    fs::path env_directory = wallet_path.parent_path();\n+    database_filename = wallet_path.filename().string();\n+    LOCK(cs_db);\n+    // Note: An ununsed temporary CDBEnv object may be created inside the\n+    // emplace function if the key already exists. This is a little inefficient,\n+    // but not a big concern since the map will be changed in the future to hold\n+    // pointers instead of objects, anyway.\n+    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+}\n+\n //\n // CDB\n //\n \n-CDBEnv bitdb;\n-\n-void CDBEnv::EnvShutdown()\n+void CDBEnv::Close()\n {\n     if (!fDbEnvInit)\n         return;\n \n     fDbEnvInit = false;\n+\n+    for (auto& db : mapDb) {\n+        auto count = mapFileUseCount.find(db.first);\n+        assert(count == mapFileUseCount.end() || count->second == 0);\n+        if (db.second) {\n+            db.second->close(0);\n+            delete db.second;\n+            db.second = nullptr;\n+        }\n+    }\n+\n     int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n@@ -80,29 +104,24 @@ void CDBEnv::Reset()\n     fMockDb = false;\n }\n \n-CDBEnv::CDBEnv()\n+CDBEnv::CDBEnv(const fs::path& dir_path) : strPath(dir_path.string())\n {\n     Reset();\n }\n \n CDBEnv::~CDBEnv()\n {\n-    EnvShutdown();\n+    Close();\n }\n \n-void CDBEnv::Close()\n-{\n-    EnvShutdown();\n-}\n-\n-bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n+bool CDBEnv::Open(bool retry)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n-    strPath = pathIn.string();\n+    fs::path pathIn = strPath;\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n@@ -150,7 +169,7 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n             // try opening it again one more time\n-            if (!Open(pathIn, false)) {\n+            if (!Open(false /* retry */)) {\n                 // if it still fails, it probably means we can't even create the database env\n                 return false;\n             }\n@@ -209,12 +228,15 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type\n         return RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(strFile, out_backup_filename);\n+    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool CDB::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n+    std::string filename;\n+    CDBEnv* env = GetWalletEnv(file_path, filename);\n+\n     // Recovery procedure:\n     // move wallet file to walletfilename.timestamp.bak\n     // Call Salvage with fAggressive=true to\n@@ -225,7 +247,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     int64_t now = GetTime();\n     newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = bitdb.dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n@@ -236,15 +258,15 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n \n     std::vector<CDBEnv::KeyValPair> salvagedData;\n-    bool fSuccess = bitdb.Salvage(newFilename, true, salvagedData);\n+    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n         return false;\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(bitdb.dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -257,7 +279,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n         return false;\n     }\n \n-    DbTxn* ptxn = bitdb.TxnBegin();\n+    DbTxn* ptxn = env->TxnBegin();\n     for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n@@ -279,8 +301,12 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n@@ -291,20 +317,24 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walle\n         return false;\n     }\n \n-    if (!bitdb.Open(walletDir, true)) {\n+    if (!env->Open(true /* retry */)) {\n         errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n         return false;\n     }\n \n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n-        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n+        CDBEnv::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n             warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n@@ -414,8 +444,8 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         nFlags |= DB_CREATE;\n \n     {\n-        LOCK(env->cs_db);\n-        if (!env->Open(GetWalletDir()))\n+        LOCK(cs_db);\n+        if (!env->Open(false /* retry */))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -442,7 +472,25 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n-            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n+\n+            // Call CheckUniqueFileid on the containing BDB environment to\n+            // avoid BDB data consistency bugs that happen when different data\n+            // files in the same environment have the same fileid.\n+            //\n+            // Also call CheckUniqueFileid on all the other g_dbenvs to prevent\n+            // bitcoin from opening the same data file through another\n+            // environment when the file is referenced through equivalent but\n+            // not obviously identical symlinked or hard linked or bind mounted\n+            // paths. In the future a more relaxed check for equal inode and\n+            // device ids could be done instead, which would allow opening\n+            // different backup copies of a wallet at the same time. Maybe even\n+            // more ideally, an exclusive lock for accessing the database could\n+            // be implemented, so no equality checks are needed at all. (Newer\n+            // versions of BDB have an set_lk_exclusive method for this\n+            // purpose, but the older version we use does not.)\n+            for (auto& env : g_dbenvs) {\n+                CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n+            }\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;\n@@ -490,7 +538,7 @@ void CDB::Close()\n         Flush();\n \n     {\n-        LOCK(env->cs_db);\n+        LOCK(cs_db);\n         --env->mapFileUseCount[strFile];\n     }\n }\n@@ -518,7 +566,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n     const std::string& strFile = dbw.strFile;\n     while (true) {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n@@ -646,7 +694,7 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n     bool ret = false;\n     CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n-    TRY_LOCK(bitdb.cs_db,lockDb);\n+    TRY_LOCK(cs_db, lockDb);\n     if (lockDb)\n     {\n         // Don't do this if any databases are in use\n@@ -694,7 +742,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n     while (true)\n     {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file"
      },
      {
        "sha": "b1ce451534565566c4129f423fe46b0b03ee595c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 38,
        "deletions": 17,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -11,6 +11,7 @@\n #include <serialize.h>\n #include <streams.h>\n #include <sync.h>\n+#include <util.h>\n #include <version.h>\n \n #include <atomic>\n@@ -32,20 +33,19 @@ class CDBEnv\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n-    void EnvShutdown();\n-\n public:\n-    mutable CCriticalSection cs_db;\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n-    CDBEnv();\n+    CDBEnv(const fs::path& env_directory);\n     ~CDBEnv();\n     void Reset();\n \n     void MakeMock();\n     bool IsMock() const { return fMockDb; }\n+    bool IsInitialized() const { return fDbEnvInit; }\n+    fs::path Directory() const { return strPath; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,\n@@ -56,7 +56,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const std::string& strFile, std::string& out_backup_filename);\n+    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n     VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n     /**\n      * Salvage data from a file that Verify says is bad.\n@@ -68,7 +68,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const fs::path& path, bool retry = 0);\n+    bool Open(bool retry);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -85,7 +85,8 @@ class CDBEnv\n     }\n };\n \n-extern CDBEnv bitdb;\n+/** Get CDBEnv and database filename given a wallet path. */\n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -100,9 +101,33 @@ class CWalletDBWrapper\n     }\n \n     /** Create DB handle to real database */\n-    CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n+    CWalletDBWrapper(const fs::path& wallet_path, bool mock = false) :\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n     {\n+        env = GetWalletEnv(wallet_path, strFile);\n+        if (mock) {\n+            env->Close();\n+            env->Reset();\n+            env->MakeMock();\n+        }\n+    }\n+\n+    /** Return object for accessing database at specified path. */\n+    static std::unique_ptr<CWalletDBWrapper> Create(const fs::path& path)\n+    {\n+        return MakeUnique<CWalletDBWrapper>(path);\n+    }\n+\n+    /** Return object for accessing dummy database with no read/write capabilities. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateDummy()\n+    {\n+        return MakeUnique<CWalletDBWrapper>();\n+    }\n+\n+    /** Return object for accessing temporary in-memory database. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateMock()\n+    {\n+        return MakeUnique<CWalletDBWrapper>(\"\", true /* mock */);\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n@@ -113,10 +138,6 @@ class CWalletDBWrapper\n      */\n     bool Backup(const std::string& strDest);\n \n-    /** Get a name for this database, for debugging etc.\n-     */\n-    std::string GetName() const { return strFile; }\n-\n     /** Make sure all changes are flushed to disk.\n      */\n     void Flush(bool shutdown);\n@@ -161,15 +182,15 @@ class CDB\n \n     void Flush();\n     void Close();\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>\n@@ -329,7 +350,7 @@ class CDB\n     {\n         if (!pdb || activeTxn)\n             return false;\n-        DbTxn* ptxn = bitdb.TxnBegin();\n+        DbTxn* ptxn = env->TxnBegin();\n         if (!ptxn)\n             return false;\n         activeTxn = ptxn;"
      },
      {
        "sha": "6e243c0a09073469ab545150277665581f5c93bd",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -249,21 +249,21 @@ bool VerifyWallets()\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(wallet_path, strError)) {\n             return InitError(strError);\n         }\n \n         if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n             // Recover readable keypairs:\n-            CWallet dummyWallet;\n+            CWallet dummyWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n             std::string backup_filename;\n-            if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n+            if (!CWalletDB::Recover(wallet_path, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n                 return false;\n             }\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(wallet_path, strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }\n@@ -284,7 +284,7 @@ bool OpenWallets()\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n+        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "17b8637a8b33a419580585a89d99c2c4801cb8e7",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -13,13 +13,13 @@\n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(CWallet *wallet, std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(wallet->ReorderTransactions() == DB_LOAD_OK);\n-    wallet->ListAccountCreditDebit(\"\", aes);\n+    BOOST_CHECK(wallet.ReorderTransactions() == DB_LOAD_OK);\n+    wallet.ListAccountCreditDebit(\"\", aes);\n     for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n@@ -33,28 +33,28 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     CAccountingEntry ae;\n     std::map<CAmount, CAccountingEntry> results;\n \n-    LOCK(pwalletMain->cs_wallet);\n+    LOCK(m_wallet.cs_wallet);\n \n     ae.strAccount = \"\";\n     ae.nCreditDebit = 1;\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(results[0].strComment.empty());\n@@ -65,13 +65,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    pwalletMain->AddAccountingEntry(ae);\n+    ae.nOrderPos = m_wallet.IncOrderPosNext();\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 4);\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n     BOOST_CHECK(results[2].nTime == 1333333336);\n@@ -85,8 +85,8 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n@@ -95,15 +95,15 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         --tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 6);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n@@ -116,12 +116,12 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 7);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);"
      },
      {
        "sha": "77ccd0b8d8d8eb12bbdfe08e209aacf44859e064",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -6,26 +6,21 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n+#include <wallet/wallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName)\n+    TestingSetup(chainName), m_wallet(\"mock\", CWalletDBWrapper::CreateMock())\n {\n-    bitdb.MakeMock();\n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;\n     g_change_type = OUTPUT_TYPE_DEFAULT;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n-    pwalletMain->LoadWallet(fFirstRun);\n-    RegisterValidationInterface(pwalletMain.get());\n+    m_wallet.LoadWallet(fFirstRun);\n+    RegisterValidationInterface(&m_wallet);\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n-    UnregisterValidationInterface(pwalletMain.get());\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n+    UnregisterValidationInterface(&m_wallet);\n }"
      },
      {
        "sha": "663836a95525cd0a267fe2a64c0e2c1aa79e3211",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -15,7 +15,7 @@ struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n \n-    std::unique_ptr<CWallet> pwalletMain;\n+    CWallet m_wallet;\n };\n \n #endif"
      },
      {
        "sha": "41348b50a4af2e8191f28ce46bc4f782c027f588",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 24,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -36,7 +36,7 @@ typedef std::set<CInputCoin> CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static const CWallet testWallet;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n static std::vector<COutput> vCoins;\n \n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n@@ -382,7 +382,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -397,7 +397,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -409,7 +409,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         vpwallets.insert(vpwallets.begin(), &wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -471,7 +471,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         LOCK(wallet.cs_wallet);\n         wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -486,7 +486,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -516,7 +516,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet;\n+    CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     CWalletTx wtx(&wallet, MakeTransactionRef(coinbaseTxns.back()));\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -562,27 +562,25 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n // expanded to cover more corner cases of smart time logic.\n BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n {\n-    CWallet wallet;\n-\n     // New transaction should use clock time if lower than block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 100, 120), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 100, 120), 100);\n \n     // Test that updating existing transaction does not change smart time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 200, 220), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 200, 220), 100);\n \n     // New transaction should use clock time if there's no block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 2, 300, 0), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 2, 300, 0), 300);\n \n     // New transaction should use block time if lower than clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 3, 420, 400), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 3, 420, 400), 400);\n \n     // New transaction should use latest entry time if higher than\n     // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 4, 500, 390), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 4, 500, 390), 400);\n \n     // If there are future entries, new transaction should use time of the\n     // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 5, 50, 600), 300);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);\n@@ -591,12 +589,12 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n-    LOCK(pwalletMain->cs_wallet);\n-    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n-    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n-    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n+    LOCK(m_wallet.cs_wallet);\n+    m_wallet.AddDestData(dest, \"misc\", \"val_misc\");\n+    m_wallet.AddDestData(dest, \"rr0\", \"val_rr0\");\n+    m_wallet.AddDestData(dest, \"rr1\", \"val_rr1\");\n \n-    auto values = pwalletMain->GetDestValues(\"rr\");\n+    auto values = m_wallet.GetDestValues(\"rr\");\n     BOOST_CHECK_EQUAL(values.size(), 2);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n@@ -608,10 +606,9 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        ::bitdb.MakeMock();\n         g_address_type = OUTPUT_TYPE_DEFAULT;\n         g_change_type = OUTPUT_TYPE_DEFAULT;\n-        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n+        wallet = MakeUnique<CWallet>(\"mock\", CWalletDBWrapper::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -623,8 +620,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ~ListCoinsTestingSetup()\n     {\n         wallet.reset();\n-        ::bitdb.Flush(true);\n-        ::bitdb.Reset();\n     }\n \n     CWalletTx& AddTx(CRecipient recipient)"
      },
      {
        "sha": "b1e2181ec7ca86c121fec722e66ba05c5afa474b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -3908,16 +3908,17 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n+    const std::string& walletFile = name;\n+\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(std::move(dbw));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, CWalletDBWrapper::Create(path));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3929,8 +3930,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    CWallet *walletInstance = new CWallet(name, CWalletDBWrapper::Create(path));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {"
      },
      {
        "sha": "76a411d81b53b450b8e45c258b94a52341e28a57",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -15,6 +15,7 @@\n #include <validationinterface.h>\n #include <script/ismine.h>\n #include <script/sign.h>\n+#include <util.h>\n #include <wallet/crypter.h>\n #include <wallet/walletdb.h>\n #include <wallet/rpcwallet.h>\n@@ -737,6 +738,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override;\n \n+    /**\n+     * Wallet filename from wallet=<path> command line or config option.\n+     * Used in debug logs and to send RPCs to the right wallet instance when\n+     * more than one wallet is loaded.\n+     */\n+    std::string m_name;\n+\n+    /** Internal database handle. */\n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n     /**\n@@ -768,14 +777,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    std::string GetName() const\n-    {\n-        if (dbw) {\n-            return dbw->GetName();\n-        } else {\n-            return \"dummy\";\n-        }\n-    }\n+    const std::string& GetName() const { return m_name; }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n@@ -789,14 +791,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    // Create wallet with dummy database handle\n-    CWallet(): dbw(new CWalletDBWrapper())\n-    {\n-        SetNull();\n-    }\n-\n-    // Create wallet with passed-in database handle\n-    explicit CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n+    /** Construct wallet with specified name and database implementation. */\n+    CWallet(std::string name, std::unique_ptr<CWalletDBWrapper> dbw) : m_name(std::move(name)), dbw(std::move(dbw))\n     {\n         SetNull();\n     }\n@@ -1116,7 +1112,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "46e4c12a7a2bafd997743fea21833a56b035d9e8",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -771,16 +771,16 @@ void MaybeCompactWalletDB()\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool CWalletDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n {\n-    return CDB::Recover(filename, callbackDataIn, recoverKVcallback, out_backup_filename);\n+    return CDB::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n }\n \n-bool CWalletDB::Recover(const std::string& filename, std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n {\n     // recover without a key filter callback\n     // results in recovering all record types\n-    return CWalletDB::Recover(filename, nullptr, nullptr, out_backup_filename);\n+    return CWalletDB::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n }\n \n bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n@@ -806,14 +806,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n+    return CDB::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(wallet_path, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "7d754c728405bfc0a694b55f57532b6b7a55db9a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8a99f65e53019becdd8d2631396012bafb29741/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d8a99f65e53019becdd8d2631396012bafb29741",
        "patch": "@@ -218,17 +218,17 @@ class CWalletDB\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n     /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const std::string& filename, std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n     /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n     static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmMwNmYyNGU1ZGNjMzJhNzU5OWFiYjhkNjcwZDIyOTkzYzgyYmMy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-14T18:32:41Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Allow wallet files not in -walletdir directory\n\nRemove restriction that -wallet filenames can only refer to files in the\n-walletdir directory.",
      "tree": {
        "sha": "e8d9e757900e0c0d019a4a0b04c8fdd06e51c5fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8d9e757900e0c0d019a4a0b04c8fdd06e51c5fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a99f65e53019becdd8d2631396012bafb29741",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a99f65e53019becdd8d2631396012bafb29741",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a99f65e53019becdd8d2631396012bafb29741"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 42,
      "deletions": 37
    },
    "files": [
      {
        "sha": "171880a77be33486da85fc27b76f55a49852cd34",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -63,6 +63,15 @@ RPC changes\n \n - The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n \n+External wallet files\n+---------------------\n+\n+The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n+to be located in the -walletdir directory. When wallets are located in\n+different directories, wallet data will be stored independently, so data from\n+every wallet is not mixed into the same <walletdir>/database/log.??????????\n+files.\n+\n Credits\n =======\n "
      },
      {
        "sha": "fedfcc4f1064856cf1c8bd3b44ff855ab3ca8bda",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -46,7 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n-    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n+    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\"));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n     strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n "
      },
      {
        "sha": "0ef3b7e926fb47666ecf462767f6f2334650da54",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -122,6 +122,7 @@ bool CDBEnv::Open(bool retry)\n     boost::this_thread::interruption_point();\n \n     fs::path pathIn = strPath;\n+    TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;"
      },
      {
        "sha": "11fd067b4b4556a05dc11e21250c8ae5522537c0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -35,7 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist.\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n@@ -230,14 +230,6 @@ bool VerifyWallets()\n     std::set<fs::path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        if (boost::filesystem::path(walletFile).filename() != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet parameter must only specify a filename (not a path).\"), walletFile));\n-        }\n-\n-        if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n-        }\n-\n         fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n \n         if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {"
      },
      {
        "sha": "871fc1a1519922de9289e04dd9837278f1fe287a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 30,
        "deletions": 27,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26c06f24e5dcc32a7599abb8d670d22993c82bc2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26c06f24e5dcc32a7599abb8d670d22993c82bc2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "patch": "@@ -16,7 +16,6 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w'], []]\n         self.supports_cli = True\n \n     def run_test(self):\n@@ -26,9 +25,28 @@ def run_test(self):\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n-        assert_equal(set(node.listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n-\n+        # check wallet.dat is created\n         self.stop_nodes()\n+        assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n+\n+        # restart node with a mix of wallet names:\n+        #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n+        #   w          - to verify wallet name matching works when one wallet path is prefix of another\n+        #   sub/w5     - to verify relative wallet path is created correctly\n+        #   extern/w6  - to verify absolute wallet path is created correctly\n+        #   wallet.dat - to verify existing wallet file is loaded correctly\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'wallet.dat']\n+        extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n+        self.start_node(0, extra_args)\n+        assert_equal(set(node.listwallets()), set(wallet_names))\n+\n+        # check that all requested wallets were created\n+        self.stop_node(0)\n+        for wallet_name in wallet_names:\n+            assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+\n+        # should not initialize if wallet path can't be created\n+        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'File exists')\n \n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -77,40 +95,25 @@ def run_test(self):\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n         self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n-        self.restart_node(0, self.extra_args[0])\n+        self.restart_node(0, extra_args)\n \n-        w1 = wallet(\"w1\")\n-        w2 = wallet(\"w2\")\n-        w3 = wallet(\"w3\")\n-        w4 = wallet(\"w\")\n+        wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n \n-        w1.generate(1)\n+        # check wallet names and balances\n+        wallets[0].generate(1)\n+        for wallet_name, wallet in zip(wallet_names, wallets):\n+            info = wallet.getwalletinfo()\n+            assert_equal(info['immature_balance'], 50 if wallet is wallets[0] else 0)\n+            assert_equal(info['walletname'], wallet_name)\n \n         # accessing invalid wallet fails\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n-        # check w1 wallet balance\n-        w1_info = w1.getwalletinfo()\n-        assert_equal(w1_info['immature_balance'], 50)\n-        w1_name = w1_info['walletname']\n-        assert_equal(w1_name, \"w1\")\n-\n-        # check w2 wallet balance\n-        w2_info = w2.getwalletinfo()\n-        assert_equal(w2_info['immature_balance'], 0)\n-        w2_name = w2_info['walletname']\n-        assert_equal(w2_name, \"w2\")\n-\n-        w3_name = w3.getwalletinfo()['walletname']\n-        assert_equal(w3_name, \"w3\")\n-\n-        w4_name = w4.getwalletinfo()['walletname']\n-        assert_equal(w4_name, \"w\")\n-\n+        w1, w2, w3, w4, *_ = wallets\n         w1.generate(101)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)"
      }
    ]
  },
  {
    "sha": "6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDEyZjFjYWY3NDRhYzliNTMzODNkN2QxMGE4ZjFiNzBjYTJjMGUx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-03T15:26:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Merge #12582: Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee\n\n7ba2d57852 Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee (Russell Yanofsky)\n\nPull request description:\n\n  New global variable was introduced in #11882 and not setting it causes:\n\n  ```\n  wallet/test/wallet_tests.cpp(638): error in \"ListCoins\": check wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy) failed\n  wallet/test/wallet_tests.cpp(679): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n  wallet/test/wallet_tests.cpp(686): error in \"ListCoins\": check available.size() == 2 failed [1 != 2]\n  wallet/test/wallet_tests.cpp(705): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ListCoins\n  ```\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bugs #12150 and #12424. Example travis failures are:\n\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348296805#L2676\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348362560#L2769\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348362563#L2824\n\nTree-SHA512: ca37b554a75c12ac2d534de62bf74eb9e0b29e4399ebf1fa10053a40887e55e9e7135f754a01e5a67499cc8677ae226542146b370b1e83d08bb63d79ff379073",
      "tree": {
        "sha": "adb37789de58d15727ab81ff14dc64763f2ab5a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/adb37789de58d15727ab81ff14dc64763f2ab5a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJamr6/AAoJENLqSFDnUoslZ0oP/3eKoAlIN1UN/p4CWZjxljox\nRY3uuij93MS21L0aKdfeDxqpMBjiFf18OrkKM1DICaMOQTYEJfeHS/XNRudj84b7\n51XOeNBFnCUS6cJ4vpUvUCRtY8RooQyLla8LkUakjSm+qFoh20TS+s3+m2IU0s5P\ngbpOb4cqBTynnJK3TP6OKqX0D+dUPMnGYEo2P9ZdKYywkq2658qRE2dUKgPjU1wy\nmNpnFnNPKSWV7uGFZFLdtmkUmxgYhJ7gVG5VmCgULiFHFuqgCbHjCzC6Qyi1C3iT\nH6uHnNBUDdTkUXt+qE3WLywuPczzMJUS5EeeEM1hTKIbfAz3a4t7vDaN0ykz7Orx\nYNx/+C10oArCXnAfUyczPz9jLlx5a3GwLDJK1KX3k0TEOk82PRM/IVypjI6rxo+f\nD9erMOabpEOz6BlY0xhs+K433cCX5X+32J2i4FFEEHUYVek2xHINNq4Fs08etWl/\nHdFjStndd4B817OMZ3giDQhwPuoU+Rm4rHevw2+Xn2Oem7RhWKAiZnVXrxzI/D6d\naOyyIhF+5Ehzc9WlnNpSqqk57+gus6Rr5zbns9nYM2HaqXQWZ+vSMAOCDj0kOGSs\n/tgJQ9TKK7ZtwT4hAhCTOrFCk6z3aiwt3kW+QZEg+5sX6BXq4X8t0agiHyFP0M7T\nNE2Rxf2MKOJtREKwY6jn\n=zYPr\n-----END PGP SIGNATURE-----",
        "payload": "tree adb37789de58d15727ab81ff14dc64763f2ab5a5\nparent ded6a2afa549f693dcabb430ce0862f8631360c8\nparent 7ba2d5785251c90c5fea134917a4f53a3f632b9a\nauthor MarcoFalke <falke.marco@gmail.com> 1520090808 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520090815 -0500\n\nMerge #12582: Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee\n\n7ba2d57852 Fix ListCoins test failure due to unset g_wallet_allow_fallback_fee (Russell Yanofsky)\n\nPull request description:\n\n  New global variable was introduced in #11882 and not setting it causes:\n\n  ```\n  wallet/test/wallet_tests.cpp(638): error in \"ListCoins\": check wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy) failed\n  wallet/test/wallet_tests.cpp(679): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n  wallet/test/wallet_tests.cpp(686): error in \"ListCoins\": check available.size() == 2 failed [1 != 2]\n  wallet/test/wallet_tests.cpp(705): error in \"ListCoins\": check list.begin()->second.size() == 2 failed [1 != 2]\n  ```\n\n  It's possible to reproduce the failure reliably by running:\n\n  ```\n  src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ListCoins\n  ```\n  Failures happen nondeterministically because boost test framework doesn't run tests in a specified order, and tests that run previously can set the global variables and mask the bug.\n\n  This is similar to bugs #12150 and #12424. Example travis failures are:\n\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348296805#L2676\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348362560#L2769\n  https://travis-ci.org/bitcoin/bitcoin/jobs/348362563#L2824\n\nTree-SHA512: ca37b554a75c12ac2d534de62bf74eb9e0b29e4399ebf1fa10053a40887e55e9e7135f754a01e5a67499cc8677ae226542146b370b1e83d08bb63d79ff379073\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ded6a2afa549f693dcabb430ce0862f8631360c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ded6a2afa549f693dcabb430ce0862f8631360c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ded6a2afa549f693dcabb430ce0862f8631360c8"
      },
      {
        "sha": "7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ba2d5785251c90c5fea134917a4f53a3f632b9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ba2d5785251c90c5fea134917a4f53a3f632b9a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "cd49292138aef7d0a8a007e56fc53c0db0128675",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "patch": "@@ -158,8 +158,6 @@ void TestGUI()\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n     bitdb.MakeMock();\n-    g_wallet_allow_fallback_fee = true;\n-\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));\n     bool firstRun;"
      },
      {
        "sha": "18abf9a9db34d6782ea294cf4b583d955d5fd0a8",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "patch": "@@ -11,8 +11,6 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n     TestingSetup(chainName)\n {\n     bitdb.MakeMock();\n-    g_wallet_allow_fallback_fee = true;\n-\n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;\n     g_change_type = OUTPUT_TYPE_DEFAULT;"
      },
      {
        "sha": "bb7be2df337d2f03a999e123a3b563a998031af8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "patch": "@@ -43,7 +43,7 @@ bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fWalletRbf = DEFAULT_WALLET_RBF;\n OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n-bool g_wallet_allow_fallback_fee = false; //<! will be defined via chainparams\n+bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;"
      },
      {
        "sha": "4db45f16ef51751a5cc1d73de1738a7f34eb96b6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "patch": "@@ -66,7 +66,6 @@ static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n-static const bool DEFAULT_WALLET_ALLOW_FALLBACKFEE = true;\n \n extern const char * DEFAULT_WALLET_DAT;\n "
      }
    ]
  },
  {
    "sha": "be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZThhYjdkMDgyMjI4ZDA5Y2E1MjlkMWEwODczMGQ3ZDVhYWNiMGVk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-15T20:44:36Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-03-03T15:26:55Z"
      },
      "message": "Create new wallet databases as directories rather than files\n\nThis change should make it easier for users to make complete backups of wallets\nbecause they can now just back up the specified `-wallet=<path>` path directly,\ninstead of having to back up the specified path as well as the transaction log\ndirectory (for incompletely flushed wallets).\n\nAnother advantage of this change is that if two wallets are located in the same\ndirectory, they will now use their own BerkeleyDB environments instead using a\nshared environment. Using a shared environment makes it difficult to manage and\nback up wallets separately because transaction log files will contain a mix of\ndata from all wallets in the environment.",
      "tree": {
        "sha": "d1fc152627f6c6daf32034520d51abbb2701d9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1fc152627f6c6daf32034520d51abbb2701d9ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26c06f24e5dcc32a7599abb8d670d22993c82bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26c06f24e5dcc32a7599abb8d670d22993c82bc2"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 81,
      "deletions": 30
    },
    "files": [
      {
        "sha": "8fcd2a9163ed8b38729622168c37703bc1cf7135",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -67,10 +67,31 @@ External wallet files\n ---------------------\n \n The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n-to be located in the -walletdir directory. When wallets are located in\n-different directories, wallet data will be stored independently, so data from\n-every wallet is not mixed into the same <walletdir>/database/log.??????????\n-files.\n+to be located in the -walletdir directory.\n+\n+Newly created wallet format\n+---------------------------\n+\n+If `-wallet=<path>` is specified with a path that does not exist, it will now\n+create a wallet directory at the specified location (containing a wallet.dat\n+data file, a db.log file, and database/log.?????????? files) instead of just\n+creating a data file at the path and storing log files in the parent\n+directory. This should make backing up wallets more straightforward than\n+before because the specified wallet path can just be directly archived without\n+having to look in the parent directory for transaction log files.\n+\n+For backwards compatibility, wallet paths that are names of existing data files\n+in the `-walletdir` directory will continue to be accepted and interpreted the\n+same as before.\n+\n+Low-level RPC changes\n+---------------------\n+\n+- When bitcoin is not started with any `-wallet=<path>` options, the name of\n+  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n+  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n+  with any `-wallet=<path>` options, there is no change in behavior, and the\n+  name of any wallet is just its `<path>` string.\n \n Credits\n ======="
      },
      {
        "sha": "41f1e5786c9923b67cf6bbb78849cd2ccae7c0a2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -339,8 +339,8 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-    if (!walletName.empty()) {\n+    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n         char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n         if (encodedURI) {\n             endpoint = \"/wallet/\"+ std::string(encodedURI);"
      },
      {
        "sha": "ebe7b48da06463c5fa678af5da93beaa7533ffc6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -59,8 +59,19 @@ std::map<std::string, CDBEnv> g_dbenvs; //!< Map from directory name to open db\n \n CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n {\n-    fs::path env_directory = wallet_path.parent_path();\n-    database_filename = wallet_path.filename().string();\n+    fs::path env_directory;\n+    if (fs::is_regular_file(wallet_path)) {\n+        // Special case for backwards compatibility: if wallet path points to an\n+        // existing file, treat it as the path to a BDB data file in a parent\n+        // directory that also contains BDB log files.\n+        env_directory = wallet_path.parent_path();\n+        database_filename = wallet_path.filename().string();\n+    } else {\n+        // Normal case: Interpret wallet path as a directory path containing\n+        // data and log files.\n+        env_directory = wallet_path;\n+        database_filename = \"wallet.dat\";\n+    }\n     LOCK(cs_db);\n     // Note: An ununsed temporary CDBEnv object may be created inside the\n     // emplace function if the key already exists. This is a little inefficient,"
      },
      {
        "sha": "e028cf4210b6551d45b39f0ba0ca5216e665b215",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 5,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -35,7 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist.\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n@@ -66,7 +66,7 @@ bool WalletParameterInteraction()\n         return true;\n     }\n \n-    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    gArgs.SoftSetArg(\"-wallet\", \"\");\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n \n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n@@ -230,10 +230,22 @@ bool VerifyWallets()\n     std::set<fs::path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n+        // Do some checking on wallet path. It should be either a:\n+        //\n+        // 1. Path where a directory can be created.\n+        // 2. Path to an existing directory.\n+        // 3. Path to a symlink to a directory.\n+        // 4. For backwards compatibility, the name of a data file in -walletdir.\n         fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n-\n-        if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n+        fs::file_type path_type = fs::symlink_status(wallet_path).type();\n+        if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n+              (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n+              (path_type == fs::regular_file && fs::path(walletFile).filename() == walletFile))) {\n+            return InitError(strprintf(\n+                _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n+                  \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n+                  \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n+                walletFile, GetWalletDir()));\n         }\n \n         if (!wallet_paths.insert(wallet_path).second) {"
      },
      {
        "sha": "960c192640306b75a47562910e5639fe78b53c26",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -45,7 +45,6 @@ OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n-const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n /**"
      },
      {
        "sha": "3e2d1794d89fa186476afed518b7d074a95487c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -68,8 +68,6 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n-extern const char * DEFAULT_WALLET_DAT;\n-\n static const int64_t TIMESTAMP_MIN = 0;\n \n class CBlockIndex;"
      },
      {
        "sha": "c6cec0596b6b787a03bc6fde10b88fd2a6751a58",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -37,13 +37,13 @@ def run_test(self):\n         os.mkdir(new_data_dir)\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n-        assert os.path.isfile(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.isfile(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n \n if __name__ == '__main__':\n     ConfArgsTest().main()"
      },
      {
        "sha": "378c06ee595219a54ac8d1268528af7c3f799d54",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 22,
        "deletions": 12,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be8ab7d082228d09ca529d1a08730d7d5aacb0ed/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "patch": "@@ -29,24 +29,38 @@ def run_test(self):\n         self.stop_nodes()\n         assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n \n+        # create symlink to verify wallet directory path can be referenced\n+        # through symlink\n+        os.mkdir(wallet_dir('w7'))\n+        os.symlink('w7', wallet_dir('w7_symlink'))\n+\n+        # rename wallet.dat to make sure plain wallet file paths (as opposed to\n+        # directory paths) can be loaded\n+        os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n+\n         # restart node with a mix of wallet names:\n         #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n         #   w          - to verify wallet name matching works when one wallet path is prefix of another\n         #   sub/w5     - to verify relative wallet path is created correctly\n         #   extern/w6  - to verify absolute wallet path is created correctly\n-        #   wallet.dat - to verify existing wallet file is loaded correctly\n-        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'wallet.dat']\n+        #   w7_symlink - to verify symlinked wallet path is initialized correctly\n+        #   w8         - to verify existing wallet file is loaded correctly\n+        #   ''         - to verify default wallet file is created correctly\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n         # check that all requested wallets were created\n         self.stop_node(0)\n         for wallet_name in wallet_names:\n-            assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+            if os.path.isdir(wallet_dir(wallet_name)):\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name, \"wallet.dat\")), True)\n+            else:\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'File exists')\n+        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'Not a directory')\n \n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -55,17 +69,13 @@ def run_test(self):\n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n-        # should not initialize if wallet file is a directory\n-        os.mkdir(wallet_dir('w11'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n-\n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+        shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        os.symlink('w8', wallet_dir('w8_symlink'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8_symlink'], 'Invalid -wallet path')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')"
      }
    ]
  },
  {
    "sha": "5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjhjYzBkZjEyNmFiM2E0YmQ1YzYzZDMyZGVkZGI5NmRmNDhlNzg5",
    "commit": {
      "author": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-03-05T01:19:49Z"
      },
      "committer": {
        "name": "Richard Kiss",
        "email": "him@richardkiss.com",
        "date": "2018-03-05T01:24:43Z"
      },
      "message": "Add a test for large tx output scripts with segwit input.",
      "tree": {
        "sha": "5f28d4829642c48c6f6035fb71266fba53cab98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f28d4829642c48c6f6035fb71266fba53cab98b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cc0df126ab3a4bd5c63d32deddb96df48e789/comments",
    "author": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "richardkiss",
      "id": 5336,
      "node_id": "MDQ6VXNlcjUzMzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5336?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/richardkiss",
      "html_url": "https://github.com/richardkiss",
      "followers_url": "https://api.github.com/users/richardkiss/followers",
      "following_url": "https://api.github.com/users/richardkiss/following{/other_user}",
      "gists_url": "https://api.github.com/users/richardkiss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/richardkiss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/richardkiss/subscriptions",
      "organizations_url": "https://api.github.com/users/richardkiss/orgs",
      "repos_url": "https://api.github.com/users/richardkiss/repos",
      "events_url": "https://api.github.com/users/richardkiss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/richardkiss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e265916d1c6a63e4a3821dab9db597b5ec64b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e265916d1c6a63e4a3821dab9db597b5ec64b46"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0bcecc58feefd99554487d0b247fd78430dcd6d1",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f8cc0df126ab3a4bd5c63d32deddb96df48e789/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f8cc0df126ab3a4bd5c63d32deddb96df48e789/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
        "patch": "@@ -516,5 +516,9 @@\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n \"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n \n+[\"Test long outputs, which are streamed using length-prefixed bitcoin strings. This might be surprising.\"],\n+[[[\"1111111111111111111111111111111111111111111111111111111111111111\", 0, \"0x00 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\", 5000000]],\n+\"0100000000010111111111111111111111111111111111111111111111111111111111111111110000000000ffffffff0130244c0000000000fd02014cdc1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111175210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac02483045022100c1a4a6581996a7fdfea77d58d537955a5655c1d619b6f3ab6874f28bb2e19708022056402db6fede03caae045a3be616a1a2d0919a475ed4be828dc9ff21f24063aa01210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179800000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "480f42630cbd598c04fa59ee0e406f56904ecffb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODBmNDI2MzBjYmQ1OThjMDRmYTU5ZWUwZTQwNmY1NjkwNGVjZmZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-05T13:41:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-05T13:41:25Z"
      },
      "message": "Merge #12543: Fix typos\n\nd918eb7864 Fix typos (practicalswift)\n\nPull request description:\n\n  Fix typos.\n\nTree-SHA512: c790e49be6e01c8d70ebd872ef61cc210c1de15c4a1e5a98280169f32dc8a14cd68f4dd1c23afc76758b28ef355ab12ded2ff7504562dc9b69a11839ad3cd7e3",
      "tree": {
        "sha": "6434cbb885093d04963904084d42bd2ed8ac14aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6434cbb885093d04963904084d42bd2ed8ac14aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/480f42630cbd598c04fa59ee0e406f56904ecffb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJanUkFAAoJENLqSFDnUoslYw0P/RCDfzm7WRWIdisZyXkurx9I\n5tPj6XE1OdAD+OVnlWe7FlPqoOBWzka12RKDn1zY1Y/vdp/RjQN9DEcCVXeVgCr6\n6ub6OnxcDti8u0jBReqv7jXutU4L/e9BIDmmIsX55gZsOiEUQH3etdMphD4FY2R7\neyKuJ8Q9VCHKeLmhudKqsAMLH5edNnr82YoZa4QvzlD729wSrgsOGnO5rxH6skes\nImZvGXbItyNUnWKrNRBOftPkcanVihox1hEr+eZQVce673GNH1OpqHB8ibkpuys5\nHk785xEB+ZS7Y3Xs6BwLDJvlu2XRLt3xSkfKGcVmKb+F/gmAXKrVZ8SW8QLVunK3\njbQs404Pg6e5iqpvv10TgaF2EMob7wVPlXR5B6RTOv3slQjFjEK0y9jYdKQO751r\nERc4ZnVhFTH7+4lU4G/w4D7tLFRhBOY+HQzk69L3EA2QdE1l4bkUrFDXK0drOj7d\nYyRlGovYqmUPLsz29+m5lAOTIcGQ5qU22bz1Wk70GbkV6zDrW8i4jiOwa0EpngHg\ni4MZXG/ktIIZcfav7u23lcC7SQcRYs4pDKl+kLaJRFRc/PtIn39kItMbQR7MqSo/\nfTmvQ5LnN5zoabZx0iyHQhUhlIgUhKTrHmrkX3UrQWPvDteQszVpz3NbLMKPdVJB\nV+mDiRP68zxMtf1gcH4o\n=QJL0\n-----END PGP SIGNATURE-----",
        "payload": "tree 6434cbb885093d04963904084d42bd2ed8ac14aa\nparent 6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1\nparent d918eb78645900cc79898787c32619f913264d0a\nauthor MarcoFalke <falke.marco@gmail.com> 1520257283 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520257285 -0500\n\nMerge #12543: Fix typos\n\nd918eb7864 Fix typos (practicalswift)\n\nPull request description:\n\n  Fix typos.\n\nTree-SHA512: c790e49be6e01c8d70ebd872ef61cc210c1de15c4a1e5a98280169f32dc8a14cd68f4dd1c23afc76758b28ef355ab12ded2ff7504562dc9b69a11839ad3cd7e3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480f42630cbd598c04fa59ee0e406f56904ecffb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/480f42630cbd598c04fa59ee0e406f56904ecffb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480f42630cbd598c04fa59ee0e406f56904ecffb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6012f1caf744ac9b53383d7d10a8f1b70ca2c0e1"
      },
      {
        "sha": "d918eb78645900cc79898787c32619f913264d0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d918eb78645900cc79898787c32619f913264d0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d918eb78645900cc79898787c32619f913264d0a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cff4ea93627a2b93e64dd7394f0dbad8e755c042",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480f42630cbd598c04fa59ee0e406f56904ecffb/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480f42630cbd598c04fa59ee0e406f56904ecffb/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=480f42630cbd598c04fa59ee0e406f56904ecffb",
        "patch": "@@ -35,7 +35,7 @@ To install WSL on Windows 10 with Fall Creators Update installed (version >= 162\n \n 1. Enable the Windows Subsystem for Linux feature\n   * Open the Windows Features dialog (`OptionalFeatures.exe`)\n-  * Enable 'Windows Susbsystem for Linux'\n+  * Enable 'Windows Subsystem for Linux'\n   * Click 'OK' and restart if necessary\n 2. Install Ubuntu\n   * Open Microsoft Store and search for Ubuntu or use [this link](https://www.microsoft.com/store/productId/9NBLGGH4MSV6)"
      },
      {
        "sha": "58f033cd891a3ad400e9573d3c0a02ace323b9fb",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480f42630cbd598c04fa59ee0e406f56904ecffb/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480f42630cbd598c04fa59ee0e406f56904ecffb/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=480f42630cbd598c04fa59ee0e406f56904ecffb",
        "patch": "@@ -754,7 +754,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n     thr.join();\n     BOOST_CHECK_EQUAL(threadresult, true);\n #ifndef WIN32\n-    // Try to aquire lock in child process while we're holding it, this should fail.\n+    // Try to acquire lock in child process while we're holding it, this should fail.\n     char ch;\n     BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n     BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n@@ -765,7 +765,7 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n     // Probing lock from our side now should succeed, but not hold on to the lock.\n     BOOST_CHECK_EQUAL(LockDirectory(dirname, lockname, true), true);\n \n-    // Try to acquire the lock in the child process, this should be succesful.\n+    // Try to acquire the lock in the child process, this should be successful.\n     BOOST_CHECK_EQUAL(write(fd[1], &LockCommand, 1), 1);\n     BOOST_CHECK_EQUAL(read(fd[1], &ch, 1), 1);\n     BOOST_CHECK_EQUAL((bool)ch, true);"
      },
      {
        "sha": "59eae78cbd94d151a5ce5ed9e0f60fda6d4d001e",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480f42630cbd598c04fa59ee0e406f56904ecffb/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480f42630cbd598c04fa59ee0e406f56904ecffb/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=480f42630cbd598c04fa59ee0e406f56904ecffb",
        "patch": "@@ -49,7 +49,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                     # count key types\n                     for addrObj in addrs:\n                         if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n-                            # a labled entry in the wallet should contain both a native address\n+                            # a labeled entry in the wallet should contain both a native address\n                             # and the p2sh-p2wpkh address that was added at wallet setup\n                             if len(addr.split(\",\")) == 2:\n                                 addr_list = addr.split(\",\")"
      }
    ]
  },
  {
    "sha": "ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTU2ZmRkMmU4Y2RmOTRmZDBhYjc2ZDcxYWRiZmE3NTVlMjNjZTdk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-05T15:41:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-05T15:41:26Z"
      },
      "message": "Merge #12580: Show a transaction's virtual size in its details dialog\n\nee041196fc Show a transaction's virtual size in its details dialog. (Chris Moore)\n\nPull request description:\n\n  #12501 looks like it is going to mention transaction's \"virtual size\" in the custom fee tooltip, so let's display the virtual size when the user double-clicks a transaction.\n\nTree-SHA512: c60ae23c9f86edfba086b840519941d8e8ee1be9da5987ffe6dee3255943ea5d215708ce57464f109a1d1c612c4c0eeb11f8f3e203d8a8cfc1f8ec753a8aac27",
      "tree": {
        "sha": "d8c4738a71a32aa1c4b90c84b95fc7fcdf5c379b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8c4738a71a32aa1c4b90c84b95fc7fcdf5c379b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJanWUmAAoJENLqSFDnUoslJI8P/0NGUB69ZOpbe62bCWe+AvJh\nKGaH+wejCO595/tKbM8EkWKvh07M2AQeUHo/c4YklRgRr1LUOQg0IHFyAI7BYu5/\nbZf1hlTy6YE2lajPi/apSN46wc/3XAijCaBdBB0zF2LGpTYF+uSnpjyNSq0qPxbW\nrSELUwAuYcv2PQ/vZldC76tZzOfZ1NO2mvMbzJafMQVdlKSbty7SOTF1tEuwEefj\nN92zQPYGa5iHLs2usb5acuu7Tw1xpJpKxuq6CrmVCfo+nffryIE6xHZ5OfgrJYwA\n7ecDqrDm/zK7WzC5aKL1mIgBDm7v7CdDoFC0iYm3oXwbu5u7xDv8EHak9Id2sU7X\nuXaLvEmQoTOzgX4/Xs+Av0x5uzmYbQ1qh1qR43q1rXnxTPF3aDu8Neat4XlOz3PC\ny+TKcAj+05kIH4D9Wlmx6BREPQTziX7x6dmaamCQtyvMr9uSm2PsuQHcQ477Ywkm\nnFX5/5BwtgoSkx8VR+/HX8YBW0VahN+Kmsn6zYyAbnEeM/sx7LuB7hvxdhlObvpP\nbjv30+gz6PWphos6uekYItc54olXaIiziAi3jgTTGvvPtH+NZAAPruFrPTeDw6dJ\nHJUFLIekx7xbggMgmTuapAD/S09x4nn7FPTtymSmUOW6P6LQSF12obGkQ5eCjQ9A\nhU8D9Ty5MirabmUQNQXP\n=SE12\n-----END PGP SIGNATURE-----",
        "payload": "tree d8c4738a71a32aa1c4b90c84b95fc7fcdf5c379b\nparent 480f42630cbd598c04fa59ee0e406f56904ecffb\nparent ee041196fce27b384b09e4556bceaac20ffd8deb\nauthor MarcoFalke <falke.marco@gmail.com> 1520264477 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520264486 -0500\n\nMerge #12580: Show a transaction's virtual size in its details dialog\n\nee041196fc Show a transaction's virtual size in its details dialog. (Chris Moore)\n\nPull request description:\n\n  #12501 looks like it is going to mention transaction's \"virtual size\" in the custom fee tooltip, so let's display the virtual size when the user double-clicks a transaction.\n\nTree-SHA512: c60ae23c9f86edfba086b840519941d8e8ee1be9da5987ffe6dee3255943ea5d215708ce57464f109a1d1c612c4c0eeb11f8f3e203d8a8cfc1f8ec753a8aac27\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480f42630cbd598c04fa59ee0e406f56904ecffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480f42630cbd598c04fa59ee0e406f56904ecffb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480f42630cbd598c04fa59ee0e406f56904ecffb"
      },
      {
        "sha": "ee041196fce27b384b09e4556bceaac20ffd8deb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee041196fce27b384b09e4556bceaac20ffd8deb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee041196fce27b384b09e4556bceaac20ffd8deb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f30e563277d1c69ac2134bcd4cb0a5b3411c809",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
        "patch": "@@ -17,6 +17,7 @@\n #include <util.h>\n #include <wallet/db.h>\n #include <wallet/wallet.h>\n+#include <policy/policy.h>\n \n #include <stdint.h>\n #include <string>\n@@ -241,6 +242,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n \n     strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxID() + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n+    strHTML += \"<b>\" + tr(\"Transaction virtual size\") + \":</b> \" + QString::number(GetVirtualTransactionSize(*wtx.tx)) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";\n \n     // Message from normal bitcoin:URI (bitcoin:123...?message=example)"
      }
    ]
  },
  {
    "sha": "07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2QyZDJhMjFjNTA4MDUwYmEwYmJlOWJhNTVkNTc1NmM5NmY4OTA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:31:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:32:42Z"
      },
      "message": "Merge #12475: qa: Fix python TypeError in script.py\n\nfa41d68a2 qa: Fix python TypeError in script.py (MarcoFalke)\n\nPull request description:\n\n  `__repr__` returns string, so don't mix it with byte strings.\n\n  This fixes\n\n  ```\n  TypeError: %b requires a bytes-like object, or an object that implements __bytes__, not 'str'\n\nTree-SHA512: fac06e083f245209bc8a36102217580b0f6186842f4e52a686225111b0b96ff93c301640ff5e7ddef6a5b4f1689071b16a9a8dc80f28e2b060ddee29edd24ec7",
      "tree": {
        "sha": "a01dc1db39da14546511c484d0e0e3c5255c3eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a01dc1db39da14546511c484d0e0e3c5255c3eab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanXEqAAoJEB5K7WKYbNJdM5MH/jpLZIRqjGV6jGjXl+qf8J3u\nvqkB4O70TAqq1JH1jeTehSh0rvoR9VRLLzCzny2m1+oYPBXDzTKeLY04On0TrqTI\nkrw9z5QIIUteSeiKb/Zg12XJ/wBBofT/uu1QWjagiZbJjs1GCKpfqEoN0gtwHw2k\nLvfofgcYmFg1TaxgiqVGuG9u0ykcHMUWr5BXq79OX4epDovjkXeopa+6p/wBzHS+\n6bNd0FyP39j4ylu/xIrd7OkWxJHBZeVrwPeoo3rLJZ2rcKaDhxMYt9WkTeFp+wDm\n1KWVJOIBFjVvRyJr8k4AsN38qu7kIMCWYS8ysDXHQWsKNUXUl1LkmSGnszCSZtM=\n=pKPY\n-----END PGP SIGNATURE-----",
        "payload": "tree a01dc1db39da14546511c484d0e0e3c5255c3eab\nparent ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d\nparent fa41d68a2e3f2148c3539a11b61ff835e3141c0d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520267508 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520267562 +0100\n\nMerge #12475: qa: Fix python TypeError in script.py\n\nfa41d68a2 qa: Fix python TypeError in script.py (MarcoFalke)\n\nPull request description:\n\n  `__repr__` returns string, so don't mix it with byte strings.\n\n  This fixes\n\n  ```\n  TypeError: %b requires a bytes-like object, or an object that implements __bytes__, not 'str'\n\nTree-SHA512: fac06e083f245209bc8a36102217580b0f6186842f4e52a686225111b0b96ff93c301640ff5e7ddef6a5b4f1689071b16a9a8dc80f28e2b060ddee29edd24ec7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07d2d2a21c508050ba0bbe9ba55d5756c96f8909/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce56fdd2e8cdf94fd0ab76d71adbfa755e23ce7d"
      },
      {
        "sha": "fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41d68a2e3f2148c3539a11b61ff835e3141c0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41d68a2e3f2148c3539a11b61ff835e3141c0d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6fe0b445da67c1c61425ca49f8a850b0146c3189",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07d2d2a21c508050ba0bbe9ba55d5756c96f8909/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07d2d2a21c508050ba0bbe9ba55d5756c96f8909/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
        "patch": "@@ -526,11 +526,9 @@ def __iter__(self):\n                     yield CScriptOp(opcode)\n \n     def __repr__(self):\n-        # For Python3 compatibility add b before strings so testcases don't\n-        # need to change\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return b\"x('%s')\" % hexlify(o).decode('ascii')\n+                return \"x('%s')\" % hexlify(o).decode('ascii')\n             else:\n                 return repr(o)\n "
      }
    ]
  },
  {
    "sha": "21e2670de3bcbcd41fd7655bfac042ab1ff36762",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWUyNjcwZGUzYmNiY2Q0MWZkNzY1NWJmYWMwNDJhYjFmZjM2NzYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:38:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:38:59Z"
      },
      "message": "Merge #12434: [doc] dev-notes: Members should be initialized\n\nfa9461473 [doc] dev-notes: Members should be initialized (MarcoFalke)\n\nPull request description:\n\n  Also, remove mention of threads that were removed long ago.\n\n  Motivation:\n  Make it easier to spot bugs such as #11654 and  #12426\n\nTree-SHA512: 8ca1cb54e830e9368803bd98a8b08c39bf2d46f079094ed7e070b32ae15a6e611ce98d7a614f897803309f4728575e6bc9357fab1157c53d2536417eb8271653",
      "tree": {
        "sha": "d0d6acdca06958f6bd59c8c2bf14429db965bb61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0d6acdca06958f6bd59c8c2bf14429db965bb61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21e2670de3bcbcd41fd7655bfac042ab1ff36762",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanXKjAAoJEB5K7WKYbNJdFSkIALciY4hdE0jxRxtTrH4xXqCz\nCvxXorH+Yg9dIBMYJ+I15mVeEtc5mZqFhM26lMomzov/Qrg4r3Qf9fI+eoHxVEDp\nkHlbPIMFj33976rts/ctE7y0yrObj14Af9EFek3XdbZKWlzDS65ENwPoY8go3XjD\nN9WboVylh4ZD3YlHTYUzMBjYObLPsR8XIwnY/2A1tWO/KbSSpi9TzzK5pir+irpP\ne6wwMAm52UWoTq6VV/SNZw7WBvY3qp8YUIkv9uZPeb1zRfK8EWVjwVpsADebi845\nMPZ/bNBbNcuXpP7iRTZnk3lGyM+iJLDXnUAXY2oVyiM1YRwXhLuLddwRqZXFato=\n=kmj+\n-----END PGP SIGNATURE-----",
        "payload": "tree d0d6acdca06958f6bd59c8c2bf14429db965bb61\nparent 07d2d2a21c508050ba0bbe9ba55d5756c96f8909\nparent fa9461473868132a6a23c672b2eea2d29287855d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520267936 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520267939 +0100\n\nMerge #12434: [doc] dev-notes: Members should be initialized\n\nfa9461473 [doc] dev-notes: Members should be initialized (MarcoFalke)\n\nPull request description:\n\n  Also, remove mention of threads that were removed long ago.\n\n  Motivation:\n  Make it easier to spot bugs such as #11654 and  #12426\n\nTree-SHA512: 8ca1cb54e830e9368803bd98a8b08c39bf2d46f079094ed7e070b32ae15a6e611ce98d7a614f897803309f4728575e6bc9357fab1157c53d2536417eb8271653\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21e2670de3bcbcd41fd7655bfac042ab1ff36762",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21e2670de3bcbcd41fd7655bfac042ab1ff36762",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21e2670de3bcbcd41fd7655bfac042ab1ff36762/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07d2d2a21c508050ba0bbe9ba55d5756c96f8909",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07d2d2a21c508050ba0bbe9ba55d5756c96f8909"
      },
      {
        "sha": "fa9461473868132a6a23c672b2eea2d29287855d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9461473868132a6a23c672b2eea2d29287855d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9461473868132a6a23c672b2eea2d29287855d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 14,
      "deletions": 12
    },
    "files": [
      {
        "sha": "7402d457436aaf3cd5fce07b78af98966ed77f33",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21e2670de3bcbcd41fd7655bfac042ab1ff36762/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21e2670de3bcbcd41fd7655bfac042ab1ff36762/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=21e2670de3bcbcd41fd7655bfac042ab1ff36762",
        "patch": "@@ -240,12 +240,8 @@ Threads\n \n - DumpAddresses : Dumps IP addresses of nodes to peers.dat.\n \n-- ThreadFlushWalletDB : Close the wallet.dat file if it hasn't been used in 500ms.\n-\n - ThreadRPCServer : Remote procedure call handler, listens on port 8332 for connections and services them.\n \n-- BitcoinMiner : Generates bitcoins (if wallet is enabled).\n-\n - Shutdown : Does an orderly shutdown of everything.\n \n Ignoring IDE/editor files\n@@ -382,6 +378,18 @@ C++ data structures\n   - *Rationale*: Easier to understand what is happening, thus easier to spot mistakes, even for those\n   that are not language lawyers\n \n+- Initialize all non-static class members where they are defined\n+\n+  - *Rationale*: Initializing the members in the declaration makes it easy to spot uninitialized ones,\n+  and avoids accidentally reading uninitialized memory\n+\n+```cpp\n+class A\n+{\n+    uint32_t m_count{0};\n+}\n+```\n+\n Strings and formatting\n ------------------------\n \n@@ -417,11 +425,11 @@ member name:\n ```c++\n class AddressBookPage\n {\n-    Mode mode;\n+    Mode m_mode;\n }\n \n AddressBookPage::AddressBookPage(Mode _mode) :\n-      mode(_mode)\n+      m_mode(_mode)\n ...\n ```\n "
      },
      {
        "sha": "fcb376c6cb1e642a65d2e0d45064abad0f5a5d95",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21e2670de3bcbcd41fd7655bfac042ab1ff36762/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21e2670de3bcbcd41fd7655bfac042ab1ff36762/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=21e2670de3bcbcd41fd7655bfac042ab1ff36762",
        "patch": "@@ -30,12 +30,6 @@\n #include <queue>\n #include <utility>\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// BitcoinMiner\n-//\n-\n-//\n // Unconfirmed transactions in the memory pool often depend on other\n // transactions in the memory pool. When we select transactions from the\n // pool, we select by highest fee rate of a transaction combined with all"
      }
    ]
  },
  {
    "sha": "71f56da384afbf62b5936b077d9861c51a511490",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWY1NmRhMzg0YWZiZjYyYjU5MzZiMDc3ZDk4NjFjNTFhNTExNDkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:39:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:40:08Z"
      },
      "message": "Merge #12452: docs: clarified systemd installation instructions in init.md for Ubuntu users.\n\n4d14d06fc docs: clarified systemd installation instructions in init.md for Ubuntu users. (DaveFromBinary)\n\nPull request description:\n\n  Added a note to init.md to clarify the .service copy path for Ubuntu because it differs from the described copy path.\n\n  Also noted which version of Ubuntu switched to systemd for the default system init to clarify when the systemd installation steps should be used instead of the upstart installation steps for Ubuntu users.\n\nTree-SHA512: 1ac6143a177d0f3782ff641029d71eb1f3b3be0c1482e266154d3ca093251b58a10a5f037d1cc82dbfaeae058df2bb8e904833ccb88b032f1a59a151724f95e2",
      "tree": {
        "sha": "ce2e995f0c10d3c3356dc4031c31fee5f70600d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce2e995f0c10d3c3356dc4031c31fee5f70600d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71f56da384afbf62b5936b077d9861c51a511490",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanXLoAAoJEB5K7WKYbNJdIaAH/R2F5bYHnafy+Ca4uOCHFKPj\nut9nUg5nUVcWFO39fnpxnphINTnwPt4vG/mRv1G0ABVtVP7Diyb7g3C4s0RMQAXs\nYKhiCJviG7B/E0/YpN3AhZmzvH5vqVy1v1gAOHtkUnXfpZI+lX7cvTWE8OJ2R/NL\nZRCCnhNBt2Vg9LrgqUdCGpJ4G+9Y6nCHq89Rvsvvl7OIx2FnTWwvT+sDp3WLBcKM\nQF9a1Kv46R2wzfJSwEDZAqIr4sETEyQYUphGw0hkWL29yzzv8UX5Ajn7S1sr6ipc\nl/LHd0cbFaVPKmzRPEvQpSlQwgsmyD9HjWYtQD3JR4VyKfb1grt2k2XdBjFXTPo=\n=OWkh\n-----END PGP SIGNATURE-----",
        "payload": "tree ce2e995f0c10d3c3356dc4031c31fee5f70600d5\nparent 21e2670de3bcbcd41fd7655bfac042ab1ff36762\nparent 4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520267996 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520268008 +0100\n\nMerge #12452: docs: clarified systemd installation instructions in init.md for Ubuntu users.\n\n4d14d06fc docs: clarified systemd installation instructions in init.md for Ubuntu users. (DaveFromBinary)\n\nPull request description:\n\n  Added a note to init.md to clarify the .service copy path for Ubuntu because it differs from the described copy path.\n\n  Also noted which version of Ubuntu switched to systemd for the default system init to clarify when the systemd installation steps should be used instead of the upstart installation steps for Ubuntu users.\n\nTree-SHA512: 1ac6143a177d0f3782ff641029d71eb1f3b3be0c1482e266154d3ca093251b58a10a5f037d1cc82dbfaeae058df2bb8e904833ccb88b032f1a59a151724f95e2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f56da384afbf62b5936b077d9861c51a511490",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71f56da384afbf62b5936b077d9861c51a511490",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f56da384afbf62b5936b077d9861c51a511490/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21e2670de3bcbcd41fd7655bfac042ab1ff36762",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21e2670de3bcbcd41fd7655bfac042ab1ff36762",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21e2670de3bcbcd41fd7655bfac042ab1ff36762"
      },
      {
        "sha": "4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d14d06fcbd63c64257c09ef0a09ad84efdb6d2e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ffd13ae1f9e93d017b234a718fb31b66b39b8b06",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71f56da384afbf62b5936b077d9861c51a511490/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71f56da384afbf62b5936b077d9861c51a511490/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=71f56da384afbf62b5936b077d9861c51a511490",
        "patch": "@@ -84,6 +84,8 @@ Installing this .service file consists of just copying it to\n To test, run `systemctl start bitcoind` and to enable for system startup run\n `systemctl enable bitcoind`\n \n+NOTE: When installing for systemd in Debian/Ubuntu the .service file needs to be copied to the /lib/systemd/system directory instead.\n+\n ### OpenRC\n \n Rename bitcoind.openrc to bitcoind and drop it in /etc/init.d.  Double\n@@ -93,6 +95,8 @@ check ownership and permissions and make it executable.  Test it with\n \n ### Upstart (for Debian/Ubuntu based distributions)\n \n+Upstart is the default init system for Debian/Ubuntu versions older than 15.04. If you are using version 15.04 or newer and haven't manually configured upstart you should follow the systemd instructions instead.\n+\n Drop bitcoind.conf in /etc/init.  Test by running `service bitcoind start`\n it will automatically start on reboot.\n "
      }
    ]
  },
  {
    "sha": "9d49dcf9fab32fe96641d364ee8b2a241020f254",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDQ5ZGNmOWZhYjMyZmU5NjY0MWQzNjRlZThiMmEyNDEwMjBmMjU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:41:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T16:41:49Z"
      },
      "message": "Merge #12260: [Trivial] link mentioned scripted-diff-commit (developer-doc)\n\n7eb665fc8 [Trivial] link mentioned scripted-diff-commit (Felix Wolfsteller)\n\nPull request description:\n\n  Make it easier for people who do not operate on a cloned repository to access the example mentioned.\n\nTree-SHA512: 1c06e551c68cad03e6bd541bf0e0076cdf0b48ef9b8b4e4a61435367c3435e2e4ccb934112e8dc29d3d70217d8834924704aaf839e25d1133312df86848ca1a1",
      "tree": {
        "sha": "8c048008f5b15187a14f3661008e4cf67e64eab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c048008f5b15187a14f3661008e4cf67e64eab8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d49dcf9fab32fe96641d364ee8b2a241020f254",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanXNNAAoJEB5K7WKYbNJdBYgIALmB6GuyjMTNV7rN6pVrQ9ps\nVXiNupa8ht4YOr7I+btIV+PWKCFA5CNPRzGyADvXXJQlSFI1JP2PQ4aqTDv+/6Bx\nSX3J1ltiFCyTosVSJGDVVaJd69NhWajo8gfY7a1Gq+bPF5olyaEXqkdhQWJEKpRH\nL5t6itYF4LZLBhaWeGDdK2+V5UcbQCPLinNycYVpZWb8itZusDLm8U8jffz6ahKw\nvmB2UKG1NwSAXpe4TayTMaclGybAumrWXL/bRmR2Fz+FLdT0OYNz3/9mB+qtw7D2\nMgiVTNW2NKZmWUKf1lJ0KpU/Gr0dmVkxIPTFD6ba4ZqJYWLj/LJlcDh36O97hGc=\n=IPR3\n-----END PGP SIGNATURE-----",
        "payload": "tree 8c048008f5b15187a14f3661008e4cf67e64eab8\nparent 71f56da384afbf62b5936b077d9861c51a511490\nparent 7eb665fc860ab0dee69ce996e23f4a3033a84f9d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520268104 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520268109 +0100\n\nMerge #12260: [Trivial] link mentioned scripted-diff-commit (developer-doc)\n\n7eb665fc8 [Trivial] link mentioned scripted-diff-commit (Felix Wolfsteller)\n\nPull request description:\n\n  Make it easier for people who do not operate on a cloned repository to access the example mentioned.\n\nTree-SHA512: 1c06e551c68cad03e6bd541bf0e0076cdf0b48ef9b8b4e4a61435367c3435e2e4ccb934112e8dc29d3d70217d8834924704aaf839e25d1133312df86848ca1a1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d49dcf9fab32fe96641d364ee8b2a241020f254",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d49dcf9fab32fe96641d364ee8b2a241020f254",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d49dcf9fab32fe96641d364ee8b2a241020f254/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71f56da384afbf62b5936b077d9861c51a511490",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71f56da384afbf62b5936b077d9861c51a511490",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71f56da384afbf62b5936b077d9861c51a511490"
      },
      {
        "sha": "7eb665fc860ab0dee69ce996e23f4a3033a84f9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7eb665fc860ab0dee69ce996e23f4a3033a84f9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7eb665fc860ab0dee69ce996e23f4a3033a84f9d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "278bf657923b0de32416577f3ba55d5053c91b01",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d49dcf9fab32fe96641d364ee8b2a241020f254/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d49dcf9fab32fe96641d364ee8b2a241020f254/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=9d49dcf9fab32fe96641d364ee8b2a241020f254",
        "patch": "@@ -616,7 +616,7 @@ To create a scripted-diff:\n \n The scripted-diff is verified by the tool `contrib/devtools/commit-script-check.sh`\n \n-Commit `bb81e173` is an example of a scripted-diff.\n+Commit [`bb81e173`](https://github.com/bitcoin/bitcoin/commit/bb81e173) is an example of a scripted-diff.\n \n RPC interface guidelines\n --------------------------"
      }
    ]
  },
  {
    "sha": "cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmMxZmNmNTc2Y2RmOGUyNzAxZjM3NDk2YTE5NDZiZDc4NzBhNmU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:36:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:38:17Z"
      },
      "message": "Merge #12573: Fix compilation when compiler do not support __builtin_clz*\n\n18307849b Consensus: Fix bug when compiler do not support __builtin_clz* (532479301)\n\nPull request description:\n\n  #ifdef is not correct since defination is defined to 0 or 1. Should change to #if\n\nTree-SHA512: ba13a591d28f4d7d6ebaab081be4304c43766a611226f8d2994c8db415dfcf318e82217d26a8c4af290760c68eded9503b39535b0e6e079ded912e6a8fca5b36",
      "tree": {
        "sha": "99c1b9839a0069467cb3b35343d6763175a64e11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99c1b9839a0069467cb3b35343d6763175a64e11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanYCJAAoJEB5K7WKYbNJdOwcH/j3yMrTT/krzsq/I12Nlb1OL\nnOmWu8xkyZ/Dwy0tWBKPZIiOFpIlB9mMF8AVbE+vHu30mrdUmjJi02Pn/wyzvhRZ\nE0gLzQ5xfQ5QwgD511r3Bcjrky6BlOvNuppi8OFRkXaxHcSvZmZbbmdAgya1xhz0\nTdqO/fLgxpDXK+WfCTK48ODjzDUrMxnlUvqJb7ZSuS7hb9LTV9vlyJ3rt6pZvv5c\nHUPjTaMtvSb9rZ6jb+gawtxZiDLDtERE1xDpdNmwrC+T84s/KgqLl/jLohFFRaVI\nBZkaKcBLKkZCDev8kGtQfEa9l7GRwlsGQELJMq6TZrl1rJshejlyaVPGtwcvW6A=\n=2xVy\n-----END PGP SIGNATURE-----",
        "payload": "tree 99c1b9839a0069467cb3b35343d6763175a64e11\nparent 9d49dcf9fab32fe96641d364ee8b2a241020f254\nparent 18307849b405f9e2067eaa8091b105838f413707\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520271384 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520271497 +0100\n\nMerge #12573: Fix compilation when compiler do not support __builtin_clz*\n\n18307849b Consensus: Fix bug when compiler do not support __builtin_clz* (532479301)\n\nPull request description:\n\n  #ifdef is not correct since defination is defined to 0 or 1. Should change to #if\n\nTree-SHA512: ba13a591d28f4d7d6ebaab081be4304c43766a611226f8d2994c8db415dfcf318e82217d26a8c4af290760c68eded9503b39535b0e6e079ded912e6a8fca5b36\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d49dcf9fab32fe96641d364ee8b2a241020f254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d49dcf9fab32fe96641d364ee8b2a241020f254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d49dcf9fab32fe96641d364ee8b2a241020f254"
      },
      {
        "sha": "18307849b405f9e2067eaa8091b105838f413707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18307849b405f9e2067eaa8091b105838f413707",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18307849b405f9e2067eaa8091b105838f413707"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6e9d6dc82aa76d35b2c8d7cd7be3cecb902ba4d9",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
        "patch": "@@ -82,12 +82,12 @@ void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n /** Return the smallest number n such that (x >> n) == 0 (or 64 if the highest bit in x is set. */\n uint64_t static inline CountBits(uint64_t x)\n {\n-#ifdef HAVE_DECL___BUILTIN_CLZL\n+#if HAVE_DECL___BUILTIN_CLZL\n     if (sizeof(unsigned long) >= sizeof(uint64_t)) {\n         return x ? 8 * sizeof(unsigned long) - __builtin_clzl(x) : 0;\n     }\n #endif\n-#ifdef HAVE_DECL___BUILTIN_CLZLL\n+#if HAVE_DECL___BUILTIN_CLZLL\n     if (sizeof(unsigned long long) >= sizeof(uint64_t)) {\n         return x ? 8 * sizeof(unsigned long long) - __builtin_clzll(x) : 0;\n     }"
      }
    ]
  },
  {
    "sha": "d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzdiNGE3YmNmMjNiYWYxMGM4YTM3ZDZhMGY0YjZlZTJmMDMwMGIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:48:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:49:19Z"
      },
      "message": "Merge #12527: gitian-build.sh: fix signProg being recognized as two parameters\n\n87c4320df gitian-build.sh: fix signProg being recognized as two parameters (Ken Lee)\n\nPull request description:\n\n  On current build script, `gpg --detach-sign` will be recognized as two parameters of gsign\n  This PR fix it and can build successfully\n\nTree-SHA512: 32e2f9e8414658ea4145bcbccd9aaa3cdf61ea648ad9328246bad67957e11a8e496afec71cbd888f8d0d49bd7eaed35c971fe2dac43b80ee6e664b90ffd997a3",
      "tree": {
        "sha": "8a6f4357e48b13f8ebef174778e92d6315b0fc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a6f4357e48b13f8ebef174778e92d6315b0fc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanYMfAAoJEB5K7WKYbNJdJZoH/0chHvKBI6kXz0DFBd3dtFAm\nLFg3GrqdeV0C0oGKhg+DMKs1W/kb5VCSC+EiSM/iEkv9DluX4sRa0HduoxE4oJJh\nuQaE6/zrLXNMs3ae+Htzv/6AYXVB8Oy01jUQEAsCYGxnPd0L8kxbeX11EDcb9Yzu\n9WC3oDzRnfMlJwxGN35kdFqs99m6B81tWgMCXVQvUIQ1em9GKKEzMN458DS38H6e\ncy8NijBn2+P94ffCmaVyEW6psmJbhW81rx1/JSl4mZx1ou6mJdQi5ZlVwB2k1Tyl\nkU8IO0MuI09hGVgeuI0aOQunfuYTiDOHevVNMSlgWOQLe2UBDviL5NUdlNNqML4=\n=rtzM\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a6f4357e48b13f8ebef174778e92d6315b0fc38\nparent cbc1fcf576cdf8e2701f37496a1946bd7870a6e9\nparent 87c4320dfc8eff46f13851ab8a1651a84d2301da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520272131 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520272159 +0100\n\nMerge #12527: gitian-build.sh: fix signProg being recognized as two parameters\n\n87c4320df gitian-build.sh: fix signProg being recognized as two parameters (Ken Lee)\n\nPull request description:\n\n  On current build script, `gpg --detach-sign` will be recognized as two parameters of gsign\n  This PR fix it and can build successfully\n\nTree-SHA512: 32e2f9e8414658ea4145bcbccd9aaa3cdf61ea648ad9328246bad67957e11a8e496afec71cbd888f8d0d49bd7eaed35c971fe2dac43b80ee6e664b90ffd997a3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbc1fcf576cdf8e2701f37496a1946bd7870a6e9"
      },
      {
        "sha": "87c4320dfc8eff46f13851ab8a1651a84d2301da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87c4320dfc8eff46f13851ab8a1651a84d2301da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87c4320dfc8eff46f13851ab8a1651a84d2301da"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "94d6a89c7b22bff126edb1c0ca8e3c92be9cac02",
        "filename": "contrib/gitian-build.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
        "patch": "@@ -77,7 +77,7 @@ while :; do\n         -S|--signer)\n \t    if [ -n \"$2\" ]\n \t    then\n-\t\tSIGNER=$2\n+\t\tSIGNER=\"$2\"\n \t\tshift\n \t    else\n \t\techo 'Error: \"--signer\" requires a non-empty argument.'\n@@ -190,7 +190,7 @@ fi\n # Get signer\n if [[ -n \"$1\" ]]\n then\n-    SIGNER=$1\n+    SIGNER=\"$1\"\n     shift\n fi\n \n@@ -203,7 +203,7 @@ then\n fi\n \n # Check that a signer is specified\n-if [[ $SIGNER == \"\" ]]\n+if [[ \"$SIGNER\" == \"\" ]]\n then\n     echo \"$scriptName: Missing signer.\"\n     echo \"Try $scriptName --help for more information\"\n@@ -272,7 +272,7 @@ then\n \t    echo \"Compiling ${VERSION} Linux\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/${VERSION}\n \tfi\n \t# Windows\n@@ -282,7 +282,7 @@ then\n \t    echo \"Compiling ${VERSION} Windows\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n \t    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n \t    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -293,7 +293,7 @@ then\n \t    echo \"Compiling ${VERSION} Mac OSX\"\n \t    echo \"\"\n \t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n \t    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n \t    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -306,9 +306,9 @@ then\n             echo \"Committing ${VERSION} Unsigned Sigs\"\n             echo \"\"\n             pushd gitian.sigs\n-            git add ${VERSION}-linux/${SIGNER}\n-            git add ${VERSION}-win-unsigned/${SIGNER}\n-            git add ${VERSION}-osx-unsigned/${SIGNER}\n+            git add ${VERSION}-linux/\"${SIGNER}\"\n+            git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+            git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n             git commit -a -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n             popd\n         fi\n@@ -358,7 +358,7 @@ then\n \t    echo \"Signing ${VERSION} Windows\"\n \t    echo \"\"\n \t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n \t    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/${VERSION}\n \t    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/${VERSION}\n \tfi\n@@ -369,7 +369,7 @@ then\n \t    echo \"Signing ${VERSION} Mac OSX\"\n \t    echo \"\"\n \t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t    ./bin/gsign -p $signProg --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n \t    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/${VERSION}/bitcoin-${VERSION}-osx.dmg\n \tfi\n \tpopd\n@@ -381,8 +381,8 @@ then\n             echo \"\"\n             echo \"Committing ${VERSION} Signed Sigs\"\n             echo \"\"\n-            git add ${VERSION}-win-signed/${SIGNER}\n-            git add ${VERSION}-osx-signed/${SIGNER}\n+            git add ${VERSION}-win-signed/\"${SIGNER}\"\n+            git add ${VERSION}-osx-signed/\"${SIGNER}\"\n             git commit -a -m \"Add ${VERSION} signed binary sigs for ${SIGNER}\"\n             popd\n         fi"
      }
    ]
  },
  {
    "sha": "992f5687620c4346bc38286202a60ba2b6178c0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTJmNTY4NzYyMGM0MzQ2YmMzODI4NjIwMmE2MGJhMmI2MTc4YzBi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T17:50:22Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T17:50:22Z"
      },
      "message": "depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin",
      "tree": {
        "sha": "3318089b4e18f70a23e25530b67fc7f7a89cdda2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3318089b4e18f70a23e25530b67fc7f7a89cdda2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/992f5687620c4346bc38286202a60ba2b6178c0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992f5687620c4346bc38286202a60ba2b6178c0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/992f5687620c4346bc38286202a60ba2b6178c0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992f5687620c4346bc38286202a60ba2b6178c0b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d49dcf9fab32fe96641d364ee8b2a241020f254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d49dcf9fab32fe96641d364ee8b2a241020f254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d49dcf9fab32fe96641d364ee8b2a241020f254"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5ad2b580d2ea9706e8ebcc72d2bc59d6197056ed",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992f5687620c4346bc38286202a60ba2b6178c0b/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992f5687620c4346bc38286202a60ba2b6178c0b/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=992f5687620c4346bc38286202a60ba2b6178c0b",
        "patch": "@@ -6,10 +6,9 @@ $(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n-$(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n+$(package)_build_opts_darwin=LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n-$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "6645eaf0ab30b20401528872ed78f344a6e6805f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQ1ZWFmMGFiMzBiMjA0MDE1Mjg4NzJlZDc4ZjM0NGE2ZTY4MDVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:51:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:51:53Z"
      },
      "message": "Merge #12466: depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin\n\n992f56876 depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin (fanquake)\n\nPull request description:\n\n  Only use D_DARWIN_C_SOURCE when building on darwin, so we don't inadvertently introduce issues elsewhere.\n\n  cc @theuni\n\nTree-SHA512: e49a8456ba2b9925c06e62c73e139152b6d63cc5a4cee66944e41c863ca9103e98ac81a5718eceb3d0885a677fc53ece34062b02c304a05c3280e094965e856a",
      "tree": {
        "sha": "1a342f94a03509a9f2566084a3676d637cd5a3f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a342f94a03509a9f2566084a3676d637cd5a3f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6645eaf0ab30b20401528872ed78f344a6e6805f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanYO5AAoJEB5K7WKYbNJdQ24H/209mcXE0oxBAiWSElZyV3UX\nFaUzCti8MKRgIiECMcUa2dmllTxEiSTEcCxNRTJR0GqlAVrkEjFJIJEWUycQV8oR\nfaJNxdM+QCYq3fVuXBpEx6Wb8mgE/7nrRvXbHiDw982jpIDo0DN3ILf89miBNYHX\nnICxOgoMIjHrPHEA74bf1BjIecsbdq2sUqCT4gnp7TC9qeZ5LwLssYwA8ZK6zLyy\nYSKmVs7YEBfUrmQ3FfWcstVd7mJkYglsPUabg8e6NlSvPu8d8FxI4DjJhWho1tQ2\nGROCkBB9SudBLGEdKCqflIBduNX+/oXpPcD/CJ2GfLnbopRTI714wrBE3ePBgPQ=\n=QZsu\n-----END PGP SIGNATURE-----",
        "payload": "tree 1a342f94a03509a9f2566084a3676d637cd5a3f2\nparent d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2\nparent 992f5687620c4346bc38286202a60ba2b6178c0b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520272268 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520272313 +0100\n\nMerge #12466: depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin\n\n992f56876 depends: Only use D_DARWIN_C_SOURCE when building miniupnpc on darwin (fanquake)\n\nPull request description:\n\n  Only use D_DARWIN_C_SOURCE when building on darwin, so we don't inadvertently introduce issues elsewhere.\n\n  cc @theuni\n\nTree-SHA512: e49a8456ba2b9925c06e62c73e139152b6d63cc5a4cee66944e41c863ca9103e98ac81a5718eceb3d0885a677fc53ece34062b02c304a05c3280e094965e856a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6645eaf0ab30b20401528872ed78f344a6e6805f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6645eaf0ab30b20401528872ed78f344a6e6805f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6645eaf0ab30b20401528872ed78f344a6e6805f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d77b4a7bcf23baf10c8a37d6a0f4b6ee2f0300b2"
      },
      {
        "sha": "992f5687620c4346bc38286202a60ba2b6178c0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992f5687620c4346bc38286202a60ba2b6178c0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992f5687620c4346bc38286202a60ba2b6178c0b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5ad2b580d2ea9706e8ebcc72d2bc59d6197056ed",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6645eaf0ab30b20401528872ed78f344a6e6805f/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6645eaf0ab30b20401528872ed78f344a6e6805f/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=6645eaf0ab30b20401528872ed78f344a6e6805f",
        "patch": "@@ -6,10 +6,9 @@ $(package)_sha256_hash=90dda8c7563ca6cd4a83e23b3c66dbbea89603a1675bfdb852897c2c9\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n-$(package)_build_opts_darwin=OS=Darwin LIBTOOL=\"$($(package)_libtool)\"\n+$(package)_build_opts_darwin=LIBTOOL=\"$($(package)_libtool)\"\n $(package)_build_opts_mingw32=-f Makefile.mingw\n $(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n-$(package)_build_env+=CFLAGS=-D_DARWIN_C_SOURCE\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "7f999643212d0e9de5296ded90909ece5a7a6ff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Zjk5OTY0MzIxMmQwZTlkZTUyOTZkZWQ5MDkwOWVjZTVhN2E2ZmYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:56:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T17:56:40Z"
      },
      "message": "Merge #12516: Avoid unintentional unsigned integer wraparounds in tests\n\n2736c9e05 Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n\nPull request description:\n\n  Avoid unintentional unsigned integer wraparounds in tests.\n\n  This is a subset of #11535 as suggested by @MarcoFalke :-)\n\nTree-SHA512: 4f4ee8a08870101a3f7451aefa77ae06aaf44e3c3b2f7555faa2b8a8503f97f34e34dffcf65154278f15767dc9823955f52d1aa7b39930b390e57cdf2b65e0f3",
      "tree": {
        "sha": "b614adfd2340111f81e1d34a9ba50e7435330df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b614adfd2340111f81e1d34a9ba50e7435330df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f999643212d0e9de5296ded90909ece5a7a6ff1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanYTYAAoJEB5K7WKYbNJdsMIH+gLUjjtdTZy6zIXanOGE8Jlt\nUkBLtE0PtQBYuHGeVIUYSlBhsmnZbYYOYzCql+J3/T2H9bZTpJl7PoZridgezaJU\nK7G94C5k+QEYKo5tCLrjA98hfQpMXPD2BXfNagTXRAkdBrdGvp2k2BqLj9bkiPzV\n1sKF+uuqG6zkTDf0lEi5kdLJC8nInswcovoFFQKCaBa6nQG6juhW6QZb4aPrkTFd\nXyn2wdYZKxhxa2zaFuw1vnC3D8MDrbxq9/krrHSDTtDRLhTqW2gfDG/E6M+F0lei\nAKYwonQGuFmPqy2Lsbo9gMEnfMe4+l7mEoawPsXSPuVvIFGy+7QiWrQpTRbLdbY=\n=W5dN\n-----END PGP SIGNATURE-----",
        "payload": "tree b614adfd2340111f81e1d34a9ba50e7435330df0\nparent 6645eaf0ab30b20401528872ed78f344a6e6805f\nparent 2736c9e05ebd71f2eeab490de7f9fba9ea8b4169\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520272593 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520272600 +0100\n\nMerge #12516: Avoid unintentional unsigned integer wraparounds in tests\n\n2736c9e05 Avoid unintentional unsigned integer wraparounds in tests (practicalswift)\n\nPull request description:\n\n  Avoid unintentional unsigned integer wraparounds in tests.\n\n  This is a subset of #11535 as suggested by @MarcoFalke :-)\n\nTree-SHA512: 4f4ee8a08870101a3f7451aefa77ae06aaf44e3c3b2f7555faa2b8a8503f97f34e34dffcf65154278f15767dc9823955f52d1aa7b39930b390e57cdf2b65e0f3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f999643212d0e9de5296ded90909ece5a7a6ff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f999643212d0e9de5296ded90909ece5a7a6ff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f999643212d0e9de5296ded90909ece5a7a6ff1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6645eaf0ab30b20401528872ed78f344a6e6805f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6645eaf0ab30b20401528872ed78f344a6e6805f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6645eaf0ab30b20401528872ed78f344a6e6805f"
      },
      {
        "sha": "2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2736c9e05ebd71f2eeab490de7f9fba9ea8b4169"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "01c3a6cedd1bc11a4c507187ae21c137df29dc3f",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "patch": "@@ -206,7 +206,7 @@ BOOST_AUTO_TEST_CASE(PrevectorTestInt)\n                 test.erase(InsecureRandRange(test.size()));\n             }\n             if (InsecureRandBits(3) == 2) {\n-                int new_size = std::max<int>(0, std::min<int>(30, test.size() + (InsecureRandRange(5)) - 2));\n+                int new_size = std::max(0, std::min(30, (int)test.size() + (int)InsecureRandRange(5) - 2));\n                 test.resize(new_size);\n             }\n             if (InsecureRandBits(3) == 3) {"
      },
      {
        "sha": "179df7dd3871faa2a6cdd23a13a49e9b5d893b0e",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "patch": "@@ -56,8 +56,8 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     int counter[10] = { 0 };\n     FastRandomContext rng(42);\n     auto zeroToNine = [](FastRandomContext& rc) -> int { return rc.randrange(10); }; // [0, 9]\n-    auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + rc.randrange(1012); }; // [-11, 1000]\n-    auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + rc.randrange(2001); }; // [-1000, 1000]\n+    auto randomMsec = [](FastRandomContext& rc) -> int { return -11 + (int)rc.randrange(1012); }; // [-11, 1000]\n+    auto randomDelta = [](FastRandomContext& rc) -> int { return -1000 + (int)rc.randrange(2001); }; // [-1000, 1000]\n \n     boost::chrono::system_clock::time_point start = boost::chrono::system_clock::now();\n     boost::chrono::system_clock::time_point now = start;"
      },
      {
        "sha": "e6510cc214bb81221c256c63f1c98057e89b942c",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f999643212d0e9de5296ded90909ece5a7a6ff1/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "patch": "@@ -82,7 +82,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     wtx.mapValue[\"comment\"] = \"y\";\n     {\n         CMutableTransaction tx(*wtx.tx);\n-        --tx.nLockTime;  // Just to change the hash :)\n+        ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);\n@@ -92,7 +92,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     wtx.mapValue[\"comment\"] = \"x\";\n     {\n         CMutableTransaction tx(*wtx.tx);\n-        --tx.nLockTime;  // Just to change the hash :)\n+        ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n     pwalletMain->AddToWallet(wtx);"
      }
    ]
  },
  {
    "sha": "47a7666dbe385cf138fa3cc0d48bb04507d11af2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2E3NjY2ZGJlMzg1Y2YxMzhmYTNjYzBkNDhiYjA0NTA3ZDExYWYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T18:12:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T18:12:37Z"
      },
      "message": "Merge #11889: Drop extra script variable in ProduceSignature\n\n9360f5032 Drop extra script variable in ProduceSignature (Russell Yanofsky)\n\nPull request description:\n\n  Was slightly confusing.\n\nTree-SHA512: 1d18f92c133772ffc8eb71826c8d778988839a14bcefc50f9c591111b0a5f81ebc12bca0f1ab25d5fdd02d3d50c2325c04cbfcbdcd18a7b80ca112d049c2327d",
      "tree": {
        "sha": "e3178d6e18a9fc07409ed4edf6075c3df0f803e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3178d6e18a9fc07409ed4edf6075c3df0f803e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47a7666dbe385cf138fa3cc0d48bb04507d11af2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanYiVAAoJEB5K7WKYbNJdbOwH/RvnEvo/2dWBCec2uIUhbnrZ\nUaJqA5eOLgwjZoxMaINZe6y9egE1yuofx7z+J85/AVwuIiUerPXzH2eAF6vG2sru\njJ/E9RMJMSuxgTPAkGuv0JiIQG327VPsITUCzN9bsLz/2RiToBOX8wLxlGiFuo4S\nlRmi0kX9SXnZQieekMlCxFXuuI0bAi5oYFvafS/gaCxj7jZ2JY9be1IJo/yB0c8Q\n4OpcRroAGHvBjh4vHmbY2St27dSgd7JDOt93J0EY5JLssF/921U3SZqOP9pjuoMn\nJcmAXYZkG9FWfU89ay5dR3iedMjqkMAVT4KupVf1z1AUkMqdcPgyztlGZl2sFq4=\n=RHpS\n-----END PGP SIGNATURE-----",
        "payload": "tree e3178d6e18a9fc07409ed4edf6075c3df0f803e7\nparent 7f999643212d0e9de5296ded90909ece5a7a6ff1\nparent 9360f503218e780e405a1c8acaee65da8e35b4a6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520273545 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520273557 +0100\n\nMerge #11889: Drop extra script variable in ProduceSignature\n\n9360f5032 Drop extra script variable in ProduceSignature (Russell Yanofsky)\n\nPull request description:\n\n  Was slightly confusing.\n\nTree-SHA512: 1d18f92c133772ffc8eb71826c8d778988839a14bcefc50f9c591111b0a5f81ebc12bca0f1ab25d5fdd02d3d50c2325c04cbfcbdcd18a7b80ca112d049c2327d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7666dbe385cf138fa3cc0d48bb04507d11af2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47a7666dbe385cf138fa3cc0d48bb04507d11af2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7666dbe385cf138fa3cc0d48bb04507d11af2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f999643212d0e9de5296ded90909ece5a7a6ff1"
      },
      {
        "sha": "9360f503218e780e405a1c8acaee65da8e35b4a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9360f503218e780e405a1c8acaee65da8e35b4a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9360f503218e780e405a1c8acaee65da8e35b4a6"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "aaba5e5926f9b45869a8a0a3481916becec4d4d7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a7666dbe385cf138fa3cc0d48bb04507d11af2/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a7666dbe385cf138fa3cc0d48bb04507d11af2/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=47a7666dbe385cf138fa3cc0d48bb04507d11af2",
        "patch": "@@ -140,10 +140,9 @@ static CScript PushAll(const std::vector<valtype>& values)\n \n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n {\n-    CScript script = fromPubKey;\n     std::vector<valtype> result;\n     txnouttype whichType;\n-    bool solved = SignStep(creator, script, result, whichType, SIGVERSION_BASE);\n+    bool solved = SignStep(creator, fromPubKey, result, whichType, SIGVERSION_BASE);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n@@ -153,8 +152,8 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         // Solver returns the subscript that needs to be evaluated;\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n-        script = subscript = CScript(result[0].begin(), result[0].end());\n-        solved = solved && SignStep(creator, script, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;\n+        subscript = CScript(result[0].begin(), result[0].end());\n+        solved = solved && SignStep(creator, subscript, result, whichType, SIGVERSION_BASE) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n "
      }
    ]
  },
  {
    "sha": "2b1f7945747b59215b5f07573cf6cae4a269d3bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjFmNzk0NTc0N2I1OTIxNWI1ZjA3NTczY2Y2Y2FlNGEyNjlkM2Jm",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-11-19T01:30:08Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T18:51:14Z"
      },
      "message": "[Depends] Fix Qt build with Xcode 9.2",
      "tree": {
        "sha": "0b0caa837062138071071e50c7b66ba750cf1a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b0caa837062138071071e50c7b66ba750cf1a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b1f7945747b59215b5f07573cf6cae4a269d3bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f7945747b59215b5f07573cf6cae4a269d3bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1f7945747b59215b5f07573cf6cae4a269d3bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f7945747b59215b5f07573cf6cae4a269d3bf/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f999643212d0e9de5296ded90909ece5a7a6ff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f999643212d0e9de5296ded90909ece5a7a6ff1"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 72,
      "deletions": 1
    },
    "files": [
      {
        "sha": "849192755281382b5477deca982e94a2ed204394",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b1f7945747b59215b5f07573cf6cae4a269d3bf/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b1f7945747b59215b5f07573cf6cae4a269d3bf/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=2b1f7945747b59215b5f07573cf6cae4a269d3bf",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch\n+$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch fix-cocoahelpers-macos.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=3a15aebd523c6d89fb97b2d3df866c94149653a26d27a00aac9b6d3020bc5a1d\n@@ -140,6 +140,7 @@ define $(package)_preprocess_cmds\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix-cocoahelpers-macos.patch && \\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "1b43a9eff8fe924961b3962ee0d892ae5553c75c",
        "filename": "depends/patches/qt/fix-cocoahelpers-macos.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b1f7945747b59215b5f07573cf6cae4a269d3bf/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b1f7945747b59215b5f07573cf6cae4a269d3bf/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-cocoahelpers-macos.patch?ref=2b1f7945747b59215b5f07573cf6cae4a269d3bf",
        "patch": "@@ -0,0 +1,70 @@\n+From 0707260a4f8e64dfadf1df5f935e74cabb7c7d27 Mon Sep 17 00:00:00 2001\n+From: Jake Petroules <jake.petroules@qt.io>\n+Date: Sun, 1 Oct 2017 21:48:17 -0700\n+Subject: [PATCH] Fix build error with macOS 10.13 SDK\n+MIME-Version: 1.0\n+Content-Type: text/plain; charset=utf8\n+Content-Transfer-Encoding: 8bit\n+\n+Several of these variables/macros are no longer defined. We didn't\n+validate the preconditions on iOS, tvOS, or watchOS, so no\n+need to bother validating them on macOS either. Nor did we check the\n+OSStatus result on any platform anyways.\n+\n+Task-number: QTBUG-63401\n+Change-Id: Ife64dff767cf6d3f4b839fc53ec486181c176bf3\n+(cherry-picked from 861544583511d4e6f7745d2339b26ff1cd44132b)\n+Reviewed-by: Timur Pocheptsov <timur.pocheptsov@qt.io>\n+Reviewed-by: Tor Arne Vestb\u00c3\u00b8 <tor.arne.vestbo@qt.io>\n+---\n+ src/plugins/platforms/cocoa/qcocoahelpers.h  |  2 +-\n+ src/plugins/platforms/cocoa/qcocoahelpers.mm | 13 +------------\n+ 2 files changed, 2 insertions(+), 13 deletions(-)\n+\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+index bbb3793..74371d5 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+@@ -80,7 +80,7 @@ QColor qt_mac_toQColor(CGColorRef color);\n+ // Creates a mutable shape, it's the caller's responsibility to release.\n+ HIMutableShapeRef qt_mac_QRegionToHIMutableShape(const QRegion &region);\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n+ \n+ NSDragOperation qt_mac_mapDropAction(Qt::DropAction action);\n+ NSDragOperation qt_mac_mapDropActions(Qt::DropActions actions);\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+index cd73148..3f8429e 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+@@ -544,15 +544,8 @@ NSRect qt_mac_flipRect(const QRect &rect)\n+     return NSMakeRect(rect.x(), flippedY, rect.width(), rect.height());\n+ }\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n+ {\n+-    // Verbatim copy if HIViewDrawCGImage (as shown on Carbon-Dev)\n+-    OSStatus err = noErr;\n+-\n+-    require_action(inContext != NULL, InvalidContext, err = paramErr);\n+-    require_action(inBounds != NULL, InvalidBounds, err = paramErr);\n+-    require_action(inImage != NULL, InvalidImage, err = paramErr);\n+-\n+     CGContextSaveGState( inContext );\n+     CGContextTranslateCTM (inContext, 0, inBounds->origin.y + CGRectGetMaxY(*inBounds));\n+     CGContextScaleCTM(inContext, 1, -1);\n+@@ -560,10 +553,6 @@ OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGIm\n+     CGContextDrawImage(inContext, *inBounds, inImage);\n+ \n+     CGContextRestoreGState(inContext);\n+-InvalidImage:\n+-InvalidBounds:\n+-InvalidContext:\n+-        return err;\n+ }\n+ \n+ Qt::MouseButton cocoaButton2QtButton(NSInteger buttonNum)\n+-- \n+2.7.4"
      }
    ]
  },
  {
    "sha": "c8ea91aa1d16829c668448d0a4778d370110289d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGVhOTFhYTFkMTY4MjljNjY4NDQ4ZDBhNDc3OGQzNzAxMTAyODlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:00:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:04:26Z"
      },
      "message": "Merge #12501: [qt] Improved \"custom fee\" explanation in tooltip\n\n0bc095efd [qt] Improved \"custom fee\" explanation in tooltip (Randolf Richardson)\n\nPull request description:\n\n  Thanks to @dooglus for asking about this tooltip in Issue 12500.\n  Reference:  https://www.github.com/bitcoin/bitcoin/issues/12500\n\n  I would also appreciate it if someone can confirm that 1 kilobyte in this field indeed represents 1,000 bytes rather than 1,024 bytes (if it's supposed to be 1,024, then I'll gladly make the necessary changes to reflect this).\n\nTree-SHA512: da2fe0128411b5ef6f0a26382a80601efcf823c3f3591bdd83a7fe7e25777728e7eb89e2e8b175b991566e63838aca12d204792f981031b86e7b2ba28ca50021",
      "tree": {
        "sha": "873fe4573d5e75be8fb2346a7452b8882aefe4ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/873fe4573d5e75be8fb2346a7452b8882aefe4ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8ea91aa1d16829c668448d0a4778d370110289d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanZS6AAoJEB5K7WKYbNJd4M0H/34W21xNDiHX63X8BxJjswYb\nXeBgdtYQb4gpLcOljdgZXaR/5RIa07LmWI9embLdn7LcJMxTTeNktzH0ZoCHMzvU\nYWbIPcl6RitdDqSXZlIbajQdHYkO1oo/t8jXbx8W8zMPE+Oe28IJUhmJ4sqJeewH\nGqDUtpxxpaFm9R6xjTKgHY2vAcvZaztp1KY1zWfyDYcX/uYp79QXMYMahq+kVg6R\nAVfFjW3AMVXWKwgAH50C4pVT4yVx8Bij8xqVlM+b2O8/1vAK/GZgBDIx6TzoqTHO\nuR6+Y3QPm2P+afbYh0vtHQArDh1FEcEkNHZmRpa+n350Zwb5HmoL9SgEijLUtcA=\n=dxDw\n-----END PGP SIGNATURE-----",
        "payload": "tree 873fe4573d5e75be8fb2346a7452b8882aefe4ea\nparent 47a7666dbe385cf138fa3cc0d48bb04507d11af2\nparent 0bc095efd8dd25770af398cb2b73cd65b3bc9f89\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520276413 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520276666 +0100\n\nMerge #12501: [qt] Improved \"custom fee\" explanation in tooltip\n\n0bc095efd [qt] Improved \"custom fee\" explanation in tooltip (Randolf Richardson)\n\nPull request description:\n\n  Thanks to @dooglus for asking about this tooltip in Issue 12500.\n  Reference:  https://www.github.com/bitcoin/bitcoin/issues/12500\n\n  I would also appreciate it if someone can confirm that 1 kilobyte in this field indeed represents 1,000 bytes rather than 1,024 bytes (if it's supposed to be 1,024, then I'll gladly make the necessary changes to reflect this).\n\nTree-SHA512: da2fe0128411b5ef6f0a26382a80601efcf823c3f3591bdd83a7fe7e25777728e7eb89e2e8b175b991566e63838aca12d204792f981031b86e7b2ba28ca50021\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ea91aa1d16829c668448d0a4778d370110289d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8ea91aa1d16829c668448d0a4778d370110289d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ea91aa1d16829c668448d0a4778d370110289d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a7666dbe385cf138fa3cc0d48bb04507d11af2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7666dbe385cf138fa3cc0d48bb04507d11af2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a7666dbe385cf138fa3cc0d48bb04507d11af2"
      },
      {
        "sha": "0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bc095efd8dd25770af398cb2b73cd65b3bc9f89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bc095efd8dd25770af398cb2b73cd65b3bc9f89"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6b31ddea9094e98497d66abe55cf408607306789",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8ea91aa1d16829c668448d0a4778d370110289d/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8ea91aa1d16829c668448d0a4778d370110289d/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=c8ea91aa1d16829c668448d0a4778d370110289d",
        "patch": "@@ -848,7 +848,9 @@\n                  <item>\n                   <widget class=\"QLabel\" name=\"labelCustomPerKilobyte\">\n                    <property name=\"toolTip\">\n-                    <string>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</string>\n+                    <string>Specify a custom fee per kB (1,000 bytes) of the transaction's virtual size.\n+\n+Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis per kB\" for a transaction size of 500 bytes (half of 1 kB) would ultimately yield a fee of only 50 satoshis.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>"
      }
    ]
  },
  {
    "sha": "d59b8d6aa1102ffac980c89e96105ddec9cfb579",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTliOGQ2YWExMTAyZmZhYzk4MGM4OWU5NjEwNWRkZWM5Y2ZiNTc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:08:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:09:55Z"
      },
      "message": "Merge #11880: Stop special-casing phashBlock handling in validation for TBV\n\n9c5a4a6ed Stop special-casing phashBlock handling in validation for TBV (Matt Corallo)\n\nPull request description:\n\n  There is no reason to do this, really, we already have \"ignore PoW\" flags. Motivated by https://github.com/bitcoin/bitcoin/pull/11739#discussion_r155841721\n\nTree-SHA512: 37cb1ae5b11c9e8ed7a679bb07ad3b119a2a014744b26d197d67ba21beb19fe6815271df935e40f7c7bd5f2e4d7ae4dad7bd4d00fa230a8d789f37e9de31a769",
      "tree": {
        "sha": "dd935af29fccfd6d8f97beb90b50ae605f6f56e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd935af29fccfd6d8f97beb90b50ae605f6f56e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d59b8d6aa1102ffac980c89e96105ddec9cfb579",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanZYDAAoJEB5K7WKYbNJdRncH/3SIdkSu2co6cQ7ldTUafpCX\nT69ky1zCTKualqLlXvB/OzyXeo1tES+lfeXv9/LNjj/Gzo8E0CeCB+2Dlh2ZyW2u\ncNaQEmPRgAGTADdAh+APczB6TA9lLsMiKVCz2VEnziHBEqygEYtMB+cvEMBgRthC\nE8Xy1QQW2skREYKd9O2yOMnxZgQwNnjNwSWAbG36mMMmkork+HNAaR9cC4+TSzJn\nTqOWulpG8WhqvmMTFISZblCPujw9G5qX9A+jqcqELdiVFewdN34MAvkQ9Pjsz3iI\nFki7jUPIAu0sEOjvK9Pj5yqDjGyblUsa+nD7n7doZX9FL6U4NQJO2imLt+W9Iq8=\n=cSPI\n-----END PGP SIGNATURE-----",
        "payload": "tree dd935af29fccfd6d8f97beb90b50ae605f6f56e5\nparent c8ea91aa1d16829c668448d0a4778d370110289d\nparent 9c5a4a6ed8024fa7d83dad0507231ca34494a6ac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520276888 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520276995 +0100\n\nMerge #11880: Stop special-casing phashBlock handling in validation for TBV\n\n9c5a4a6ed Stop special-casing phashBlock handling in validation for TBV (Matt Corallo)\n\nPull request description:\n\n  There is no reason to do this, really, we already have \"ignore PoW\" flags. Motivated by https://github.com/bitcoin/bitcoin/pull/11739#discussion_r155841721\n\nTree-SHA512: 37cb1ae5b11c9e8ed7a679bb07ad3b119a2a014744b26d197d67ba21beb19fe6815271df935e40f7c7bd5f2e4d7ae4dad7bd4d00fa230a8d789f37e9de31a769\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d59b8d6aa1102ffac980c89e96105ddec9cfb579",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d59b8d6aa1102ffac980c89e96105ddec9cfb579",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d59b8d6aa1102ffac980c89e96105ddec9cfb579/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8ea91aa1d16829c668448d0a4778d370110289d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8ea91aa1d16829c668448d0a4778d370110289d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8ea91aa1d16829c668448d0a4778d370110289d"
      },
      {
        "sha": "9c5a4a6ed8024fa7d83dad0507231ca34494a6ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c5a4a6ed8024fa7d83dad0507231ca34494a6ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c5a4a6ed8024fa7d83dad0507231ca34494a6ac"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a77362f5d678727cc7d331e7b52ca30dca45d8c7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d59b8d6aa1102ffac980c89e96105ddec9cfb579/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d59b8d6aa1102ffac980c89e96105ddec9cfb579/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d59b8d6aa1102ffac980c89e96105ddec9cfb579",
        "patch": "@@ -1773,9 +1773,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n-    // pindex->phashBlock can be null if called by CreateNewBlock/TestBlockValidity\n-    assert((pindex->phashBlock == nullptr) ||\n-           (*pindex->phashBlock == block.GetHash()));\n+    assert(*pindex->phashBlock == block.GetHash());\n     int64_t nTimeStart = GetTimeMicros();\n \n     // Check it again in case a previous version let a bad block in\n@@ -1849,8 +1847,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n     // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n     // initial block download.\n-    bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+    bool fEnforceBIP30 = !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n                            (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256S(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n \n     // Once BIP34 activated it was not possible to create new duplicate coinbases and thus other than starting\n@@ -3434,9 +3431,11 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n     CCoinsViewCache viewNew(pcoinsTip.get());\n+    uint256 block_hash(block.GetHash());\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n+    indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n     if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))"
      }
    ]
  },
  {
    "sha": "9a75902c568a5471d83854c63514b4d151c15f92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTc1OTAyYzU2OGE1NDcxZDgzODU0YzYzNTE0YjRkMTUxYzE1Zjky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:42:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T19:42:50Z"
      },
      "message": "Merge #11995: [depends] Fix Qt build with Xcode 9\n\n2b1f79457 [Depends] Fix Qt build with Xcode 9.2 (fanquake)\n\nPull request description:\n\n  Building Qt in depends is currently broken with versions of Xcode > 9.0 (on both 10.12.x and 10.13.x). We'll bump our Clang/Qt/SDK again soon, however this fixes building in the interim.\n\n  Fixes #11461\n  Related upstream issues: https://bugreports.qt.io/browse/QTBUG-63401, https://bugreports.qt.io/browse/QTBUG-62266.\n\nTree-SHA512: b1aaa50580c5180bbae2d79f5618c145667edd824b66c20851c7346674a1700267d6df249ba559d781941def312f7867bc3950f673e9128ffd4beda2965ca639",
      "tree": {
        "sha": "49cb781d328d9ba4229d8e0f817e72b67c4eeb5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49cb781d328d9ba4229d8e0f817e72b67c4eeb5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a75902c568a5471d83854c63514b4d151c15f92",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanZ26AAoJEB5K7WKYbNJdaC8H/ju1SNLe6GfXtfn5P/o3vVG+\nAmHyWrTuTs65T+vd+JHJBLLEYqLudtzmBPBUn9aKzCQFJv4fnOSja2vrp3a89GS1\nYNaSxUwAqCHIi7K+CfRhYHIJ50mwsMBIMXSu1NwUruYGvUaFikwC2DpjY8kayawR\n+tSDSmh0seAp/i8lKKrpYssxjp3MI5b7SGbWpjtDt0n9g8+MThqIXvEXOLggmS2V\nr48KNAzI0lPguQUNtQDPg0FDIE3ZHfVxgMDFv12gE2yV9HjFT7KJI/RCpm1zeD7K\nAPr+S3V7bKwNQFLK3sRuv0WkjtDadsqWXDlD0OoTFFH5zyMqdRAdvT/oXZL3zXo=\n=EUX2\n-----END PGP SIGNATURE-----",
        "payload": "tree 49cb781d328d9ba4229d8e0f817e72b67c4eeb5c\nparent d59b8d6aa1102ffac980c89e96105ddec9cfb579\nparent 2b1f7945747b59215b5f07573cf6cae4a269d3bf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520278938 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520278970 +0100\n\nMerge #11995: [depends] Fix Qt build with Xcode 9\n\n2b1f79457 [Depends] Fix Qt build with Xcode 9.2 (fanquake)\n\nPull request description:\n\n  Building Qt in depends is currently broken with versions of Xcode > 9.0 (on both 10.12.x and 10.13.x). We'll bump our Clang/Qt/SDK again soon, however this fixes building in the interim.\n\n  Fixes #11461\n  Related upstream issues: https://bugreports.qt.io/browse/QTBUG-63401, https://bugreports.qt.io/browse/QTBUG-62266.\n\nTree-SHA512: b1aaa50580c5180bbae2d79f5618c145667edd824b66c20851c7346674a1700267d6df249ba559d781941def312f7867bc3950f673e9128ffd4beda2965ca639\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a75902c568a5471d83854c63514b4d151c15f92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a75902c568a5471d83854c63514b4d151c15f92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a75902c568a5471d83854c63514b4d151c15f92/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d59b8d6aa1102ffac980c89e96105ddec9cfb579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d59b8d6aa1102ffac980c89e96105ddec9cfb579",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d59b8d6aa1102ffac980c89e96105ddec9cfb579"
      },
      {
        "sha": "2b1f7945747b59215b5f07573cf6cae4a269d3bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b1f7945747b59215b5f07573cf6cae4a269d3bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b1f7945747b59215b5f07573cf6cae4a269d3bf"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 72,
      "deletions": 1
    },
    "files": [
      {
        "sha": "849192755281382b5477deca982e94a2ed204394",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a75902c568a5471d83854c63514b4d151c15f92/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a75902c568a5471d83854c63514b4d151c15f92/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=9a75902c568a5471d83854c63514b4d151c15f92",
        "patch": "@@ -8,7 +8,7 @@ $(package)_dependencies=openssl zlib\n $(package)_linux_dependencies=freetype fontconfig libxcb libX11 xproto libXext\n $(package)_build_subdir=qtbase\n $(package)_qt_libs=corelib network widgets gui plugins testlib\n-$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch\n+$(package)_patches=mac-qmake.conf mingw-uuidof.patch pidlist_absolute.patch fix-xcb-include-order.patch fix_qt_pkgconfig.patch fix-cocoahelpers-macos.patch\n \n $(package)_qttranslations_file_name=qttranslations-$($(package)_suffix)\n $(package)_qttranslations_sha256_hash=3a15aebd523c6d89fb97b2d3df866c94149653a26d27a00aac9b6d3020bc5a1d\n@@ -140,6 +140,7 @@ define $(package)_preprocess_cmds\n   patch -p1 < $($(package)_patch_dir)/pidlist_absolute.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n   patch -p1 < $($(package)_patch_dir)/fix_qt_pkgconfig.patch && \\\n+  patch -p1 < $($(package)_patch_dir)/fix-cocoahelpers-macos.patch && \\\n   echo \"!host_build: QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n   echo \"!host_build: QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\"
      },
      {
        "sha": "1b43a9eff8fe924961b3962ee0d892ae5553c75c",
        "filename": "depends/patches/qt/fix-cocoahelpers-macos.patch",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a75902c568a5471d83854c63514b4d151c15f92/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a75902c568a5471d83854c63514b4d151c15f92/depends/patches/qt/fix-cocoahelpers-macos.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix-cocoahelpers-macos.patch?ref=9a75902c568a5471d83854c63514b4d151c15f92",
        "patch": "@@ -0,0 +1,70 @@\n+From 0707260a4f8e64dfadf1df5f935e74cabb7c7d27 Mon Sep 17 00:00:00 2001\n+From: Jake Petroules <jake.petroules@qt.io>\n+Date: Sun, 1 Oct 2017 21:48:17 -0700\n+Subject: [PATCH] Fix build error with macOS 10.13 SDK\n+MIME-Version: 1.0\n+Content-Type: text/plain; charset=utf8\n+Content-Transfer-Encoding: 8bit\n+\n+Several of these variables/macros are no longer defined. We didn't\n+validate the preconditions on iOS, tvOS, or watchOS, so no\n+need to bother validating them on macOS either. Nor did we check the\n+OSStatus result on any platform anyways.\n+\n+Task-number: QTBUG-63401\n+Change-Id: Ife64dff767cf6d3f4b839fc53ec486181c176bf3\n+(cherry-picked from 861544583511d4e6f7745d2339b26ff1cd44132b)\n+Reviewed-by: Timur Pocheptsov <timur.pocheptsov@qt.io>\n+Reviewed-by: Tor Arne Vestb\u00c3\u00b8 <tor.arne.vestbo@qt.io>\n+---\n+ src/plugins/platforms/cocoa/qcocoahelpers.h  |  2 +-\n+ src/plugins/platforms/cocoa/qcocoahelpers.mm | 13 +------------\n+ 2 files changed, 2 insertions(+), 13 deletions(-)\n+\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+index bbb3793..74371d5 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.h\n+@@ -80,7 +80,7 @@ QColor qt_mac_toQColor(CGColorRef color);\n+ // Creates a mutable shape, it's the caller's responsibility to release.\n+ HIMutableShapeRef qt_mac_QRegionToHIMutableShape(const QRegion &region);\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage);\n+ \n+ NSDragOperation qt_mac_mapDropAction(Qt::DropAction action);\n+ NSDragOperation qt_mac_mapDropActions(Qt::DropActions actions);\n+diff --git old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+index cd73148..3f8429e 100644\n+--- old/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n++++ new/qtbase/src/plugins/platforms/cocoa/qcocoahelpers.mm\n+@@ -544,15 +544,8 @@ NSRect qt_mac_flipRect(const QRect &rect)\n+     return NSMakeRect(rect.x(), flippedY, rect.width(), rect.height());\n+ }\n+ \n+-OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n++void qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGImageRef inImage)\n+ {\n+-    // Verbatim copy if HIViewDrawCGImage (as shown on Carbon-Dev)\n+-    OSStatus err = noErr;\n+-\n+-    require_action(inContext != NULL, InvalidContext, err = paramErr);\n+-    require_action(inBounds != NULL, InvalidBounds, err = paramErr);\n+-    require_action(inImage != NULL, InvalidImage, err = paramErr);\n+-\n+     CGContextSaveGState( inContext );\n+     CGContextTranslateCTM (inContext, 0, inBounds->origin.y + CGRectGetMaxY(*inBounds));\n+     CGContextScaleCTM(inContext, 1, -1);\n+@@ -560,10 +553,6 @@ OSStatus qt_mac_drawCGImage(CGContextRef inContext, const CGRect *inBounds, CGIm\n+     CGContextDrawImage(inContext, *inBounds, inImage);\n+ \n+     CGContextRestoreGState(inContext);\n+-InvalidImage:\n+-InvalidBounds:\n+-InvalidContext:\n+-        return err;\n+ }\n+ \n+ Qt::MouseButton cocoaButton2QtButton(NSInteger buttonNum)\n+-- \n+2.7.4"
      }
    ]
  },
  {
    "sha": "8f79226361db779e7f9f1fe0567e76152c407e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Zjc5MjI2MzYxZGI3NzllN2Y5ZjFmZTA1NjdlNzYxNTJjNDA3ZTkw",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-12-22T09:40:30Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T20:08:24Z"
      },
      "message": "depends: zeromq 4.2.3",
      "tree": {
        "sha": "b6c172cc0e0971ea972119eb6da557412c7045f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6c172cc0e0971ea972119eb6da557412c7045f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f79226361db779e7f9f1fe0567e76152c407e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f79226361db779e7f9f1fe0567e76152c407e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f79226361db779e7f9f1fe0567e76152c407e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f79226361db779e7f9f1fe0567e76152c407e90/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a75902c568a5471d83854c63514b4d151c15f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a75902c568a5471d83854c63514b4d151c15f92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a75902c568a5471d83854c63514b4d151c15f92"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "85118739ce98051d30e679e9b0dc1be6aa31c955",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f79226361db779e7f9f1fe0567e76152c407e90/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f79226361db779e7f9f1fe0567e76152c407e90/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=8f79226361db779e7f9f1fe0567e76152c407e90",
        "patch": "@@ -1,8 +1,8 @@\n package=zeromq\n-$(package)_version=4.2.2\n+$(package)_version=4.2.3\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n+$(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n $(package)_patches=0001-fix-build-with-older-mingw64.patch\n \n define $(package)_set_vars"
      },
      {
        "sha": "05518bf819cd23e7d120a728e7ae82472ea42a5e",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f79226361db779e7f9f1fe0567e76152c407e90/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f79226361db779e7f9f1fe0567e76152c407e90/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=8f79226361db779e7f9f1fe0567e76152c407e90",
        "patch": "@@ -27,5 +27,5 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Qt | [5.7.1](https://download.qt.io/official_releases/qt/) | 4.7+ | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L94) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L93) (Linux only) |\n-| ZeroMQ | [4.2.2](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| ZeroMQ | [4.2.3](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n | zlib | [1.2.11](http://zlib.net/) |  |  |  | No |"
      }
    ]
  },
  {
    "sha": "13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2EzOTlhNDZjMGMzYmE3OGE2YzBiYTA2YzU4MTg2ZGZhZjliZTJj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2018-03-05T19:45:48Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T20:08:31Z"
      },
      "message": "depends: patch pthread_set_name_np out of zeromq",
      "tree": {
        "sha": "f3527dcac2cc28f61f090d56775725af8faae3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f3527dcac2cc28f61f090d56775725af8faae3ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f79226361db779e7f9f1fe0567e76152c407e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f79226361db779e7f9f1fe0567e76152c407e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f79226361db779e7f9f1fe0567e76152c407e90"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 37,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cde523370f0e4ca32e91b327e8d6b12f5b96dfd5",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
        "patch": "@@ -3,7 +3,7 @@ $(package)_version=4.2.3\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n $(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n-$(package)_patches=0001-fix-build-with-older-mingw64.patch\n+$(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n@@ -13,7 +13,7 @@ endef\n \n define $(package)_preprocess_cmds\n    patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n-  ./autogen.sh\n+   patch -p1 < $($(package)_patch_dir)/0002-disable-pthread_set_name_np.patch\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "d220b54f3ecdbae3605be72dbcd0c6b2c5ee85f7",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
        "patch": "@@ -0,0 +1,35 @@\n+From 6e6b47d5ab381c3df3b30bb0b0a6cf210dfb1eba Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Mon, 5 Mar 2018 14:22:05 -0500\n+Subject: [PATCH] disable pthread_set_name_np\n+\n+pthread_set_name_np adds a Glibc requirement on >= 2.12.\n+---\n+ src/thread.cpp | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/src/thread.cpp b/src/thread.cpp\n+index 4fc59c3e..c3fdfd46 100644\n+--- a/src/thread.cpp\n++++ b/src/thread.cpp\n+@@ -220,7 +220,7 @@ void zmq::thread_t::setThreadName(const char *name_)\n+  */\n+     if (!name_)\n+         return;\n+-\n++#if 0\n+ #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n+     int rc = pthread_setname_np(name_);\n+     if(rc) return;\n+@@ -233,6 +233,8 @@ void zmq::thread_t::setThreadName(const char *name_)\n+ #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n+     pthread_set_name_np(descriptor, name_);\n+ #endif\n++#endif\n++    return;\n+ }\n+ \n+ #endif\n+-- \n+2.11.1\n+"
      }
    ]
  },
  {
    "sha": "955fd23517bf4fd4facad2c7cd848bf01abc2baa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTVmZDIzNTE3YmY0ZmQ0ZmFjYWQyYzdjZDg0OGJmMDFhYmMyYmFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T21:07:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T21:08:19Z"
      },
      "message": "Merge #12512: Don't test against the mempool min fee information in mempool_limit.py\n\n55f89da1a Don't test against the mempool min fee information in mempool_limit.py (Ben Woosley)\n\nPull request description:\n\n  Because the right-hand side of this comparison can be influenced\n  externally, e.g. via the -maxmempool argument, the existing mempool state,\n  host memory usage, etc.\n\n  Called out by @MarcoFalke here: https://github.com/bitcoin/bitcoin/pull/12356#discussion_r170094948\n\nTree-SHA512: 1644cb8046a6953fb93423a5e51af4f5c7d00a35f10389fddd6a823dae6f31ab367b53af70b3b69161adb9c48f57cf4772db7f4610fd7aadd9c0e9b3da17e9f8",
      "tree": {
        "sha": "d5506dfbeae23efd6fd924ff060c2a460eca63a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5506dfbeae23efd6fd924ff060c2a460eca63a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/955fd23517bf4fd4facad2c7cd848bf01abc2baa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanbHDAAoJEB5K7WKYbNJdGRAIAIJccxy86gcbGCDp8fer3gvs\nxy+ugcluNgFFpP6hZVcCy0wCmBgSAL8hrllsM1P6avLP4iiJkbraHzcWflrzvP9Y\nZHEu72sE4SICK1hyJdrWnkWFeRtIqhEvYuqWUYqm5tb1cpktNtKkiGxVJd5p8NHj\nkW2Vl6xix8MmjYRrRJ0ICltUyAmBh1N6+oUV5wFosCor0lFECK9woTLFC/Z6DMxx\niIVbx72ArWk8z8QelRnaUcOc6DvJVLRTZRHMcbjfgI9ESEdkn/PPaSAh3FToaFKL\nesf4LGSHRfrmQ5FuXULwGnm3ySRyyoLjJQNQrmE2chtjjpR4ySq7kSrqFIfUPXI=\n=Di2L\n-----END PGP SIGNATURE-----",
        "payload": "tree d5506dfbeae23efd6fd924ff060c2a460eca63a2\nparent 9a75902c568a5471d83854c63514b4d151c15f92\nparent 55f89da1a5048cf275c37bceef664e7c04831a35\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520284079 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520284099 +0100\n\nMerge #12512: Don't test against the mempool min fee information in mempool_limit.py\n\n55f89da1a Don't test against the mempool min fee information in mempool_limit.py (Ben Woosley)\n\nPull request description:\n\n  Because the right-hand side of this comparison can be influenced\n  externally, e.g. via the -maxmempool argument, the existing mempool state,\n  host memory usage, etc.\n\n  Called out by @MarcoFalke here: https://github.com/bitcoin/bitcoin/pull/12356#discussion_r170094948\n\nTree-SHA512: 1644cb8046a6953fb93423a5e51af4f5c7d00a35f10389fddd6a823dae6f31ab367b53af70b3b69161adb9c48f57cf4772db7f4610fd7aadd9c0e9b3da17e9f8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955fd23517bf4fd4facad2c7cd848bf01abc2baa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/955fd23517bf4fd4facad2c7cd848bf01abc2baa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955fd23517bf4fd4facad2c7cd848bf01abc2baa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a75902c568a5471d83854c63514b4d151c15f92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a75902c568a5471d83854c63514b4d151c15f92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a75902c568a5471d83854c63514b4d151c15f92"
      },
      {
        "sha": "55f89da1a5048cf275c37bceef664e7c04831a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55f89da1a5048cf275c37bceef664e7c04831a35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55f89da1a5048cf275c37bceef664e7c04831a35"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5382fe439e4edb6eb34991a19935cf910bfcc049",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/955fd23517bf4fd4facad2c7cd848bf01abc2baa/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/955fd23517bf4fd4facad2c7cd848bf01abc2baa/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=955fd23517bf4fd4facad2c7cd848bf01abc2baa",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         # specifically fund this tx with a fee < mempoolminfee, >= than minrelaytxfee\n         txF = self.nodes[0].fundrawtransaction(tx, {'feeRate': relayfee})\n         txFS = self.nodes[0].signrawtransactionwithwallet(txF['hex'])\n-        assert_raises_rpc_error(-26, \"mempool min fee not met, 166 < 411 (code 66)\", self.nodes[0].sendrawtransaction, txFS['hex'])\n+        assert_raises_rpc_error(-26, \"mempool min fee not met\", self.nodes[0].sendrawtransaction, txFS['hex'])\n \n if __name__ == '__main__':\n     MempoolLimitTest().main()"
      }
    ]
  },
  {
    "sha": "ed6ae8059cdbad60466807a7cfb23e5540a50051",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDZhZTgwNTljZGJhZDYwNDY2ODA3YTdjZmIyM2U1NTQwYTUwMDUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T21:35:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-05T21:37:47Z"
      },
      "message": "Merge #12568: Allow dustrelayfee to be set to zero\n\n874e81808 Allow dustrelayfee to be set to zero (Luke Dashjr)\n\nPull request description:\n\n  I don't see and can't think of any rationale for forbidding this configuration.\n\nTree-SHA512: df09441f4aec63e79bea94838b7f8e336cebaeb0a22b5e58d27937bbeb1377f229921aeae43674e0b63fc40a39ae51a264d48aa1cdb4cbd0e3339d32856698bf",
      "tree": {
        "sha": "9df5bb07a002b66647449b3d37be64c9a46f2a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9df5bb07a002b66647449b3d37be64c9a46f2a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanbirAAoJEB5K7WKYbNJd0NYH/RGMzmItSAcFw28uXbXYbYn2\nez7s5k6rq3vn0uxF/wQ0nYXfFIXzuG7Gb2ZZCrxxztTtZhD+jDC6vSNMR+dyh6DS\ngbx3wGGP5RyUu7lt+gnTUF4ixzaoTl9O9bORSoh371K5Ga6mg/jSlUPi1mwKAobH\nytyoifjlKAQJVyVh+ktDC2C/jpG2br3sZSiUl8R93lgmUMXDGaJLaOYyfZbRP3gJ\nU4YihNtPmNer85pV1gUa14hJaWF/pM/qV98pja/LxwzTNd7jmkvQwiwEbzVi346I\ncPAZN13wblyGfIGaSzmzlHdvlmBnuz3P9MhQMxocyo80NXtVqZzeSfIDWYVPHRY=\n=eQUS\n-----END PGP SIGNATURE-----",
        "payload": "tree 9df5bb07a002b66647449b3d37be64c9a46f2a13\nparent 955fd23517bf4fd4facad2c7cd848bf01abc2baa\nparent 874e8180858450e7cc597e8ed9b047c35e000dda\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520285750 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520285867 +0100\n\nMerge #12568: Allow dustrelayfee to be set to zero\n\n874e81808 Allow dustrelayfee to be set to zero (Luke Dashjr)\n\nPull request description:\n\n  I don't see and can't think of any rationale for forbidding this configuration.\n\nTree-SHA512: df09441f4aec63e79bea94838b7f8e336cebaeb0a22b5e58d27937bbeb1377f229921aeae43674e0b63fc40a39ae51a264d48aa1cdb4cbd0e3339d32856698bf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6ae8059cdbad60466807a7cfb23e5540a50051",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "955fd23517bf4fd4facad2c7cd848bf01abc2baa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/955fd23517bf4fd4facad2c7cd848bf01abc2baa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/955fd23517bf4fd4facad2c7cd848bf01abc2baa"
      },
      {
        "sha": "874e8180858450e7cc597e8ed9b047c35e000dda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/874e8180858450e7cc597e8ed9b047c35e000dda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/874e8180858450e7cc597e8ed9b047c35e000dda"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f763c3a4357dd250326d28e2f5878053a39a0d95",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6ae8059cdbad60466807a7cfb23e5540a50051/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6ae8059cdbad60466807a7cfb23e5540a50051/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "patch": "@@ -1083,7 +1083,7 @@ bool AppInitParameterInteraction()\n     if (gArgs.IsArgSet(\"-dustrelayfee\"))\n     {\n         CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n) || 0 == n)\n+        if (!ParseMoney(gArgs.GetArg(\"-dustrelayfee\", \"\"), n))\n             return InitError(AmountErrMsg(\"dustrelayfee\", gArgs.GetArg(\"-dustrelayfee\", \"\")));\n         dustRelayFee = CFeeRate(n);\n     }"
      }
    ]
  },
  {
    "sha": "741f0177c53ae536801a67c8ec194d6be3505d2d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDFmMDE3N2M1M2FlNTM2ODAxYTY3YzhlYzE5NGQ2YmUzNTA1ZDJk",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-05T19:24:12Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-06T05:25:39Z"
      },
      "message": "Add DynamicMemoryUsage() to LevelDB\n\nThis adds a DynamicMemoryUsage() method similar to the existing methods\nof the same name, and adds logging of memory usage to\nCDBWrapper::WriteBatch.",
      "tree": {
        "sha": "78ede3487e47ecbce7c72b54e4d444d73d526afb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78ede3487e47ecbce7c72b54e4d444d73d526afb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741f0177c53ae536801a67c8ec194d6be3505d2d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741f0177c53ae536801a67c8ec194d6be3505d2d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/741f0177c53ae536801a67c8ec194d6be3505d2d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741f0177c53ae536801a67c8ec194d6be3505d2d/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a7666dbe385cf138fa3cc0d48bb04507d11af2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7666dbe385cf138fa3cc0d48bb04507d11af2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a7666dbe385cf138fa3cc0d48bb04507d11af2"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6cac625abc822b6b0b8b22d7966c2c9a264960a7",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/741f0177c53ae536801a67c8ec194d6be3505d2d/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/741f0177c53ae536801a67c8ec194d6be3505d2d/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=741f0177c53ae536801a67c8ec194d6be3505d2d",
        "patch": "@@ -89,6 +89,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+    : m_name(fs::basename(path))\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n@@ -155,11 +156,30 @@ CDBWrapper::~CDBWrapper()\n \n bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n+    const bool log_memory = LogAcceptCategory(BCLog::LEVELDB);\n+    double mem_before = 0;\n+    if (log_memory) {\n+        mem_before = DynamicMemoryUsage() / 1024 / 1024;\n+    }\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     dbwrapper_private::HandleError(status);\n+    if (log_memory) {\n+        double mem_after = DynamicMemoryUsage() / 1024 / 1024;\n+        LogPrint(BCLog::LEVELDB, \"WriteBatch memory usage: db=%s, before=%.1fMiB, after=%.1fMiB\\n\",\n+                 m_name, mem_before, mem_after);\n+    }\n     return true;\n }\n \n+size_t CDBWrapper::DynamicMemoryUsage() const {\n+    std::string memory;\n+    if (!pdb->GetProperty(\"leveldb.approximate-memory-usage\", &memory)) {\n+        LogPrint(BCLog::LEVELDB, \"Failed to get approximate-memory-usage property\\n\");\n+        return 0;\n+    }\n+    return stoul(memory);\n+}\n+\n // Prefixed with null character to avoid collisions with other keys\n //\n // We must use a string constructor which specifies length so that we copy"
      },
      {
        "sha": "6f80eedc7a4b235d127c6bf8dedb9461f4d7aa96",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/741f0177c53ae536801a67c8ec194d6be3505d2d/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/741f0177c53ae536801a67c8ec194d6be3505d2d/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=741f0177c53ae536801a67c8ec194d6be3505d2d",
        "patch": "@@ -198,6 +198,9 @@ class CDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! the name of this database\n+    std::string m_name;\n+\n     //! a key used for optional XOR-obfuscation of the database\n     std::vector<unsigned char> obfuscate_key;\n \n@@ -284,6 +287,9 @@ class CDBWrapper\n \n     bool WriteBatch(CDBBatch& batch, bool fSync = false);\n \n+    // Get an estimate of LevelDB memory usage (in bytes).\n+    size_t DynamicMemoryUsage() const;\n+\n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {"
      }
    ]
  },
  {
    "sha": "7deba93bdc76616011a9f493cbc203d60084416f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGViYTkzYmRjNzY2MTYwMTFhOWY0OTNjYmMyMDNkNjAwODQ0MTZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T13:59:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T14:03:00Z"
      },
      "message": "test: Update trust git root\n\nMarco Falke's old key expired, causing a travis error while verifying\ncommits 36afd4db4442c45d4078b1a7ad16a1872b5bee0d and before:\n\n    gpg: Good signature from \"Marco Falke <marco.falke@tum.de>\" [unknown]\n    gpg:                 aka \"Marco Falke <falke.marco@gmail.com>\" [unknown]\n    gpg: Note: This key has expired!\n    Primary key fingerprint: B8B3 F1C0 E58C 15DB 6A81  D30C 3648 A882 F431 6B9B\n      Subkey fingerprint: FE09 B823 E6D8 3A3B C798  3EAA 2D7F 2372 E50F E137\n\nUpdate the trusted root commit to the commit after that, to fix\nthis issue.\n\nTree-SHA512: 41e5913728099b131f73f8b4621cf6474d8914b2ffd524be8bac356426820f58016cc427fb32d043367688c8dbb60c26a7e34756589b61d0ba4ca3f8529a300f",
      "tree": {
        "sha": "4234f6879c21b85c6876da6a1c914e905ab6523f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4234f6879c21b85c6876da6a1c914e905ab6523f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7deba93bdc76616011a9f493cbc203d60084416f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanp+VAAoJEB5K7WKYbNJdibAH/0Xzmk6Tm5CsbbadntOQrp/P\n7yGyH2Ajm0AZDJp5LkpN1XlNJLQkdWINdehxuJvl1wz4m2ldiXJwwQY4XZQNX7la\nThCGG0P3c5bTh1iV8vc/KGTBOihUZKO3v6qxZQYxhCmDv6fYQ1qE3bn0k+yqj6cE\nV0h6gfuEaLJ77XVX2JLVOs1s5ueXu6jaDe5BqacF+IAH6TqFDxJP5Ol07KbOOe04\nR20LUZhZD4OXFtx2+JfDMlcxDIQhfefhJaI3JqLCC8QyHuJpt1jInoUBuV0JGSqO\nHbB73t0/sjSts988UTu4XuhwoAXkLYu6v66j1I1VF4tCKbtuXl5Pw3NOWdns440=\n=p2If\n-----END PGP SIGNATURE-----",
        "payload": "tree 4234f6879c21b85c6876da6a1c914e905ab6523f\nparent ed6ae8059cdbad60466807a7cfb23e5540a50051\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520344759 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520344980 +0100\n\ntest: Update trust git root\n\nMarco Falke's old key expired, causing a travis error while verifying\ncommits 36afd4db4442c45d4078b1a7ad16a1872b5bee0d and before:\n\n    gpg: Good signature from \"Marco Falke <marco.falke@tum.de>\" [unknown]\n    gpg:                 aka \"Marco Falke <falke.marco@gmail.com>\" [unknown]\n    gpg: Note: This key has expired!\n    Primary key fingerprint: B8B3 F1C0 E58C 15DB 6A81  D30C 3648 A882 F431 6B9B\n      Subkey fingerprint: FE09 B823 E6D8 3A3B C798  3EAA 2D7F 2372 E50F E137\n\nUpdate the trusted root commit to the commit after that, to fix\nthis issue.\n\nTree-SHA512: 41e5913728099b131f73f8b4621cf6474d8914b2ffd524be8bac356426820f58016cc427fb32d043367688c8dbb60c26a7e34756589b61d0ba4ca3f8529a300f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7deba93bdc76616011a9f493cbc203d60084416f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7deba93bdc76616011a9f493cbc203d60084416f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7deba93bdc76616011a9f493cbc203d60084416f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6ae8059cdbad60466807a7cfb23e5540a50051"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e560b98d02f6071544c32d98b9f0d0cf7c805e76",
        "filename": "contrib/verify-commits/trusted-git-root",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7deba93bdc76616011a9f493cbc203d60084416f/contrib/verify-commits/trusted-git-root",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7deba93bdc76616011a9f493cbc203d60084416f/contrib/verify-commits/trusted-git-root",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-git-root?ref=7deba93bdc76616011a9f493cbc203d60084416f",
        "patch": "@@ -1 +1 @@\n-82bcf405f6db1d55b684a1f63a4aabad376cdad7\n+11049f4fe62606d1b0380a9ef800ac130f0fbadf"
      }
    ]
  },
  {
    "sha": "e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmIyZTQ4YjYzZGIwZmJiNDIwMzc1ZTkxYzdiNmRiZDczZTY5YWJk",
    "commit": {
      "author": {
        "name": "Ken Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-03-06T14:55:16Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2018-03-06T14:55:16Z"
      },
      "message": "doc: SIGNER can contains space inside now.\n\nSIGNER can contains space inside now. mentioned in https://github.com/bitcoin/bitcoin/pull/12527#issuecomment-370506416",
      "tree": {
        "sha": "6f5499768e2662a259d576cae231d1f5f97533f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f5499768e2662a259d576cae231d1f5f97533f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJanqvUCRBK7hj4Ov3rIwAAdHIIAFvGqqvPR2xdxF4tiEEgd8UD\npicpKjAt1Qh45oLOcRUN3b6qDhbcnVVh8n29EFOKLBPn9tTF9vEnI++3l3Y02zlJ\nJLi2/WP9Q9At90C52uyqFpqfugTtcHks8Oio+bh32L7v4DhxQTlTcMPyAEX1TpKr\nsONMnrtiGsyo8Z9wK/21uLDor/y6Y8QOyGgwSg8SSWpI8TNLvypwOsNtivghotIU\nybmeFDMtX6QyDsnvjzsQtOQOCt00x4fJW2fZdoDu2Eyei+n+vVKdh3ZDsKVz7hNQ\nwUybzeWtKoRuTQuUySsPrnk6Lxe4EkoEWmBdGs9pgtanQIdNymQHgkSYrXiPHGQ=\n=ZG5x\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 6f5499768e2662a259d576cae231d1f5f97533f0\nparent 7deba93bdc76616011a9f493cbc203d60084416f\nauthor Ken Lee <ken2812221@gmail.com> 1520348116 +0800\ncommitter GitHub <noreply@github.com> 1520348116 +0800\n\ndoc: SIGNER can contains space inside now.\n\nSIGNER can contains space inside now. mentioned in https://github.com/bitcoin/bitcoin/pull/12527#issuecomment-370506416"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7deba93bdc76616011a9f493cbc203d60084416f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7deba93bdc76616011a9f493cbc203d60084416f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7deba93bdc76616011a9f493cbc203d60084416f"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "20b43ba3ce9a902f23df2c722d5cca26f27e4b36",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
        "patch": "@@ -63,7 +63,7 @@ If you're using the automated script (found in [contrib/gitian-build.sh](/contri\n Setup Gitian descriptors:\n \n     pushd ./bitcoin\n-    export SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n+    export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n     export VERSION=(new version, e.g. 0.8.0)\n     git fetch\n     git checkout v${VERSION}\n@@ -113,16 +113,16 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n     pushd ./gitian-builder\n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n     mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n     mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n     popd\n@@ -152,9 +152,9 @@ Verify the signatures\n Commit your signature to gitian.sigs:\n \n     pushd gitian.sigs\n-    git add ${VERSION}-linux/${SIGNER}\n-    git add ${VERSION}-win-unsigned/${SIGNER}\n-    git add ${VERSION}-osx-unsigned/${SIGNER}\n+    git add ${VERSION}-linux/\"${SIGNER}\"\n+    git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+    git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n     git commit -a\n     git push  # Assuming you can push to the gitian.sigs tree\n     popd\n@@ -199,7 +199,7 @@ Create (and optionally verify) the signed OS X binary:\n \n     pushd ./gitian-builder\n     ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n     ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n     mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n     popd\n@@ -208,7 +208,7 @@ Create (and optionally verify) the signed Windows binaries:\n \n     pushd ./gitian-builder\n     ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n     ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n     mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n     mv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n@@ -217,8 +217,8 @@ Create (and optionally verify) the signed Windows binaries:\n Commit your signature for the signed OS X/Windows binaries:\n \n     pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/${SIGNER}\n-    git add ${VERSION}-win-signed/${SIGNER}\n+    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n+    git add ${VERSION}-win-signed/\"${SIGNER}\"\n     git commit -a\n     git push  # Assuming you can push to the gitian.sigs tree\n     popd"
      }
    ]
  },
  {
    "sha": "cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmRkODk1ODliMjcyNTI3ZGRmOTgxYTNmNjZlYzE3ODNkY2MyZGNk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-03-06T15:10:33Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-03-06T15:10:58Z"
      },
      "message": "qt: Set modal overlay hide button as default",
      "tree": {
        "sha": "1d07d315b068c2c37e93ac6999458babfde4d24a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d07d315b068c2c37e93ac6999458babfde4d24a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd89589b272527ddf981a3f66ec1783dcc2dcd/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6ae8059cdbad60466807a7cfb23e5540a50051"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b5a69c578d0682073727b399ecc24c58ddd2df31",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdd89589b272527ddf981a3f66ec1783dcc2dcd/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdd89589b272527ddf981a3f66ec1783dcc2dcd/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
        "patch": "@@ -351,6 +351,12 @@ QLabel { color: rgb(40,40,40);  }</string>\n              <property name=\"text\">\n               <string>Hide</string>\n              </property>\n+             <property name=\"focusPolicy\">\n+              <enum>Qt::StrongFocus</enum>\n+             </property>\n+             <property name=\"default\">\n+              <bool>true</bool>\n+             </property>\n             </widget>\n            </item>\n           </layout>"
      }
    ]
  },
  {
    "sha": "9903537750aca5c84a06d4157a3c27b7db3169d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTAzNTM3NzUwYWNhNWM4NGEwNmQ0MTU3YTNjMjdiN2RiMzE2OWQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T15:27:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T15:28:00Z"
      },
      "message": "Merge #12604: Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use\n\n741f0177c Add DynamicMemoryUsage() to LevelDB (Evan Klitzke)\n\nPull request description:\n\n  This adds a new method `CDBWrapper::DynamicMemoryUsage()` similar to Bitcoin's existing methods of the same name. It's implemented by asking LevelDB for the information, and then parsing the string response. I've also added logging to `CDBWrapper::WriteBatch()` to track this information:\n\n  ```\n  $ tail -f ~/.bitcoin/testnet3/debug.log | grep WriteBatch\n  2018-03-05 19:34:55 WriteBatch memory usage: db=chainstate, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:17 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:17 WriteBatch memory usage: db=chainstate, before=0.0MiB, after=8.0MiB\n  2018-03-05 19:35:22 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:22 WriteBatch memory usage: db=chainstate, before=8.0MiB, after=17.0MiB\n  2018-03-05 19:35:26 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:27 WriteBatch memory usage: db=chainstate, before=9.0MiB, after=18.0MiB\n  2018-03-05 19:35:40 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:41 WriteBatch memory usage: db=chainstate, before=9.0MiB, after=7.0MiB\n  2018-03-05 19:35:52 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:52 WriteBatch memory usage: db=chainstate, before=7.0MiB, after=9.0MiB\n  ^C\n  ```\n\n  As LevelDB doesn't seem to provide a way to get the database name, I've also added a new `m_name` field to the `CDBWrapper`. This is necessary because we have multiple LevelDB databases (two now, and possibly more later, e.g. #11857).\n\n  I am using this information in other branches where I'm experimenting with changing LevelDB buffer sizes.\n\nTree-SHA512: 7ea8ff5484bb07ef806af17d000c74ccca27d2e0f6c3229e12d93818f00874553335d87428482bd8acbcae81ea35aef2a243326f9fccbfac25989323d24391b4",
      "tree": {
        "sha": "9f547e09bdbc1bc73f29d6c8b6ba9871fc2fe1c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f547e09bdbc1bc73f29d6c8b6ba9871fc2fe1c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9903537750aca5c84a06d4157a3c27b7db3169d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanrOAAAoJEB5K7WKYbNJdw+sH/AnDTQEElFVX+8znFSSdC2Qi\nvBzeN/yH8im+Frj+8DHaiWZ5QlhCVuJrkxVC13gYnqmlRB8AU1pCcUhJ52OjEigW\nsqZs+mU++z1pOwE48xZpfDlNda7T5cfeOJb7dAPV/7tX7z3ATaYij0d1ME3y4hfr\nfJNSwkIMS0MHqwd9/0XgfjVBNzwemmUWNmA4iobzKmFdYgC3GKQDPF6k7o207UzH\nnfGHAZZMJn9RkYSN69Vu+OfroQl3lJAayBRJ94N6Xoa5fqPtz4Oyju3qoe+c37F1\nb5xliZNRlkF4Upi2IOSYO4xJy19Et+mUOUtQrC/ubB2t5nc8t1bK3KVcaugOWfw=\n=H3IH\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f547e09bdbc1bc73f29d6c8b6ba9871fc2fe1c8\nparent 7deba93bdc76616011a9f493cbc203d60084416f\nparent 741f0177c53ae536801a67c8ec194d6be3505d2d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520350034 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520350080 +0100\n\nMerge #12604: Add DynamicMemoryUsage() to CDBWrapper to estimate LevelDB memory use\n\n741f0177c Add DynamicMemoryUsage() to LevelDB (Evan Klitzke)\n\nPull request description:\n\n  This adds a new method `CDBWrapper::DynamicMemoryUsage()` similar to Bitcoin's existing methods of the same name. It's implemented by asking LevelDB for the information, and then parsing the string response. I've also added logging to `CDBWrapper::WriteBatch()` to track this information:\n\n  ```\n  $ tail -f ~/.bitcoin/testnet3/debug.log | grep WriteBatch\n  2018-03-05 19:34:55 WriteBatch memory usage: db=chainstate, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:17 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:17 WriteBatch memory usage: db=chainstate, before=0.0MiB, after=8.0MiB\n  2018-03-05 19:35:22 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:22 WriteBatch memory usage: db=chainstate, before=8.0MiB, after=17.0MiB\n  2018-03-05 19:35:26 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:27 WriteBatch memory usage: db=chainstate, before=9.0MiB, after=18.0MiB\n  2018-03-05 19:35:40 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:41 WriteBatch memory usage: db=chainstate, before=9.0MiB, after=7.0MiB\n  2018-03-05 19:35:52 WriteBatch memory usage: db=index, before=0.0MiB, after=0.0MiB\n  2018-03-05 19:35:52 WriteBatch memory usage: db=chainstate, before=7.0MiB, after=9.0MiB\n  ^C\n  ```\n\n  As LevelDB doesn't seem to provide a way to get the database name, I've also added a new `m_name` field to the `CDBWrapper`. This is necessary because we have multiple LevelDB databases (two now, and possibly more later, e.g. #11857).\n\n  I am using this information in other branches where I'm experimenting with changing LevelDB buffer sizes.\n\nTree-SHA512: 7ea8ff5484bb07ef806af17d000c74ccca27d2e0f6c3229e12d93818f00874553335d87428482bd8acbcae81ea35aef2a243326f9fccbfac25989323d24391b4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9903537750aca5c84a06d4157a3c27b7db3169d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9903537750aca5c84a06d4157a3c27b7db3169d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9903537750aca5c84a06d4157a3c27b7db3169d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7deba93bdc76616011a9f493cbc203d60084416f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7deba93bdc76616011a9f493cbc203d60084416f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7deba93bdc76616011a9f493cbc203d60084416f"
      },
      {
        "sha": "741f0177c53ae536801a67c8ec194d6be3505d2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741f0177c53ae536801a67c8ec194d6be3505d2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/741f0177c53ae536801a67c8ec194d6be3505d2d"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6cac625abc822b6b0b8b22d7966c2c9a264960a7",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9903537750aca5c84a06d4157a3c27b7db3169d3/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9903537750aca5c84a06d4157a3c27b7db3169d3/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=9903537750aca5c84a06d4157a3c27b7db3169d3",
        "patch": "@@ -89,6 +89,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n }\n \n CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+    : m_name(fs::basename(path))\n {\n     penv = nullptr;\n     readoptions.verify_checksums = true;\n@@ -155,11 +156,30 @@ CDBWrapper::~CDBWrapper()\n \n bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync)\n {\n+    const bool log_memory = LogAcceptCategory(BCLog::LEVELDB);\n+    double mem_before = 0;\n+    if (log_memory) {\n+        mem_before = DynamicMemoryUsage() / 1024 / 1024;\n+    }\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     dbwrapper_private::HandleError(status);\n+    if (log_memory) {\n+        double mem_after = DynamicMemoryUsage() / 1024 / 1024;\n+        LogPrint(BCLog::LEVELDB, \"WriteBatch memory usage: db=%s, before=%.1fMiB, after=%.1fMiB\\n\",\n+                 m_name, mem_before, mem_after);\n+    }\n     return true;\n }\n \n+size_t CDBWrapper::DynamicMemoryUsage() const {\n+    std::string memory;\n+    if (!pdb->GetProperty(\"leveldb.approximate-memory-usage\", &memory)) {\n+        LogPrint(BCLog::LEVELDB, \"Failed to get approximate-memory-usage property\\n\");\n+        return 0;\n+    }\n+    return stoul(memory);\n+}\n+\n // Prefixed with null character to avoid collisions with other keys\n //\n // We must use a string constructor which specifies length so that we copy"
      },
      {
        "sha": "6f80eedc7a4b235d127c6bf8dedb9461f4d7aa96",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9903537750aca5c84a06d4157a3c27b7db3169d3/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9903537750aca5c84a06d4157a3c27b7db3169d3/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=9903537750aca5c84a06d4157a3c27b7db3169d3",
        "patch": "@@ -198,6 +198,9 @@ class CDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! the name of this database\n+    std::string m_name;\n+\n     //! a key used for optional XOR-obfuscation of the database\n     std::vector<unsigned char> obfuscate_key;\n \n@@ -284,6 +287,9 @@ class CDBWrapper\n \n     bool WriteBatch(CDBBatch& batch, bool fSync = false);\n \n+    // Get an estimate of LevelDB memory usage (in bytes).\n+    size_t DynamicMemoryUsage() const;\n+\n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {"
      }
    ]
  },
  {
    "sha": "cc879675e16c310f3ce3f2387b7aa966e64e4352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzg3OTY3NWUxNmMzMTBmM2NlM2YyMzg3YjdhYTk2NmU2NGU0MzUy",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-05T22:23:35Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-03-06T15:37:42Z"
      },
      "message": "depends: Remove ccache",
      "tree": {
        "sha": "eb25bff671a0974f271173d4c7615e865020bb55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb25bff671a0974f271173d4c7615e865020bb55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc879675e16c310f3ce3f2387b7aa966e64e4352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc879675e16c310f3ce3f2387b7aa966e64e4352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc879675e16c310f3ce3f2387b7aa966e64e4352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc879675e16c310f3ce3f2387b7aa966e64e4352/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed6ae8059cdbad60466807a7cfb23e5540a50051"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 2,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b38c911a2e43aba1ec125aac482b92e39dc7824e",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc879675e16c310f3ce3f2387b7aa966e64e4352/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc879675e16c310f3ce3f2387b7aa966e64e4352/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "patch": "@@ -3,6 +3,7 @@ dist: trusty\n os: linux\n language: minimal\n cache:\n+  ccache: true\n   directories:\n   - depends/built\n   - depends/sdk-sources\n@@ -68,7 +69,7 @@ script:\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-    - if [ -z \"$NO_DEPENDS\" ]; then depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE; fi\n+    - if [ -z \"$NO_DEPENDS\" ]; then ccache --max-size=$CCACHE_SIZE; fi\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - mkdir build && cd build\n     - ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)"
      },
      {
        "sha": "8444dc26f27b26dd1cd489f276be2b31e4c1886e",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc879675e16c310f3ce3f2387b7aa966e64e4352/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc879675e16c310f3ce3f2387b7aa966e64e4352/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "patch": "@@ -64,7 +64,6 @@ LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n CC=\"@CC@\"\n CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n-CCACHE=$depends_prefix/native/bin/ccache\n PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then"
      },
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed6ae8059cdbad60466807a7cfb23e5540a50051/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed6ae8059cdbad60466807a7cfb23e5540a50051/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=ed6ae8059cdbad60466807a7cfb23e5540a50051",
        "patch": "@@ -1,25 +0,0 @@\n-package=native_ccache\n-$(package)_version=3.4.1\n-$(package)_download_path=https://samba.org/ftp/ccache\n-$(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n-\n-define $(package)_set_vars\n-$(package)_config_opts=\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf lib include\n-endef"
      },
      {
        "sha": "551c9fa70b6668f526067925ee1eee7de0e382d5",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc879675e16c310f3ce3f2387b7aa966e64e4352/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc879675e16c310f3ce3f2387b7aa966e64e4352/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "patch": "@@ -1,5 +1,4 @@\n packages:=boost openssl libevent zeromq\n-native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf zlib"
      },
      {
        "sha": "52ec8e3575a2e3a4abf769e02ab0b05112219b23",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc879675e16c310f3ce3f2387b7aa966e64e4352/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc879675e16c310f3ce3f2387b7aa966e64e4352/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "patch": "@@ -7,7 +7,6 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n | Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmJjMDk4NmZhMmQ0OWExY2I2NWI2MGVjYTcxYzI1Yzg0ODQyYTU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T15:39:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T15:47:31Z"
      },
      "message": "gui: Show messages as text not html\n\nCurrently, error messages (such as InitError) are displayed as-is, which\nmeans Qt does auto detection on the format.\n\nThis means that it's possible to inject HTML from the command line\nthough e.g. specifying a wallet name with HTML in it. This isn't\na direct security risk because fetching content from internet is\ndisabled (and as far as I know we never report strings received\nfrom the network this way). However, it can be confusing.\n\nSo explicitly force the format as text.",
      "tree": {
        "sha": "3ee61edb39dc3c10df345b6b062262d2ffa82e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ee61edb39dc3c10df345b6b062262d2ffa82e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fbc0986fa2d49a1cb65b60eca71c25c84842a54/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9903537750aca5c84a06d4157a3c27b7db3169d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9903537750aca5c84a06d4157a3c27b7db3169d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9903537750aca5c84a06d4157a3c27b7db3169d3"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "427eb95a84ac9a177deeddc2417f791100343fdb",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fbc0986fa2d49a1cb65b60eca71c25c84842a54/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fbc0986fa2d49a1cb65b60eca71c25c84842a54/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
        "patch": "@@ -923,6 +923,7 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n \n         showNormalIfMinimized();\n         QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n+        mBox.setTextFormat(Qt::PlainText);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;"
      }
    ]
  },
  {
    "sha": "e68172ed9fd0e35d4e848142e9b36ffcc41de254",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjgxNzJlZDlmZDBlMzVkNGU4NDgxNDJlOWIzNmZmY2M0MWRlMjU0",
    "commit": {
      "author": {
        "name": "Ethan Heilman",
        "email": "ethan@geographicslab.org",
        "date": "2016-10-27T17:55:39Z"
      },
      "committer": {
        "name": "e0",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2018-03-06T16:21:01Z"
      },
      "message": "Add test-before-evict discipline to addrman\n\nChanges addrman to use the test-before-evict discipline in which an\naddress is to be evicted from the tried table is first tested and if\nit is still online it is not evicted.\n\nAdds tests to provide test coverage for this change.\n\nThis change was suggested as Countermeasure 3 in\nEclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network, Ethan Heilman,\nAlison Kendler, Aviv Zohar, Sharon Goldberg. ePrint Archive Report\n2015/263. March 2015.",
      "tree": {
        "sha": "d7ce5da09cf039698d7e914e1144d304367f2d9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7ce5da09cf039698d7e914e1144d304367f2d9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e68172ed9fd0e35d4e848142e9b36ffcc41de254",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68172ed9fd0e35d4e848142e9b36ffcc41de254",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e68172ed9fd0e35d4e848142e9b36ffcc41de254",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68172ed9fd0e35d4e848142e9b36ffcc41de254/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3353de90598f08a68d966c50b57ceaeb5b5d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3353de90598f08a68d966c50b57ceaeb5b5d96"
      }
    ],
    "stats": {
      "total": 338,
      "additions": 319,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9a7fad490079863623df4afca6b54e1c0e101f99",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 4,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "patch": "@@ -187,7 +187,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n     info.fInTried = true;\n }\n \n-void CAddrMan::Good_(const CService& addr, int64_t nTime)\n+void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime)\n {\n     int nId;\n \n@@ -233,10 +233,22 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime)\n     if (nUBucket == -1)\n         return;\n \n-    LogPrint(BCLog::ADDRMAN, \"Moving %s to tried\\n\", addr.ToString());\n+    // which tried bucket to move the entry to\n+    int tried_bucket = info.GetTriedBucket(nKey);\n+    int tried_bucket_pos = info.GetBucketPosition(nKey, false, tried_bucket);\n+\n+    // Will moving this address into tried evict another entry?\n+    if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n+        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n+            m_tried_collisions.insert(nId);\n+        }\n+    } else {\n+        LogPrint(BCLog::ADDRMAN, \"Moving %s to tried\\n\", addr.ToString());\n \n-    // move nId to the tried tables\n-    MakeTried(info, nId);\n+        // move nId to the tried tables\n+        MakeTried(info, nId);\n+    }\n }\n \n bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n@@ -521,3 +533,82 @@ void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n int CAddrMan::RandomInt(int nMax){\n     return GetRandInt(nMax);\n }\n+\n+void CAddrMan::ResolveCollisions_()\n+{\n+    for (std::set<int>::iterator it = m_tried_collisions.begin(); it != m_tried_collisions.end();) {\n+        int id_new = *it;\n+\n+        bool erase_collision = false;\n+\n+        // If id_new not found in mapInfo remove it from m_tried_collisions\n+        if (mapInfo.count(id_new) != 1) {\n+            erase_collision = true;\n+        } else {\n+            CAddrInfo& info_new = mapInfo[id_new];\n+\n+            // Which tried bucket to move the entry to.\n+            int tried_bucket = info_new.GetTriedBucket(nKey);\n+            int tried_bucket_pos = info_new.GetBucketPosition(nKey, false, tried_bucket);\n+            if (!info_new.IsValid()) { // id_new may no longer map to a valid address\n+                erase_collision = true;\n+            } else if (vvTried[tried_bucket][tried_bucket_pos] != -1) { // The position in the tried bucket is not empty\n+\n+                // Get the to-be-evicted address that is being tested\n+                int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+                CAddrInfo& info_old = mapInfo[id_old];\n+\n+                // Has successfully connected in last X hours\n+                if (GetAdjustedTime() - info_old.nLastSuccess < ADDRMAN_REPLACEMENT_HOURS*(60*60)) {\n+                    erase_collision = true;\n+                } else if (GetAdjustedTime() - info_old.nLastTry < ADDRMAN_REPLACEMENT_HOURS*(60*60)) { // attempted to connect and failed in last X hours\n+\n+                    // Give address at least 60 seconds to successfully connect\n+                    if (GetAdjustedTime() - info_old.nLastTry > 60) {\n+                        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+\n+                        // Replaces an existing address already in the tried table with the new address\n+                        Good_(info_new, false, GetAdjustedTime());\n+                        erase_collision = true;\n+                    }\n+                }\n+            } else { // Collision is not actually a collision anymore\n+                Good_(info_new, false, GetAdjustedTime());\n+                erase_collision = true;\n+            }\n+        }\n+\n+        if (erase_collision) {\n+            m_tried_collisions.erase(it++);\n+        } else {\n+            it++;\n+        }\n+    }\n+}\n+\n+CAddrInfo CAddrMan::SelectTriedCollision_()\n+{\n+    if (m_tried_collisions.size() == 0) return CAddrInfo();\n+\n+    std::set<int>::iterator it = m_tried_collisions.begin();\n+\n+    // Selects a random element from m_tried_collisions\n+    std::advance(it, GetRandInt(m_tried_collisions.size()));\n+    int id_new = *it;\n+\n+    // If id_new not found in mapInfo remove it from m_tried_collisions\n+    if (mapInfo.count(id_new) != 1) {\n+        m_tried_collisions.erase(it);\n+        return CAddrInfo();\n+    }\n+\n+    CAddrInfo& newInfo = mapInfo[id_new];\n+\n+    // which tried bucket to move the entry to\n+    int tried_bucket = newInfo.GetTriedBucket(nKey);\n+    int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n+\n+    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+\n+    return mapInfo[id_old];\n+}"
      },
      {
        "sha": "67423c6c55baf3709a86f51fe94fa6c6a2bf0b24",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 40,
        "deletions": 3,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "patch": "@@ -165,6 +165,9 @@ class CAddrInfo : public CAddress\n //! ... in at least this many days\n #define ADDRMAN_MIN_FAIL_DAYS 7\n \n+//! how recent a successful connection should be before we allow an address to be evicted from tried\n+#define ADDRMAN_REPLACEMENT_HOURS 4\n+\n //! the maximum percentage of nodes to return in a getaddr call\n #define ADDRMAN_GETADDR_MAX_PCT 23\n \n@@ -176,6 +179,9 @@ class CAddrInfo : public CAddress\n #define ADDRMAN_NEW_BUCKET_COUNT (1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2)\n #define ADDRMAN_BUCKET_SIZE (1 << ADDRMAN_BUCKET_SIZE_LOG2)\n \n+//! the maximum number of tried addr collisions to store\n+#define ADDRMAN_SET_TRIED_COLLISION_SIZE 10\n+\n /** \n  * Stochastical (IP) address manager \n  */\n@@ -212,6 +218,9 @@ class CAddrMan\n     //! last time Good was called (memory only)\n     int64_t nLastGood;\n \n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discpline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -239,7 +248,7 @@ class CAddrMan\n     void ClearNew(int nUBucket, int nUBucketPos);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, int64_t nTime);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time);\n \n     //! Add an entry to the \"new\" table.\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n@@ -250,6 +259,12 @@ class CAddrMan\n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n     CAddrInfo Select_(bool newOnly);\n \n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions_();\n+\n+    //! Return a random to-be-evicted tried table address.\n+    CAddrInfo SelectTriedCollision_();\n+\n     //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n     virtual int RandomInt(int nMax);\n \n@@ -537,11 +552,11 @@ class CAddrMan\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n     {\n         LOCK(cs);\n         Check();\n-        Good_(addr, nTime);\n+        Good_(addr, test_before_evict, nTime);\n         Check();\n     }\n \n@@ -554,6 +569,28 @@ class CAddrMan\n         Check();\n     }\n \n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions()\n+    {\n+        LOCK(cs);\n+        Check();\n+        ResolveCollisions_();\n+        Check();\n+    }\n+\n+    //! Randomly select an address in tried that another address is attempting to evict.\n+    CAddrInfo SelectTriedCollision()\n+    {\n+        CAddrInfo ret;\n+        {\n+            LOCK(cs);\n+            Check();\n+            ret = SelectTriedCollision_();\n+            Check();\n+        }\n+        return ret;\n+    }\n+\n     /**\n      * Choose an address to connect to.\n      */"
      },
      {
        "sha": "e08ce0fd33370e96a4ecdeb14a45709526f85206",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "patch": "@@ -1824,11 +1824,18 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n+        addrman.ResolveCollisions();\n+\n         int64_t nANow = GetAdjustedTime();\n         int nTries = 0;\n         while (!interruptNet)\n         {\n-            CAddrInfo addr = addrman.Select(fFeeler);\n+            CAddrInfo addr = addrman.SelectTriedCollision();\n+\n+            // SelectTriedCollision returns an invalid address if it is empty.\n+            if (!fFeeler || !addr.IsValid()) {\n+                addr = addrman.Select(fFeeler);\n+            }\n \n             // if we selected an invalid address, restart\n             if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))"
      },
      {
        "sha": "0d8bd901195487f51fdcd93fdfad7a3fc3587e8c",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 176,
        "deletions": 11,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e68172ed9fd0e35d4e848142e9b36ffcc41de254/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "patch": "@@ -52,6 +52,17 @@ class CAddrManTest : public CAddrMan\n     {\n         CAddrMan::Delete(nId);\n     }\n+\n+    // Simulates connection failure so that we can test eviction of offline nodes\n+    void SimConnFail(CService& addr)\n+    {\n+         int64_t nLastSuccess = 1;\n+         Good_(addr, true, nLastSuccess); // Set last good connection in the deep past.\n+\n+         bool count_failure = false;\n+         int64_t nLastTry = GetAdjustedTime()-61;\n+         Attempt(addr, count_failure, nLastTry);\n+     }\n };\n \n static CNetAddr ResolveIP(const char* ip)\n@@ -226,7 +237,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0);\n \n     for (unsigned int i = 1; i < 18; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n \n         //Test: No collision in new table yet.\n@@ -252,7 +263,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0);\n \n     for (unsigned int i = 1; i < 80; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n@@ -385,7 +396,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;\n         int octet2 = i >> 8 % 256;\n-        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".1.23\";\n+        std::string strAddr = std::to_string(octet1) + \".\" + std::to_string(octet2) + \".1.23\";\n         CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n \n         // Ensure that for all addrs in addrman, isTerrible == false.\n@@ -436,8 +447,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n         int bucket = infoi.GetTriedBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -448,8 +459,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     buckets.clear();\n     for (int j = 0; j < 255; j++) {\n         CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.\" + boost::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(j) + \".1.1\"));\n+            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n         int bucket = infoj.GetTriedBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -488,8 +499,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n         int bucket = infoi.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -501,7 +512,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int j = 0; j < 4 * 255; j++) {\n         CAddrInfo infoj = CAddrInfo(CAddress(\n                                         ResolveService(\n-                                            boost::to_string(250 + (j / 255)) + \".\" + boost::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+                                            std::to_string(250 + (j / 255)) + \".\" + std::to_string(j % 256) + \".1.1\"), NODE_NONE),\n             ResolveIP(\"251.4.1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n@@ -514,12 +525,166 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int p = 0; p < 255; p++) {\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(p) + \".1.1\"));\n+            ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n     }\n     // Test: IP addresses in the different source groups should map to more\n     //  than 64 buckets.\n     BOOST_CHECK(buckets.size() > 64);\n }\n+\n+\n+BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Empty addrman should return blank addrman info.\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collisions yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Ensure Good handles duplicates well.\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Good(addr);\n+\n+        BOOST_CHECK(addrman.size() == 22);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_noevict)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collision yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Collision between 23 and 19.\n+    CService addr23 = ResolveService(\"250.1.1.23\");\n+    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    addrman.Good(addr23);\n+\n+    BOOST_CHECK(addrman.size() == 23);\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.19:0\");\n+\n+    // 23 should be discarded and 19 not evicted.\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Lets create two collisions.\n+    for (unsigned int i = 24; i < 33; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Cause a collision.\n+    CService addr33 = ResolveService(\"250.1.1.33\");\n+    addrman.Add(CAddress(addr33, NODE_NONE), source);\n+    addrman.Good(addr33);\n+    BOOST_CHECK(addrman.size() == 33);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.27:0\");\n+\n+    // Cause a second collision.\n+    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    addrman.Good(addr23);\n+    BOOST_CHECK(addrman.size() == 33);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() != \"[::]:0\");\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Empty addrman should return blank addrman info.\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collision yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Collision between 23 and 19.\n+    CService addr = ResolveService(\"250.1.1.23\");\n+    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    addrman.Good(addr);\n+\n+    BOOST_CHECK(addrman.size() == 23);\n+    CAddrInfo info = addrman.SelectTriedCollision();\n+    BOOST_CHECK(info.ToString() == \"250.1.1.19:0\");\n+\n+    // Ensure test of address fails, so that it is evicted.\n+    addrman.SimConnFail(info);\n+\n+    // Should swap 23 for 19.\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // If 23 was swapped for 19, then this should cause no collisions.\n+    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    addrman.Good(addr);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // If we insert 19 is should collide with 23.\n+    CService addr19 = ResolveService(\"250.1.1.19\");\n+    addrman.Add(CAddress(addr19, NODE_NONE), source);\n+    addrman.Good(addr19);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.23:0\");\n+\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+}\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1f9349129d5752919b02637c0331c6d6341044f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjkzNDkxMjlkNTc1MjkxOWIwMjYzN2MwMzMxYzZkNjM0MTA0NGY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T17:47:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T17:48:19Z"
      },
      "message": "Merge #12615: doc: allow for SIGNER containing spaces\n\ne2b2e48b6 doc: SIGNER can contains space inside now. (Ken Lee)\n\nPull request description:\n\n  SIGNER can contains space inside now. mentioned in https://github.com/bitcoin/bitcoin/pull/12527#issuecomment-370506416\n\nTree-SHA512: 8da1e8146751457c351058c0142fa3d474a338fe7304a31ebed4726202202724aaca94441806458512259238a703601b87961196abc3fdd57b5eb0f062ff0c12",
      "tree": {
        "sha": "3aedd167759a2d160fdcc264c61c1c4e7df30a2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aedd167759a2d160fdcc264c61c1c4e7df30a2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f9349129d5752919b02637c0331c6d6341044f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJantRjAAoJEB5K7WKYbNJdBH8H/jWtNN+5+OMSGAW4Q5nt3Sad\n8mvEim2XVT6WKo3mErmW6m5nw0jRencxStpugC7ztG+W6HJDglIbdF83yWQzZ/HW\nuMyl7K3Mwj4hWUYlzJ/cMQyuICvNlA3/gJwO/nSE2vUST/qPS/gRhAyCwuk4ypuP\nRRFt9pcpOqzEPYMj+xdQj9LHZmKurv/R064nZLEA6WbX6yIL3IWL9ZSjg9WUr6lk\nnS2F2s2tY7XbERxHJtGmi18DkGe0Pm8zbNqy7Ml40paBuTNAsAHqAJUMk7b+eiqu\nU0/0FPwArQOaGSTaLv/33kFcnJgTcTYlUN6TsjANkg0PPEw7VP030WyvTybLQWc=\n=fpD/\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aedd167759a2d160fdcc264c61c1c4e7df30a2d\nparent 9903537750aca5c84a06d4157a3c27b7db3169d3\nparent e2b2e48b63db0fbb420375e91c7b6dbd73e69abd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520358472 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520358499 +0100\n\nMerge #12615: doc: allow for SIGNER containing spaces\n\ne2b2e48b6 doc: SIGNER can contains space inside now. (Ken Lee)\n\nPull request description:\n\n  SIGNER can contains space inside now. mentioned in https://github.com/bitcoin/bitcoin/pull/12527#issuecomment-370506416\n\nTree-SHA512: 8da1e8146751457c351058c0142fa3d474a338fe7304a31ebed4726202202724aaca94441806458512259238a703601b87961196abc3fdd57b5eb0f062ff0c12\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9349129d5752919b02637c0331c6d6341044f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9349129d5752919b02637c0331c6d6341044f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9349129d5752919b02637c0331c6d6341044f6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9903537750aca5c84a06d4157a3c27b7db3169d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9903537750aca5c84a06d4157a3c27b7db3169d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9903537750aca5c84a06d4157a3c27b7db3169d3"
      },
      {
        "sha": "e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b2e48b63db0fbb420375e91c7b6dbd73e69abd"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "20b43ba3ce9a902f23df2c722d5cca26f27e4b36",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f9349129d5752919b02637c0331c6d6341044f6/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f9349129d5752919b02637c0331c6d6341044f6/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=1f9349129d5752919b02637c0331c6d6341044f6",
        "patch": "@@ -63,7 +63,7 @@ If you're using the automated script (found in [contrib/gitian-build.sh](/contri\n Setup Gitian descriptors:\n \n     pushd ./bitcoin\n-    export SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n+    export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n     export VERSION=(new version, e.g. 0.8.0)\n     git fetch\n     git checkout v${VERSION}\n@@ -113,16 +113,16 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n     pushd ./gitian-builder\n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n     mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n \n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n     mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n     mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n \n     ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n     mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n     mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n     popd\n@@ -152,9 +152,9 @@ Verify the signatures\n Commit your signature to gitian.sigs:\n \n     pushd gitian.sigs\n-    git add ${VERSION}-linux/${SIGNER}\n-    git add ${VERSION}-win-unsigned/${SIGNER}\n-    git add ${VERSION}-osx-unsigned/${SIGNER}\n+    git add ${VERSION}-linux/\"${SIGNER}\"\n+    git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+    git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n     git commit -a\n     git push  # Assuming you can push to the gitian.sigs tree\n     popd\n@@ -199,7 +199,7 @@ Create (and optionally verify) the signed OS X binary:\n \n     pushd ./gitian-builder\n     ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n     ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n     mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n     popd\n@@ -208,7 +208,7 @@ Create (and optionally verify) the signed Windows binaries:\n \n     pushd ./gitian-builder\n     ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer $SIGNER --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n     ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n     mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n     mv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n@@ -217,8 +217,8 @@ Create (and optionally verify) the signed Windows binaries:\n Commit your signature for the signed OS X/Windows binaries:\n \n     pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/${SIGNER}\n-    git add ${VERSION}-win-signed/${SIGNER}\n+    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n+    git add ${VERSION}-win-signed/\"${SIGNER}\"\n     git commit -a\n     git push  # Assuming you can push to the gitian.sigs tree\n     popd"
      }
    ]
  },
  {
    "sha": "cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmY5NWE2MzI1MGVjYjdkNDNkZDYyMjNiMmNiYTNjZTI3ZDgwMmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T17:52:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T17:52:10Z"
      },
      "message": "Merge #12616: Set modal overlay hide button as default\n\ncfdd89589 qt: Set modal overlay hide button as default (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Without this change the only way to close the modal overlay is to click the hide button. Setting the button to default allows to activate it with the ENTER key.\n\n  Before:\n  <img width=\"849\" alt=\"screen shot 2018-03-06 at 15 14 23\" src=\"https://user-images.githubusercontent.com/3534524/37040276-58af9ce0-2151-11e8-8c55-50acdea669d9.png\">\n\n  After:\n  <img width=\"848\" alt=\"screen shot 2018-03-06 at 15 12 41\" src=\"https://user-images.githubusercontent.com/3534524/37040294-650d1c9c-2151-11e8-8245-2da250a71b3d.png\">\n\nTree-SHA512: a93ef440a507843ed7870fd07a693af93dd97c8fce2fb6824c69a227b5dee258f340bf1ae344da32a9dd6e6cb2330f72db9dac9635bbd34184c3e7f8476a472e",
      "tree": {
        "sha": "9bb348d6540498e187f38ddaba29385ecfe6a396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bb348d6540498e187f38ddaba29385ecfe6a396"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJantVKAAoJEB5K7WKYbNJdsSoIAKWm399Ta+FJYp/Nr04poVQK\nJCqIVrwxveNVseFg7R3y6W/pNE+gekPbXBGjj8Io+qjYwfxKh5QQHppUD8aNd7fp\nzqsHzlt6AWtZDgXJ1xeGLmMS26uCbUZuaq3chquCtw/kJOATJZpApuDVdIT3q2oc\nr/t6rMrs1Am5OOLItvFXw4KnoufDy+FqQMaoSBcD1j8gCKd3w8cKLvfrnAFYC70f\nXk3zQC4NS076MvXRCpoOdqWeLEbc7Evj+hzH0hpQY75tImMz3iWVIcbpIS0PYUg8\nhPy8xj4euVZG8pVfNfMciKDXYJzmxbj8ow0VUg8i7nVgCVUDFFBvkUZZKHcbxwM=\n=L0/D\n-----END PGP SIGNATURE-----",
        "payload": "tree 9bb348d6540498e187f38ddaba29385ecfe6a396\nparent 1f9349129d5752919b02637c0331c6d6341044f6\nparent cfdd89589b272527ddf981a3f66ec1783dcc2dcd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520358723 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520358730 +0100\n\nMerge #12616: Set modal overlay hide button as default\n\ncfdd89589 qt: Set modal overlay hide button as default (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  Without this change the only way to close the modal overlay is to click the hide button. Setting the button to default allows to activate it with the ENTER key.\n\n  Before:\n  <img width=\"849\" alt=\"screen shot 2018-03-06 at 15 14 23\" src=\"https://user-images.githubusercontent.com/3534524/37040276-58af9ce0-2151-11e8-8c55-50acdea669d9.png\">\n\n  After:\n  <img width=\"848\" alt=\"screen shot 2018-03-06 at 15 12 41\" src=\"https://user-images.githubusercontent.com/3534524/37040294-650d1c9c-2151-11e8-8245-2da250a71b3d.png\">\n\nTree-SHA512: a93ef440a507843ed7870fd07a693af93dd97c8fce2fb6824c69a227b5dee258f340bf1ae344da32a9dd6e6cb2330f72db9dac9635bbd34184c3e7f8476a472e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff95a63250ecb7d43dd6223b2cba3ce27d802ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f9349129d5752919b02637c0331c6d6341044f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9349129d5752919b02637c0331c6d6341044f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9349129d5752919b02637c0331c6d6341044f6"
      },
      {
        "sha": "cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdd89589b272527ddf981a3f66ec1783dcc2dcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdd89589b272527ddf981a3f66ec1783dcc2dcd"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b5a69c578d0682073727b399ecc24c58ddd2df31",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cff95a63250ecb7d43dd6223b2cba3ce27d802ff/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cff95a63250ecb7d43dd6223b2cba3ce27d802ff/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
        "patch": "@@ -351,6 +351,12 @@ QLabel { color: rgb(40,40,40);  }</string>\n              <property name=\"text\">\n               <string>Hide</string>\n              </property>\n+             <property name=\"focusPolicy\">\n+              <enum>Qt::StrongFocus</enum>\n+             </property>\n+             <property name=\"default\">\n+              <bool>true</bool>\n+             </property>\n             </widget>\n            </item>\n           </layout>"
      }
    ]
  },
  {
    "sha": "d74b01db0c139f4c769ae46ed2950381a64ab30b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzRiMDFkYjBjMTM5ZjRjNzY5YWU0NmVkMjk1MDM4MWE2NGFiMzBi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:02:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:03:13Z"
      },
      "message": "Merge #12588: [Utils] Remove deprecated PyZMQ call from Python ZMQ example\n\n6058766de Remove deprecated PyZMQ call from Python ZMQ example (Micha\u0142 Zabielski)\n\nPull request description:\n\n  PyZMQ 17.0.0 has deprecated and removed zmq.asyncio.install() call\n  with advice to use asyncio native run-loop instead of zmq specific.\n\n  This caused exception when running the contrib/zmq/zmq_sub*.py examples.\n\n  This commit simply follows the advice and fixes mentioned examples.\n\nTree-SHA512: af357aafa5eb9506cfa3f513f06979bbc49f6132fddc1e96fbcea175da4f8e2ea298be7c7055e7d3377f0814364e13bb88b5c195f6a07898cd28c341d23a93c5",
      "tree": {
        "sha": "c06d40d1ee16438e3a5daed34605914439a646f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c06d40d1ee16438e3a5daed34605914439a646f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d74b01db0c139f4c769ae46ed2950381a64ab30b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJantfhAAoJEB5K7WKYbNJdgoUH/i1anVVRvGXYKaWD6F3Yb9Ny\nZ+BvnhTqA5AKAJve4NjtnVHrsr83uj+DNfyyoyh3Qob1qqrx8iUt5CF3EHyKDGrf\n1oxGHUP3U7EOJoSzaMjHpG2L7DI7B7FgL+X03NKR3c3AhhO5oZRVky6rgMXAsfr8\nqF8aq9NYQK7Ha4uQqR2rC2Dy4NG0fNEfClGHHLEHS3/e/Qg0G7bahYheyVLrKOuo\nCi6lHMKsfW7wnL7qNUP/H15rR9ttCuQEgY+ZL9q2WQMDCvCF4Bz1Sk/O7RYrtoJ9\n2E4C9hFQCaGEdr4GWKjl1vC/zD96g/g4AEzyOrBOGap/c9ZfMXCTxdI53FiinH4=\n=aZCU\n-----END PGP SIGNATURE-----",
        "payload": "tree c06d40d1ee16438e3a5daed34605914439a646f0\nparent cff95a63250ecb7d43dd6223b2cba3ce27d802ff\nparent 6058766de4b717aed7137b70f9384f35231739d9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520359377 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520359393 +0100\n\nMerge #12588: [Utils] Remove deprecated PyZMQ call from Python ZMQ example\n\n6058766de Remove deprecated PyZMQ call from Python ZMQ example (Micha\u0142 Zabielski)\n\nPull request description:\n\n  PyZMQ 17.0.0 has deprecated and removed zmq.asyncio.install() call\n  with advice to use asyncio native run-loop instead of zmq specific.\n\n  This caused exception when running the contrib/zmq/zmq_sub*.py examples.\n\n  This commit simply follows the advice and fixes mentioned examples.\n\nTree-SHA512: af357aafa5eb9506cfa3f513f06979bbc49f6132fddc1e96fbcea175da4f8e2ea298be7c7055e7d3377f0814364e13bb88b5c195f6a07898cd28c341d23a93c5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74b01db0c139f4c769ae46ed2950381a64ab30b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d74b01db0c139f4c769ae46ed2950381a64ab30b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74b01db0c139f4c769ae46ed2950381a64ab30b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cff95a63250ecb7d43dd6223b2cba3ce27d802ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cff95a63250ecb7d43dd6223b2cba3ce27d802ff"
      },
      {
        "sha": "6058766de4b717aed7137b70f9384f35231739d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6058766de4b717aed7137b70f9384f35231739d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6058766de4b717aed7137b70f9384f35231739d9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "60768dc59a962934d85092c8b67b282ee0db1d6b",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d74b01db0c139f4c769ae46ed2950381a64ab30b/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d74b01db0c139f4c769ae46ed2950381a64ab30b/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=d74b01db0c139f4c769ae46ed2950381a64ab30b",
        "patch": "@@ -38,7 +38,7 @@\n \n class ZMQHandler():\n     def __init__(self):\n-        self.loop = zmq.asyncio.install()\n+        self.loop = asyncio.get_event_loop()\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)"
      },
      {
        "sha": "0df843c9a3f46c6ae146bc0d9975e79da0370537",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d74b01db0c139f4c769ae46ed2950381a64ab30b/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d74b01db0c139f4c769ae46ed2950381a64ab30b/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=d74b01db0c139f4c769ae46ed2950381a64ab30b",
        "patch": "@@ -42,7 +42,7 @@\n \n class ZMQHandler():\n     def __init__(self):\n-        self.loop = zmq.asyncio.install()\n+        self.loop = asyncio.get_event_loop()\n         self.zmqContext = zmq.asyncio.Context()\n \n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)"
      }
    ]
  },
  {
    "sha": "bc679829e2d3204b9173b65f7922add68e1621f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzY3OTgyOWUyZDMyMDRiOTE3M2I2NWY3OTIyYWRkNjhlMTYyMWY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:21:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:21:34Z"
      },
      "message": "Merge #10271: Use std::thread::hardware_concurrency, instead of Boost, to determine available cores\n\n937bf4335 Use std::thread::hardware_concurrency, instead of Boost, to determine available cores (fanquake)\n\nPull request description:\n\n  Following discussion on IRC about replacing Boost usage for detecting available system cores, I've opened this to collect some benchmarks + further discussion.\n\n  The current method for detecting available cores was introduced in #6361.\n\n  Recap of the IRC chat:\n  ```\n  21:14:08 fanquake: Since we seem to be giving Boost removal a good shot for 0.15, does anyone have suggestions for replacing GetNumCores?\n  21:14:26 fanquake: There is std::thread::hardware_concurrency(), but that seems to count virtual cores, which I don't think we want.\n  21:14:51 BlueMatt: fanquake: I doubt we'll do boost removal for 0.15\n  21:14:58 BlueMatt: shit like BOOST_FOREACH, sure\n  21:15:07 BlueMatt: but all of boost? doubtful, there are still things we need\n  21:16:36 fanquake: Yea sorry, not the whole lot, but we can remove a decent chunk. Just looking into what else needs to be done to replace some of the less involved Boost usage.\n  21:16:43 BlueMatt: fair\n  21:17:14 wumpus: yes, it makes sense to plan ahead a bit, without immediately doing it\n  21:18:12 wumpus: right, don't count virtual cores, that used to be the case but it makes no sense for our usage\n  21:19:15 wumpus: it'd create a swarm of threads overwhelming any machine with hyperthreading (+accompanying thread stack overhead), for script validation, and there was no gain at all for that\n  21:20:03 sipa: BlueMatt: don't worry, there is no hurry\n  21:59:10 morcos: wumpus: i don't think that is correct\n  21:59:24 morcos: suppose you have 4 cores (8 virtual cores)\n  21:59:24 wumpus: fanquake: indeed seems that std has no equivalent to physical_concurrency, on any standard. That's annoying as it is non-trivial to implement\n  21:59:35 morcos: i think running par=8 (if it let you) would be notably faster\n  21:59:59 morcos: jeremyrubin and i discussed this at length a while back... i think i commented about it on irc at the time\n  22:00:21 wumpus: morcos: I think the conclusion at the time was that it made no difference, but sure would make sense to benchmark\n  22:00:39 morcos: perhaps historical testing on the virtual vs actual cores was polluted by concurrency issues that have now improved\n  22:00:47 wumpus: I think there are not more ALUs, so there is not really a point in having more threads\n  22:01:40 wumpus: hyperthreads are basically just a stored register state right?\n  22:02:23 sipa: wumpus: yes but it helps the scheduler\n  22:02:27 wumpus: in which case the only speedup using \"number of cores\" threads would give you is, possibly, excluding other software from running on the cores on the same time\n  22:02:37 morcos: well this is where i get out of my depth\n  22:02:50 sipa: if one of the threads is waiting on a read from ram, the other can use the arithmetic unit for example\n  22:02:54 morcos: wumpus: i'm pretty sure though that the speed up is considerably more than what you might expect from that\n  22:02:59 wumpus: sipa: ok, I back down, I didn't want to argue this at all\n  22:03:35 morcos: the reason i haven't tested it myself, is the machine i usually use has 16 cores... so not easy due to remaining concurrency issues to get much more speedup\n  22:03:36 wumpus: I'm fine with restoring it to number of virtual threads if that's faster\n  22:03:54 morcos: we should have somene with 4 cores (and \ufffc actually test it though, i agree\n  22:03:58 sipa: i would expect (but we should benchmark...) that if 8 scriot validation threads instead of 4 on a quadcore hyperthreading is not faster, it's due to lock contention\n  22:04:20 morcos: sipa: yeah thats my point, i think lock contention isn't that bad with 8 now\n  22:04:22 wumpus: on 64-bit systems the additional thread overhead wouldn't be important at least\n  22:04:23 gmaxwell: I previously benchmarked, a long time ago, it was faster.\n  22:04:33 gmaxwell: (to use the HT core count)\n  22:04:44 wumpus: why was this changed at all then?\n  22:04:47 wumpus: I'm confused\n  22:05:04 sipa: good question!\n  22:05:06 gmaxwell: I had no idea we changed it.\n  22:05:25 wumpus: sigh \ufffc\n  22:05:54 gmaxwell: What PR changed it?\n  22:06:51 gmaxwell: In any case, on 32-bit it's probably a good tradeoff... the extra ram overhead is worth avoiding.\n  22:07:22 wumpus: https://github.com/bitcoin/bitcoin/pull/6361\n  22:07:28 gmaxwell: PR 6461 btw.\n  22:07:37 gmaxwell: er lol at least you got it right.\n  22:07:45 wumpus: the complaint was that systems became unsuably slow when using that many thread\n  22:07:51 wumpus: so at least I got one thing right, woohoo\n  22:07:55 sipa: seems i even acked it!\n  22:07:57 BlueMatt: wumpus: there are more alus\n  22:08:38 BlueMatt: but we need to improve lock contention first\n  22:08:40 morcos: anywya, i think in the past the lock contention made 8 threads regardless of cores a bit dicey.. now that is much better (although more still to be done)\n  22:09:01 BlueMatt: or we can just merge #10192, thats fee\n  22:09:04 gribble: https://github.com/bitcoin/bitcoin/issues/10192 | Cache full script execution results in addition to signatures by TheBlueMatt \u00b7 Pull Request #10192 \u00b7 bitcoin/bitcoin \u00b7 GitHub\n  22:09:11 BlueMatt: s/fee/free/\n  22:09:21 morcos: no, we do not need to improve lock contention first.   but we should probably do that before we increase the max beyond 16\n  22:09:26 BlueMatt: then we can toss concurrency issues out the window and get more speedup anyway\n  22:09:35 gmaxwell: wumpus: yea, well in QT I thought we also diminished the count by 1 or something?  but yes, if the motivation was to reduce how heavily the machine was used, thats fair.\n  22:09:56 sipa: the benefit of using HT cores is certainly not a factor 2\n  22:09:58 wumpus: gmaxwell: for the default I think this makes a lot of sense, yes\n  22:10:10 gmaxwell: morcos: right now on my 24/28 physical core hosts going beyond 16 still reduces performance.\n  22:10:11 wumpus: gmaxwell: do we also restrict the maximum par using this? that'd make less sense\n  22:10:51 wumpus: if someone *wants* to use the virtual cores they should be able to by setting -par=\n  22:10:51 sipa: *flies to US*\n  22:10:52 BlueMatt: sipa: sure, but the shared cache helps us get more out of it than some others, as morcos points out\n  22:11:30 BlueMatt: (because it means our thread contention issues are less)\n  22:12:05 morcos: gmaxwell: yeah i've been bogged down in fee estimation as well (and the rest of life) for a while now.. otherwise i would have put more effort into jeremy's checkqueue\n  22:12:36 BlueMatt: morcos: heh, well now you can do other stuff while the rest of us get bogged down in understanding fee estimation enough to review it \ufffc\n  22:12:37 wumpus: [to answer my own question: no, the limit for par is MAX_SCRIPTCHECK_THREADS, or 16]\n  22:12:54 morcos: but to me optimizing for more than 16 cores is pretty valuable as miners could use beefy machines and be less concerned by block validation time\n  22:14:38 BlueMatt: morcos: i think you may be surprised by the number of mining pools that are on VPSes that do not have 16 cores \ufffc\n  22:15:34 gmaxwell: I assume right now most of the time block validation is bogged in the parts that are not as concurrent. simple because caching makes the concurrent parts so fast. (and soon to hopefully increase with bluematt's patch)\n  22:17:55 gmaxwell: improving sha2 speed, or transaction malloc overhead are probably bigger wins now for connection at the tip than parallelism beyond 16 (though I'd like that too).\n  22:18:21 BlueMatt: sha2 speed is big\n  22:18:27 morcos: yeah lots of things to do actually...\n  22:18:57 gmaxwell: BlueMatt: might be a tiny bit less big if we didn't hash the block header 8 times for every block. \ufffc\n  22:21:27 BlueMatt: ehh, probably, but I'm less rushed there\n  22:21:43 BlueMatt: my new cache thing is about to add a bunch of hashing\n  22:21:50 BlueMatt: 1 sha round per tx\n  22:22:25 BlueMatt: and sigcache is obviously a ton\n  ```\n\nTree-SHA512: a594430e2a77d8cc741ea8c664a2867b1e1693e5050a4bbc8511e8d66a2bffe241a9965f6dff1e7fbb99f21dd1fdeb95b826365da8bd8f9fab2d0ffd80d5059c",
      "tree": {
        "sha": "95556b73031bf46b2b69129cfaf869f3cdcfc890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95556b73031bf46b2b69129cfaf869f3cdcfc890"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc679829e2d3204b9173b65f7922add68e1621f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJantwuAAoJEB5K7WKYbNJdXQ4IAJjpDDmIrmloa+vewOhOg8In\nstrsYpKoAHN+yxcMW3UXkSXHSGgFgwlZJY7/PV1gN8H4AT9L/bkkf2q+SOmVgZps\n30hlh5Cr/+55jCLHtISpX4YNN4VKIPWjaUsqgChcIEQ55kw7+nkbefV8OkLRFuSN\nxCuPzEznxlxhP/j/PLMecz5olk+G4DAhK/hJFaftKgSi5oTGgZzmVvmrLDpe99AY\nhcvIV2rgcnhemX9Wz6bDbTHnw1XQUY3X8P/BHRWsRlWTtXWRAN0E3VePu7TGtT2M\nZ6w3anEhzOCDSj5U6X9qKi1vKwuFTidXac0sGlHe0lDc1yz9VD8AMWOXp8pOkmA=\n=+eBe\n-----END PGP SIGNATURE-----",
        "payload": "tree 95556b73031bf46b2b69129cfaf869f3cdcfc890\nparent d74b01db0c139f4c769ae46ed2950381a64ab30b\nparent 937bf4335bc58c443645dc29b8d7ceadc81e74e5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520360491 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520360494 +0100\n\nMerge #10271: Use std::thread::hardware_concurrency, instead of Boost, to determine available cores\n\n937bf4335 Use std::thread::hardware_concurrency, instead of Boost, to determine available cores (fanquake)\n\nPull request description:\n\n  Following discussion on IRC about replacing Boost usage for detecting available system cores, I've opened this to collect some benchmarks + further discussion.\n\n  The current method for detecting available cores was introduced in #6361.\n\n  Recap of the IRC chat:\n  ```\n  21:14:08 fanquake: Since we seem to be giving Boost removal a good shot for 0.15, does anyone have suggestions for replacing GetNumCores?\n  21:14:26 fanquake: There is std::thread::hardware_concurrency(), but that seems to count virtual cores, which I don't think we want.\n  21:14:51 BlueMatt: fanquake: I doubt we'll do boost removal for 0.15\n  21:14:58 BlueMatt: shit like BOOST_FOREACH, sure\n  21:15:07 BlueMatt: but all of boost? doubtful, there are still things we need\n  21:16:36 fanquake: Yea sorry, not the whole lot, but we can remove a decent chunk. Just looking into what else needs to be done to replace some of the less involved Boost usage.\n  21:16:43 BlueMatt: fair\n  21:17:14 wumpus: yes, it makes sense to plan ahead a bit, without immediately doing it\n  21:18:12 wumpus: right, don't count virtual cores, that used to be the case but it makes no sense for our usage\n  21:19:15 wumpus: it'd create a swarm of threads overwhelming any machine with hyperthreading (+accompanying thread stack overhead), for script validation, and there was no gain at all for that\n  21:20:03 sipa: BlueMatt: don't worry, there is no hurry\n  21:59:10 morcos: wumpus: i don't think that is correct\n  21:59:24 morcos: suppose you have 4 cores (8 virtual cores)\n  21:59:24 wumpus: fanquake: indeed seems that std has no equivalent to physical_concurrency, on any standard. That's annoying as it is non-trivial to implement\n  21:59:35 morcos: i think running par=8 (if it let you) would be notably faster\n  21:59:59 morcos: jeremyrubin and i discussed this at length a while back... i think i commented about it on irc at the time\n  22:00:21 wumpus: morcos: I think the conclusion at the time was that it made no difference, but sure would make sense to benchmark\n  22:00:39 morcos: perhaps historical testing on the virtual vs actual cores was polluted by concurrency issues that have now improved\n  22:00:47 wumpus: I think there are not more ALUs, so there is not really a point in having more threads\n  22:01:40 wumpus: hyperthreads are basically just a stored register state right?\n  22:02:23 sipa: wumpus: yes but it helps the scheduler\n  22:02:27 wumpus: in which case the only speedup using \"number of cores\" threads would give you is, possibly, excluding other software from running on the cores on the same time\n  22:02:37 morcos: well this is where i get out of my depth\n  22:02:50 sipa: if one of the threads is waiting on a read from ram, the other can use the arithmetic unit for example\n  22:02:54 morcos: wumpus: i'm pretty sure though that the speed up is considerably more than what you might expect from that\n  22:02:59 wumpus: sipa: ok, I back down, I didn't want to argue this at all\n  22:03:35 morcos: the reason i haven't tested it myself, is the machine i usually use has 16 cores... so not easy due to remaining concurrency issues to get much more speedup\n  22:03:36 wumpus: I'm fine with restoring it to number of virtual threads if that's faster\n  22:03:54 morcos: we should have somene with 4 cores (and \ufffc actually test it though, i agree\n  22:03:58 sipa: i would expect (but we should benchmark...) that if 8 scriot validation threads instead of 4 on a quadcore hyperthreading is not faster, it's due to lock contention\n  22:04:20 morcos: sipa: yeah thats my point, i think lock contention isn't that bad with 8 now\n  22:04:22 wumpus: on 64-bit systems the additional thread overhead wouldn't be important at least\n  22:04:23 gmaxwell: I previously benchmarked, a long time ago, it was faster.\n  22:04:33 gmaxwell: (to use the HT core count)\n  22:04:44 wumpus: why was this changed at all then?\n  22:04:47 wumpus: I'm confused\n  22:05:04 sipa: good question!\n  22:05:06 gmaxwell: I had no idea we changed it.\n  22:05:25 wumpus: sigh \ufffc\n  22:05:54 gmaxwell: What PR changed it?\n  22:06:51 gmaxwell: In any case, on 32-bit it's probably a good tradeoff... the extra ram overhead is worth avoiding.\n  22:07:22 wumpus: https://github.com/bitcoin/bitcoin/pull/6361\n  22:07:28 gmaxwell: PR 6461 btw.\n  22:07:37 gmaxwell: er lol at least you got it right.\n  22:07:45 wumpus: the complaint was that systems became unsuably slow when using that many thread\n  22:07:51 wumpus: so at least I got one thing right, woohoo\n  22:07:55 sipa: seems i even acked it!\n  22:07:57 BlueMatt: wumpus: there are more alus\n  22:08:38 BlueMatt: but we need to improve lock contention first\n  22:08:40 morcos: anywya, i think in the past the lock contention made 8 threads regardless of cores a bit dicey.. now that is much better (although more still to be done)\n  22:09:01 BlueMatt: or we can just merge #10192, thats fee\n  22:09:04 gribble: https://github.com/bitcoin/bitcoin/issues/10192 | Cache full script execution results in addition to signatures by TheBlueMatt \u00b7 Pull Request #10192 \u00b7 bitcoin/bitcoin \u00b7 GitHub\n  22:09:11 BlueMatt: s/fee/free/\n  22:09:21 morcos: no, we do not need to improve lock contention first.   but we should probably do that before we increase the max beyond 16\n  22:09:26 BlueMatt: then we can toss concurrency issues out the window and get more speedup anyway\n  22:09:35 gmaxwell: wumpus: yea, well in QT I thought we also diminished the count by 1 or something?  but yes, if the motivation was to reduce how heavily the machine was used, thats fair.\n  22:09:56 sipa: the benefit of using HT cores is certainly not a factor 2\n  22:09:58 wumpus: gmaxwell: for the default I think this makes a lot of sense, yes\n  22:10:10 gmaxwell: morcos: right now on my 24/28 physical core hosts going beyond 16 still reduces performance.\n  22:10:11 wumpus: gmaxwell: do we also restrict the maximum par using this? that'd make less sense\n  22:10:51 wumpus: if someone *wants* to use the virtual cores they should be able to by setting -par=\n  22:10:51 sipa: *flies to US*\n  22:10:52 BlueMatt: sipa: sure, but the shared cache helps us get more out of it than some others, as morcos points out\n  22:11:30 BlueMatt: (because it means our thread contention issues are less)\n  22:12:05 morcos: gmaxwell: yeah i've been bogged down in fee estimation as well (and the rest of life) for a while now.. otherwise i would have put more effort into jeremy's checkqueue\n  22:12:36 BlueMatt: morcos: heh, well now you can do other stuff while the rest of us get bogged down in understanding fee estimation enough to review it \ufffc\n  22:12:37 wumpus: [to answer my own question: no, the limit for par is MAX_SCRIPTCHECK_THREADS, or 16]\n  22:12:54 morcos: but to me optimizing for more than 16 cores is pretty valuable as miners could use beefy machines and be less concerned by block validation time\n  22:14:38 BlueMatt: morcos: i think you may be surprised by the number of mining pools that are on VPSes that do not have 16 cores \ufffc\n  22:15:34 gmaxwell: I assume right now most of the time block validation is bogged in the parts that are not as concurrent. simple because caching makes the concurrent parts so fast. (and soon to hopefully increase with bluematt's patch)\n  22:17:55 gmaxwell: improving sha2 speed, or transaction malloc overhead are probably bigger wins now for connection at the tip than parallelism beyond 16 (though I'd like that too).\n  22:18:21 BlueMatt: sha2 speed is big\n  22:18:27 morcos: yeah lots of things to do actually...\n  22:18:57 gmaxwell: BlueMatt: might be a tiny bit less big if we didn't hash the block header 8 times for every block. \ufffc\n  22:21:27 BlueMatt: ehh, probably, but I'm less rushed there\n  22:21:43 BlueMatt: my new cache thing is about to add a bunch of hashing\n  22:21:50 BlueMatt: 1 sha round per tx\n  22:22:25 BlueMatt: and sigcache is obviously a ton\n  ```\n\nTree-SHA512: a594430e2a77d8cc741ea8c664a2867b1e1693e5050a4bbc8511e8d66a2bffe241a9965f6dff1e7fbb99f21dd1fdeb95b826365da8bd8f9fab2d0ffd80d5059c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc679829e2d3204b9173b65f7922add68e1621f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc679829e2d3204b9173b65f7922add68e1621f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc679829e2d3204b9173b65f7922add68e1621f8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d74b01db0c139f4c769ae46ed2950381a64ab30b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d74b01db0c139f4c769ae46ed2950381a64ab30b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d74b01db0c139f4c769ae46ed2950381a64ab30b"
      },
      {
        "sha": "937bf4335bc58c443645dc29b8d7ceadc81e74e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/937bf4335bc58c443645dc29b8d7ceadc81e74e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/937bf4335bc58c443645dc29b8d7ceadc81e74e5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 4,
      "deletions": 8
    },
    "files": [
      {
        "sha": "82c99a3c2ff9104400b69dca2e21f5569cb74c87",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc679829e2d3204b9173b65f7922add68e1621f8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc679829e2d3204b9173b65f7922add68e1621f8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=bc679829e2d3204b9173b65f7922add68e1621f8",
        "patch": "@@ -79,6 +79,7 @@\n #include <openssl/crypto.h>\n #include <openssl/rand.h>\n #include <openssl/conf.h>\n+#include <thread>\n \n // Application startup time (used for uptime calculation)\n const int64_t nStartupTime = GetTime();\n@@ -927,11 +928,7 @@ bool SetupNetworking()\n \n int GetNumCores()\n {\n-#if BOOST_VERSION >= 105600\n-    return boost::thread::physical_concurrency();\n-#else // Must fall back to hardware_concurrency, which unfortunately counts virtual cores\n-    return boost::thread::hardware_concurrency();\n-#endif\n+    return std::thread::hardware_concurrency();\n }\n \n std::string CopyrightHolders(const std::string& strPrefix)"
      },
      {
        "sha": "e4170d8aa2255c0345cf910e0ae879d1d1d8f1bf",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc679829e2d3204b9173b65f7922add68e1621f8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc679829e2d3204b9173b65f7922add68e1621f8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=bc679829e2d3204b9173b65f7922add68e1621f8",
        "patch": "@@ -312,9 +312,8 @@ std::string HelpMessageGroup(const std::string& message);\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n /**\n- * Return the number of physical cores available on the current system.\n- * @note This does not count virtual cores, such as those provided by HyperThreading\n- * when boost is newer than 1.56.\n+ * Return the number of cores available on the current system.\n+ * @note This does count virtual cores, such as those provided by HyperThreading.\n  */\n int GetNumCores();\n "
      }
    ]
  },
  {
    "sha": "765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjVhM2ViYjAyNjgyNmYzZjQ3NjVmNWJiYzllZDc3ZWUyM2Q2N2Jh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:50:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T18:51:07Z"
      },
      "message": "Merge #11986: [depends] zeromq 4.2.3\n\n13a399a46 depends: patch pthread_set_name_np out of zeromq (Cory Fields)\n8f7922636 depends: zeromq 4.2.3 (fanquake)\n\nPull request description:\n\n  This is a followup to #9254 and #11981. Zeromq 4.2.3 was released just after #9254 was merged, and contains a years worth of improvements/bug fixes. See the release notes [here](https://github.com/zeromq/libzmq/releases/tag/v4.2.3).\n\n  Todo:\n  - [ ] Add zeromq-4.2.3.tar.gz to /depends-sources on bitcoincore.org\n  - [ ] Verify gitian builds are still OK\n  - [ ] Check: https://github.com/zeromq/libzmq/pull/2787\n\nTree-SHA512: 85e06f47be3e1fdedcee50ce90e3391d69df2ea1c167472ffc3126d8970d418eb75141b970e422eb2fda9a8cad00e6ba5b36afa53565171a9ebaa152a9dc9b60",
      "tree": {
        "sha": "9a0ea625b2ca4321d22e49923df1754dbcc878c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a0ea625b2ca4321d22e49923df1754dbcc878c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanuMbAAoJEB5K7WKYbNJd7NIIAMSsHHo3LTEmArl5N43YmKF0\nSTp8YES4Oi2EIj2RQKEfTNTMa/vCQpTNJDLlyB+iuOhRVF7E/h/g/WqCNtG4jCjP\nbtqOfIrra9H2dLIw2hQPL7X2bHM8iGeWpYAMYWrhK6pwn3vKKMY00kWy5o9WYdFE\n/CyE2BrXXqoGFOzx/0dkebGEaLVCCJ5uHpp5mEbZUG2nmBXToxMNzyL37i33kcP4\njD+y4Tfdc+4xoK5oMeKFI+iq9Kc0v3/a4P5bgkTEbt+6QiU8HY20sXpLCQfE0btc\nDyGFacEZVarrj7uzpySaMB6qSH81nSa/iIjDxMNhcjXQhpt8WAPtIuHRPDKZuaU=\n=46wz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIHuqZB9YY/Ztg5wRabVzBXmUMSrCC2HUt5EPtoU97+FMCP/wEDUqvE2xgO/K\nXCQ7ksolxVEI8CB6jrNDGz2Cjt338wLhnjYXvfvJoVPkq+VdKuIL8OYJGwjwIHRs\n2f/S6yRrs9Iq+oWBw7bEQqPa/Nr5JI+yG5xDqBuwCPAgnsTH8XTbCrboi5GoseeA\nE/bGwv54quWB93H4g1AOga8I8QRanuMf8Aj3y1IFN+4wPACD3+MNLvkMjikoaHR0\ncHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEH7UFHFeHGmO\nD8If7CUvPZsI8SCuLia9yVwFG4ZnDDlxgOb52oZxiPoTghsQBnffRSbt7wjwILjQ\nrq0jc9cch9woxxOJSz+mg743MHolGeLjeRW1x+LSCPAgMyB0qJUuf7EYuCami9Eh\nHhLBIOvl8hmeSrqOBBM3Or4I8QRanuMf8AjwDqR7MCbtxwCD3+MNLvkMjiwraHR0\ncHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ/AQ0OIr0khc\n/NPBp+O11vvjRwjwIEFxvnPUDRHNL+Wair9eOMi3h03nXnPzwvHudRWw9SzxCPAg\n1T7qyMkhtdPHt9WY4ZlF//s0DZoxZFzAqugOQl5KLeQI8CA6Z7rlIlybGoP9NXpm\nwfBr7FuqqlnPPryHZB/xe3T7dwjxBFqe4x/wCP8W9RWYdNyMAIPf4w0u+QyOLi1o\ndHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 9a0ea625b2ca4321d22e49923df1754dbcc878c8\nparent bc679829e2d3204b9173b65f7922add68e1621f8\nparent 13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520362243 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520362267 +0100\n\nMerge #11986: [depends] zeromq 4.2.3\n\n13a399a46 depends: patch pthread_set_name_np out of zeromq (Cory Fields)\n8f7922636 depends: zeromq 4.2.3 (fanquake)\n\nPull request description:\n\n  This is a followup to #9254 and #11981. Zeromq 4.2.3 was released just after #9254 was merged, and contains a years worth of improvements/bug fixes. See the release notes [here](https://github.com/zeromq/libzmq/releases/tag/v4.2.3).\n\n  Todo:\n  - [ ] Add zeromq-4.2.3.tar.gz to /depends-sources on bitcoincore.org\n  - [ ] Verify gitian builds are still OK\n  - [ ] Check: https://github.com/zeromq/libzmq/pull/2787\n\nTree-SHA512: 85e06f47be3e1fdedcee50ce90e3391d69df2ea1c167472ffc3126d8970d418eb75141b970e422eb2fda9a8cad00e6ba5b36afa53565171a9ebaa152a9dc9b60\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc679829e2d3204b9173b65f7922add68e1621f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc679829e2d3204b9173b65f7922add68e1621f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc679829e2d3204b9173b65f7922add68e1621f8"
      },
      {
        "sha": "13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13a399a46c0c3ba78a6c0ba06c58186dfaf9be2c"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 40,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cde523370f0e4ca32e91b327e8d6b12f5b96dfd5",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
        "patch": "@@ -1,9 +1,9 @@\n package=zeromq\n-$(package)_version=4.2.2\n+$(package)_version=4.2.3\n $(package)_download_path=https://github.com/zeromq/libzmq/releases/download/v$($(package)_version)/\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=5b23f4ca9ef545d5bd3af55d305765e3ee06b986263b31967435d285a3e6df6b\n-$(package)_patches=0001-fix-build-with-older-mingw64.patch\n+$(package)_sha256_hash=8f1e2b2aade4dbfde98d82366d61baef2f62e812530160d2e6d0a5bb24e40bc0\n+$(package)_patches=0001-fix-build-with-older-mingw64.patch 0002-disable-pthread_set_name_np.patch\n \n define $(package)_set_vars\n   $(package)_config_opts=--without-docs --disable-shared --without-libsodium --disable-curve --disable-curve-keygen --disable-perf\n@@ -13,7 +13,7 @@ endef\n \n define $(package)_preprocess_cmds\n    patch -p1 < $($(package)_patch_dir)/0001-fix-build-with-older-mingw64.patch && \\\n-  ./autogen.sh\n+   patch -p1 < $($(package)_patch_dir)/0002-disable-pthread_set_name_np.patch\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "d220b54f3ecdbae3605be72dbcd0c6b2c5ee85f7",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
        "patch": "@@ -0,0 +1,35 @@\n+From 6e6b47d5ab381c3df3b30bb0b0a6cf210dfb1eba Mon Sep 17 00:00:00 2001\n+From: Cory Fields <cory-nospam-@coryfields.com>\n+Date: Mon, 5 Mar 2018 14:22:05 -0500\n+Subject: [PATCH] disable pthread_set_name_np\n+\n+pthread_set_name_np adds a Glibc requirement on >= 2.12.\n+---\n+ src/thread.cpp | 4 +++-\n+ 1 file changed, 3 insertions(+), 1 deletion(-)\n+\n+diff --git a/src/thread.cpp b/src/thread.cpp\n+index 4fc59c3e..c3fdfd46 100644\n+--- a/src/thread.cpp\n++++ b/src/thread.cpp\n+@@ -220,7 +220,7 @@ void zmq::thread_t::setThreadName(const char *name_)\n+  */\n+     if (!name_)\n+         return;\n+-\n++#if 0\n+ #if defined(ZMQ_HAVE_PTHREAD_SETNAME_1)\n+     int rc = pthread_setname_np(name_);\n+     if(rc) return;\n+@@ -233,6 +233,8 @@ void zmq::thread_t::setThreadName(const char *name_)\n+ #elif defined(ZMQ_HAVE_PTHREAD_SET_NAME)\n+     pthread_set_name_np(descriptor, name_);\n+ #endif\n++#endif\n++    return;\n+ }\n+ \n+ #endif\n+-- \n+2.11.1\n+"
      },
      {
        "sha": "05518bf819cd23e7d120a728e7ae82472ea42a5e",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
        "patch": "@@ -27,5 +27,5 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | Qt | [5.7.1](https://download.qt.io/official_releases/qt/) | 4.7+ | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L94) (Linux only) |\n | xkbcommon |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L93) (Linux only) |\n-| ZeroMQ | [4.2.2](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n+| ZeroMQ | [4.2.3](https://github.com/zeromq/libzmq/releases) |  | No |  |  |\n | zlib | [1.2.11](http://zlib.net/) |  |  |  | No |"
      }
    ]
  },
  {
    "sha": "f13d756cdd9445d1478a70c5387df2a444045f6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTNkNzU2Y2RkOTQ0NWQxNDc4YTcwYzUzODdkZjJhNDQ0MDQ1ZjZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T19:20:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T19:21:44Z"
      },
      "message": "Merge #12373: Build: Add build support for profiling.\n\ncfaac2a60 Add build support for 'gprof' profiling. (murrayn)\n\nPull request description:\n\n  Support for profiling build: `./configure --enable-profiling`\n\nTree-SHA512: ea983cfce385f1893bb4ab7f94ac141b7d620951dc430da3bbc92ae1357fb05521eac689216e66dc87040171a8a57e76dd7ad98036e12a2896cfe5ab544347f0",
      "tree": {
        "sha": "7341afd96374583bfa50be05d713ea7f2ee2b539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7341afd96374583bfa50be05d713ea7f2ee2b539"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f13d756cdd9445d1478a70c5387df2a444045f6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanupIAAoJEB5K7WKYbNJd25AIALm3IlDsXeLuUtvp/xuw7Wdv\ny6BZkh09y2CAY5egASzZiSReNAfn3qZEK74BVNiYYZ7yrbvAZgQ830nENaqk4SfE\nM94Q8/6T35C3WSMS776tzy7By9pUl9u8FY7DygfQurmu2wf0VmsuKwIyMzM2Awgk\n6+B9HT3yhHdeYOJykx1mt+iK9/ksSophkNKSq4DE3f8UwFAShDx4F4kqL0CZMtBN\nBTo6Etf5X0TlPG0YcTdg5AcHILnvJyFD4W3kg23ZLA2vL4oIpAEdFY1CeqgoI7Js\nLnbDH7/cQNDWCv4ZaIyJJ0vD4q8J84GqZz9v+ELdaqVMk/MKFzX2rUsTMg9R8UU=\n=TMs0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwII3Ee+cKafkA7mIhRwII+n30obalSVkhfGl5Q8PPs9vuCP/wECJy4q18YDxj\nhnup++hgP0oI8QRanupK8Aj9tkgNCiwJMQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECVV87dECXO1N4YFalCc\nZhQI8CDGcTmmCKl5eASjY8R9+ztWTh1Q3dVWUKIYiUeZsww5cwjwIEYFaGdynlXL\nBP5rxHv1KHi8K8Ra2/uhdCXEhzhfDQA2CPEEWp7qS/AIH11qyLgxhhwAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wENqI\nqTgu4hlMxrnPC1JtVn4I8CDhwHMllj0fTJ6iSqUfaGjaaPfcCqURZ7Om36M4yFSC\ndAjwIATdL6/l02wy2bRmh3ORs8y3YplqO+bBu9vv1tSA2jTACPEEWp7qS/AIe0gx\nBNRKinEAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50\naW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7341afd96374583bfa50be05d713ea7f2ee2b539\nparent 765a3ebb026826f3f4765f5bbc9ed77ee23d67ba\nparent cfaac2a60f3ac63ae8deccb03d88bd559449b78c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520364000 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520364104 +0100\n\nMerge #12373: Build: Add build support for profiling.\n\ncfaac2a60 Add build support for 'gprof' profiling. (murrayn)\n\nPull request description:\n\n  Support for profiling build: `./configure --enable-profiling`\n\nTree-SHA512: ea983cfce385f1893bb4ab7f94ac141b7d620951dc430da3bbc92ae1357fb05521eac689216e66dc87040171a8a57e76dd7ad98036e12a2896cfe5ab544347f0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13d756cdd9445d1478a70c5387df2a444045f6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f13d756cdd9445d1478a70c5387df2a444045f6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13d756cdd9445d1478a70c5387df2a444045f6e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/765a3ebb026826f3f4765f5bbc9ed77ee23d67ba"
      },
      {
        "sha": "cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfaac2a60f3ac63ae8deccb03d88bd559449b78c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfaac2a60f3ac63ae8deccb03d88bd559449b78c"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 36,
      "deletions": 4
    },
    "files": [
      {
        "sha": "48f104bdca1d8a12aa3dfe30f264827550e303d5",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13d756cdd9445d1478a70c5387df2a444045f6e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13d756cdd9445d1478a70c5387df2a444045f6e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f13d756cdd9445d1478a70c5387df2a444045f6e",
        "patch": "@@ -148,9 +148,9 @@ AC_ARG_WITH([qrencode],\n \n AC_ARG_ENABLE([hardening],\n   [AS_HELP_STRING([--disable-hardening],\n-  [do not attempt to harden the resulting executables (default is to harden)])],\n+  [do not attempt to harden the resulting executables (default is to harden when possible)])],\n   [use_hardening=$enableval],\n-  [use_hardening=yes])\n+  [use_hardening=auto])\n \n AC_ARG_ENABLE([reduce-exports],\n   [AS_HELP_STRING([--enable-reduce-exports],\n@@ -219,6 +219,13 @@ AC_ARG_ENABLE([debug],\n     [enable_debug=$enableval],\n     [enable_debug=no])\n \n+# Enable gprof profiling\n+AC_ARG_ENABLE([gprof],\n+    [AS_HELP_STRING([--enable-gprof],\n+                    [use gprof profiling compiler flags (default is no)])],\n+    [enable_gprof=$enableval],\n+    [enable_gprof=no])\n+\n # Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n@@ -558,12 +565,30 @@ else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n \n+if test \"x$enable_gprof\" = xyes; then\n+    dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n+    dnl we simply make them mutually exclusive here. Additionally, hardened toolchains may force\n+    dnl -pie by default, in which case it needs to be turned off with -no-pie.\n+\n+    if test x$use_hardening = xyes; then\n+        AC_MSG_ERROR(gprof profiling is not compatible with hardening. Reconfigure with --disable-hardening or --disable-gprof)\n+    fi\n+    use_hardening=no\n+    AX_CHECK_COMPILE_FLAG([-pg],[GPROF_CXXFLAGS=\"-pg\"],\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$CXXFLAG_WERROR]])\n+\n+    AX_CHECK_LINK_FLAG([[-no-pie]], [GPROF_LDFLAGS=\"-no-pie\"])\n+    AX_CHECK_LINK_FLAG([[-pg]],[GPROF_LDFLAGS=\"$GPROF_LDFLAGS -pg\"],\n+        [AC_MSG_ERROR(gprof profiling requested but not available)], [[$GPROF_LDFLAGS]])\n+fi\n+\n if test x$TARGET_OS != xwindows; then\n   # All windows code is PIC, forcing it on just adds useless compile warnings\n   AX_CHECK_COMPILE_FLAG([-fPIC],[PIC_FLAGS=\"-fPIC\"])\n fi\n \n if test x$use_hardening != xno; then\n+  use_hardening=yes\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n@@ -1242,6 +1267,8 @@ AC_SUBST(BITCOIN_TX_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(ERROR_CXXFLAGS)\n+AC_SUBST(GPROF_CXXFLAGS)\n+AC_SUBST(GPROF_LDFLAGS)\n AC_SUBST(HARDENED_CXXFLAGS)\n AC_SUBST(HARDENED_CPPFLAGS)\n AC_SUBST(HARDENED_LDFLAGS)\n@@ -1335,6 +1362,7 @@ echo \"  with bench    = $use_bench\"\n echo \"  with upnp     = $use_upnp\"\n echo \"  use asm       = $use_asm\"\n echo \"  debug enabled = $enable_debug\"\n+echo \"  gprof enabled = $enable_gprof\"\n echo \"  werror        = $enable_werror\"\n echo\n echo \"  target os     = $TARGET_OS\""
      },
      {
        "sha": "a5468c3be3f37a16302c0f12c4b407e13d1d5b8f",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13d756cdd9445d1478a70c5387df2a444045f6e/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13d756cdd9445d1478a70c5387df2a444045f6e/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=f13d756cdd9445d1478a70c5387df2a444045f6e",
        "patch": "@@ -142,6 +142,10 @@ Development tips and tricks\n Run configure with the --enable-debug option, then make. Or run configure with\n CXXFLAGS=\"-g -ggdb -O0\" or whatever debug flags you need.\n \n+**compiling for gprof profiling**\n+\n+Run configure with the --enable-gprof option, then make.\n+\n **debug.log**\n \n If the code is behaving strangely, take a look in the debug.log file in the data directory;"
      },
      {
        "sha": "8de7f7ff7a080730dd5f14b4e076d07a7cca5ab6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f13d756cdd9445d1478a70c5387df2a444045f6e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f13d756cdd9445d1478a70c5387df2a444045f6e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f13d756cdd9445d1478a70c5387df2a444045f6e",
        "patch": "@@ -4,8 +4,8 @@\n \n DIST_SUBDIRS = secp256k1 univalue\n \n-AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS)\n-AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS)\n+AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS) $(HARDENED_LDFLAGS) $(GPROF_LDFLAGS)\n+AM_CXXFLAGS = $(HARDENED_CXXFLAGS) $(ERROR_CXXFLAGS) $(GPROF_CXXFLAGS)\n AM_CPPFLAGS = $(HARDENED_CPPFLAGS)\n EXTRA_LIBRARIES =\n "
      }
    ]
  },
  {
    "sha": "20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGUzYjlhNDg1ZmQ2YjIzNzg1YzVjYWE0OWQwMWVhNDlmZGM4YmNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T19:26:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T19:27:15Z"
      },
      "message": "Merge #12617: gui: Show messages as text not html\n\n6fbc0986f gui: Show messages as text not html (Wladimir J. van der Laan)\n\nPull request description:\n\n  Currently, error messages (such as InitError) are displayed as-is, which means Qt does auto detection on the format.\n\n  This means that it's possible to inject HTML from the command line though e.g. specifying a wallet name with HTML in it. This isn't a direct security risk because fetching content from internet is\n  disabled (and as far as I know we never report strings received from the network this way). However, it can be confusing.\n\n  So explicitly force the format as text.\n\nTree-SHA512: 96c9196f20552544b862071bca61817ef03653019cc3548023d435f3a9c48b6cd501fab3246783cb0be68c8c7bb1b865913d92070a7c4e84e82c6577709f0934",
      "tree": {
        "sha": "6820a1a38a2efb1e2fdf7306c3eb2a19b3fad50c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6820a1a38a2efb1e2fdf7306c3eb2a19b3fad50c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanuuUAAoJEB5K7WKYbNJd78oH/1p/LIw07+o6LRGE//Ld+GFW\nuRJIMNw9bBQv3NljNf6TbkxbtWkSwBJ64C3t4Yr0kxpb2XyLISeF9qkerBuZgk+P\nhkCYLqM3ooHZlLz7nifF3wqpm9xDUHPGiCCSBWGpr8VVNMd01ylaAbtBybom/Oo8\njwaMLaZUttrTOO7onBNzJvtSdbI3JEAa79KzACEZXbTGqA/q9Ix2TCUxgFybPFfj\ncDUI/ngIPKGScyULYvBBeZbgQ/SEx2U+O8ihlOyJvOHdCXiOspAcGr/Fvy//YmWU\nfckmxqwrZlV+iNLG15s/d89quwkpm4Tk/Z3S2FsMso+SO9ZZWlpQ/3HgfrP0d5A=\n=afDG\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICMtezxeTngPB6ITGIwZY+soLvp/DdeyU3v0alQdbMgLCP/wEJyjmnXIHNba\npQE6fbbx0oUI8SAO3WPsM2tLaG99jWAg1xJKeOKjPIfYkLCU8Cb1mGJ1JAjwIGJX\nGRPRt2C6CVPPmWAk5GGmKMJ2zaRyWmB8Yw3oCdmQCPEEWp7rlfAIZ/yCvxQHmK4A\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BCnMS9uLhxVCDB1ZflRxyOVCPEgRGMsWh1TAyvwRJ0/UtY5uAI//G6T\nGCaTG6dUlXGO7w0I8QRanuuV8AjRnJwkP+E6nQCD3+MNLvkMji4taHR0cHM6Ly9h\nbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDJ23YMi289XjEy\nX3ip42k3CPAgEwuBfC3RbNrLv24CdbN/L9VbM8bmutYgDhwG1lDnITAI8CCrNzzK\nrRyOynyE3V0A0BWJTuF1lBqX6+QOckRs3AMOpgjwIEakOVsuxilJzXb8xp8e54Xh\nmtDzxKY+XaCj0gGg+NwkCPAgK61u6jwnCwbP4c7WYtw6mZDa7TiZ1eY3jVPhOrhu\n7XQI8QRanuuW8AjHf4QIK67glACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6820a1a38a2efb1e2fdf7306c3eb2a19b3fad50c\nparent f13d756cdd9445d1478a70c5387df2a444045f6e\nparent 6fbc0986fa2d49a1cb65b60eca71c25c84842a54\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520364387 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520364435 +0100\n\nMerge #12617: gui: Show messages as text not html\n\n6fbc0986f gui: Show messages as text not html (Wladimir J. van der Laan)\n\nPull request description:\n\n  Currently, error messages (such as InitError) are displayed as-is, which means Qt does auto detection on the format.\n\n  This means that it's possible to inject HTML from the command line though e.g. specifying a wallet name with HTML in it. This isn't a direct security risk because fetching content from internet is\n  disabled (and as far as I know we never report strings received from the network this way). However, it can be confusing.\n\n  So explicitly force the format as text.\n\nTree-SHA512: 96c9196f20552544b862071bca61817ef03653019cc3548023d435f3a9c48b6cd501fab3246783cb0be68c8c7bb1b865913d92070a7c4e84e82c6577709f0934\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13d756cdd9445d1478a70c5387df2a444045f6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13d756cdd9445d1478a70c5387df2a444045f6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13d756cdd9445d1478a70c5387df2a444045f6e"
      },
      {
        "sha": "6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fbc0986fa2d49a1cb65b60eca71c25c84842a54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fbc0986fa2d49a1cb65b60eca71c25c84842a54"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "427eb95a84ac9a177deeddc2417f791100343fdb",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "patch": "@@ -923,6 +923,7 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n \n         showNormalIfMinimized();\n         QMessageBox mBox(static_cast<QMessageBox::Icon>(nMBoxIcon), strTitle, message, buttons, this);\n+        mBox.setTextFormat(Qt::PlainText);\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;"
      }
    ]
  },
  {
    "sha": "b7cd08b717b57376d23ea550da60b00f239556db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2NkMDhiNzE3YjU3Mzc2ZDIzZWE1NTBkYTYwYjAwZjIzOTU1NmRi",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-05T19:31:13Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-03-06T19:43:32Z"
      },
      "message": "Add documentation to PeerLogicValidation interface and related functions",
      "tree": {
        "sha": "82106d1e04659d79206a98403c75afadf75a0ab7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82106d1e04659d79206a98403c75afadf75a0ab7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7cd08b717b57376d23ea550da60b00f239556db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cd08b717b57376d23ea550da60b00f239556db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cd08b717b57376d23ea550da60b00f239556db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cd08b717b57376d23ea550da60b00f239556db/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480f42630cbd598c04fa59ee0e406f56904ecffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480f42630cbd598c04fa59ee0e406f56904ecffb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480f42630cbd598c04fa59ee0e406f56904ecffb"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 45,
      "deletions": 3
    },
    "files": [
      {
        "sha": "482a206c8bef65ee7ab476513a408123b5e172ec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b7cd08b717b57376d23ea550da60b00f239556db",
        "patch": "@@ -401,6 +401,12 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n+/**\n+ * When a peer sends us a valid block, instruct it to announce blocks to us\n+ * using CMPCTBLOCK if possible by adding its nodeid to the end of\n+ * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n+ * removing the first element if necessary.\n+ */\n void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n@@ -749,7 +755,11 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-// Requires cs_main.\n+/**\n+ * Mark a misbehaving peer to be banned depending upon the value of `-banscore`.\n+ *\n+ * Requires cs_main.\n+ */\n void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n@@ -808,6 +818,10 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &schedu\n     scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n+/**\n+ * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n+ * block. Also save the time of the last tip update.\n+ */\n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(g_cs_orphans);\n \n@@ -828,7 +842,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n     }\n \n-    // Erase orphan transactions include or precluded by this block\n+    // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n         for (uint256 &orphanHash : vOrphanErase) {\n@@ -847,6 +861,10 @@ static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_bloc\n static uint256 most_recent_block_hash;\n static bool fWitnessesPresentInMostRecentCompactBlock;\n \n+/**\n+ * Maintain state about the best-seen block and fast-announce a compact block \n+ * to compatible peers.\n+ */\n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n     const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n@@ -888,6 +906,10 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+/**\n+ * Update our best height and announce any block hashes which weren't previously \n+ * in chainActive to our peers.\n+ */\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n@@ -920,6 +942,10 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     nTimeBestReceived = GetTime();\n }\n \n+/**\n+ * Handle invalid block rejection and consequent peer banning, maintain which \n+ * peers announce compact blocks.\n+ */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n     LOCK(cs_main);\n "
      },
      {
        "sha": "ff1ebc59da353b46a0568dfa1a9bdacca6215ae6",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7cd08b717b57376d23ea550da60b00f239556db/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=b7cd08b717b57376d23ea550da60b00f239556db",
        "patch": "@@ -42,13 +42,26 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n public:\n     explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n-\n+    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;\n+    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n     void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n     /** Process protocol messages received from a given node */\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n@@ -61,8 +74,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n+    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds);\n \n private:"
      }
    ]
  },
  {
    "sha": "a36834f10b80cd349ed35e4d2a04c50a8e02f269",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzY4MzRmMTBiODBjZDM0OWVkMzVlNGQyYTA0YzUwYThlMDJmMjY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:36:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:36:56Z"
      },
      "message": "Merge #9037: net: Add test-before-evict discipline to addrman\n\ne68172ed9 Add test-before-evict discipline to addrman (Ethan Heilman)\n\nPull request description:\n\n  This change implement countermeasures 3 (test-before-evict) suggested in our paper: [\"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\"](http://cs-people.bu.edu/heilman/eclipse/).\n  # Design:\n\n  A collision occurs when an address, addr1, is being moved to the tried table from the new table, but maps to a position in the tried table which already contains an address (addr2). The current behavior is that addr1 would evict addr2 from the tried table.\n\n  This change ensures that during a collision, addr1 is not inserted into tried but instead inserted into a buffer (setTriedCollisions). The to-be-evicted address, addr2, is then tested by [a feeler connection](https://github.com/bitcoin/bitcoin/pull/8282). If addr2 is found to be online, we remove addr1 from the buffer and addr2 is not evicted, on the other hand if addr2 is found be offline it is replaced by addr1.\n\n  An additional small advantage of this change is that, as no more than ten addresses can be in the test buffer at once, and addresses are only cleared one at a time from the test buffer (at 2 minute intervals), thus an attacker is forced to wait at least two minutes to insert a new address into tried after filling up the test buffer. This rate limits an attacker attempting to launch an eclipse attack.\n  # Risk mitigation:\n  - To prevent this functionality from being used as a DoS vector, we limit the number of addresses which are to be tested to ten. If we have more than ten addresses to test, we drop new addresses being added to tried if they would evict an address. Since the feeler thread only creates one new connection every 2 minutes the additional network overhead is limited.\n  - An address in tried gains immunity from tests for 4 hours after it has been tested or successfully connected to.\n  # Tests:\n\n  This change includes additional addrman unittests which test this behavior.\n\n  I ran an instance of this change with a much smaller tried table (2 buckets of 64 addresses) so that collisions were much more likely and observed evictions.\n\n  ```\n  2016-10-27 07:20:26 Swapping 208.12.64.252:8333 for 68.62.95.247:8333 in tried table\n  2016-10-27 07:20:26 Moving 208.12.64.252:8333 to tried\n  ```\n\n  I documented tests we ran against similar earlier versions of this change in #6355.\n  # Security Benefit\n\n  This is was originally posted in PR #8282 see [this comment for full details](https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237255215).\n\n  To determine the security benefit of these larger numbers of IPs in the tried table I modeled the attack presented in [Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network](https://eprint.iacr.org/2015/263).\n\n  ![attackergraph40000-10-1000short-line](https://cloud.githubusercontent.com/assets/274814/17366828/372af458-595b-11e6-81e5-2c9f97282305.png)\n\n  **Default node:** 595 attacker IPs for ~50% attack success.\n  **Default node + test-before-evict:** 620 attacker IPs for ~50% attack success.\n  **Feeler node:** 5540 attacker IPs for ~50% attack success.\n  **Feeler node + test-before-evict:** 8600 attacker IPs for ~50% attack success.\n\n  The node running feeler connections has 10 times as many online IP addresses in its tried table making an attack 10 times harder (i.e. requiring the an attacker require 10 times as many IP addresses in different /16s). Adding test-before-evict increases resistance of the node by an additional 3000 attacker IP addresses.\n\n  Below I graph the attack over even greater attacker resources (i.e. more attacker controled IP addresses). Note that test-before-evict maintains some security far longer even against an attacker with 50,000 IPs. If this node had a larger tried table test-before-evict could greatly boost a nodes resistance to eclipse attacks.\n\n  ![attacker graph long view](https://cloud.githubusercontent.com/assets/274814/17367108/96f46d64-595c-11e6-91cd-edba160598e7.png)\n\nTree-SHA512: fdad4d26aadeaad9bcdc71929b3eb4e1f855b3ee3541fbfbe25dca8d7d0a1667815402db0cb4319db6bd3fcd32d67b5bbc0e12045c4252d62d6239b7d77c4395",
      "tree": {
        "sha": "8e512e05ff3a9fcb6b466492e108409911a57c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e512e05ff3a9fcb6b466492e108409911a57c89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36834f10b80cd349ed35e4d2a04c50a8e02f269",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanvvoAAoJEB5K7WKYbNJddkwH+gOjtiltHLgzgso+GHrGzeBI\nIGQHRT/rSI7qrdGHhNcmEkGFEIJNiCLuNgcZ1VLW/syiX7rBy2b4v2LehRBmJ4AJ\ncdWmSD9B9533fbvoAdMXR9rjC6GgBRcoH0CTc3TucNgMK7zaRi16NIfBv8+YgoJW\nZAhGev+b2mze5F3xoL/Z6lqJRr2Mex8DwtJ6TkTvrhJSQughbAYWyFx2FgqGRLqn\nGwJqgFCBSrtrIcQk0xDbDWJR27bKk0L0otwQv44fdHeWWa+zeJKxu8U28Y4eO6Su\nzjKYRFk2g5iDzQvakLk/Q9Vo8tuGhophxbLOhQV/vTuiWDBZyqjtuTvkNfTpr6E=\n=zWPp\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e512e05ff3a9fcb6b466492e108409911a57c89\nparent 20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf\nparent e68172ed9fd0e35d4e848142e9b36ffcc41de254\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520368608 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520368616 +0100\n\nMerge #9037: net: Add test-before-evict discipline to addrman\n\ne68172ed9 Add test-before-evict discipline to addrman (Ethan Heilman)\n\nPull request description:\n\n  This change implement countermeasures 3 (test-before-evict) suggested in our paper: [\"Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network\"](http://cs-people.bu.edu/heilman/eclipse/).\n  # Design:\n\n  A collision occurs when an address, addr1, is being moved to the tried table from the new table, but maps to a position in the tried table which already contains an address (addr2). The current behavior is that addr1 would evict addr2 from the tried table.\n\n  This change ensures that during a collision, addr1 is not inserted into tried but instead inserted into a buffer (setTriedCollisions). The to-be-evicted address, addr2, is then tested by [a feeler connection](https://github.com/bitcoin/bitcoin/pull/8282). If addr2 is found to be online, we remove addr1 from the buffer and addr2 is not evicted, on the other hand if addr2 is found be offline it is replaced by addr1.\n\n  An additional small advantage of this change is that, as no more than ten addresses can be in the test buffer at once, and addresses are only cleared one at a time from the test buffer (at 2 minute intervals), thus an attacker is forced to wait at least two minutes to insert a new address into tried after filling up the test buffer. This rate limits an attacker attempting to launch an eclipse attack.\n  # Risk mitigation:\n  - To prevent this functionality from being used as a DoS vector, we limit the number of addresses which are to be tested to ten. If we have more than ten addresses to test, we drop new addresses being added to tried if they would evict an address. Since the feeler thread only creates one new connection every 2 minutes the additional network overhead is limited.\n  - An address in tried gains immunity from tests for 4 hours after it has been tested or successfully connected to.\n  # Tests:\n\n  This change includes additional addrman unittests which test this behavior.\n\n  I ran an instance of this change with a much smaller tried table (2 buckets of 64 addresses) so that collisions were much more likely and observed evictions.\n\n  ```\n  2016-10-27 07:20:26 Swapping 208.12.64.252:8333 for 68.62.95.247:8333 in tried table\n  2016-10-27 07:20:26 Moving 208.12.64.252:8333 to tried\n  ```\n\n  I documented tests we ran against similar earlier versions of this change in #6355.\n  # Security Benefit\n\n  This is was originally posted in PR #8282 see [this comment for full details](https://github.com/bitcoin/bitcoin/pull/8282#issuecomment-237255215).\n\n  To determine the security benefit of these larger numbers of IPs in the tried table I modeled the attack presented in [Eclipse Attacks on Bitcoin\u2019s Peer-to-Peer Network](https://eprint.iacr.org/2015/263).\n\n  ![attackergraph40000-10-1000short-line](https://cloud.githubusercontent.com/assets/274814/17366828/372af458-595b-11e6-81e5-2c9f97282305.png)\n\n  **Default node:** 595 attacker IPs for ~50% attack success.\n  **Default node + test-before-evict:** 620 attacker IPs for ~50% attack success.\n  **Feeler node:** 5540 attacker IPs for ~50% attack success.\n  **Feeler node + test-before-evict:** 8600 attacker IPs for ~50% attack success.\n\n  The node running feeler connections has 10 times as many online IP addresses in its tried table making an attack 10 times harder (i.e. requiring the an attacker require 10 times as many IP addresses in different /16s). Adding test-before-evict increases resistance of the node by an additional 3000 attacker IP addresses.\n\n  Below I graph the attack over even greater attacker resources (i.e. more attacker controled IP addresses). Note that test-before-evict maintains some security far longer even against an attacker with 50,000 IPs. If this node had a larger tried table test-before-evict could greatly boost a nodes resistance to eclipse attacks.\n\n  ![attacker graph long view](https://cloud.githubusercontent.com/assets/274814/17367108/96f46d64-595c-11e6-91cd-edba160598e7.png)\n\nTree-SHA512: fdad4d26aadeaad9bcdc71929b3eb4e1f855b3ee3541fbfbe25dca8d7d0a1667815402db0cb4319db6bd3fcd32d67b5bbc0e12045c4252d62d6239b7d77c4395\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36834f10b80cd349ed35e4d2a04c50a8e02f269",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a36834f10b80cd349ed35e4d2a04c50a8e02f269",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36834f10b80cd349ed35e4d2a04c50a8e02f269/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf"
      },
      {
        "sha": "e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e68172ed9fd0e35d4e848142e9b36ffcc41de254",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e68172ed9fd0e35d4e848142e9b36ffcc41de254"
      }
    ],
    "stats": {
      "total": 338,
      "additions": 319,
      "deletions": 19
    },
    "files": [
      {
        "sha": "9a7fad490079863623df4afca6b54e1c0e101f99",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 4,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "patch": "@@ -187,7 +187,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId)\n     info.fInTried = true;\n }\n \n-void CAddrMan::Good_(const CService& addr, int64_t nTime)\n+void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime)\n {\n     int nId;\n \n@@ -233,10 +233,22 @@ void CAddrMan::Good_(const CService& addr, int64_t nTime)\n     if (nUBucket == -1)\n         return;\n \n-    LogPrint(BCLog::ADDRMAN, \"Moving %s to tried\\n\", addr.ToString());\n+    // which tried bucket to move the entry to\n+    int tried_bucket = info.GetTriedBucket(nKey);\n+    int tried_bucket_pos = info.GetBucketPosition(nKey, false, tried_bucket);\n+\n+    // Will moving this address into tried evict another entry?\n+    if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n+        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n+            m_tried_collisions.insert(nId);\n+        }\n+    } else {\n+        LogPrint(BCLog::ADDRMAN, \"Moving %s to tried\\n\", addr.ToString());\n \n-    // move nId to the tried tables\n-    MakeTried(info, nId);\n+        // move nId to the tried tables\n+        MakeTried(info, nId);\n+    }\n }\n \n bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n@@ -521,3 +533,82 @@ void CAddrMan::SetServices_(const CService& addr, ServiceFlags nServices)\n int CAddrMan::RandomInt(int nMax){\n     return GetRandInt(nMax);\n }\n+\n+void CAddrMan::ResolveCollisions_()\n+{\n+    for (std::set<int>::iterator it = m_tried_collisions.begin(); it != m_tried_collisions.end();) {\n+        int id_new = *it;\n+\n+        bool erase_collision = false;\n+\n+        // If id_new not found in mapInfo remove it from m_tried_collisions\n+        if (mapInfo.count(id_new) != 1) {\n+            erase_collision = true;\n+        } else {\n+            CAddrInfo& info_new = mapInfo[id_new];\n+\n+            // Which tried bucket to move the entry to.\n+            int tried_bucket = info_new.GetTriedBucket(nKey);\n+            int tried_bucket_pos = info_new.GetBucketPosition(nKey, false, tried_bucket);\n+            if (!info_new.IsValid()) { // id_new may no longer map to a valid address\n+                erase_collision = true;\n+            } else if (vvTried[tried_bucket][tried_bucket_pos] != -1) { // The position in the tried bucket is not empty\n+\n+                // Get the to-be-evicted address that is being tested\n+                int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+                CAddrInfo& info_old = mapInfo[id_old];\n+\n+                // Has successfully connected in last X hours\n+                if (GetAdjustedTime() - info_old.nLastSuccess < ADDRMAN_REPLACEMENT_HOURS*(60*60)) {\n+                    erase_collision = true;\n+                } else if (GetAdjustedTime() - info_old.nLastTry < ADDRMAN_REPLACEMENT_HOURS*(60*60)) { // attempted to connect and failed in last X hours\n+\n+                    // Give address at least 60 seconds to successfully connect\n+                    if (GetAdjustedTime() - info_old.nLastTry > 60) {\n+                        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+\n+                        // Replaces an existing address already in the tried table with the new address\n+                        Good_(info_new, false, GetAdjustedTime());\n+                        erase_collision = true;\n+                    }\n+                }\n+            } else { // Collision is not actually a collision anymore\n+                Good_(info_new, false, GetAdjustedTime());\n+                erase_collision = true;\n+            }\n+        }\n+\n+        if (erase_collision) {\n+            m_tried_collisions.erase(it++);\n+        } else {\n+            it++;\n+        }\n+    }\n+}\n+\n+CAddrInfo CAddrMan::SelectTriedCollision_()\n+{\n+    if (m_tried_collisions.size() == 0) return CAddrInfo();\n+\n+    std::set<int>::iterator it = m_tried_collisions.begin();\n+\n+    // Selects a random element from m_tried_collisions\n+    std::advance(it, GetRandInt(m_tried_collisions.size()));\n+    int id_new = *it;\n+\n+    // If id_new not found in mapInfo remove it from m_tried_collisions\n+    if (mapInfo.count(id_new) != 1) {\n+        m_tried_collisions.erase(it);\n+        return CAddrInfo();\n+    }\n+\n+    CAddrInfo& newInfo = mapInfo[id_new];\n+\n+    // which tried bucket to move the entry to\n+    int tried_bucket = newInfo.GetTriedBucket(nKey);\n+    int tried_bucket_pos = newInfo.GetBucketPosition(nKey, false, tried_bucket);\n+\n+    int id_old = vvTried[tried_bucket][tried_bucket_pos];\n+\n+    return mapInfo[id_old];\n+}"
      },
      {
        "sha": "67423c6c55baf3709a86f51fe94fa6c6a2bf0b24",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 40,
        "deletions": 3,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "patch": "@@ -165,6 +165,9 @@ class CAddrInfo : public CAddress\n //! ... in at least this many days\n #define ADDRMAN_MIN_FAIL_DAYS 7\n \n+//! how recent a successful connection should be before we allow an address to be evicted from tried\n+#define ADDRMAN_REPLACEMENT_HOURS 4\n+\n //! the maximum percentage of nodes to return in a getaddr call\n #define ADDRMAN_GETADDR_MAX_PCT 23\n \n@@ -176,6 +179,9 @@ class CAddrInfo : public CAddress\n #define ADDRMAN_NEW_BUCKET_COUNT (1 << ADDRMAN_NEW_BUCKET_COUNT_LOG2)\n #define ADDRMAN_BUCKET_SIZE (1 << ADDRMAN_BUCKET_SIZE_LOG2)\n \n+//! the maximum number of tried addr collisions to store\n+#define ADDRMAN_SET_TRIED_COLLISION_SIZE 10\n+\n /** \n  * Stochastical (IP) address manager \n  */\n@@ -212,6 +218,9 @@ class CAddrMan\n     //! last time Good was called (memory only)\n     int64_t nLastGood;\n \n+    //! Holds addrs inserted into tried table that collide with existing entries. Test-before-evict discpline used to resolve these collisions.\n+    std::set<int> m_tried_collisions;\n+\n protected:\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n@@ -239,7 +248,7 @@ class CAddrMan\n     void ClearNew(int nUBucket, int nUBucketPos);\n \n     //! Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, int64_t nTime);\n+    void Good_(const CService &addr, bool test_before_evict, int64_t time);\n \n     //! Add an entry to the \"new\" table.\n     bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n@@ -250,6 +259,12 @@ class CAddrMan\n     //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n     CAddrInfo Select_(bool newOnly);\n \n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions_();\n+\n+    //! Return a random to-be-evicted tried table address.\n+    CAddrInfo SelectTriedCollision_();\n+\n     //! Wraps GetRandInt to allow tests to override RandomInt and make it determinismistic.\n     virtual int RandomInt(int nMax);\n \n@@ -537,11 +552,11 @@ class CAddrMan\n     }\n \n     //! Mark an entry as accessible.\n-    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())\n+    void Good(const CService &addr, bool test_before_evict = true, int64_t nTime = GetAdjustedTime())\n     {\n         LOCK(cs);\n         Check();\n-        Good_(addr, nTime);\n+        Good_(addr, test_before_evict, nTime);\n         Check();\n     }\n \n@@ -554,6 +569,28 @@ class CAddrMan\n         Check();\n     }\n \n+    //! See if any to-be-evicted tried table entries have been tested and if so resolve the collisions.\n+    void ResolveCollisions()\n+    {\n+        LOCK(cs);\n+        Check();\n+        ResolveCollisions_();\n+        Check();\n+    }\n+\n+    //! Randomly select an address in tried that another address is attempting to evict.\n+    CAddrInfo SelectTriedCollision()\n+    {\n+        CAddrInfo ret;\n+        {\n+            LOCK(cs);\n+            Check();\n+            ret = SelectTriedCollision_();\n+            Check();\n+        }\n+        return ret;\n+    }\n+\n     /**\n      * Choose an address to connect to.\n      */"
      },
      {
        "sha": "f7e6c300b1271d365c0a75cfa0dcd6db852a74b5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "patch": "@@ -1828,11 +1828,18 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n         }\n \n+        addrman.ResolveCollisions();\n+\n         int64_t nANow = GetAdjustedTime();\n         int nTries = 0;\n         while (!interruptNet)\n         {\n-            CAddrInfo addr = addrman.Select(fFeeler);\n+            CAddrInfo addr = addrman.SelectTriedCollision();\n+\n+            // SelectTriedCollision returns an invalid address if it is empty.\n+            if (!fFeeler || !addr.IsValid()) {\n+                addr = addrman.Select(fFeeler);\n+            }\n \n             // if we selected an invalid address, restart\n             if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))"
      },
      {
        "sha": "0d8bd901195487f51fdcd93fdfad7a3fc3587e8c",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 176,
        "deletions": 11,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36834f10b80cd349ed35e4d2a04c50a8e02f269/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "patch": "@@ -52,6 +52,17 @@ class CAddrManTest : public CAddrMan\n     {\n         CAddrMan::Delete(nId);\n     }\n+\n+    // Simulates connection failure so that we can test eviction of offline nodes\n+    void SimConnFail(CService& addr)\n+    {\n+         int64_t nLastSuccess = 1;\n+         Good_(addr, true, nLastSuccess); // Set last good connection in the deep past.\n+\n+         bool count_failure = false;\n+         int64_t nLastTry = GetAdjustedTime()-61;\n+         Attempt(addr, count_failure, nLastTry);\n+     }\n };\n \n static CNetAddr ResolveIP(const char* ip)\n@@ -226,7 +237,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0);\n \n     for (unsigned int i = 1; i < 18; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n \n         //Test: No collision in new table yet.\n@@ -252,7 +263,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     BOOST_CHECK_EQUAL(addrman.size(), 0);\n \n     for (unsigned int i = 1; i < 80; i++) {\n-        CService addr = ResolveService(\"250.1.1.\" + boost::to_string(i));\n+        CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n@@ -385,7 +396,7 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n         int octet1 = i % 256;\n         int octet2 = i >> 8 % 256;\n-        std::string strAddr = boost::to_string(octet1) + \".\" + boost::to_string(octet2) + \".1.23\";\n+        std::string strAddr = std::to_string(octet1) + \".\" + std::to_string(octet2) + \".1.23\";\n         CAddress addr = CAddress(ResolveService(strAddr), NODE_NONE);\n \n         // Ensure that for all addrs in addrman, isTerrible == false.\n@@ -436,8 +447,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n         int bucket = infoi.GetTriedBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -448,8 +459,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     buckets.clear();\n     for (int j = 0; j < 255; j++) {\n         CAddrInfo infoj = CAddrInfo(\n-            CAddress(ResolveService(\"250.\" + boost::to_string(j) + \".1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(j) + \".1.1\"));\n+            CAddress(ResolveService(\"250.\" + std::to_string(j) + \".1.1\"), NODE_NONE),\n+            ResolveIP(\"250.\" + std::to_string(j) + \".1.1\"));\n         int bucket = infoj.GetTriedBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -488,8 +499,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     std::set<int> buckets;\n     for (int i = 0; i < 255; i++) {\n         CAddrInfo infoi = CAddrInfo(\n-            CAddress(ResolveService(\"250.1.1.\" + boost::to_string(i)), NODE_NONE),\n-            ResolveIP(\"250.1.1.\" + boost::to_string(i)));\n+            CAddress(ResolveService(\"250.1.1.\" + std::to_string(i)), NODE_NONE),\n+            ResolveIP(\"250.1.1.\" + std::to_string(i)));\n         int bucket = infoi.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n     }\n@@ -501,7 +512,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int j = 0; j < 4 * 255; j++) {\n         CAddrInfo infoj = CAddrInfo(CAddress(\n                                         ResolveService(\n-                                            boost::to_string(250 + (j / 255)) + \".\" + boost::to_string(j % 256) + \".1.1\"), NODE_NONE),\n+                                            std::to_string(250 + (j / 255)) + \".\" + std::to_string(j % 256) + \".1.1\"), NODE_NONE),\n             ResolveIP(\"251.4.1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n@@ -514,12 +525,166 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     for (int p = 0; p < 255; p++) {\n         CAddrInfo infoj = CAddrInfo(\n             CAddress(ResolveService(\"250.1.1.1\"), NODE_NONE),\n-            ResolveIP(\"250.\" + boost::to_string(p) + \".1.1\"));\n+            ResolveIP(\"250.\" + std::to_string(p) + \".1.1\"));\n         int bucket = infoj.GetNewBucket(nKey1);\n         buckets.insert(bucket);\n     }\n     // Test: IP addresses in the different source groups should map to more\n     //  than 64 buckets.\n     BOOST_CHECK(buckets.size() > 64);\n }\n+\n+\n+BOOST_AUTO_TEST_CASE(addrman_selecttriedcollision)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Empty addrman should return blank addrman info.\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collisions yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Ensure Good handles duplicates well.\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Good(addr);\n+\n+        BOOST_CHECK(addrman.size() == 22);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_noevict)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collision yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Collision between 23 and 19.\n+    CService addr23 = ResolveService(\"250.1.1.23\");\n+    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    addrman.Good(addr23);\n+\n+    BOOST_CHECK(addrman.size() == 23);\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.19:0\");\n+\n+    // 23 should be discarded and 19 not evicted.\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Lets create two collisions.\n+    for (unsigned int i = 24; i < 33; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Cause a collision.\n+    CService addr33 = ResolveService(\"250.1.1.33\");\n+    addrman.Add(CAddress(addr33, NODE_NONE), source);\n+    addrman.Good(addr33);\n+    BOOST_CHECK(addrman.size() == 33);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.27:0\");\n+\n+    // Cause a second collision.\n+    addrman.Add(CAddress(addr23, NODE_NONE), source);\n+    addrman.Good(addr23);\n+    BOOST_CHECK(addrman.size() == 33);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() != \"[::]:0\");\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Empty addrman should return blank addrman info.\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // Add twenty two addresses.\n+    CNetAddr source = ResolveIP(\"252.2.2.2\");\n+    for (unsigned int i = 1; i < 23; i++) {\n+        CService addr = ResolveService(\"250.1.1.\"+std::to_string(i));\n+        addrman.Add(CAddress(addr, NODE_NONE), source);\n+        addrman.Good(addr);\n+\n+        // No collision yet.\n+        BOOST_CHECK(addrman.size() == i);\n+        BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+    }\n+\n+    // Collision between 23 and 19.\n+    CService addr = ResolveService(\"250.1.1.23\");\n+    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    addrman.Good(addr);\n+\n+    BOOST_CHECK(addrman.size() == 23);\n+    CAddrInfo info = addrman.SelectTriedCollision();\n+    BOOST_CHECK(info.ToString() == \"250.1.1.19:0\");\n+\n+    // Ensure test of address fails, so that it is evicted.\n+    addrman.SimConnFail(info);\n+\n+    // Should swap 23 for 19.\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // If 23 was swapped for 19, then this should cause no collisions.\n+    addrman.Add(CAddress(addr, NODE_NONE), source);\n+    addrman.Good(addr);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+\n+    // If we insert 19 is should collide with 23.\n+    CService addr19 = ResolveService(\"250.1.1.19\");\n+    addrman.Add(CAddress(addr19, NODE_NONE), source);\n+    addrman.Good(addr19);\n+\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.23:0\");\n+\n+    addrman.ResolveCollisions();\n+    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n+}\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "85424d79eded606a61cd6a2a3173b8bd04e1201c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTQyNGQ3OWVkZWQ2MDZhNjFjZDZhMmEzMTczYjhiZDA0ZTEyMDFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:45:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:46:10Z"
      },
      "message": "Merge #12603: [docs] PeerLogicValidation interface\n\nb7cd08b71 Add documentation to PeerLogicValidation interface and related functions (James O'Beirne)\n\nPull request description:\n\n  Adds docs for PeerLogicValidation's public interface and two related functions.\n\nTree-SHA512: b4c2f47e9baa9396d2b6faf3792e46b371c50cd91b9ac890f263f4d14eb24a71e7b40ceb4cbb41e254f5008eff357f417b842618e7ebece9039802ab2a5dd728",
      "tree": {
        "sha": "d9705ed1f5e8a6c735d5de44dad15211f74d1050",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9705ed1f5e8a6c735d5de44dad15211f74d1050"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85424d79eded606a61cd6a2a3173b8bd04e1201c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanv4SAAoJEB5K7WKYbNJdMiQH/2kxyRdP3K9ZoQMSXV70Cqa7\nbO8V+BM7dBp95SmbJsiLeLwcTjyNQtYlBTDFV2rMMuNorUK+dU8FIj15OeloBMSK\nmD3ajzLbcnTt/wBO1RC+J9wysAE9q1/DMYoUeKqbv9paJNkTl9EJHDBuagbzPV8y\nNzUwDWBcLaxgfmnws8at/HkEcPndOToqJiVbJJxfIckYlC0vwwRqHDHaNlzgdlAs\nP3QIbM/D4J/3K9WUpa9TVdVq0EBt0fuZaBgf/ZKBfrncYIU0+Za5peE3piKUvQDF\n2LdlyuRqGBKpe9ImPiuSiOXO1gRuS5yjiv4FajyQJpECqQY0fIsMOy1oQZAwynU=\n=opf5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICik3U4q7Vjf51fKypwwdnt5rZ98cNjw7210R0178bGTCP/wEC76xPITH+ji\n5EUcRSowZJQI8SAxl/2h96M3+CqZor83YE3RSf8AwWm6Lers/NYWdkT1dAjxIJow\nobWdmafnabe8AtwJr32f1YqCqstDiaPWTcwTNxanCPAg6kRLeZFovKkJ8jBzqQa3\ne4eRJVj3FL6xKIIezc8Dxn0I8QRanv4V8AjjDkpisH6AsQCD3+MNLvkMjiwraHR0\ncHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEE5PRe1U\ntebIpCN7QO9KMKcI8SCPUPkS2PHi4/hxbC2xu0KlHGS7txYYhL6gZtvSoK0pcwjw\nIDAOuvhZ/KNKCgSyoCY9nBObNcvJXB5+pEoRs7WQN14pCPEEWp7+FfAI6L/OgbZB\n2AcAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1l\nc3RhbXBzLm9yZ/AQ0IDqxzM5H9mkz6RQSy6hegjxICEdMdxind4P2vClNbjiYbQX\n6HfXsyQa8ZweY82KctQLCPAgtNXwvrAd6UhUaF+h52yu+CjHDnyrQpdJ+KoflQ+Q\ntkMI8QRanv4V8AiE6djIfq48RACD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d9705ed1f5e8a6c735d5de44dad15211f74d1050\nparent a36834f10b80cd349ed35e4d2a04c50a8e02f269\nparent b7cd08b717b57376d23ea550da60b00f239556db\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520369141 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520369170 +0100\n\nMerge #12603: [docs] PeerLogicValidation interface\n\nb7cd08b71 Add documentation to PeerLogicValidation interface and related functions (James O'Beirne)\n\nPull request description:\n\n  Adds docs for PeerLogicValidation's public interface and two related functions.\n\nTree-SHA512: b4c2f47e9baa9396d2b6faf3792e46b371c50cd91b9ac890f263f4d14eb24a71e7b40ceb4cbb41e254f5008eff357f417b842618e7ebece9039802ab2a5dd728\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85424d79eded606a61cd6a2a3173b8bd04e1201c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85424d79eded606a61cd6a2a3173b8bd04e1201c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85424d79eded606a61cd6a2a3173b8bd04e1201c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36834f10b80cd349ed35e4d2a04c50a8e02f269",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a36834f10b80cd349ed35e4d2a04c50a8e02f269"
      },
      {
        "sha": "b7cd08b717b57376d23ea550da60b00f239556db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7cd08b717b57376d23ea550da60b00f239556db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7cd08b717b57376d23ea550da60b00f239556db"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 45,
      "deletions": 3
    },
    "files": [
      {
        "sha": "482a206c8bef65ee7ab476513a408123b5e172ec",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85424d79eded606a61cd6a2a3173b8bd04e1201c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85424d79eded606a61cd6a2a3173b8bd04e1201c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "patch": "@@ -401,6 +401,12 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n+/**\n+ * When a peer sends us a valid block, instruct it to announce blocks to us\n+ * using CMPCTBLOCK if possible by adding its nodeid to the end of\n+ * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n+ * removing the first element if necessary.\n+ */\n void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n@@ -749,7 +755,11 @@ unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans)\n     return nEvicted;\n }\n \n-// Requires cs_main.\n+/**\n+ * Mark a misbehaving peer to be banned depending upon the value of `-banscore`.\n+ *\n+ * Requires cs_main.\n+ */\n void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n {\n     if (howmuch == 0)\n@@ -808,6 +818,10 @@ PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &schedu\n     scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n+/**\n+ * Evict orphan txn pool entries (EraseOrphanTx) based on a newly connected\n+ * block. Also save the time of the last tip update.\n+ */\n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK(g_cs_orphans);\n \n@@ -828,7 +842,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n     }\n \n-    // Erase orphan transactions include or precluded by this block\n+    // Erase orphan transactions included or precluded by this block\n     if (vOrphanErase.size()) {\n         int nErased = 0;\n         for (uint256 &orphanHash : vOrphanErase) {\n@@ -847,6 +861,10 @@ static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_bloc\n static uint256 most_recent_block_hash;\n static bool fWitnessesPresentInMostRecentCompactBlock;\n \n+/**\n+ * Maintain state about the best-seen block and fast-announce a compact block \n+ * to compatible peers.\n+ */\n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n     const CNetMsgMaker msgMaker(PROTOCOL_VERSION);\n@@ -888,6 +906,10 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n     });\n }\n \n+/**\n+ * Update our best height and announce any block hashes which weren't previously \n+ * in chainActive to our peers.\n+ */\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n@@ -920,6 +942,10 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     nTimeBestReceived = GetTime();\n }\n \n+/**\n+ * Handle invalid block rejection and consequent peer banning, maintain which \n+ * peers announce compact blocks.\n+ */\n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n     LOCK(cs_main);\n "
      },
      {
        "sha": "ff1ebc59da353b46a0568dfa1a9bdacca6215ae6",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85424d79eded606a61cd6a2a3173b8bd04e1201c/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85424d79eded606a61cd6a2a3173b8bd04e1201c/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "patch": "@@ -42,13 +42,26 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n public:\n     explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n+    /**\n+     * Overridden from CValidationInterface.\n+     */\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n-\n+    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n     void InitializeNode(CNode* pnode) override;\n+    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n     void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n     /** Process protocol messages received from a given node */\n     bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n@@ -61,8 +74,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n+    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds);\n \n private:"
      }
    ]
  },
  {
    "sha": "b4db76c550c04957bc2721628f77bc24dce52f7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNGRiNzZjNTUwYzA0OTU3YmMyNzIxNjI4Zjc3YmMyNGRjZTUyZjdm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:51:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:52:53Z"
      },
      "message": "net: Correct addrman logging\n\nThese were introduced in #9037.\n\nFound by @theuni.",
      "tree": {
        "sha": "436634fbc449b361cc7b05f917a86a17a5ea856e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436634fbc449b361cc7b05f917a86a17a5ea856e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4db76c550c04957bc2721628f77bc24dce52f7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4db76c550c04957bc2721628f77bc24dce52f7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4db76c550c04957bc2721628f77bc24dce52f7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4db76c550c04957bc2721628f77bc24dce52f7f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85424d79eded606a61cd6a2a3173b8bd04e1201c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e811dd4bea51e40211e430ff3ecd162803c40082",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4db76c550c04957bc2721628f77bc24dce52f7f/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4db76c550c04957bc2721628f77bc24dce52f7f/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=b4db76c550c04957bc2721628f77bc24dce52f7f",
        "patch": "@@ -239,7 +239,7 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n \n     // Will moving this address into tried evict another entry?\n     if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n         if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n             m_tried_collisions.insert(nId);\n         }\n@@ -565,7 +565,7 @@ void CAddrMan::ResolveCollisions_()\n \n                     // Give address at least 60 seconds to successfully connect\n                     if (GetAdjustedTime() - info_old.nLastTry > 60) {\n-                        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+                        LogPrint(BCLog::ADDRMAN, \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n \n                         // Replaces an existing address already in the tried table with the new address\n                         Good_(info_new, false, GetAdjustedTime());"
      }
    ]
  },
  {
    "sha": "b7c8812ad0c2b10a760c5b900c18275620b8c675",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2M4ODEyYWQwYzJiMTBhNzYwYzViOTAwYzE4Mjc1NjIwYjhjNjc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:55:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T20:55:37Z"
      },
      "message": "Merge #12564: [arith_uint256] Avoid unnecessary this-copy using prefix operator\n\n22b4aae02 [arith_uint256] Avoid unnecessary this-copy using prefix operator (Karl-Johan Alm)\n\nPull request description:\n\n  I noticed while profiling a related project that `operator-()` actually calls the `base_uint` constructor, which is because the postfix operator version of `operator++` (used in `operator-()`) creates a copy of `this` and returns it.\n\nTree-SHA512: d9a2665caa3d93f064cdeaf1c6fada101b9943bb53d93ccac6d9a0edac20279d2e921349e30239039c71e0a9629e45c29ec9f10d8d7499e936cdba6cb7c3c3eb",
      "tree": {
        "sha": "44f0f17f8a1e277c7e69bcd90586c7b4e85d84eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44f0f17f8a1e277c7e69bcd90586c7b4e85d84eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7c8812ad0c2b10a760c5b900c18275620b8c675",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanwBKAAoJEB5K7WKYbNJdETIIALGf/oMkpVigVM3MYj3eFIDz\nGPhlh124GFktGYtEAmWHBgcfGBhIEpBS3Ol08yPdMewA6Rmwp88wsB6RPSXURY7v\ndXWBeXfoxWMLedZlImi0kXhZtoKSm8BDCibLMt8tsCFX2tfo7GYZN9lUrKIv7TVv\nUTHh/8Jam8msXCJBp5VvX6aT55m8MGCWZKPPtI6yMsViPFrWde+DzBkF77n+VCay\nd5UvLHPXZPRuSdhHdfZ3/AjaKae/GFuout41X1CVh+cQfbsbOwmMj9NBNpKS5jjW\n5d9Lson2WZoL3U2Pu5ODj5KyyuMV8MS90nLdiOD0oKEVeOc4a5pYf7apPS9S5VE=\n=hgoz\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILhbDfUoOpnrL+dsdnrvvrm5RT+/RBXGfSFLbOoSO9aLCP/wEFaxiiM6CVV+\nZtclgXFKdr0I8SAvOvuy20loukKN9pNJkMAZoxMUsTwokKGc3YPlyzRfSgjxIJ7o\nhlJtqlY4DYHt14S0iZWKW5icdvghH4D/PaXwvkfGCPEEWp8ATPAIoqq7XplHgoQA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BBmbrMgUA9Tn16QXUNlMqCvCPAgkjvd6e8MZ9fzlr5h3sUOvuygYNJmgNrN\nmub10w8ZoWoI8SCJD+jjv2WvTZLGpOR28CHzFsS1eEMzbH9OLwairIosvgjxBFqf\nAEzwCPmIbk/Bx2/7AIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDvjPp2KYtu5s7nFm6KTDRQCPAgoEmWWj6Eflxu\nyrhidJTTcN0ehaHpmelkMnIX0HT37III8QRanwBN8AgnYgIpSpj6HACD3+MNLvkM\nji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 44f0f17f8a1e277c7e69bcd90586c7b4e85d84eb\nparent 85424d79eded606a61cd6a2a3173b8bd04e1201c\nparent 22b4aae0284511e9a6a957197dae237a1799aa20\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520369723 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520369737 +0100\n\nMerge #12564: [arith_uint256] Avoid unnecessary this-copy using prefix operator\n\n22b4aae02 [arith_uint256] Avoid unnecessary this-copy using prefix operator (Karl-Johan Alm)\n\nPull request description:\n\n  I noticed while profiling a related project that `operator-()` actually calls the `base_uint` constructor, which is because the postfix operator version of `operator++` (used in `operator-()`) creates a copy of `this` and returns it.\n\nTree-SHA512: d9a2665caa3d93f064cdeaf1c6fada101b9943bb53d93ccac6d9a0edac20279d2e921349e30239039c71e0a9629e45c29ec9f10d8d7499e936cdba6cb7c3c3eb\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7c8812ad0c2b10a760c5b900c18275620b8c675",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c8812ad0c2b10a760c5b900c18275620b8c675",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7c8812ad0c2b10a760c5b900c18275620b8c675/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85424d79eded606a61cd6a2a3173b8bd04e1201c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85424d79eded606a61cd6a2a3173b8bd04e1201c"
      },
      {
        "sha": "22b4aae0284511e9a6a957197dae237a1799aa20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22b4aae0284511e9a6a957197dae237a1799aa20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22b4aae0284511e9a6a957197dae237a1799aa20"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f4cc8c2bf77ea1de8ffa2ce8756ac4a14e624a5",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7c8812ad0c2b10a760c5b900c18275620b8c675/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7c8812ad0c2b10a760c5b900c18275620b8c675/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=b7c8812ad0c2b10a760c5b900c18275620b8c675",
        "patch": "@@ -85,7 +85,7 @@ class base_uint\n         base_uint ret;\n         for (int i = 0; i < WIDTH; i++)\n             ret.pn[i] = ~pn[i];\n-        ret++;\n+        ++ret;\n         return ret;\n     }\n "
      }
    ]
  },
  {
    "sha": "c5be37e2c6479d9254992616a8d07ee9a788d74a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWJlMzdlMmM2NDc5ZDkyNTQ5OTI2MTZhOGQwN2VlOWE3ODhkNzRh",
    "commit": {
      "author": {
        "name": "Dan Bolser",
        "email": "dan.bolser@gmail.com",
        "date": "2018-03-02T14:17:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:07:20Z"
      },
      "message": "doc: Mention configure without wallet in FreeBSD instructions\n\nThe wallet part is described as optional, but apparently isn't",
      "tree": {
        "sha": "a3825f7aa98c33e31f211b9952d1dc21bf57da5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3825f7aa98c33e31f211b9952d1dc21bf57da5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5be37e2c6479d9254992616a8d07ee9a788d74a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5be37e2c6479d9254992616a8d07ee9a788d74a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5be37e2c6479d9254992616a8d07ee9a788d74a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5be37e2c6479d9254992616a8d07ee9a788d74a/comments",
    "author": {
      "login": "dbolser",
      "id": 128659,
      "node_id": "MDQ6VXNlcjEyODY1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/128659?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dbolser",
      "html_url": "https://github.com/dbolser",
      "followers_url": "https://api.github.com/users/dbolser/followers",
      "following_url": "https://api.github.com/users/dbolser/following{/other_user}",
      "gists_url": "https://api.github.com/users/dbolser/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dbolser/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dbolser/subscriptions",
      "organizations_url": "https://api.github.com/users/dbolser/orgs",
      "repos_url": "https://api.github.com/users/dbolser/repos",
      "events_url": "https://api.github.com/users/dbolser/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dbolser/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7c8812ad0c2b10a760c5b900c18275620b8c675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7c8812ad0c2b10a760c5b900c18275620b8c675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c8812ad0c2b10a760c5b900c18275620b8c675"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d10484a6516c69b7e74a8a174c65453ae8b48af",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5be37e2c6479d9254992616a8d07ee9a788d74a/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5be37e2c6479d9254992616a8d07ee9a788d74a/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=c5be37e2c6479d9254992616a8d07ee9a788d74a",
        "patch": "@@ -326,6 +326,7 @@ For the wallet (optional):\n Then build using:\n \n     ./autogen.sh\n+    ./configure --disable-wallet # OR\n     ./configure BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx\"\n     gmake\n "
      }
    ]
  },
  {
    "sha": "12ac2f0d7129151ec4c49be4061575dacb9199d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmFjMmYwZDcxMjkxNTFlYzRjNDliZTQwNjE1NzVkYWNiOTE5OWQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:08:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:08:43Z"
      },
      "message": "Merge #12581: doc: Mention configure without wallet in FreeBSD instructions\n\nc5be37e2c doc: Mention configure without wallet in FreeBSD instructions (Dan Bolser)\n\nTree-SHA512: 495f9c1b6d73e53ad66883f26fd789423cbbd73110d4aff0aad9c09bd50583277cf8a3757e4ac6c7e0a630e68214eb711227330bfcce6944e1f9fc5d52e68ed0",
      "tree": {
        "sha": "a3825f7aa98c33e31f211b9952d1dc21bf57da5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3825f7aa98c33e31f211b9952d1dc21bf57da5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12ac2f0d7129151ec4c49be4061575dacb9199d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanwNbAAoJEB5K7WKYbNJdCX8H/A8K54lGtEYzEe18IaT5tqho\nTb72tQKWUquql/r63weU5Prmw0n41PWa4rqVScN1yUzLkOL/NileSz0SMc7sefgH\nqERXeqJw+1ZUSVtpN3YNOEtPuOgnkU8Z6UOetizyHObSEjyvbBxpS3f3lR0L34d8\n8qEogIRv3iwjWlZaUNabx47wW5JreuwMYocpt06Sat6JLQPSHjerqSSFsQZUrh3P\nI7UlA5+Y+g5Qai6Ku8M3leG6WMiGC90u6e7Vg25p9A+G5psxvSqt1zQeAUNpRv9x\nu2T6v/swVffv+yERkO685cI5sVTKNQplLhJFrsfZghgAR78x5qZA7zQbi8vGyDg=\n=C75M\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIK6dvPyWZfsPyNAewxK81nsumymKqaPi7kkU9pcpjg8/CP/wEDT0VRWGaehm\n1bxAJ+BwencI8QRanwNe8Ajwd2lKDL3bcgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQadeN+jwxk36jXkiD\nN6svxwjxBFqfA13wCCwBDctxWFluAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BCUqcRjCNJHqzhj1xso5sdXCPAg\n1+UJ810oHEmhiLymJym1hN0Mhc7zKU0giccs86mw0qUI8CAZbAMWZW+SD4jDnCHY\nvQcEQLANV0saQ8Z7cMAUN+gg9QjwIJJ85AKv3+7xmLXEVH7eT2ZbWmHD1NUoeqOM\nI5QjuvhUCPEEWp8DXvAIODsRG3QgeFcAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5\nLmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a3825f7aa98c33e31f211b9952d1dc21bf57da5e\nparent b7c8812ad0c2b10a760c5b900c18275620b8c675\nparent c5be37e2c6479d9254992616a8d07ee9a788d74a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520370514 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520370523 +0100\n\nMerge #12581: doc: Mention configure without wallet in FreeBSD instructions\n\nc5be37e2c doc: Mention configure without wallet in FreeBSD instructions (Dan Bolser)\n\nTree-SHA512: 495f9c1b6d73e53ad66883f26fd789423cbbd73110d4aff0aad9c09bd50583277cf8a3757e4ac6c7e0a630e68214eb711227330bfcce6944e1f9fc5d52e68ed0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ac2f0d7129151ec4c49be4061575dacb9199d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12ac2f0d7129151ec4c49be4061575dacb9199d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ac2f0d7129151ec4c49be4061575dacb9199d4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7c8812ad0c2b10a760c5b900c18275620b8c675",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7c8812ad0c2b10a760c5b900c18275620b8c675",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c8812ad0c2b10a760c5b900c18275620b8c675"
      },
      {
        "sha": "c5be37e2c6479d9254992616a8d07ee9a788d74a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5be37e2c6479d9254992616a8d07ee9a788d74a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5be37e2c6479d9254992616a8d07ee9a788d74a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d10484a6516c69b7e74a8a174c65453ae8b48af",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ac2f0d7129151ec4c49be4061575dacb9199d4/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ac2f0d7129151ec4c49be4061575dacb9199d4/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=12ac2f0d7129151ec4c49be4061575dacb9199d4",
        "patch": "@@ -326,6 +326,7 @@ For the wallet (optional):\n Then build using:\n \n     ./autogen.sh\n+    ./configure --disable-wallet # OR\n     ./configure BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx\"\n     gmake\n "
      }
    ]
  },
  {
    "sha": "cd5e4381d46d01ca8282f02a18515e7b61de1dde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDVlNDM4MWQ0NmQwMWNhODI4MmYwMmExODUxNWU3YjYxZGUxZGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:14:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:15:18Z"
      },
      "message": "Merge #12479: RPC: Add child transactions to getrawmempool verbose output\n\n1dfb4e7d7 [Tests] Check output of parent/child tx list from getrawmempool, getmempooldescendants, getmempoolancestors, and REST interface (Conor Scott)\nfc44cb108 [RPC] Add list of child transactions to verbose output of getrawmempool (Conor Scott)\n\nPull request description:\n\n  `bitcoin-cli getrawmempool true` only lists a transaction's parents in the `depends` field. This change adds a `spentby` field to the json response, which lists the transaction's children in the mempool.\n\n  Currently the only way to find child transactions is to use `getrawmempool` or make another call to `getmempooldescendants` and search the response for transactions that list the parent_txid in the `depends` list, which is inefficient.\n\n  This change allows direct lookup of children.\n\n  Example Output\n  ```\n    \"9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4\": {\n      ...other geterawmempool data...\n      \"wtxid\": \"9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4\",\n      \"depends\": [\n        \"bdd92851d5766a42aeb62af667bb422a116cab4e032bba5e3dd6efe5b4b40aa0\"\n      ],\n      \"spentby\": [\n        \"dc5d3ec388a9121421208738a041ac30a22163bc2e17758f2275b6c51a15ba7b\"\n      ]\n    },\n  ```\n\nTree-SHA512: 83da7d421c9799a40ef65af3b7fdb586d6d87385f3f2ede3afd2c311725444b858f9d91cc110422a0fa31905779934fee07211ca6fe6b746792b83692c94b3ce",
      "tree": {
        "sha": "dfcb265d1bac859d8fa0ed46db45ac6073573330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfcb265d1bac859d8fa0ed46db45ac6073573330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd5e4381d46d01ca8282f02a18515e7b61de1dde",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanwTnAAoJEB5K7WKYbNJd2N0H/jKZCFypXP5nWJi0Pxyja4Kf\nmApSpWBBWNKUg05AuVqCkSdy4GURGQRMBNkhrAUpTYGRjUNzsUhNJXjbvts8KC2/\ny9d+pFu8oTnijY/TRC+QPzmLAbh/Hxp1ca7b4Jf5yNshTfV4J15rG3LZXkTJYFlA\nSMU698IoFNp0pGgdNgavoUCIOAyK0zU9e2T9BfvHYMGjboGl2o5knXIhaue2oow1\n85qaxvuIBmjrbyUPQcbtJhdfM3LXKkO2hf8XiSUPta0HnbXfxMw0/+bwAZElbeRt\naYIpHnahORNZ6/0ExdGnojpoLDgInHhdPG0uXJyfjihjvrrB9Q6p1ASqGaDCCsE=\n=ba8D\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIC67CWrK1tK4j/P4AlTS27BLIfJydX4vu2mHwmdvgrRqCP/wEBoDfk1Tkp5U\n58N2BQnlW88I8CAoVcT0FopBJvzWpTe9IsNAx85tlKPJ5OiDjcz33Iq4uQjwIEgU\nkXzWaym3MeYApwgV3sFH7BRt1QkvOpdnDbUUXuomCPEEWp8E6fAIfuku/v5Xs2gA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BCY2QaCCPd7GYrdfpYA9Y/VCPAgMuuajvGfWT23CNaKRUYpQnzDwordWzfR\nCcy0jjaVHWII8CCbCglyWU2ZoBi9PilZLeT/qjC0l3yd36EH9e4my7fUkAjwIA7j\nS/Rqtnlc8hK+35PO7KcoeY8Q6jfYHxwIw+c6cjGWCPEEWp8E6fAIENKDu/b0+ZEA\ng9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3Rh\nbXBzLm9yZ/AQ1ySOdbUnFaLp0tOodK6SvQjwINpoIt6xzIfhzWRKiA2prHhsYOn1\nYUXBY69UmC/8l8mMCPAgKc7XnJ7xGW7op0T46oYMPLpXPTmlfy0NnJl4657wPuwI\n8QRanwTo8AhDUGU1A+SNIQCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree dfcb265d1bac859d8fa0ed46db45ac6073573330\nparent 12ac2f0d7129151ec4c49be4061575dacb9199d4\nparent 1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520370884 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520370918 +0100\n\nMerge #12479: RPC: Add child transactions to getrawmempool verbose output\n\n1dfb4e7d7 [Tests] Check output of parent/child tx list from getrawmempool, getmempooldescendants, getmempoolancestors, and REST interface (Conor Scott)\nfc44cb108 [RPC] Add list of child transactions to verbose output of getrawmempool (Conor Scott)\n\nPull request description:\n\n  `bitcoin-cli getrawmempool true` only lists a transaction's parents in the `depends` field. This change adds a `spentby` field to the json response, which lists the transaction's children in the mempool.\n\n  Currently the only way to find child transactions is to use `getrawmempool` or make another call to `getmempooldescendants` and search the response for transactions that list the parent_txid in the `depends` list, which is inefficient.\n\n  This change allows direct lookup of children.\n\n  Example Output\n  ```\n    \"9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4\": {\n      ...other geterawmempool data...\n      \"wtxid\": \"9a9b5733c0d89f207908cfa3fe17809bee71f629aa095c9f8754524e29e98ba4\",\n      \"depends\": [\n        \"bdd92851d5766a42aeb62af667bb422a116cab4e032bba5e3dd6efe5b4b40aa0\"\n      ],\n      \"spentby\": [\n        \"dc5d3ec388a9121421208738a041ac30a22163bc2e17758f2275b6c51a15ba7b\"\n      ]\n    },\n  ```\n\nTree-SHA512: 83da7d421c9799a40ef65af3b7fdb586d6d87385f3f2ede3afd2c311725444b858f9d91cc110422a0fa31905779934fee07211ca6fe6b746792b83692c94b3ce\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd5e4381d46d01ca8282f02a18515e7b61de1dde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd5e4381d46d01ca8282f02a18515e7b61de1dde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd5e4381d46d01ca8282f02a18515e7b61de1dde/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12ac2f0d7129151ec4c49be4061575dacb9199d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ac2f0d7129151ec4c49be4061575dacb9199d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12ac2f0d7129151ec4c49be4061575dacb9199d4"
      },
      {
        "sha": "1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1dfb4e7d753e9282c89d55bde358b8ad96d3bfc2"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 58,
      "deletions": 4
    },
    "files": [
      {
        "sha": "f2a1fd048fa26818d051affb2f1a19e178897a2b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd5e4381d46d01ca8282f02a18515e7b61de1dde/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd5e4381d46d01ca8282f02a18515e7b61de1dde/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=cd5e4381d46d01ca8282f02a18515e7b61de1dde",
        "patch": "@@ -372,6 +372,9 @@ std::string EntryDescriptionString()\n            \"    \\\"wtxid\\\" : hash,         (string) hash of serialized transaction, including witness data\\n\"\n            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+           \"       ... ]\\n\"\n+           \"    \\\"spentby\\\" : [           (array) unconfirmed transactions spending outputs from this transaction\\n\"\n+           \"        \\\"transactionid\\\",    (string) child transaction id\\n\"\n            \"       ... ]\\n\";\n }\n \n@@ -406,6 +409,15 @@ void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n     }\n \n     info.pushKV(\"depends\", depends);\n+\n+    UniValue spent(UniValue::VARR);\n+    const CTxMemPool::txiter &it = mempool.mapTx.find(tx.GetHash());\n+    const CTxMemPool::setEntries &setChildren = mempool.GetMemPoolChildren(it);\n+    for (const CTxMemPool::txiter &childiter : setChildren) {\n+        spent.push_back(childiter->GetTx().GetHash().ToString());\n+    }\n+\n+    info.pushKV(\"spentby\", spent);\n }\n \n UniValue mempoolToJSON(bool fVerbose)"
      },
      {
        "sha": "8440f13a0de30d69a1c733688eca730a9cb814e5",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd5e4381d46d01ca8282f02a18515e7b61de1dde/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd5e4381d46d01ca8282f02a18515e7b61de1dde/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=cd5e4381d46d01ca8282f02a18515e7b61de1dde",
        "patch": "@@ -296,8 +296,10 @@ def run_test(self):\n         # check that there are our submitted transactions in the TX memory pool\n         json_string = http_get_call(url.hostname, url.port, '/rest/mempool/contents'+self.FORMAT_SEPARATOR+'json')\n         json_obj = json.loads(json_string)\n-        for tx in txs:\n+        for i, tx in enumerate(txs):\n             assert_equal(tx in json_obj, True)\n+            assert_equal(json_obj[tx]['spentby'], txs[i+1:i+2])\n+            assert_equal(json_obj[tx]['depends'], txs[i-1:i])\n \n         # now mine the transactions\n         newblockhash = self.nodes[1].generate(1)"
      },
      {
        "sha": "8880db80021012ebad9440c46720d02857ef1b8a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 43,
        "deletions": 3,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd5e4381d46d01ca8282f02a18515e7b61de1dde/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd5e4381d46d01ca8282f02a18515e7b61de1dde/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=cd5e4381d46d01ca8282f02a18515e7b61de1dde",
        "patch": "@@ -47,14 +47,18 @@ def run_test(self):\n             value = sent_value\n             chain.append(txid)\n \n-        # Check mempool has MAX_ANCESTORS transactions in it, and descendant\n+        # Check mempool has MAX_ANCESTORS transactions in it, and descendant and ancestor\n         # count and fees should look correct\n         mempool = self.nodes[0].getrawmempool(True)\n         assert_equal(len(mempool), MAX_ANCESTORS)\n         descendant_count = 1\n         descendant_fees = 0\n         descendant_size = 0\n \n+        ancestor_size = sum([mempool[tx]['size'] for tx in mempool])\n+        ancestor_count = MAX_ANCESTORS\n+        ancestor_fees = sum([mempool[tx]['fee'] for tx in mempool])\n+\n         descendants = []\n         ancestors = list(chain)\n         for x in reversed(chain):\n@@ -71,14 +75,43 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantsize'], descendant_size)\n             descendant_count += 1\n \n+            # Check that ancestor calculations are correct\n+            assert_equal(mempool[x]['ancestorcount'], ancestor_count)\n+            assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN)\n+            assert_equal(mempool[x]['ancestorsize'], ancestor_size)\n+            ancestor_size -= mempool[x]['size']\n+            ancestor_fees -= mempool[x]['fee']\n+            ancestor_count -= 1\n+\n+            # Check that parent/child list is correct\n+            assert_equal(mempool[x]['spentby'], descendants[-1:])\n+            assert_equal(mempool[x]['depends'], ancestors[-2:-1])\n+\n             # Check that getmempooldescendants is correct\n             assert_equal(sorted(descendants), sorted(self.nodes[0].getmempooldescendants(x)))\n+\n+            # Check getmempooldescendants verbose output is correct\n+            for descendant, dinfo in self.nodes[0].getmempooldescendants(x, True).items():\n+                assert_equal(dinfo['depends'], [chain[chain.index(descendant)-1]])\n+                if dinfo['descendantcount'] > 1:\n+                    assert_equal(dinfo['spentby'], [chain[chain.index(descendant)+1]])\n+                else:\n+                    assert_equal(dinfo['spentby'], [])\n             descendants.append(x)\n \n             # Check that getmempoolancestors is correct\n             ancestors.remove(x)\n             assert_equal(sorted(ancestors), sorted(self.nodes[0].getmempoolancestors(x)))\n \n+            # Check that getmempoolancestors verbose output is correct\n+            for ancestor, ainfo in self.nodes[0].getmempoolancestors(x, True).items():\n+                assert_equal(ainfo['spentby'], [chain[chain.index(ancestor)+1]])\n+                if ainfo['ancestorcount'] > 1:\n+                    assert_equal(ainfo['depends'], [chain[chain.index(ancestor)-1]])\n+                else:\n+                    assert_equal(ainfo['depends'], [])\n+\n+\n         # Check that getmempoolancestors/getmempooldescendants correctly handle verbose=true\n         v_ancestors = self.nodes[0].getmempoolancestors(chain[-1], True)\n         assert_equal(len(v_ancestors), len(chain)-1)\n@@ -100,7 +133,7 @@ def run_test(self):\n         for x in chain:\n             ancestor_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n-        \n+\n         # Undo the prioritisetransaction for later tests\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n@@ -149,6 +182,7 @@ def run_test(self):\n         vout = utxo[1]['vout']\n \n         transaction_package = []\n+        tx_children = []\n         # First create one parent tx with 10 children\n         (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n         parent_transaction = txid\n@@ -159,11 +193,17 @@ def run_test(self):\n         for i in range(MAX_DESCENDANTS - 1):\n             utxo = transaction_package.pop(0)\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+            if utxo['txid'] is parent_transaction:\n+                tx_children.append(txid)\n             for j in range(10):\n                 transaction_package.append({'txid': txid, 'vout': j, 'amount': sent_value})\n \n         mempool = self.nodes[0].getrawmempool(True)\n         assert_equal(mempool[parent_transaction]['descendantcount'], MAX_DESCENDANTS)\n+        assert_equal(sorted(mempool[parent_transaction]['spentby']), sorted(tx_children))\n+\n+        for child in tx_children:\n+            assert_equal(mempool[child]['depends'], [parent_transaction])\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n@@ -232,7 +272,7 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransactionwithwallet(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n-        \n+\n         # Now try to disconnect the tip on each node...\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())"
      }
    ]
  },
  {
    "sha": "e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWQ2ZTJhZjZkODk5MzVmNmVkZjAyN2U1ZDRlYTFkMmVjNmM3ZjQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:15:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:16:06Z"
      },
      "message": "Merge #12622: net: Correct addrman logging\n\nb4db76c55 net: Correct addrman logging (Wladimir J. van der Laan)\n\nPull request description:\n\n  These were introduced in #9037.\n\n  Found by @theuni (https://github.com/bitcoin/bitcoin/pull/9037#pullrequestreview-101704656).\n\nTree-SHA512: 9b5153da8a8e5d4ddf9513a5c453f9609cffd4df2924fd48c7b36c1b1055748c7077d4fc0e70be62ca36af87df7f621a744bb374a234baba271ce4982a240825",
      "tree": {
        "sha": "e2435a1d44f0e98f8f03500a6395874d83285aae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2435a1d44f0e98f8f03500a6395874d83285aae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanwUWAAoJEB5K7WKYbNJdxu8H/jrq3WM3UUs1Ld8AoDk9NiOA\nFMceUBx15JQiuW35idzbmbn55+eGECUQ9Gux6wU66PUZ2jkucY4TKITPSGc++c8w\nlxJb2wOIKBYx+v7SIk/1HEuIZXOThkHgOS8inYzDu7lSSuUFXUZm///WbVkIzFCh\nCfQm7zupSSnz3gk7vautZK9koiEMd6USjNjf1Hp8KFyVl3zxHC30gzK4OlTmVbK0\nDlmmrsAcDwpGD2r+bl/7gRMctOBWwwvAjXW4vLVuV30RI22YI9wy9843wPjZblUF\n/dFcybXpeDVRWIZ2eu+J59WqtUIH6Ey1FMFEZBlTnfRNNEY7lVK+tQ9gVxQ1jyY=\n=rmYS\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGl0Zn4pOyVN4lVJNFjMkNpdlN8bzbDMA5buHzWqlMopCP/wEAYlOJbo/kEI\nLXqkNU44zwoI8SDC2T41tm63h3SYL9n7tPV7z7XsqbOmlU6LoQtVatQcCgjxBFqf\nBRnwCL/6NZ53jcZyAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQCcSU7SRbMM34tmlr5C1phQjxIA5GW0BNVIhS\nRlSHRJYnAecfq62VFTkK1bVcBR8+O+FACPEg2r2CnCVn0lLuTT6SZOwTxm2L0cyK\nL+3WEGCBLGbyxPII8QRanwUZ8Ai+EGjISD04hACD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQFCD/b7xN4vthU6NlR2mB\nPAjxIJCEPTMVPN5grccJcjf29uuiqnJw//AQvbzxsNY6UsJxCPEEWp8FGPAIuaPR\n7Q6cbEAAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50\naW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e2435a1d44f0e98f8f03500a6395874d83285aae\nparent cd5e4381d46d01ca8282f02a18515e7b61de1dde\nparent b4db76c550c04957bc2721628f77bc24dce52f7f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520370943 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520370966 +0100\n\nMerge #12622: net: Correct addrman logging\n\nb4db76c55 net: Correct addrman logging (Wladimir J. van der Laan)\n\nPull request description:\n\n  These were introduced in #9037.\n\n  Found by @theuni (https://github.com/bitcoin/bitcoin/pull/9037#pullrequestreview-101704656).\n\nTree-SHA512: 9b5153da8a8e5d4ddf9513a5c453f9609cffd4df2924fd48c7b36c1b1055748c7077d4fc0e70be62ca36af87df7f621a744bb374a234baba271ce4982a240825\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd5e4381d46d01ca8282f02a18515e7b61de1dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd5e4381d46d01ca8282f02a18515e7b61de1dde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd5e4381d46d01ca8282f02a18515e7b61de1dde"
      },
      {
        "sha": "b4db76c550c04957bc2721628f77bc24dce52f7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4db76c550c04957bc2721628f77bc24dce52f7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4db76c550c04957bc2721628f77bc24dce52f7f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e811dd4bea51e40211e430ff3ecd162803c40082",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
        "patch": "@@ -239,7 +239,7 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n \n     // Will moving this address into tried evict another entry?\n     if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n         if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n             m_tried_collisions.insert(nId);\n         }\n@@ -565,7 +565,7 @@ void CAddrMan::ResolveCollisions_()\n \n                     // Give address at least 60 seconds to successfully connect\n                     if (GetAdjustedTime() - info_old.nLastTry > 60) {\n-                        LogPrint(BCLog::ADDRMAN, \"addrman\", \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+                        LogPrint(BCLog::ADDRMAN, \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n \n                         // Replaces an existing address already in the tried table with the new address\n                         Good_(info_new, false, GetAdjustedTime());"
      }
    ]
  },
  {
    "sha": "9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmIzODk4YzNmYjAwZDRkZTAwNWYyZjU2YWYxZDhhYzBlNDYxNmFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:19:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T21:35:55Z"
      },
      "message": "Merge #12432: [qt] send: Clear All also resets coin control options\n\nf506c0a7f [qt] send: Clear All also resets coin control options (Sjors Provoost)\n\nPull request description:\n\n  This change makes it so that a custom change address and manual input selection are removed if the user clicks Clear All in the send screen.\n\nTree-SHA512: 78746043a74c9c26ef476eb0df7ce95411683749d9f6b2747222eaac751e241ea7d4d7ce9e4e69ed0b19fa76754d8584e5bef5bba1ad6598f8e39c784b4264d2",
      "tree": {
        "sha": "7d2b1bb378b3b979067983be171072b2d32cdcb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d2b1bb378b3b979067983be171072b2d32cdcb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanwm7AAoJEB5K7WKYbNJdwM0H/3AKAj1ssAhpOU7BR0foNz9J\n+LZBgJprBPsk/0QKk6dTLw7pHib7XmpHlJoG1y2MDXmGHiZWtCzNWLaiPDekr4NQ\n3xYvk9NcMX0gvVx8niYqt/Dq+fQ6O/0ISfUyWsNh4HXcZzhcMb+na4AE+DWyeMZW\nhBy4ATE9F7Tr9aWpmHr9p9Xpco55E8u+MQovs2iLsKY6gnqLfj2kWNggt9bEugLM\nMrEN32QSKoUrws7csI7dSOnche2dmlKjkotPgtMaieo3XzQIdDE+wSX2jY3MPm1H\nEggm28rC/o+C1ggiEP7VuJyjiHAsBBnacNXi1vRaILKVl5/kBRDylWAtPb6iFDc=\n=P6oM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICUJuCHFhQ39PjkMtWcCeXrKBfpXBmniBMMl8LyYuPkSCP/wEBrwRoybSHco\nW6DVB99kt+MI8QRanwnB8AhiQnsopLX1fwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQwqxgoEdsPpcIj6jb\nwjNidgjxIIxY3TZ2t8SIorziDNbu1rZjWkyO+5vKtuAjuCx/oIcMCPEEWp8JwfAI\ntExe/LW+nlkAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb23wEOYlJJhtkCjgQ/TpjIAQVTMI8QRanwnC8AjERO+ldNJHMQCD\n3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBz\nLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 7d2b1bb378b3b979067983be171072b2d32cdcb4\nparent e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41\nparent f506c0a7f8ea6bae089177884e44e38cd2bfeb23\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520371170 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520372155 +0100\n\nMerge #12432: [qt] send: Clear All also resets coin control options\n\nf506c0a7f [qt] send: Clear All also resets coin control options (Sjors Provoost)\n\nPull request description:\n\n  This change makes it so that a custom change address and manual input selection are removed if the user clicks Clear All in the send screen.\n\nTree-SHA512: 78746043a74c9c26ef476eb0df7ce95411683749d9f6b2747222eaac751e241ea7d4d7ce9e4e69ed0b19fa76754d8584e5bef5bba1ad6598f8e39c784b4264d2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d6e2af6d89935f6edf027e5d4ea1d2ec6c7f41"
      },
      {
        "sha": "f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f506c0a7f8ea6bae089177884e44e38cd2bfeb23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f506c0a7f8ea6bae089177884e44e38cd2bfeb23"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50d51c527d88a693d8af27ccd02ea42d37893cb8",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
        "patch": "@@ -376,6 +376,12 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n void SendCoinsDialog::clear()\n {\n+    // Clear coin control settings\n+    CoinControlDialog::coinControl()->UnSelectAll();\n+    ui->checkBoxCoinControlChange->setChecked(false);\n+    ui->lineEditCoinControlChange->clear();\n+    coinControlUpdateLabels();\n+\n     // Remove entries until only one left\n     while(ui->entries->count())\n     {"
      }
    ]
  },
  {
    "sha": "b156ff7c30175f5d23bde97a56a2c34af2196466",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTU2ZmY3YzMwMTc1ZjVkMjNiZGU5N2E1NmEyYzM0YWYyMTk2NDY2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-06T21:48:15Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-03-06T21:48:15Z"
      },
      "message": "[tests] bind functional test nodes to 127.0.0.1\n\nPrevents OSX firewall allow-this-application-to-accept-inbound-connections\npermission popups and is generally safer.\n\nTo prevent binding to 127.0.0.1, set self.bind_to_localhost_only = False.",
      "tree": {
        "sha": "2dbaaf83b0c4b0692269ad762917d8feb48a02b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2dbaaf83b0c4b0692269ad762917d8feb48a02b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b156ff7c30175f5d23bde97a56a2c34af2196466",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlqfDKIACgkQV/+b28ww\nEAnhig//SO8lL66gQKPfw2EqImqaNMAD3aWYbmTcrMZ9aYHlOVG/1aCzC4GZqzOQ\nvggD0ewc9Bo5kwJGbdDkKY7jx2KBNJlx2S/XgF1Rn2ivKNSaolgmVExhWkGy6oeE\nN/p28KOwpspxI7CzZhwZFF1v4EBX9fpx56XOUIT84GCfdEqho/HrmDFgpno/9D8q\nwsP6t3Br2vu8r5+Wn+uahJtt/8Ujkv+gfIhktsuQNe0g/0jG+u57IIg4nAiHo/+t\ngCCvnOwf62fmtiILZ1Xs0NscBTU0sCG44I+5II6YO460TRWnqk0HNhoAUmv2hpbT\nn4Qx6eG6RF1ruPh1hfrufr5ojRN/sCt5xp4v83qu9ucKvoO229a/NG8oAijOGfBh\nLyC9vFJahIQk6CGji8f4F1++L9UMOaMZjyBeyeZYVgoSXF4Px2c6+BfRgeymrwpD\nsBtQquM094BuaYahDnf2EP9g4vLVxGprvEqAopUlur+qc2MlK0Bt2TUHjlDhk3za\n8PofbnvhfQrx3nfb25c8AyaMXp1+qhuxGEnF78c9U8NN57csp+5bc56hLL9Kw+6R\n2gTZ4Rgst0RUsNr+ts8gxKbb4ph+1lpYK7RWUxQtPP46dtnWEwu5Oq0w+GNXwdBL\nNO+n8D44qV2PzeUU3LxRVlSR9yUAWHSNJu0/IuSBTqEsP+dY2Fw=\n=kiKY\n-----END PGP SIGNATURE-----",
        "payload": "tree 2dbaaf83b0c4b0692269ad762917d8feb48a02b2\nparent d3f4dd313e5fe58903caf2f4d04827e7f7944e17\nauthor Sjors Provoost <sjors@sprovoost.nl> 1520372895 -0500\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1520372895 -0500\n\n[tests] bind functional test nodes to 127.0.0.1\n\nPrevents OSX firewall allow-this-application-to-accept-inbound-connections\npermission popups and is generally safer.\n\nTo prevent binding to 127.0.0.1, set self.bind_to_localhost_only = False.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b156ff7c30175f5d23bde97a56a2c34af2196466",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b156ff7c30175f5d23bde97a56a2c34af2196466",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b156ff7c30175f5d23bde97a56a2c34af2196466/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f4dd313e5fe58903caf2f4d04827e7f7944e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f4dd313e5fe58903caf2f4d04827e7f7944e17"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 21,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d43c2cd5d088856db5f7d27a2102c11c10d4c6b8",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -14,6 +14,7 @@\n class RPCBindTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n+        self.bind_to_localhost_only = False\n         self.num_nodes = 1\n \n     def setup_network(self):"
      },
      {
        "sha": "86c1150abd323aa2cdb9808f9fa74857773fc6e9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -63,6 +63,7 @@ def __init__(self):\n         self.nodes = []\n         self.mocktime = 0\n         self.supports_cli = False\n+        self.bind_to_localhost_only = True\n         self.set_test_params()\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n@@ -215,15 +216,19 @@ def run_test(self):\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n-\n+        if self.bind_to_localhost_only:\n+            extra_confs = [[\"bind=127.0.0.1\"]] * num_nodes\n+        else:\n+            extra_confs = [[]] * num_nodes\n         if extra_args is None:\n             extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n+        assert_equal(len(extra_confs), num_nodes)\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -395,7 +400,7 @@ def _initialize_chain(self):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "86e44e4c970e8babef9f140a0527a9e9b1ca01c9",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -16,6 +16,7 @@\n \n from .authproxy import JSONRPCException\n from .util import (\n+    append_config,\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n@@ -42,7 +43,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir, use_cli=False):\n+    def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n@@ -57,6 +58,8 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n+        if extra_conf != None:\n+            append_config(dirname, i, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n         # For those callers that need more flexibity, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)"
      },
      {
        "sha": "a4b8d5af023a9a524c6d33dc15f38c71f4789f51",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -300,6 +300,12 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n+def append_config(dirname, n, options):\n+    datadir = get_datadir_path(dirname, n)\n+    with open(os.path.join(datadir, \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+        for option in options:\n+            f.write(option + \"\\n\")\n+\n def get_auth_cookie(datadir):\n     user = None\n     password = None"
      },
      {
        "sha": "68a203150b37ba5df3e379e2fad44d58dbe26f53",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -84,7 +84,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "bfd46384815cbabcf2505afc0dc97e70082948c7",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b156ff7c30175f5d23bde97a56a2c34af2196466/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=b156ff7c30175f5d23bde97a56a2c34af2196466",
        "patch": "@@ -124,7 +124,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args=extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      }
    ]
  },
  {
    "sha": "14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDQ3NWUyZGNkYzhjYzNhMGRlZDJiMTE4NWZjNmE5ZWI1OTEwMmYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:09:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:09:40Z"
      },
      "message": "Merge #12097: [scripts] lint-whitespace: use perl instead of grep -P\n\n40b17f5f9 [scripts] lint-whitespace: use perl instead of grep -P (Sjors Provoost)\n\nPull request description:\n\n  MacOS does not support `grep -P` out of the box. This change makes\n  it easier for developers to check for whitespace problems locally.\n\n  Based on [this](https://stackoverflow.com/a/16658690) and [this](https://serverfault.com/a/504387) Stack Exchange answer.\n\n  Tested with:\n  ```sh\n  export TRAVIS_COMMIT_RANGE='fe78c9a...62e0453'\n  contrib/devtools/lint-whitespace.sh\n  This diff appears to have added new lines with tab characters instead of spaces.\n  The following changes were suspected:\n\n  diff --git a/src/test/bignum_tests.cpp b/src/test/bignum_tests.cpp\n  @@ -0,0 +1,110 @@\n  +\tnum.setint64(n);\n  ```\n\nTree-SHA512: 37c342a0ca2580289cf326a278a051a7c21ba918d6b2143fd9987f159fab85f1de3d770fcf532a642cd5d1957afc8595678128196e102dc473924758f133db7f",
      "tree": {
        "sha": "bebc52d934320a0754cbc5b0db6d6e23bf7f4a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bebc52d934320a0754cbc5b0db6d6e23bf7f4a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanxGkAAoJEB5K7WKYbNJdpeoIAKDS4rZivrdNDia9yaUeBp26\nDRJVktPSVoBQEl/5E2gF/lx8VNzJwDqQ8lr764QWZ4Pfiud7mSr85BmEHE1r5ttQ\nwgnrlGHNTJbu58Sjy4s7CaJPb7+zAxqSnRkacRFrmcv9Qj1XcfC+ICZ9Dh+USen+\nd8zTXKJh6bWzwHbpp0dPeQyhq/05NY0mw1MRGSZb3eXCfqPPWfPaH+6QUArCv6tP\n3xpitFlZaR/3zzy6NM3zZ8+OotytybyqRjJbWTGlV0G0J8ND4zwc1iJj4W33tbS6\n52dvya55uHXzHyFmlpjsKEjsr26MQFRbrHtFd3DDy4GhuiW7PxUz/YW79PLnP+M=\n=AQgd\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIF51gkmHe7UmD7f+CbLnfjMolVNca8ipM1GXcVzyWC/pCP/wEFlTuVCtZy8F\nAlnBe2/z/RoI8SBKIX62m22vmlmE6tbZ0uQj3FvHEUILkLr+TvKDqcDXVQjxIAPF\nz0TJn+0voGUSIA2eg+A+KA+5AKTuHzyp0vBWLj5pCPEEWp8RtvAIeb12fh2891oA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BDVetuARbbtv2ErlhCaxG2wCPEg0sJjEX/gGvE2B7i76Ss0Obr2xwUS\nBYKVqlBAW8Ru4qsI8QRanxG28AhjkzgRxHFnuACD3+MNLvkMjikoaHR0cHM6Ly9m\naW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbfAQ+PPtM0955yVc+WF976l4\nJwjxINlTGy33dR21LwoAO2cH/wORntKl93Qd9ZxxJ5J+PUZRCPAgkxzIFl9XtrGF\n2cJNSX0aq5Tk6HddOm/dVAZI7OUD8bwI8SCMvJBePVh/S/S2GtMbcUhShIUi/oh1\nOCvh+TlzZWsNygjxBFqfEbbwCAioKbJ+PSnUAIPf4w0u+QyOLi1odHRwczovL2Fs\naWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree bebc52d934320a0754cbc5b0db6d6e23bf7f4a13\nparent 9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa\nparent 40b17f5f9106e572420dada04c15ec452a8f4f41\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520374167 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520374180 +0100\n\nMerge #12097: [scripts] lint-whitespace: use perl instead of grep -P\n\n40b17f5f9 [scripts] lint-whitespace: use perl instead of grep -P (Sjors Provoost)\n\nPull request description:\n\n  MacOS does not support `grep -P` out of the box. This change makes\n  it easier for developers to check for whitespace problems locally.\n\n  Based on [this](https://stackoverflow.com/a/16658690) and [this](https://serverfault.com/a/504387) Stack Exchange answer.\n\n  Tested with:\n  ```sh\n  export TRAVIS_COMMIT_RANGE='fe78c9a...62e0453'\n  contrib/devtools/lint-whitespace.sh\n  This diff appears to have added new lines with tab characters instead of spaces.\n  The following changes were suspected:\n\n  diff --git a/src/test/bignum_tests.cpp b/src/test/bignum_tests.cpp\n  @@ -0,0 +1,110 @@\n  +\tnum.setint64(n);\n  ```\n\nTree-SHA512: 37c342a0ca2580289cf326a278a051a7c21ba918d6b2143fd9987f159fab85f1de3d770fcf532a642cd5d1957afc8595678128196e102dc473924758f133db7f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fb3898c3fb00d4de005f2f56af1d8ac0e4616aa"
      },
      {
        "sha": "40b17f5f9106e572420dada04c15ec452a8f4f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40b17f5f9106e572420dada04c15ec452a8f4f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40b17f5f9106e572420dada04c15ec452a8f4f41"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "670a56285d7138629e3e5fed476400ce50cc2b19",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
        "patch": "@@ -59,7 +59,7 @@ if showdiff | grep -E -q '^\\+.*\\s+$'; then\n fi\n \n # Check if tab characters were found in the diff.\n-if showcodediff | grep -P -q '^\\+.*\\t'; then\n+if showcodediff | perl -nle '$MATCH++ if m{^\\+.*\\t}; END{exit 1 unless $MATCH>0}' > /dev/null; then\n   echo \"This diff appears to have added new lines with tab characters instead of spaces.\"\n   echo \"The following changes were suspected:\"\n   FILENAME=\"\"\n@@ -81,7 +81,7 @@ if showcodediff | grep -P -q '^\\+.*\\t'; then\n       fi\n       echo \"$line\"\n     fi\n-  done < <(showcodediff | grep -P '^(diff --git |@@|\\+.*\\t)')\n+  done < <(showcodediff | perl -nle 'print if m{^(diff --git |@@|\\+.*\\t)}')\n   RET=1\n fi\n "
      }
    ]
  },
  {
    "sha": "08e0855b967fa3e28577503815f553f13915f722",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGUwODU1Yjk2N2ZhM2UyODU3NzUwMzgxNWY1NTNmMTM5MTVmNzIy",
    "commit": {
      "author": {
        "name": "kallewoof",
        "email": "kalle.alm@gmail.com",
        "date": "2018-03-06T20:24:47Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-06T22:14:29Z"
      },
      "message": "Give hint about gitian not able to download\n\nGitian fails to perform downloads right now on my set up. This can be circumvented by first checking out the tag being built and then doing the depends download step before running `gbuild`.",
      "tree": {
        "sha": "77816bb6a834a1293bee3a70df9ef14bbc8f66eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77816bb6a834a1293bee3a70df9ef14bbc8f66eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08e0855b967fa3e28577503815f553f13915f722",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqfEsUACgkQV692LbM1\nMyIm0A//XBF/UdmRjsqP9uDAmOhS7vL8g2ylkOUat5iR2Ml3OvxkOkXVsxQfqMET\njFQeuLWh9XouGrTtdwsGJMWvKLihK9GMD5ev6LN0lYg2yNfXqdQeVvCwaW4LCIUY\nhw0hiC5RJPgIwCmYj4lMdmcQNks2Vian0xAGs5lo4FHsHzvL3UezCUpY8GdMuziK\nky0eoPlyXjYfVtTDy4FpOsACvItf8BRl3I9tWnhDdyl8i0h7wSIWruFkfXPkTdUy\n5J3f/9mfO+euiH8FkCxODj3DEVrlVXza/IBBvx1QRxrK4g9AbKZpBv/y7zRgyIo0\nK+U+rl/6LFi4yqNkfIyfQSgkxS5ZE3wDMQzR9SyvBoWOmDhiznPSrPxvBzb9d4Q8\ni3nu9HVluQ/Kl2b0SfL1MoVAacQAuFLqdmAwf6SjlcveqS8zrWPfBGKeZjOHez6m\n3PY5JNRxzBAB9xpxFpa9Dnmjxc8FwFEL2vk9xGrwpW6f54ehJ2CXVCZzi0qCLNiD\noIx7AdvGv67AXVmzIEOxq40ge2UIucw5Yu6FUkOpiorbG6jScqqqP8OsKp5miaG/\n6cTKWMqjZQJAoLvKj9JCTUdc9/icpS7n23yMQCFXgvYYk/NunB/Pg29ZpLTbly8k\nCCQ4a06ynEOoTpOn+3oWVb0FCv2Nq7pDOU1ukhMwYRe1mbQE45Q=\n=uBsf\n-----END PGP SIGNATURE-----",
        "payload": "tree 77816bb6a834a1293bee3a70df9ef14bbc8f66eb\nparent 20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf\nauthor kallewoof <kalle.alm@gmail.com> 1520367887 -0500\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1520374469 -0500\n\nGive hint about gitian not able to download\n\nGitian fails to perform downloads right now on my set up. This can be circumvented by first checking out the tag being built and then doing the depends download step before running `gbuild`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e0855b967fa3e28577503815f553f13915f722",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08e0855b967fa3e28577503815f553f13915f722",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e0855b967fa3e28577503815f553f13915f722/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a988c74ba545e516f2c9cfba1a8321a90111ce05",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08e0855b967fa3e28577503815f553f13915f722/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08e0855b967fa3e28577503815f553f13915f722/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=08e0855b967fa3e28577503815f553f13915f722",
        "patch": "@@ -93,7 +93,9 @@ Create the OS X SDK tarball, see the [OS X readme](README_osx.md) for details, a\n \n ### Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, Gitian will fetch source files as needed. To cache them ahead of time:\n+NOTE: Gitian is sometimes unable to download files. If you have errors, try the step below.\n+\n+By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in bitcoin, then:\n \n     pushd ./gitian-builder\n     make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common"
      }
    ]
  },
  {
    "sha": "17c44b208f1ced3dad372650d769d42d9e23fb35",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2M0NGIyMDhmMWNlZDNkYWQzNzI2NTBkNzY5ZDQyZDllMjNmYjM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:14:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:17:26Z"
      },
      "message": "Merge #12098: [scripts] lint-whitespace: add param to check last N commits\n\n8dbf740f8 [scripts] lint-whitespace: check last N commits or unstaged changes (Sjors Provoost)\n\nPull request description:\n\n  E.g. before you push three commits to Github and upset Travis, check if you didn't make any whitespace mistakes:\n  ```sh\n  contrib/devtools/lint-whitespace.sh 3\n  ```\n\n  This is slightly more convenient than doing:\n  ```sh\n  TRAVIS_COMMIT_RANGE=HEAD~3...HEAD contrib/devtools/lint-whitespace.sh\n  ```\n\nTree-SHA512: 5d9c1ae978ccbe59477e8cf53391e9bd697d2da87f417a2519264af560d4768138e0b2d320dd497a1f1e704e18ab279d724f523b57c17a80ccd753133a5445bf",
      "tree": {
        "sha": "34bf94ac21b7892381eae8f08be93fe678e59535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34bf94ac21b7892381eae8f08be93fe678e59535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17c44b208f1ced3dad372650d769d42d9e23fb35",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanxN2AAoJEB5K7WKYbNJdkAAH/14D00a4KKNzRhoelaeovoMP\nSti40yEJk806zmCwYOhkVvv1sN/DAj8ADpuvnkGatlYWYwMz3wIscphROx66bF7Z\n0xc9nWxYJT9O1ktoxMs/ay2ujZusdy4T3ZC6EHYVqBNqtLKuUCMqGwr7O2KLR0Ce\n2im4zcvB/e21GtEInJHtgEM0CeSrdioo/uiCcglOAJUeHxfcU0w2ooz5va6KI1Rw\ndngTik+fw6diSLUkaYYaMEFGL6IEziPhjfvAXsu5ezrxxW4U8SdPnwPEFc/BkWEG\n0HyDylX6UWRM/BIbsgvuAhVxyiFk2vpXODpX3dWfsri4QiGOUpQKAvkFyZKAWaU=\n=BOZs\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFUXF7JCYUlbA1aX15uuEi4yqTeotMEeg3GjvMQrDBrHCP/wECGCSbq9l9Av\nVn36rcvwLSAI8QRanxN38AhaSlhQI8u9GQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQbTw85d6LGvlxjilq\nuDtm2QjwICy4S9/+ugv8HFEylNhSY83NhuqgqyskxkmvWosLJP76CPAgJEEQWO+u\n7bX15iKhZnvuloK8As9U2VL4jSTxVumjgHYI8CCYGwSk82DDXbucVnQqsY9QvIwr\ngHlR4J/YeFbMTfosnAjxBFqfE3jwCPOcgORZBSYDAIPf4w0u+QyOLCtodHRwczov\nL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BBxQLEqpFNvLmsQ\n5xCjE0WnCPAgm8orKcXeON6zIxaLwkr48RndBGaIKk/4D/zTZJ5foTcI8CAOjaW8\n2/EwPTFMPvDSvvoOHzMDlnare7gerXwKqyypPwjxBFqfE3jwCHDgJoZdBrDHAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 34bf94ac21b7892381eae8f08be93fe678e59535\nparent 14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3\nparent 8dbf740f8055b095f172772d457acca56115d9d1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520374446 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520374646 +0100\n\nMerge #12098: [scripts] lint-whitespace: add param to check last N commits\n\n8dbf740f8 [scripts] lint-whitespace: check last N commits or unstaged changes (Sjors Provoost)\n\nPull request description:\n\n  E.g. before you push three commits to Github and upset Travis, check if you didn't make any whitespace mistakes:\n  ```sh\n  contrib/devtools/lint-whitespace.sh 3\n  ```\n\n  This is slightly more convenient than doing:\n  ```sh\n  TRAVIS_COMMIT_RANGE=HEAD~3...HEAD contrib/devtools/lint-whitespace.sh\n  ```\n\nTree-SHA512: 5d9c1ae978ccbe59477e8cf53391e9bd697d2da87f417a2519264af560d4768138e0b2d320dd497a1f1e704e18ab279d724f523b57c17a80ccd753133a5445bf\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17c44b208f1ced3dad372650d769d42d9e23fb35",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17c44b208f1ced3dad372650d769d42d9e23fb35",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17c44b208f1ced3dad372650d769d42d9e23fb35/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14475e2dcdc8cc3a0ded2b1185fc6a9eb59102f3"
      },
      {
        "sha": "8dbf740f8055b095f172772d457acca56115d9d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dbf740f8055b095f172772d457acca56115d9d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dbf740f8055b095f172772d457acca56115d9d1"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c5b9408ff2c5069cc37742907bea77fef192cab4",
        "filename": "contrib/devtools/lint-whitespace.sh",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17c44b208f1ced3dad372650d769d42d9e23fb35/contrib/devtools/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17c44b208f1ced3dad372650d769d42d9e23fb35/contrib/devtools/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/lint-whitespace.sh?ref=17c44b208f1ced3dad372650d769d42d9e23fb35",
        "patch": "@@ -7,12 +7,26 @@\n # Check for new lines in diff that introduce trailing whitespace.\n \n # We can't run this check unless we know the commit range for the PR.\n+\n+while getopts \"?\" opt; do\n+  case $opt in\n+    ?)\n+      echo \"Usage: .lint-whitespace.sh [N]\"\n+      echo \"       TRAVIS_COMMIT_RANGE='<commit range>' .lint-whitespace.sh\"\n+      echo \"       .lint-whitespace.sh -?\"\n+      echo \"Checks unstaged changes, the previous N commits, or a commit range.\"\n+      echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' .lint-whitespace.sh\"\n+      exit 0\n+    ;;\n+  esac\n+done\n+\n if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n-  echo \"Cannot run lint-whitespace.sh without commit range. To run locally, use:\"\n-  echo \"TRAVIS_COMMIT_RANGE='<commit range>' .lint-whitespace.sh\"\n-  echo \"For example:\"\n-  echo \"TRAVIS_COMMIT_RANGE='47ba2c3...ee50c9e' .lint-whitespace.sh\"\n-  exit 1\n+  if [ \"$1\" ]; then\n+    TRAVIS_COMMIT_RANGE=\"HEAD~$1...HEAD\"\n+  else\n+    TRAVIS_COMMIT_RANGE=\"HEAD\"\n+  fi\n fi\n \n showdiff() {"
      }
    ]
  },
  {
    "sha": "29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTA4OGIxNGVlNGIzYjNlZjc3MmFmOWJhMzI5NGZhZGQzM2E0ZDIx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:57:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T22:57:43Z"
      },
      "message": "Merge #12600: Add a test for large tx output scripts with segwit input.\n\n5f8cc0df1 Add a test for large tx output scripts with segwit input. (Richard Kiss)\n\nPull request description:\n\n  This test failed in pycoin but passed in bitcoin, so I thought I'd share it.\n\nTree-SHA512: 95dff4e03afea4d93ff5e99aa06004446c3df022c2e8a191cac8981107135a5ac2bd3ba1c3a9c4eda9f8f63f584cc1700b7ef57ee6ec2c66a72c699b51bdb61a",
      "tree": {
        "sha": "432d33ca6d40833781f33ef282a132968969a8bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432d33ca6d40833781f33ef282a132968969a8bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanxznAAoJEB5K7WKYbNJdXnAIANLivdAqd8lB/tN10qji7JZi\nLVvGwVypzwXPxg89Us2i6eRj1kogj5gIGUirinVHPEM5FBf55qWh5wmSEsh/CZ0u\nS8hJQTstjhTTFIINhhbGpTeLrIWE+iUGsva97EGeQ9VllYpuVXl+uBQyYDuyBe2d\nThif5RLOxkvtyeCggxmXyXEO4cHZvDbqDgzx5i+iFdaxi45FHru4HjIJUOHDO8wc\nVD+v/j5eUAkKVKA/hYA+zsrGt3c2EgNVNDP48CgkicIhVHdKPXtO2VmKVVtl1iOH\nbZlmHoZX50MrKHDFZnJQilu21Y1QVCbznBDmBXRCwGJe8AEzvgiE6VlbFEBOU/o=\n=huPZ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJ888cL/UVm4G+OaMI/hYQ7scY7/ju0lGAb2h1moMvZICP/wEFGnM8j1ygnZ\nOJoodlQs2QcI8QRanxzp8Aiq/zlZNHNn7ACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEFomkXPjpiUO81noAxXHHWAI\n8QRanxzp8Aic6LakcjscegCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BB4wopSnCNNCYcxufUhIuORCPEEWp8c\n6fAIDIVuHPOKJt8Ag9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5v\ncGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 432d33ca6d40833781f33ef282a132968969a8bb\nparent 17c44b208f1ced3dad372650d769d42d9e23fb35\nparent 5f8cc0df126ab3a4bd5c63d32deddb96df48e789\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520377060 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520377063 +0100\n\nMerge #12600: Add a test for large tx output scripts with segwit input.\n\n5f8cc0df1 Add a test for large tx output scripts with segwit input. (Richard Kiss)\n\nPull request description:\n\n  This test failed in pycoin but passed in bitcoin, so I thought I'd share it.\n\nTree-SHA512: 95dff4e03afea4d93ff5e99aa06004446c3df022c2e8a191cac8981107135a5ac2bd3ba1c3a9c4eda9f8f63f584cc1700b7ef57ee6ec2c66a72c699b51bdb61a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29088b14ee4b3b3ef772af9ba3294fadd33a4d21/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17c44b208f1ced3dad372650d769d42d9e23fb35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17c44b208f1ced3dad372650d769d42d9e23fb35",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17c44b208f1ced3dad372650d769d42d9e23fb35"
      },
      {
        "sha": "5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f8cc0df126ab3a4bd5c63d32deddb96df48e789",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f8cc0df126ab3a4bd5c63d32deddb96df48e789"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0bcecc58feefd99554487d0b247fd78430dcd6d1",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29088b14ee4b3b3ef772af9ba3294fadd33a4d21/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29088b14ee4b3b3ef772af9ba3294fadd33a4d21/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
        "patch": "@@ -516,5 +516,9 @@\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n \"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n \n+[\"Test long outputs, which are streamed using length-prefixed bitcoin strings. This might be surprising.\"],\n+[[[\"1111111111111111111111111111111111111111111111111111111111111111\", 0, \"0x00 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\", 5000000]],\n+\"0100000000010111111111111111111111111111111111111111111111111111111111111111110000000000ffffffff0130244c0000000000fd02014cdc1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111175210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac02483045022100c1a4a6581996a7fdfea77d58d537955a5655c1d619b6f3ab6874f28bb2e19708022056402db6fede03caae045a3be616a1a2d0919a475ed4be828dc9ff21f24063aa01210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179800000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjI1MDEwYTgwOGQ0NzVjYmI1M2FlZWQ0ODQyOTVmOGRjODc1MWM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T23:04:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-06T23:09:48Z"
      },
      "message": "Merge #11372: Address encoding cleanup\n\n92f1f8b31 Split off key_io_tests from base58_tests (Pieter Wuille)\n119b0f85e Split key_io (address/key encodings) off from base58 (Pieter Wuille)\nebfe217b1 Stop using CBase58Data for ext keys (Pieter Wuille)\n32e69fa0d Replace CBitcoinSecret with {Encode,Decode}Secret (Pieter Wuille)\n\nPull request description:\n\n  This PR contains some of the changes left as TODO in #11167 (and built on top of that PR). They are not intended for backporting.\n\n  This removes the `CBase58`, `CBitcoinSecret`, `CBitcoinExtKey`, and `CBitcoinExtPubKey` classes, in favor of simple `Encode`/`Decode` functions. Furthermore, all Bitcoin-specific logic (addresses, WIF, BIP32) is moved to `key_io.{h,cpp}`, leaving `base58.{h,cpp}` as a pure utility that implements the base58 encoding/decoding logic.\n\nTree-SHA512: a5962c0ed27ad53cbe00f22af432cf11aa530e3efc9798e25c004bc9ed1b5673db5df3956e398ee2c085e3a136ac8da69fe7a7d97a05fb2eb3be0b60d0479655",
      "tree": {
        "sha": "5ec8bb2bca595b84f4386d7da8abcccacaa7f898",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ec8bb2bca595b84f4386d7da8abcccacaa7f898"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJanx+8AAoJEB5K7WKYbNJdn10H/0bDfsclPDaAxADRg9xV8PJ+\nEErKnXOIeUJEOT8wsMjb9ZRl+Eov/vJchOl7d8pyEdy477Q2/Co70AnSfT2DypZe\nDm8mmhrK9jxAfkibPzHonSf5uJEKPmW120l5dqQZD+fajS5mCipYFQQeL9PUwShp\nQPc+tAjxG9AGkgXdVgIEJQaggHpVEFOjxiViTi+J2RpjQP0QMpXEdhKeJP9o5P3P\ncgVxqzomCTJom3/rON6Tetw/w0JcGkDFEneDXC/yCM7gDNX4qTSIJC870yw/96DU\ngsOg/ppc0kU9QuvtIVgUDwNcGJ2po9XWFkotNgRBtcF0rTxqBREuKJd3kXDcMK4=\n=Xh49\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILQFmfhvirTSH4Rx7W7U70iVJm5rfW8WT8qQWugpy8k+CP/wEAf9tPFkNYSi\nYF6D1CcHRRII8QRanx+/8Aiwf3rTbCtBcgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQC7bfdCRcpPK0ZxMO\nManjJAjxBFqfH77wCAX5534s0u+UAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BAWr6fbj9rWv+9zflBOM6lvCPEE\nWp8fv/AI9h9i7ixOVVgAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFy\nLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5ec8bb2bca595b84f4386d7da8abcccacaa7f898\nparent 29088b14ee4b3b3ef772af9ba3294fadd33a4d21\nparent 92f1f8b3197c2ba3cf65556070509838098975a4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520377496 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520377788 +0100\n\nMerge #11372: Address encoding cleanup\n\n92f1f8b31 Split off key_io_tests from base58_tests (Pieter Wuille)\n119b0f85e Split key_io (address/key encodings) off from base58 (Pieter Wuille)\nebfe217b1 Stop using CBase58Data for ext keys (Pieter Wuille)\n32e69fa0d Replace CBitcoinSecret with {Encode,Decode}Secret (Pieter Wuille)\n\nPull request description:\n\n  This PR contains some of the changes left as TODO in #11167 (and built on top of that PR). They are not intended for backporting.\n\n  This removes the `CBase58`, `CBitcoinSecret`, `CBitcoinExtKey`, and `CBitcoinExtPubKey` classes, in favor of simple `Encode`/`Decode` functions. Furthermore, all Bitcoin-specific logic (addresses, WIF, BIP32) is moved to `key_io.{h,cpp}`, leaving `base58.{h,cpp}` as a pure utility that implements the base58 encoding/decoding logic.\n\nTree-SHA512: a5962c0ed27ad53cbe00f22af432cf11aa530e3efc9798e25c004bc9ed1b5673db5df3956e398ee2c085e3a136ac8da69fe7a7d97a05fb2eb3be0b60d0479655\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29088b14ee4b3b3ef772af9ba3294fadd33a4d21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29088b14ee4b3b3ef772af9ba3294fadd33a4d21"
      },
      {
        "sha": "92f1f8b3197c2ba3cf65556070509838098975a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92f1f8b3197c2ba3cf65556070509838098975a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92f1f8b3197c2ba3cf65556070509838098975a4"
      }
    ],
    "stats": {
      "total": 1058,
      "additions": 484,
      "deletions": 574
    },
    "files": [
      {
        "sha": "0a9370c85c7940b56adc4be20a6da5d8c0730acc",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -105,6 +105,7 @@ BITCOIN_CORE_H = \\\n   indirectmap.h \\\n   init.h \\\n   key.h \\\n+  key_io.h \\\n   keystore.h \\\n   dbwrapper.h \\\n   limitedmap.h \\\n@@ -327,6 +328,7 @@ libbitcoin_common_a_SOURCES = \\\n   core_read.cpp \\\n   core_write.cpp \\\n   key.cpp \\\n+  key_io.cpp \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\"
      },
      {
        "sha": "4ee9102519dff8615d37c5834de4eac4e0264c9f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -9,13 +9,13 @@ TEST_SRCDIR = test\n TEST_BINARY=test/test_bitcoin$(EXEEXT)\n \n JSON_TEST_FILES = \\\n-  test/data/script_tests.json \\\n-  test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n-  test/data/base58_keys_invalid.json \\\n+  test/data/key_io_valid.json \\\n+  test/data/key_io_invalid.json \\\n+  test/data/script_tests.json \\\n+  test/data/sighash.json \\\n   test/data/tx_invalid.json \\\n-  test/data/tx_valid.json \\\n-  test/data/sighash.json\n+  test/data/tx_valid.json\n \n RAW_TEST_FILES =\n \n@@ -45,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n   test/dbwrapper_tests.cpp \\"
      },
      {
        "sha": "982e123a1d36f54c784287724cb757c281402c43",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 232,
        "changes": 232,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,20 +4,12 @@\n \n #include <base58.h>\n \n-#include <bech32.h>\n #include <hash.h>\n-#include <script/script.h>\n #include <uint256.h>\n-#include <utilstrencodings.h>\n \n-#include <boost/variant/apply_visitor.hpp>\n-#include <boost/variant/static_visitor.hpp>\n-\n-#include <algorithm>\n #include <assert.h>\n #include <string.h>\n \n-\n /** All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -151,227 +143,3 @@ bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRe\n {\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n-\n-CBase58Data::CBase58Data()\n-{\n-    vchVersion.clear();\n-    vchData.clear();\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)\n-{\n-    vchVersion = vchVersionIn;\n-    vchData.resize(nSize);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), pdata, nSize);\n-}\n-\n-void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n-{\n-    SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n-}\n-\n-bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n-{\n-    std::vector<unsigned char> vchTemp;\n-    bool rc58 = DecodeBase58Check(psz, vchTemp);\n-    if ((!rc58) || (vchTemp.size() < nVersionBytes)) {\n-        vchData.clear();\n-        vchVersion.clear();\n-        return false;\n-    }\n-    vchVersion.assign(vchTemp.begin(), vchTemp.begin() + nVersionBytes);\n-    vchData.resize(vchTemp.size() - nVersionBytes);\n-    if (!vchData.empty())\n-        memcpy(vchData.data(), vchTemp.data() + nVersionBytes, vchData.size());\n-    memory_cleanse(vchTemp.data(), vchTemp.size());\n-    return true;\n-}\n-\n-bool CBase58Data::SetString(const std::string& str)\n-{\n-    return SetString(str.c_str());\n-}\n-\n-std::string CBase58Data::ToString() const\n-{\n-    std::vector<unsigned char> vch = vchVersion;\n-    vch.insert(vch.end(), vchData.begin(), vchData.end());\n-    return EncodeBase58Check(vch);\n-}\n-\n-int CBase58Data::CompareTo(const CBase58Data& b58) const\n-{\n-    if (vchVersion < b58.vchVersion)\n-        return -1;\n-    if (vchVersion > b58.vchVersion)\n-        return 1;\n-    if (vchData < b58.vchData)\n-        return -1;\n-    if (vchData > b58.vchData)\n-        return 1;\n-    return 0;\n-}\n-\n-namespace\n-{\n-class DestinationEncoder : public boost::static_visitor<std::string>\n-{\n-private:\n-    const CChainParams& m_params;\n-\n-public:\n-    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n-\n-    std::string operator()(const CKeyID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const CScriptID& id) const\n-    {\n-        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        data.insert(data.end(), id.begin(), id.end());\n-        return EncodeBase58Check(data);\n-    }\n-\n-    std::string operator()(const WitnessV0KeyHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessV0ScriptHash& id) const\n-    {\n-        std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const WitnessUnknown& id) const\n-    {\n-        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n-            return {};\n-        }\n-        std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n-        return bech32::Encode(m_params.Bech32HRP(), data);\n-    }\n-\n-    std::string operator()(const CNoDestination& no) const { return {}; }\n-};\n-\n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n-{\n-    std::vector<unsigned char> data;\n-    uint160 hash;\n-    if (DecodeBase58Check(str, data)) {\n-        // base58-encoded Bitcoin addresses.\n-        // Public-key-hash-addresses have version 0 (or 111 testnet).\n-        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n-        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n-        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n-            return CKeyID(hash);\n-        }\n-        // Script-hash-addresses have version 5 (or 196 testnet).\n-        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n-        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n-        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n-            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n-            return CScriptID(hash);\n-        }\n-    }\n-    data.clear();\n-    auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n-        // Bech32 decoding\n-        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n-        // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n-            if (version == 0) {\n-                {\n-                    WitnessV0KeyHash keyid;\n-                    if (data.size() == keyid.size()) {\n-                        std::copy(data.begin(), data.end(), keyid.begin());\n-                        return keyid;\n-                    }\n-                }\n-                {\n-                    WitnessV0ScriptHash scriptid;\n-                    if (data.size() == scriptid.size()) {\n-                        std::copy(data.begin(), data.end(), scriptid.begin());\n-                        return scriptid;\n-                    }\n-                }\n-                return CNoDestination();\n-            }\n-            if (version > 16 || data.size() < 2 || data.size() > 40) {\n-                return CNoDestination();\n-            }\n-            WitnessUnknown unk;\n-            unk.version = version;\n-            std::copy(data.begin(), data.end(), unk.program);\n-            unk.length = data.size();\n-            return unk;\n-        }\n-    }\n-    return CNoDestination();\n-}\n-} // namespace\n-\n-void CBitcoinSecret::SetKey(const CKey& vchSecret)\n-{\n-    assert(vchSecret.IsValid());\n-    SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n-    if (vchSecret.IsCompressed())\n-        vchData.push_back(1);\n-}\n-\n-CKey CBitcoinSecret::GetKey()\n-{\n-    CKey ret;\n-    assert(vchData.size() >= 32);\n-    ret.Set(vchData.begin(), vchData.begin() + 32, vchData.size() > 32 && vchData[32] == 1);\n-    return ret;\n-}\n-\n-bool CBitcoinSecret::IsValid() const\n-{\n-    bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n-    bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n-    return fExpectedFormat && fCorrectVersion;\n-}\n-\n-bool CBitcoinSecret::SetString(const char* pszSecret)\n-{\n-    return CBase58Data::SetString(pszSecret) && IsValid();\n-}\n-\n-bool CBitcoinSecret::SetString(const std::string& strSecret)\n-{\n-    return SetString(strSecret.c_str());\n-}\n-\n-std::string EncodeDestination(const CTxDestination& dest)\n-{\n-    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n-}\n-\n-CTxDestination DecodeDestination(const std::string& str)\n-{\n-    return DecodeDestination(str, Params());\n-}\n-\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n-{\n-    return IsValidDestination(DecodeDestination(str, params));\n-}\n-\n-bool IsValidDestinationString(const std::string& str)\n-{\n-    return IsValidDestinationString(str, Params());\n-}"
      },
      {
        "sha": "8f2833bec9a944d2fe44b88c3a7b43dd59ab8169",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 91,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -14,12 +14,6 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <chainparams.h>\n-#include <key.h>\n-#include <pubkey.h>\n-#include <script/standard.h>\n-#include <support/allocators/zeroafterfree.h>\n-\n #include <string>\n #include <vector>\n \n@@ -56,95 +50,12 @@ std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet);\n \n /**\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-inline bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n-\n-/**\n- * Base class for all base58-encoded data\n- */\n-class CBase58Data\n-{\n-protected:\n-    //! the version byte(s)\n-    std::vector<unsigned char> vchVersion;\n-\n-    //! the actually encoded data\n-    typedef std::vector<unsigned char, zero_after_free_allocator<unsigned char> > vector_uchar;\n-    vector_uchar vchData;\n-\n-    CBase58Data();\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize);\n-    void SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend);\n-\n-public:\n-    bool SetString(const char* psz, unsigned int nVersionBytes = 1);\n-    bool SetString(const std::string& str);\n-    std::string ToString() const;\n-    int CompareTo(const CBase58Data& b58) const;\n-\n-    bool operator==(const CBase58Data& b58) const { return CompareTo(b58) == 0; }\n-    bool operator<=(const CBase58Data& b58) const { return CompareTo(b58) <= 0; }\n-    bool operator>=(const CBase58Data& b58) const { return CompareTo(b58) >= 0; }\n-    bool operator< (const CBase58Data& b58) const { return CompareTo(b58) <  0; }\n-    bool operator> (const CBase58Data& b58) const { return CompareTo(b58) >  0; }\n-};\n-\n-/**\n- * A base58-encoded secret key\n- */\n-class CBitcoinSecret : public CBase58Data\n-{\n-public:\n-    void SetKey(const CKey& vchSecret);\n-    CKey GetKey();\n-    bool IsValid() const;\n-    bool SetString(const char* pszSecret);\n-    bool SetString(const std::string& strSecret);\n-\n-    CBitcoinSecret(const CKey& vchSecret) { SetKey(vchSecret); }\n-    CBitcoinSecret() {}\n-};\n-\n-template<typename K, int Size, CChainParams::Base58Type Type> class CBitcoinExtKeyBase : public CBase58Data\n-{\n-public:\n-    void SetKey(const K &key) {\n-        unsigned char vch[Size];\n-        key.Encode(vch);\n-        SetData(Params().Base58Prefix(Type), vch, vch+Size);\n-    }\n-\n-    K GetKey() {\n-        K ret;\n-        if (vchData.size() == Size) {\n-            // If base58 encoded data does not hold an ext key, return a !IsValid() key\n-            ret.Decode(vchData.data());\n-        }\n-        return ret;\n-    }\n-\n-    CBitcoinExtKeyBase(const K &key) {\n-        SetKey(key);\n-    }\n-\n-    CBitcoinExtKeyBase(const std::string& strBase58c) {\n-        SetString(strBase58c.c_str(), Params().Base58Prefix(Type).size());\n-    }\n-\n-    CBitcoinExtKeyBase() {}\n-};\n-\n-typedef CBitcoinExtKeyBase<CExtKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_SECRET_KEY> CBitcoinExtKey;\n-typedef CBitcoinExtKeyBase<CExtPubKey, BIP32_EXTKEY_SIZE, CChainParams::EXT_PUBLIC_KEY> CBitcoinExtPubKey;\n-\n-std::string EncodeDestination(const CTxDestination& dest);\n-CTxDestination DecodeDestination(const std::string& str);\n-bool IsValidDestinationString(const std::string& str);\n-bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "fcd836fb450dcbefdcc5d542a6c2709fbaf8270b",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -6,11 +6,11 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -563,12 +563,10 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n     for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n         if (!keysObj[kidx].isStr())\n             throw std::runtime_error(\"privatekey not a std::string\");\n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(keysObj[kidx].getValStr());\n-        if (!fGood)\n+        CKey key = DecodeSecret(keysObj[kidx].getValStr());\n+        if (!key.IsValid()) {\n             throw std::runtime_error(\"privatekey not valid\");\n-\n-        CKey key = vchSecret.GetKey();\n+        }\n         tempKeystore.AddKey(key);\n     }\n "
      },
      {
        "sha": "91742b7d1b550fd20160bd9dcda4619d2f5d6959",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <core_io.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <serialize.h>"
      },
      {
        "sha": "82ae733006728706a4481b9e2a435d93eae6c0c3",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <httprpc.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <httpserver.h>\n+#include <key_io.h>\n #include <rpc/protocol.h>\n #include <rpc/server.h>\n #include <random.h>"
      },
      {
        "sha": "20df945d8def1ec16d081735cdc386f51442b450",
        "filename": "src/key_io.cpp",
        "status": "added",
        "additions": 223,
        "deletions": 0,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -0,0 +1,223 @@\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key_io.h>\n+\n+#include <base58.h>\n+#include <bech32.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+\n+#include <boost/variant/apply_visitor.hpp>\n+#include <boost/variant/static_visitor.hpp>\n+\n+#include <assert.h>\n+#include <string.h>\n+#include <algorithm>\n+\n+namespace\n+{\n+class DestinationEncoder : public boost::static_visitor<std::string>\n+{\n+private:\n+    const CChainParams& m_params;\n+\n+public:\n+    DestinationEncoder(const CChainParams& params) : m_params(params) {}\n+\n+    std::string operator()(const CKeyID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const CScriptID& id) const\n+    {\n+        std::vector<unsigned char> data = m_params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        data.insert(data.end(), id.begin(), id.end());\n+        return EncodeBase58Check(data);\n+    }\n+\n+    std::string operator()(const WitnessV0KeyHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessV0ScriptHash& id) const\n+    {\n+        std::vector<unsigned char> data = {0};\n+        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const WitnessUnknown& id) const\n+    {\n+        if (id.version < 1 || id.version > 16 || id.length < 2 || id.length > 40) {\n+            return {};\n+        }\n+        std::vector<unsigned char> data = {(unsigned char)id.version};\n+        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        return bech32::Encode(m_params.Bech32HRP(), data);\n+    }\n+\n+    std::string operator()(const CNoDestination& no) const { return {}; }\n+};\n+\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n+{\n+    std::vector<unsigned char> data;\n+    uint160 hash;\n+    if (DecodeBase58Check(str, data)) {\n+        // base58-encoded Bitcoin addresses.\n+        // Public-key-hash-addresses have version 0 (or 111 testnet).\n+        // The data vector contains RIPEMD160(SHA256(pubkey)), where pubkey is the serialized public key.\n+        const std::vector<unsigned char>& pubkey_prefix = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n+        if (data.size() == hash.size() + pubkey_prefix.size() && std::equal(pubkey_prefix.begin(), pubkey_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + pubkey_prefix.size(), data.end(), hash.begin());\n+            return CKeyID(hash);\n+        }\n+        // Script-hash-addresses have version 5 (or 196 testnet).\n+        // The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n+        const std::vector<unsigned char>& script_prefix = params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n+        if (data.size() == hash.size() + script_prefix.size() && std::equal(script_prefix.begin(), script_prefix.end(), data.begin())) {\n+            std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n+            return CScriptID(hash);\n+        }\n+    }\n+    data.clear();\n+    auto bech = bech32::Decode(str);\n+    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+        // Bech32 decoding\n+        int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n+        // The rest of the symbols are converted witness program bytes.\n+        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+            if (version == 0) {\n+                {\n+                    WitnessV0KeyHash keyid;\n+                    if (data.size() == keyid.size()) {\n+                        std::copy(data.begin(), data.end(), keyid.begin());\n+                        return keyid;\n+                    }\n+                }\n+                {\n+                    WitnessV0ScriptHash scriptid;\n+                    if (data.size() == scriptid.size()) {\n+                        std::copy(data.begin(), data.end(), scriptid.begin());\n+                        return scriptid;\n+                    }\n+                }\n+                return CNoDestination();\n+            }\n+            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+                return CNoDestination();\n+            }\n+            WitnessUnknown unk;\n+            unk.version = version;\n+            std::copy(data.begin(), data.end(), unk.program);\n+            unk.length = data.size();\n+            return unk;\n+        }\n+    }\n+    return CNoDestination();\n+}\n+} // namespace\n+\n+CKey DecodeSecret(const std::string& str)\n+{\n+    CKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& privkey_prefix = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+        if ((data.size() == 32 + privkey_prefix.size() || (data.size() == 33 + privkey_prefix.size() && data.back() == 1)) &&\n+            std::equal(privkey_prefix.begin(), privkey_prefix.end(), data.begin())) {\n+            bool compressed = data.size() == 33 + privkey_prefix.size();\n+            key.Set(data.begin() + privkey_prefix.size(), data.begin() + privkey_prefix.size() + 32, compressed);\n+        }\n+    }\n+    memory_cleanse(data.data(), data.size());\n+    return key;\n+}\n+\n+std::string EncodeSecret(const CKey& key)\n+{\n+    assert(key.IsValid());\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::SECRET_KEY);\n+    data.insert(data.end(), key.begin(), key.end());\n+    if (key.IsCompressed()) {\n+        data.push_back(1);\n+    }\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+CExtPubKey DecodeExtPubKey(const std::string& str)\n+{\n+    CExtPubKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtPubKey(const CExtPubKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_PUBLIC_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    return ret;\n+}\n+\n+CExtKey DecodeExtKey(const std::string& str)\n+{\n+    CExtKey key;\n+    std::vector<unsigned char> data;\n+    if (DecodeBase58Check(str, data)) {\n+        const std::vector<unsigned char>& prefix = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+        if (data.size() == BIP32_EXTKEY_SIZE + prefix.size() && std::equal(prefix.begin(), prefix.end(), data.begin())) {\n+            key.Decode(data.data() + prefix.size());\n+        }\n+    }\n+    return key;\n+}\n+\n+std::string EncodeExtKey(const CExtKey& key)\n+{\n+    std::vector<unsigned char> data = Params().Base58Prefix(CChainParams::EXT_SECRET_KEY);\n+    size_t size = data.size();\n+    data.resize(size + BIP32_EXTKEY_SIZE);\n+    key.Encode(data.data() + size);\n+    std::string ret = EncodeBase58Check(data);\n+    memory_cleanse(data.data(), data.size());\n+    return ret;\n+}\n+\n+std::string EncodeDestination(const CTxDestination& dest)\n+{\n+    return boost::apply_visitor(DestinationEncoder(Params()), dest);\n+}\n+\n+CTxDestination DecodeDestination(const std::string& str)\n+{\n+    return DecodeDestination(str, Params());\n+}\n+\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n+{\n+    return IsValidDestination(DecodeDestination(str, params));\n+}\n+\n+bool IsValidDestinationString(const std::string& str)\n+{\n+    return IsValidDestinationString(str, Params());\n+}"
      },
      {
        "sha": "6fc9a8059a543b725283544e79cb1d406faf0351",
        "filename": "src/key_io.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_KEYIO_H\n+#define BITCOIN_KEYIO_H\n+\n+#include <chainparams.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/standard.h>\n+\n+#include <string>\n+\n+CKey DecodeSecret(const std::string& str);\n+std::string EncodeSecret(const CKey& key);\n+\n+CExtKey DecodeExtKey(const std::string& str);\n+std::string EncodeExtKey(const CExtKey& extkey);\n+CExtPubKey DecodeExtPubKey(const std::string& str);\n+std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n+\n+std::string EncodeDestination(const CTxDestination& dest);\n+CTxDestination DecodeDestination(const std::string& str);\n+bool IsValidDestinationString(const std::string& str);\n+bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n+\n+#endif // BITCOIN_KEYIO_H"
      },
      {
        "sha": "4f9a79d654546cee5f3dbe3981c45191b54a44d3",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -7,10 +7,9 @@\n #include <qt/guiutil.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <wallet/wallet.h>\n \n-\n #include <QFont>\n #include <QDebug>\n "
      },
      {
        "sha": "6a76358a7834561c2c81d0df633c6d1ba967a3eb",
        "filename": "src/qt/bitcoinaddressvalidator.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/bitcoinaddressvalidator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/bitcoinaddressvalidator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinaddressvalidator.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <qt/bitcoinaddressvalidator.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n \n /* Base58 characters are:\n      \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\""
      },
      {
        "sha": "b83755ab3092e216423ecca43b53e73e3f0e564d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <wallet/coincontrol.h>\n #include <init.h>\n+#include <key_io.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <validation.h> // For mempool"
      },
      {
        "sha": "7c3c68bfefa29fea3e96340170082a7fdf345951",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -9,7 +9,10 @@\n #include <qt/qvalidatedlineedit.h>\n #include <qt/walletmodel.h>\n \n+#include <base58.h>\n+#include <chainparams.h>\n #include <primitives/transaction.h>\n+#include <key_io.h>\n #include <init.h>\n #include <policy/policy.h>\n #include <protocol.h>"
      },
      {
        "sha": "357e98a53c6c5b632195a7ca9f22f248688c4fee",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <qt/paymentrequestplus.h>\n \n+#include <script/script.h>\n #include <util.h>\n \n #include <stdexcept>"
      },
      {
        "sha": "b1b60cf582dbd970d80a583dabf1f4ace73b6404",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -10,7 +10,8 @@\n #include <qt/paymentrequest.pb.h>\n #pragma GCC diagnostic pop\n \n-#include <base58.h>\n+#include <amount.h>\n+#include <script/script.h>\n \n #include <openssl/x509.h>\n "
      },
      {
        "sha": "8ad4fa31f18ae719225049ee5a07ad236facd61e",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -8,9 +8,9 @@\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n #include <policy/policy.h>\n+#include <key_io.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "ec7edd48cd28a5e62ff0faf9a22bf4d9de789b5e",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/platformstyle.h>\n #include <qt/sendcoinsentry.h>\n \n-#include <base58.h>\n #include <chainparams.h>\n+#include <key_io.h>\n #include <wallet/coincontrol.h>\n #include <validation.h> // mempool and minRelayTxFee\n #include <ui_interface.h>"
      },
      {
        "sha": "8dade8df7984eb97c921389e0e81392727fd5ced",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -10,8 +10,8 @@\n #include <qt/platformstyle.h>\n #include <qt/walletmodel.h>\n \n-#include <base58.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h> // For strMessageMagic\n #include <wallet/wallet.h>\n "
      },
      {
        "sha": "29ef4b4c9e7ec029fe71c4e7c25113d4d20aea1c",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/test/paymentrequestdata.h>\n \n #include <amount.h>\n+#include <chainparams.h>\n #include <random.h>\n #include <script/script.h>\n #include <script/standard.h>"
      },
      {
        "sha": "5ba75cc91de34321d4d0a085d72cd5ab187a41e1",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -10,6 +10,7 @@\n #include <qt/transactiontablemodel.h>\n #include <qt/transactionview.h>\n #include <qt/walletmodel.h>\n+#include <key_io.h>\n #include <test/test_bitcoin.h>\n #include <validation.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "c3f7ea601e4d48cd1e60d3eba7f26dd4a9bc778a",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -9,8 +9,8 @@\n #include <qt/paymentserver.h>\n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <script/script.h>\n #include <timedata.h>"
      },
      {
        "sha": "2830149655e0f4b12123c60415a69362c2b7120a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <qt/transactionrecord.h>\n \n-#include <base58.h>\n #include <consensus/consensus.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <timedata.h>\n #include <wallet/wallet.h>"
      },
      {
        "sha": "e7d9d276d70cda4edad3a9846de4145d0404ccac",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -14,8 +14,8 @@\n #include <qt/sendcoinsdialog.h>\n #include <qt/transactiontablemodel.h>\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h> // for g_connman"
      },
      {
        "sha": "811996b98f7f92b853f2698c10d3228b0c66a616",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -5,6 +5,11 @@\n #ifndef BITCOIN_QT_WALLETMODEL_H\n #define BITCOIN_QT_WALLETMODEL_H\n \n+#include <amount.h>\n+#include <key.h>\n+#include <serialize.h>\n+#include <script/standard.h>\n+\n #include <qt/paymentrequestplus.h>\n #include <qt/walletmodeltransaction.h>\n "
      },
      {
        "sha": "3073a49d0db3c526cc56c85ba3c26dcfc6d0f799",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <amount.h>\n #include <chain.h>\n #include <chainparams.h>\n@@ -13,6 +12,7 @@\n #include <core_io.h>\n #include <init.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <miner.h>\n #include <net.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "49e865a64ac3c6257f41066ccc5077f6bc1ceea6",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -3,12 +3,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <clientversion.h>\n #include <core_io.h>\n #include <crypto/ripemd160.h>\n #include <init.h>\n+#include <key_io.h>\n #include <validation.h>\n #include <httpserver.h>\n #include <net.h>\n@@ -224,13 +224,10 @@ UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n \n-    CBitcoinSecret vchSecret;\n-    bool fGood = vchSecret.SetString(strPrivkey);\n-    if (!fGood)\n+    CKey key = DecodeSecret(strPrivkey);\n+    if (!key.IsValid()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-    CKey key = vchSecret.GetKey();\n-    if (!key.IsValid())\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+    }\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;"
      },
      {
        "sha": "8dcfb48e9ae137a9c96f7f0eb65dbf0a72b2ae7e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n #include <coins.h>\n #include <consensus/validation.h>\n@@ -12,6 +11,7 @@\n #include <keystore.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <net.h>\n #include <policy/policy.h>\n@@ -896,13 +896,9 @@ UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n     const UniValue& keys = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < keys.size(); ++idx) {\n         UniValue k = keys[idx];\n-        CBitcoinSecret vchSecret;\n-        if (!vchSecret.SetString(k.get_str())) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n-        }\n-        CKey key = vchSecret.GetKey();\n+        CKey key = DecodeSecret(k.get_str());\n         if (!key.IsValid()) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n         }\n         keystore.AddKey(key);\n     }"
      },
      {
        "sha": "35401bf876b2570891c3c45c4d49c2f334ffb5a7",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <rpc/server.h>\n \n-#include <base58.h>\n #include <fs.h>\n #include <init.h>\n+#include <key_io.h>\n #include <random.h>\n #include <sync.h>\n #include <ui_interface.h>"
      },
      {
        "sha": "593962e7104eb99a36af56c8250e2133fe16150d",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>"
      },
      {
        "sha": "f90d4f90cb655ca2a19b5a909b892737d4da6015",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 139,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -2,17 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n-\n #include <test/data/base58_encode_decode.json.h>\n-#include <test/data/base58_keys_invalid.json.h>\n-#include <test/data/base58_keys_valid.json.h>\n \n-#include <key.h>\n-#include <script/script.h>\n+#include <base58.h>\n #include <test/test_bitcoin.h>\n-#include <uint256.h>\n-#include <util.h>\n #include <utilstrencodings.h>\n \n #include <univalue.h>\n@@ -73,135 +66,4 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n }\n \n-// Goal: check that parsed keys match test payload\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-    CBitcoinSecret secret;\n-    CTxDestination destination;\n-    SelectParams(CBaseChainParams::MAIN);\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            // Must be valid private key\n-            BOOST_CHECK_MESSAGE(secret.SetString(exp_base58string), \"!SetString:\"+ strTest);\n-            BOOST_CHECK_MESSAGE(secret.IsValid(), \"!IsValid:\" + strTest);\n-            CKey privkey = secret.GetKey();\n-            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n-            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n-\n-            // Private key must be invalid public key\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n-        } else {\n-            // Must be valid public key\n-            destination = DecodeDestination(exp_base58string);\n-            CScript script = GetScriptForDestination(destination);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n-            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-\n-            // Try flipped case version\n-            for (char& c : exp_base58string) {\n-                if (c >= 'a' && c <= 'z') {\n-                    c = (c - 'a') + 'A';\n-                } else if (c >= 'A' && c <= 'Z') {\n-                    c = (c - 'A') + 'a';\n-                }\n-            }\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n-            if (IsValidDestination(destination)) {\n-                script = GetScriptForDestination(destination);\n-                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n-            }\n-\n-            // Public key must be invalid private key\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n-        }\n-    }\n-}\n-\n-// Goal: check that generated keys match test vectors\n-BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n-        const UniValue &metadata = test[2].get_obj();\n-        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n-        SelectParams(find_value(metadata, \"chain\").get_str());\n-        if (isPrivkey) {\n-            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n-            CKey key;\n-            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n-            assert(key.IsValid());\n-            CBitcoinSecret secret;\n-            secret.SetKey(key);\n-            BOOST_CHECK_MESSAGE(secret.ToString() == exp_base58string, \"result mismatch: \" + strTest);\n-        } else {\n-            CTxDestination dest;\n-            CScript exp_script(exp_payload.begin(), exp_payload.end());\n-            ExtractDestination(exp_script, dest);\n-            std::string address = EncodeDestination(dest);\n-\n-            BOOST_CHECK_EQUAL(address, exp_base58string);\n-        }\n-    }\n-\n-    SelectParams(CBaseChainParams::MAIN);\n-}\n-\n-\n-// Goal: check that base58 parsing code is robust against a variety of corrupted data\n-BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n-{\n-    UniValue tests = read_json(std::string(json_tests::base58_keys_invalid, json_tests::base58_keys_invalid + sizeof(json_tests::base58_keys_invalid))); // Negative testcases\n-    CBitcoinSecret secret;\n-    CTxDestination destination;\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        std::string strTest = test.write();\n-        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n-        {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n-            continue;\n-        }\n-        std::string exp_base58string = test[0].get_str();\n-\n-        // must be invalid as public and as private key\n-        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n-            SelectParams(chain);\n-            destination = DecodeDestination(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n-            secret.SetString(exp_base58string);\n-            BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n-        }\n-    }\n-}\n-\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "3c9ff1877dd8fda9964e6df06ab6e33132f11c6f",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,8 +4,8 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include <base58.h>\n #include <key.h>\n+#include <key_io.h>\n #include <uint256.h>\n #include <util.h>\n #include <utilstrencodings.h>\n@@ -99,20 +99,12 @@ void RunTest(const TestVector &test) {\n         pubkey.Encode(data);\n \n         // Test private key\n-        CBitcoinExtKey b58key; b58key.SetKey(key);\n-        BOOST_CHECK(b58key.ToString() == derive.prv);\n-\n-        CBitcoinExtKey b58keyDecodeCheck(derive.prv);\n-        CExtKey checkKey = b58keyDecodeCheck.GetKey();\n-        assert(checkKey == key); //ensure a base58 decoded key also matches\n+        BOOST_CHECK(EncodeExtKey(key) == derive.prv);\n+        BOOST_CHECK(DecodeExtKey(derive.prv) == key); //ensure a base58 decoded key also matches\n \n         // Test public key\n-        CBitcoinExtPubKey b58pubkey; b58pubkey.SetKey(pubkey);\n-        BOOST_CHECK(b58pubkey.ToString() == derive.pub);\n-\n-        CBitcoinExtPubKey b58PubkeyDecodeCheck(derive.pub);\n-        CExtPubKey checkPubKey = b58PubkeyDecodeCheck.GetKey();\n-        assert(checkPubKey == pubkey); //ensure a base58 decoded pubkey also matches\n+        BOOST_CHECK(EncodeExtPubKey(pubkey) == derive.pub);\n+        BOOST_CHECK(DecodeExtPubKey(derive.pub) == pubkey); //ensure a base58 decoded pubkey also matches\n \n         // Derive new keys\n         CExtKey keyNew;"
      },
      {
        "sha": "73c8eb5168abb941fdde90b93c1a0502b6237a43",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,9 +4,9 @@\n \n #include <bloom.h>\n \n-#include <base58.h>\n #include <clientversion.h>\n #include <key.h>\n+#include <key_io.h>\n #include <merkleblock.h>\n #include <primitives/block.h>\n #include <random.h>\n@@ -85,10 +85,7 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)\n BOOST_AUTO_TEST_CASE(bloom_create_insert_key)\n {\n     std::string strSecret = std::string(\"5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C\");\n-    CBitcoinSecret vchSecret;\n-    BOOST_CHECK(vchSecret.SetString(strSecret));\n-\n-    CKey key = vchSecret.GetKey();\n+    CKey key = DecodeSecret(strSecret);\n     CPubKey pubkey = key.GetPubKey();\n     std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());\n "
      },
      {
        "sha": "2056c7491c491bdab249ea193dd35f82a3731eb6",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "previous_filename": "src/test/data/base58_keys_invalid.json"
      },
      {
        "sha": "8418a6002da810ca44f7a84561777af3aa99ab5c",
        "filename": "src/test/data/key_io_valid.json",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/data/key_io_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/data/key_io_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_valid.json?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "previous_filename": "src/test/data/base58_keys_valid.json"
      },
      {
        "sha": "1ac1e0015bf3e569c641680966cd42c2ae6642dc",
        "filename": "src/test/key_io_tests.cpp",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/key_io_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/key_io_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_io_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/data/key_io_invalid.json.h>\n+#include <test/data/key_io_valid.json.h>\n+\n+#include <key.h>\n+#include <key_io.h>\n+#include <script/script.h>\n+#include <utilstrencodings.h>\n+#include <test/test_bitcoin.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <univalue.h>\n+\n+extern UniValue read_json(const std::string& jsondata);\n+\n+BOOST_FIXTURE_TEST_SUITE(key_io_tests, BasicTestingSetup)\n+\n+// Goal: check that parsed keys match test payload\n+BOOST_AUTO_TEST_CASE(key_io_valid_parse)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+    CKey privkey;\n+    CTxDestination destination;\n+    SelectParams(CBaseChainParams::MAIN);\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) { // Allow for extra stuff (useful for comments)\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        bool try_case_flip = find_value(metadata, \"tryCaseFlip\").isNull() ? false : find_value(metadata, \"tryCaseFlip\").get_bool();\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            // Must be valid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(privkey.IsValid(), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.IsCompressed() == isCompressed, \"compressed mismatch:\" + strTest);\n+            BOOST_CHECK_MESSAGE(privkey.size() == exp_payload.size() && std::equal(privkey.begin(), privkey.end(), exp_payload.begin()), \"key mismatch:\" + strTest);\n+\n+            // Private key must be invalid public key\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid privkey as pubkey:\" + strTest);\n+        } else {\n+            // Must be valid public key\n+            destination = DecodeDestination(exp_base58string);\n+            CScript script = GetScriptForDestination(destination);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination), \"!IsValid:\" + strTest);\n+            BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+\n+            // Try flipped case version\n+            for (char& c : exp_base58string) {\n+                if (c >= 'a' && c <= 'z') {\n+                    c = (c - 'a') + 'A';\n+                } else if (c >= 'A' && c <= 'Z') {\n+                    c = (c - 'A') + 'a';\n+                }\n+            }\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(IsValidDestination(destination) == try_case_flip, \"!IsValid case flipped:\" + strTest);\n+            if (IsValidDestination(destination)) {\n+                script = GetScriptForDestination(destination);\n+                BOOST_CHECK_EQUAL(HexStr(script), HexStr(exp_payload));\n+            }\n+\n+            // Public key must be invalid private key\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n+        }\n+    }\n+}\n+\n+// Goal: check that generated keys match test vectors\n+BOOST_AUTO_TEST_CASE(key_io_valid_gen)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_valid, json_tests::key_io_valid + sizeof(json_tests::key_io_valid)));\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 3) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+        std::vector<unsigned char> exp_payload = ParseHex(test[1].get_str());\n+        const UniValue &metadata = test[2].get_obj();\n+        bool isPrivkey = find_value(metadata, \"isPrivkey\").get_bool();\n+        SelectParams(find_value(metadata, \"chain\").get_str());\n+        if (isPrivkey) {\n+            bool isCompressed = find_value(metadata, \"isCompressed\").get_bool();\n+            CKey key;\n+            key.Set(exp_payload.begin(), exp_payload.end(), isCompressed);\n+            assert(key.IsValid());\n+            BOOST_CHECK_MESSAGE(EncodeSecret(key) == exp_base58string, \"result mismatch: \" + strTest);\n+        } else {\n+            CTxDestination dest;\n+            CScript exp_script(exp_payload.begin(), exp_payload.end());\n+            ExtractDestination(exp_script, dest);\n+            std::string address = EncodeDestination(dest);\n+\n+            BOOST_CHECK_EQUAL(address, exp_base58string);\n+        }\n+    }\n+\n+    SelectParams(CBaseChainParams::MAIN);\n+}\n+\n+\n+// Goal: check that base58 parsing code is robust against a variety of corrupted data\n+BOOST_AUTO_TEST_CASE(key_io_invalid)\n+{\n+    UniValue tests = read_json(std::string(json_tests::key_io_invalid, json_tests::key_io_invalid + sizeof(json_tests::key_io_invalid))); // Negative testcases\n+    CKey privkey;\n+    CTxDestination destination;\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        UniValue test = tests[idx];\n+        std::string strTest = test.write();\n+        if (test.size() < 1) // Allow for extra stuff (useful for comments)\n+        {\n+            BOOST_ERROR(\"Bad test: \" << strTest);\n+            continue;\n+        }\n+        std::string exp_base58string = test[0].get_str();\n+\n+        // must be invalid as public and as private key\n+        for (auto chain : { CBaseChainParams::MAIN, CBaseChainParams::TESTNET, CBaseChainParams::REGTEST }) {\n+            SelectParams(chain);\n+            destination = DecodeDestination(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!IsValidDestination(destination), \"IsValid pubkey in mainnet:\" + strTest);\n+            privkey = DecodeSecret(exp_base58string);\n+            BOOST_CHECK_MESSAGE(!privkey.IsValid(), \"IsValid privkey in mainnet:\" + strTest);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "64c57f0705f00bf362a32e7a1b2702cf8a977cab",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 16,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <key.h>\n \n-#include <base58.h>\n+#include <key_io.h>\n #include <script/script.h>\n #include <uint256.h>\n #include <util.h>\n@@ -32,21 +32,16 @@ BOOST_FIXTURE_TEST_SUITE(key_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(key_test1)\n {\n-    CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C, baddress1;\n-    BOOST_CHECK( bsecret1.SetString (strSecret1));\n-    BOOST_CHECK( bsecret2.SetString (strSecret2));\n-    BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n-    BOOST_CHECK( bsecret2C.SetString(strSecret2C));\n-    BOOST_CHECK(!baddress1.SetString(strAddressBad));\n-\n-    CKey key1  = bsecret1.GetKey();\n-    BOOST_CHECK(key1.IsCompressed() == false);\n-    CKey key2  = bsecret2.GetKey();\n-    BOOST_CHECK(key2.IsCompressed() == false);\n-    CKey key1C = bsecret1C.GetKey();\n-    BOOST_CHECK(key1C.IsCompressed() == true);\n-    CKey key2C = bsecret2C.GetKey();\n-    BOOST_CHECK(key2C.IsCompressed() == true);\n+    CKey key1  = DecodeSecret(strSecret1);\n+    BOOST_CHECK(key1.IsValid() && !key1.IsCompressed());\n+    CKey key2  = DecodeSecret(strSecret2);\n+    BOOST_CHECK(key2.IsValid() && !key2.IsCompressed());\n+    CKey key1C = DecodeSecret(strSecret1C);\n+    BOOST_CHECK(key1C.IsValid() && key1C.IsCompressed());\n+    CKey key2C = DecodeSecret(strSecret2C);\n+    BOOST_CHECK(key2C.IsValid() && key2C.IsCompressed());\n+    CKey bad_key = DecodeSecret(strAddressBad);\n+    BOOST_CHECK(!bad_key.IsValid());\n \n     CPubKey pubkey1  = key1. GetPubKey();\n     CPubKey pubkey2  = key2. GetPubKey();"
      },
      {
        "sha": "892e4f2dac98b43e10ec8e1ef178fa8ebd6ec971",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -5,8 +5,8 @@\n #include <rpc/server.h>\n #include <rpc/client.h>\n \n-#include <base58.h>\n #include <core_io.h>\n+#include <key_io.h>\n #include <netbase.h>\n \n #include <test/test_bitcoin.h>"
      },
      {
        "sha": "0edc8d8d66f137f9a90b65709310ef18b9b9f6a1",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 34,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <base58.h>\n #include <chain.h>\n+#include <key_io.h>\n #include <rpc/safemode.h>\n #include <rpc/server.h>\n #include <wallet/init.h>\n@@ -147,13 +147,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n         }\n \n-        CBitcoinSecret vchSecret;\n-        bool fGood = vchSecret.SetString(strSecret);\n-\n-        if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-\n-        CKey key = vchSecret.GetKey();\n-        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        CKey key = DecodeSecret(strSecret);\n+        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n \n         CPubKey pubkey = key.GetPubKey();\n         assert(key.VerifyPubKey(pubkey));\n@@ -554,9 +549,8 @@ UniValue importwallet(const JSONRPCRequest& request)\n             boost::split(vstr, line, boost::is_any_of(\" \"));\n             if (vstr.size() < 2)\n                 continue;\n-            CBitcoinSecret vchSecret;\n-            if (vchSecret.SetString(vstr[0])) {\n-                CKey key = vchSecret.GetKey();\n+            CKey key = DecodeSecret(vstr[0]);\n+            if (key.IsValid()) {\n                 CPubKey pubkey = key.GetPubKey();\n                 assert(key.VerifyPubKey(pubkey));\n                 CKeyID keyid = pubkey.GetID();\n@@ -659,7 +653,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!pwallet->GetKey(keyid, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     }\n-    return CBitcoinSecret(vchSecret).ToString();\n+    return EncodeSecret(vchSecret);\n }\n \n \n@@ -742,10 +736,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             CExtKey masterKey;\n             masterKey.SetMaster(key.begin(), key.size());\n \n-            CBitcoinExtKey b58extkey;\n-            b58extkey.SetKey(masterKey);\n-\n-            file << \"# extended private masterkey: \" << b58extkey.ToString() << \"\\n\\n\";\n+            file << \"# extended private masterkey: \" << EncodeExtKey(masterKey) << \"\\n\\n\";\n         }\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n@@ -755,7 +746,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n-            file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n+            file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n             if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n                file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n@@ -911,17 +902,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 for (size_t i = 0; i < keys.size(); i++) {\n                     const std::string& privkey = keys[i].get_str();\n \n-                    CBitcoinSecret vchSecret;\n-                    bool fGood = vchSecret.SetString(privkey);\n-\n-                    if (!fGood) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CKey key = vchSecret.GetKey();\n+                    CKey key = DecodeSecret(privkey);\n \n                     if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                     }\n \n                     CPubKey pubkey = key.GetPubKey();\n@@ -1018,16 +1002,10 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 const std::string& strPrivkey = keys[0].get_str();\n \n                 // Checks.\n-                CBitcoinSecret vchSecret;\n-                bool fGood = vchSecret.SetString(strPrivkey);\n-\n-                if (!fGood) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n+                CKey key = DecodeSecret(strPrivkey);\n \n-                CKey key = vchSecret.GetKey();\n                 if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n                 }\n \n                 CPubKey pubKey = key.GetPubKey();"
      },
      {
        "sha": "52b68e97ee1e71d75bf86bdd004f6a46ed743aa7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -4,12 +4,12 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <amount.h>\n-#include <base58.h>\n #include <chain.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <httpserver.h>\n #include <validation.h>\n+#include <key_io.h>\n #include <net.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "a014f5b2a0d7074d4f98bfda48f54cab027e279c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -5,7 +5,6 @@\n \n #include <wallet/wallet.h>\n \n-#include <base58.h>\n #include <checkpoints.h>\n #include <chain.h>\n #include <wallet/coincontrol.h>\n@@ -14,6 +13,7 @@\n #include <fs.h>\n #include <wallet/init.h>\n #include <key.h>\n+#include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n #include <net.h>"
      },
      {
        "sha": "c14fbd1e8ca7c91bf0da22ee2b4194116af19010",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b225010a808d475cbb53aeed484295f8dc8751c4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b225010a808d475cbb53aeed484295f8dc8751c4",
        "patch": "@@ -5,10 +5,10 @@\n \n #include <wallet/walletdb.h>\n \n-#include <base58.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <fs.h>\n+#include <key_io.h>\n #include <protocol.h>\n #include <serialize.h>\n #include <sync.h>"
      }
    ]
  },
  {
    "sha": "46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmU3ZjgwMGJkNzhhYTRkNGRlNTkxNWI0YTdlNWEzMjM0YzUwN2Q2",
    "commit": {
      "author": {
        "name": "e0",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2018-03-06T23:26:29Z"
      },
      "committer": {
        "name": "e0",
        "email": "ethan.r.heilman@gmail.com",
        "date": "2018-03-06T23:26:29Z"
      },
      "message": "Limit the number of IPs we use from each DNS seeder\n\nA risk exists where a malicious DNS seeder eclipses a node by returning an enormous number of IP addresses. In this commit we mitigate this risk by limiting the number of IP addresses addrman learns to 256 per DNS seeder.",
      "tree": {
        "sha": "7ec920effa2c47f24f9a17d6f4fb9a3f6f96e211",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec920effa2c47f24f9a17d6f4fb9a3f6f96e211"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6/comments",
    "author": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "EthanHeilman",
      "id": 274814,
      "node_id": "MDQ6VXNlcjI3NDgxNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/274814?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/EthanHeilman",
      "html_url": "https://github.com/EthanHeilman",
      "followers_url": "https://api.github.com/users/EthanHeilman/followers",
      "following_url": "https://api.github.com/users/EthanHeilman/following{/other_user}",
      "gists_url": "https://api.github.com/users/EthanHeilman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/EthanHeilman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/EthanHeilman/subscriptions",
      "organizations_url": "https://api.github.com/users/EthanHeilman/orgs",
      "repos_url": "https://api.github.com/users/EthanHeilman/repos",
      "events_url": "https://api.github.com/users/EthanHeilman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/EthanHeilman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "33a60ac96efe8794c5e0f006c2f25dfbd61a6ce3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
        "patch": "@@ -1631,7 +1631,8 @@ void CConnman::ThreadDNSAddressSeed()\n             if (!resolveSource.SetInternal(host)) {\n                 continue;\n             }\n-            if (LookupHost(host.c_str(), vIPs, 0, true))\n+            unsigned int nMaxIPs = 256; // Limits number of IPs learned from a DNS seed\n+            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true))\n             {\n                 for (const CNetAddr& ip : vIPs)\n                 {"
      }
    ]
  },
  {
    "sha": "fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM1MjhhODViMDVlYTk1MDcwNzdmM2ViMzQwYzlmYjE4OTI1MWE2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-06T23:43:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-06T23:42:19Z"
      },
      "message": "qa: Fix some tests to work on native windows",
      "tree": {
        "sha": "93eec5fb44970f4778a5feb270f4b9ae901a2841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93eec5fb44970f4778a5feb270f4b9ae901a2841"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJanydbAAoJEM4rdWl+aaVIGIsL/jYPh+p2I4p0nL8Gi9JrqX5W\n+64aHev2sHSo7ymW2Q4pL3qVtDRNwvcvFl5yAvbI59jhUzTY0WTx/89MNrqJ0ro9\nj0+suQVkzN64XZKUMYzdAVIhK5qohNP0O8C3YkR5XoQfkbPRHpmQZ8nCdLWtsStu\nWGgZZoQg52uNe3XRJ14+wDyVk5LmKx5MkF1YA/Outkdn2zlE/6TleSl6eXK9Rw0z\nukPpNWyomi8D8v9A33vsLbt4t2HNzWdhP9TqMzDCfloReWs2tEJJuOvG4TTDOQ5I\n/SSPFTmSz1n1GVAIiqTmduvb9mK0jLn1Basl1Za1XV/fY0RQGCK2c6Kq+LVDTmGN\nc1leYqv0z5FfLsT45XzO85LfY0R/gRD7RP1FKHMSYgnJBVJ9lEYMwxXlyBp5vOL7\n/yn3EzMDEMCWqfsldZp8NBErFkLNS+3nlphRhfJhA6Sc1QSpjc218xji5Z/kZOc8\njjmEKBFhlwtcytBdDCvo10AyArhc4vniLeWZ+A5qbg==\n=ibUW\n-----END PGP SIGNATURE-----",
        "payload": "tree 93eec5fb44970f4778a5feb270f4b9ae901a2841\nparent 8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800\nauthor MarcoFalke <falke.marco@gmail.com> 1520379830 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520379739 -0500\n\nqa: Fix some tests to work on native windows\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3528a85b05ea9507077f3eb340c9fb189251a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a98dfeebf58b8fc9b7c966ae0f99ad0760d7800"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "53748df915ceadb0015db086105ef59a7215a0b1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -66,7 +66,9 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n-        self.start_node(1)  # Give this one a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Give this node a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Also don't store the mempool, to keep the datadir clean\n+        self.start_node(1, extra_args=[\"-persistmempool=0\"])\n         self.start_node(0)\n         self.start_node(2)\n         # Give bitcoind a second to reload the mempool"
      },
      {
        "sha": "36d1a2f856133b22ab5233ad09f6deb7f8168de2",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -9,7 +9,6 @@\n \n import sys\n import socket\n-import fcntl\n import struct\n import array\n import os\n@@ -90,6 +89,8 @@ def all_interfaces():\n     '''\n     Return all interfaces that are up\n     '''\n+    import fcntl  # Linux only, so only import when required\n+\n     is_64bits = sys.maxsize > 2**32\n     struct_size = 40 if is_64bits else 32\n     s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)"
      },
      {
        "sha": "94fd6baf046f226e3d918c223e0b26e588f84f76",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3528a85b05ea9507077f3eb340c9fb189251a6/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "patch": "@@ -7,7 +7,10 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_rpc_error)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n \n \n def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n@@ -88,7 +91,8 @@ def setup_network(self, split=False):\n         self.start_nodes()\n \n     def run_test (self):\n-        tmpdir = self.options.tmpdir\n+        wallet_unenc_dump = os.path.join(self.nodes[0].datadir, \"wallet.unencrypted.dump\")\n+        wallet_enc_dump = os.path.join(self.nodes[0].datadir, \"wallet.encrypted.dump\")\n \n         # generate 20 addresses to compare against the dump\n         # but since we add a p2sh-p2wpkh address for the first pubkey in the\n@@ -108,11 +112,11 @@ def run_test (self):\n         script_addrs = [witness_addr, multisig_addr]\n \n         # dump unencrypted wallet\n-        result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        result = self.nodes[0].dumpwallet(wallet_unenc_dump)\n+        assert_equal(result['filename'], wallet_unenc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n+            read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n@@ -125,18 +129,18 @@ def run_test (self):\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n-        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        self.nodes[0].dumpwallet(wallet_enc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n+            read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n-        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", lambda: self.nodes[0].dumpwallet(wallet_enc_dump))\n \n         # Restart node with new wallet, and test importwallet\n         self.stop_node(0)\n@@ -146,11 +150,11 @@ def run_test (self):\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n-        self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        self.nodes[0].importwallet(wallet_unenc_dump)\n \n         # Now check IsMine is true\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':\n-    WalletDumpTest().main ()\n+    WalletDumpTest().main()"
      }
    ]
  },
  {
    "sha": "3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk2YTNiYjdmYzBhNmM0N2I2MGM3OWU5NjhkYmY4MTc1ZDZiNzE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-23T01:04:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-07T04:28:08Z"
      },
      "message": "Generalize ConvertBits",
      "tree": {
        "sha": "b62ed5ee923c4c61e8023a91674f8a6e7ab70034",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b62ed5ee923c4c61e8023a91674f8a6e7ab70034"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0cc492767997103702aadde765090b326ba065d2",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "patch": "@@ -43,14 +43,14 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     std::string operator()(const WitnessV0KeyHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -60,7 +60,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n             return {};\n         }\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -94,7 +94,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n             if (version == 0) {\n                 {\n                     WitnessV0KeyHash keyid;"
      },
      {
        "sha": "1c9cca90b2f110be44ae57cb558a2a4fee9bf8f0",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "patch": "@@ -151,7 +151,7 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>\n-bool ConvertBits(O& out, I it, I end) {\n+bool ConvertBits(const O& outfn, I it, I end) {\n     size_t acc = 0;\n     size_t bits = 0;\n     constexpr size_t maxv = (1 << tobits) - 1;\n@@ -161,12 +161,12 @@ bool ConvertBits(O& out, I it, I end) {\n         bits += frombits;\n         while (bits >= tobits) {\n             bits -= tobits;\n-            out.push_back((acc >> bits) & maxv);\n+            outfn((acc >> bits) & maxv);\n         }\n         ++it;\n     }\n     if (pad) {\n-        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+        if (bits) outfn((acc << (tobits - bits)) & maxv);\n     } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "3b26b6af728d5ac538d333a1275073c7c5a012e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjI2YjZhZjcyOGQ1YWM1MzhkMzMzYTEyNzUwNzNjN2M1YTAxMmUx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-03-06T20:22:50Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-03-07T13:08:20Z"
      },
      "message": "qt: Remove TransactionTableModel::TxIDRole",
      "tree": {
        "sha": "3e667109c50ba8445532cd2e404664e63d0d31c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e667109c50ba8445532cd2e404664e63d0d31c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b26b6af728d5ac538d333a1275073c7c5a012e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b26b6af728d5ac538d333a1275073c7c5a012e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b26b6af728d5ac538d333a1275073c7c5a012e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b26b6af728d5ac538d333a1275073c7c5a012e1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20e3b9a485fd6b23785c5caa49d01ea49fdc8bcf"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c7bd0bf033514f2a3aedc798f4c3695bbd2eccf8",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -240,7 +240,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (wtx.mapValue.count(\"comment\") && !wtx.mapValue[\"comment\"].empty())\n         strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n \n-    strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxID() + \"<br>\";\n+    strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxHash() + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction virtual size\") + \":</b> \" + QString::number(GetVirtualTransactionSize(*wtx.tx)) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";"
      },
      {
        "sha": "7bf4d3351c6c0a3df597df6dc3b3f01bdc47d9cd",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -14,7 +14,7 @@ TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *pa\n     ui(new Ui::TransactionDescDialog)\n {\n     ui->setupUi(this);\n-    setWindowTitle(tr(\"Details for %1\").arg(idx.data(TransactionTableModel::TxIDRole).toString()));\n+    setWindowTitle(tr(\"Details for %1\").arg(idx.data(TransactionTableModel::TxHashRole).toString()));\n     QString desc = idx.data(TransactionTableModel::LongDescriptionRole).toString();\n     ui->detailText->setHtml(desc);\n }"
      },
      {
        "sha": "a702461f7a1aeb841365e739538a7f7af7170546",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -36,7 +36,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     bool involvesWatchAddress = index.data(TransactionTableModel::WatchonlyRole).toBool();\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n-    QString txid = index.data(TransactionTableModel::TxIDRole).toString();\n+    QString txid = index.data(TransactionTableModel::TxHashRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n "
      },
      {
        "sha": "75a75d1a084f84eedeb92e8e247e7037ce820531",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -254,7 +254,7 @@ bool TransactionRecord::statusUpdateNeeded() const\n     return status.cur_num_blocks != chainActive.Height() || status.needsUpdate;\n }\n \n-QString TransactionRecord::getTxID() const\n+QString TransactionRecord::getTxHash() const\n {\n     return QString::fromStdString(hash.ToString());\n }"
      },
      {
        "sha": "5321d05d157d0597158cd0280137f1364e37a2d2",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -129,7 +129,7 @@ class TransactionRecord\n     bool involvesWatchAddress;\n \n     /** Return the unique identifier for this transaction (part) */\n-    QString getTxID() const;\n+    QString getTxHash() const;\n \n     /** Return the output index of the subtransaction  */\n     int getOutputIndex() const;"
      },
      {
        "sha": "84800125fe3cbce76300667fa7a65a01dc11e0dc",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -615,10 +615,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n         return qint64(rec->credit + rec->debit);\n-    case TxIDRole:\n-        return rec->getTxID();\n     case TxHashRole:\n-        return QString::fromStdString(rec->hash.ToString());\n+        return rec->getTxHash();\n     case TxHexRole:\n         return priv->getTxHex(rec);\n     case TxPlainTextRole:"
      },
      {
        "sha": "781874d16010ea2326510d4dbcb7f7510f08bf6d",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -56,8 +56,6 @@ class TransactionTableModel : public QAbstractTableModel\n         LabelRole,\n         /** Net amount of transaction */\n         AmountRole,\n-        /** Unique identifier */\n-        TxIDRole,\n         /** Transaction hash */\n         TxHashRole,\n         /** Transaction data, hex-encoded */"
      },
      {
        "sha": "26391452da3291c317e204892e3e04392cb2bd21",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b26b6af728d5ac538d333a1275073c7c5a012e1/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "patch": "@@ -371,7 +371,7 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);\n     writer.addColumn(tr(\"Address\"), 0, TransactionTableModel::AddressRole);\n     writer.addColumn(BitcoinUnits::getAmountColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedAmountRole);\n-    writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n+    writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxHashRole);\n \n     if(!writer.write()) {\n         Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n@@ -455,7 +455,7 @@ void TransactionView::copyAmount()\n \n void TransactionView::copyTxID()\n {\n-    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxIDRole);\n+    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxHashRole);\n }\n \n void TransactionView::copyTxHex()"
      }
    ]
  },
  {
    "sha": "8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWUwODEyMGRlMGI2NzY1ZDhiOTA4MWUwNmY3NDNlMTU2NTNmOGU0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T22:17:48Z"
      },
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2018-03-07T13:31:30Z"
      },
      "message": "Add address filtering to listreceivedbyaddress",
      "tree": {
        "sha": "048c76498c89192e350b3f71fd2b645a0d5c173d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/048c76498c89192e350b3f71fd2b645a0d5c173d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee08120de0b6765d8b9081e06f743e15653f8e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f13d756cdd9445d1478a70c5387df2a444045f6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f13d756cdd9445d1478a70c5387df2a444045f6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f13d756cdd9445d1478a70c5387df2a444045f6e"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 39,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0eeb3f98b34acc65d6adeba7c64458894a1e94ba",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "patch": "@@ -43,6 +43,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n+    { \"listreceivedbyaddress\", 3, \"address_filter\" },\n     { \"listreceivedbyaccount\", 0, \"minconf\" },\n     { \"listreceivedbyaccount\", 1, \"include_empty\" },\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },"
      },
      {
        "sha": "dfa8546076be5e3f2d6b1f4b9b62c15e143d9364",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 9,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ee08120de0b6765d8b9081e06f743e15653f8e4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "patch": "@@ -1403,6 +1403,16 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         if(params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n+    bool has_filtered_address = false;\n+    CTxDestination filtered_address = CNoDestination();\n+    if (!fByAccounts && params.size() > 3) {\n+        if (!IsValidDestinationString(params[3].get_str())) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"address_filter parameter was invalid\");\n+        }\n+        filtered_address = DecodeDestination(params[3].get_str());\n+        has_filtered_address = true;\n+    }\n+\n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n@@ -1421,6 +1431,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n+            if (has_filtered_address && !(filtered_address == address)) {\n+                continue;\n+            }\n+\n             isminefilter mine = IsMine(*pwallet, address);\n             if(!(mine & filter))\n                 continue;\n@@ -1437,10 +1451,24 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     // Reply\n     UniValue ret(UniValue::VARR);\n     std::map<std::string, tallyitem> mapAccountTally;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n-        const CTxDestination& dest = item.first;\n-        const std::string& strAccount = item.second.name;\n-        std::map<CTxDestination, tallyitem>::iterator it = mapTally.find(dest);\n+\n+    // Create mapAddressBook iterator\n+    // If we aren't filtering, go from begin() to end()\n+    auto start = pwallet->mapAddressBook.begin();\n+    auto end = pwallet->mapAddressBook.end();\n+    // If we are filtering, find() the applicable entry\n+    if (has_filtered_address) {\n+        start = pwallet->mapAddressBook.find(filtered_address);\n+        if (start != end) {\n+            end = std::next(start);\n+        }\n+    }\n+\n+    for (auto item_it = start; item_it != end; ++item_it)\n+    {\n+        const CTxDestination& address = item_it->first;\n+        const std::string& strAccount = item_it->second.name;\n+        auto it = mapTally.find(address);\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n@@ -1466,7 +1494,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n                 obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"address\",       EncodeDestination(address));\n             obj.pushKV(\"account\",       strAccount);\n             obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n             obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n@@ -1511,15 +1539,15 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n+            \"listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n-\n+            \"4. address_filter    (string, optional) If present, only return information on this address.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1541,6 +1569,7 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n             + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n         );\n \n     ObserveSafeMode();\n@@ -3837,7 +3866,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },"
      }
    ]
  },
  {
    "sha": "f087613719026bcd5cba95ec64c19361fcc71ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDg3NjEzNzE5MDI2YmNkNWNiYTk1ZWM2NGMxOTM2MWZjYzcxZWNm",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2017-01-09T22:18:17Z"
      },
      "committer": {
        "name": "nicolas.dorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2018-03-07T13:31:31Z"
      },
      "message": "Add tests of listreceivedbyaddress address filtering",
      "tree": {
        "sha": "f4f12b5a3faa7f2f01626da81c29f28e972eb7ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f12b5a3faa7f2f01626da81c29f28e972eb7ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f087613719026bcd5cba95ec64c19361fcc71ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f087613719026bcd5cba95ec64c19361fcc71ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f087613719026bcd5cba95ec64c19361fcc71ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f087613719026bcd5cba95ec64c19361fcc71ecf/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ee08120de0b6765d8b9081e06f743e15653f8e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ee08120de0b6765d8b9081e06f743e15653f8e4"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "01c9899c7157b6b75587f8948a35c567c3b8f353",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f087613719026bcd5cba95ec64c19361fcc71ecf/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f087613719026bcd5cba95ec64c19361fcc71ecf/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=f087613719026bcd5cba95ec64c19361fcc71ecf",
        "patch": "@@ -45,10 +45,44 @@ def run_test(self):\n         assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n         # Empty Tx\n-        addr = self.nodes[1].getnewaddress()\n+        empty_addr = self.nodes[1].getnewaddress()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n-                            {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+                            {\"address\": empty_addr},\n+                            {\"address\": empty_addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        #Test Address filtering\n+        #Only on addr\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True, address_filter=addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Error on invalid address\n+        assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n+        #Another address receive money\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 2) #Right now 2 entries\n+        other_addr = self.nodes[1].getnewaddress()\n+        txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        #Same test as above should still pass\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":11, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Same test as above but with other_addr should still pass\n+        expected = {\"address\":other_addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":1, \"txids\":[txid2,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_array_result(res, {\"address\":other_addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Should be two entries though without filter\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 3) #Became 3 entries\n+\n+        #Not on random addr\n+        other_addr = self.nodes[0].getnewaddress() # note on node[0]! just a random addr\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_equal(len(res), 0)\n \n         self.log.info(\"getreceivedbyaddress Test\")\n "
      }
    ]
  },
  {
    "sha": "8a709fba9bfa2777561bd5b139a0852768ecb940",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTcwOWZiYTliZmEyNzc3NTYxYmQ1YjEzOWEwODUyNzY4ZWNiOTQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T13:36:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T13:36:24Z"
      },
      "message": "Merge #12619: doc: Give hint about gitian not able to download\n\n08e0855b9 Give hint about gitian not able to download (kallewoof)\n\nPull request description:\n\n  Gitian fails to perform downloads right now on my set up. This can be circumvented by first checking out the tag being built and then doing the depends download step before running `gbuild`.\n\n  This should of course be fixed in gitian, but having this note until it's fixed is definitely useful.\n\nTree-SHA512: ae9d0eb44ecfdae44d35aecc6e5fd6db7d9e95b8e0badc76a1d9aaf8fe70bc00a2914dfcb4f516d030560835af411515ca13736ebf8b49b7040b340457882779",
      "tree": {
        "sha": "864460c6d5e299f6997fed981ea2e5db29d4b1c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/864460c6d5e299f6997fed981ea2e5db29d4b1c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a709fba9bfa2777561bd5b139a0852768ecb940",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJan+rYAAoJEB5K7WKYbNJdomUH/ROdYSB4ayTQc1D1pUJrlLcn\nHrlWJPYDzGjBlf77i89Yb3Wv054DxWMwQYM8UzeGq3Wv9dcNvCFcQtHt8ZhUUJnF\nH4H+SE67p3P4fgBznDtae/m40bfKezhRTnIV4HUYeNzvUH5wxX4j8VsYU+5bkvTk\ndg4EUw6sX0e/3YUePmEwa5c/UGDMuNgxPN7PGFf8EV3f+ZOFhIpfn56qDnczPuCZ\nwaKPe1jhV41a/WmsyvlSUnxqg2W3y2SDoF+6zNRgkpKAw6TCo2c6s+GAMUCgeZe7\nvQU2gMc7/B2dF7MzP5h9ewe9+QOSArYk0t8GfQ1s9v0s1ZCwHxFcccc075mhxx8=\n=DR79\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIC9aBAylAuXgPETOtKayA65H3rxXetIBAE7mo+hy9CQzCP/wEE8N0I0lKbxS\ngm7A9qNTeu0I8CCjxFglCBk24zrgg4stkaZ4Cuafyup+3l5OPMxuAbIJiAjwIJ1o\nA/mwWV3kmw4dh4tQHrGoF9A03bY9gTIqD950QAoRCPEEWp/q3fAIsstRRR8PSqkA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BCEjPxbZM5n6yHLKr1Lhyy2CPAgy5zdJrM2nniVVpL9w5f4XXslFEB4\n+UM2PpU1Nmdj274I8CDeEJlE1xs1gFv9OsfN6VPaQ17ss3LSB0oKdCElgOan2wjx\nBFqf6t3wCH1BePXYJHbdAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxl\nbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEJU9N2Yse9AIX971Pn48mukI8SD1YkAt\nDY9220j4ou/cCGAPuKD9nMxW37qQZezN4ftMvQjxBFqf6t3wCC1xNO9ITpwPAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 864460c6d5e299f6997fed981ea2e5db29d4b1c4\nparent b225010a808d475cbb53aeed484295f8dc8751c4\nparent 08e0855b967fa3e28577503815f553f13915f722\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520429781 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520429784 +0100\n\nMerge #12619: doc: Give hint about gitian not able to download\n\n08e0855b9 Give hint about gitian not able to download (kallewoof)\n\nPull request description:\n\n  Gitian fails to perform downloads right now on my set up. This can be circumvented by first checking out the tag being built and then doing the depends download step before running `gbuild`.\n\n  This should of course be fixed in gitian, but having this note until it's fixed is definitely useful.\n\nTree-SHA512: ae9d0eb44ecfdae44d35aecc6e5fd6db7d9e95b8e0badc76a1d9aaf8fe70bc00a2914dfcb4f516d030560835af411515ca13736ebf8b49b7040b340457882779\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a709fba9bfa2777561bd5b139a0852768ecb940",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a709fba9bfa2777561bd5b139a0852768ecb940",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a709fba9bfa2777561bd5b139a0852768ecb940/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b225010a808d475cbb53aeed484295f8dc8751c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b225010a808d475cbb53aeed484295f8dc8751c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b225010a808d475cbb53aeed484295f8dc8751c4"
      },
      {
        "sha": "08e0855b967fa3e28577503815f553f13915f722",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08e0855b967fa3e28577503815f553f13915f722",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08e0855b967fa3e28577503815f553f13915f722"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a988c74ba545e516f2c9cfba1a8321a90111ce05",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a709fba9bfa2777561bd5b139a0852768ecb940/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a709fba9bfa2777561bd5b139a0852768ecb940/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=8a709fba9bfa2777561bd5b139a0852768ecb940",
        "patch": "@@ -93,7 +93,9 @@ Create the OS X SDK tarball, see the [OS X readme](README_osx.md) for details, a\n \n ### Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, Gitian will fetch source files as needed. To cache them ahead of time:\n+NOTE: Gitian is sometimes unable to download files. If you have errors, try the step below.\n+\n+By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in bitcoin, then:\n \n     pushd ./gitian-builder\n     make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common"
      }
    ]
  },
  {
    "sha": "0f7167989d60d91ed47e160a58685771d49aa508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjcxNjc5ODlkNjBkOTFlZDQ3ZTE2MGE1ODY4NTc3MWQ0OWFhNTA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T13:51:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T13:52:42Z"
      },
      "message": "Merge #12482: [tests] bind functional test nodes to 127.0.0.1\n\nb156ff7c3 [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Replaces #12200 which broke `rpc_bind.py`.\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To prevent binding to `127.0.0.1`, set `self.bind_to_localhost_only = False`.\n\n  cc @jnewbery\n\nTree-SHA512: 5e700124c91bd0cbdee83ca44910071d71d61d8842334755b685d14fbff6454d75de1ea7de67340370386f58b41361e80e90bb4dca5c4d5992f9d2b27985f999",
      "tree": {
        "sha": "a4e08a510c1200eaf6107bcafe14e3246b050d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a4e08a510c1200eaf6107bcafe14e3246b050d88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f7167989d60d91ed47e160a58685771d49aa508",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJan+6rAAoJEB5K7WKYbNJdD38IALfYS5+BAF0l8y8TajNyt68s\nEWD1gmGhZNNmbC9QnW7IyfR9qaXv6/GF4dHdP6i8iFZNWMr5WAmHaDLFk/byFVfJ\ngzfjzyLtOS3Neim8ltTYZiJUKYFvJ9kF0WX3tQecXL94tb648bZIEy4uebqEUjEa\nVbYDI08azvjpExigvzNN7rDwWq/6U7ZrJQkO1fqBJwImzn5wDh2VppYSQ4+3A2/A\naPHJYIUDG6vvDb4698ts/MFXXh5SGpJ1WHkrCvS4bfV1MC5Y3O8C7SY0YUTz5+69\nyOMlNWcOSA7qaUIYzWQkXBL/PKlOlTyHhth1OlzQ/8jgsXUeMG1gNYChlJ3uU24=\n=cI9q\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwICMpE4vDWPdlY2/xx0SGL9jSmr8rb7zaQwBIXUrPXOZnCP/wEONjIhdlnrhP\nwPvHSIxQjJcI8QRan+6s8AhUyOFjUZW+NQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEO1/iTom4qXFS8DsG0zD\nKbwI8CCEU2fqDqA2TtFHnOBbNzjU+R0lyWvxb2Po82CEJ8r4NgjxBFqf7qzwCISV\nqII9FbOLAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmfwEPyPJJIrwfW+H7X4DHToHTAI8QRan+6s8AghyQNtpp2i\n5wCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxs\nLmNvbQ==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a4e08a510c1200eaf6107bcafe14e3246b050d88\nparent 8a709fba9bfa2777561bd5b139a0852768ecb940\nparent b156ff7c30175f5d23bde97a56a2c34af2196466\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520430718 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520430762 +0100\n\nMerge #12482: [tests] bind functional test nodes to 127.0.0.1\n\nb156ff7c3 [tests] bind functional test nodes to 127.0.0.1 (Sjors Provoost)\n\nPull request description:\n\n  Replaces #12200 which broke `rpc_bind.py`.\n\n  Prevents OSX firewall allow-this-application-to-accept-inbound-connections permission popups and is generally safer.\n\n  To prevent binding to `127.0.0.1`, set `self.bind_to_localhost_only = False`.\n\n  cc @jnewbery\n\nTree-SHA512: 5e700124c91bd0cbdee83ca44910071d71d61d8842334755b685d14fbff6454d75de1ea7de67340370386f58b41361e80e90bb4dca5c4d5992f9d2b27985f999\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f7167989d60d91ed47e160a58685771d49aa508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f7167989d60d91ed47e160a58685771d49aa508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f7167989d60d91ed47e160a58685771d49aa508/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a709fba9bfa2777561bd5b139a0852768ecb940",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a709fba9bfa2777561bd5b139a0852768ecb940",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a709fba9bfa2777561bd5b139a0852768ecb940"
      },
      {
        "sha": "b156ff7c30175f5d23bde97a56a2c34af2196466",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b156ff7c30175f5d23bde97a56a2c34af2196466",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b156ff7c30175f5d23bde97a56a2c34af2196466"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 21,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d43c2cd5d088856db5f7d27a2102c11c10d4c6b8",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -14,6 +14,7 @@\n class RPCBindTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n+        self.bind_to_localhost_only = False\n         self.num_nodes = 1\n \n     def setup_network(self):"
      },
      {
        "sha": "86c1150abd323aa2cdb9808f9fa74857773fc6e9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -63,6 +63,7 @@ def __init__(self):\n         self.nodes = []\n         self.mocktime = 0\n         self.supports_cli = False\n+        self.bind_to_localhost_only = True\n         self.set_test_params()\n \n         assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n@@ -215,15 +216,19 @@ def run_test(self):\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n-\n+        if self.bind_to_localhost_only:\n+            extra_confs = [[\"bind=127.0.0.1\"]] * num_nodes\n+        else:\n+            extra_confs = [[]] * num_nodes\n         if extra_args is None:\n             extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n+        assert_equal(len(extra_confs), num_nodes)\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, rpchost=rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -395,7 +400,7 @@ def _initialize_chain(self):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_conf=[\"bind=127.0.0.1\"], extra_args=[],rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "86e44e4c970e8babef9f140a0527a9e9b1ca01c9",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -16,6 +16,7 @@\n \n from .authproxy import JSONRPCException\n from .util import (\n+    append_config,\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n@@ -42,7 +43,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir, use_cli=False):\n+    def __init__(self, i, dirname, rpchost, timewait, binary, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n@@ -57,6 +58,8 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n             self.binary = binary\n         self.stderr = stderr\n         self.coverage_dir = coverage_dir\n+        if extra_conf != None:\n+            append_config(dirname, i, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n         # For those callers that need more flexibity, they can just set the args property directly.\n         # Note that common args are set in the config file (see initialize_datadir)"
      },
      {
        "sha": "a4b8d5af023a9a524c6d33dc15f38c71f4789f51",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -300,6 +300,12 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n+def append_config(dirname, n, options):\n+    datadir = get_datadir_path(dirname, n)\n+    with open(os.path.join(datadir, \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+        for option in options:\n+            f.write(option + \"\\n\")\n+\n def get_auth_cookie(datadir):\n     user = None\n     password = None"
      },
      {
        "sha": "ce861ef012dcae85251b13c0dc0b39222d327705",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -84,7 +84,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "bfd46384815cbabcf2505afc0dc97e70082948c7",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f7167989d60d91ed47e160a58685771d49aa508/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=0f7167989d60d91ed47e160a58685771d49aa508",
        "patch": "@@ -124,7 +124,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args=extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      }
    ]
  },
  {
    "sha": "92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmZhNmQyMjMyYTlkMDRkMjNmNDg4N2VkYWUwZmEwNGJkZDdiYTc4",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-07T14:57:44Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-07T14:57:44Z"
      },
      "message": "[gitian] Re-order keys by owner first name alphabetic order",
      "tree": {
        "sha": "0a3d5448ec7fc9692c881d1445408cc608064e23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a3d5448ec7fc9692c881d1445408cc608064e23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqf/ekACgkQV692LbM1\nMyIJIA//dDk4lTd1+NlfZa8aBQR8mNfiO5dDcmtgC9D7K0zAzvaPkvYeJ6mV7KsA\nApCqfs2Yi9GPz8DM65PL385UMvdy46uSC4pWhF06A+4uDkE+5kl9qF27Y42L9HcY\nqbIt0js9rjLq7s89vx7iwmWOvx5xkEITD6nazDAyxyUPKAI1HaC42Ur/ivrsER0O\nz1Bjf3PGWnVJO4k2pzabkhTnvM6wTB9XVrZOfG8hyijAWo3mm2tFhNb8+UGJPNVo\n3J+uOXu/3EnMDwwR2q4DkQ3eCphplQHcm8FDa3k6TU7cTngeIP+i4fuJY/TWjQ8M\nwxiDo153YwZ35PTMtHQPy2tnABkYDYxuJYRxzeWt/9XSlxwZAECbaxpQLwRif5kk\nQ04BERHZdteREkAKxab9xPulyGTeyjynEIN2ux1cZ75VYu9JtqHOTgvU7Vg4Qc3S\nx3BVx5m/QTDwKAEmLQ9aRVSsT3xwSdwvSb/cLrbUrK2WQ4s9feh/bXfh/20F7F9N\nOPj6arDiWNNBfLO83rE99pRw49jVCSxqyR0tKIY3OhPtyDDf2Q87eGyKI/V0pvJ7\nBlur0Zt9z7kDZAt7ySlPerK33yd4eHAHew1HLDp3BNh2VrazThJFwaqAj4LPNtWr\n2mTVDjnrre+T8Yh2oZ5BDC47kMo+TK3ywfi14JMQqJCSxCSghyw=\n=FHw/\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a3d5448ec7fc9692c881d1445408cc608064e23\nparent 0f7167989d60d91ed47e160a58685771d49aa508\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1520434664 -0500\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1520434664 -0500\n\n[gitian] Re-order keys by owner first name alphabetic order\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f7167989d60d91ed47e160a58685771d49aa508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f7167989d60d91ed47e160a58685771d49aa508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f7167989d60d91ed47e160a58685771d49aa508"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "b3df6ef794056863430aab249f4450877f35353a",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
        "patch": "@@ -1,29 +1,29 @@\n 617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n-152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n-07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n 912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n-E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n-71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan\n E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n-37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n+77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n 133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n-77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n-79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      }
    ]
  },
  {
    "sha": "e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjkwY2Y0Yjg2MGExOTgxMGRlOGY2YWM2NDVmYzg2ZDJmN2M1NmI0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-07T14:57:57Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-03-07T14:57:57Z"
      },
      "message": "[gitian] Add kallewoof key for signing",
      "tree": {
        "sha": "27d1eaebb6daac9e7b3f711a48351ab9333303b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27d1eaebb6daac9e7b3f711a48351ab9333303b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlqf/fUACgkQV692LbM1\nMyKiXQ/+KSyLLeBGcGXvaUTYzMB+FbxrSRO8LW964yaLQsWhjeq5DsQVDNM4UUne\nbKrmPmGD977BruI+4HnKwhxNZL2EqQOGSq0njC6+T2OzoMMxCQvR0axUM5aYAdaW\nPfO7L2CegZodDdtCGihoF8J3HYTnEw0nnSZbjV1+QD5f8ifUSaTey/xNr1MgnP0v\nSo7pfc5QEKchTK7d9n8Ue554cLYTV4lMd2A81A0Zz4femgEJ627qeHGQ8v/T5V3G\nSO/Q4rdmzl/CGiyo2g05V+vnosq7AiTfMe14VAzReaH8cBUoNer21hM/E/emIIqH\nq852+QQtK2omQV+AgJi9juVM2C+Q3NDWtv6aIJlalJPRNom1lMcn0yT4jXb/TFz1\nir4L3khzJLJhE8nqTs6dR9XMW8WN/KyoXZFDy8Rr26VMHOGS3PFLMfJbWXyKtmpx\nI3nO3ScwJYl6XR1dXOInLxq6IdzQGb+1A1X2w2WquOrHwdK8BJJlb9qs45Hprmph\nyHAMfDjM0jUo/nkzGAoxQZxFwRdXZan1ozVDmDD8JnvZj+4yluBc4uyvIZgDYdaU\n9L2RNsiwhYQBseh1NadnHDKyyKyG+R94fh/jJSi7teBtyAXxL0jE76L7rY12hSn/\nzYnDm2XsDm8pNaBl4wU77S9ulxRoryZTup4q2abDPfkC+fKj0bY=\n=s2+Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 27d1eaebb6daac9e7b3f711a48351ab9333303b8\nparent 92fa6d2232a9d04d23f4887edae0fa04bdd7ba78\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1520434677 -0500\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1520434677 -0500\n\n[gitian] Add kallewoof key for signing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e690cf4b860a19810de8f6ac645fc86d2f7c56b4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fa6d2232a9d04d23f4887edae0fa04bdd7ba78"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "593fba1d0915fb8ad7e3c246e14f5dcbf4e5b1de",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e690cf4b860a19810de8f6ac645fc86d2f7c56b4/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e690cf4b860a19810de8f6ac645fc86d2f7c56b4/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
        "patch": "@@ -12,6 +12,7 @@ D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n+C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n 07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)"
      }
    ]
  },
  {
    "sha": "3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmEyNGJiMjE3YjIwN2Q5NjRhY2Q0ZGI0Y2I1ZGYwODVhN2QzY2U1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:00:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:00:46Z"
      },
      "message": "Merge #12204: Fix overly eager BIP30 bypass\n\n5b8b38775 Fix overly eager BIP30 bypass (Alex Morcos)\n\nPull request description:\n\n  In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\n\n  h/t @sdaftuar\n\nTree-SHA512: 8f798c3f203432fd4ae1c1c08bd6967b4a5ec2064ed5f6a7dcf3bff34ea830952838dd4ff70d70b5080cf4644f601e5526b60456c08f43789e4aae05621d9d6b",
      "tree": {
        "sha": "814c9b55cbcaaf192842d9a340d84e48f5030080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/814c9b55cbcaaf192842d9a340d84e48f5030080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJan/6eAAoJEB5K7WKYbNJdGRQH/1czsM7srYAX348Bhg7NAKbb\nwmLnbx0a1tQIGf6TySgre0IQIHdtG702nMazP0PeDibFOaqNO0g666aL03Gd+diY\nIfkvfSOG9FiC7Rwj2wGXSTRZWzRRTx9Ui3mRIpetNXeP+3oHce/Uj3EiT9JPMZC4\nagr0wONBQf01NyusibTMEXKoq1pYs4DwkAjWCwci1RuJK8Xx1jqfZylTZsSavJpP\n2RW+uQrfucUSYLqKjolAA/3VCyVhUZ/CwaPYz9UJio01igw/vrWj75P5ZLDrD2xR\nHqpP6D5tKRDgfWLB/3usjBZ95jpIu8/VzzE9bhVpzIerm++Ipy5KGRwht93PyFY=\n=OxG8\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIDwXN0iSr0uzAyXc9aZW/4papoB0t/P4BNvZEgluYHqFCP/wECmbYT/pEw/a\nvbBOIWYncvkI8CDdH1iVZfH0TZo0ZL7jHEkUIVSpjt+Kt960T/5k8t5+LgjxILGE\niDIy5aCY9M39T+UirqPCx07qTLv0L2jVGcWIvchUCPEgcGaIyrnp0CE2YmUnxOKH\nGCI8YzuV9mFW/4giKffBVaYI8CDnKpM98i0l0je7v8uGDnNc7RA8bXJuOyIDDBNd\nPEVcBgjxBFqf/qDwCBLUV3XyaSC5AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t//AQQrcjhOhSthefvZTdO4DOoAjwIBMW\nRkruv9G8s2y/5RHz6uglh5+ObDPqAZTqv96/1SVQCPAgiRYTtOB+xRo1op+UH/ZE\nE+5gr+wGQ/XtK/9iChtSAPgI8CDI+101uNNVr+pvGkfFZOR27a5Id4OhcQ7KWlNX\nGQY8uAjxBFqf/qDwCIk/Z5GBqEYiAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDDjsADU2MrkUEwSDp1XiFuCPAg\nGFTLtBVsRuHk+aY0NDR/wVJVNFGVByy8J+ZMavJW5FEI8CDf6pim77UB3DTG4Ez+\nMcXZBrJILD9sHsIxP98bFH2zlgjwIN41YKltnPRXGsDYa9ix+lQho+2BCppRR6DJ\nMum2oKZVCPEEWp/+ofAIYCrgfOX0UucAg9/jDS75DI4uLWh0dHBzOi8vYWxpY2Uu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 814c9b55cbcaaf192842d9a340d84e48f5030080\nparent 0f7167989d60d91ed47e160a58685771d49aa508\nparent 5b8b387752e8c493a8e87795ae6ddb78b45b1a5d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520434835 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520434846 +0100\n\nMerge #12204: Fix overly eager BIP30 bypass\n\n5b8b38775 Fix overly eager BIP30 bypass (Alex Morcos)\n\nPull request description:\n\n  In #6931 we introduced a possible consensus breaking change by misunderstanding how completely BIP 34 obviated the need for BIP 30.  Unfixed, this could break consensus after block height about 1.9M.  Explained in code comment.\n\n  h/t @sdaftuar\n\nTree-SHA512: 8f798c3f203432fd4ae1c1c08bd6967b4a5ec2064ed5f6a7dcf3bff34ea830952838dd4ff70d70b5080cf4644f601e5526b60456c08f43789e4aae05621d9d6b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa24bb217b207d964acd4db4cb5df085a7d3ce5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f7167989d60d91ed47e160a58685771d49aa508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f7167989d60d91ed47e160a58685771d49aa508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f7167989d60d91ed47e160a58685771d49aa508"
      },
      {
        "sha": "5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b8b387752e8c493a8e87795ae6ddb78b45b1a5d"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 54,
      "deletions": 1
    },
    "files": [
      {
        "sha": "51e40c17b5812fdb90ad6da1856e0245356404c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 1,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fa24bb217b207d964acd4db4cb5df085a7d3ce5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fa24bb217b207d964acd4db4cb5df085a7d3ce5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
        "patch": "@@ -1856,12 +1856,65 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n     // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n     // duplicate transactions descending from the known pairs either.\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n+\n+    // BIP34 requires that a block at height X (block X) has its coinbase\n+    // scriptSig start with a CScriptNum of X (indicated height X).  The above\n+    // logic of no longer requiring BIP30 once BIP34 activates is flawed in the\n+    // case that there is a block X before the BIP34 height of 227,931 which has\n+    // an indicated height Y where Y is greater than X.  The coinbase for block\n+    // X would also be a valid coinbase for block Y, which could be a BIP30\n+    // violation.  An exhaustive search of all mainnet coinbases before the\n+    // BIP34 height which have an indicated height greater than the block height\n+    // reveals many occurrences. The 3 lowest indicated heights found are\n+    // 209,921, 490,897, and 1,983,702 and thus coinbases for blocks at these 3\n+    // heights would be the first opportunity for BIP30 to be violated.\n+\n+    // The search reveals a great many blocks which have an indicated height\n+    // greater than 1,983,702, so we simply remove the optimization to skip\n+    // BIP30 checking for blocks at height 1,983,702 or higher.  Before we reach\n+    // that block in another 25 years or so, we should take advantage of a\n+    // future consensus change to do a new and improved version of BIP34 that\n+    // will actually prevent ever creating any duplicate coinbases in the\n+    // future.\n+    static constexpr int BIP34_IMPLIES_BIP30_LIMIT = 1983702;\n+\n+    // There is no potential to create a duplicate coinbase at block 209,921\n+    // because this is still before the BIP34 height and so explicit BIP30\n+    // checking is still active.\n+\n+    // The final case is block 176,684 which has an indicated height of\n+    // 490,897. Unfortunately, this issue was not discovered until about 2 weeks\n+    // before block 490,897 so there was not much opportunity to address this\n+    // case other than to carefully analyze it and determine it would not be a\n+    // problem. Block 490,897 was, in fact, mined with a different coinbase than\n+    // block 176,684, but it is important to note that even if it hadn't been or\n+    // is remined on an alternate fork with a duplicate coinbase, we would still\n+    // not run into a BIP30 violation.  This is because the coinbase for 176,684\n+    // is spent in block 185,956 in transaction\n+    // d4f7fbbf92f4a3014a230b2dc70b8058d02eb36ac06b4a0736d9d60eaa9e8781.  This\n+    // spending transaction can't be duplicated because it also spends coinbase\n+    // 0328dd85c331237f18e781d692c92de57649529bd5edf1d01036daea32ffde29.  This\n+    // coinbase has an indicated height of over 4.2 billion, and wouldn't be\n+    // duplicatable until that height, and it's currently impossible to create a\n+    // chain that long. Nevertheless we may wish to consider a future soft fork\n+    // which retroactively prevents block 490,897 from creating a duplicate\n+    // coinbase. The two historical BIP30 violations often provide a confusing\n+    // edge case when manipulating the UTXO and it would be simpler not to have\n+    // another edge case to deal with.\n+\n+    // testnet3 has no blocks before the BIP34 height with indicated heights\n+    // post BIP34 before approximately height 486,000,000 and presumably will\n+    // be reset before it reaches block 1,983,702 and starts doing unnecessary\n+    // BIP30 checking again.\n     assert(pindex->pprev);\n     CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n     fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n-    if (fEnforceBIP30) {\n+    // TODO: Remove BIP30 checking from block height 1,983,702 on, once we have a\n+    // consensus change that ensures coinbases at those heights can not\n+    // duplicate earlier coinbases.\n+    if (fEnforceBIP30 || pindex->nHeight >= BIP34_IMPLIES_BIP30_LIMIT) {\n         for (const auto& tx : block.vtx) {\n             for (size_t o = 0; o < tx->vout.size(); o++) {\n                 if (view.HaveCoin(COutPoint(tx->GetHash(), o))) {"
      }
    ]
  },
  {
    "sha": "b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2VhOGNjYjdhZjQ3NTcwM2I5NzI0NmEyYmFmMmUxMDVkMjRkNmY5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-07T22:24:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-07T15:04:07Z"
      },
      "message": "Simplify Base32 and Base64 conversions",
      "tree": {
        "sha": "7d0f9685476bd35d332ebd7a43c0193bcb8c040d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0f9685476bd35d332ebd7a43c0193bcb8c040d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3296a3bb7fc0a6c47b60c79e968dbf8175d6b716"
      }
    ],
    "stats": {
      "total": 309,
      "additions": 62,
      "deletions": 247
    },
    "files": [
      {
        "sha": "c2dc511989e6e29b07c5dbcd2a18be97af5bb861",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -43,13 +43,15 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     std::string operator()(const WitnessV0KeyHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n+        data.reserve(33);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n+        data.reserve(53);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n@@ -60,6 +62,7 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n             return {};\n         }\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n+        data.reserve(1 + (id.length * 8 + 4) / 5);\n         ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n@@ -94,6 +97,7 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n+        data.reserve(((bech.second.size() - 1) * 5) / 8);\n         if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n             if (version == 0) {\n                 {"
      },
      {
        "sha": "1210c7a7eec46e82b61872b4e66f4cdb2af10cf6",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase32(vstrOut[i]);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "f785cede81db81b7c92595237f9a1c16447784be",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase64(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase64(strEnc);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "d1025fc7bf6b9236b5fc2a6e87ed87819fa92b72",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 243,
        "changes": 297,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ea8ccb7af475703b97246a2baf2e105d24d6f9/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "patch": "@@ -127,46 +127,11 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n-    std::string strRet;\n-    strRet.reserve((len+2)/3*4);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase64[enc >> 2];\n-                left = (enc & 3) << 4;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have two bits\n-                strRet += pbase64[left | (enc >> 4)];\n-                left = (enc & 15) << 2;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have four bits\n-                strRet += pbase64[left | (enc >> 6)];\n-                strRet += pbase64[enc & 63];\n-                mode = 0;\n-                break;\n-        }\n-    }\n-\n-    if (mode)\n-    {\n-        strRet += pbase64[left];\n-        strRet += '=';\n-        if (mode == 1)\n-            strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 2) / 3) * 4);\n+    ConvertBits<8, 6, true>([&](int v) { str += pbase64[v]; }, pch, pch + len);\n+    while (str.size() % 4) str += '=';\n+    return str;\n }\n \n std::string EncodeBase64(const std::string& str)\n@@ -193,68 +158,32 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve(strlen(p)*3/4);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode64_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 6\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 6 bits and keep 4\n-                  vchRet.push_back((left<<2) | (dec>>4));\n-                  left = dec & 15;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 4 bits and get 6, we keep 2\n-                 vchRet.push_back((left<<4) | (dec>>2));\n-                 left = dec & 3;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 2 bits and get 6\n-                 vchRet.push_back((left<<6) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode64_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 4n base64 characters processed: ok\n-                break;\n-\n-            case 1: // 4n+1 base64 character processed: impossible\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 4n+2 base64 characters processed: require '=='\n-                if (left || p[0] != '=' || p[1] != '=' || decode64_table[(unsigned char)p[2]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 3: // 4n+3 base64 characters processed: require '='\n-                if (left || p[0] != '=' || decode64_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 3) / 4);\n+    bool valid = ConvertBits<6, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 4 == 0 && p - q < 4;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase64(const std::string& str)\n@@ -267,59 +196,11 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n     static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n-    std::string strRet;\n-    strRet.reserve((len+4)/5*8);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase32[enc >> 3];\n-                left = (enc & 7) << 2;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have three bits\n-                strRet += pbase32[left | (enc >> 6)];\n-                strRet += pbase32[(enc >> 1) & 31];\n-                left = (enc & 1) << 4;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have one bit\n-                strRet += pbase32[left | (enc >> 4)];\n-                left = (enc & 15) << 1;\n-                mode = 3;\n-                break;\n-\n-            case 3: // we have four bits\n-                strRet += pbase32[left | (enc >> 7)];\n-                strRet += pbase32[(enc >> 2) & 31];\n-                left = (enc & 3) << 3;\n-                mode = 4;\n-                break;\n-\n-            case 4: // we have two bits\n-                strRet += pbase32[left | (enc >> 5)];\n-                strRet += pbase32[enc & 31];\n-                mode = 0;\n-        }\n-    }\n-\n-    static const int nPadding[5] = {0, 6, 4, 3, 1};\n-    if (mode)\n-    {\n-        strRet += pbase32[left];\n-        for (int n=0; n<nPadding[mode]; n++)\n-             strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 4) / 5) * 8);\n+    ConvertBits<8, 5, true>([&](int v) { str += pbase32[v]; }, pch, pch + len);\n+    while (str.size() % 8) str += '=';\n+    return str;\n }\n \n std::string EncodeBase32(const std::string& str)\n@@ -346,102 +227,32 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve((strlen(p))*5/8);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode32_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 5\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 5 bits and keep 2\n-                  vchRet.push_back((left<<3) | (dec>>2));\n-                  left = dec & 3;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 2 bits and keep 7\n-                 left = left << 5 | dec;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 7 bits and keep 4\n-                 vchRet.push_back((left<<1) | (dec>>4));\n-                 left = dec & 15;\n-                 mode = 4;\n-                 break;\n-\n-             case 4: // we have 4 bits, and keep 1\n-                 vchRet.push_back((left<<4) | (dec>>1));\n-                 left = dec & 1;\n-                 mode = 5;\n-                 break;\n-\n-             case 5: // we have 1 bit, and keep 6\n-                 left = left << 5 | dec;\n-                 mode = 6;\n-                 break;\n-\n-             case 6: // we have 6 bits, and keep 3\n-                 vchRet.push_back((left<<2) | (dec>>3));\n-                 left = dec & 7;\n-                 mode = 7;\n-                 break;\n-\n-             case 7: // we have 3 bits, and keep 0\n-                 vchRet.push_back((left<<5) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode32_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 8n base32 characters processed: ok\n-                break;\n-\n-            case 1: // 8n+1 base32 characters processed: impossible\n-            case 3: //   +3\n-            case 6: //   +6\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 8n+2 base32 characters processed: require '======'\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 4: // 8n+4 base32 characters processed: require '===='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 5: // 8n+5 base32 characters processed: require '==='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 7: // 8n+7 base32 characters processed: require '='\n-                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 5) / 8);\n+    bool valid = ConvertBits<5, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 8 == 0 && p - q < 8;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase32(const std::string& str)"
      }
    ]
  },
  {
    "sha": "4ca7c1e4ac60470a064f77cf309ec6316cc51769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2E3YzFlNGFjNjA0NzBhMDY0Zjc3Y2YzMDllYzYzMTZjYzUxNzY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:03:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:07:37Z"
      },
      "message": "Merge #9991: listreceivedbyaddress Filter Address\n\nf08761371 Add tests of listreceivedbyaddress address filtering (Jeremy Rubin)\n8ee08120d Add address filtering to listreceivedbyaddress (Jeremy Rubin)\n\nPull request description:\n\n  Supersede https://github.com/bitcoin/bitcoin/pull/9503 created by @JeremyRubin , I will maintain it.\n\nTree-SHA512: 2accaed493b7e1c2eb5cb5270180f100f8c718b6585b9574f294191c318dc622a79e42ac185300f291f82d3b2a6f1c00850b6b17e4ff2dbab94d71df695acbfe",
      "tree": {
        "sha": "e6da56a119e5f7919791d3572d40702353051d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6da56a119e5f7919791d3572d40702353051d41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ca7c1e4ac60470a064f77cf309ec6316cc51769",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoAA5AAoJEB5K7WKYbNJd5tIH/2CPJ+4cOqu1ZW0wreo6U6rN\nPrU7iyefTSyhk3454s6tYFcBSNYETSuzFvikGVtXcoThZyToxwsi1pAmf7+991Zo\nSIaSVRhPWj6GMXEr8VKe0laJbfwZSmMEW0r9FCBs4uUWqJbm3TiS0ZBwaBEuxu8C\nEgL03XcAi9B481z3D3wXxI8pHt+GPQvNMnO8dNAv8AVxi14yCYvJto05WKo3rTlQ\ncjaD90aoEgoMrzjahXKxkblzhOx7+c38AE7SPsQCRy+JncPAyyvxmpiz4fqiN9CJ\nE/O26HgzpcF3TOjMh+LWhk1cVk3nBB83jLsoUE6QQtdqAXSZPytG/07J8JHY3po=\n=MsmK\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMQZAKVbtO+4xR0HWXP8/dJyJrpLWAjME15OxQ/P5K4dCP/wEGq82WKuGybM\n7Oh3BboFJXEI8SBMMbgK+SNsEEGxhMz7dQeyMNXI8BuPtcCj90B/BqGosgjxBFqg\nADvwCJIs5Gde85ueAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQbgXd2O3SZUt1Ycrbntu3TgjwINqzLa6Xi+F2+Se2\ni45JcCr0tq28zP4oCTOGTxbV/kE9CPEEWqAAPPAIbeY1t4hWGlUAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEJW8\nAZ/YFwf3A1sT0ZxY1xsI8SBRJnPmVe0SxCUvm50XUYiJnHcjoEWFzD629AgKjv3t\nhAjwIBHKs6JcMQ6UdZaRxlpbhkUPVxDputq62oZ5FJxAt+80CPEgf+kaNZiXrEye\nu71f0s96QAe61EhHPl4TB/8hCE0gzVUI8QRaoAA78AhmIrfVHwQf3gCD3+MNLvkM\nji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e6da56a119e5f7919791d3572d40702353051d41\nparent 3fa24bb217b207d964acd4db4cb5df085a7d3ce5\nparent f087613719026bcd5cba95ec64c19361fcc71ecf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520435022 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520435257 +0100\n\nMerge #9991: listreceivedbyaddress Filter Address\n\nf08761371 Add tests of listreceivedbyaddress address filtering (Jeremy Rubin)\n8ee08120d Add address filtering to listreceivedbyaddress (Jeremy Rubin)\n\nPull request description:\n\n  Supersede https://github.com/bitcoin/bitcoin/pull/9503 created by @JeremyRubin , I will maintain it.\n\nTree-SHA512: 2accaed493b7e1c2eb5cb5270180f100f8c718b6585b9574f294191c318dc622a79e42ac185300f291f82d3b2a6f1c00850b6b17e4ff2dbab94d71df695acbfe\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca7c1e4ac60470a064f77cf309ec6316cc51769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca7c1e4ac60470a064f77cf309ec6316cc51769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca7c1e4ac60470a064f77cf309ec6316cc51769/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa24bb217b207d964acd4db4cb5df085a7d3ce5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa24bb217b207d964acd4db4cb5df085a7d3ce5"
      },
      {
        "sha": "f087613719026bcd5cba95ec64c19361fcc71ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f087613719026bcd5cba95ec64c19361fcc71ecf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f087613719026bcd5cba95ec64c19361fcc71ecf"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 76,
      "deletions": 12
    },
    "files": [
      {
        "sha": "0eeb3f98b34acc65d6adeba7c64458894a1e94ba",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ca7c1e4ac60470a064f77cf309ec6316cc51769/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ca7c1e4ac60470a064f77cf309ec6316cc51769/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4ca7c1e4ac60470a064f77cf309ec6316cc51769",
        "patch": "@@ -43,6 +43,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listreceivedbyaddress\", 0, \"minconf\" },\n     { \"listreceivedbyaddress\", 1, \"include_empty\" },\n     { \"listreceivedbyaddress\", 2, \"include_watchonly\" },\n+    { \"listreceivedbyaddress\", 3, \"address_filter\" },\n     { \"listreceivedbyaccount\", 0, \"minconf\" },\n     { \"listreceivedbyaccount\", 1, \"include_empty\" },\n     { \"listreceivedbyaccount\", 2, \"include_watchonly\" },"
      },
      {
        "sha": "457abec1bcc103ba93611cc0a3e05dbdc5a9e673",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 9,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ca7c1e4ac60470a064f77cf309ec6316cc51769/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ca7c1e4ac60470a064f77cf309ec6316cc51769/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4ca7c1e4ac60470a064f77cf309ec6316cc51769",
        "patch": "@@ -1403,6 +1403,16 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n         if(params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n+    bool has_filtered_address = false;\n+    CTxDestination filtered_address = CNoDestination();\n+    if (!fByAccounts && params.size() > 3) {\n+        if (!IsValidDestinationString(params[3].get_str())) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"address_filter parameter was invalid\");\n+        }\n+        filtered_address = DecodeDestination(params[3].get_str());\n+        has_filtered_address = true;\n+    }\n+\n     // Tally\n     std::map<CTxDestination, tallyitem> mapTally;\n     for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n@@ -1421,6 +1431,10 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n+            if (has_filtered_address && !(filtered_address == address)) {\n+                continue;\n+            }\n+\n             isminefilter mine = IsMine(*pwallet, address);\n             if(!(mine & filter))\n                 continue;\n@@ -1437,10 +1451,24 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     // Reply\n     UniValue ret(UniValue::VARR);\n     std::map<std::string, tallyitem> mapAccountTally;\n-    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n-        const CTxDestination& dest = item.first;\n-        const std::string& strAccount = item.second.name;\n-        std::map<CTxDestination, tallyitem>::iterator it = mapTally.find(dest);\n+\n+    // Create mapAddressBook iterator\n+    // If we aren't filtering, go from begin() to end()\n+    auto start = pwallet->mapAddressBook.begin();\n+    auto end = pwallet->mapAddressBook.end();\n+    // If we are filtering, find() the applicable entry\n+    if (has_filtered_address) {\n+        start = pwallet->mapAddressBook.find(filtered_address);\n+        if (start != end) {\n+            end = std::next(start);\n+        }\n+    }\n+\n+    for (auto item_it = start; item_it != end; ++item_it)\n+    {\n+        const CTxDestination& address = item_it->first;\n+        const std::string& strAccount = item_it->second.name;\n+        auto it = mapTally.find(address);\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n@@ -1466,7 +1494,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n             UniValue obj(UniValue::VOBJ);\n             if(fIsWatchonly)\n                 obj.pushKV(\"involvesWatchonly\", true);\n-            obj.pushKV(\"address\",       EncodeDestination(dest));\n+            obj.pushKV(\"address\",       EncodeDestination(address));\n             obj.pushKV(\"account\",       strAccount);\n             obj.pushKV(\"amount\",        ValueFromAmount(nAmount));\n             obj.pushKV(\"confirmations\", (nConf == std::numeric_limits<int>::max() ? 0 : nConf));\n@@ -1511,15 +1539,15 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n+            \"listreceivedbyaddress ( minconf include_empty include_watchonly address_filter )\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n-\n+            \"4. address_filter    (string, optional) If present, only return information on this address.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1541,6 +1569,7 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleCli(\"listreceivedbyaddress\", \"\")\n             + HelpExampleCli(\"listreceivedbyaddress\", \"6 true\")\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n+            + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true, \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\"\")\n         );\n \n     ObserveSafeMode();\n@@ -3837,7 +3866,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbyaccount,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",            &listreceivedbyaddress,         {\"minconf\",\"include_empty\",\"include_watchonly\",\"address_filter\"} },\n     { \"wallet\",             \"listsinceblock\",                   &listsinceblock,                {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"include_removed\"} },\n     { \"wallet\",             \"listtransactions\",                 &listtransactions,              {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },"
      },
      {
        "sha": "01c9899c7157b6b75587f8948a35c567c3b8f353",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 37,
        "deletions": 3,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ca7c1e4ac60470a064f77cf309ec6316cc51769/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ca7c1e4ac60470a064f77cf309ec6316cc51769/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=4ca7c1e4ac60470a064f77cf309ec6316cc51769",
        "patch": "@@ -45,10 +45,44 @@ def run_test(self):\n         assert_array_result(self.nodes[1].listreceivedbyaddress(11), {\"address\": addr}, {}, True)\n \n         # Empty Tx\n-        addr = self.nodes[1].getnewaddress()\n+        empty_addr = self.nodes[1].getnewaddress()\n         assert_array_result(self.nodes[1].listreceivedbyaddress(0, True),\n-                            {\"address\": addr},\n-                            {\"address\": addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+                            {\"address\": empty_addr},\n+                            {\"address\": empty_addr, \"account\": \"\", \"amount\": 0, \"confirmations\": 0, \"txids\": []})\n+\n+        #Test Address filtering\n+        #Only on addr\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":10, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True, address_filter=addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Error on invalid address\n+        assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n+        #Another address receive money\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 2) #Right now 2 entries\n+        other_addr = self.nodes[1].getnewaddress()\n+        txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+        #Same test as above should still pass\n+        expected = {\"address\":addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":11, \"txids\":[txid,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, addr)\n+        assert_array_result(res, {\"address\":addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Same test as above but with other_addr should still pass\n+        expected = {\"address\":other_addr, \"account\":\"\", \"amount\":Decimal(\"0.1\"), \"confirmations\":1, \"txids\":[txid2,]}\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_array_result(res, {\"address\":other_addr}, expected)\n+        assert_equal(len(res), 1)\n+        #Should be two entries though without filter\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True)\n+        assert_equal(len(res), 3) #Became 3 entries\n+\n+        #Not on random addr\n+        other_addr = self.nodes[0].getnewaddress() # note on node[0]! just a random addr\n+        res = self.nodes[1].listreceivedbyaddress(0, True, True, other_addr)\n+        assert_equal(len(res), 0)\n \n         self.log.info(\"getreceivedbyaddress Test\")\n "
      }
    ]
  },
  {
    "sha": "a312e201ba56742499a5480b5f2115f01505c217",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzEyZTIwMWJhNTY3NDI0OTlhNTQ4MGI1ZjIxMTVmMDE1MDVjMjE3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-07T15:25:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-07T15:25:50Z"
      },
      "message": "Merge #12631: [gitian] Alphabetize signing keys & add kallewoof key\n\ne690cf4b86 [gitian] Add kallewoof key for signing (Karl-Johan Alm)\n92fa6d2232 [gitian] Re-order keys by owner first name alphabetic order (Karl-Johan Alm)\n\nPull request description:\n\n  The docs require 2 sigs before merging, but I'm making the PR now so I don't forget about it.\n\nTree-SHA512: d8d1199e730cb4b4be83893e0134cd92b22c531a93824d8af5ab72acfcfae404c82e58eb4624e2963cab9e9aac4c9b7874b0224c4a2c02682199de61fc8e00bc",
      "tree": {
        "sha": "74bc5cf7f3547d796468fed818dea765983bd5c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74bc5cf7f3547d796468fed818dea765983bd5c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a312e201ba56742499a5480b5f2115f01505c217",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaoAR+AAoJENLqSFDnUoslqb4P/2COl1fPksv0iQux0CkBhuD+\n4AuTAflHNmqQaP83NVqZLIzNkPKKtD2ae4uH3fyFv2DdKUc1XOiKH8JVn0WPAkpM\nPH5OqGIFB9V1VhALdzaxiwNxBiEFSLRSgQhQ35c7igZgiEh4Iy4gvamIoC39ieQH\niIyzZk39iZh1v6r4tWVaiXN9Q10XwddTXq9YROm8v6dfjJXYpV9q4OO5ullXE+W5\ncJiTpDzb5srOl/B+vvEgdw7mVXhMhVd43YFwgOnD3nYLQicK7W4nTNWrwYFLa97J\nP6pLtjY5sn4l15jbG3xKInG7F+X3hXCx5DWjIkz27SueZrxqeBNgFkhgSSxjM6Ey\nljwB78lhaLmoFJxSnVtNNKSiR6DMqTRESEbrIKEAyOzQPt5E0OIWj256WEJNmdcP\nj3TP3IOkVtnG2CW0qG5rAF8MooX0677zjPHZAR4Aa3ameQo2Je0nlBrHJvlFPlU5\nAPVWC8/SoHAHH3KYcRwRHxFb7qIZ0ngrk8i458EOyEmkFfs1d1lmRzp0I+O0rAw7\n8+8pBlchA9uM8S4tbqfBaERJb52L8RNCaAplFeGyi1490E0BSSUwEmVp03njeLcU\nxBfBvlnlj0iE9uxT6LaoCfaqMP0SwUawergEz2XsObj7t/9kpDU0G3GMWtU3XoLa\ndtHrruMPZiUkxqhbY7YK\n=xZAG\n-----END PGP SIGNATURE-----",
        "payload": "tree 74bc5cf7f3547d796468fed818dea765983bd5c3\nparent 4ca7c1e4ac60470a064f77cf309ec6316cc51769\nparent e690cf4b860a19810de8f6ac645fc86d2f7c56b4\nauthor MarcoFalke <falke.marco@gmail.com> 1520436348 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520436350 -0500\n\nMerge #12631: [gitian] Alphabetize signing keys & add kallewoof key\n\ne690cf4b86 [gitian] Add kallewoof key for signing (Karl-Johan Alm)\n92fa6d2232 [gitian] Re-order keys by owner first name alphabetic order (Karl-Johan Alm)\n\nPull request description:\n\n  The docs require 2 sigs before merging, but I'm making the PR now so I don't forget about it.\n\nTree-SHA512: d8d1199e730cb4b4be83893e0134cd92b22c531a93824d8af5ab72acfcfae404c82e58eb4624e2963cab9e9aac4c9b7874b0224c4a2c02682199de61fc8e00bc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a312e201ba56742499a5480b5f2115f01505c217",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a312e201ba56742499a5480b5f2115f01505c217",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a312e201ba56742499a5480b5f2115f01505c217/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca7c1e4ac60470a064f77cf309ec6316cc51769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca7c1e4ac60470a064f77cf309ec6316cc51769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca7c1e4ac60470a064f77cf309ec6316cc51769"
      },
      {
        "sha": "e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e690cf4b860a19810de8f6ac645fc86d2f7c56b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e690cf4b860a19810de8f6ac645fc86d2f7c56b4"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "593fba1d0915fb8ad7e3c246e14f5dcbf4e5b1de",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a312e201ba56742499a5480b5f2115f01505c217/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a312e201ba56742499a5480b5f2115f01505c217/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=a312e201ba56742499a5480b5f2115f01505c217",
        "patch": "@@ -1,29 +1,30 @@\n 617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n-152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n-07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n 912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n 9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n-E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n 32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n 4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n-71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan\n+C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n 9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n-37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n+77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n 133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n-77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n-79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      }
    ]
  },
  {
    "sha": "da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTlhMmY1Y2Q5MDMyZWUyMmFjYzVjMmRjMTc1ZTY5MzRmNjMxMzJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:28:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:28:53Z"
      },
      "message": "Merge #11630: Simplify Base32 and Base64 conversions\n\nb3ea8ccb7 Simplify Base32 and Base64 conversions (Pieter Wuille)\n3296a3bb7 Generalize ConvertBits (Pieter Wuille)\n\nPull request description:\n\n  Generalize `ConvertBits` a bit to also be usable for the existing Base32 and Base64 convertions (rather than just for Bech32).\n\nTree-SHA512: 3858247f9b14ca4766c08ea040a09b1d6d70caaccc75c2436a54102d6d526f499ec07f5bdfcbbe16cbde5aae521cd16e9aa693e688a97e6c5e74b8e58ee55a13",
      "tree": {
        "sha": "63fcd9f7116ca9698b0853f3f14df6fb8b9cfc97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63fcd9f7116ca9698b0853f3f14df6fb8b9cfc97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoAU2AAoJEB5K7WKYbNJdCssIALpdXH8N5C/t4YUMOcRSR3qM\nxtaRu8K4S46tkghYNKaXdXDoHHBPhy7hwC9w2xEAQaejWwxfgNfrteOT6KxHl66u\nFqxLsXQEzCn6WkiyBpO84++wKmOZ+4/n0tk5iX89AWKusokWrHCpywxFPjGT9xyU\n/P8ber2ViSdYu8J3JpSG55rz8mBBC7Ds9PEH+CRHYaq1hziz4an8tvV3HYvx56Dr\ntU1wwOurrYIps3ZB/S6HZoaS0NIEHz19X9AcqzdUNO24zxLffWrPqxA8BK90oRka\nW4ShSRA5arb8ues28kjK9VaBNUjTFdSIj4mwEwLhlbNtMlGjnaK2Gy8dYN0vCtk=\n=zYr9\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIFN3CsnAe/DJaCuVeGpD+JApJaJjmlCdbAgSkaXTaqVlCP/wEEOH2FWK2kP7\nLGYmNvjApIwI8SC5EFmdWKmlD6KNiEjQIZjG6Xw4uv/+VxwloP6BaIPaVQjxBFqg\nBTjwCD+KUMe2mHqOAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQ1OLwB/Gipg8AJ7Z5k5agcwjxIPXujjVfNk/3\n2+InsNtlEFp5uYdhP6SDTGJYaIy4mt7eCPEEWqAFOfAI9I/+AL9z+WwAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEPkt\n/on98UxvG++UuET3ZZkI8SB/oblHY0PET4ZewhXzx6EeTBDX8LDkJqnn3rY61tfy\nOwjxBFqgBTjwCK4KHq4Sm+c9AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 63fcd9f7116ca9698b0853f3f14df6fb8b9cfc97\nparent a312e201ba56742499a5480b5f2115f01505c217\nparent b3ea8ccb7af475703b97246a2baf2e105d24d6f9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520436525 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520436533 +0100\n\nMerge #11630: Simplify Base32 and Base64 conversions\n\nb3ea8ccb7 Simplify Base32 and Base64 conversions (Pieter Wuille)\n3296a3bb7 Generalize ConvertBits (Pieter Wuille)\n\nPull request description:\n\n  Generalize `ConvertBits` a bit to also be usable for the existing Base32 and Base64 convertions (rather than just for Bech32).\n\nTree-SHA512: 3858247f9b14ca4766c08ea040a09b1d6d70caaccc75c2436a54102d6d526f499ec07f5bdfcbbe16cbde5aae521cd16e9aa693e688a97e6c5e74b8e58ee55a13\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a312e201ba56742499a5480b5f2115f01505c217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a312e201ba56742499a5480b5f2115f01505c217",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a312e201ba56742499a5480b5f2115f01505c217"
      },
      {
        "sha": "b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ea8ccb7af475703b97246a2baf2e105d24d6f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ea8ccb7af475703b97246a2baf2e105d24d6f9"
      }
    ],
    "stats": {
      "total": 323,
      "additions": 69,
      "deletions": 254
    },
    "files": [
      {
        "sha": "c2dc511989e6e29b07c5dbcd2a18be97af5bb861",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "patch": "@@ -43,14 +43,16 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n     std::string operator()(const WitnessV0KeyHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        data.reserve(33);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n     std::string operator()(const WitnessV0ScriptHash& id) const\n     {\n         std::vector<unsigned char> data = {0};\n-        ConvertBits<8, 5, true>(data, id.begin(), id.end());\n+        data.reserve(53);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.begin(), id.end());\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -60,7 +62,8 @@ class DestinationEncoder : public boost::static_visitor<std::string>\n             return {};\n         }\n         std::vector<unsigned char> data = {(unsigned char)id.version};\n-        ConvertBits<8, 5, true>(data, id.program, id.program + id.length);\n+        data.reserve(1 + (id.length * 8 + 4) / 5);\n+        ConvertBits<8, 5, true>([&](unsigned char c) { data.push_back(c); }, id.program, id.program + id.length);\n         return bech32::Encode(m_params.Bech32HRP(), data);\n     }\n \n@@ -94,7 +97,8 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n-        if (ConvertBits<5, 8, false>(data, bech.second.begin() + 1, bech.second.end())) {\n+        data.reserve(((bech.second.size() - 1) * 5) / 8);\n+        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, bech.second.begin() + 1, bech.second.end())) {\n             if (version == 0) {\n                 {\n                     WitnessV0KeyHash keyid;"
      },
      {
        "sha": "1210c7a7eec46e82b61872b4e66f4cdb2af10cf6",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base32_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase32(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase32(vstrOut[i]);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "f785cede81db81b7c92595237f9a1c16447784be",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "patch": "@@ -16,9 +16,9 @@ BOOST_AUTO_TEST_CASE(base64_testvectors)\n     for (unsigned int i=0; i<sizeof(vstrIn)/sizeof(vstrIn[0]); i++)\n     {\n         std::string strEnc = EncodeBase64(vstrIn[i]);\n-        BOOST_CHECK(strEnc == vstrOut[i]);\n+        BOOST_CHECK_EQUAL(strEnc, vstrOut[i]);\n         std::string strDec = DecodeBase64(strEnc);\n-        BOOST_CHECK(strDec == vstrIn[i]);\n+        BOOST_CHECK_EQUAL(strDec, vstrIn[i]);\n     }\n }\n "
      },
      {
        "sha": "d1025fc7bf6b9236b5fc2a6e87ed87819fa92b72",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 243,
        "changes": 297,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "patch": "@@ -127,46 +127,11 @@ std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n-    std::string strRet;\n-    strRet.reserve((len+2)/3*4);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase64[enc >> 2];\n-                left = (enc & 3) << 4;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have two bits\n-                strRet += pbase64[left | (enc >> 4)];\n-                left = (enc & 15) << 2;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have four bits\n-                strRet += pbase64[left | (enc >> 6)];\n-                strRet += pbase64[enc & 63];\n-                mode = 0;\n-                break;\n-        }\n-    }\n-\n-    if (mode)\n-    {\n-        strRet += pbase64[left];\n-        strRet += '=';\n-        if (mode == 1)\n-            strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 2) / 3) * 4);\n+    ConvertBits<8, 6, true>([&](int v) { str += pbase64[v]; }, pch, pch + len);\n+    while (str.size() % 4) str += '=';\n+    return str;\n }\n \n std::string EncodeBase64(const std::string& str)\n@@ -193,68 +158,32 @@ std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve(strlen(p)*3/4);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode64_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 6\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 6 bits and keep 4\n-                  vchRet.push_back((left<<2) | (dec>>4));\n-                  left = dec & 15;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 4 bits and get 6, we keep 2\n-                 vchRet.push_back((left<<4) | (dec>>2));\n-                 left = dec & 3;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 2 bits and get 6\n-                 vchRet.push_back((left<<6) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode64_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 4n base64 characters processed: ok\n-                break;\n-\n-            case 1: // 4n+1 base64 character processed: impossible\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 4n+2 base64 characters processed: require '=='\n-                if (left || p[0] != '=' || p[1] != '=' || decode64_table[(unsigned char)p[2]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 3: // 4n+3 base64 characters processed: require '='\n-                if (left || p[0] != '=' || decode64_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 3) / 4);\n+    bool valid = ConvertBits<6, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 4 == 0 && p - q < 4;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase64(const std::string& str)\n@@ -267,59 +196,11 @@ std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n     static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n-    std::string strRet;\n-    strRet.reserve((len+4)/5*8);\n-\n-    int mode=0, left=0;\n-    const unsigned char *pchEnd = pch+len;\n-\n-    while (pch<pchEnd)\n-    {\n-        int enc = *(pch++);\n-        switch (mode)\n-        {\n-            case 0: // we have no bits\n-                strRet += pbase32[enc >> 3];\n-                left = (enc & 7) << 2;\n-                mode = 1;\n-                break;\n-\n-            case 1: // we have three bits\n-                strRet += pbase32[left | (enc >> 6)];\n-                strRet += pbase32[(enc >> 1) & 31];\n-                left = (enc & 1) << 4;\n-                mode = 2;\n-                break;\n-\n-            case 2: // we have one bit\n-                strRet += pbase32[left | (enc >> 4)];\n-                left = (enc & 15) << 1;\n-                mode = 3;\n-                break;\n-\n-            case 3: // we have four bits\n-                strRet += pbase32[left | (enc >> 7)];\n-                strRet += pbase32[(enc >> 2) & 31];\n-                left = (enc & 3) << 3;\n-                mode = 4;\n-                break;\n-\n-            case 4: // we have two bits\n-                strRet += pbase32[left | (enc >> 5)];\n-                strRet += pbase32[enc & 31];\n-                mode = 0;\n-        }\n-    }\n-\n-    static const int nPadding[5] = {0, 6, 4, 3, 1};\n-    if (mode)\n-    {\n-        strRet += pbase32[left];\n-        for (int n=0; n<nPadding[mode]; n++)\n-             strRet += '=';\n-    }\n-\n-    return strRet;\n+    std::string str;\n+    str.reserve(((len + 4) / 5) * 8);\n+    ConvertBits<8, 5, true>([&](int v) { str += pbase32[v]; }, pch, pch + len);\n+    while (str.size() % 8) str += '=';\n+    return str;\n }\n \n std::string EncodeBase32(const std::string& str)\n@@ -346,102 +227,32 @@ std::vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n     };\n \n-    if (pfInvalid)\n-        *pfInvalid = false;\n-\n-    std::vector<unsigned char> vchRet;\n-    vchRet.reserve((strlen(p))*5/8);\n-\n-    int mode = 0;\n-    int left = 0;\n-\n-    while (1)\n-    {\n-         int dec = decode32_table[(unsigned char)*p];\n-         if (dec == -1) break;\n-         p++;\n-         switch (mode)\n-         {\n-             case 0: // we have no bits and get 5\n-                 left = dec;\n-                 mode = 1;\n-                 break;\n-\n-              case 1: // we have 5 bits and keep 2\n-                  vchRet.push_back((left<<3) | (dec>>2));\n-                  left = dec & 3;\n-                  mode = 2;\n-                  break;\n-\n-             case 2: // we have 2 bits and keep 7\n-                 left = left << 5 | dec;\n-                 mode = 3;\n-                 break;\n-\n-             case 3: // we have 7 bits and keep 4\n-                 vchRet.push_back((left<<1) | (dec>>4));\n-                 left = dec & 15;\n-                 mode = 4;\n-                 break;\n-\n-             case 4: // we have 4 bits, and keep 1\n-                 vchRet.push_back((left<<4) | (dec>>1));\n-                 left = dec & 1;\n-                 mode = 5;\n-                 break;\n-\n-             case 5: // we have 1 bit, and keep 6\n-                 left = left << 5 | dec;\n-                 mode = 6;\n-                 break;\n-\n-             case 6: // we have 6 bits, and keep 3\n-                 vchRet.push_back((left<<2) | (dec>>3));\n-                 left = dec & 7;\n-                 mode = 7;\n-                 break;\n-\n-             case 7: // we have 3 bits, and keep 0\n-                 vchRet.push_back((left<<5) | dec);\n-                 mode = 0;\n-                 break;\n-         }\n+    const char* e = p;\n+    std::vector<uint8_t> val;\n+    val.reserve(strlen(p));\n+    while (*p != 0) {\n+        int x = decode32_table[(unsigned char)*p];\n+        if (x == -1) break;\n+        val.push_back(x);\n+        ++p;\n     }\n \n-    if (pfInvalid)\n-        switch (mode)\n-        {\n-            case 0: // 8n base32 characters processed: ok\n-                break;\n-\n-            case 1: // 8n+1 base32 characters processed: impossible\n-            case 3: //   +3\n-            case 6: //   +6\n-                *pfInvalid = true;\n-                break;\n-\n-            case 2: // 8n+2 base32 characters processed: require '======'\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || p[4] != '=' || p[5] != '=' || decode32_table[(unsigned char)p[6]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 4: // 8n+4 base32 characters processed: require '===='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || p[3] != '=' || decode32_table[(unsigned char)p[4]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 5: // 8n+5 base32 characters processed: require '==='\n-                if (left || p[0] != '=' || p[1] != '=' || p[2] != '=' || decode32_table[(unsigned char)p[3]] != -1)\n-                    *pfInvalid = true;\n-                break;\n-\n-            case 7: // 8n+7 base32 characters processed: require '='\n-                if (left || p[0] != '=' || decode32_table[(unsigned char)p[1]] != -1)\n-                    *pfInvalid = true;\n-                break;\n+    std::vector<unsigned char> ret;\n+    ret.reserve((val.size() * 5) / 8);\n+    bool valid = ConvertBits<5, 8, false>([&](unsigned char c) { ret.push_back(c); }, val.begin(), val.end());\n+\n+    const char* q = p;\n+    while (valid && *p != 0) {\n+        if (*p != '=') {\n+            valid = false;\n+            break;\n         }\n+        ++p;\n+    }\n+    valid = valid && (p - e) % 8 == 0 && p - q < 8;\n+    if (pfInvalid) *pfInvalid = !valid;\n \n-    return vchRet;\n+    return ret;\n }\n \n std::string DecodeBase32(const std::string& str)"
      },
      {
        "sha": "1c9cca90b2f110be44ae57cb558a2a4fee9bf8f0",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da9a2f5cd9032ee22acc5c2dc175e6934f63132c/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "patch": "@@ -151,7 +151,7 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>\n-bool ConvertBits(O& out, I it, I end) {\n+bool ConvertBits(const O& outfn, I it, I end) {\n     size_t acc = 0;\n     size_t bits = 0;\n     constexpr size_t maxv = (1 << tobits) - 1;\n@@ -161,12 +161,12 @@ bool ConvertBits(O& out, I it, I end) {\n         bits += frombits;\n         while (bits >= tobits) {\n             bits -= tobits;\n-            out.push_back((acc >> bits) & maxv);\n+            outfn((acc >> bits) & maxv);\n         }\n         ++it;\n     }\n     if (pad) {\n-        if (bits) out.push_back((acc << (tobits - bits)) & maxv);\n+        if (bits) outfn((acc << (tobits - bits)) & maxv);\n     } else if (bits >= frombits || ((acc << (tobits - bits)) & maxv)) {\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTFjM2VhNjFiNGU0OWZkNDZhMWE3MWI4NGNhOTlkZGY2OWQyZmY3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-07T15:29:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-07T15:30:04Z"
      },
      "message": "Merge #12627: qa: Fix some tests to work on native windows\n\nfa3528a85b qa: Fix some tests to work on native windows (MarcoFalke)\n\nPull request description:\n\n  This allows some more tests to be run natively on Windows\n\nTree-SHA512: 8097a82dc046be9f6bb0da634758c9afef7836960ca7a1f88f9acab9512dbf7bc26525b515faae407edab4620846cce2b427940298f822e250f23f924b4c7591",
      "tree": {
        "sha": "b0364e01927057cbfb2b78861c44f69bb7888e1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0364e01927057cbfb2b78861c44f69bb7888e1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaoAV8AAoJENLqSFDnUosl2hEQAIWOyQn10yBilnDznISMbp3f\nSX1qEowvhLxvEeWjJUV3DhrSPkooQv+ZGCI7GHS8Pb57IaBzStgjRcAz9AQ8Sq9f\nm8O4/NhDevIRrVcwfuhPYBG0BFw0mfL/5+U7XAPPyXeWTGTEvBYqiV/w/KXNW+z8\nJnqdmBbOek0Oqd+ZaKwdiG8iZJQEcBIdvKl1zWpBumedhRSyR5wPTlnIkGSgAswS\nY4XakyGwC5J3kXBsIQF6+Deya1U8rVXVc3pmcOOmLEdYQl2eqOa9VKbKI8IJeyc+\n8JM6SxGnSUPE6fw6TWM+6W5TrTTErb2Z+YF4N3Wbrj+OWWEeJwbZq53Lajum9kam\nwtjJ37GNq3sw427TSAnpa26C1QSSNDfgoL3z+A2izTM3ZveniVwl/lz+rgOuttqp\ntkIUfkIEb2uc6XVx5LmtM3QjSkdts4upGPd29YuhlY4iJaFKK40oY/wgnqYOrGK6\n5/yqdp/e+bQ6Lgz/JGM1rG+zBHMDnnIdbSuZlc7Z1sDWEcMz70xRYXlul1s/UTUq\n+Oi5Qbfbx6CZxQRzwrxqS7MijGFKadjyCAVkNEMwe+/qcffqY+d8px7KF5TFcDxk\nLewVSYKYAtGO9ClJhc7Yq8/VXaIC28dYnItChnrk4CAO6ggSX4ghJ5Sye80HSrAG\nheb521qSd2Y7V579dvq0\n=zUsj\n-----END PGP SIGNATURE-----",
        "payload": "tree b0364e01927057cbfb2b78861c44f69bb7888e1c\nparent da9a2f5cd9032ee22acc5c2dc175e6934f63132c\nparent fa3528a85b05ea9507077f3eb340c9fb189251a6\nauthor MarcoFalke <falke.marco@gmail.com> 1520436597 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520436604 -0500\n\nMerge #12627: qa: Fix some tests to work on native windows\n\nfa3528a85b qa: Fix some tests to work on native windows (MarcoFalke)\n\nPull request description:\n\n  This allows some more tests to be run natively on Windows\n\nTree-SHA512: 8097a82dc046be9f6bb0da634758c9afef7836960ca7a1f88f9acab9512dbf7bc26525b515faae407edab4620846cce2b427940298f822e250f23f924b4c7591\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da9a2f5cd9032ee22acc5c2dc175e6934f63132c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da9a2f5cd9032ee22acc5c2dc175e6934f63132c"
      },
      {
        "sha": "fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3528a85b05ea9507077f3eb340c9fb189251a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3528a85b05ea9507077f3eb340c9fb189251a6"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "53748df915ceadb0015db086105ef59a7215a0b1",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
        "patch": "@@ -66,7 +66,9 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start the nodes. Verify that node0 has the transactions in its mempool and node1 does not. Verify that node2 calculates its balance correctly after loading wallet transactions.\")\n         self.stop_nodes()\n-        self.start_node(1)  # Give this one a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Give this node a head-start, so we can be \"extra-sure\" that it didn't load anything later\n+        # Also don't store the mempool, to keep the datadir clean\n+        self.start_node(1, extra_args=[\"-persistmempool=0\"])\n         self.start_node(0)\n         self.start_node(2)\n         # Give bitcoind a second to reload the mempool"
      },
      {
        "sha": "36d1a2f856133b22ab5233ad09f6deb7f8168de2",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
        "patch": "@@ -9,7 +9,6 @@\n \n import sys\n import socket\n-import fcntl\n import struct\n import array\n import os\n@@ -90,6 +89,8 @@ def all_interfaces():\n     '''\n     Return all interfaces that are up\n     '''\n+    import fcntl  # Linux only, so only import when required\n+\n     is_64bits = sys.maxsize > 2**32\n     struct_size = 40 if is_64bits else 32\n     s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)"
      },
      {
        "sha": "997f67ec7e90a7ae0e3d567b8cf4f6baef80df14",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
        "patch": "@@ -7,7 +7,10 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_rpc_error)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n \n \n def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n@@ -88,7 +91,8 @@ def setup_network(self, split=False):\n         self.start_nodes()\n \n     def run_test (self):\n-        tmpdir = self.options.tmpdir\n+        wallet_unenc_dump = os.path.join(self.nodes[0].datadir, \"wallet.unencrypted.dump\")\n+        wallet_enc_dump = os.path.join(self.nodes[0].datadir, \"wallet.encrypted.dump\")\n \n         # generate 20 addresses to compare against the dump\n         # but since we add a p2sh-p2wpkh address for the first pubkey in the\n@@ -108,11 +112,11 @@ def run_test (self):\n         script_addrs = [witness_addr, multisig_addr]\n \n         # dump unencrypted wallet\n-        result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n-        assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        result = self.nodes[0].dumpwallet(wallet_unenc_dump)\n+        assert_equal(result['filename'], wallet_unenc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n+            read_dump(wallet_unenc_dump, addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n@@ -125,18 +129,18 @@ def run_test (self):\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n-        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        self.nodes[0].dumpwallet(wallet_enc_dump)\n \n         found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n-            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n+            read_dump(wallet_enc_dump, addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n         assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n-        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", lambda: self.nodes[0].dumpwallet(wallet_enc_dump))\n \n         # Restart node with new wallet, and test importwallet\n         self.stop_node(0)\n@@ -146,11 +150,11 @@ def run_test (self):\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == False)\n \n-        self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+        self.nodes[0].importwallet(wallet_unenc_dump)\n \n         # Now check IsMine is true\n         result = self.nodes[0].getaddressinfo(multisig_addr)\n         assert(result['ismine'] == True)\n \n if __name__ == '__main__':\n-    WalletDumpTest().main ()\n+    WalletDumpTest().main()"
      }
    ]
  },
  {
    "sha": "8a43bdcffd8d8718fb29579242c593fc65f35d6a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTQzYmRjZmZkOGQ4NzE4ZmIyOTU3OTI0MmM1OTNmYzY1ZjM1ZDZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:48:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T15:49:59Z"
      },
      "message": "Merge #12620: Remove TransactionTableModel::TxIDRole\n\n3b26b6af7 qt: Remove TransactionTableModel::TxIDRole (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  The role `TxIDRole` is a duplicate of `TxHashRole`. This change favours `TxHashRole`.\n\nTree-SHA512: ad35933eae1cb6b242b25b8940d662c2c79c766732d76fdd410c80230ec084969294a8e5a126794707992a566076ef4452b592050f7af6c4fa7742891090803d",
      "tree": {
        "sha": "b91698a91990adaba1a9bcfea9237497e11f3fbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b91698a91990adaba1a9bcfea9237497e11f3fbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a43bdcffd8d8718fb29579242c593fc65f35d6a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoAonAAoJEB5K7WKYbNJdGisH/imfb5wVl4bJQef4FmoNYZcI\nytdwN2S/DatlRbOVNil98sPHh5eH7R6KlDfJvKaFU9ptJI8hV+EjCle4h3XOK6FM\ntJxGnx8F8CJ2jiQPfJsdLu1CbN5YKu40M5235T7tSXAj7/srY6FXvwvVs6UzPIGH\nWs/KwwNPJrguMfYG1irj+Uv2fyAbJ53FtNzaG8XARuPoQ8QHWcpff0ByV6s1IVxf\nQkCDE8SSsJT6OkD6bOAADJirudM/CNfjk7GQnN/v6m7SXDFAQREoH91IDI3PYRsX\nqnc6eqhYsvIGjAfox4ppgeTqYe17r0HvV3JugIFG2tvBqKE0LxwOHWTuMxAHChs=\n=zyRY\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILNHdlRK4IMx3eoX2ESIT5qhLAPir/sLa0xMHOR7txy6CP/wEIjfVq73l0wZ\nSfjFlfHz82QI8SAxbSVO1Av2OwnHlDVfx4stOcO+x0VtIj+Q2u7ts79g7gjxBFqg\nCinwCPP5J4gPcaMYAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQlPU8UlCTajmbwTDlQVt3zgjxBFqgCirwCPfAwUWz\nwcf7AIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmfwEKjRnCl+m3HRGgipuQH7tAwI8QRaoAoq8AgAnexHOkiP1gCD\n3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBz\nLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b91698a91990adaba1a9bcfea9237497e11f3fbc\nparent 791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7\nparent 3b26b6af728d5ac538d333a1275073c7c5a012e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520437689 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520437799 +0100\n\nMerge #12620: Remove TransactionTableModel::TxIDRole\n\n3b26b6af7 qt: Remove TransactionTableModel::TxIDRole (Jo\u00e3o Barbosa)\n\nPull request description:\n\n  The role `TxIDRole` is a duplicate of `TxHashRole`. This change favours `TxHashRole`.\n\nTree-SHA512: ad35933eae1cb6b242b25b8940d662c2c79c766732d76fdd410c80230ec084969294a8e5a126794707992a566076ef4452b592050f7af6c4fa7742891090803d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a43bdcffd8d8718fb29579242c593fc65f35d6a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a43bdcffd8d8718fb29579242c593fc65f35d6a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a43bdcffd8d8718fb29579242c593fc65f35d6a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/791c3ea61b4e49fd46a1a71b84ca99ddf69d2ff7"
      },
      {
        "sha": "3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b26b6af728d5ac538d333a1275073c7c5a012e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b26b6af728d5ac538d333a1275073c7c5a012e1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 8,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ec5a66bc9f46baa0355b1885426690bf3453619c",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -240,7 +240,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     if (wtx.mapValue.count(\"comment\") && !wtx.mapValue[\"comment\"].empty())\n         strHTML += \"<br><b>\" + tr(\"Comment\") + \":</b><br>\" + GUIUtil::HtmlEscape(wtx.mapValue[\"comment\"], true) + \"<br>\";\n \n-    strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxID() + \"<br>\";\n+    strHTML += \"<b>\" + tr(\"Transaction ID\") + \":</b> \" + rec->getTxHash() + \"<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction total size\") + \":</b> \" + QString::number(wtx.tx->GetTotalSize()) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Transaction virtual size\") + \":</b> \" + QString::number(GetVirtualTransactionSize(*wtx.tx)) + \" bytes<br>\";\n     strHTML += \"<b>\" + tr(\"Output index\") + \":</b> \" + QString::number(rec->getOutputIndex()) + \"<br>\";"
      },
      {
        "sha": "7bf4d3351c6c0a3df597df6dc3b3f01bdc47d9cd",
        "filename": "src/qt/transactiondescdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiondescdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiondescdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -14,7 +14,7 @@ TransactionDescDialog::TransactionDescDialog(const QModelIndex &idx, QWidget *pa\n     ui(new Ui::TransactionDescDialog)\n {\n     ui->setupUi(this);\n-    setWindowTitle(tr(\"Details for %1\").arg(idx.data(TransactionTableModel::TxIDRole).toString()));\n+    setWindowTitle(tr(\"Details for %1\").arg(idx.data(TransactionTableModel::TxHashRole).toString()));\n     QString desc = idx.data(TransactionTableModel::LongDescriptionRole).toString();\n     ui->detailText->setHtml(desc);\n }"
      },
      {
        "sha": "a702461f7a1aeb841365e739538a7f7af7170546",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -36,7 +36,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     bool involvesWatchAddress = index.data(TransactionTableModel::WatchonlyRole).toBool();\n     QString address = index.data(TransactionTableModel::AddressRole).toString();\n     QString label = index.data(TransactionTableModel::LabelRole).toString();\n-    QString txid = index.data(TransactionTableModel::TxIDRole).toString();\n+    QString txid = index.data(TransactionTableModel::TxHashRole).toString();\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n "
      },
      {
        "sha": "19cdb0fdea153dfc91b26eda313ab0b4f812025c",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -254,7 +254,7 @@ bool TransactionRecord::statusUpdateNeeded() const\n     return status.cur_num_blocks != chainActive.Height() || status.needsUpdate;\n }\n \n-QString TransactionRecord::getTxID() const\n+QString TransactionRecord::getTxHash() const\n {\n     return QString::fromStdString(hash.ToString());\n }"
      },
      {
        "sha": "5321d05d157d0597158cd0280137f1364e37a2d2",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -129,7 +129,7 @@ class TransactionRecord\n     bool involvesWatchAddress;\n \n     /** Return the unique identifier for this transaction (part) */\n-    QString getTxID() const;\n+    QString getTxHash() const;\n \n     /** Return the output index of the subtransaction  */\n     int getOutputIndex() const;"
      },
      {
        "sha": "84800125fe3cbce76300667fa7a65a01dc11e0dc",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -615,10 +615,8 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n         return qint64(rec->credit + rec->debit);\n-    case TxIDRole:\n-        return rec->getTxID();\n     case TxHashRole:\n-        return QString::fromStdString(rec->hash.ToString());\n+        return rec->getTxHash();\n     case TxHexRole:\n         return priv->getTxHex(rec);\n     case TxPlainTextRole:"
      },
      {
        "sha": "781874d16010ea2326510d4dbcb7f7510f08bf6d",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -56,8 +56,6 @@ class TransactionTableModel : public QAbstractTableModel\n         LabelRole,\n         /** Net amount of transaction */\n         AmountRole,\n-        /** Unique identifier */\n-        TxIDRole,\n         /** Transaction hash */\n         TxHashRole,\n         /** Transaction data, hex-encoded */"
      },
      {
        "sha": "26391452da3291c317e204892e3e04392cb2bd21",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a43bdcffd8d8718fb29579242c593fc65f35d6a/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "patch": "@@ -371,7 +371,7 @@ void TransactionView::exportClicked()\n     writer.addColumn(tr(\"Label\"), 0, TransactionTableModel::LabelRole);\n     writer.addColumn(tr(\"Address\"), 0, TransactionTableModel::AddressRole);\n     writer.addColumn(BitcoinUnits::getAmountColumnTitle(model->getOptionsModel()->getDisplayUnit()), 0, TransactionTableModel::FormattedAmountRole);\n-    writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxIDRole);\n+    writer.addColumn(tr(\"ID\"), 0, TransactionTableModel::TxHashRole);\n \n     if(!writer.write()) {\n         Q_EMIT message(tr(\"Exporting Failed\"), tr(\"There was an error trying to save the transaction history to %1.\").arg(filename),\n@@ -455,7 +455,7 @@ void TransactionView::copyAmount()\n \n void TransactionView::copyTxID()\n {\n-    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxIDRole);\n+    GUIUtil::copyEntryData(transactionView, 0, TransactionTableModel::TxHashRole);\n }\n \n void TransactionView::copyTxHex()"
      }
    ]
  },
  {
    "sha": "0749808a7fc31250abfbc8c61963065e0d320824",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzQ5ODA4YTdmYzMxMjUwYWJmYmM4YzYxOTYzMDY1ZTBkMzIwODI0",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-03-07T15:49:28Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-03-07T15:57:00Z"
      },
      "message": "CheckMinimalPush comments are prescriptive",
      "tree": {
        "sha": "2867a7696d0b0c8f5780b3b3bb65369de7d7db58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2867a7696d0b0c8f5780b3b3bb65369de7d7db58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0749808a7fc31250abfbc8c61963065e0d320824",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0749808a7fc31250abfbc8c61963065e0d320824",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0749808a7fc31250abfbc8c61963065e0d320824",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0749808a7fc31250abfbc8c61963065e0d320824/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "176db6147421c3888076ab8be762a23d9b1bc0c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/176db6147421c3888076ab8be762a23d9b1bc0c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/176db6147421c3888076ab8be762a23d9b1bc0c5"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d56bac7316a3ba1781fd6e06070d9f71ae702633",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0749808a7fc31250abfbc8c61963065e0d320824/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0749808a7fc31250abfbc8c61963065e0d320824/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=0749808a7fc31250abfbc8c61963065e0d320824",
        "patch": "@@ -223,22 +223,22 @@ bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n     // Excludes OP_1NEGATE, OP_1-16 since they are by definition minimal\n     assert(0 <= opcode && opcode <= OP_PUSHDATA4);\n     if (data.size() == 0) {\n-        // Could have used OP_0.\n+        // Should have used OP_0.\n         return opcode == OP_0;\n     } else if (data.size() == 1 && data[0] >= 1 && data[0] <= 16) {\n-        // Could have used OP_1 .. OP_16.\n+        // Should have used OP_1 .. OP_16.\n         return false;\n     } else if (data.size() == 1 && data[0] == 0x81) {\n-        // Could have used OP_1NEGATE.\n+        // Should have used OP_1NEGATE.\n         return false;\n     } else if (data.size() <= 75) {\n-        // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n+        // Must have used a direct push (opcode indicating number of bytes pushed + those bytes).\n         return opcode == data.size();\n     } else if (data.size() <= 255) {\n-        // Could have used OP_PUSHDATA.\n+        // Must have used OP_PUSHDATA.\n         return opcode == OP_PUSHDATA1;\n     } else if (data.size() <= 65535) {\n-        // Could have used OP_PUSHDATA2.\n+        // Must have used OP_PUSHDATA2.\n         return opcode == OP_PUSHDATA2;\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGJjMjdmYjU5OThhMDRlYTBhNmMwOGE1ODJjZmM1ZmEwMjBjZWU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:05:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:11:54Z"
      },
      "message": "Merge #11687: External wallet files\n\nbe8ab7d08 Create new wallet databases as directories rather than files (Russell Yanofsky)\n26c06f24e Allow wallet files not in -walletdir directory (Russell Yanofsky)\nd8a99f65e Allow wallet files in multiple directories (Russell Yanofsky)\n\nPull request description:\n\n  This change consists of three commits:\n\n  * The first commit is a pure refactoring that removes the restriction that two wallets can only be opened at the same time if they are contained in the same directory.\n  * The second commit removes the restriction that `-wallet` filenames can only refer to files in the `-walletdir` directory.\n  * The third commit makes second commit a little safer by changing bitcoin to create wallet databases as directories rather than files, so they can be safely backed up.\n\n  All three commits should be straightforward:\n\n  *  The first commit adds around 20 lines of new code and then updates a bunch of function signatures (generally updating them to take plain fs::path parameters, instead of combinations of strings, fs::paths, and objects like CDBEnv and CWalletDBWrapper).\n  * The second commit removes two `-wallet` filename checks and adds some test cases to the multiwallet unit test.\n  * The third commit just changes the mapping from specified wallet paths to bdb environment & data paths.\n\n    ---\n\n  **Note:** For anybody looking at this PR for the first time, I think you can skip the comments before _20 Nov_ and start reading at https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345625565. Comments before  _20 Nov_ were about an earlier version of the PR that didn't include the third commit, and then confusion from not seeing the first commit.\n\nTree-SHA512: 00bbb120fe0df847cf57014f75f1f7f1f58b0b62fa0b3adab4560163ebdfe06ccdfff33b4231693f03c5dc23601cb41954a07bcea9a4919c8d42f7d62bcf6024",
      "tree": {
        "sha": "c83e35c6eca561aa51b6c6456d254a83d078b300",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c83e35c6eca561aa51b6c6456d254a83d078b300"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoA9KAAoJEB5K7WKYbNJdjCIH/jpfh267WprlRKOVEobvBKS/\nAJzdC5Cwj4umn9J3MRSmEEWhlcWodJjeIrd6LAbERwqEJ5IU1s4Kw4ponYlhjUBD\n8rMEWnJ3ec70Q7RhO5Q9Hd1TqUGKGw7jXilaLHyZMLMFam1FeKSdZlS5qMZ+F/Cj\n4yAoe8mh3hfaarHeUvTd2lf4BbgpvpzV2EWAx3DuPPj1T7TEXRWziCn/1cJTdgoc\nPuCrjdAlsR/OHDy3fxMV9U5ZCq4tVtPSY9L1jdGswnnbBxQMPNwQNMGmWk+12JbB\nBOMpqGq21NdaWEKJ7YiKDpirB5ekqiKWnHMojIuYXWGYzke/vk/jc9L8lxfsbTQ=\n=pnyE\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINy5qjZcqTJt7Ide7E9tavSRvUlykpwGt8jHcXqNDD+GCP/wEIBsZrmV8zIh\nOUaxKU8ZxycI8CB0w6npW5OnV2OgVmy9ejQVJFbIxXs0/+BdszhGw7BcEgjxIA3U\n76b9ui7WCJ2QN22UnpiaO/dasUlUFJg3EBUPYQgoCPEEWqAPTPAIv6c31reXtXcA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb23/8BCE8w38qX+qBU+/bucZ9DcHCPAgpcWAUit7ZYrFUtwQPVgRZwI1BWIrJ7JA\ndKm2lihu4EAI8SDGvtbBDYyUVLsiC4zQ4iRR2aVkb7dPeETuMveyoEcqRwjwIKHY\nyFjtnTR+DFyzYG5pt7ExEWf+FJhkBlovzsoYFc/ZCPEEWqAPTPAIgSqxk6zOrTwA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmfwEKObnz/7baXNY1DnX7q5eLYI8CA6JPs09gfWbPsyB3HZ5Ww906xsiQXP\nSLthnqDdyVZOVAjxIJ+fUQ4s7oppFDGT7lSeG9s9nkkLe3mJgA0bW8rWxP92CPAg\nv8Vt7E87c2Zj1FQqFu21TgK7aX4asMmrwhDgkMpT3tAI8QRaoA9M8AiaWg/uz3I3\nVACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVz\ndGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c83e35c6eca561aa51b6c6456d254a83d078b300\nparent 8a43bdcffd8d8718fb29579242c593fc65f35d6a\nparent be8ab7d082228d09ca529d1a08730d7d5aacb0ed\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520438708 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520439114 +0100\n\nMerge #11687: External wallet files\n\nbe8ab7d08 Create new wallet databases as directories rather than files (Russell Yanofsky)\n26c06f24e Allow wallet files not in -walletdir directory (Russell Yanofsky)\nd8a99f65e Allow wallet files in multiple directories (Russell Yanofsky)\n\nPull request description:\n\n  This change consists of three commits:\n\n  * The first commit is a pure refactoring that removes the restriction that two wallets can only be opened at the same time if they are contained in the same directory.\n  * The second commit removes the restriction that `-wallet` filenames can only refer to files in the `-walletdir` directory.\n  * The third commit makes second commit a little safer by changing bitcoin to create wallet databases as directories rather than files, so they can be safely backed up.\n\n  All three commits should be straightforward:\n\n  *  The first commit adds around 20 lines of new code and then updates a bunch of function signatures (generally updating them to take plain fs::path parameters, instead of combinations of strings, fs::paths, and objects like CDBEnv and CWalletDBWrapper).\n  * The second commit removes two `-wallet` filename checks and adds some test cases to the multiwallet unit test.\n  * The third commit just changes the mapping from specified wallet paths to bdb environment & data paths.\n\n    ---\n\n  **Note:** For anybody looking at this PR for the first time, I think you can skip the comments before _20 Nov_ and start reading at https://github.com/bitcoin/bitcoin/pull/11687#issuecomment-345625565. Comments before  _20 Nov_ were about an earlier version of the PR that didn't include the third commit, and then confusion from not seeing the first commit.\n\nTree-SHA512: 00bbb120fe0df847cf57014f75f1f7f1f58b0b62fa0b3adab4560163ebdfe06ccdfff33b4231693f03c5dc23601cb41954a07bcea9a4919c8d42f7d62bcf6024\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a43bdcffd8d8718fb29579242c593fc65f35d6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a43bdcffd8d8718fb29579242c593fc65f35d6a"
      },
      {
        "sha": "be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be8ab7d082228d09ca529d1a08730d7d5aacb0ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be8ab7d082228d09ca529d1a08730d7d5aacb0ed"
      }
    ],
    "stats": {
      "total": 520,
      "additions": 313,
      "deletions": 207
    },
    "files": [
      {
        "sha": "8fcd2a9163ed8b38729622168c37703bc1cf7135",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -63,6 +63,36 @@ RPC changes\n \n - The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n \n+External wallet files\n+---------------------\n+\n+The `-wallet=<path>` option now accepts full paths instead of requiring wallets\n+to be located in the -walletdir directory.\n+\n+Newly created wallet format\n+---------------------------\n+\n+If `-wallet=<path>` is specified with a path that does not exist, it will now\n+create a wallet directory at the specified location (containing a wallet.dat\n+data file, a db.log file, and database/log.?????????? files) instead of just\n+creating a data file at the path and storing log files in the parent\n+directory. This should make backing up wallets more straightforward than\n+before because the specified wallet path can just be directly archived without\n+having to look in the parent directory for transaction log files.\n+\n+For backwards compatibility, wallet paths that are names of existing data files\n+in the `-walletdir` directory will continue to be accepted and interpreted the\n+same as before.\n+\n+Low-level RPC changes\n+---------------------\n+\n+- When bitcoin is not started with any `-wallet=<path>` options, the name of\n+  the default wallet returned by `getwalletinfo` and `listwallets` RPCs is\n+  now the empty string `\"\"` instead of `\"wallet.dat\"`. If bitcoin is started\n+  with any `-wallet=<path>` options, there is no change in behavior, and the\n+  name of any wallet is just its `<path>` string.\n+\n Credits\n =======\n "
      },
      {
        "sha": "98965840c7b95651e1066ba102810cf6d3ed8ca7",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -32,7 +32,7 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<CO\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    const CWallet wallet;\n+    const CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     std::vector<COutput> vCoins;\n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "41f1e5786c9923b67cf6bbb78849cd2ccae7c0a2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -46,7 +46,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort()));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n-    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (argument is wallet filename in bitcoind directory, required if bitcoind/-Qt runs with multiple wallets)\"));\n+    strUsage += HelpMessageOpt(\"-rpcwallet=<walletname>\", _(\"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind)\"));\n     strUsage += HelpMessageOpt(\"-stdin\", _(\"Read extra arguments from standard input, one per line until EOF/Ctrl-D (recommended for sensitive information such as passphrases).  When combined with -stdinrpcpass, the first line from standard input is used for the RPC password.\"));\n     strUsage += HelpMessageOpt(\"-stdinrpcpass\", strprintf(_(\"Read RPC password from standard input as a single line.  When combined with -stdin, the first line from standard input is used for the RPC password.\")));\n \n@@ -339,8 +339,8 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n \n     // check if we should use a special wallet endpoint\n     std::string endpoint = \"/\";\n-    std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n-    if (!walletName.empty()) {\n+    if (!gArgs.GetArgs(\"-rpcwallet\").empty()) {\n+        std::string walletName = gArgs.GetArg(\"-rpcwallet\", \"\");\n         char *encodedURI = evhttp_uriencode(walletName.c_str(), walletName.size(), false);\n         if (encodedURI) {\n             endpoint = \"/wallet/\"+ std::string(encodedURI);"
      },
      {
        "sha": "976aadc0afe2b346028fe82c9c13bc719a1e096d",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -158,9 +158,7 @@ void TestGUI()\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    bitdb.MakeMock();\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    CWallet wallet(std::move(dbw));\n+    CWallet wallet(\"mock\", CWalletDBWrapper::CreateMock());\n     bool firstRun;\n     wallet.LoadWallet(firstRun);\n     {\n@@ -261,9 +259,6 @@ void TestGUI()\n     QPushButton* removeRequestButton = receiveCoinsDialog.findChild<QPushButton*>(\"removeRequestButton\");\n     removeRequestButton->click();\n     QCOMPARE(requestTableModel->rowCount({}), currentRowCount-1);\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n }\n \n }"
      },
      {
        "sha": "ebe7b48da06463c5fa678af5da93beaa7533ffc6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 30,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -52,20 +52,55 @@ void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n         }\n     }\n }\n+\n+CCriticalSection cs_db;\n+std::map<std::string, CDBEnv> g_dbenvs; //!< Map from directory name to open db environment.\n } // namespace\n \n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename)\n+{\n+    fs::path env_directory;\n+    if (fs::is_regular_file(wallet_path)) {\n+        // Special case for backwards compatibility: if wallet path points to an\n+        // existing file, treat it as the path to a BDB data file in a parent\n+        // directory that also contains BDB log files.\n+        env_directory = wallet_path.parent_path();\n+        database_filename = wallet_path.filename().string();\n+    } else {\n+        // Normal case: Interpret wallet path as a directory path containing\n+        // data and log files.\n+        env_directory = wallet_path;\n+        database_filename = \"wallet.dat\";\n+    }\n+    LOCK(cs_db);\n+    // Note: An ununsed temporary CDBEnv object may be created inside the\n+    // emplace function if the key already exists. This is a little inefficient,\n+    // but not a big concern since the map will be changed in the future to hold\n+    // pointers instead of objects, anyway.\n+    return &g_dbenvs.emplace(std::piecewise_construct, std::forward_as_tuple(env_directory.string()), std::forward_as_tuple(env_directory)).first->second;\n+}\n+\n //\n // CDB\n //\n \n-CDBEnv bitdb;\n-\n-void CDBEnv::EnvShutdown()\n+void CDBEnv::Close()\n {\n     if (!fDbEnvInit)\n         return;\n \n     fDbEnvInit = false;\n+\n+    for (auto& db : mapDb) {\n+        auto count = mapFileUseCount.find(db.first);\n+        assert(count == mapFileUseCount.end() || count->second == 0);\n+        if (db.second) {\n+            db.second->close(0);\n+            delete db.second;\n+            db.second = nullptr;\n+        }\n+    }\n+\n     int ret = dbenv->close(0);\n     if (ret != 0)\n         LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n@@ -80,29 +115,25 @@ void CDBEnv::Reset()\n     fMockDb = false;\n }\n \n-CDBEnv::CDBEnv()\n+CDBEnv::CDBEnv(const fs::path& dir_path) : strPath(dir_path.string())\n {\n     Reset();\n }\n \n CDBEnv::~CDBEnv()\n {\n-    EnvShutdown();\n+    Close();\n }\n \n-void CDBEnv::Close()\n-{\n-    EnvShutdown();\n-}\n-\n-bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n+bool CDBEnv::Open(bool retry)\n {\n     if (fDbEnvInit)\n         return true;\n \n     boost::this_thread::interruption_point();\n \n-    strPath = pathIn.string();\n+    fs::path pathIn = strPath;\n+    TryCreateDirectories(pathIn);\n     if (!LockDirectory(pathIn, \".walletlock\")) {\n         LogPrintf(\"Cannot obtain a lock on wallet directory %s. Another instance of bitcoin may be using it.\\n\", strPath);\n         return false;\n@@ -150,7 +181,7 @@ bool CDBEnv::Open(const fs::path& pathIn, bool retry)\n                 // failure is ok (well, not really, but it's not worse than what we started with)\n             }\n             // try opening it again one more time\n-            if (!Open(pathIn, false)) {\n+            if (!Open(false /* retry */)) {\n                 // if it still fails, it probably means we can't even create the database env\n                 return false;\n             }\n@@ -209,12 +240,15 @@ CDBEnv::VerifyResult CDBEnv::Verify(const std::string& strFile, recoverFunc_type\n         return RECOVER_FAIL;\n \n     // Try to recover:\n-    bool fRecovered = (*recoverFunc)(strFile, out_backup_filename);\n+    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool CDB::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n+    std::string filename;\n+    CDBEnv* env = GetWalletEnv(file_path, filename);\n+\n     // Recovery procedure:\n     // move wallet file to walletfilename.timestamp.bak\n     // Call Salvage with fAggressive=true to\n@@ -225,7 +259,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     int64_t now = GetTime();\n     newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n-    int result = bitdb.dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n     if (result == 0)\n         LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n@@ -236,15 +270,15 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     }\n \n     std::vector<CDBEnv::KeyValPair> salvagedData;\n-    bool fSuccess = bitdb.Salvage(newFilename, true, salvagedData);\n+    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n         return false;\n     }\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(bitdb.dbenv.get(), 0);\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n     int ret = pdbCopy->open(nullptr,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -257,7 +291,7 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n         return false;\n     }\n \n-    DbTxn* ptxn = bitdb.TxnBegin();\n+    DbTxn* ptxn = env->TxnBegin();\n     for (CDBEnv::KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n@@ -279,8 +313,12 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n@@ -291,20 +329,24 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walle\n         return false;\n     }\n \n-    if (!bitdb.Open(walletDir, true)) {\n+    if (!env->Open(true /* retry */)) {\n         errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n         return false;\n     }\n \n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n+    std::string walletFile;\n+    CDBEnv* env = GetWalletEnv(file_path, walletFile);\n+    fs::path walletDir = env->Directory();\n+\n     if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n-        CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n+        CDBEnv::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n         if (r == CDBEnv::RECOVER_OK)\n         {\n             warningStr = strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n@@ -414,8 +456,8 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         nFlags |= DB_CREATE;\n \n     {\n-        LOCK(env->cs_db);\n-        if (!env->Open(GetWalletDir()))\n+        LOCK(cs_db);\n+        if (!env->Open(false /* retry */))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -442,7 +484,25 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n-            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n+\n+            // Call CheckUniqueFileid on the containing BDB environment to\n+            // avoid BDB data consistency bugs that happen when different data\n+            // files in the same environment have the same fileid.\n+            //\n+            // Also call CheckUniqueFileid on all the other g_dbenvs to prevent\n+            // bitcoin from opening the same data file through another\n+            // environment when the file is referenced through equivalent but\n+            // not obviously identical symlinked or hard linked or bind mounted\n+            // paths. In the future a more relaxed check for equal inode and\n+            // device ids could be done instead, which would allow opening\n+            // different backup copies of a wallet at the same time. Maybe even\n+            // more ideally, an exclusive lock for accessing the database could\n+            // be implemented, so no equality checks are needed at all. (Newer\n+            // versions of BDB have an set_lk_exclusive method for this\n+            // purpose, but the older version we use does not.)\n+            for (auto& env : g_dbenvs) {\n+                CheckUniqueFileid(env.second, strFilename, *pdb_temp);\n+            }\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;\n@@ -490,7 +550,7 @@ void CDB::Close()\n         Flush();\n \n     {\n-        LOCK(env->cs_db);\n+        LOCK(cs_db);\n         --env->mapFileUseCount[strFile];\n     }\n }\n@@ -518,7 +578,7 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n     const std::string& strFile = dbw.strFile;\n     while (true) {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n@@ -646,7 +706,7 @@ bool CDB::PeriodicFlush(CWalletDBWrapper& dbw)\n     bool ret = false;\n     CDBEnv *env = dbw.env;\n     const std::string& strFile = dbw.strFile;\n-    TRY_LOCK(bitdb.cs_db,lockDb);\n+    TRY_LOCK(cs_db, lockDb);\n     if (lockDb)\n     {\n         // Don't do this if any databases are in use\n@@ -694,7 +754,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n     while (true)\n     {\n         {\n-            LOCK(env->cs_db);\n+            LOCK(cs_db);\n             if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n             {\n                 // Flush log data to the dat file"
      },
      {
        "sha": "b1ce451534565566c4129f423fe46b0b03ee595c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 38,
        "deletions": 17,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -11,6 +11,7 @@\n #include <serialize.h>\n #include <streams.h>\n #include <sync.h>\n+#include <util.h>\n #include <version.h>\n \n #include <atomic>\n@@ -32,20 +33,19 @@ class CDBEnv\n     // shutdown problems/crashes caused by a static initialized internal pointer.\n     std::string strPath;\n \n-    void EnvShutdown();\n-\n public:\n-    mutable CCriticalSection cs_db;\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, Db*> mapDb;\n \n-    CDBEnv();\n+    CDBEnv(const fs::path& env_directory);\n     ~CDBEnv();\n     void Reset();\n \n     void MakeMock();\n     bool IsMock() const { return fMockDb; }\n+    bool IsInitialized() const { return fDbEnvInit; }\n+    fs::path Directory() const { return strPath; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,\n@@ -56,7 +56,7 @@ class CDBEnv\n     enum VerifyResult { VERIFY_OK,\n                         RECOVER_OK,\n                         RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const std::string& strFile, std::string& out_backup_filename);\n+    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n     VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n     /**\n      * Salvage data from a file that Verify says is bad.\n@@ -68,7 +68,7 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const fs::path& path, bool retry = 0);\n+    bool Open(bool retry);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n@@ -85,7 +85,8 @@ class CDBEnv\n     }\n };\n \n-extern CDBEnv bitdb;\n+/** Get CDBEnv and database filename given a wallet path. */\n+CDBEnv* GetWalletEnv(const fs::path& wallet_path, std::string& database_filename);\n \n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n@@ -100,9 +101,33 @@ class CWalletDBWrapper\n     }\n \n     /** Create DB handle to real database */\n-    CWalletDBWrapper(CDBEnv *env_in, const std::string &strFile_in) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(env_in), strFile(strFile_in)\n+    CWalletDBWrapper(const fs::path& wallet_path, bool mock = false) :\n+        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0)\n     {\n+        env = GetWalletEnv(wallet_path, strFile);\n+        if (mock) {\n+            env->Close();\n+            env->Reset();\n+            env->MakeMock();\n+        }\n+    }\n+\n+    /** Return object for accessing database at specified path. */\n+    static std::unique_ptr<CWalletDBWrapper> Create(const fs::path& path)\n+    {\n+        return MakeUnique<CWalletDBWrapper>(path);\n+    }\n+\n+    /** Return object for accessing dummy database with no read/write capabilities. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateDummy()\n+    {\n+        return MakeUnique<CWalletDBWrapper>();\n+    }\n+\n+    /** Return object for accessing temporary in-memory database. */\n+    static std::unique_ptr<CWalletDBWrapper> CreateMock()\n+    {\n+        return MakeUnique<CWalletDBWrapper>(\"\", true /* mock */);\n     }\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n@@ -113,10 +138,6 @@ class CWalletDBWrapper\n      */\n     bool Backup(const std::string& strDest);\n \n-    /** Get a name for this database, for debugging etc.\n-     */\n-    std::string GetName() const { return strFile; }\n-\n     /** Make sure all changes are flushed to disk.\n      */\n     void Flush(bool shutdown);\n@@ -161,15 +182,15 @@ class CDB\n \n     void Flush();\n     void Close();\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>\n@@ -329,7 +350,7 @@ class CDB\n     {\n         if (!pdb || activeTxn)\n             return false;\n-        DbTxn* ptxn = bitdb.TxnBegin();\n+        DbTxn* ptxn = env->TxnBegin();\n         if (!ptxn)\n             return false;\n         activeTxn = ptxn;"
      },
      {
        "sha": "e028cf4210b6551d45b39f0ba0ca5216e665b215",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 18,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -35,7 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-wallet=<path>\", _(\"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\"));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n     strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n@@ -66,7 +66,7 @@ bool WalletParameterInteraction()\n         return true;\n     }\n \n-    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    gArgs.SoftSetArg(\"-wallet\", \"\");\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n \n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n@@ -230,40 +230,44 @@ bool VerifyWallets()\n     std::set<fs::path> wallet_paths;\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        if (boost::filesystem::path(walletFile).filename() != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet parameter must only specify a filename (not a path).\"), walletFile));\n-        }\n-\n-        if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n-        }\n-\n+        // Do some checking on wallet path. It should be either a:\n+        //\n+        // 1. Path where a directory can be created.\n+        // 2. Path to an existing directory.\n+        // 3. Path to a symlink to a directory.\n+        // 4. For backwards compatibility, the name of a data file in -walletdir.\n         fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n-\n-        if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n+        fs::file_type path_type = fs::symlink_status(wallet_path).type();\n+        if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n+              (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n+              (path_type == fs::regular_file && fs::path(walletFile).filename() == walletFile))) {\n+            return InitError(strprintf(\n+                _(\"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n+                  \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n+                  \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\"),\n+                walletFile, GetWalletDir()));\n         }\n \n         if (!wallet_paths.insert(wallet_path).second) {\n             return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), walletFile));\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(wallet_path, strError)) {\n             return InitError(strError);\n         }\n \n         if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n             // Recover readable keypairs:\n-            CWallet dummyWallet;\n+            CWallet dummyWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n             std::string backup_filename;\n-            if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n+            if (!CWalletDB::Recover(wallet_path, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n                 return false;\n             }\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(wallet_path, strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }\n@@ -284,7 +288,7 @@ bool OpenWallets()\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n+        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile, fs::absolute(walletFile, GetWalletDir()));\n         if (!pwallet) {\n             return false;\n         }"
      },
      {
        "sha": "7b20bd7b0212706644cb400deb5c728d747ee74d",
        "filename": "src/wallet/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/accounting_tests.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -13,13 +13,13 @@\n BOOST_FIXTURE_TEST_SUITE(accounting_tests, WalletTestingSetup)\n \n static void\n-GetResults(CWallet *wallet, std::map<CAmount, CAccountingEntry>& results)\n+GetResults(CWallet& wallet, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n     results.clear();\n-    BOOST_CHECK(wallet->ReorderTransactions() == DB_LOAD_OK);\n-    wallet->ListAccountCreditDebit(\"\", aes);\n+    BOOST_CHECK(wallet.ReorderTransactions() == DB_LOAD_OK);\n+    wallet.ListAccountCreditDebit(\"\", aes);\n     for (CAccountingEntry& ae : aes)\n     {\n         results[ae.nOrderPos] = ae;\n@@ -33,28 +33,28 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     CAccountingEntry ae;\n     std::map<CAmount, CAccountingEntry> results;\n \n-    LOCK(pwalletMain->cs_wallet);\n+    LOCK(m_wallet.cs_wallet);\n \n     ae.strAccount = \"\";\n     ae.nCreditDebit = 1;\n     ae.nTime = 1333333333;\n     ae.strOtherAccount = \"b\";\n     ae.strComment = \"\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n     wtx.mapValue[\"comment\"] = \"z\";\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[0]->nTimeReceived = (unsigned int)1333333335;\n     vpwtx[0]->nOrderPos = -1;\n \n     ae.nTime = 1333333336;\n     ae.strOtherAccount = \"c\";\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 3);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 3);\n     BOOST_CHECK(2 == results.size());\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(results[0].strComment.empty());\n@@ -65,13 +65,13 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n \n     ae.nTime = 1333333330;\n     ae.strOtherAccount = \"d\";\n-    ae.nOrderPos = pwalletMain->IncOrderPosNext();\n-    pwalletMain->AddAccountingEntry(ae);\n+    ae.nOrderPos = m_wallet.IncOrderPosNext();\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 4);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 4);\n     BOOST_CHECK(results[0].nTime == 1333333333);\n     BOOST_CHECK(1 == vpwtx[0]->nOrderPos);\n     BOOST_CHECK(results[2].nTime == 1333333336);\n@@ -85,8 +85,8 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[1]->nTimeReceived = (unsigned int)1333333336;\n \n     wtx.mapValue[\"comment\"] = \"x\";\n@@ -95,15 +95,15 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n         ++tx.nLockTime;  // Just to change the hash :)\n         wtx.SetTx(MakeTransactionRef(std::move(tx)));\n     }\n-    pwalletMain->AddToWallet(wtx);\n-    vpwtx.push_back(&pwalletMain->mapWallet[wtx.GetHash()]);\n+    m_wallet.AddToWallet(wtx);\n+    vpwtx.push_back(&m_wallet.mapWallet[wtx.GetHash()]);\n     vpwtx[2]->nTimeReceived = (unsigned int)1333333329;\n     vpwtx[2]->nOrderPos = -1;\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 3);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 6);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 6);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);\n@@ -116,12 +116,12 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     ae.nTime = 1333333334;\n     ae.strOtherAccount = \"e\";\n     ae.nOrderPos = -1;\n-    pwalletMain->AddAccountingEntry(ae);\n+    m_wallet.AddAccountingEntry(ae);\n \n-    GetResults(pwalletMain.get(), results);\n+    GetResults(m_wallet, results);\n \n     BOOST_CHECK(results.size() == 4);\n-    BOOST_CHECK(pwalletMain->nOrderPosNext == 7);\n+    BOOST_CHECK(m_wallet.nOrderPosNext == 7);\n     BOOST_CHECK(0 == vpwtx[2]->nOrderPos);\n     BOOST_CHECK(results[1].nTime == 1333333333);\n     BOOST_CHECK(2 == vpwtx[0]->nOrderPos);"
      },
      {
        "sha": "77ccd0b8d8d8eb12bbdfe08e209aacf44859e064",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 10,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -6,26 +6,21 @@\n \n #include <rpc/server.h>\n #include <wallet/db.h>\n+#include <wallet/wallet.h>\n \n WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n-    TestingSetup(chainName)\n+    TestingSetup(chainName), m_wallet(\"mock\", CWalletDBWrapper::CreateMock())\n {\n-    bitdb.MakeMock();\n     bool fFirstRun;\n     g_address_type = OUTPUT_TYPE_DEFAULT;\n     g_change_type = OUTPUT_TYPE_DEFAULT;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n-    pwalletMain = MakeUnique<CWallet>(std::move(dbw));\n-    pwalletMain->LoadWallet(fFirstRun);\n-    RegisterValidationInterface(pwalletMain.get());\n+    m_wallet.LoadWallet(fFirstRun);\n+    RegisterValidationInterface(&m_wallet);\n \n     RegisterWalletRPCCommands(tableRPC);\n }\n \n WalletTestingSetup::~WalletTestingSetup()\n {\n-    UnregisterValidationInterface(pwalletMain.get());\n-\n-    bitdb.Flush(true);\n-    bitdb.Reset();\n+    UnregisterValidationInterface(&m_wallet);\n }"
      },
      {
        "sha": "663836a95525cd0a267fe2a64c0e2c1aa79e3211",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -15,7 +15,7 @@ struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~WalletTestingSetup();\n \n-    std::unique_ptr<CWallet> pwalletMain;\n+    CWallet m_wallet;\n };\n \n #endif"
      },
      {
        "sha": "41348b50a4af2e8191f28ce46bc4f782c027f588",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 24,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -36,7 +36,7 @@ typedef std::set<CInputCoin> CoinSet;\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static const CWallet testWallet;\n+static const CWallet testWallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n static std::vector<COutput> vCoins;\n \n static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n@@ -382,7 +382,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -397,7 +397,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // Verify ScanForWalletTransactions only picks transactions in the new block\n     // file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n@@ -409,7 +409,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         vpwallets.insert(vpwallets.begin(), &wallet);\n         UniValue keys;\n         keys.setArray();\n@@ -471,7 +471,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n         LOCK(wallet.cs_wallet);\n         wallet.mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n         wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n@@ -486,7 +486,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        CWallet wallet;\n+        CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n \n         JSONRPCRequest request;\n         request.params.setArray();\n@@ -516,7 +516,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    CWallet wallet;\n+    CWallet wallet(\"dummy\", CWalletDBWrapper::CreateDummy());\n     CWalletTx wtx(&wallet, MakeTransactionRef(coinbaseTxns.back()));\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n@@ -562,27 +562,25 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n // expanded to cover more corner cases of smart time logic.\n BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n {\n-    CWallet wallet;\n-\n     // New transaction should use clock time if lower than block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 100, 120), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 100, 120), 100);\n \n     // Test that updating existing transaction does not change smart time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 1, 200, 220), 100);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 1, 200, 220), 100);\n \n     // New transaction should use clock time if there's no block time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 2, 300, 0), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 2, 300, 0), 300);\n \n     // New transaction should use block time if lower than clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 3, 420, 400), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 3, 420, 400), 400);\n \n     // New transaction should use latest entry time if higher than\n     // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 4, 500, 390), 400);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 4, 500, 390), 400);\n \n     // If there are future entries, new transaction should use time of the\n     // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 300);\n+    BOOST_CHECK_EQUAL(AddTx(m_wallet, 5, 50, 600), 300);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);\n@@ -591,12 +589,12 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n-    LOCK(pwalletMain->cs_wallet);\n-    pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n-    pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n-    pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n+    LOCK(m_wallet.cs_wallet);\n+    m_wallet.AddDestData(dest, \"misc\", \"val_misc\");\n+    m_wallet.AddDestData(dest, \"rr0\", \"val_rr0\");\n+    m_wallet.AddDestData(dest, \"rr1\", \"val_rr1\");\n \n-    auto values = pwalletMain->GetDestValues(\"rr\");\n+    auto values = m_wallet.GetDestValues(\"rr\");\n     BOOST_CHECK_EQUAL(values.size(), 2);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n@@ -608,10 +606,9 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ListCoinsTestingSetup()\n     {\n         CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        ::bitdb.MakeMock();\n         g_address_type = OUTPUT_TYPE_DEFAULT;\n         g_change_type = OUTPUT_TYPE_DEFAULT;\n-        wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n+        wallet = MakeUnique<CWallet>(\"mock\", CWalletDBWrapper::CreateMock());\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n@@ -623,8 +620,6 @@ class ListCoinsTestingSetup : public TestChain100Setup\n     ~ListCoinsTestingSetup()\n     {\n         wallet.reset();\n-        ::bitdb.Flush(true);\n-        ::bitdb.Reset();\n     }\n \n     CWalletTx& AddTx(CRecipient recipient)"
      },
      {
        "sha": "0c468878e11d3342f9893b169887ddaa41b249fa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -45,7 +45,6 @@ OutputType g_address_type = OUTPUT_TYPE_NONE;\n OutputType g_change_type = OUTPUT_TYPE_NONE;\n bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n \n-const char * DEFAULT_WALLET_DAT = \"wallet.dat\";\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n /**\n@@ -3908,16 +3907,17 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n+CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path& path)\n {\n+    const std::string& walletFile = name;\n+\n     // needed to restore wallet transaction meta data after -zapwallettxes\n     std::vector<CWalletTx> vWtx;\n \n     if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n         uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n \n-        std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(std::move(dbw));\n+        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(name, CWalletDBWrapper::Create(path));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n             InitError(strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile));\n@@ -3929,8 +3929,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n-    std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, walletFile));\n-    CWallet *walletInstance = new CWallet(std::move(dbw));\n+    CWallet *walletInstance = new CWallet(name, CWalletDBWrapper::Create(path));\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {"
      },
      {
        "sha": "3e2d1794d89fa186476afed518b7d074a95487c0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 19,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -15,6 +15,7 @@\n #include <validationinterface.h>\n #include <script/ismine.h>\n #include <script/sign.h>\n+#include <util.h>\n #include <wallet/crypter.h>\n #include <wallet/walletdb.h>\n #include <wallet/rpcwallet.h>\n@@ -67,8 +68,6 @@ static const bool DEFAULT_WALLET_RBF = false;\n static const bool DEFAULT_WALLETBROADCAST = true;\n static const bool DEFAULT_DISABLE_WALLET = false;\n \n-extern const char * DEFAULT_WALLET_DAT;\n-\n static const int64_t TIMESTAMP_MIN = 0;\n \n class CBlockIndex;\n@@ -737,6 +736,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool AddWatchOnly(const CScript& dest) override;\n \n+    /**\n+     * Wallet filename from wallet=<path> command line or config option.\n+     * Used in debug logs and to send RPCs to the right wallet instance when\n+     * more than one wallet is loaded.\n+     */\n+    std::string m_name;\n+\n+    /** Internal database handle. */\n     std::unique_ptr<CWalletDBWrapper> dbw;\n \n     /**\n@@ -768,14 +775,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n-    std::string GetName() const\n-    {\n-        if (dbw) {\n-            return dbw->GetName();\n-        } else {\n-            return \"dummy\";\n-        }\n-    }\n+    const std::string& GetName() const { return m_name; }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n@@ -789,14 +789,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n-    // Create wallet with dummy database handle\n-    CWallet(): dbw(new CWalletDBWrapper())\n-    {\n-        SetNull();\n-    }\n-\n-    // Create wallet with passed-in database handle\n-    explicit CWallet(std::unique_ptr<CWalletDBWrapper> dbw_in) : dbw(std::move(dbw_in))\n+    /** Construct wallet with specified name and database implementation. */\n+    CWallet(std::string name, std::unique_ptr<CWalletDBWrapper> dbw) : m_name(std::move(name)), dbw(std::move(dbw))\n     {\n         SetNull();\n     }\n@@ -1116,7 +1110,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static CWallet* CreateWalletFromFile(const std::string walletFile);\n+    static CWallet* CreateWalletFromFile(const std::string& name, const fs::path& path);\n \n     /**\n      * Wallet post-init setup"
      },
      {
        "sha": "0b0880a2bae17d40f0dee04c4252b7d93e20749e",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -771,16 +771,16 @@ void MaybeCompactWalletDB()\n //\n // Try to (very carefully!) recover wallet file if there is a problem.\n //\n-bool CWalletDB::Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n {\n-    return CDB::Recover(filename, callbackDataIn, recoverKVcallback, out_backup_filename);\n+    return CDB::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n }\n \n-bool CWalletDB::Recover(const std::string& filename, std::string& out_backup_filename)\n+bool CWalletDB::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n {\n     // recover without a key filter callback\n     // results in recovering all record types\n-    return CWalletDB::Recover(filename, nullptr, nullptr, out_backup_filename);\n+    return CWalletDB::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n }\n \n bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n@@ -806,14 +806,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n+    return CDB::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(wallet_path, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "7d754c728405bfc0a694b55f57532b6b7a55db9a",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -218,17 +218,17 @@ class CWalletDB\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n     /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const std::string& filename, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n     /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const std::string& filename, std::string& out_backup_filename);\n+    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n     /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n     static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "c6cec0596b6b787a03bc6fde10b88fd2a6751a58",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -37,13 +37,13 @@ def run_test(self):\n         os.mkdir(new_data_dir)\n         self.start_node(0, ['-conf='+conf_file, '-wallet=w1'])\n         self.stop_node(0)\n-        assert os.path.isfile(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n+        assert os.path.exists(os.path.join(new_data_dir, 'regtest', 'wallets', 'w1'))\n \n         # Ensure command line argument overrides datadir in conf\n         os.mkdir(new_data_dir_2)\n         self.nodes[0].datadir = new_data_dir_2\n         self.start_node(0, ['-datadir='+new_data_dir_2, '-conf='+conf_file, '-wallet=w2'])\n-        assert os.path.isfile(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n+        assert os.path.exists(os.path.join(new_data_dir_2, 'regtest', 'wallets', 'w2'))\n \n if __name__ == '__main__':\n     ConfArgsTest().main()"
      },
      {
        "sha": "378c06ee595219a54ac8d1268528af7c3f799d54",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 48,
        "deletions": 35,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "patch": "@@ -16,7 +16,6 @@ class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3', '-wallet=w'], []]\n         self.supports_cli = True\n \n     def run_test(self):\n@@ -26,9 +25,42 @@ def run_test(self):\n         wallet_dir = lambda *p: data_dir('wallets', *p)\n         wallet = lambda name: node.get_wallet_rpc(name)\n \n-        assert_equal(set(node.listwallets()), {\"w1\", \"w2\", \"w3\", \"w\"})\n-\n+        # check wallet.dat is created\n         self.stop_nodes()\n+        assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n+\n+        # create symlink to verify wallet directory path can be referenced\n+        # through symlink\n+        os.mkdir(wallet_dir('w7'))\n+        os.symlink('w7', wallet_dir('w7_symlink'))\n+\n+        # rename wallet.dat to make sure plain wallet file paths (as opposed to\n+        # directory paths) can be loaded\n+        os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n+\n+        # restart node with a mix of wallet names:\n+        #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n+        #   w          - to verify wallet name matching works when one wallet path is prefix of another\n+        #   sub/w5     - to verify relative wallet path is created correctly\n+        #   extern/w6  - to verify absolute wallet path is created correctly\n+        #   w7_symlink - to verify symlinked wallet path is initialized correctly\n+        #   w8         - to verify existing wallet file is loaded correctly\n+        #   ''         - to verify default wallet file is created correctly\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n+        extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n+        self.start_node(0, extra_args)\n+        assert_equal(set(node.listwallets()), set(wallet_names))\n+\n+        # check that all requested wallets were created\n+        self.stop_node(0)\n+        for wallet_name in wallet_names:\n+            if os.path.isdir(wallet_dir(wallet_name)):\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name, \"wallet.dat\")), True)\n+            else:\n+                assert_equal(os.path.isfile(wallet_dir(wallet_name)), True)\n+\n+        # should not initialize if wallet path can't be created\n+        self.assert_start_raises_init_error(0, ['-wallet=wallet.dat/bad'], 'Not a directory')\n \n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -37,17 +69,13 @@ def run_test(self):\n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n-        # should not initialize if wallet file is a directory\n-        os.mkdir(wallet_dir('w11'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n-\n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(wallet_dir('w2'), wallet_dir('w22'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+        shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8', '-wallet=w8_copy'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(wallet_dir('w1'), wallet_dir('w12'))\n-        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        os.symlink('w8', wallet_dir('w8_symlink'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w8_symlink'], 'Invalid -wallet path')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -77,40 +105,25 @@ def run_test(self):\n         self.restart_node(0, ['-walletdir='+competing_wallet_dir])\n         self.assert_start_raises_init_error(1, ['-walletdir='+competing_wallet_dir], 'Error initializing wallet database environment')\n \n-        self.restart_node(0, self.extra_args[0])\n+        self.restart_node(0, extra_args)\n \n-        w1 = wallet(\"w1\")\n-        w2 = wallet(\"w2\")\n-        w3 = wallet(\"w3\")\n-        w4 = wallet(\"w\")\n+        wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n \n-        w1.generate(1)\n+        # check wallet names and balances\n+        wallets[0].generate(1)\n+        for wallet_name, wallet in zip(wallet_names, wallets):\n+            info = wallet.getwalletinfo()\n+            assert_equal(info['immature_balance'], 50 if wallet is wallets[0] else 0)\n+            assert_equal(info['walletname'], wallet_name)\n \n         # accessing invalid wallet fails\n         assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n-        # check w1 wallet balance\n-        w1_info = w1.getwalletinfo()\n-        assert_equal(w1_info['immature_balance'], 50)\n-        w1_name = w1_info['walletname']\n-        assert_equal(w1_name, \"w1\")\n-\n-        # check w2 wallet balance\n-        w2_info = w2.getwalletinfo()\n-        assert_equal(w2_info['immature_balance'], 0)\n-        w2_name = w2_info['walletname']\n-        assert_equal(w2_name, \"w2\")\n-\n-        w3_name = w3.getwalletinfo()['walletname']\n-        assert_equal(w3_name, \"w3\")\n-\n-        w4_name = w4.getwalletinfo()['walletname']\n-        assert_equal(w4_name, \"w\")\n-\n+        w1, w2, w3, w4, *_ = wallets\n         w1.generate(101)\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)"
      }
    ]
  },
  {
    "sha": "842f61a675db014b3226c78d68a87b2de633d28c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDJmNjFhNjc1ZGIwMTRiMzIyNmM3OGQ2OGE4N2IyZGU2MzNkMjhj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:17:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:18:14Z"
      },
      "message": "Merge #11900: [script] simplify CheckMinimalPush checks, add safety assert\n\n0749808a7 CheckMinimalPush comments are prescriptive (Gregory Sanders)\n176db6147 simplify CheckMinimalPush checks, add safety assert (Gregory Sanders)\n\nPull request description:\n\n  the two conditions could simply never be hit as `true`, as those opcodes have a push payload of size 0 in `data`.\n\n  Added the assert for clarity for future readers(matching the gating in the interpreter) and safety for future use.\n\n  This effects policy only.\n\nTree-SHA512: f49028a1d5e907ef697b9bf5104c81ba8f6a331dbe5d60d8d8515ac17d2d6bfdc9dcc856a7e3dbd54814871b7d0695584d28da6553e2d9d7715430223f0b3690",
      "tree": {
        "sha": "6882d49854e45585ad043ce718bd0f245a913a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6882d49854e45585ad043ce718bd0f245a913a6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/842f61a675db014b3226c78d68a87b2de633d28c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoBDGAAoJEB5K7WKYbNJdGRUH/RAKhh8bazVp6q0Sghma0CkY\nPuXKlj1yu8/J25P2NVxBZTR/rcyyNMVV1UicXgB9SV8kbkelSuVt5j6VR3V1aW/B\npytboXiDC1hFKSAkZ/IgdieLi1ojYxMQIZrs10mTz5vtokURwZY5GhZ/Th+GTlCH\n0o9yDSXRHKX7yUvgje6KTQBcLDGNIBxPSpdKYpREdOj5cF/bn8qMNRoOzMX1EiO0\nH+2ViBkBgk5S4+OuvLQ+msA949tv98r2RgEUdyNoTH2GHcUsxCzcnQZ37PZNgMLy\nZ98siwHV06kHFLBDyZ99ByN7LFo1fKHCL7lDrdVcBlM/aKFmSPFzYmJsocSBGbg=\n=IVCB\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEWKwvRbzxb3I8RrzgjQ8hjHrYGlAm4yyxx9b5vvhW3oCP/wED6NGKBGZFr6\nKzjxnzCBnq4I8SDSACYAjVErf8FEzPFRWlqDOOpsOdlqFlAQivvG0z/tbAjxIAVe\nFqVF/PRwrlvyppKMFxVJwcNiv9RjF83Jm1RGp/WACPEEWqAQyPAIDQBO/fesr4cA\ng9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmf/8BBaa7A3luItxfr6kQ/TnbudCPEgSFfCeF7NLTpnt2NWhn9mPpd6LIcN\n9QlqGnmCfegQWXoI8SDUa/taWzNpKC0qF9c5CblHf90kX63/qHcDlaNGQK/ZtAjx\nBFqgEMjwCLZeJyA2HEGiAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxl\nbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEP9vLYxxRldT++KmZRPV8gMI8CBmZUaj\nIn3X/53TM+vtU03bBDtXUxOrb08AQpde74axGwjwIJWpI7KP+FrblrcfKaMdzLW4\nrPa+I4tRwzb3RoJT+wKkCPEEWqAQyfAIje9rn+httWgAg9/jDS75DI4pKGh0dHBz\nOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6882d49854e45585ad043ce718bd0f245a913a6d\nparent 98bc27fb5998a04ea0a6c08a582cfc5fa020cee9\nparent 0749808a7fc31250abfbc8c61963065e0d320824\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520439429 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520439494 +0100\n\nMerge #11900: [script] simplify CheckMinimalPush checks, add safety assert\n\n0749808a7 CheckMinimalPush comments are prescriptive (Gregory Sanders)\n176db6147 simplify CheckMinimalPush checks, add safety assert (Gregory Sanders)\n\nPull request description:\n\n  the two conditions could simply never be hit as `true`, as those opcodes have a push payload of size 0 in `data`.\n\n  Added the assert for clarity for future readers(matching the gating in the interpreter) and safety for future use.\n\n  This effects policy only.\n\nTree-SHA512: f49028a1d5e907ef697b9bf5104c81ba8f6a331dbe5d60d8d8515ac17d2d6bfdc9dcc856a7e3dbd54814871b7d0695584d28da6553e2d9d7715430223f0b3690\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842f61a675db014b3226c78d68a87b2de633d28c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/842f61a675db014b3226c78d68a87b2de633d28c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842f61a675db014b3226c78d68a87b2de633d28c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98bc27fb5998a04ea0a6c08a582cfc5fa020cee9"
      },
      {
        "sha": "0749808a7fc31250abfbc8c61963065e0d320824",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0749808a7fc31250abfbc8c61963065e0d320824",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0749808a7fc31250abfbc8c61963065e0d320824"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "927b0267ca104be2be87517eb916b74a937e1535",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/842f61a675db014b3226c78d68a87b2de633d28c/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/842f61a675db014b3226c78d68a87b2de633d28c/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=842f61a675db014b3226c78d68a87b2de633d28c",
        "patch": "@@ -226,23 +226,25 @@ bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, co\n }\n \n bool static CheckMinimalPush(const valtype& data, opcodetype opcode) {\n+    // Excludes OP_1NEGATE, OP_1-16 since they are by definition minimal\n+    assert(0 <= opcode && opcode <= OP_PUSHDATA4);\n     if (data.size() == 0) {\n-        // Could have used OP_0.\n+        // Should have used OP_0.\n         return opcode == OP_0;\n     } else if (data.size() == 1 && data[0] >= 1 && data[0] <= 16) {\n-        // Could have used OP_1 .. OP_16.\n-        return opcode == OP_1 + (data[0] - 1);\n+        // Should have used OP_1 .. OP_16.\n+        return false;\n     } else if (data.size() == 1 && data[0] == 0x81) {\n-        // Could have used OP_1NEGATE.\n-        return opcode == OP_1NEGATE;\n+        // Should have used OP_1NEGATE.\n+        return false;\n     } else if (data.size() <= 75) {\n-        // Could have used a direct push (opcode indicating number of bytes pushed + those bytes).\n+        // Must have used a direct push (opcode indicating number of bytes pushed + those bytes).\n         return opcode == data.size();\n     } else if (data.size() <= 255) {\n-        // Could have used OP_PUSHDATA.\n+        // Must have used OP_PUSHDATA.\n         return opcode == OP_PUSHDATA1;\n     } else if (data.size() <= 65535) {\n-        // Could have used OP_PUSHDATA2.\n+        // Must have used OP_PUSHDATA2.\n         return opcode == OP_PUSHDATA2;\n     }\n     return true;"
      }
    ]
  },
  {
    "sha": "efa18a230d48745d9b357bf026592163716ffd7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmExOGEyMzBkNDg3NDVkOWIzNTdiZjAyNjU5MjE2MzcxNmZmZDdl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:40:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:43:35Z"
      },
      "message": "Merge #12626: Limit the number of IPs addrman learns from each DNS seeder\n\n46e7f800b Limit the number of IPs we use from each DNS seeder (e0)\n\nPull request description:\n\n  A risk exists where a malicious DNS seeder eclipses a node by returning an enormous number of IP addresses. In this commit we mitigate this risk by limiting the number of IP addresses addrman learns to 256 per DNS seeder.\n\n  As discussed with @theuni\n\nTree-SHA512: 949e870765b1470200f2c650341d9e3308a973a7d1a6e557b944b0a2b8ccda49226fc8c4ff7d2a05e5854c4014ec0b67e37a3f2287556fe7dfa2048ede1f2e6f",
      "tree": {
        "sha": "6b95380b17ff3c1a5767da57b350659ad6f817f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b95380b17ff3c1a5767da57b350659ad6f817f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efa18a230d48745d9b357bf026592163716ffd7e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoBa3AAoJEB5K7WKYbNJdUq8IAL5UR6QKxuGW5HITGWEjqexr\nwixEFXfLlGlVaFsBBDZVwTmPnLV3haAPo8z6jFR/zbUwVkZ5scJUvIRWpaMOxAQ/\nVGWq6h9QLEU5dt3M0UOoRaIy2tPm8VdNgnFtJyUgubOTUv4CS919JdOoS9faFxrD\nGoSNKSOoN/5jtagp5rpDDMP2q9Riot4H+Y6sCYRgcrS/Tk1IgOr4ScaKbA72Z77j\n/eMUnokfMpYrv9iEWkzgybblaMVKQK5rCUEUSu0hkEvlWDR8NrPjdGUKskAyVfCD\nqN/pcTbngG0Hn3EfNaNA7+NPU3Ngyq+/pfCsaXKTJqf34FLnWV/sQ0ekq2+F9f0=\n=ASaX\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIC5nC9WQgqxTLo0kck9jd13Q3tlf5N7ZaaHGZLoM2gN5CP/wEBWuXEcnQ3pf\n6KCZaIcUSpYI8QRaoBbN8Agv+T0y2Skr0QCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQZMErwDHvB2DI1rkv\nI65SxAjxIKLlfG8xcg2I0JqASJneP5PFCOK81+KpCzCSHYEIGouWCPEEWqAWzfAI\nTRk0Ci15ZPMAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb23wEIeP4ZEreRoSKUlTYOLet14I8CCDx+GeA1oqJ7PG+ZQWsMLg\nQIBI4qTC+HeiwwyzCAyl3AjwIKWTrXJpf3LntHY7wzIxd/EpBOHc8KTGeKG0lfqv\nBU3ICPEEWqAWzfAI8thZQS0oAUoAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6b95380b17ff3c1a5767da57b350659ad6f817f2\nparent 842f61a675db014b3226c78d68a87b2de633d28c\nparent 46e7f800bd78aa4d4de5915b4a7e5a3234c507d6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520440832 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520441015 +0100\n\nMerge #12626: Limit the number of IPs addrman learns from each DNS seeder\n\n46e7f800b Limit the number of IPs we use from each DNS seeder (e0)\n\nPull request description:\n\n  A risk exists where a malicious DNS seeder eclipses a node by returning an enormous number of IP addresses. In this commit we mitigate this risk by limiting the number of IP addresses addrman learns to 256 per DNS seeder.\n\n  As discussed with @theuni\n\nTree-SHA512: 949e870765b1470200f2c650341d9e3308a973a7d1a6e557b944b0a2b8ccda49226fc8c4ff7d2a05e5854c4014ec0b67e37a3f2287556fe7dfa2048ede1f2e6f\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa18a230d48745d9b357bf026592163716ffd7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efa18a230d48745d9b357bf026592163716ffd7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa18a230d48745d9b357bf026592163716ffd7e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "842f61a675db014b3226c78d68a87b2de633d28c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/842f61a675db014b3226c78d68a87b2de633d28c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/842f61a675db014b3226c78d68a87b2de633d28c"
      },
      {
        "sha": "46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46e7f800bd78aa4d4de5915b4a7e5a3234c507d6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "33a60ac96efe8794c5e0f006c2f25dfbd61a6ce3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efa18a230d48745d9b357bf026592163716ffd7e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efa18a230d48745d9b357bf026592163716ffd7e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=efa18a230d48745d9b357bf026592163716ffd7e",
        "patch": "@@ -1631,7 +1631,8 @@ void CConnman::ThreadDNSAddressSeed()\n             if (!resolveSource.SetInternal(host)) {\n                 continue;\n             }\n-            if (LookupHost(host.c_str(), vIPs, 0, true))\n+            unsigned int nMaxIPs = 256; // Limits number of IPs learned from a DNS seed\n+            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true))\n             {\n                 for (const CNetAddr& ip : vIPs)\n                 {"
      }
    ]
  },
  {
    "sha": "a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzRhYzZhZTA3ODhiNTBlMTJkZDJjOGFjNTlkYmRhMmEwM2EzYzJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:44:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-07T16:47:46Z"
      },
      "message": "Merge #9598: Improve readability by removing redundant casts to same type (on all platforms)\n\n06edc23f7 Improve readability by removing redundant casts to same type (on all platforms) (practicalswift)\n\nPull request description:\n\n  Same binaries check under Linux:\n\n  ```\n  $ ../bitcoin-maintainer-tools/build-for-compare.py 874f13821f4193bd037cd37d005ee76b5a849398 82274c02ed2d82537dc55f008a29edb1bc09bbc4 --executables \"src/bitcoind,src/bitcoin-cli,src/bitcoin-tx\"\n\n  $ sha256sum /tmp/compare/*.stripped\n  1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n  342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n  e4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  e4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n\n  $ git diff -W --word-diff /tmp/compare/874f13821f4193bd037cd37d005ee76b5a849398 /tmp/compare/82274c02ed2d82537dc55f008a29edb1bc09bbc4\n\n  $\n  ```\n\nTree-SHA512: 13ca5862fbb03771682b04a7523e581a7fe62e73620fa0e141cf1bc0a3b3f4e2e66bf14b46d1228e2b11b4960153545e7476f3295713a69b5cf5a28a7c2b358d",
      "tree": {
        "sha": "6a537c4ff5bfc0021c874eb4626fd5519d0ea40e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a537c4ff5bfc0021c874eb4626fd5519d0ea40e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJaoBeyAAoJEB5K7WKYbNJdKCoH/in0/jGrMR9XdRgo6tfYk4AJ\nVgfLlVo6qpsvOfb++zRmgh6XoIWKU6170czMpzIMxCja0CSdQE3joFOLvvdB6bF0\nZJaDkyhiQkGF7glZvb31OI0rEiCL030+Uxgv4A0JKmUUxX2LyLvmMlCuK9UohfXv\nzidUhUvpk0z48/tvGJ1RrfOTzTbr+Xy+a+7oFLDadBtVhDvVW/e1+V+MyKSefPa/\nJUyxJ90M1mS9iV1XIf57Ubx7JfCR+gKsU3pMO38uz8vACJMgnPbTVK+i3cgmPEdV\nDouQjF/819VHsU92eH988DE1SHgxY3WE+9KrFFIIp8uH+a0hGh6YE9EUs4/RHO0=\n=1kzi\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIPUvla5iNHQM9LmttzWky5WgV5Bp6wXno2k+qrb00nEzCP/wEJBtaiBi9kbr\nsT1mIJQbrjII8SCNF2/FoNQkF+96curCaooIdCX26lppBy7wjJFsUOtQ0gjxBFqg\nF7TwCPntbS7xaJZaAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQoO+/rYP9cexYaDnnWnZh3QjwIIBr08AfMk5r8JYQ\naRtNc8QI5BNYooDHgOOE3cK8Qxn/CPEEWqAXtPAI2gEeysbe0ZMAg9/jDS75DI4s\nK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmfwEP73\nxCQXepF7065JgJAZx64I8QRaoBe08Ah0pBp0+yqLuwCD3+MNLvkMji4taHR0cHM6\nLy9hbGljZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 6a537c4ff5bfc0021c874eb4626fd5519d0ea40e\nparent efa18a230d48745d9b357bf026592163716ffd7e\nparent 06edc23f7409160adaaea5dd8d80b5dcaf696f99\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520441079 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520441266 +0100\n\nMerge #9598: Improve readability by removing redundant casts to same type (on all platforms)\n\n06edc23f7 Improve readability by removing redundant casts to same type (on all platforms) (practicalswift)\n\nPull request description:\n\n  Same binaries check under Linux:\n\n  ```\n  $ ../bitcoin-maintainer-tools/build-for-compare.py 874f13821f4193bd037cd37d005ee76b5a849398 82274c02ed2d82537dc55f008a29edb1bc09bbc4 --executables \"src/bitcoind,src/bitcoin-cli,src/bitcoin-tx\"\n\n  $ sha256sum /tmp/compare/*.stripped\n  1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  1fe1a8827474f7f24475ce3dc851e7ac658d4ed0ae38d11e67f5a810671eaa15  /tmp/compare/bitcoin-cli.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n  342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  342c2ed0e60b60990a58cbf5845b256a4f9e3baff9db074baba5e34a620a60ea  /tmp/compare/bitcoind.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n  e4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.82274c02ed2d82537dc55f008a29edb1bc09bbc4.stripped\n  e4b2a80b2361d5cefd67a47eeb9298b8b712c26c7779d979348be8b2c7e3ec93  /tmp/compare/bitcoin-tx.874f13821f4193bd037cd37d005ee76b5a849398.stripped\n\n  $ git diff -W --word-diff /tmp/compare/874f13821f4193bd037cd37d005ee76b5a849398 /tmp/compare/82274c02ed2d82537dc55f008a29edb1bc09bbc4\n\n  $\n  ```\n\nTree-SHA512: 13ca5862fbb03771682b04a7523e581a7fe62e73620fa0e141cf1bc0a3b3f4e2e66bf14b46d1228e2b11b4960153545e7476f3295713a69b5cf5a28a7c2b358d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efa18a230d48745d9b357bf026592163716ffd7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efa18a230d48745d9b357bf026592163716ffd7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efa18a230d48745d9b357bf026592163716ffd7e"
      },
      {
        "sha": "06edc23f7409160adaaea5dd8d80b5dcaf696f99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06edc23f7409160adaaea5dd8d80b5dcaf696f99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06edc23f7409160adaaea5dd8d80b5dcaf696f99"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "659f97fec6b20dedc7512fb1820b562a6a7cb466",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
        "patch": "@@ -926,7 +926,7 @@ bool AppInitParameterInteraction()\n     nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n-    nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS)), 0);\n+    nMaxConnections = std::max(std::min(nMaxConnections, FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n     nFD = RaiseFileDescriptorLimit(nMaxConnections + MIN_CORE_FILEDESCRIPTORS + MAX_ADDNODE_CONNECTIONS);\n     if (nFD < MIN_CORE_FILEDESCRIPTORS)\n         return InitError(_(\"Not enough file descriptors available.\"));"
      },
      {
        "sha": "042e687772412aea4347b813ef98e333efa93661",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
        "patch": "@@ -170,7 +170,7 @@ CPrivKey CKey::GetPrivKey() const {\n     size_t privkeylen;\n     privkey.resize(PRIVATE_KEY_SIZE);\n     privkeylen = PRIVATE_KEY_SIZE;\n-    ret = ec_privkey_export_der(secp256k1_context_sign, (unsigned char*) privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n+    ret = ec_privkey_export_der(secp256k1_context_sign, privkey.data(), &privkeylen, begin(), fCompressed ? SECP256K1_EC_COMPRESSED : SECP256K1_EC_UNCOMPRESSED);\n     assert(ret);\n     privkey.resize(privkeylen);\n     return privkey;\n@@ -199,7 +199,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_\n     secp256k1_ecdsa_signature sig;\n     int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);\n     assert(ret);\n-    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, (unsigned char*)vchSig.data(), &nSigLen, &sig);\n+    secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);\n     vchSig.resize(nSigLen);\n     return true;\n }\n@@ -226,7 +226,7 @@ bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig)\n     secp256k1_ecdsa_recoverable_signature sig;\n     int ret = secp256k1_ecdsa_sign_recoverable(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, nullptr);\n     assert(ret);\n-    secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_context_sign, (unsigned char*)&vchSig[1], &rec, &sig);\n+    secp256k1_ecdsa_recoverable_signature_serialize_compact(secp256k1_context_sign, &vchSig[1], &rec, &sig);\n     assert(ret);\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);"
      }
    ]
  },
  {
    "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWZhZDk3YzMyMGM4OTJhYjZhNDgwYzgxZTIwNzhlYzIyYWIzNTRi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-08T02:12:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-03-08T02:12:47Z"
      },
      "message": "Merge #12607: depends: Remove ccache\n\ncc879675e1 depends: Remove ccache (fanquake)\n\nPull request description:\n\n  After discussion with @theuni, we can possibly just remove ccache from depends entirely.\n\n  Related to #12606\n\nTree-SHA512: ae0a60c8d97467fa41d617daa48ed22159cf32613808634a983304901dd5ed27124e77868d2314004e5144f7b35ba1333f720bb12daec4c5ca03aaf29d593ef2",
      "tree": {
        "sha": "73a846e47f600f5eb569fb554aeffc3e01003042",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73a846e47f600f5eb569fb554aeffc3e01003042"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJaoJwfAAoJENLqSFDnUosl7bMP/1sBb/1l1v3D/FsyV/Z4dNcU\nZ/2gOX1xTrAzEt3M/AxL4I+GDBSY8Hsr7clh14Vk6uT98TaHbiYUAAk0ltCP3kSz\ncRQ7Vfqi/BDoEJmIX6Prw1+GzTsmg9I1XhRaMglNwtALQAvSy1bDFch+IXUhonXX\nOtqY61jvCtJMd2kxHyF/UPOjtAOsTsJk+OdBfxieiUCcUgYb2aMrUl8fKQACrdf2\nofgUe1KBj7a6epKMxgz4AcSEqW6bx4nXQlr38WEXaNv4A4qgsTsx7embpj4c93aH\nEOcNwxQILWO01ipenY1OSFTGlmbFQr+KsOuAIeWD3XGV5zpmDCPmfIbhexOXnevR\n17jCt5K6hKiMY9EWhdSrfUoJfBH22dUoLPhRgRdYX2Y9EsfeQ3zfN3l1vGJaYhF8\n5diawYExGaAbql3i0uGuAwzWG9L3YdgygNt13Pgp/ZX+T0lFZV1TdndGRzSTGfys\ncVbiio3QBxyKTtpA4jWU7RgItM7E2O58Mb9oIA6CQ2rZDsjpjCP1B70WmLRHkjIu\nDZ5jlwqbnYVlam3HMzOqYZStrLs/0EaOCqra3pqvcyWDjQg37CJaqdUUkp1Vx7dq\nFT+TdwoT+QW0lKOGQLqYtpj0JS2Ty1iBd5wCaOzaq1nMg5vP67vi8QH226HuzzPq\nzieTxpkwat9dKkaex4KF\n=+mM1\n-----END PGP SIGNATURE-----",
        "payload": "tree 73a846e47f600f5eb569fb554aeffc3e01003042\nparent a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e\nparent cc879675e16c310f3ce3f2387b7aa966e64e4352\nauthor MarcoFalke <falke.marco@gmail.com> 1520475161 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1520475167 -0500\n\nMerge #12607: depends: Remove ccache\n\ncc879675e1 depends: Remove ccache (fanquake)\n\nPull request description:\n\n  After discussion with @theuni, we can possibly just remove ccache from depends entirely.\n\n  Related to #12606\n\nTree-SHA512: ae0a60c8d97467fa41d617daa48ed22159cf32613808634a983304901dd5ed27124e77868d2314004e5144f7b35ba1333f720bb12daec4c5ca03aaf29d593ef2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e"
      },
      {
        "sha": "cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc879675e16c310f3ce3f2387b7aa966e64e4352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc879675e16c310f3ce3f2387b7aa966e64e4352"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 2,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b38c911a2e43aba1ec125aac482b92e39dc7824e",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fad97c320c892ab6a480c81e2078ec22ab354b/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fad97c320c892ab6a480c81e2078ec22ab354b/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=29fad97c320c892ab6a480c81e2078ec22ab354b",
        "patch": "@@ -3,6 +3,7 @@ dist: trusty\n os: linux\n language: minimal\n cache:\n+  ccache: true\n   directories:\n   - depends/built\n   - depends/sdk-sources\n@@ -68,7 +69,7 @@ script:\n     - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n-    - if [ -z \"$NO_DEPENDS\" ]; then depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE; fi\n+    - if [ -z \"$NO_DEPENDS\" ]; then ccache --max-size=$CCACHE_SIZE; fi\n     - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - mkdir build && cd build\n     - ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)"
      },
      {
        "sha": "8444dc26f27b26dd1cd489f276be2b31e4c1886e",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fad97c320c892ab6a480c81e2078ec22ab354b/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fad97c320c892ab6a480c81e2078ec22ab354b/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=29fad97c320c892ab6a480c81e2078ec22ab354b",
        "patch": "@@ -64,7 +64,6 @@ LDFLAGS=\"-L$depends_prefix/lib $LDFLAGS\"\n CC=\"@CC@\"\n CXX=\"@CXX@\"\n OBJC=\"${CC}\"\n-CCACHE=$depends_prefix/native/bin/ccache\n PYTHONPATH=$depends_prefix/native/lib/python/dist-packages:$PYTHONPATH\n \n if test -n \"@AR@\"; then"
      },
      {
        "sha": "8f4eb225387d01aa7dabd73e1922f6d0ebf3960d",
        "filename": "depends/packages/native_ccache.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/depends/packages/native_ccache.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e/depends/packages/native_ccache.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ccache.mk?ref=a34ac6ae0788b50e12dd2c8ac59dbda2a03a3c2e",
        "patch": "@@ -1,25 +0,0 @@\n-package=native_ccache\n-$(package)_version=3.4.1\n-$(package)_download_path=https://samba.org/ftp/ccache\n-$(package)_file_name=ccache-$($(package)_version).tar.bz2\n-$(package)_sha256_hash=ca5a01fb4868cdb5176c77b8b4a390be7929a6064be80741217e0686f03f8389\n-\n-define $(package)_set_vars\n-$(package)_config_opts=\n-endef\n-\n-define $(package)_config_cmds\n-  $($(package)_autoconf)\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE)\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) DESTDIR=$($(package)_staging_dir) install\n-endef\n-\n-define $(package)_postprocess_cmds\n-  rm -rf lib include\n-endef"
      },
      {
        "sha": "551c9fa70b6668f526067925ee1eee7de0e382d5",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fad97c320c892ab6a480c81e2078ec22ab354b/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fad97c320c892ab6a480c81e2078ec22ab354b/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=29fad97c320c892ab6a480c81e2078ec22ab354b",
        "patch": "@@ -1,5 +1,4 @@\n packages:=boost openssl libevent zeromq\n-native_packages := native_ccache\n \n qt_native_packages = native_protobuf\n qt_packages = qrencode protobuf zlib"
      },
      {
        "sha": "7aa96c4c9b0715a87922893274659c8cc938c6cb",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29fad97c320c892ab6a480c81e2078ec22ab354b/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29fad97c320c892ab6a480c81e2078ec22ab354b/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=29fad97c320c892ab6a480c81e2078ec22ab354b",
        "patch": "@@ -7,7 +7,6 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | --- | --- | --- | --- | --- | --- |\n | Berkeley DB | [4.8.30](http://www.oracle.com/technetwork/database/database-technologies/berkeleydb/downloads/index.html) | 4.8.x | No |  |  |\n | Boost | [1.64.0](http://www.boost.org/users/download/) | [1.47.0](https://github.com/bitcoin/bitcoin/pull/8920) | No |  |  |\n-| ccache | [3.3.6](https://ccache.samba.org/download.html) |  | No |  |  |\n | Clang |  | [3.3+](http://llvm.org/releases/download.html) (C++11 support) |  |  |  |\n | D-Bus | [1.10.18](https://cgit.freedesktop.org/dbus/dbus/tree/NEWS?h=dbus-1.10) |  | No | Yes |  |\n | Expat | [2.2.5](https://libexpat.github.io/) |  | No | Yes |  |"
      }
    ]
  },
  {
    "sha": "a7324bd799591546c2ae069f29cb82a66d427769",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzMyNGJkNzk5NTkxNTQ2YzJhZTA2OWYyOWNiODJhNjZkNDI3NzY5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-02-28T15:46:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-09T14:02:01Z"
      },
      "message": "Format timestamps using ISO 8601 formatting (e.g. \"2018-02-28T12:34:56Z\")\n\n* Z is the zone designator for the zero UTC offset.\n* T is the delimiter used to separate date and time.\n\nThis makes it clear for the end-user that the date/time logged is\nspecified in UTC and not in the local time zone.",
      "tree": {
        "sha": "b99b314c2166933c3a4e3843173e5cba9789555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99b314c2166933c3a4e3843173e5cba9789555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7324bd799591546c2ae069f29cb82a66d427769",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7324bd799591546c2ae069f29cb82a66d427769",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7324bd799591546c2ae069f29cb82a66d427769",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7324bd799591546c2ae069f29cb82a66d427769/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 61,
      "deletions": 23
    },
    "files": [
      {
        "sha": "d08e2518c78aead8c62f06e5c67d493bc8ced0b5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -93,6 +93,10 @@ Low-level RPC changes\n   with any `-wallet=<path>` options, there is no change in behavior, and the\n   name of any wallet is just its `<path>` string.\n \n+### Logging\n+\n+- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n+\n Credits\n =======\n "
      },
      {
        "sha": "bc23d0ff8366f5c81e56cf95f3c72adc7c8a70a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -1224,7 +1224,7 @@ bool AppInitMain()\n     }\n \n     if (!fLogTimestamps)\n-        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n+        LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());"
      },
      {
        "sha": "53a0a9b1802e57eb7a344455cc067d14ed812f3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -2795,7 +2795,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, FormatISO8601Time(nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;"
      },
      {
        "sha": "4b6fdc8d5756ff0190db1565b8db79d5c2639aa0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -770,7 +770,7 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n {\n     bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n     if (fVerified) {\n-        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        const QString requestExpires = QString::fromStdString(FormatISO8601DateTime((int64_t)requestDetails.expires()));\n         qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n             .arg(__func__)\n             .arg(requestExpires);"
      },
      {
        "sha": "84b61bea86a661f9178e6122809f6ccda7adb010",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -164,10 +164,27 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0), \"1970-01-01 00:00:00\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0x7FFFFFFF), \"2038-01-19 03:14:07\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 1317425777), \"2011-09-30 23:36:17\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", 1317425777), \"2011-09-30T23:36:17Z\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%H:%M:%SZ\", 1317425777), \"23:36:17Z\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", 1317425777), \"2011-09-30 23:36\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_FormatISO8601DateTime)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601DateTime(1317425777), \"2011-09-30T23:36:17Z\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n+}\n+\n class TestArgsManager : public ArgsManager\n {\n public:"
      },
      {
        "sha": "62cdce30125ddff8c1f37f367afa316c867d91df",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -315,12 +315,14 @@ static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fSt\n \n     if (*fStartedNewLine) {\n         int64_t nTimeMicros = GetTimeMicros();\n-        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);\n-        if (fLogTimeMicros)\n-            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);\n+        strStamped = FormatISO8601DateTime(nTimeMicros/1000000);\n+        if (fLogTimeMicros) {\n+            strStamped.pop_back();\n+            strStamped += strprintf(\".%06dZ\", nTimeMicros%1000000);\n+        }\n         int64_t mocktime = GetMockTime();\n         if (mocktime) {\n-            strStamped += \" (mocktime: \" + DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", mocktime) + \")\";\n+            strStamped += \" (mocktime: \" + FormatISO8601DateTime(mocktime) + \")\";\n         }\n         strStamped += ' ' + str;\n     } else"
      },
      {
        "sha": "8a861039b3ade9f34ec0d4cf77d415531fb8c7b0",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -85,3 +85,15 @@ std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n     ss << boost::posix_time::from_time_t(nTime);\n     return ss.str();\n }\n+\n+std::string FormatISO8601DateTime(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+std::string FormatISO8601Date(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%d\", nTime);\n+}\n+\n+std::string FormatISO8601Time(int64_t nTime) {\n+    return DateTimeStrFormat(\"%H:%M:%SZ\", nTime);\n+}"
      },
      {
        "sha": "807c52ffafd1a56fc2c9d9db0dcc0e947344fffd",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -27,6 +27,14 @@ void SetMockTime(int64_t nMockTimeIn);\n int64_t GetMockTime();\n void MilliSleep(int64_t n);\n \n+/**\n+ * ISO 8601 formatting is preferred. Use the FormatISO8601{DateTime,Date,Time}\n+ * helper functions if possible.\n+ */\n std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n \n+std::string FormatISO8601DateTime(int64_t nTime);\n+std::string FormatISO8601Date(int64_t nTime);\n+std::string FormatISO8601Time(int64_t nTime);\n+\n #endif // BITCOIN_UTILTIME_H"
      },
      {
        "sha": "c677f44b3e3aed8dd68192b6cc1fc36ff45888b5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -1267,13 +1267,12 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n \n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n-      log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n-      pindexNew->GetBlockTime()));\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));\n     CBlockIndex *tip = chainActive.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n+      FormatISO8601DateTime(tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n \n@@ -2229,7 +2228,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexNew->GetBlockTime()),\n+      FormatISO8601DateTime(pindexNew->GetBlockTime()),\n       GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n@@ -3856,7 +3855,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n-        DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n+        FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n     return true;\n }\n@@ -4554,7 +4553,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n std::string CBlockFileInfo::ToString() const\n {\n-    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n+    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, FormatISO8601Date(nTimeFirst), FormatISO8601Date(nTimeLast));\n }\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)"
      },
      {
        "sha": "c7c54ecb9bcd9acad5747792d3fb02a89baef9ba",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -28,10 +28,6 @@\n #include <univalue.h>\n \n \n-std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n-}\n-\n int64_t static DecodeDumpTime(const std::string &str) {\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     static const std::locale loc(std::locale::classic(),\n@@ -722,9 +718,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n-    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+    file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+    file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD\n@@ -741,7 +737,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n-        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strTime = FormatISO8601DateTime(it->first);\n         std::string strAddr;\n         std::string strLabel;\n         CKey key;\n@@ -769,7 +765,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         // get birth times for scripts with metadata\n         auto it = pwallet->m_script_metadata.find(scriptid);\n         if (it != pwallet->m_script_metadata.end()) {\n-            create_time = EncodeDumpTime(it->second.nCreateTime);\n+            create_time = FormatISO8601DateTime(it->second.nCreateTime);\n         }\n         if(pwallet->GetCScript(scriptid, script)) {\n             file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);"
      },
      {
        "sha": "d1bf9206b257fad875b6a1bf5a82705a7a7b0b58",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -13,7 +13,7 @@\n import sys\n \n # Matches on the date format at the start of the log event\n-TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z\")\n \n LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n "
      },
      {
        "sha": "f4e77d32dc6512b71bdb49f5a4819e890d159af2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7324bd799591546c2ae069f29cb82a66d427769/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=a7324bd799591546c2ae069f29cb82a66d427769",
        "patch": "@@ -358,7 +358,7 @@ def _start_logging(self):\n         ll = int(self.options.loglevel) if self.options.loglevel.isdigit() else self.options.loglevel.upper()\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n-        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000Z %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')\n         formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)"
      }
    ]
  },
  {
    "sha": "bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjk4YWVjNjc0M2VlNmNmZGU1OTNhMGJiMzBkNWQxYzQzZjhiMGNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-10T13:08:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-10T16:15:00Z"
      },
      "message": "Merge #12567: util: Print timestamp strings in logs using ISO 8601 formatting\n\na7324bd79 Format timestamps using ISO 8601 formatting (e.g. \"2018-02-28T12:34:56Z\") (practicalswift)\n\nPull request description:\n\n  Print timestamp strings in logs using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatting (e.g. `2018-02-28T12:34:56Z`):\n  * `Z` is the zone designator for the zero [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) offset.\n  * `T` is the delimiter used to separate date and time.\n\n  This makes it clear for the end-user that the date/time logged is specified in UTC and not in the local time zone.\n\n  Before this patch:\n\n  ```\n  2018-02-28 12:34:56 New outbound peer connected: version: 70015, blocks=1286123, peer=0\n  ```\n\n  After this patch:\n\n  ```\n  2018-02-28T12:34:56Z New outbound peer connected: version: 70015, blocks=1286123, peer=0\n  ```\n\nTree-SHA512: 52b53c3d3d11ddf4af521a3b5f90a79f6e6539ee5955ec56a5aa2c6a5cf29cecf166d8cb43277c62553c3325a31bcea83691acbb4e86429c523f8aff8d7b210a",
      "tree": {
        "sha": "b99b314c2166933c3a4e3843173e5cba9789555e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b99b314c2166933c3a4e3843173e5cba9789555e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJapASEAAoJEB5K7WKYbNJddlEH/jjA9GR8yN8TBqNPoqh18iIk\n9ECIqvuEFB63oBVf8LxP5+9Md2Nxq49P9ynrjMSgq/cqmmYdxh01lBo0koD1QVBk\nROZarAWFg3DJb70i47JcBxppmg+kFGyuhFwPxnFe851o9Ixb7pimCBIMbFKFoN+h\nq9GuGP4LB5GiCK35lXecUSpo7kJ43CWAxN+Vv0Qik96zZEPkE058TCTLdgEfYu0g\nZf2ox6pVXrgXiXyV59mpWMbv9cYvDrxZW0e4fqAIdiHmIeyYTHTWofvDmZYf283T\nGahGO9fbv9zmmpVk7H78IOKXXGU9C52O0FujAq0Vs/+giPsr/EdPI/P2hvk1r54=\n=tOoe\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAvWHQCNbeliVtV53BQ+aaUejSjSFXoIRaCCqTi3s05LCP/wEFG/RBFuoM6H\nca/fdAOFK/wI8QRapASJ8AiYZ0NEkkoaGQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQWGuYyVi8qWSZI/+8\naPlmcAjxIAa05xkPCN/1El5U/Qac1oMK1OyJ6KrP06Pih9lsdlvICPEEWqQEiPAI\nv7z8UOv+ffEAg9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJu\naXR5d2FsbC5jb23wEMFkVWAyIbmOFq0H3+VnF94I8QRapASI8AjBa0iXPJ+XrwCD\n3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBz\nLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree b99b314c2166933c3a4e3843173e5cba9789555e\nparent 29fad97c320c892ab6a480c81e2078ec22ab354b\nparent a7324bd799591546c2ae069f29cb82a66d427769\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1520687295 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1520698500 +0100\n\nMerge #12567: util: Print timestamp strings in logs using ISO 8601 formatting\n\na7324bd79 Format timestamps using ISO 8601 formatting (e.g. \"2018-02-28T12:34:56Z\") (practicalswift)\n\nPull request description:\n\n  Print timestamp strings in logs using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) formatting (e.g. `2018-02-28T12:34:56Z`):\n  * `Z` is the zone designator for the zero [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) offset.\n  * `T` is the delimiter used to separate date and time.\n\n  This makes it clear for the end-user that the date/time logged is specified in UTC and not in the local time zone.\n\n  Before this patch:\n\n  ```\n  2018-02-28 12:34:56 New outbound peer connected: version: 70015, blocks=1286123, peer=0\n  ```\n\n  After this patch:\n\n  ```\n  2018-02-28T12:34:56Z New outbound peer connected: version: 70015, blocks=1286123, peer=0\n  ```\n\nTree-SHA512: 52b53c3d3d11ddf4af521a3b5f90a79f6e6539ee5955ec56a5aa2c6a5cf29cecf166d8cb43277c62553c3325a31bcea83691acbb4e86429c523f8aff8d7b210a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      },
      {
        "sha": "a7324bd799591546c2ae069f29cb82a66d427769",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7324bd799591546c2ae069f29cb82a66d427769",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7324bd799591546c2ae069f29cb82a66d427769"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 61,
      "deletions": 23
    },
    "files": [
      {
        "sha": "d08e2518c78aead8c62f06e5c67d493bc8ced0b5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -93,6 +93,10 @@ Low-level RPC changes\n   with any `-wallet=<path>` options, there is no change in behavior, and the\n   name of any wallet is just its `<path>` string.\n \n+### Logging\n+\n+- The log timestamp format is now ISO 8601 (e.g. \"2018-02-28T12:34:56Z\").\n+\n Credits\n =======\n "
      },
      {
        "sha": "bc23d0ff8366f5c81e56cf95f3c72adc7c8a70a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -1224,7 +1224,7 @@ bool AppInitMain()\n     }\n \n     if (!fLogTimestamps)\n-        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n+        LogPrintf(\"Startup time: %s\\n\", FormatISO8601DateTime(GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());"
      },
      {
        "sha": "53a0a9b1802e57eb7a344455cc067d14ed812f3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -2795,7 +2795,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(BCLog::NET, \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, FormatISO8601Time(nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;"
      },
      {
        "sha": "4b6fdc8d5756ff0190db1565b8db79d5c2639aa0",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -770,7 +770,7 @@ bool PaymentServer::verifyExpired(const payments::PaymentDetails& requestDetails\n {\n     bool fVerified = (requestDetails.has_expires() && (int64_t)requestDetails.expires() < GetTime());\n     if (fVerified) {\n-        const QString requestExpires = QString::fromStdString(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", (int64_t)requestDetails.expires()));\n+        const QString requestExpires = QString::fromStdString(FormatISO8601DateTime((int64_t)requestDetails.expires()));\n         qWarning() << QString(\"PaymentServer::%1: Payment request expired \\\"%2\\\".\")\n             .arg(__func__)\n             .arg(requestExpires);"
      },
      {
        "sha": "84b61bea86a661f9178e6122809f6ccda7adb010",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -164,10 +164,27 @@ BOOST_AUTO_TEST_CASE(util_DateTimeStrFormat)\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0), \"1970-01-01 00:00:00\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 0x7FFFFFFF), \"2038-01-19 03:14:07\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", 1317425777), \"2011-09-30 23:36:17\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", 1317425777), \"2011-09-30T23:36:17Z\");\n+    BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%H:%M:%SZ\", 1317425777), \"23:36:17Z\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%Y-%m-%d %H:%M\", 1317425777), \"2011-09-30 23:36\");\n     BOOST_CHECK_EQUAL(DateTimeStrFormat(\"%a, %d %b %Y %H:%M:%S +0000\", 1317425777), \"Fri, 30 Sep 2011 23:36:17 +0000\");\n }\n \n+BOOST_AUTO_TEST_CASE(util_FormatISO8601DateTime)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601DateTime(1317425777), \"2011-09-30T23:36:17Z\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Date(1317425777), \"2011-09-30\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n+{\n+    BOOST_CHECK_EQUAL(FormatISO8601Time(1317425777), \"23:36:17Z\");\n+}\n+\n class TestArgsManager : public ArgsManager\n {\n public:"
      },
      {
        "sha": "62cdce30125ddff8c1f37f367afa316c867d91df",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -315,12 +315,14 @@ static std::string LogTimestampStr(const std::string &str, std::atomic_bool *fSt\n \n     if (*fStartedNewLine) {\n         int64_t nTimeMicros = GetTimeMicros();\n-        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);\n-        if (fLogTimeMicros)\n-            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);\n+        strStamped = FormatISO8601DateTime(nTimeMicros/1000000);\n+        if (fLogTimeMicros) {\n+            strStamped.pop_back();\n+            strStamped += strprintf(\".%06dZ\", nTimeMicros%1000000);\n+        }\n         int64_t mocktime = GetMockTime();\n         if (mocktime) {\n-            strStamped += \" (mocktime: \" + DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", mocktime) + \")\";\n+            strStamped += \" (mocktime: \" + FormatISO8601DateTime(mocktime) + \")\";\n         }\n         strStamped += ' ' + str;\n     } else"
      },
      {
        "sha": "8a861039b3ade9f34ec0d4cf77d415531fb8c7b0",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -85,3 +85,15 @@ std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n     ss << boost::posix_time::from_time_t(nTime);\n     return ss.str();\n }\n+\n+std::string FormatISO8601DateTime(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+std::string FormatISO8601Date(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%d\", nTime);\n+}\n+\n+std::string FormatISO8601Time(int64_t nTime) {\n+    return DateTimeStrFormat(\"%H:%M:%SZ\", nTime);\n+}"
      },
      {
        "sha": "807c52ffafd1a56fc2c9d9db0dcc0e947344fffd",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -27,6 +27,14 @@ void SetMockTime(int64_t nMockTimeIn);\n int64_t GetMockTime();\n void MilliSleep(int64_t n);\n \n+/**\n+ * ISO 8601 formatting is preferred. Use the FormatISO8601{DateTime,Date,Time}\n+ * helper functions if possible.\n+ */\n std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime);\n \n+std::string FormatISO8601DateTime(int64_t nTime);\n+std::string FormatISO8601Date(int64_t nTime);\n+std::string FormatISO8601Time(int64_t nTime);\n+\n #endif // BITCOIN_UTILTIME_H"
      },
      {
        "sha": "c677f44b3e3aed8dd68192b6cc1fc36ff45888b5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -1267,13 +1267,12 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n \n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n-      log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n-      pindexNew->GetBlockTime()));\n+      log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));\n     CBlockIndex *tip = chainActive.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", tip->GetBlockTime()));\n+      FormatISO8601DateTime(tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n \n@@ -2229,7 +2228,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%.8g tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n-      DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", pindexNew->GetBlockTime()),\n+      FormatISO8601DateTime(pindexNew->GetBlockTime()),\n       GuessVerificationProgress(chainParams.TxData(), pindexNew), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n     if (!warningMessages.empty())\n         LogPrintf(\" warning='%s'\", boost::algorithm::join(warningMessages, \", \"));\n@@ -3856,7 +3855,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n-        DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n+        FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n     return true;\n }\n@@ -4554,7 +4553,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n \n std::string CBlockFileInfo::ToString() const\n {\n-    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, DateTimeStrFormat(\"%Y-%m-%d\", nTimeFirst), DateTimeStrFormat(\"%Y-%m-%d\", nTimeLast));\n+    return strprintf(\"CBlockFileInfo(blocks=%u, size=%u, heights=%u...%u, time=%s...%s)\", nBlocks, nSize, nHeightFirst, nHeightLast, FormatISO8601Date(nTimeFirst), FormatISO8601Date(nTimeLast));\n }\n \n CBlockFileInfo* GetBlockFileInfo(size_t n)"
      },
      {
        "sha": "c7c54ecb9bcd9acad5747792d3fb02a89baef9ba",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -28,10 +28,6 @@\n #include <univalue.h>\n \n \n-std::string static EncodeDumpTime(int64_t nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n-}\n-\n int64_t static DecodeDumpTime(const std::string &str) {\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     static const std::locale loc(std::locale::classic(),\n@@ -722,9 +718,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n-    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n+    file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n-    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n+    file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD\n@@ -741,7 +737,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     }\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n-        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strTime = FormatISO8601DateTime(it->first);\n         std::string strAddr;\n         std::string strLabel;\n         CKey key;\n@@ -769,7 +765,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         // get birth times for scripts with metadata\n         auto it = pwallet->m_script_metadata.find(scriptid);\n         if (it != pwallet->m_script_metadata.end()) {\n-            create_time = EncodeDumpTime(it->second.nCreateTime);\n+            create_time = FormatISO8601DateTime(it->second.nCreateTime);\n         }\n         if(pwallet->GetCScript(scriptid, script)) {\n             file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);"
      },
      {
        "sha": "d1bf9206b257fad875b6a1bf5a82705a7a7b0b58",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -13,7 +13,7 @@\n import sys\n \n # Matches on the date format at the start of the log event\n-TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")\n+TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z\")\n \n LogEvent = namedtuple('LogEvent', ['timestamp', 'source', 'event'])\n "
      },
      {
        "sha": "f4e77d32dc6512b71bdb49f5a4819e890d159af2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bb98aec6743ee6cfde593a0bb30d5d1c43f8b0cb",
        "patch": "@@ -358,7 +358,7 @@ def _start_logging(self):\n         ll = int(self.options.loglevel) if self.options.loglevel.isdigit() else self.options.loglevel.upper()\n         ch.setLevel(ll)\n         # Format logs the same as bitcoind's debug.log with microprecision (so log files can be concatenated and sorted)\n-        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000 %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%d %H:%M:%S')\n+        formatter = logging.Formatter(fmt='%(asctime)s.%(msecs)03d000Z %(name)s (%(levelname)s): %(message)s', datefmt='%Y-%m-%dT%H:%M:%S')\n         formatter.converter = time.gmtime\n         fh.setFormatter(formatter)\n         ch.setFormatter(formatter)"
      }
    ]
  }
]