practicalswift,2021-04-30 20:54:25,"Concept ACK\n\n`&foo[0]` does not spark joy.\n\n`foo.data()` sparks joy (or at least more joy than `&foo[0]`).",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830383418,830383418,
DrahtBot,2021-05-01 01:50:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21781 (Security enhancements to ChaCha20::SetKey and CSignatureCache::ComputeEntryECDSA by guidovranken)\n* #15294 ([move",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830486521,830486521,
MarcoFalke,2021-05-01 06:37:37,"Fun facts:\n\n* Commit fabb6dfe6e doesn't change the bitcoind binary on `-O2` with g++ and clang++ on my system\n* Same for faece47c47\n* Same for fac30eec42 [1]\n\n\nSo the only commits that changes bitcoind are the Span refactor and the dbwrapper refactor.\n\n[1] Edit: For g++ I get a small diff:\n\n\n```diff\ndiff --git a/tmp/old/d_objdump b/tmp/new/d_objdump\nindex 2b7eabdab2..24",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830564905,830564905,
theStack,2021-05-01 08:20:31,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830578984,830578984,
fanquake,2021-05-02 04:54:25,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830740654,830740654,
Empact,2021-05-02 16:29:17,"How about splitting this up into a few more focused PRs? Test and bench changes are unrelated, no?",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-830835226,830835226,
DrahtBot,2021-05-03 09:31:22,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n🕵️ @jamesob @achow101 @sipa have been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-831141270,831141270,
MarcoFalke,2021-05-03 09:54:29,">  How about splitting this up into a few more focused PRs? Test and bench changes are unrelated, no?\n\nThanks, done in #21840 ",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-831153766,831153766,
MarcoFalke,2021-05-04 08:00:02,"A linter could be done in a follow-up (not by me, though)",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-831754605,831754605,
practicalswift,2021-05-04 12:51:47,"> Have you thought about some way to prevent new cases? Maybe a linter to detect for `[0]` with a list of exceptions, if necessary?\n\nIf anyone wants to write a linter as follow-up then this might be helpful as a starting point:\n\n```\n$ git grep -E '&([a-zA-Z0-9_]+)\[0\]' -- ""*.cpp"" ""*.h"" "":(exclude)src/leveldb/"" "":(exclude)src/secp256k1/"" \\n       "":(exclude)src/tinyformat.h""\n```\n\",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-831917172,831917172,
laanwj,2021-05-04 14:28:51,"Code review ACK fac30eec42c486ec1bfd696293040a7aa0f04625\nThis seems a clear non-controversial code improvement.",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-831986003,831986003,
windsok,2021-05-04 15:23:43,"> If the consensus opinion is that a linter is needed then I suggest writing it in Python and shelling out to `git grep`. @windsok's nice file permission linter in #21740 is a good example of a linter written in Python which is using `git grep` to do the heavy lifting.\n\nI'd be very happy to work on this if there is agreement there should be a lint test for it. If we want to create a new python",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-832028180,832028180,
practicalswift,2021-05-04 18:33:43,cr ACK fac30eec42c486ec1bfd696293040a7aa0f04625: patch looks correct,https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-832155722,832155722,
promag,2021-05-05 08:32:44,"Code review ACK fac30eec42c486ec1bfd696293040a7aa0f04625.\n\nI've committed https://github.com/bitcoin/bitcoin/commit/fdf09779d3d48ab7c20d66b87f7527bf7cb2e6c5 that nukes more cases - adds `prevector::const_iterator::data()` which mimics std.",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-832513381,832513381,
laanwj,2021-05-05 11:12:46,"> If we want to create a new python based linter for it, it could also make sense to consolidate some of the existing cpp lint tests into it such as:\n\nYes I like this line of thinking.",https://github.com/bitcoin/bitcoin/pull/21817#issuecomment-832605975,832605975,
MarcoFalke,2021-05-01 07:07:42,"Fun fact: If CScript was a std::vector, this would be UB:\n\n```\n$ ./src/bitcoin-cli sendrawtransaction 020000000001015f784e93f6b843bd9ad1b34f86f0a7b034053ac5f18da5c8547aa6041ba24d3d0000000000ffffffff013905000000000000220020e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855010000000000\n/usr/include/c++/11/debug/vector:438:\nIn function:\n    std::__debug::vector<_Tp, _Allocat",https://github.com/bitcoin/bitcoin/pull/21817#discussion_r624434789,624434789,src/script/interpreter.cpp
