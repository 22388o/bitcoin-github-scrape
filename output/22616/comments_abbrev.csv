MarcoFalke,2021-08-03 11:20:44,Could use `std::optional` to avoid this stuff in the future?,https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-891764178,891764178,
jonatack,2021-08-03 16:07:56,"> Could use `std::optional` to avoid this stuff in the future?\n\nSure, will have a look. Might be better as a separate refactoring patch?",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-891973456,891973456,
amitiuttarwar,2021-08-03 16:57:58,"good catch on the `statestats` conditional @jonatack! thanks for fixing :) \nACK 5e33f762d4\n\n\nRE: \n>> Could use std::optional to avoid this stuff in the future?\n\n> Sure, will have a look\n\ngood idea @MarcoFalke! FYI @jonatack I'm also going to take a look. having compiler catch this error seems like a good move because clearly I missed it üòõ ",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892008196,892008196,
jonatack,2021-08-03 18:58:17,"@amitiuttarwar sgtm, go for it, happy to review!",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892087117,892087117,
amitiuttarwar,2021-08-03 20:27:17,"took a look, unfortunately I don't think having `GetNodeStateStats` return an `std::optional<CNodeStateStats>` increases the compiler guarantee. we still have to manually check for presence.\n\n<details><summary>example of accessing fields of a std::nullopt </summary>\n\n```\nstruct NewStruct {\n    int a;\n    int b;\n};\n\nstd::optional<NewStruct> GetNodeStateStats() {\n    return std",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892142844,892142844,
DrahtBot,2021-08-03 20:29:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22604](https://github.com/bitcoin/bitcoin/pull/22604) (p2p, rpc, test: address rate-limiting follow-ups by jonatack)\n* ",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892143892,892143892,
jonatack,2021-08-03 21:19:21,"yes...did https://github.com/jonatack/bitcoin/commit/397c33c399685b2ca4fe98de6e975f29f2f3d040 as a warmup, it builds and tests pass, and it seems to be a bit nicer as an interface but doesn't yet do what we're looking for, was thinking to then convert some of the `CNodeStateStats` struct members to std::optional and then maybe use them with `value_or` or something.  ",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892173646,892173646,
MarcoFalke,2021-08-04 06:17:04,"Can you explain why this is something we don't want? Surely compilers are happy to compile UB, but that doesn't mean it won't be caught.\n\nPreviously (returning a pair of `bool` + some type `T`), the only way to catch it is with code review (and maybe tests).\n\nReturning a `std::optional<T>` instead will allow any of the following to catch it:\n\n* code review (it is easier because there i",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892394905,892394905,
MarcoFalke,2021-08-04 06:24:30,"Note that on master it is impossible for valgrind to catch this because the memory is always filled:\n\n```cpp\nstruct CNodeStateStats {\n    int nSyncHeight = -1;\n    int nCommonHeight = -1;\n    int m_starting_height = -1;\n    std::chrono::microseconds m_ping_wait;\n    std::vector<int> vHeightInFlight;\n    uint64_t m_addr_processed = 0;\n    uint64_t m_addr_rate_limited = 0;\n    ",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892398324,892398324,
jonatack,2021-08-04 06:44:22,"For my part, I wasn't sure if the direction started with in https://github.com/jonatack/bitcoin/commit/397c33c399685b2ca4fe98de6e975f29f2f3d040 was what you had in mind, versus for instance also or starting with making the struct member(s) std::optional themselves, or something else.\n\nIt seems to be a separate refactoring from this small fix-up, but good to clarify the direction.",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892407662,892407662,
jnewbery,2021-08-04 10:36:11,"I think one way to improve this would be to combine `CNodeStats` and `CNodeStateStats` into a single struct, and change the individual fields that are populated by net_processing to be `std::optional<>`s. The rpc code could then populate the univalue object as follows:\n\n```c++\n        // ...\n        obj.pushKV(""inbound"", stats.fInbound);\n        obj.pushKV(""bip152_hb_to"", stats.m_bip152_",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892551560,892551560,
jnewbery,2021-08-04 10:37:55,ACK 5e33f762d44557a1e3f0ff3c280d8a3ab98e3867,https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892552525,892552525,
DrahtBot,2021-08-04 15:42:15,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22616#issuecomment-892765378,892765378,
