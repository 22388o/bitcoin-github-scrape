[
  {
    "sha": "8ecaee13f70a2062e88a977c950a65d3a2de560f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWNhZWUxM2Y3MGEyMDYyZTg4YTk3N2M5NTBhNjVkM2EyZGU1NjBm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-28T19:42:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-03T17:53:56Z"
      },
      "message": "Increase signal to noise in appveyor build output by reducing the MSVC warning count from 12 to 4 (12 is assuming the changes in #14086 are also implemented).\n\nThis makes it easier to spot errors or more important warnings in the verbose appveyor output.\n\nSee https://github.com/bitcoin/bitcoin/pull/14086#issuecomment-416610313 plus discussion for context.",
      "tree": {
        "sha": "196e4dfe1df8267738355a6b657ceff5fece0226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/196e4dfe1df8267738355a6b657ceff5fece0226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ecaee13f70a2062e88a977c950a65d3a2de560f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ecaee13f70a2062e88a977c950a65d3a2de560f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ecaee13f70a2062e88a977c950a65d3a2de560f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ecaee13f70a2062e88a977c950a65d3a2de560f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e9f85141506870e691ab66d6b37ff94d902ff69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e9f85141506870e691ab66d6b37ff94d902ff69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e9f85141506870e691ab66d6b37ff94d902ff69"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6ba15172fa082fd5bdfdb3a607116877fbfda239",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=8ecaee13f70a2062e88a977c950a65d3a2de560f",
        "patch": "@@ -464,7 +464,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n                 oss >> fCheckMemPool;\n                 oss >> vOutPoints;\n             }\n-        } catch (const std::ios_base::failure& e) {\n+        } catch (const std::ios_base::failure&) {\n             // abort in case of unreadable binary data\n             return RESTERR(req, HTTP_BAD_REQUEST, \"Parse error\");\n         }"
      },
      {
        "sha": "57f4f7529f770049fcdb68d9d6870f8ae3f14998",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=8ecaee13f70a2062e88a977c950a65d3a2de560f",
        "patch": "@@ -508,7 +508,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n         Coin cc4;\n         ss4 >> cc4;\n         BOOST_CHECK_MESSAGE(false, \"We should have thrown\");\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n     }\n \n     // Very large scriptPubKey (3*10^9 bytes) past the end of the stream\n@@ -521,7 +521,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n         Coin cc5;\n         ss5 >> cc5;\n         BOOST_CHECK_MESSAGE(false, \"We should have thrown\");\n-    } catch (const std::ios_base::failure& e) {\n+    } catch (const std::ios_base::failure&) {\n     }\n }\n \n@@ -719,7 +719,7 @@ static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount mo\n         test.cache.AddCoin(OUTPOINT, Coin(std::move(output), 1, coinbase), coinbase);\n         test.cache.SelfTest();\n         GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error& e) {\n+    } catch (std::logic_error&) {\n         result_value = FAIL;\n         result_flags = NO_ENTRY;\n     }\n@@ -780,7 +780,7 @@ void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected\n         WriteCoinsViewEntry(test.cache, child_value, child_flags);\n         test.cache.SelfTest();\n         GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n-    } catch (std::logic_error& e) {\n+    } catch (std::logic_error&) {\n         result_value = FAIL;\n         result_flags = NO_ENTRY;\n     }"
      },
      {
        "sha": "ffedead0e348a9a5158c06bb6425784d989c7214",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=8ecaee13f70a2062e88a977c950a65d3a2de560f",
        "patch": "@@ -262,7 +262,7 @@ struct StringContentsSerializer {\n                 try {\n                     READWRITE(c);\n                     str.push_back(c);\n-                } catch (const std::ios_base::failure& e) {\n+                } catch (const std::ios_base::failure&) {\n                     break;\n                 }\n             }"
      },
      {
        "sha": "eaa8b16182b3451d2e01a18e4aa673a4fdb05ddd",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=8ecaee13f70a2062e88a977c950a65d3a2de560f",
        "patch": "@@ -115,7 +115,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n         unsigned char pchMsgTmp[4];\n         ssPeers1 >> pchMsgTmp;\n         ssPeers1 >> addrman1;\n-    } catch (const std::exception& e) {\n+    } catch (const std::exception&) {\n         exceptionThrown = true;\n     }\n \n@@ -148,7 +148,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n         unsigned char pchMsgTmp[4];\n         ssPeers1 >> pchMsgTmp;\n         ssPeers1 >> addrman1;\n-    } catch (const std::exception& e) {\n+    } catch (const std::exception&) {\n         exceptionThrown = true;\n     }\n     // Even through de-serialization failed addrman is not left in a clean state."
      },
      {
        "sha": "ccd8e19aee8f0bd82214633dd0da18d92a02649c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ecaee13f70a2062e88a977c950a65d3a2de560f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8ecaee13f70a2062e88a977c950a65d3a2de560f",
        "patch": "@@ -288,7 +288,6 @@ static UniValue setlabel(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     }\n \n-    std::string old_label = pwallet->mapAddressBook[dest].name;\n     std::string label = LabelFromValue(request.params[1]);\n \n     if (IsMine(*pwallet, dest)) {"
      }
    ]
  }
]