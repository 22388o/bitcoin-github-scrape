[
  {
    "sha": "fa83e95ac6f318caa38016a08fa4e402c3b05833",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgzZTk1YWM2ZjMxOGNhYTM4MDE2YTA4ZmE0ZTQwMmMzYjA1ODMz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-04-22T10:20:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-01T07:42:50Z"
      },
      "message": "scripted-diff: Clarify that feerates are per virtual size\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's|/kB|/kvB|g' $( git grep -l '/kB' ./src )\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "202396dbde7efc488edb7ac229b712e9f18dda64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/202396dbde7efc488edb7ac229b712e9f18dda64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa83e95ac6f318caa38016a08fa4e402c3b05833",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjnmwv/XDxe1akOB+/9pM+DSLM63OHZlztbkkK9IqzmsUkMKQe1fzk4q2UhaBnv\n7p+eV9ISIUqNIlZzvZmz4W89hkQVN8Uf20jXbg5U9S9zxHUHUBBAYcxtWJzOwUOJ\nGxqsj19q0GfXYRmJdi/moxTMn0PO+r9XwgZscKWDD9cljZeOiZ6sVUqZs91TM0jK\nJ9mm22BWI3j23EF0V1eSzMBvaRgOLG8owOP9UyomD8EkhCW5SMLVnovxDDRAmvx7\nLbZr1+L+N1hWb3qzzzj0R5LQe/v8AFHCceqK3wWGjutqCxo7pQrUCldtT6s4nGE2\n5O0qxxvgK0vNQoRaZY7BBIV3rSxr+kCt7NhWV4SROJAoewXRy70X0AyxUv+87D9w\n9WC7q6m8jBnROzGrB84Y44DRqEFSlLFTzAXe/OVULEaK8YDP4NV/41xs+m88SX5W\nrIwNYZ+bbrZgf24TG/yewE1lZKMabf0uBPEL3ptfcf+yCmqvwL3BcFHQBm+x2ZPt\nWIYS6GX7\n=s5j1\n-----END PGP SIGNATURE-----",
        "payload": "tree 202396dbde7efc488edb7ac229b712e9f18dda64\nparent 480bf01c295527bd212964efe4df3bb886db5654\nauthor MarcoFalke <falke.marco@gmail.com> 1619086818 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619854970 +0200\n\nscripted-diff: Clarify that feerates are per virtual size\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's|/kB|/kvB|g' $( git grep -l '/kB' ./src )\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa83e95ac6f318caa38016a08fa4e402c3b05833",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa83e95ac6f318caa38016a08fa4e402c3b05833",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa83e95ac6f318caa38016a08fa4e402c3b05833/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "480bf01c295527bd212964efe4df3bb886db5654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480bf01c295527bd212964efe4df3bb886db5654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/480bf01c295527bd212964efe4df3bb886db5654"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "d9b44a49d9b774da15481923a9f5bb38c5fc54b1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -516,19 +516,19 @@ void SetupServerArgs(NodeContext& node)\n     SetupChainParamsBaseOptions(argsman);\n \n     argsman.AddArg(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n-    argsman.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n-    argsman.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n+    argsman.AddArg(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) used to define dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-bytespersigop\", strprintf(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\", DEFAULT_BYTES_PER_SIGOP), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-datacarrier\", strprintf(\"Relay and mine data carrier transactions (default: %u)\", DEFAULT_ACCEPT_DATACARRIER), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-datacarriersize\", strprintf(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\", MAX_OP_RETURN_RELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    argsman.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n+    argsman.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kvB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     argsman.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n \n \n     argsman.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n-    argsman.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n+    argsman.AddArg(\"-blockmintxfee=<amt>\", strprintf(\"Set lowest fee rate (in %s/kvB) for transactions to be included in block creation. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n     argsman.AddArg(\"-blockversion=<n>\", \"Override block version to test forking scenarios\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::BLOCK_CREATION);\n \n     argsman.AddArg(\"-rest\", strprintf(\"Accept public REST requests (default: %u)\", DEFAULT_REST_ENABLE), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      },
      {
        "sha": "9e433584e7328f183e058bee38a7e294a70115a3",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -21,12 +21,12 @@ CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n     // need a CTxIn of at least 148 bytes to spend:\n     // so dust is a spendable txout less than\n     // 182*dustRelayFee/1000 (in satoshis).\n-    // 546 satoshis at the default rate of 3000 sat/kB.\n+    // 546 satoshis at the default rate of 3000 sat/kvB.\n     // A typical spendable segwit txout is 31 bytes big, and will\n     // need a CTxIn of at least 67 bytes to spend:\n     // so dust is a spendable txout less than\n     // 98*dustRelayFee/1000 (in satoshis).\n-    // 294 satoshis at the default rate of 3000 sat/kB.\n+    // 294 satoshis at the default rate of 3000 sat/kvB.\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n "
      },
      {
        "sha": "9b1df54ad590124ff616602236045d993bdbc2dd",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -736,7 +736,7 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n     if (ui->radioSmartFee->isChecked())\n         ui->labelFeeMinimized->setText(ui->labelSmartFee->text());\n     else {\n-        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kB\");\n+        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kvB\");\n     }\n }\n \n@@ -771,7 +771,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     FeeReason reason;\n     CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, *m_coin_control, &returned_target, &reason));\n \n-    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kvB\");\n \n     if (reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)"
      },
      {
        "sha": "7ce03f99de9302e4c0e6fdc7015f450212ec81be",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -1564,7 +1564,7 @@ static RPCHelpMan getmempoolinfo()\n                         {RPCResult::Type::NUM, \"usage\", \"Total memory usage for the mempool\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_fee\", \"Total fees for the mempool in \" + CURRENCY_UNIT + \", ignoring modified fees through prioritizetransaction\"},\n                         {RPCResult::Type::NUM, \"maxmempool\", \"Maximum memory usage for the mempool\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"mempoolminfee\", \"Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\"},\n                         {RPCResult::Type::STR_AMOUNT, \"minrelaytxfee\", \"Current minimum relay fee for transactions\"},\n                         {RPCResult::Type::NUM, \"unbroadcastcount\", \"Current number of transactions that haven't passed initial broadcast yet\"}\n                     }},"
      },
      {
        "sha": "8190a2f006eb752a6e0ac61ea5c250e2d20e98f4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -1079,7 +1079,7 @@ static RPCHelpMan estimatesmartfee()\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB (only present if no errors were encountered)\"},\n+                        {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kvB (only present if no errors were encountered)\"},\n                         {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Errors encountered during processing (if there are any)\",\n                             {\n                                 {RPCResult::Type::STR, \"\", \"error\"},\n@@ -1148,7 +1148,7 @@ static RPCHelpMan estimaterawfee()\n                     {\n                         {RPCResult::Type::OBJ, \"short\", /* optional */ true, \"estimate for short time horizon\",\n                             {\n-                                {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kB\"},\n+                                {RPCResult::Type::NUM, \"feerate\", /* optional */ true, \"estimate fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n                                 {RPCResult::Type::NUM, \"decay\", \"exponential decay (per block) for historical moving average of confirmation data\"},\n                                 {RPCResult::Type::NUM, \"scale\", \"The resolution of confirmation targets at this time horizon\"},\n                                 {RPCResult::Type::OBJ, \"pass\", /* optional */ true, \"information about the lowest range of feerates to succeed in meeting the threshold\","
      },
      {
        "sha": "e7f7e3e669fab5eae470a3290c5c13c79e4549a9",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -601,8 +601,8 @@ static RPCHelpMan getnetworkinfo()\n                                 {RPCResult::Type::BOOL, \"proxy_randomize_credentials\", \"Whether randomized credentials are used\"},\n                             }},\n                         }},\n-                        {RPCResult::Type::NUM, \"relayfee\", \"minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\"},\n-                        {RPCResult::Type::NUM, \"incrementalfee\", \"minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\"},\n+                        {RPCResult::Type::NUM, \"relayfee\", \"minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kvB\"},\n+                        {RPCResult::Type::NUM, \"incrementalfee\", \"minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kvB\"},\n                         {RPCResult::Type::ARR, \"localaddresses\", \"list of local addresses\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "d21a6b86fa50426db812200548610d6169ff12ca",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -834,7 +834,7 @@ static RPCHelpMan sendrawtransaction()\n                     {\"hexstring\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex string of the raw transaction\"},\n                     {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())},\n                         \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT +\n-                            \"/kB.\\nSet to 0 to accept any fee rate.\\n\"},\n+                            \"/kvB.\\nSet to 0 to accept any fee rate.\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR_HEX, \"\", \"The transaction hash in hex\"\n@@ -895,7 +895,7 @@ static RPCHelpMan testmempoolaccept()\n                             {\"rawtx\", RPCArg::Type::STR_HEX, RPCArg::Optional::OMITTED, \"\"},\n                         },\n                         },\n-                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n+                    {\"maxfeerate\", RPCArg::Type::AMOUNT, RPCArg::Default{FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK())}, \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kvB\\n\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n@@ -1783,7 +1783,7 @@ static RPCHelpMan analyzepsbt()\n                         }},\n                     }},\n                     {RPCResult::Type::NUM, \"estimated_vsize\", /* optional */ true, \"Estimated vsize of the final signed transaction\"},\n-                    {RPCResult::Type::STR_AMOUNT, \"estimated_feerate\", /* optional */ true, \"Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kB. Shown only if all UTXO slots in the PSBT have been filled\"},\n+                    {RPCResult::Type::STR_AMOUNT, \"estimated_feerate\", /* optional */ true, \"Estimated feerate of the final signed transaction in \" + CURRENCY_UNIT + \"/kvB. Shown only if all UTXO slots in the PSBT have been filled\"},\n                     {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The transaction fee paid. Shown only if all UTXO slots in the PSBT have been filled\"},\n                     {RPCResult::Type::STR, \"next\", \"Role of the next person that this psbt needs to go to\"},\n                     {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message (if there is one)\"},"
      },
      {
        "sha": "90e4bb3a05076549110b934f6fc93b6d189c4a65",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa83e95ac6f318caa38016a08fa4e402c3b05833/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "patch": "@@ -46,19 +46,19 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-avoidpartialspends\", strprintf(\"Group outputs by address, selecting all or none, instead of selecting on a per-output basis. Privacy is improved as an address is only used once (unless someone sends to it after spending from it), but may result in slightly higher fees as suboptimal coin selection may result due to the added limitation (default: %u (always enabled for wallets with \\\"avoid_reuse\\\" enabled))\", DEFAULT_AVOIDPARTIALSPENDS), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-changetype\", \"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\"). Default is same as -addresstype, except when -addresstype=p2sh-segwit a native segwit output is used when sending to a native segwit address)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-disablewallet\", \"Do not load the wallet and disable wallet RPC calls\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+    argsman.AddArg(\"-discardfee=<amt>\", strprintf(\"The fee rate (in %s/kvB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\",\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n-    argsman.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data. 0 to entirely disable the fallbackfee feature. (default: %s)\",\n+    argsman.AddArg(\"-fallbackfee=<amt>\", strprintf(\"A fee rate (in %s/kvB) that will be used when fee estimation has insufficient data. 0 to entirely disable the fallbackfee feature. (default: %s)\",\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-keypool=<n>\", strprintf(\"Set key pool size to <n> (default: %u). Warning: Smaller sizes may increase the risk of losing funds when restoring from an old backup, if none of the addresses in the original keypool have been used.\", DEFAULT_KEYPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-maxapsfee=<n>\", strprintf(\"Spend up to this amount in additional (absolute) fees (in %s) if it allows the use of partial spend avoidance (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_MAX_AVOIDPARTIALSPEND_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+    argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kvB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n+    argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kvB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #ifdef ENABLE_EXTERNAL_SIGNER"
      }
    ]
  },
  {
    "sha": "fae196147bae11202c0d54543dc12ba5d92ab0cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWUxOTYxNDdiYWUxMTIwMmMwZDU0NTQzZGMxMmJhNWQ5MmFiMGNj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-01T16:29:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-05-01T16:21:05Z"
      },
      "message": "doc: Clarify that feerates are per virtual size",
      "tree": {
        "sha": "7588686cbe3dfe53e6d6298113be310deb476588",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7588686cbe3dfe53e6d6298113be310deb476588"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae196147bae11202c0d54543dc12ba5d92ab0cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhmAwv9GMh9yaUx8OnPqHQMTyO501D5ZKqyzi80EhRVnGW3joLAAWwArdV3B7sW\nfuJnxDx5Jqa3rMYIQPGqezUtJmw6LzP/kHv/kvCB3IABcszoHGhu1/5yNi5ZFuFi\n8q/WCUWj19bEyJJM56ZUJPmxTLVfyiXWnq5W2yJa+ZE6NcrXqj3xj/U0Nf0na1B+\n+tGhL+r8SNGNPOtqRn4JiO9+4yRS5eOwEuTYFPD3TbswsKYc8AMCDjefecvbiLy5\nmrnkwgk8IXNg+AdwUsRK+Qgrd9ZRqvnqszXd95RVPHGBDY7kBznxFpyT8b5hPrls\nyJKYSJ77ytx8uTIhyKGlLtdqfxRR10xqfqKRUC82Cj4EVUYsnWfVFZt8PbnJxdGE\nreIOpZ/FCWSCwWA+LHT5nBL2RcAV1pUvrur60NPdiQ9xM6psJid8DUYsrYJv/KgN\n6m+fuYmY1HLtwE1HOSO6kivFdaSK0ydjEfpFXvoeE1MCaUYEzn0nKpfksmyPGixJ\n/GKlFdkH\n=QACG\n-----END PGP SIGNATURE-----",
        "payload": "tree 7588686cbe3dfe53e6d6298113be310deb476588\nparent fa83e95ac6f318caa38016a08fa4e402c3b05833\nauthor MarcoFalke <falke.marco@gmail.com> 1619886562 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1619886065 +0200\n\ndoc: Clarify that feerates are per virtual size\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae196147bae11202c0d54543dc12ba5d92ab0cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae196147bae11202c0d54543dc12ba5d92ab0cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae196147bae11202c0d54543dc12ba5d92ab0cc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa83e95ac6f318caa38016a08fa4e402c3b05833",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa83e95ac6f318caa38016a08fa4e402c3b05833"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9e9be24f5f59345503dd400bcfeec213d7341833",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fae196147bae11202c0d54543dc12ba5d92ab0cc",
        "patch": "@@ -510,7 +510,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-printpriority\", strprintf(\"Log transaction fee rate in \" + CURRENCY_UNIT + \"/kvB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-uacomment=<cmt>\", \"Append comment to the user agent string\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n \n     SetupChainParamsBaseOptions(argsman);"
      },
      {
        "sha": "aeb5b61926b633bb9f6e8673d2397c293d3d8623",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=fae196147bae11202c0d54543dc12ba5d92ab0cc",
        "patch": "@@ -850,7 +850,7 @@\n                    <property name=\"toolTip\">\n                     <string>Specify a custom fee per kB (1,000 bytes) of the transaction's virtual size.\n \n-Note:  Since the fee is calculated on a per-byte basis, a fee of \"100 satoshis per kB\" for a transaction size of 500 bytes (half of 1 kB) would ultimately yield a fee of only 50 satoshis.</string>\n+Note:  Since the fee is calculated on a per-byte basis, a fee rate of \"100 satoshis per kvB\" for a transaction size of 500 virtual bytes (half of 1 kvB) would ultimately yield a fee of only 50 satoshis.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>"
      },
      {
        "sha": "65d1c965b53a0bec600e29516f6fdbba77fb5b54",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fae196147bae11202c0d54543dc12ba5d92ab0cc",
        "patch": "@@ -601,8 +601,8 @@ static RPCHelpMan getnetworkinfo()\n                                 {RPCResult::Type::BOOL, \"proxy_randomize_credentials\", \"Whether randomized credentials are used\"},\n                             }},\n                         }},\n-                        {RPCResult::Type::NUM, \"relayfee\", \"minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kvB\"},\n-                        {RPCResult::Type::NUM, \"incrementalfee\", \"minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kvB\"},\n+                        {RPCResult::Type::NUM, \"relayfee\", \"minimum relay fee rate for transactions in \" + CURRENCY_UNIT + \"/kvB\"},\n+                        {RPCResult::Type::NUM, \"incrementalfee\", \"minimum fee rate increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kvB\"},\n                         {RPCResult::Type::ARR, \"localaddresses\", \"list of local addresses\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "632aae87c98ab9c37bd2943189e13f03db1cfd9b",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fae196147bae11202c0d54543dc12ba5d92ab0cc",
        "patch": "@@ -56,9 +56,9 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-maxapsfee=<n>\", strprintf(\"Spend up to this amount in additional (absolute) fees (in %s) if it allows the use of partial spend avoidance (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_MAX_AVOIDPARTIALSPEND_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-maxtxfee=<amt>\", strprintf(\"Maximum total fees (in %s) to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n-    argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kvB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n+    argsman.AddArg(\"-mintxfee=<amt>\", strprintf(\"Fee rates (in %s/kvB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kvB) to add to transactions you send (default: %s)\",\n+    argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #ifdef ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "9f84c613dd04b2cb64f1ebe8451fea2cb4dc2442",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae196147bae11202c0d54543dc12ba5d92ab0cc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fae196147bae11202c0d54543dc12ba5d92ab0cc",
        "patch": "@@ -2292,10 +2292,10 @@ static RPCHelpMan listlockunspent()\n static RPCHelpMan settxfee()\n {\n     return RPCHelpMan{\"settxfee\",\n-                \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n+                \"\\nSet the transaction fee rate in \" + CURRENCY_UNIT + \"/kvB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n                 {\n-                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee in \" + CURRENCY_UNIT + \"/kvB\"},\n+                    {\"amount\", RPCArg::Type::AMOUNT, RPCArg::Optional::NO, \"The transaction fee rate in \" + CURRENCY_UNIT + \"/kvB\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::BOOL, \"\", \"Returns true if successful\""
      }
    ]
  }
]