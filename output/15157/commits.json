[
  {
    "sha": "5087ab3bea637806a65ee7ecf989802c39936da1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDg3YWIzYmVhNjM3ODA2YTY1ZWU3ZWNmOTg5ODAyYzM5OTM2ZGEx",
    "commit": {
      "author": {
        "name": "Ben Carman",
        "email": "benthecarman@live.com",
        "date": "2019-04-04T20:11:10Z"
      },
      "committer": {
        "name": "Ben Carman",
        "email": "benthecarman@live.com",
        "date": "2019-04-04T20:11:10Z"
      },
      "message": "rpc: Bumpfee units change, satoshis to BTC",
      "tree": {
        "sha": "35e8614948779c55c163fb829c2d88b804ea8eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35e8614948779c55c163fb829c2d88b804ea8eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5087ab3bea637806a65ee7ecf989802c39936da1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEECtg4d8HwzR7pvWYK18x3C4H9IqgFAlymZN4ACgkQ18x3C4H9\nIqhCEgv+MBQhQ7MrFYd2W8KGVQMDFpgpE8yDEv/APttQeFlWHBzvV2RIS1bvyUKy\neQrS3eI7a5h7ANJSjXxxKxiHklBBBsEk9zAH1QcxWfpnZwnzs4EbMnTgrfzV5djn\nLx5Sh7px3BFv095ei9QnMlL3jnS0sVokCOiQ+E3m+rkaKVx7RMLOg1xmCFWJkGZC\nNinsHwoOuOvxGwVK1p5XrQEMgbX2rdBcH8HAwVzQIT8XSTlgU1my28rnEF/yqN9z\n8Yh5LY+P8dcO1sapRtlVjx1e1rfETnYj8wZJEFI9JSea60XrLHXo591o9ruXWKdL\nueB5zhEGAT9IBxDe21el4rWg+CH0GiaKHguJ5e42Nk2HhLg2XXFSeKY/UnL7lzWO\njAsWMWGuh8c02HhJIyyFPNRwnM2iIk8gLSMKbubWRhS6udoK6bNi6iiuGCdtSW3w\nLzgccvLGjonnucDE+pS0RxLhIm4Cs2lHWNNmClSd3CXGrb6SJmCuvKis8HViU4tS\nXCJR1bcI\n=8VqC\n-----END PGP SIGNATURE-----",
        "payload": "tree 35e8614948779c55c163fb829c2d88b804ea8eef\nparent 68520597ccf8ff3f6e8a7ad6869b06bf2012ae8a\nauthor Ben Carman <benthecarman@live.com> 1554408670 -0500\ncommitter Ben Carman <benthecarman@live.com> 1554408670 -0500\n\nrpc: Bumpfee units change, satoshis to BTC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5087ab3bea637806a65ee7ecf989802c39936da1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5087ab3bea637806a65ee7ecf989802c39936da1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5087ab3bea637806a65ee7ecf989802c39936da1/comments",
    "author": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68520597ccf8ff3f6e8a7ad6869b06bf2012ae8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68520597ccf8ff3f6e8a7ad6869b06bf2012ae8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68520597ccf8ff3f6e8a7ad6869b06bf2012ae8a"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 53,
      "deletions": 31
    },
    "files": [
      {
        "sha": "fdd4a06106e2cde76674952c075b10aa336b358c",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5087ab3bea637806a65ee7ecf989802c39936da1/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5087ab3bea637806a65ee7ecf989802c39936da1/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5087ab3bea637806a65ee7ecf989802c39936da1",
        "patch": "@@ -516,7 +516,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx)) {\n+    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* total_fee */, errors, old_fee, new_fee, mtx)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n             (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;"
      },
      {
        "sha": "55ee5770d149062106c0503e5fdb80b9cd66310e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5087ab3bea637806a65ee7ecf989802c39936da1/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5087ab3bea637806a65ee7ecf989802c39936da1/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5087ab3bea637806a65ee7ecf989802c39936da1",
        "patch": "@@ -130,15 +130,15 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     }\n \n     if (total_fee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n-        if (total_fee < minTotalFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n+        CAmount min_total_fee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n+        if (total_fee < min_total_fee) {\n+            errors.push_back(strprintf(\"Insufficient total_fee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+                                                                FormatMoney(min_total_fee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n             return Result::INVALID_PARAMETER;\n         }\n         CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n         if (total_fee < requiredFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+            errors.push_back(strprintf(\"Insufficient total_fee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n             return Result::INVALID_PARAMETER;\n         }\n@@ -169,14 +169,14 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n \n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // This may occur if the user set total_fee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n     CFeeRate minMempoolFeeRate = mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n     if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         errors.push_back(strprintf(\n             \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"\n-            \"the totalFee value should be at least %s or the settxfee value should be at least %s to add transaction\",\n+            \"the total_fee value should be at least %s or the settxfee value should be at least %s to add transaction\",\n             FormatMoney(nNewFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize)),"
      },
      {
        "sha": "fdd4b05a0658df2aba6f09abc7f983e20469c584",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 15,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5087ab3bea637806a65ee7ecf989802c39936da1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5087ab3bea637806a65ee7ecf989802c39936da1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5087ab3bea637806a65ee7ecf989802c39936da1",
        "patch": "@@ -3205,11 +3205,12 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     CWallet* const pwallet = wallet.get();\n \n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    std::string totalFeeName = (IsDeprecatedRPCEnabled(\"bumpfee\")) ? \"totalFee\" : \"total_fee\";\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n@@ -3220,17 +3221,19 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n                 \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n                 \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-                \"Alternatively, the user can specify totalFee, or use RPC settxfee to set a higher fee rate.\\n\"\n+                \"Alternatively, the user can specify \" + totalFeeName + \", or use RPC settxfee to set a higher fee rate.\\n\"\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n                             {\"confTarget\", RPCArg::Type::NUM, /* default */ \"fallback to wallet's default\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis.\\n\"\n+                            {totalFeeName, (IsDeprecatedRPCEnabled(\"bumpfee\") ? RPCArg::Type::NUM : RPCArg::Type::AMOUNT),\n+                            /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in \" +\n+                            std::string((IsDeprecatedRPCEnabled(\"bumpfee\")) ? \"satoshis.\" : \"bitcoins.\") + \"\\n\"\n             \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n-            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n+            \"                         \" + totalFeeName + \" if the tx change output has to be removed because it is too close to\\n\"\n             \"                         the dust threshold.\"},\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n             \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n@@ -3259,34 +3262,42 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                     HelpExampleCli(\"bumpfee\", \"<txid>\")\n                 },\n             }.ToString());\n-    }\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n     // optional parameters\n-    CAmount totalFee = 0;\n+    CAmount total_fee = 0;\n     CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n+\n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"totalFee\", UniValueType(UniValue::VNUM)},\n+                {totalFeeName, UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n \n-        if (options.exists(\"confTarget\") && options.exists(\"totalFee\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and totalFee options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n+        if (options.exists(\"confTarget\") && (options.exists(totalFeeName))) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget and \" + totalFeeName +\" options should not both be set. Please provide either a confirmation target for fee estimation or an explicit total fee for the transaction.\");\n         } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n             coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n-        } else if (options.exists(\"totalFee\")) {\n-            totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n+        } else if (options.exists(\"total_fee\") && !IsDeprecatedRPCEnabled(\"bumpfee\")) {\n+            total_fee = AmountFromValue(options[\"total_fee\"]); // Convert to satoshis\n+            if (total_fee >= 100000000) { // User entered in satoshis\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid total_fee %s (must be less than 1)\", FormatMoney(total_fee)));\n+            }\n+            if (total_fee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid total_fee %s (must be greater than 0)\", FormatMoney(total_fee)));\n+            }\n+        } else if (options.exists(\"totalFee\") && IsDeprecatedRPCEnabled(\"bumpfee\")) {\n+            total_fee = options[\"totalFee\"].get_int64();\n+            if (total_fee <= 0) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(total_fee)));\n             }\n         }\n \n@@ -3313,7 +3324,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, total_fee, errors, old_fee, new_fee, mtx);\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:"
      },
      {
        "sha": "2429dcd81567ab4fe4e5221d2e4fba347c6a768c",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5087ab3bea637806a65ee7ecf989802c39936da1/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5087ab3bea637806a65ee7ecf989802c39936da1/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=5087ab3bea637806a65ee7ecf989802c39936da1",
        "patch": "@@ -71,6 +71,8 @@ def run_test(self):\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n+        test_too_large_total_fee(rbf_node, dest_address)\n+        test_0_total_fee(rbf_node, dest_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n         self.log.info(\"Success\")\n@@ -168,10 +170,10 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n def test_small_output_fails(rbf_node, dest_address):\n     # cannot bump fee with a too-small output\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n+    rbf_node.bumpfee(rbfid, {\"total_fee\": 0.00050000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"total_fee\": 0.00050001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -182,12 +184,21 @@ def test_dust_to_fee(rbf_node, dest_address):\n     # (32-byte p2sh-pwpkh output size + 148 p2pkh spend estimate) * 10k(discard_rate) / 1000 = 1800\n     # P2SH outputs are slightly \"over-discarding\" due to the IsDust calculation assuming it will\n     # be spent as a P2PKH.\n-    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 50000 - 1800})\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"total_fee\": 0.00050000 - 0.00001800})\n     full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n     assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00050000\"))\n     assert_equal(len(fulltx[\"vout\"]), 2)\n     assert_equal(len(full_bumped_tx[\"vout\"]), 1)  # change output is eliminated\n \n+def test_too_large_total_fee(rbf_node, dest_address):\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    assert_raises_rpc_error(-8, \"Invalid total_fee 1.00 (must be less than 1)\", rbf_node.bumpfee, rbfid, {\"total_fee\": 1.0})\n+\n+\n+def test_0_total_fee(rbf_node, dest_address):\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    assert_raises_rpc_error(-8, \"Invalid total_fee 0.00 (must be greater than 0)\", rbf_node.bumpfee, rbfid, {\"total_fee\": 0.0})\n+\n \n def test_settxfee(rbf_node, dest_address):\n     assert_raises_rpc_error(-8, \"txfee cannot be less than min relay tx fee\", rbf_node.settxfee, Decimal('0.000005'))\n@@ -207,17 +218,17 @@ def test_settxfee(rbf_node, dest_address):\n def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n-    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"total_fee\": 0.00002}) # 2000 sats\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"total_fee\": 0.00003}) # 3000 sats\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"total_fee\": 0.00003}) # 3000 sats\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n+    bumped = rbf_node.bumpfee(rbfid, {\"total_fee\": 0.0001 , \"replaceable\": False}) # 10000 sats\n     assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n-                            {\"totalFee\": 20000})\n+                            {\"total_fee\": 0.0002}) # 20000 sats\n \n \n def test_unconfirmed_not_spendable(rbf_node, rbf_node_address):"
      }
    ]
  }
]