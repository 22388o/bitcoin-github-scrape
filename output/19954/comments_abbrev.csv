vasild,2020-09-14 13:46:19,"This builds on top of #19031, adding one more commit to complete the [TORv3 puzzle](https://github.com/bitcoin/bitcoin/issues/18884). The dependency to #19031 is because if we create a TORv3 hidden service before #19031 is merged we will not be able to advertise it by gossiping. So, this PR is draft until all of #19031 is merged. Available for early review and testing.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692063434,692063434,
prayank23,2020-09-14 17:45:09,"Can we also add the option to delete `onion_private_key` and `onion_private_key_obsolete_torv2`automatically every time bitcoind is restarted? So that it gets new address each time.\n\nOr is it something out of scope for this PR and will need a new issue or PR to discuss?",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692210055,692210055,
sipa,2020-09-14 17:47:41,"@prayank23 It can take a (very) long time for a node's rumoured address to be picked up, especially Tor ones. Getting a new one every time you restart your node is probably a good way to never get any incoming connections at all.\n\nIt may be useful as an optional feature, but seems out of scope here.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692211498,692211498,
Saibato,2020-09-14 18:32:55,"@prayank23\n>  Can we also add the option to delete `onion_private_key` and `onion_private_key_obsolete_torv2`automatically every time bitcoind is restarted? So that it gets new address each time.\n\n> \ntyi; #19635 we probably will need that in some form for v3 anyway.  \n\n\n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692235271,692235271,
laanwj,2020-09-15 18:18:56,"@prayank23 \n\n> Can we also add the option to delete onion_private_key and onion_private_key_obsolete_torv2automatically every time bitcoind is restarted? So that it gets new address each time.\n\nYes, but out of scope here. There's an issue for this already: #17491.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692889834,692889834,
Saibato,2020-09-15 19:29:29,"@laanwj \n> I'd slightly prefer creating a new file for v3 instead \n\n@vasild \nFeel free to grab there, then i can close that PR \n\nhttps://github.com/bitcoin/bitcoin/pull/19485\n\n ",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-692929925,692929925,
tryphe,2020-09-16 07:05:12,"utACK 9c9ff0a8c40421b43922a6b211f99b6aaf94a798. Light code review, code looks great, apart from several uses of `char name[1025]` which seem a bit clunky (oops, just noticed this nit was a refactor and not an addition, am okay with no change). Will need to fire up a test build. Nice work!",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-693216828,693216828,
Sjors,2020-09-17 11:52:39,"Concept ACK, I share Wladimir's preference for ""creating a new file for v3 instead of moving the old one"". Plus it'll make this change even smaller.\n\n> Perhaps begin with v3 as opt-in, then in the following release look at making it the default.\n\nGiven that v2 is deprecated I don't think v3 needs to be opt-in, at least not for new users.\n\nExisting users might rely on a static v2 addres",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-694180511,694180511,
vasild,2020-09-18 12:59:54,"Rebased on latest #19031 and addressed suggestions.\n\nIndeed creating a new file for the new TORv3 private key seems like a better idea. It also opens up a possibility for the users to continue using the old TORv2 service if needed by copying the contents of the old file to the new file.\n\nI think Bitcoin Core automatically creating just one Tor service is enough (that will be v3). If more c",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-694852846,694852846,
jonatack,2020-09-18 18:15:19,Practical testing of this PR with various Tor configuration options by and between @vasild and I today. Will review this weekend.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-695014269,695014269,
DrahtBot,2020-09-19 13:33:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19889 (test: Add consistent formatting for messages.py repr methods by adaminsky)\n* #19315 ([tests] Allow outbound & blo",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-695214133,695214133,
laanwj,2020-09-23 12:11:38,"> I think Bitcoin Core automatically creating just one Tor service is enough (that will be v3). \n\nThe only worry here would be that old nodes will run out of Tor nodes to connect to. But I don't know. I'm okay with this, it seems there's enough hurry to transition here that backwards compatibility concerns like that are mostly moot.\n\nEdit: a related concern is that we should start hardcodi",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-697322694,697322694,
jonatack,2020-09-25 17:08:09,"> The only worry here would be that old nodes will run out of Tor nodes to connect to. But I don't know. I'm okay with this, it seems there's enough hurry to transition here that backwards compatibility concerns like that are mostly moot.\n\nMaybe it would be good for the release notes to describe the situation with the planned full removal of v2 by the Tor Project and warn users running older n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-699045896,699045896,
vasild,2020-09-28 08:07:38,"> > I think Bitcoin Core automatically creating just one Tor service is enough (that will be v3).\n> \n> ... old nodes will run out of Tor nodes to connect to ...\n\nIf there are `N` old nodes each one of them will be able to connect to the other `N-1`. Only the very last one (when `N=1`) will have nobody to connect to. Also, statically configured Tor v2 services (via `torrc`) will keep operat",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-699850959,699850959,
vasild,2020-09-28 15:09:44,Rebase on latest #19031,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700068840,700068840,
vasild,2020-09-28 15:10:57,Address review suggestions.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700069599,700069599,
vasild,2020-09-28 15:13:06,Address review suggestion.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700070980,700070980,
jonatack,2020-09-29 08:56:16,Ready to move this PR out of Draft status? ðŸ˜€ Edit: snap!,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700565667,700565667,
vasild,2020-09-29 08:58:22,Opened for review. This PR supersedes #19031 and completes the TORv3 support.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700566816,700566816,
hebasto,2020-09-29 09:00:07,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-700567804,700567804,
vasild,2020-09-30 07:49:15,Addressed suggestions by @hebasto - always compare `m_format` with `>=` and use `static_cast` instead of C-style cast.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-701224311,701224311,
vasild,2020-09-30 10:34:37,"#### Addresses with length > 512 or addresses from one of the BIP155 founding networks (1..6) with wrong length (e.g. IPv4 address with length 5):\n\nWe throw an exception during unserialize which means that subsequent addresses in the same addrv2 message will not be read and the peer is `Misbehaving()`ed.\n\n#### Addresses from unknown network id (0 or >= 7), with address length <= 512:\n\n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-701307791,701307791,
laanwj,2020-09-30 11:40:23,"@vasild \n\n> Addresses with length > 512 or addresses from one of the BIP155 founding networks (1..6) with wrong length (e.g. IPv4 address with length 5):\n> We throw an exception during unserialize which means that subsequent addresses in the same addrv2 message will not be read and the peer is Misbehaving()ed.\n\nSounds like correct behavior to me. Larger addresses are explicitly forbidden",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-701336262,701336262,
jonatack,2020-09-30 15:16:11,"Tested re-ACK bb01c77865a565764e4e2f86265afef45506d7d7\n\nReviewed the diff since my last review per `git range-diff 301959f 1550aa8 bb01c77`, re-reviewed the changeset, rebuilt, deleted the `onion_private_key_torv3` file from previous testing and relaunched; node seems to be running nominally. The additional tests are great. A few comments above to take or leave; none are blockers.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-701457565,701457565,
hebasto,2020-10-01 13:20:24,"~Does `addrv2` code follows https://github.com/bitcoin/bips/pull/967 ?~\n\nUPDATE: I'v verified that this PR follows BIP 155 with (yet unmerged) https://github.com/bitcoin/bips/pull/967\n\nUPDATE-2: https://github.com/bitcoin/bips/pull/967 just merged.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-702129772,702129772,
laanwj,2020-10-02 11:47:32,"> May I suggest to replace s/""onion_private_key_torv3""/""onion_private_key_v3""/ as ""tor"" substring seems redundant here?\n\nKind of agree, the same came to mind for me but didn't bother to comment it initially. But a shorter filename that still contains the same information is good I suppose.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-702688812,702688812,
vasild,2020-10-02 13:00:55,Addressed review suggestions. Notice - I [restored](https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498801055) the original version of `p2p_addr_relay.py` and the test for addrv2 is now in a new test `p2p_addrv2_relay.py`.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-702720508,702720508,
jonatack,2020-10-02 13:15:06,"> I [restored](https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498801055) the original version of `p2p_addr_relay.py` and the test for addrv2 is now in a new test `p2p_addrv2_relay.py`.\n\nNice!",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-702727412,702727412,
jonatack,2020-10-03 11:07:44,"@vasild in the latest push, the `p2p_addr_relay.py` file perms were changed from 755 to 644; could you please revert that?\n\n<details><summary>a few suggestions for <code>p2p_addrv2_relay.py</code></summary><p>\n\n```diff\ndiff --git a/test/functional/p2p_addrv2_relay.py b/test/functional/p2p_addrv2_relay.py\nindex 19cfd0eadb..ca593148cc 100755\n--- a/test/functional/p2p_addrv2_relay.py\n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-703086391,703086391,
vasild,2020-10-05 13:20:21,Addressed review suggestions.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-703627129,703627129,
hebasto,2020-10-05 14:17:57,"I'd like that `s` and `s_` objects of the `Stream` class were named more descriptive, but I have no particular suggestion.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-703662561,703662561,
vasild,2020-10-05 14:41:09,Addressed review suggestions.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-703677160,703677160,
vasild,2020-10-06 09:47:04,Addressed review suggestions and extended some tests.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-704157591,704157591,
vasild,2020-10-06 09:53:00,"[Filtered code coverage report](https://people.freebsd.org/~vd/pr19954_946b79a9d_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19954_946b79a9d_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-704160646,704160646,
sipa,2020-10-07 01:36:51,"Code review ACK modulo nits.\n\nI tested:\n* `externalip=` with torv3 address, and saw it reported in logs\n* upgrading a automatically generated torv2 address to a v3 one\n* automatically creating a torv3 address\n* connecting two nodes with this patch to each other, and seeing `addrv2` reported in `getpeerinfo` output\n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-704641206,704641206,
vasild,2020-10-07 09:22:07,Addressed review suggestions.,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-704809252,704809252,
laanwj,2020-10-08 11:22:04,"~~re-ACK 1f06a2901d1ee924b95f482e8693842ee07863de~~\n~~Updated my nodes with the old version of this patch to the current one (and renamed the key file, the new name is good), it still works as expected.~~\n\nEdit: I have to retract this ACK for now, I'm having some problems with this PR on a FreeBSD node. It drops all outgoing connections with this dcf0cb477699d11afd0ff37c8bfb2b1b4f7f1ee5 merg",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-705504702,705504702,
jonatack,2020-10-08 15:00:12,"Re-reviewing and testing. I wonder if we need to warn or explain to users about the ""ERROR: DeserializeDB: Deserialize or I/O error"" and ""Invalid or missing peers.dat"" messages in the debug log if they go back to a v2 service.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-705629597,705629597,
vasild,2020-10-08 16:05:10,"Just to clarify (assuming this PR goes in 0.21): the format of `peers.dat` is changed in a backwards-incompatible way. Meaning that 0.20 and older will be unable to read `peers.dat` written by 0.21 or newer. This boils down to the fact that 0.20 and older cannot read e.g. torv3 addresses encoded in BIP155-addrv2 format.\n\nThis is not related in any way to the `onion_private_key` and `onion_v3_p",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-705669756,705669756,
laanwj,2020-10-09 07:06:22,"> Just to clarify (assuming this PR goes in 0.21): the format of peers.dat is changed in a backwards-incompatible way. Meaning that 0.20 and older will be unable to read peers.dat written by 0.21 or newer. This boils down to the fact that 0.20 and older cannot read e.g. torv3 addresses encoded in BIP155-addrv2 format.\n\nThis only means starting with (effectively) an empty peers.dat if you downg",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706011334,706011334,
sipa,2020-10-09 07:08:39,"Earlier today on IRC:\n\n```\n13:39:37 < vasild> CAddress::unser: time=1601829922, services=134218813, addr=62.107.200.30:8333\n13:39:56 < vasild> CAddress::unser: time=1600339981, services=134217741, addr=akinbo7tlegsnsxn.onion:8333\n13:40:31 < vasild> jonatack: wumpus: so...\n13:41:05 < vasild> in the network there are some peers with services=unusually high value\n13:42:07 < sipa> that's",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706012255,706012255,
laanwj,2020-10-09 07:22:12,"> 13:46:46 < vasild> so WriteCompactSize() can write >0x02000000 but ReadCompactSize() cannot read it back :-X\n\nOuch, good catch! This makes me doubt the choice to use a `CompactSize` for anything else than a size a little. It seems like misuse of a typed value. @sipa's patch to allow to bypass the check would solve the immediate issue, I just hope it won't cause problems for maintainers in th",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706017747,706017747,
sipa,2020-10-09 07:26:49,"@laanwj Well, they're already used as non-size values in BIP152, though luckily they're restricted to 16-bit values there, so the range limit was not an issue.\n\nI think it's fine to use it in BIP155 as well. The code is a bit confusing but perhaps we should just rename CompactSize to something else at some point. It's already known under other names outside Bitcoin Core anyway.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706019630,706019630,
jonatack,2020-10-09 07:33:08,"> This only means starting with (effectively) an empty peers.dat if you downgrade to a pre-0.21 version, right?\n\nYes, that's what I'm seeing.\n\n> (Nevertheless, it does make sense to mention the `peers.dat` format change and consequences in the release notes)\n\n:+1: ",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706022112,706022112,
vasild,2020-10-09 09:20:56,"Addressed review suggestions plus\n\n* Added release notes on the `peers.dat` format change\n* Made it possible to read big compact-size numbers (thanks to @sipa for the patch) this will enable addrman to read arbitrary big service flags from its database and also for the p2p layer to receive them when in `addrv2` encoding (the old `addr` encoding uses fixed 8-byte representation)\n* Added a h",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706071612,706071612,
jonatack,2020-10-09 09:55:05,"Initial updated suggestion for the release notes, though I am sure it can be improved further (pinging @harding). It may need to be edited by hand in the wiki if the notes have already been merged and branched off.\n\n```\nMigration from deprecated Tor v2 to Tor v3\n-----------------------\nThe Tor onion service that is automatically created (`-listenonion`) will now be\ncreated as a Tor v3 ",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706087447,706087447,
harding,2020-10-09 12:27:39,"@jonatack The peers.dat text looks fine to me.  Here's a few suggestions for the v3 onion service text, but I also think that was fine.\n\n```diff\n-The Tor onion service that is automatically created (`-listenonion`) will now be\n+The Tor onion service that is automatically created by setting the `-listenonion` configuration parameter will now be\n created as a Tor v3 service instead of Tor ",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706151636,706151636,
jonatack,2020-10-09 12:32:36,Thanks @harding!,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706153861,706153861,
vasild,2020-10-09 14:46:12,"Did some rewording of the release notes, mostly as suggested.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706224142,706224142,
Sjors,2020-10-09 17:43:05,"Tested that spinning up a v3 onion and connecting to it still works as of dcf0cb477699d11afd0ff37c8bfb2b1b4f7f1ee5. The PR title should probably mention that we start using `sendaddrv2` here, with TorV3 just being the cherry on top.",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706316340,706316340,
sipa,2020-10-10 17:36:47,"ACK dcf0cb477699d11afd0ff37c8bfb2b1b4f7f1ee5\n\nTwo small follow-ups (not blockers here):\n* Mention BIP155 support in `doc/bips.md`\n* Don't relay I2P/CJDNS in `RelayAddress` (until there is a sizable network that actually supports it)\n",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706585308,706585308,
jonatack,2020-10-10 18:14:52,"re-ACK dcf0cb477699d11afd0ff37c8bfb2b1b4f7f1ee5 per `git diff 9b56a68 dcf0cb4` only change since last review is an update to the release notes which partially picked up the suggested text. Running a node on this branch and addnode-ing to 6 other Tor v3 nodes, I see ""addrv2"" and ""sendaddrv2"" messages in getpeerinfo in both the ""bytesrecv_per_msg"" and ""bytessent_per_msg"" JSON objects.\n\n```\n   ",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706590084,706590084,
ariard,2020-10-11 00:04:46,Code Review ACK dcf0cb4,https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-706628217,706628217,
vasild,2020-10-12 12:04:59,"Congratulations to everybody involved :tada: \n\nNotice - I did not write the BIP, did not write the code initially, did not do the reviews nor did I test it much or nag people to prioritize it. Yet, this got a clean specification, solid code, thorough reviews and testing and was merged in time for 0.21. A true team effort!\n\nJust Epic!",https://github.com/bitcoin/bitcoin/pull/19954#issuecomment-707078873,707078873,
jonatack,2020-09-14 15:33:21,"Linter fails on missing newline here.\n```\n$ test/lint/lint-logs.sh\nAll calls to LogPrintf() and LogPrint() should be terminated with \n\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r488028133,488028133,src/torcontrol.cpp
jonatack,2020-09-14 16:13:17,nit: gossiping,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r488055752,488055752,src/protocol.h
jonatack,2020-09-14 16:15:57,s/who has indicated ADDRv2 support (has sent SENDADDRV2 himself)/that has signaled ADDRv2 support by sending SENDADDRv2./,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r488057593,488057593,src/protocol.h
laanwj,2020-09-15 18:16:30,"I'd slightly prefer creating a new file for v3 instead of moving the old one. This makes it easier to go back and forth to test this (as well as downgrade, when this becomes part of a release).\n\nIt also makes for amore straightforward path to both v2 and v3 hidden services (as @jonatack suggests).",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r488870384,488870384,doc/files.md
vasild,2020-09-18 12:44:01,Fixed.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r490922645,490922645,src/protocol.h
vasild,2020-09-18 12:44:23,Changed.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r490922857,490922857,src/protocol.h
vasild,2020-09-18 12:45:03,Deleted this code altogether.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r490923255,490923255,src/torcontrol.cpp
vasild,2020-09-18 12:45:45,Indeed. Done!,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r490923656,490923656,doc/files.md
Sjors,2020-09-21 14:49:11,nit: add `{`,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r492108245,492108245,src/torcontrol.cpp
laanwj,2020-09-23 12:19:32,"Maybe move this line to `## Legacy subdirectories and files`, if we're no longer going to spin up a v2 service.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r493521433,493521433,doc/files.md
laanwj,2020-09-23 12:34:08,"Good, looks ilke we already have an implementation of `be16toh` in `src/compat/endian.h`, so it doesn't need to be added.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r493535027,493535027,src/crypto/common.h
jonatack,2020-09-25 11:44:42,"1550aa8 suggestions\n\n- s/TOR/Tor / throughout, e.g. TORv2 -> Tor v2 -- the Tor project even tweeted recently to the community to please write ""Tor"" rather than ""TOR""\n\n- s/will be now/will now be/\n\n- s/Bitcoin Core will not attempt to read it anymore/Bitcoin Core will no longer attempt to read it/ (or ""will henceforth ignore it"")\n\n- s/If using the old TORv2 service is desirable/To u",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494932190,494932190,doc/release-notes.md
jonatack,2020-09-25 11:50:16,"896a5af style nit, `Format::V3` having the meaning of ""want addrv2"" is somewhat confusing, maybe create a boolean helper function `IsAddrV2Format()` to use both here and line 405 below for the code to be self-explanatory, or use more descriptive enum `Format` names, not sure here.\n\nIdem for `m_format > Format::V0`, `m_format > Format::V1`,and `m_format >= Format::V2`",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494934753,494934753,src/addrman.h
jonatack,2020-09-25 12:49:08,99047b077 is there test coverage for this new try/catch/Misbehaving/logging unparseable address code? has there been discussion on how much to add to the misbehavior score for this?,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494964219,494964219,src/net_processing.cpp
jonatack,2020-09-25 12:52:51,99047b0 covered by a test? ,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494966330,494966330,src/net_processing.cpp
jonatack,2020-09-25 13:10:37,"99047b07 nit, maybe ""gossiping of longer node addresses up to 512 bytes""",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494976240,494976240,src/protocol.h
jonatack,2020-09-25 13:14:22,"1550aa8 nits, s/TORv2/Tor v2/ and s/does not need/no longer needs/ (though if you move it to the legacy section, use the ""replaced by"" format instead)",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r494978423,494978423,doc/files.md
jonatack,2020-09-25 16:55:53,Had a look at if this needs a lock; it doesn't seem so.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r495115151,495115151,src/net_processing.cpp
vasild,2020-09-28 15:12:43,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496024495,496024495,src/torcontrol.cpp
vasild,2020-09-28 15:13:51,Done.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496025807,496025807,doc/files.md
vasild,2020-09-28 15:15:02,"Done.\n\n`cp -f onion_private_key onion_private_key_torv3` is clearer? :)",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496027199,496027199,doc/release-notes.md
vasild,2020-09-28 15:18:06,"AddrMan already had versions on its on-disk database with numbers. So I left the convention as is and just added new version ""3"" since the last one used was ""2"". This has nothing to do with ""addrv2"" or ""torv3"" :)\n\n`IsAddrV2Format()` would spoil the strict ordering of the AddrMan on-disk versions.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496030562,496030562,src/addrman.h
vasild,2020-09-28 15:20:08,"Yes! (since the last push with updated tests)\n\n> has there been discussion on how much to add to the misbehavior score for this?\n\nI don't think so. It is currently punishing the peer as much as if he sent us an addr message with >1000 addresses. I do not insist on that.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496032822,496032822,src/net_processing.cpp
vasild,2020-09-28 15:20:21,Yes! (since the last push with updated tests),https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496033072,496033072,src/net_processing.cpp
vasild,2020-09-28 15:21:37,I deliberately leave numbers outside of comments - as too much unnecessary details and also could go out of sync if the code is updated and the comment not.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496034538,496034538,src/protocol.h
vasild,2020-09-28 15:21:58,"Done - ""replaced by ...""",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496034952,496034952,doc/files.md
hebasto,2020-09-29 09:31:35,"e025121c1ca4b86296c6b36386786522bd79a6e1\n\n```suggestion\n        s << static_cast<uint8_t>(m_format);\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496575638,496575638,src/addrman.h
hebasto,2020-09-29 09:36:47,"e025121c1ca4b86296c6b36386786522bd79a6e1\n```suggestion\n        m_format = static_cast<Format>(format_tmp);\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r496579158,496579158,src/addrman.h
vasild,2020-09-30 07:49:33,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497309187,497309187,src/addrman.h
vasild,2020-09-30 07:49:45,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497309288,497309288,src/addrman.h
jonatack,2020-09-30 14:50:00,LGTM,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497572479,497572479,doc/release-notes.md
jonatack,2020-09-30 14:51:12,"Yes, I understand. Helper functions that replace the various `m_format >= Format::V<n>` may possibly be nice, but opinions can vary and it isn't a blocker.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497573433,497573433,src/addrman.h
jonatack,2020-09-30 14:52:05,"Per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es49-if-you-must-use-a-cast-use-a-named-cast and *C++ Programming Language 4th Edition*, section 11.5, it might be good to update the next line as well if you retouch.\n```diff\n         s << static_cast<uint8_t>(m_format);\n-        s << ((unsigned char)32);\n+        s << static_cast<unsigned char>(32);\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497574106,497574106,src/addrman.h
jonatack,2020-09-30 14:57:33,"Missing column separator `|`?\n```suggestion\n`onion_private_key` | Cached Tor onion service private key for `-listenonion` option. Was used for Tor v2 services; replaced by `onion_private_key_torv3` in [0.21.0](https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes/release-notes-0.21.0.md) | [PR #19954](https://github.com/bitcoin/bitcoin/pull/19954)\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497578644,497578644,doc/files.md
jonatack,2020-09-30 15:00:39,"(`code`) markup inside parentheses; maybe easier to read as: \n```suggestion\n  , e.g. `cp -f onion_private_key onion_private_key_torv3`.\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497581232,497581232,doc/release-notes.md
jonatack,2020-09-30 15:03:53,Should we test for both `msg_addr` and `msg_addrv2`?,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497583701,497583701,test/functional/p2p_addr_relay.py
jonatack,2020-09-30 15:10:25,Nice work on the tests!,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r497588719,497588719,src/net_processing.cpp
hebasto,2020-10-01 15:20:26,"76afce803bb5309a69517df5eac68529b7af2d29\n```suggestion\n        m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::SENDADDRv2));\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498327611,498327611,src/net_processing.cpp
hebasto,2020-10-01 15:32:59,"bb01c77865a565764e4e2f86265afef45506d7d7\n\nThe comment about #9214 seems outdated now:\n```suggestion\n        if (private_key.empty()) {\n            // No private key, generate one.\n            private_key = ""NEW:ED25519-V3"";\n        }\n```\n",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498336765,498336765,src/torcontrol.cpp
hebasto,2020-10-01 15:35:57,"bb01c77865a565764e4e2f86265afef45506d7d7\n\nSee #19638:\n```suggestion\n- The Tor onion service that is automatically created (`-listenonion`) will now\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498338888,498338888,doc/release-notes.md
vasild,2020-10-02 12:48:24,Fixed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498799536,498799536,doc/files.md
vasild,2020-10-02 12:48:38,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498799651,498799651,doc/release-notes.md
vasild,2020-10-02 12:51:15,"Right, `p2p_addr_relay.py` is the only test that exercises `msg_addr` and if we flip it to test `msg_addrv2` then `msg_addr` will be untested.\n\nI tried to combine both in one test, but it became too convoluted and so I copied the new test to `p2p_addrv2_relay.py` and restored the original `p2p_addr_relay.py`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498801055,498801055,test/functional/p2p_addr_relay.py
vasild,2020-10-02 12:51:36,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498801234,498801234,src/net_processing.cpp
vasild,2020-10-02 12:51:55,Changed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498801401,498801401,doc/release-notes.md
vasild,2020-10-02 12:55:32,"The comment is still relevant - we want to explicitly request the key type in order to avoid problems like #9214 in the future.\n\nIn other words - we don't want somebody to change this to `NEW:BEST` because if/when Tor upgrades to v4 then we may have #9214 again.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498803183,498803183,src/torcontrol.cpp
vasild,2020-10-02 13:03:02,That line is unmodified by the patch. I try to avoid sneaking unrelated improvements to surrounding code in order to ease reviewers and future history observers.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498807007,498807007,src/addrman.h
jonatack,2020-10-02 13:13:41,That's fair.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498812638,498812638,src/addrman.h
hebasto,2020-10-02 13:36:12,Correct.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r498825564,498825564,src/torcontrol.cpp
jonatack,2020-10-03 11:16:44,"```suggestion\n    return GetDataDir() / ""onion_v3_private_key"";\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499139208,499139208,src/torcontrol.cpp
jonatack,2020-10-03 11:18:10,"nit: IIRC, per PEP8, OS-level and stdlib imports go at the top. ",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499139283,499139283,test/functional/p2p_invalid_messages.py
jonatack,2020-10-03 11:35:27,"Should skipping invalid BIP155 addresses be applied only for `addrv2` messages?\n```cpp\nif (!addr.IsValid() && msg_type == NetMsgType::ADDRv2) {\n    continue;\n}\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499140417,499140417,src/net_processing.cpp
sipa,2020-10-04 22:29:13,"How about giving these a bit more descriptive names, like `V0_HISTORICAL`, `V1_DETERMINISTIC`, `V2_ASMAP`, `V3_BIP155`?",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499295620,499295620,src/addrman.h
sipa,2020-10-04 22:31:45,"A cleaner approach is using `OverrideStream` here (and elsewhere), which removes the need to undo the version change, or having a mutable version in CHashWriter.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499295803,499295803,src/addrman.h
vasild,2020-10-05 13:12:01,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499586890,499586890,src/torcontrol.cpp
vasild,2020-10-05 13:12:11,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499586991,499586991,test/functional/p2p_invalid_messages.py
vasild,2020-10-05 13:15:04,"I realized that this code is not necessary so I dropped it altogether - an invalid address is not routable and is not reachable, so we are not going to do anything with it.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499588933,499588933,src/net_processing.cpp
vasild,2020-10-05 13:16:19,Renamed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499589759,499589759,src/addrman.h
vasild,2020-10-05 13:17:31,"Right, changed to `OverrideStream`.\n\nhttps://github.com/bitcoin/bitcoin/pull/19503 is also an alternative if/when it gets merged.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499590590,499590590,src/addrman.h
hebasto,2020-10-05 14:04:34,"pico-nit:\n```suggestion\n    template <typename Stream>\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499623542,499623542,src/addrman.h
hebasto,2020-10-05 14:07:54,"pico-nit, as `clang-format` suggests, and s/V2/V2_ASMAP/ in comment:\n```suggestion\n        V0_HISTORICAL = 0,    //!< historic format, before commit e6b343d88\n        V1_DETERMINISTIC = 1, //!< for pre-asmap files\n        V2_ASMAP = 2,         //!< for files including asmap version\n        V3_BIP155 = 3,        //!< same as V2_ASMAP plus addresses are in BIP155 format\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499625806,499625806,src/addrman.h
hebasto,2020-10-05 14:08:33,"pico-nit:\n```suggestion\n    int nVersion;\n\npublic:\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499626217,499626217,src/hash.h
vasild,2020-10-05 14:41:19,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499650613,499650613,src/hash.h
vasild,2020-10-05 14:41:28,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499650706,499650706,src/addrman.h
vasild,2020-10-05 14:41:38,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499650830,499650830,src/addrman.h
jonatack,2020-10-05 16:11:14,"03572e9 After `git diff c212c7e 703db15` using `OverrideStream`, it looks like we can now revert these changes in `hash.h` and `streams.h`.\n```diff\n+++ b/src/hash.h\n@@ -102,7 +102,7 @@ private:\n     const int nType;\n-    int nVersion;\n+    const int nVersion;\n@@ -110,7 +110,6 @@ public:\n     int GetVersion() const { return nVersion; }\n-    void SetVersion(int n) { nVersion = n; }",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499714046,499714046,src/hash.h
sipa,2020-10-05 23:32:56,"You could use `s_ >> Using<CustomUintFormatter<1>>(m_format)` here (and possibly also in `Serialize`, for consistency, though it isn't really a gain there).",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499926937,499926937,src/addrman.h
sipa,2020-10-05 23:43:10,This should be unnecessary as well.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499929630,499929630,src/streams.h
sipa,2020-10-05 23:50:58,"It's a bit ugly to make the choice of how addrman is serialized on disk dependent on external code properly setting this m_format variable.\n\nI think it's fine to just always serialize in the latest format. In that case the `format` variable can be just be local to the deserialization code.\n\nAlternatively, if you want to focus on retaining backward compatibility as long as no BIP155 has bee",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499932221,499932221,src/addrman.h
sipa,2020-10-06 01:11:25,"If you use the `CNetMsgMaker:: Make(int nFlags, std::string msg_type, Args&&... args)` variant here, you can control the serialization flags, without needing the special casing for ADDRV2 inside `Make`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r499952970,499952970,src/net_processing.cpp
vasild,2020-10-06 09:28:14,Good catch! Removed.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500134583,500134583,src/hash.h
vasild,2020-10-06 09:29:31,"Used `CustomUintFormatter` here, but in `Serialize` it did not compile:\n```\nsrc/serialize.h:504:15: error: invalid operands to binary expression ('CAddrMan::Format' and 'int')\n        if (v < 0 || v > MAX) throw std::ios_base::failure(""CustomUintFormatter value out of range"");\n            ~ ^ ~\n```\nso I left the `static_cast` there.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500135370,500135370,src/addrman.h
vasild,2020-10-06 09:29:56,Removed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500135658,500135658,src/streams.h
vasild,2020-10-06 09:32:53,"I agree ""it's fine to just always serialize in the latest format"", changed the code accordingly - now the format variable is a local one in `Unserialize()` while `Serialize()` just serializes the constant `Format::V3_BIP155`.\n\nThis is also closer to the behavior before this PR (it always serialized in version 2, the latest at the time).",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500137462,500137462,src/addrman.h
hebasto,2020-10-06 09:33:26,Does this mean that `peers.dat` becomes unreadable if a user choose to downgrade his node at some point in the future?,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500137760,500137760,src/addrman.h
vasild,2020-10-06 09:45:27,"A good interface is [hard or impossible to misuse](https://testing.googleblog.com/2018/07/code-health-make-interfaces-hard-to.html). If we add `ADDRV2_FORMAT` to `nFlags` inside `Make()` that makes it impossible for the caller to misuse it like:\n\n```cpp\nmsgMaker.Make(0, NetMsgType::ADDRv2, vAddr); // huh!?\n```\n\nI think it is not good to impose on the caller: ""whenever you pass `NetMsgT",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500144970,500144970,src/net_processing.cpp
sipa,2020-10-06 17:15:12,"@vasild I agree with the notion, but this is just the wrong layer to deal with that. The serialization framework (which I'd consider netmessagemaker to be a thin wrapper around) shouldn't have knowledge about the data being serialized, or even about which message types exist.\n\n> I think it is not good to impose on the caller: ""whenever you pass `NetMsgType::ADDRv2` for `msg_type` you must also",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500464672,500464672,src/net_processing.cpp
jonatack,2020-10-06 17:24:01,"Testing this branch:\n\nOne or two restarts (always the first, sometimes a second one as well) after `cp onion_private_key onion_v3_private_key` to run a v2 service\n\n```\nERROR: DeserializeDB: Deserialize or I/O error - ReadCompactSize(): size too large: iostream error \nInvalid or missing peers.dat; recreating\n```\n\nOne, and sometimes two, restarts after `rm onion_v3_private_key` to ",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500470051,500470051,src/addrman.h
sipa,2020-10-06 22:57:27,"This block shouldn't be needed, `PeerManager::ProcessMessages` will catch exceptions thrown during message processing, and skip to the next message. That doesn't trigger any `Misbehaving`, but whether deserialization failure should have a misbehavior score (and the future of misbehavior scores at all...) seems like an orthogonal issue that needn't be addressed here.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500642162,500642162,src/net_processing.cpp
sipa,2020-10-06 23:02:11,"This can instead be:\n\n```c++\nMisbehaving(pfrom.GetId(), 20, strprintf(""%s message size = %u"", msg_type, vAddr.size()));\n```\n\nAs msg_type is just `const char*`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500643659,500643659,src/net_processing.cpp
sipa,2020-10-06 23:03:51,"Style nit: constants are all caps, so `ADDRV2`",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500644138,500644138,src/protocol.h
sipa,2020-10-06 23:04:07,"Style nit: constants are all caps, so `SENDADDRV2`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500644218,500644218,src/protocol.h
vasild,2020-10-07 09:18:00,That is also a valid point. Changed.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500862471,500862471,src/net_processing.cpp
vasild,2020-10-07 09:19:56,"I agree, removed the `try/catch`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500863644,500863644,src/net_processing.cpp
vasild,2020-10-07 09:21:04,Changed. Btw `msg_type` is `std::string` (not `const char*`). `strprintf()` takes it either way.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500864365,500864365,src/net_processing.cpp
vasild,2020-10-07 09:21:16,Renamed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500864492,500864492,src/protocol.h
vasild,2020-10-07 09:21:33,Renamed,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r500864676,500864676,src/protocol.h
vasild,2020-10-08 09:21:22,"> Does this mean that peers.dat becomes unreadable if a user choose to downgrade his node at some point in the future?\n\nYes. We can't have bitcoind-before-this-PR to read e.g. torv3 addresses from `peers.dat`.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501572509,501572509,src/addrman.h
hebasto,2020-10-08 15:28:24,Does this require mention in release notes?,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501812570,501812570,src/addrman.h
jonatack,2020-10-08 15:48:29,"0e05e14\n```suggestion\n    void ignore(size_t size) const { return stream->ignore(size); }\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501826865,501826865,src/streams.h
dongcarl,2020-10-08 15:50:46,"This seems like a possible source of user error, but I'm not sure how best to resolve it...\nPerhaps we could allow for `-listenonion=v2` and `-listenonion=v3`? Somehow that doesn't seem the most satisfying to me either... ",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501828537,501828537,doc/release-notes.md
jonatack,2020-10-08 15:59:36,"93c8f0ea suggestion (like `GetBIP155Network`)\n```diff\n-    }\n-\n-    return false;\n+    } // no default case, so the compiler can warn about missing cases\n+    assert(false);\n }\n```\n",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501834717,501834717,src/netaddress.cpp
jonatack,2020-10-08 16:07:43,"1f06a2901d1ee924b95f482e8693842ee07863de Perhaps inform users of the debug log messages, e.g. `ERROR: DeserializeDB: Deserialize or I/O error` and `Invalid or missing peers.dat`, that they may see if they use tor v2 henceforth, at least per my testing.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r501840169,501840169,doc/release-notes.md
laanwj,2020-10-09 07:04:34,"Personally, I think it would be ok to not support v2 addresses at all anymore. Given the short time they have left. But that there's a workaround (even if clunky) might help for some people.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502227966,502227966,doc/release-notes.md
vasild,2020-10-09 08:06:27,"@laanwj, I agree, given torv2 addresses will cease in less than a year - no need to add new config options (or extend existent ones) only to deprecate them immediately.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502257883,502257883,doc/release-notes.md
vasild,2020-10-09 08:12:07,`ignore()` modifies the state of the stream. It is not `const` in `CDataStream` and `CAutoFile` so this would not compile.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502261017,502261017,src/streams.h
jonatack,2020-10-09 08:45:19,"It does compile (I test if my suggestions compile before making them), though arguably const on a void function may not make sense. Consider this suggestion a question.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502280047,502280047,src/streams.h
jonatack,2020-10-09 09:07:08,"""void f() const makes the function itself const. This only really has meaning for member functions. Making a member function const means that it cannot call any non-const member functions, nor can it change any member variables. It also means that the function can be called via a const object of the class."" http://www.cplusplus.com/forum/general/12087/ (reply in 2009)\n\nalso: https://isocpp.git",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502292684,502292684,src/streams.h
vasild,2020-10-09 09:12:35,Added a release notes mention.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502295708,502295708,doc/release-notes.md
vasild,2020-10-09 09:12:45,Done,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502295809,502295809,src/netaddress.cpp
vasild,2020-10-09 09:14:21,I think it should not be `const` because it modifies the state of the stream. I guess it is not `const` for the same reason in the other stream classes.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502296690,502296690,src/streams.h
jonatack,2020-10-09 09:23:20,"1d3ec2a nit\n```suggestion\n * (e.g. for vectors) when the size is encoded as CompactSize.\n```",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502301880,502301880,src/serialize.h
jonatack,2020-10-09 10:22:46,"6fce3ce maybe\n```suggestion\n                ""Continuing operation by creating a new peers.dat file in the maximum supported format"",\n```\ncurrently (for me on debian) it would print\n\n`ERROR: DeserializeDB: Deserialize or I/O error - Unsupported format of addrman database: 4. Maximum supported is 3. Continuing operation without using the saved list of peers.: iostream error`",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502333178,502333178,src/addrman.h
vasild,2020-10-09 11:00:08,"The dot terminates the doxygen title.\n![dox1](https://user-images.githubusercontent.com/266751/95575574-3abae680-0a2f-11eb-91e7-8b39ef12e317.jpg)\n![dox2](https://user-images.githubusercontent.com/266751/95575577-3b537d00-0a2f-11eb-98df-659dd55565dc.jpg)\n",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502350905,502350905,src/serialize.h
jonatack,2020-10-09 11:10:11,"TIL, thanks. Apparently, per https://www.doxygen.nl/manual/docblocks.html#docexamples: ""To enable this behavior you should set JAVADOC_AUTOBRIEF to YES in the configuration file. If you enable this option and want to put a dot in the middle of a sentence without ending it, you should put a backslash and a space after it. Here is an example: `/** Brief description (e.g.\ using only a few words). De",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502355359,502355359,src/serialize.h
vasild,2020-10-09 14:49:12,"""Continuing operation by creating a new peers.dat"" is, strictly speaking, not true because the new `peers.dat` will not be created at the time this message is printed. It will be created later during shutdown or during one of the periodic dumps to disk.\n\nI left it as is.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502482433,502482433,src/addrman.h
ariard,2020-10-09 23:54:07,"As `maximum_supported_format` is currently V3_BIP155, the format should never be superior otherwise it would have throw L397. Did this is an attempt to future-proof  bump of the serialization format ? A future serialization format may override ADDRV2_FORMAT.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502715960,502715960,src/addrman.h
ariard,2020-10-10 00:17:26,"I think the BIP could be clearer on `addr/addrv2` processing responsibility once a `sendaddrv2` is received. \n\nOnce a `sendaddrv2` is received from a peer, a node :\n* MUST use `addrv2` messages to gossip addresses\n* MUST accept `addrv2`messages\n* MAY accept `addr` messages\n\nI guess it's better to be liberal with acceptance of legacy `addr` messages from `addrv2`-signaling peers (AFAI",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502719748,502719748,src/net.h
ariard,2020-10-10 00:40:30,"I think this check could be part of the net_processing layer, thus saving a function call in case of not-supported address as nothing is done otherwise. Further, it avoids having `m_wants_addrv2` in `CNode` which may contradict @jnewbery 's #19398, especially this PoC cleaning branch : https://github.com/jnewbery/bitcoin/commit/6fb753520787e13b5fdcbf835be781506537841b\n\nThat said, gathering the",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502722714,502722714,src/net.h
ariard,2020-10-10 00:58:42,"It might be interesting to underscore in comment that an address discovered from a BIP155 upgraded peer will be relayed further (`RelayAddress`) to non-upgraded ones through legacy `addr` message if the contained address is understood. \n\nI think it should even be part of the BIP to make a best-effort of BIP155 implementations filtering and relaying forward to non-upgraded peers addresses initi",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502724858,502724858,src/net_processing.cpp
vasild,2020-10-10 12:07:59,"Yes, this code will now only be reached if `format == V3_BIP155`. In the future `format` may be higher. By using `>=` we assume that a future format `V4_FOO` will also use `addrv2` encoding in which case this code will not have to be changed. If a future `V4_FOO` does not use `addrv2`, then this line will have to be changed to `==`.\n\nNotice however that if we use `==` now and a future `V4_FOO`",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502783796,502783796,src/addrman.h
vasild,2020-10-10 12:23:38,"Do you mean this?\n\n> Once `B` receives `sendaddrv2` from `A`:\n>\n> * `B` MUST use `addrv2` messages to gossip addresses to `A`\n> * `B` MUST accept `addrv2` messages from `A`\n> * `B` MAY accept `addr` messages from `A`\n\nThe current PR accepts both `addr` and `addrv2` no matter whether `sendaddrv2` has been sent or received.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502785105,502785105,src/net.h
vasild,2020-10-10 12:48:28,"`addr` and `addrv2` are just a transport encodings. Once received, the address is not in any particular encoding, it is a `CAddress` object in the memory of the node, not in `addr` nor in `addrv2` encoding.\n\nSo, when we further relay a `CAddress` object we don't care in what encoding we received it.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502787260,502787260,src/net_processing.cpp
vasild,2020-10-10 12:52:39,`PushAddress()` is called from 5 places. We don't want to duplicate the same code in 5 places.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502787620,502787620,src/net.h
ariard,2020-10-10 14:38:17,"Well another alternative is a new method `IsAddrUnderstood` on `CNode` making the call to `PushAddress()` conditional on it results. It can be done later, not a real concern.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502797250,502797250,src/net.h
ariard,2020-10-10 14:39:22,"> Do you mean this?\n\nYes, I think the BIP should state this clearly to hint other implementations. The current PR code is correct.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502797362,502797362,src/net.h
ariard,2020-10-10 14:43:17,"> So, when we further relay a CAddress object we don't care in what encoding we received it.\n\nRight, it's a just a matter of stating this in the BIP to avoid other implementations not propagating addresses due to receiving transport encoding A but forgetting to relay the decoded addr stream to peers speaking transport encoding B.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502797750,502797750,src/net_processing.cpp
sipa,2020-10-10 16:53:59,"I don't think we should aim to specify relay behavior in BIPs. There is no requirement that all software behaves the same, and best practices around it are constant changing in response to attacks and observed network conditions.\n\nThe BIP specifies what means of communicating addresses are available. What that gets used for is local node policy.",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r502809727,502809727,src/net_processing.cpp
MarcoFalke,2020-10-12 06:56:46,"```\n+ make -C src --jobs=1 check-security V=1\nmake: Entering directory '/bitcoin/distsrc-x86_64-linux-gnu/src'\nChecking binary security...\nREADELF=/gnu/store/pzq9s5ldl90h72p26jkdakyccdg9ib3k-profile/bin/x86_64-linux-gnu-readelf OBJDUMP=x86_64-linux-gnu-objdump OTOOL= /gnu/store/pzq9s5ldl90h72p26jkdakyccdg9ib3k-profile/bin/python3.7 ../contrib/devtools/security-check.py bitcoind  bitcoin-cl",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r503075378,503075378,src/test/netbase_tests.cpp
MarcoFalke,2020-10-12 06:57:05,This breaks the guix/gitian build. cc @fanquake ,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r503075539,503075539,src/test/netbase_tests.cpp
vasild,2020-10-12 07:35:46,"The patch below may fix it, but I can't confirm because on my machine `contrib/devtools/symbol-check.py` is happy with `src/test/test_bitcoin` which contains:\n\n```sh\nnm src/test/test_bitcoin |grep in6addr_loopback\n                 U in6addr_loopback\n```\n\n<details>\n<summary>possible workaround symbol-check.py in6addr_loopback</summary>\n\n```diff\ndiff --git i/src/test/netbase_te",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r503093949,503093949,src/test/netbase_tests.cpp
sipa,2020-10-12 07:37:21,See #20127.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r503094701,503094701,src/test/netbase_tests.cpp
jnewbery,2020-10-12 11:48:00,`PushAddress()` and all of the addr relay data will eventually move into net processing. See the commits in https://github.com/jnewbery/bitcoin/commits/2020-06-cs-main-split. That work obviously shouldn't hold up new features like BIP 155 and I'll continue to rebase those commits on master as things change. #19829 and #19910 are the next PRs to review if you'd like to help.,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r503240292,503240292,src/net.h
jnewbery,2020-11-01 11:06:29,"""if the file is modified by 0.21.0 or newer then older versions will not be able to read it. Those old versions, in the event of a downgrade, will log an error message that deserialization has failed and will continue normal operation""\n\nI don't see where this is enforced in 0.20 or earlier versions. If I'm understanding the v0.20 code correctly, then it'll try to unserialize the file, read gar",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r515607619,515607619,doc/release-notes.md
vasild,2020-11-01 14:42:50,"You are right!\n\nA dirty hack like the following would trick `<=0.20.1` to always fail deserialization of files in format `>=Format::V3_BIP155` with `Incorrect keysize in addrman deserialization`\n\n```diff\ndiff --git i/src/addrman.h w/src/addrman.h\nindex b4089dc89..9f6614cd1 100644\n--- i/src/addrman.h\n+++ w/src/addrman.h\n@@ -326,19 +326,19 @@ public:\n     void Serialize(Stream& s",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r515630531,515630531,doc/release-notes.md
jnewbery,2020-11-01 15:31:30,"Yes, that would work. It's essentially repurposing the keysize field in the peers.dat file as a ""non forward-compatible version number"" (i.e. if a newer version of the software writes a higher number here, then an older version of the software wouldn't be able to read that file).\n\nI believe that's what you wanted to achieve with the code here: https://github.com/bitcoin/bitcoin/pull/19954/file",https://github.com/bitcoin/bitcoin/pull/19954#discussion_r515635869,515635869,doc/release-notes.md
vasild,2020-11-02 11:09:51,See if this will make sense to you: https://github.com/bitcoin/bitcoin/pull/20284,https://github.com/bitcoin/bitcoin/pull/19954#discussion_r515899539,515899539,doc/release-notes.md
