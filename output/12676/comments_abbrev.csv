dexX7,2018-03-12T09:56:41Z,"~~Please note, I copied SignalsOptInRBF() from policy/rbf.cpp into core_write.cpp.~~\n\n~~This is probably not a good way to do, but it was done for now, because rbf.cpp isn't avaliable in LIBBITCOIN_COMMON. However, simply moving rbf.cpp from LIBBITCOIN_SERVER to LIBBITCOIN_COMMON doesn't work, because IsRBFOptIn() in rbf.cpp has mempool dependencies, which are also not available.~~\n\n~~As a",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372252842,372252842,
dexX7,2018-03-13T11:10:23Z,"@conscott brought up the idea of adding the flag to mempool entries and mempool RPCs. I really like the idea, because these calls are actually mempool aware and provide full access to the mempool and thus also allow to check, whether a transaction is really replaceable instead of simply signaling replaceablity.\n\nI updated the PR accordingly, because I believe this is the way to go. @conscott i",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372629523,372629523,
instagibbs,2018-03-13T16:10:55Z,re-ACK,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372722229,372722229,
conscott,2018-03-13T18:28:17Z,Concept ACK. Thanks for updating @dexX7 - just left a comment about the unknown state. Will test this out tomorrow. ,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372770690,372770690,
dexX7,2018-03-13T18:31:48Z,"Regarding checking the `""unknown""` case: in the case of the RPCs this isn't triggered, because they iterate over mempool entries, which are inherently part of the mempool, but I kind of tend to leave it there for the potential case `entryToJSON()` is called in a different context. I'd be fine with removing this path though, too.",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372771858,372771858,
meshcollider,2018-03-13T21:00:37Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-372816693,372816693,
dexX7,2018-04-24T11:12:50Z,"Hey guys, just to clarify: given there were mixed reactions, do you insist on removing the branch for the ""unknown"" case and replace it with an exception or is this PR good to go as it is?",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383893726,383893726,
conscott,2018-04-24T11:40:43Z,"@dexX7 - I was arguing over the `unknown`, but I am happy with it as is. ",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383900256,383900256,
MarcoFalke,2018-04-24T14:44:28Z,I just fail to see why it makes sense to burden rpc users with a third value that is never actually set.,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-383959187,383959187,
dexX7,2018-04-25T05:38:01Z,"Alright, updated. :)",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-384166309,384166309,
achow101,2018-07-09T22:29:03Z,utACK 870bd4c73ddf494dc23c658bf0fb672ee0109158,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-403640374,403640374,
MarcoFalke,2018-07-10T17:18:31Z,utACK 870bd4c,https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-403900362,403900362,
DrahtBot,2018-07-22T23:50:21Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 61 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-406906757,406906757,
laanwj,2018-08-07T12:26:42Z,"This seems mergeable, should do so after 0.17 branch as this is a feature",https://github.com/bitcoin/bitcoin/pull/12676#issuecomment-411038296,411038296,
MarcoFalke,2018-03-12T12:21:25Z,Imo this should be the same key-value as the `bip125-replaceable` in the rpcwallet,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173776923,173776923,src/core_write.cpp
dexX7,2018-03-12T13:54:20Z,Good idea! I updated the PR.,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173803498,173803498,src/core_write.cpp
MarcoFalke,2018-03-12T14:11:15Z,"`SignalsOptInRBF` is *not* bip125-replacable.\n\n* Confirmed transaction can never be replaced in the mempool\n* Unconfirmed transactions that depend on a mempool-transaction that signals opt in rbf can be replaced",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173809273,173809273,src/core_write.cpp
dexX7,2018-03-12T14:48:32Z,"Would you suggest to rename the flag to something like `signals-rbf`? Or rather do a stateful check, whether the transaction is actually replaceable, when the call is made?\n\nThe latter would probably be very useful, but given that `TxToUniv` isn't stateful and currently doesn't have any mempool relation, I don't see a straight forward way for this.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173822544,173822544,src/core_write.cpp
laanwj,2018-03-12T16:51:26Z,"If we do this I'd say rename it to `signals-rbf` or such, which is also the name of the function already. And not make the raw transactions utility function decoding functionality depend on the mempool.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173868402,173868402,src/core_write.cpp
MarcoFalke,2018-03-12T16:56:57Z,"In which case I tend to Concept NACK. Just returning if the flag is set contradicts the bip125-replacability rules, which only adds confusion.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r173870207,173870207,src/core_write.cpp
conscott,2018-03-13T05:27:02Z,"Sorry to hijack.\n\nI had considered adding a flag like this to the verbose output of `getrawmempool`. Assuming this idea were supported, based on your feedback @MarcoFalke - is it fair to say that you think it makes more sense to list a mempool transaction as `replaceable` (covering both explicit signaling and implicit based on ancestors) rather than just `signals-rbf` (just the explicit case)?",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174019830,174019830,src/core_write.cpp
instagibbs,2018-03-13T14:32:32Z,please use brackets for multi-line conditionals,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174152296,174152296,src/rpc/blockchain.cpp
Sjors,2018-03-13T15:06:56Z,Can you add a test for `unknown`?,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174166283,174166283,test/functional/feature_rbf.py
dexX7,2018-03-13T16:01:31Z,"Thanks, updated.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174188040,174188040,src/rpc/blockchain.cpp
dexX7,2018-03-13T18:22:23Z,"Hmm.. this is going to be a bit difficult: the `""unknown""` case is only triggered, if the transaction isn't found in the mempool.\n\nIn the case of the RPCs this path might even get removed, given that we iterate over mempool entries, which are indeed in the mempool and thus never `""unknown""`.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174237154,174237154,test/functional/feature_rbf.py
conscott,2018-03-13T18:24:59Z,"I think this can just be an `assert(bfState != RBF_TRANSACTIONSTATE_UNKNOWN)`. Looking at [rbf.cpp](https://github.com/bitcoin/bitcoin/blob/master/src/policy/rbf.cpp#L27-L32), the unknown state should only occur if the transaction in question is not found in the mempool, and this function only processes transactions that are currently in the mempool (with mempool lock held). \n\nIf the above is ",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174237987,174237987,src/rpc/blockchain.cpp
Sjors,2018-03-13T19:07:51Z,"Such a test might require mocking `IsRBFOptIn` in `blockchain.cpp`, but that seems overkill here.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174250847,174250847,test/functional/feature_rbf.py
Sjors,2018-03-13T19:09:13Z,"I'm not a fan of an assert here. It if it's really not possible, it's better to put the assert in `rbf.cpp` and remove this state from the enum. All this function should be concerned with is translating an enum to a string.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174251236,174251236,src/rpc/blockchain.cpp
Sjors,2018-03-13T19:12:14Z,Actually: what about a situation where a descendant is missing from the mempool (because it somehow got evicted)?,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174251982,174251982,src/rpc/blockchain.cpp
conscott,2018-03-14T02:27:46Z,"I should have been more clear. In general it is possible to return `RBF_TRANSACTIONSTATE_UNKNOWN` from `IsRBFOptIn()`, however this call stack in particular (all mempool related rpc's) only calls `IsRBFOptIn()` on transactions we know to be in the mempool. So, the assert would belong here, not in `rfb.cpp`. I understand this still may not be the best option, I just wanted to make my language clear",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174338287,174338287,src/rpc/blockchain.cpp
dexX7,2018-03-14T07:29:38Z,"I'm not a fan of using `assert` in non-consensus critical code, given it's massive impact, if it's hit (e.g. by accident in the future etc.).\n\nIn the case of the RPCs `""unknown""` isn't triggered, because they iterate over mempool entries, which are inherently part of the mempool, but I kind of tend to leave it there for the potential case `entryToJSON()` is called in a different context. I'd b",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174370937,174370937,src/rpc/blockchain.cpp
conscott,2018-03-14T09:06:49Z,"Agree about the 'descendant is missing from the mempool' not being an issue, or relevant, as far as I can see. \n\nI also see your point that in general the function could be called in a context where the tx is no longer in the mempool, but in cases strictly calling down from a mempool rpc, it seems like we should always 'know' rbf state in that context. In that sense, it may not make sense for ",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174391020,174391020,src/rpc/blockchain.cpp
Sjors,2018-03-14T13:58:22Z,"> this call stack in particular (all mempool related rpc's) only calls IsRBFOptIn() on transactions we know to be in the mempool\n\nThere's no guarantee all ancestors are in the mempool (someone might have deleted mempool.dat and it's still in the process of syncing, unless we guarantee order there). If a transaction in the mempool doesn't signal RBF, but its ancestors do, then it's replaceable.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174467491,174467491,src/rpc/blockchain.cpp
sipa,2018-03-14T16:42:42Z,"Mempool.dat is sorted in dependency order, so ancestors always appear earlier. Further, the mempool is at all times internally consistent (when observable): all mempool transactions either spend a transaction output from the chainstate (so from a confirmed transaction), or another mempool output. There are also never any double spends in the mempool.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r174528209,174528209,src/rpc/blockchain.cpp
conscott,2018-03-20T12:55:09Z,Any opinion on listing `unknown` state @MarcoFalke ? ,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r175753641,175753641,src/rpc/blockchain.cpp
MarcoFalke,2018-03-21T13:32:32Z,"I don't have a strong opinion if the value of 'bip125-replacable' should be string (yes/no/unknown) or bool.\n\nIt seems `entryToJSON` can only be called when the entry is in the mempool (c.f. `mempool.vTxHashes[e.vTxHashesIdx].first.ToString()`). Thus, we can surely determine if it is replacable.\n\nInstead of adding an `assert`, I'd prefer to throw some json exception that mentions that it n",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r176081053,176081053,src/rpc/blockchain.cpp
dexX7,2018-03-21T14:24:37Z,"But does entryToJSON really care, whether it's in the mempool or not? I think this limits it's functionality in some way.",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r176099700,176099700,src/rpc/blockchain.cpp
conscott,2018-03-23T06:43:33Z,"`entryToJSON` specifically processes mempool transactions (`CTxMemPoolEntry &e`) - and I don't believe you should be able to have a CTxMemPoolEntry reference for something not currently in the mempool (it should guarantees this consistency), so in that sense, `entryToJson` should never be called in a ""different context"" (where the tx is not in mempool). \n\nAnyhow, I am not trying to get pedanti",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r176649434,176649434,src/rpc/blockchain.cpp
MarcoFalke,2018-04-25T15:19:04Z,"No need to encode a bool into a string, imo",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r184100272,184100272,src/rpc/blockchain.cpp
dexX7,2018-04-25T15:57:12Z,Very good point.,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r184114791,184114791,src/rpc/blockchain.cpp
dexX7,2018-04-25T16:03:34Z,Updated.,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r184117044,184117044,src/rpc/blockchain.cpp
luke-jr,2018-07-09T10:16:43Z,"Throwing here seems nasty. Just don't add a key?\n\nEg: \n\n```C++\n    switch (IsRBFOptIn(tx, mempool)) {\n        case RBFTransactionState::FINAL:\n            info.push_back(Pair(""bip125-replaceable"", false));\n            break;\n        case RBFTransactionState::REPLACEABLE_BIP125:\n            info.push_back(Pair(""bip125-replaceable"", true));\n            break;\n        case RBF",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r200951106,200951106,src/rpc/blockchain.cpp
sdaftuar,2018-07-09T13:56:38Z,"I think it'd be nice to have this produce the same output as the wallet rpc calls that provide the same information (which appears to be ""yes""/""no""/""unknown"").",https://github.com/bitcoin/bitcoin/pull/12676#discussion_r201011162,201011162,src/rpc/blockchain.cpp
achow101,2018-07-09T22:28:17Z,I don't think it is even possible to hit this case since it requires the transaction to not be in the mempool (for the unknown state) yet every entry we are processing here comes from the mempool.,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r201166609,201166609,src/rpc/blockchain.cpp
MarcoFalke,2018-07-10T17:18:39Z,Agree with @achow101 ,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r201425955,201425955,src/rpc/blockchain.cpp
luke-jr,2018-07-10T17:32:06Z,Agree with @sdaftuar ,https://github.com/bitcoin/bitcoin/pull/12676#discussion_r201430389,201430389,src/rpc/blockchain.cpp
