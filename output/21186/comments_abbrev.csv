DrahtBot,2021-02-18 05:16:52,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21837 ([POC] Rust based Cuckoo Filter for m_addr_known by fanquake)\n* #21527 (net_processing: lock clean up by ajtowns)\",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-781061349,781061349,
jnewbery,2021-04-01 08:10:47,#21236 is merged. Moving this out of draft.,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-811732373,811732373,
hebasto,2021-04-02 23:02:24,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-812747777,812747777,
jnewbery,2021-04-06 13:17:10,"Thanks for the review, @hebasto! I've addressed both of your style comments.\n\n> four functions are moved from CNode members to the net_processing.cpp as free static functions. I agree that there's no need to make them members of Peer, but why not place them in a namespace? It could be unnamed, or we could choose a pretty good name for it :)\n\nThere's almost no difference between declaring a",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-814112000,814112000,
jnewbery,2021-04-06 13:46:43,"> #19176 (comment)\n\nI don't see a hugely compelling reason to prefer unnamed namespaces over static declaration in any of those links, but equally wouldn't be opposed to updating the style guide to prefer unnnamed namespaces just for consistency.\n\nOne advantage of using `static` that isn't mentioned is that it's instantly obvious to the reader that the symbol has internal linkage. Unnamed ",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-814132933,814132933,
hebasto,2021-04-10 14:13:36,"> For example, I've just realized that in this PR, all the new functions are in fact inside an unnamed namespace that spans lines 542-942.\n\nThere are three adjacent unnamed namespaces...\n\n> Unnamed namespaces often span many hundreds of lines...\n\nI think it is a code organizing problem, no?",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-817143110,817143110,
jnewbery,2021-04-10 14:38:12,"> There are three adjacent unnamed namespaces...\n\nYes. This is part of the unfinished work in #20758. Once that's finished, these unnamed namespaces should be fixed up.\n\n> > Unnamed namespaces often span many hundreds of lines...\n\n> I think it is a code organizing problem, no?\n\nI'm not sure. I think if we use unnamed namespaces for all the internal functions that we don't want expo",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-817146622,817146622,
hebasto,2021-04-10 14:42:10,"> I'm not sure. I think if we use unnamed namespaces for all the internal functions that we don't want exposed outside the translation unit then they'll usually be hundreds of lines.\n\nCorrect. I mean that our code base have some really huge translation units :)",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-817147104,817147104,
jnewbery,2021-04-12 09:40:02,"Thank you for the careful review @mzumsande. You caught two rebase errors :flushed: \n\nI've fixed those and addressed your other comment. I've also made some minor edits to comments to clarify concepts, and also re-reviewed everything to make sure no other errors have crept in.",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-817657534,817657534,
jnewbery,2021-04-30 10:40:23,"Thanks for the reviews @ajtowns and @amitiuttarwar. I've addressed all of your comments.\n\n> The ""Move addr relay data and logic into net processing"" commit is doing a lot of things, and I think that makes it a bit hard to review (and leads to rebase errors?). Might be worth putting a bit of effort into splitting it up further if some of the changes can be isolated?\n\nI did try that at one p",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-830006829,830006829,
practicalswift,2021-04-30 15:53:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-830190747,830190747,
DrahtBot,2021-05-03 09:33:58,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-831142655,831142655,
laanwj,2021-05-19 11:57:09,Code review ACK 0829516d1f3868c1c2ba507feee718325d81e329,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-844031773,844031773,
jonatack,2021-05-20 19:11:57,Concept ACK,https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-845405200,845405200,
mzumsande,2021-05-20 21:07:15,"ACK 0829516d1f3868c1c2ba507feee718325d81e329, reviewed the code and ran tests.",https://github.com/bitcoin/bitcoin/pull/21186#issuecomment-845477302,845477302,
fanquake,2021-03-12 00:52:55,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r592834789,592834789,src/net_processing.cpp
ajtowns,2021-04-01 19:58:24,"```suggestion\nstatic bool RelayAddrsWithPeer(const Peer& peer)\n{\n    return peer.m_addr_known != nullptr;\n}\n```",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r605911247,605911247,src/net_processing.cpp
hebasto,2021-04-03 00:03:20,"Out of curiosity, is there a way to teach the [`clang-format-diff.py`](https://github.com/bitcoin/bitcoin/tree/master/contrib/devtools#clang-format-diffpy) to support such formatting, i.e., both a leading comma and `{}` on the the same line?",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r606517593,606517593,src/net_processing.cpp
hebasto,2021-04-03 01:22:52,"style nit:\n```suggestion\n    std::array<std::pair<uint64_t, Peer*>, 2> best{{{0, nullptr}, {0, nullptr}}};\n```",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r606562457,606562457,src/net_processing.cpp
hebasto,2021-04-03 01:24:18,"style nit:\n```suggestion\n            if (addr.nTime > nSince && !peer->m_getaddr_sent && vAddr.size() <= 10 && addr.IsRoutable()) {\n```",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r606563197,606563197,src/net_processing.cpp
jnewbery,2021-04-06 13:14:14,Fixed!,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r607837015,607837015,src/net_processing.cpp
jnewbery,2021-04-06 13:16:43,Done,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r607838883,607838883,src/net_processing.cpp
jnewbery,2021-04-06 13:18:01,Good question! I'm not an expert on clang-format.,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r607839921,607839921,src/net_processing.cpp
jnewbery,2021-04-06 13:19:37,Perhaps `BCIS_BeforeComma`? (https://clang.llvm.org/docs/ClangFormatStyleOptions.html),https://github.com/bitcoin/bitcoin/pull/21186#discussion_r607841267,607841267,src/net_processing.cpp
mzumsande,2021-04-11 23:21:15,"It's counterintuitive to me that we don't relay addresses when `addr_relay` is true - I would have expected the opposite, or a different name like `disable_addr_relay`.",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611260357,611260357,src/net_processing.cpp
mzumsande,2021-04-11 23:34:07,"This seems incorrect to me: The old code was specifically ignoring GETADDR requests from all outbound connections (for reasons explained in the comment above this line), the new code only ignores from block-relay-only connections. ",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611261881,611261881,src/net_processing.cpp
mzumsande,2021-04-11 23:50:33,Why did you drop the check for `IsAddrCompatible()` in the move? Since `PushAddress()` is called from several places (not only `RelayAddress()` where this is checked seperately) this looks like more than a pure refactor to me.,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611264116,611264116,src/net.h
jnewbery,2021-04-12 08:40:40,"oh wow. That's terrible. Thank you for catching this.\n\nThis was a bad rebase on top of 49c10a9ca40, which combined the two error conditions:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 690b59476b..859b67755d 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -3521,11 +3521,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const s",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611435801,611435801,src/net_processing.cpp
jnewbery,2021-04-12 09:30:49,"You're right. The logic here is correct, but the naming is confusing. I've reversed the logic, and added comments to the place where this ctor is called to hopefully make this more intuitive.",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611472016,611472016,src/net_processing.cpp
jnewbery,2021-04-12 09:31:12,This is another rebase error. Thank you for catching!,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611472286,611472286,src/net.h
mzumsande,2021-04-12 10:46:13,"Oh, I see. There should be a functional test for this that would have failed - something which I [once](https://github.com/bitcoin/bitcoin/pull/19315#issuecomment-701571168) wanted to do anyway but then forgot about. I'll  write one soon!",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611521373,611521373,src/net_processing.cpp
jnewbery,2021-04-12 11:04:51,I'll very happily review once you open the PR.,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611532916,611532916,src/net_processing.cpp
amitiuttarwar,2021-04-12 20:18:52,"heads up that I've recently written some similar tests here: https://github.com/bitcoin/bitcoin/pull/21528/files?file-filters%5B%5D=.py#diff-5a9f30817894348260893f195cea07da88271b5e01b1531f0cd839ee85898592R150. I don't think it would cover this exact use case, but just mentioning incase its useful / incase the test improvements could play nice together. ",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611926283,611926283,src/net_processing.cpp
mzumsande,2021-04-12 21:02:34,"Cool - I didn't know, I had only looked at the non-test commits in your PR! This use case is the reverse direction (inbound/outbound send the getaddr to our node and get back addrs/nothing) from your tests, so I agree that these belong together.",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r611952434,611952434,src/net_processing.cpp
jnewbery,2021-04-29 07:25:02,More tests added in #21707,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r622796211,622796211,src/net_processing.cpp
amitiuttarwar,2021-04-29 21:59:42,this assert seems unnecessary / not useful. the previous line returns early if `m_addr_known` is not present. ,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623430587,623430587,src/net_processing.cpp
amitiuttarwar,2021-04-29 22:08:35,"isn't this more like... ""The maximum number of addresses permitted in an ADDR message""? because we also enforce on incoming ADDR messages. I'm not sure what the ""new"" is supposed to indicate in this comment. ",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623434604,623434604,src/net_processing.cpp
amitiuttarwar,2021-04-29 22:22:05,"I know you just moved this comment, but s/implying/indicating? sending a message is pretty explicit =P  \n",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623440472,623440472,src/net_processing.cpp
amitiuttarwar,2021-04-29 23:26:44,I'm curious- why did you opt to make this a standalone function that takes in a peer vs a member on peer itself (like it previously was on CNode)? ,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623485685,623485685,src/net_processing.cpp
jnewbery,2021-04-30 10:28:29,"Because `Peer` isn't a class. It's a data structure containing information about a Peer, which PeerManager acts on.\n\nI know the distinction is blurry in C++, but I think it's generally better to treat things as purely a data structure (which carries data that is acted on by external logic) or purely a class (where the data is private and internal logic exists behind well-defined public interfa",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623776939,623776939,src/net_processing.cpp
jnewbery,2021-04-30 10:28:52,Fixed!,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623777163,623777163,src/net_processing.cpp
jnewbery,2021-04-30 10:28:54,Much better. Thanks.,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623777176,623777176,src/net_processing.cpp
jnewbery,2021-04-30 10:28:55,Good point. Removed!,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623777191,623777191,src/net_processing.cpp
jnewbery,2021-04-30 10:29:00,Done.,https://github.com/bitcoin/bitcoin/pull/21186#discussion_r623777241,623777241,src/net_processing.cpp
amitiuttarwar,2021-04-30 20:35:33,"ok gotcha, thanks!",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r624181122,624181122,src/net_processing.cpp
sipa,2021-05-21 20:54:51,"Using `!IsBlockOnlyConn()` as proxy for ""should we relay addresses"" goes a bit in the opposite direction as the earlier connection types refactors went in. Any reason not just keep the function name (I realize there's a derived one with that name added, but it's ultimately still relying on this test.\n\nI don't have a particularly strong opinion here; I'm just noticing some flipflopping.",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r637227476,637227476,src/net_processing.cpp
jnewbery,2021-05-24 11:11:19,"This logic of checking `IsBlockOnlyConn()` is used only when calling the `Peer` ctor. After that, we use the `RelayAddrsWithPeer()`, which replaces the old `RelayAddrsWithConn()` function. That's a clearer separation between net and net_processing since we only check the connection type when initializing the Peer object.",https://github.com/bitcoin/bitcoin/pull/21186#discussion_r637869571,637869571,src/net_processing.cpp
