[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445663998",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#issuecomment-445663998",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14881",
    "id": 445663998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ0NTY2Mzk5OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-10T03:57:31Z",
    "updated_at": "2018-12-28T13:53:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#14336](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/14336.html) (net: implement poll by pstratem)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/445663998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450398599",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#issuecomment-450398599",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14881",
    "id": 450398599,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDM5ODU5OQ==",
    "user": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T17:43:34Z",
    "updated_at": "2018-12-28T17:43:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "This has become illegible. \r\n\r\nAm replacing with: https://github.com/bitcoin/bitcoin/pull/15052\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450398599/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450402743",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#issuecomment-450402743",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/14881",
    "id": 450402743,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDQwMjc0Mw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-28T18:10:06Z",
    "updated_at": "2018-12-28T18:10:06Z",
    "author_association": "MEMBER",
    "body": "Instead of closing/reopening pull request you can force push (and squash) your commits according to https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450402743/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239370263",
    "pull_request_review_id": 182134528,
    "id": 239370263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTM3MDI2Mw==",
    "diff_hunk": "@@ -75,4 +76,8 @@ int64_t GetTimeOffset();\n int64_t GetAdjustedTime();\n void AddTimeData(const CNetAddr& ip, int64_t nTime);\n \n+/** Functions to enable testing the contract for AddTimeData */\n+int CountOffsetSamples();\n+void AddTimeDataAlgorithm(const CNetAddr& ip, const int64_t nOffsetSample, std::set<CNetAddr>& knownSet, CMedianFilter<int64_t>& offsetFilter, int64_t& offset);",
    "path": "src/timedata.h",
    "position": 14,
    "original_position": 14,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "c4cd6dabde865558c98dc50de64dbaf6228eff09",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could move these declarations to the test file, so that production code does not have access to the declarations.\r\n\r\nWould benefit from `EXCLUSIVE_LOCKS_REQUIRED` on `AddTimeDataAlgorithm` - which if I'm not mistaken could be applied to the body of the method rather than the declaration.",
    "created_at": "2018-12-06T08:56:23Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239370263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239370263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239370263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239370263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239602774",
    "pull_request_review_id": 182433176,
    "id": 239602774,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTYwMjc3NA==",
    "diff_hunk": "@@ -75,4 +76,8 @@ int64_t GetTimeOffset();\n int64_t GetAdjustedTime();\n void AddTimeData(const CNetAddr& ip, int64_t nTime);\n \n+/** Functions to enable testing the contract for AddTimeData */\n+int CountOffsetSamples();\n+void AddTimeDataAlgorithm(const CNetAddr& ip, const int64_t nOffsetSample, std::set<CNetAddr>& knownSet, CMedianFilter<int64_t>& offsetFilter, int64_t& offset);",
    "path": "src/timedata.h",
    "position": 14,
    "original_position": 14,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "c4cd6dabde865558c98dc50de64dbaf6228eff09",
    "user": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hi Empact.\r\n\r\nThank you for the feedback, but I prefer to keep modifications to a minimum. Apart from this, I am a newbie with this code and not really proficient with C/C++, which is actually why I am focusing on unit testing in the first place. Functions added are either read only or do not modify the runtime data. That is why I did this in the first place. \r\n\r\nFirst priority here is to dig out the contract and make it testable the way it is now. I consider this as a prerequisite for any subsequent changes.\r\n\r\nIf you have any hints, then please be more explicit, as I partly understand your approach, but do not really know how to implement it in a safe manner.",
    "created_at": "2018-12-06T20:28:34Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239602774",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239602774"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239602774"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239602774/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 239370263
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239816019",
    "pull_request_review_id": 182703446,
    "id": 239816019,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTgxNjAxOQ==",
    "diff_hunk": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include <netaddress.h>\n+#include <arpa/inet.h>",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You could include `compat.h` instead.",
    "created_at": "2018-12-07T13:59:23Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239816019",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239816019"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239816019"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239816019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935051",
    "pull_request_review_id": 182858668,
    "id": 239935051,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNTA1MQ==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue);\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataComputeOffsetWhenSampleCountIsUneven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 200); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    if ((CountOffsetSamples() % 2) == 1) { // precondition 2: start with an even number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.210\"), 210);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 0);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.211\"), 211);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK(GetTimeOffset() != offset);               // and new offset was computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataDoNotComputeOffsetWhenSampleCountIsEven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 100); // precondition 1: at least 5 entries required to compute any offset\n+\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+    if (CountOffsetSamples() % 2 == 0) { // precondition 2: start with an uneven number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.110\"), 110);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 1);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.111\"), 111);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);           //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataIgnoreSampleWithDuplicateIP)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 300); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 310);\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 311);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples); // sample was ignored\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);       //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsWithinBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : 10 , init value: 0\n+\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all within bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, offsetFilter.median());\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 5);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsOutsideBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all outside bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << 1 + sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset);\n+    } // sorted filter: 0 x x x  -- x is outside the boundaries\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    // offset is computed only when number of entries is uneven\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.5\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 (x) x x  -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.6\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 x x x\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.7\"), 1, knownSet, offsetFilter, offset);                               // sorted filter : 0 1 1 (1) x x x x -- median (1)\n+    BOOST_CHECK_EQUAL(offset, 1);                                                                                       // flip to 1\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.8\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 x x x x x\n+    BOOST_CHECK_EQUAL(offset, 1);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.9\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 (x) x x x x x -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);                                                                                       // flip back to zero\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 9);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmAtLeastFiveSamplesToComputeOffset)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.1\"), 1, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.2\"), 2, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.3\"), 3, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.4\"), 4, knownSet, offsetFilter, offset); // this is the fifth entry\n+    BOOST_CHECK_EQUAL(offset, 2);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmIgnoresSamplesBeyondInternalLimit)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+\n+    for (int sample = 1; sample < limit; sample++) { // precondition: limit samples\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), limit);\n+\n+    int64_t pre = offset;\n+    int size = offsetFilter.size();\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, pre);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), size);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address)",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 201,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`address` should be const ref?",
    "created_at": "2018-12-07T20:19:56Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935051",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935051"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935051"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935051/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 224,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935388",
    "pull_request_review_id": 182859059,
    "id": 239935388,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNTM4OA==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue);\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataComputeOffsetWhenSampleCountIsUneven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 200); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    if ((CountOffsetSamples() % 2) == 1) { // precondition 2: start with an even number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.210\"), 210);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 0);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.211\"), 211);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK(GetTimeOffset() != offset);               // and new offset was computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataDoNotComputeOffsetWhenSampleCountIsEven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 100); // precondition 1: at least 5 entries required to compute any offset\n+\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+    if (CountOffsetSamples() % 2 == 0) { // precondition 2: start with an uneven number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.110\"), 110);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 1);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.111\"), 111);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);           //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataIgnoreSampleWithDuplicateIP)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 300); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 310);\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 311);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples); // sample was ignored\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);       //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsWithinBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : 10 , init value: 0\n+\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all within bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, offsetFilter.median());\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 5);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsOutsideBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all outside bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << 1 + sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset);\n+    } // sorted filter: 0 x x x  -- x is outside the boundaries\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    // offset is computed only when number of entries is uneven\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.5\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 (x) x x  -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.6\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 x x x\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.7\"), 1, knownSet, offsetFilter, offset);                               // sorted filter : 0 1 1 (1) x x x x -- median (1)\n+    BOOST_CHECK_EQUAL(offset, 1);                                                                                       // flip to 1\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.8\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 x x x x x\n+    BOOST_CHECK_EQUAL(offset, 1);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.9\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 (x) x x x x x -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);                                                                                       // flip back to zero\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 9);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmAtLeastFiveSamplesToComputeOffset)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.1\"), 1, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.2\"), 2, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.3\"), 3, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.4\"), 4, knownSet, offsetFilter, offset); // this is the fifth entry\n+    BOOST_CHECK_EQUAL(offset, 2);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmIgnoresSamplesBeyondInternalLimit)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+\n+    for (int sample = 1; sample < limit; sample++) { // precondition: limit samples\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), limit);\n+\n+    int64_t pre = offset;\n+    int size = offsetFilter.size();\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, pre);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), size);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address)\n+{\n+    struct sockaddr_in sa;\n+    inet_pton(AF_INET, address.c_str(), &(sa.sin_addr));\n+    CNetAddr addr = CNetAddr(sa.sin_addr);\n+    return addr;\n+}\n+\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue)",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 210,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here: `baseip` should be const ref?",
    "created_at": "2018-12-07T20:21:10Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935388",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935388"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935388"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 233,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935482",
    "pull_request_review_id": 182859203,
    "id": 239935482,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNTQ4Mg==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue);\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataComputeOffsetWhenSampleCountIsUneven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 200); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    if ((CountOffsetSamples() % 2) == 1) { // precondition 2: start with an even number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.210\"), 210);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 0);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.211\"), 211);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK(GetTimeOffset() != offset);               // and new offset was computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataDoNotComputeOffsetWhenSampleCountIsEven)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 100); // precondition 1: at least 5 entries required to compute any offset\n+\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+    if (CountOffsetSamples() % 2 == 0) { // precondition 2: start with an uneven number of samples\n+        AddTimeData(utilBuildAddress(\"1.1.1.110\"), 110);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 1);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.111\"), 111);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);           //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataIgnoreSampleWithDuplicateIP)\n+{\n+    utilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 300); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 310);\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(utilBuildAddress(\"1.1.1.310\"), 311);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples); // sample was ignored\n+    BOOST_CHECK_EQUAL(GetTimeOffset(), offset);       //new offset was not computed\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsWithinBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : 10 , init value: 0\n+\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all within bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, offsetFilter.median());\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 5);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmMedianIsOutsideBounds)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    for (int sample = 1; sample < 4; sample++) { // precondition: 4 samples, all outside bounds\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << 1 + sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset);\n+    } // sorted filter: 0 x x x  -- x is outside the boundaries\n+\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 4);\n+\n+    // offset is computed only when number of entries is uneven\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.5\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 (x) x x  -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.6\"), 1, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 x x x\n+    BOOST_CHECK_EQUAL(offset, 0);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.7\"), 1, knownSet, offsetFilter, offset);                               // sorted filter : 0 1 1 (1) x x x x -- median (1)\n+    BOOST_CHECK_EQUAL(offset, 1);                                                                                       // flip to 1\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.8\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 x x x x x\n+    BOOST_CHECK_EQUAL(offset, 1);\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.9\"), 2 * DEFAULT_MAX_TIME_ADJUSTMENT, knownSet, offsetFilter, offset); // sorted filter : 0 1 1 1 (x) x x x x x -- median (x)\n+    BOOST_CHECK_EQUAL(offset, 0);                                                                                       // flip back to zero\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), 9);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmAtLeastFiveSamplesToComputeOffset)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.1\"), 1, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.2\"), 2, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.3\"), 3, knownSet, offsetFilter, offset);\n+    BOOST_CHECK_EQUAL(offset, 0);\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.4\"), 4, knownSet, offsetFilter, offset); // this is the fifth entry\n+    BOOST_CHECK_EQUAL(offset, 2);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataAlgorithmIgnoresSamplesBeyondInternalLimit)\n+{\n+    int limit = 10;\n+    int64_t offset = 0;\n+    std::set<CNetAddr> knownSet;\n+    CMedianFilter<int64_t> offsetFilter(limit, 0); // max size : limit , init value: 0\n+\n+\n+    for (int sample = 1; sample < limit; sample++) { // precondition: limit samples\n+        std::stringstream stream;\n+        stream << \"1.1.1.\" << sample;\n+        std::string ip = stream.str();\n+        AddTimeDataAlgorithm(utilBuildAddress(ip), sample, knownSet, offsetFilter, offset);\n+    }\n+\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), limit);\n+\n+    int64_t pre = offset;\n+    int size = offsetFilter.size();\n+\n+    AddTimeDataAlgorithm(utilBuildAddress(\"1.1.1.200\"), 200, knownSet, offsetFilter, offset);\n+\n+    BOOST_CHECK_EQUAL(offset, pre);\n+    BOOST_CHECK_EQUAL(offsetFilter.size(), size);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address)\n+{\n+    struct sockaddr_in sa;\n+    inet_pton(AF_INET, address.c_str(), &(sa.sin_addr));\n+    CNetAddr addr = CNetAddr(sa.sin_addr);\n+    return addr;\n+}\n+\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue)\n+{\n+    for (int i = CountOffsetSamples(); i < 5; i++) { // precondition 1: at least 5 entries required to compute any offset\n+        int val = basevalue + i;\n+        std::stringstream stream;\n+        stream << baseip << val;\n+        std::string ip = stream.str();\n+        AddTimeData(utilBuildAddress(ip.c_str()), val);",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 217,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The call to `c_str` is not needed here. The function takes `std::string`.",
    "created_at": "2018-12-07T20:21:33Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935482",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935482"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239935482"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239935482/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 240,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936121",
    "pull_request_review_id": 182860029,
    "id": 239936121,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNjEyMQ==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could be dropped if `utilBuildAddress` was defined up here instead?",
    "created_at": "2018-12-07T20:24:21Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936121",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936121"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936121"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936121/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936239",
    "pull_request_review_id": 182860178,
    "id": 239936239,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNjIzOQ==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);\n+\n+void utilPreconditionIsAtLeastFiveEntriesRequired(std::string baseip, int basevalue);",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Same here. Move definition of `utilPreconditionIsAtLeastFiveEntriesRequired` here instead.",
    "created_at": "2018-12-07T20:24:52Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936239",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936239"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936239"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936239/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936426",
    "pull_request_review_id": 182860468,
    "id": 239936426,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIzOTkzNjQyNg==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See style guide for the function naming guidelines. Apply to all functions in this PR.",
    "created_at": "2018-12-07T20:25:45Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r239936426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/239936426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240419779",
    "pull_request_review_id": 183447276,
    "id": 240419779,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDQxOTc3OQ==",
    "diff_hunk": "@@ -34,4 +36,209 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr utilBuildAddress(std::string address);",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for the feeback. All suggestions are done.",
    "created_at": "2018-12-10T23:19:43Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240419779",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240419779"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240419779"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240419779/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 55,
    "side": "RIGHT",
    "in_reply_to_id": 239936426
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240432700",
    "pull_request_review_id": 183462627,
    "id": 240432700,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDQzMjcwMA==",
    "diff_hunk": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include <netaddress.h>\n+#include <arpa/inet.h>",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hi. Appveyor still fails with the same message. Any other suggestion?",
    "created_at": "2018-12-11T00:22:19Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240432700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240432700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240432700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240432700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 239816019
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240440753",
    "pull_request_review_id": 183472092,
    "id": 240440753,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDQ0MDc1Mw==",
    "diff_hunk": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include <netaddress.h>\n+#include <arpa/inet.h>",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hi. A quick update. \r\n\r\ncompat.h includes the appropriate include files for windows. Unfortunately inet_pton has a slightly differen signature in win32. Any hints how to handle this without having a windows machine at hand?. Any suggestions are welcome, since this keeps me from completing the contract tests.\r\n\r\nThx. ",
    "created_at": "2018-12-11T01:05:13Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240440753",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240440753"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240440753"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240440753/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 239816019
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240587702",
    "pull_request_review_id": 183648166,
    "id": 240587702,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MDU4NzcwMg==",
    "diff_hunk": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n //\n #include <netaddress.h>\n+#include <arpa/inet.h>",
    "path": "src/test/timedata_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "305ebd25db4dfbe742ca693e4160dafaff2e8acd",
    "user": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You can rebase your PR on #14922. That PR can fix the problem.\r\n\r\nThe minimum required Windows version for `inet_pton` is Vista, but `_WIN32_WINNT` was set to  0x0501 (Windows XP)",
    "created_at": "2018-12-11T12:22:19Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240587702",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240587702"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r240587702"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/240587702/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 6,
    "side": "RIGHT",
    "in_reply_to_id": 239816019
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243939071",
    "pull_request_review_id": 187824490,
    "id": 243939071,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0MzkzOTA3MQ==",
    "diff_hunk": "@@ -34,4 +35,205 @@ BOOST_AUTO_TEST_CASE(util_MedianFilter)\n     BOOST_CHECK_EQUAL(filter.median(), 7);\n }\n \n+BOOST_AUTO_TEST_CASE(util_MedianFilterShallNotGrowBeyondSize)\n+{\n+    CMedianFilter<int> filter(2, 15);\n+\n+    BOOST_CHECK_EQUAL(filter.size(), 1); // 15\n+\n+    filter.input(100); // 15 100\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+\n+    filter.input(10); // 100 10\n+    BOOST_CHECK_EQUAL(filter.size(), 2);\n+    BOOST_CHECK_EQUAL(filter.sorted()[0], 10);\n+    BOOST_CHECK_EQUAL(filter.sorted()[1], 100);\n+}\n+\n+\n+CNetAddr UtilBuildAddress(const std::string& address)\n+{\n+    struct sockaddr_in sa;\n+    memset(&sa, 0, sizeof(sockaddr_in));\n+    inet_pton(AF_INET, address.c_str(), &(sa.sin_addr));\n+    CNetAddr addr = CNetAddr(sa.sin_addr);\n+    return addr;\n+}\n+\n+\n+void UtilPreconditionIsAtLeastFiveEntriesRequired(const std::string& baseip, int basevalue)\n+{\n+    for (int i = CountOffsetSamples(); i < 5; i++) { // precondition 1: at least 5 entries required to compute any offset\n+        int val = basevalue + i;\n+        std::stringstream stream;\n+        stream << baseip << val;\n+        std::string ip = stream.str();\n+        AddTimeData(UtilBuildAddress(ip), val);\n+    }\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(util_AddTimeDataComputeOffsetWhenSampleCountIsUneven)\n+{\n+    UtilPreconditionIsAtLeastFiveEntriesRequired(\"1.1.1.\", 200); // precondition 1: at least 5 entries required to compute any offset\n+    BOOST_CHECK(CountOffsetSamples() >= 5);\n+\n+\n+    if ((CountOffsetSamples() % 2) == 1) { // precondition 2: start with an even number of samples\n+        AddTimeData(UtilBuildAddress(\"1.1.1.210\"), 210);\n+    }\n+\n+    BOOST_CHECK(CountOffsetSamples() % 2 == 0);\n+\n+\n+    int64_t offset = GetTimeOffset();\n+    int samples = CountOffsetSamples();\n+    AddTimeData(UtilBuildAddress(\"1.1.1.211\"), 211);\n+\n+    BOOST_CHECK_EQUAL(CountOffsetSamples(), samples + 1); // sample was added\n+    BOOST_CHECK(GetTimeOffset() != offset);               // and new offset was computed\n+}\n+",
    "path": "src/test/timedata_tests.cpp",
    "position": 65,
    "original_position": 73,
    "commit_id": "407e25564670b6c216f3c088965c930642ec85f0",
    "original_commit_id": "b6f8f5ae7b166313d089e5d62a387c807e78ec92",
    "user": {
      "login": "markaw67",
      "id": 29698193,
      "node_id": "MDQ6VXNlcjI5Njk4MTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/29698193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/markaw67",
      "html_url": "https://github.com/markaw67",
      "followers_url": "https://api.github.com/users/markaw67/followers",
      "following_url": "https://api.github.com/users/markaw67/following{/other_user}",
      "gists_url": "https://api.github.com/users/markaw67/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/markaw67/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/markaw67/subscriptions",
      "organizations_url": "https://api.github.com/users/markaw67/orgs",
      "repos_url": "https://api.github.com/users/markaw67/repos",
      "events_url": "https://api.github.com/users/markaw67/events{/privacy}",
      "received_events_url": "https://api.github.com/users/markaw67/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is this the correct address?",
    "created_at": "2018-12-26T04:10:22Z",
    "updated_at": "2018-12-26T14:24:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r243939071",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243939071"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/14881#discussion_r243939071"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/14881"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/243939071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 88,
    "original_line": 96,
    "side": "RIGHT"
  }
]