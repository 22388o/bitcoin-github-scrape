[
  {
    "sha": "a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWY0MjViNDhiYjNjMmMyZThiM2VlMDBjMTAyMGJjMThkYzcwYTI2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-13T16:25:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-03-28T00:24:07Z"
      },
      "message": "Add a consistency check for the block chain data structures\n\nThis adds a -checkblockindex (defaulting to true for regtest), which occasionally\ndoes a full consistency check for mapBlockIndex, setBlockIndexCandidates, chainActive, and\nmapBlocksUnlinked.",
      "tree": {
        "sha": "cc56057330297065648d132cd862aceccfd5f5aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc56057330297065648d132cd862aceccfd5f5aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4635a4c4e7b706f4fab35a06cf2782d55a11b1b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4635a4c4e7b706f4fab35a06cf2782d55a11b1b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4635a4c4e7b706f4fab35a06cf2782d55a11b1b8"
      }
    ],
    "stats": {
      "total": 172,
      "additions": 157,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ffcbaceb0a274959788f7bc8a52c94164f5a3a8b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -168,8 +168,8 @@ class CMainParams : public CChainParams {\n \n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n-        fDefaultCheckMemPool = false;\n         fAllowMinDifficultyBlocks = false;\n+        fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n@@ -227,8 +227,8 @@ class CTestNetParams : public CMainParams {\n \n         fRequireRPCPassword = true;\n         fMiningRequiresPeers = true;\n-        fDefaultCheckMemPool = false;\n         fAllowMinDifficultyBlocks = true;\n+        fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n         fTestnetToBeDeprecatedFieldRPC = true;\n@@ -272,8 +272,8 @@ class CRegTestParams : public CTestNetParams {\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n-        fDefaultCheckMemPool = true;\n         fAllowMinDifficultyBlocks = true;\n+        fDefaultConsistencyChecks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n         fTestnetToBeDeprecatedFieldRPC = false;\n@@ -299,7 +299,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n \n         fRequireRPCPassword = false;\n         fMiningRequiresPeers = false;\n-        fDefaultCheckMemPool = true;\n+        fDefaultConsistencyChecks = true;\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n     }\n@@ -315,7 +315,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n     virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setDefaultConsistencyChecks(bool afDefaultConsistencyChecks)  { fDefaultConsistencyChecks=afDefaultConsistencyChecks; }\n     virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n     virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n };"
      },
      {
        "sha": "ef20a88558537c3078b6e6c146fa8df7a53fc79d",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -58,8 +58,8 @@ class CChainParams\n     bool RequireRPCPassword() const { return fRequireRPCPassword; }\n     /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n-    /** Default value for -checkmempool argument */\n-    bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n+    /** Default value for -checkmempool and -checkblockindex argument */\n+    bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n     /** Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n     /** Skip proof-of-work check: allow mining of any difficulty block */\n@@ -103,8 +103,8 @@ class CChainParams\n     std::vector<CAddress> vFixedSeeds;\n     bool fRequireRPCPassword;\n     bool fMiningRequiresPeers;\n-    bool fDefaultCheckMemPool;\n     bool fAllowMinDifficultyBlocks;\n+    bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fSkipProofOfWorkCheck;\n@@ -124,7 +124,7 @@ class CModifiableParams {\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n     virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setDefaultConsistencyChecks(bool aDefaultConsistencyChecks)=0;\n     virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n     virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n };"
      },
      {
        "sha": "9ff87ad1e6ae1a668a90620117fba5edd9cac665",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -656,8 +656,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (GetBoolArg(\"-benchmark\", false))\n         InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n-    // Checkmempool defaults to true in regtest mode\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().DefaultCheckMemPool()));\n+    // Checkmempool and checkblockindex default to true in regtest mode\n+    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", Params().DefaultConsistencyChecks()));\n+    fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", Params().DefaultConsistencyChecks());\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "dc6f37c2200bdcd54b082dc7d8777e3b1ade9abc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 4,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -51,6 +51,7 @@ bool fImporting = false;\n bool fReindex = false;\n bool fTxIndex = false;\n bool fIsBareMultisigStd = true;\n+bool fCheckBlockIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n \n@@ -67,6 +68,8 @@ map<uint256, COrphanTx> mapOrphanTransactions;\n map<uint256, set<uint256> > mapOrphanTransactionsByPrev;\n void EraseOrphansFor(NodeId peer);\n \n+static void CheckBlockIndex();\n+\n /** Constant stuff for coinbase transactions we create: */\n CScript COINBASE_FLAGS;\n \n@@ -77,7 +80,7 @@ namespace {\n \n     struct CBlockIndexWorkComparator\n     {\n-        bool operator()(CBlockIndex *pa, CBlockIndex *pb) {\n+        bool operator()(CBlockIndex *pa, CBlockIndex *pb) const {\n             // First sort by most total work, ...\n             if (pa->nChainWork > pb->nChainWork) return false;\n             if (pa->nChainWork < pb->nChainWork) return true;\n@@ -99,8 +102,8 @@ namespace {\n     CBlockIndex *pindexBestInvalid;\n \n     /**\n-     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS or better that are at least\n-     * as good as our current tip. Entries may be failed, though.\n+     * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries may be failed, though.\n      */\n     set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n     /** Number of nodes with fSyncStarted. */\n@@ -2195,6 +2198,7 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n             uiInterface.NotifyBlockTip(hashNewTip);\n         }\n     } while(pindexMostWork != chainActive.Tip());\n+    CheckBlockIndex();\n \n     // Write changes periodically to disk, after relay.\n     if (!FlushStateToDisk(state, FLUSH_STATE_PERIODIC)) {\n@@ -2331,7 +2335,9 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n             CBlockIndex *pindex = queue.front();\n             queue.pop_front();\n             pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n-            setBlockIndexCandidates.insert(pindex);\n+            if (chainActive.Tip() == NULL || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n+                setBlockIndexCandidates.insert(pindex);\n+            }\n             std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> range = mapBlocksUnlinked.equal_range(pindex);\n             while (range.first != range.second) {\n                 std::multimap<CBlockIndex*, CBlockIndex*>::iterator it = range.first;\n@@ -2745,6 +2751,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n+        CheckBlockIndex();\n         if (!ret)\n             return error(\"%s : AcceptBlock FAILED\", __func__);\n     }\n@@ -3212,6 +3219,136 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n     return nLoaded > 0;\n }\n \n+void static CheckBlockIndex()\n+{\n+    if (!fCheckBlockIndex) {\n+        return;\n+    }\n+\n+    LOCK(cs_main);\n+\n+    // Build forward-pointing map of the entire block tree.\n+    std::multimap<CBlockIndex*,CBlockIndex*> forward;\n+    for (BlockMap::iterator it = mapBlockIndex.begin(); it != mapBlockIndex.end(); it++) {\n+        forward.insert(std::make_pair(it->second->pprev, it->second));\n+    }\n+\n+    assert(forward.size() == mapBlockIndex.size());\n+\n+    std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeGenesis = forward.equal_range(NULL);\n+    CBlockIndex *pindex = rangeGenesis.first->second;\n+    rangeGenesis.first++;\n+    assert(rangeGenesis.first == rangeGenesis.second); // There is only one index entry with parent NULL.\n+\n+    // Iterate over the entire block tree, using depth-first search.\n+    // Along the way, remember whether there are blocks on the path from genesis\n+    // block being explored which are the first to have certain properties.\n+    size_t nNodes = 0;\n+    int nHeight = 0;\n+    CBlockIndex* pindexFirstInvalid = NULL; // Oldest ancestor of pindex which is invalid.\n+    CBlockIndex* pindexFirstMissing = NULL; // Oldest ancestor of pindex which does not have BLOCK_HAVE_DATA.\n+    CBlockIndex* pindexFirstNotTreeValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_TREE (regardless of being valid or not).\n+    CBlockIndex* pindexFirstNotChainValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_CHAIN (regardless of being valid or not).\n+    CBlockIndex* pindexFirstNotScriptsValid = NULL; // Oldest ancestor of pindex which does not have BLOCK_VALID_SCRIPTS (regardless of being valid or not).\n+    while (pindex != NULL) {\n+        nNodes++;\n+        if (pindexFirstInvalid == NULL && pindex->nStatus & BLOCK_FAILED_VALID) pindexFirstInvalid = pindex;\n+        if (pindexFirstMissing == NULL && !(pindex->nStatus & BLOCK_HAVE_DATA)) pindexFirstMissing = pindex;\n+        if (pindex->pprev != NULL && pindexFirstNotTreeValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_TREE) pindexFirstNotTreeValid = pindex;\n+        if (pindex->pprev != NULL && pindexFirstNotChainValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_CHAIN) pindexFirstNotChainValid = pindex;\n+        if (pindex->pprev != NULL && pindexFirstNotScriptsValid == NULL && (pindex->nStatus & BLOCK_VALID_MASK) < BLOCK_VALID_SCRIPTS) pindexFirstNotScriptsValid = pindex;\n+\n+        // Begin: actual consistency checks.\n+        if (pindex->pprev == NULL) {\n+            // Genesis block checks.\n+            assert(pindex->GetBlockHash() == Params().HashGenesisBlock()); // Genesis block's hash must match.\n+            assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n+        }\n+        assert((pindexFirstMissing != NULL) == (pindex->nChainTx == 0)); // nChainTx == 0 is used to signal that all parent block's transaction data is available.\n+        assert(pindex->nHeight == nHeight); // nHeight must be consistent.\n+        assert(pindex->pprev == NULL || pindex->nChainWork >= pindex->pprev->nChainWork); // For every block except the genesis block, the chainwork must be larger than the parent's.\n+        assert(nHeight < 2 || (pindex->pskip && (pindex->pskip->nHeight < nHeight))); // The pskip pointer must point back for all but the first 2 blocks.\n+        assert(pindexFirstNotTreeValid == NULL); // All mapBlockIndex entries must at least be TREE valid\n+        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_TREE) assert(pindexFirstNotTreeValid == NULL); // TREE valid implies all parents are TREE valid\n+        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_CHAIN) assert(pindexFirstNotChainValid == NULL); // CHAIN valid implies all parents are CHAIN valid\n+        if ((pindex->nStatus & BLOCK_VALID_MASK) >= BLOCK_VALID_SCRIPTS) assert(pindexFirstNotScriptsValid == NULL); // SCRIPTS valid implies all parents are SCRIPTS valid\n+        if (pindexFirstInvalid == NULL) {\n+            // Checks for not-invalid blocks.\n+            assert((pindex->nStatus & BLOCK_FAILED_MASK) == 0); // The failed mask cannot be set for blocks without invalid parents.\n+        }\n+        if (!CBlockIndexWorkComparator()(pindex, chainActive.Tip()) && pindexFirstMissing == NULL) {\n+            if (pindexFirstInvalid == NULL) { // If this block sorts at least as good as the current tip and is valid, it must be in setBlockIndexCandidates.\n+                 assert(setBlockIndexCandidates.count(pindex));\n+            }\n+        } else { // If this block sorts worse than the current tip, it cannot be in setBlockIndexCandidates.\n+            assert(setBlockIndexCandidates.count(pindex) == 0);\n+        }\n+        // Check whether this block is in mapBlocksUnlinked.\n+        std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeUnlinked = mapBlocksUnlinked.equal_range(pindex->pprev);\n+        bool foundInUnlinked = false;\n+        while (rangeUnlinked.first != rangeUnlinked.second) {\n+            assert(rangeUnlinked.first->first == pindex->pprev);\n+            if (rangeUnlinked.first->second == pindex) {\n+                foundInUnlinked = true;\n+                break;\n+            }\n+            rangeUnlinked.first++;\n+        }\n+        if (pindex->pprev && pindex->nStatus & BLOCK_HAVE_DATA && pindexFirstMissing != NULL) {\n+            if (pindexFirstInvalid == NULL) { // If this block has block data available, some parent doesn't, and has no invalid parents, it must be in mapBlocksUnlinked.\n+                assert(foundInUnlinked);\n+            }\n+        } else { // If this block does not have block data available, or all parents do, it cannot be in mapBlocksUnlinked.\n+            assert(!foundInUnlinked);\n+        }\n+        // assert(pindex->GetBlockHash() == pindex->GetBlockHeader().GetHash()); // Perhaps too slow\n+        // End: actual consistency checks.\n+\n+        // Try descending into the first subnode.\n+        std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> range = forward.equal_range(pindex);\n+        if (range.first != range.second) {\n+            // A subnode was found.\n+            pindex = range.first->second;\n+            nHeight++;\n+            continue;\n+        }\n+        // This is a leaf node.\n+        // Move upwards until we reach a node of which we have not yet visited the last child.\n+        while (pindex) {\n+            // We are going to either move to a parent or a sibling of pindex.\n+            // If pindex was the first with a certain property, unset the corresponding variable.\n+            if (pindex == pindexFirstInvalid) pindexFirstInvalid = NULL;\n+            if (pindex == pindexFirstMissing) pindexFirstMissing = NULL;\n+            if (pindex == pindexFirstNotTreeValid) pindexFirstNotTreeValid = NULL;\n+            if (pindex == pindexFirstNotChainValid) pindexFirstNotChainValid = NULL;\n+            if (pindex == pindexFirstNotScriptsValid) pindexFirstNotScriptsValid = NULL;\n+            // Find our parent.\n+            CBlockIndex* pindexPar = pindex->pprev;\n+            // Find which child we just visited.\n+            std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangePar = forward.equal_range(pindexPar);\n+            while (rangePar.first->second != pindex) {\n+                assert(rangePar.first != rangePar.second); // Our parent must have at least the node we're coming from as child.\n+                rangePar.first++;\n+            }\n+            // Proceed to the next one.\n+            rangePar.first++;\n+            if (rangePar.first != rangePar.second) {\n+                // Move to the sibling.\n+                pindex = rangePar.first->second;\n+                break;\n+            } else {\n+                // Move up further.\n+                pindex = pindexPar;\n+                nHeight--;\n+                continue;\n+            }\n+        }\n+    }\n+\n+    // Check that we actually traversed the entire map.\n+    assert(nNodes == forward.size());\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // CAlert\n@@ -3968,6 +4105,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"net\", \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->id, pfrom->nStartingHeight);\n             pfrom->PushMessage(\"getheaders\", chainActive.GetLocator(pindexLast), uint256(0));\n         }\n+\n+        CheckBlockIndex();\n     }\n \n     else if (strCommand == \"block\" && !fImporting && !fReindex) // Ignore blocks received while importing"
      },
      {
        "sha": "71f21716d01cf14af988285f05e718121d21df2c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -126,6 +126,7 @@ extern bool fReindex;\n extern int nScriptCheckThreads;\n extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n+extern bool fCheckBlockIndex;\n extern unsigned int nCoinCacheSize;\n extern CFeeRate minRelayTxFee;\n "
      },
      {
        "sha": "5269e3bda7e8d433b09c6365770dae12a5a82df6",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a1f425b48bb3c2c2e8b3ee00c1020bc18dc70a26",
        "patch": "@@ -31,6 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n+        fCheckBlockIndex = true;\n         SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET"
      }
    ]
  }
]