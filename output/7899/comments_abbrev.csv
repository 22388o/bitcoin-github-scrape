promag,2016-04-16T22:12:39Z,Commit message too long.\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210914292,210914292,
kazcw,2016-04-16T23:02:41Z,Concept ACK.\n\nWhy require an address?\nWhat's the temporary keystore for?\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210921130,210921130,
dooglus,2016-04-16T23:22:20Z,"It always required an address. I guess it could accept a private key in place of the address - is that what you're getting at?\n\nThe temporary keystore is for holding the supplied private key, much like the one in rpc/rawtransaction.cpp's signrawtransaction code.\n",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210921926,210921926,
sipa,2016-04-16T23:28:31Z,"This seems like a useful function to have, but I prefer having separate\nfunctions for wallet-dependent rpcs and utility rpcs that get fed all their\narguments.\n\nAlso, would it suffice to add this to bitcoin-tx instead?\n",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210923220,210923220,
dooglus,2016-04-16T23:54:52Z,"So would you prefer a new RPC, `signmessagewithprivkey` or similar, and have the existing `signmessage` left as it is?\n\nThis it the first I have heard of bitcoin-tx. A quick look at it suggests it is for creating and working with raw transactions, whereas this PR is about signing messages.\n\nHaving said that, I don't mind where it is added. I just want a way of signing a message with a private ",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210925654,210925654,
paveljanik,2016-04-17T07:01:20Z,And what about new utility `bitcoin-msg`?\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210967947,210967947,
jonasschnelli,2016-04-17T07:42:27Z,"Agree with @sipa. Signing a message with a provided private-key is pure utility. The only dependencies you need are libsecp256k1, some entropy source and sh256. Not sure where it would fit best (`bitcoin-msg` sounds good but maybe there is something more generic).\n",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210971438,210971438,
sipa,2016-04-17T07:52:00Z,Signing does not need an entropy source.\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210971802,210971802,
jonasschnelli,2016-04-17T09:25:47Z,@sipa: how would you then randomize the context (like `secp256k1_context_randomize()`) https://github.com/bitcoin/secp256k1/blob/master/include/secp256k1.h#L558 ?\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-210984295,210984295,
laanwj,2016-04-17T11:15:18Z,"Concept ACK, however: please add a new method to sign message without wallet (thus providing the key), don't add another optional-wallet RPC call, or optional argument to `signmessage`. One near-future goal is to get rid of `#ifdef ENABLE_WALLET`s, to prevent circular dependencies and make the wallet a better isolated unit. @jonasschnelli\n\n> @sipa: how would you then randomize the context (like ",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-211002420,211002420,
btcdrak,2016-04-17T13:03:01Z,A separate `bitcoin-msg` seems a bit excessive.\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-211013956,211013956,
laanwj,2016-04-19T13:48:16Z,"> A separate bitcoin-msg seems a bit excessive.\n\nAgreed. Mind that we're using (pseudo-)static linking, so every new executable adds a hefty size to the archives.\nLet's just add a wallet-independent RPC call for signing messages. `verifymessage` in `rpcmisc.cpp` doesn't depend on the wallet either, so you could add it below that.\n",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-211929718,211929718,
laanwj,2016-04-26T14:31:31Z,"So, to summarize, the current approach is not mergable as it doesn't change the dependency on the wallet.\n\nGood options would be:\n- Adding message signing/verification functionality to `bitcoin-tx`\n- Adding a new RPC `signmessagewithprivkey` or similar (non-dependent on the wallet)\n\nBad options are:\n- A separate `bitcoin-msg` utility. This is overkill.\n\n@dooglus Are you going to move this",https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-214764556,214764556,
laanwj,2016-04-27T11:59:02Z,Closing in favor of #7953\n,https://github.com/bitcoin/bitcoin/pull/7899#issuecomment-215060689,215060689,
