instagibbs,2016-11-20T21:04:04Z,I also think this is a PR worthy of backport.\n,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261805566,261805566,
gmaxwell,2016-11-20T21:05:33Z,"Concept ACK, and I also think it would be worth considering for backport.\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261805663,261805663,
sipa,2016-11-20T21:06:39Z,"Sigh, please no extra boolean arguments everywhere :(\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261805727,261805727,
instagibbs,2016-11-20T21:08:47Z,@sipa Version argument? I'm willing to put in more work if there are better ideas.\n,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261805849,261805849,
luke-jr,2016-11-20T21:10:10Z,"I don't see a use case to exclude only segwit signatures. Instead, it should strip all signatures, whether segwit or otherwise...\n\n(Also note this cannot affect users today, since segwit is not active today...)\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261805952,261805952,
gmaxwell,2016-11-20T21:13:21Z,Turn the existing boolean argument into something else instead?   true/false/stripped\n,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261806178,261806178,
instagibbs,2016-11-20T21:17:06Z,"@luke-jr (may be misunderstanding you) older libraries/nodes expect older serialization, not witness serialization minus signatures? \n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261806421,261806421,
sipa,2016-11-20T21:21:18Z,"@luke-jr For compatibility reasons, I think that's a bad idea. scriptSigs\naren't strippable in any useful way.\n\n@instagibbs What about a command-line argument to say whether RPC clients\nsupport witnesses?\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261806693,261806693,
luke-jr,2016-11-20T21:32:22Z,"@instagibbs ""Older serialization"" is what you get when you strip signatures... And if they don't care about the signatures, then they don't care about _any_ of the signatures.\n\n@sipa scriptSigs are no more or less useful to strip than segwit signatures.\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261807355,261807355,
sipa,2016-11-20T21:44:48Z,"@luke-jr They are, they determine the txid. You can't strip scriptSigs for\nany clients that expect to be able to compute the txid. Or expect to be\nable to see the signatures for whatever other purpose, but don't know about\nsegwit.\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261808187,261808187,
sdaftuar,2016-11-20T21:49:07Z,"> scriptSigs are no more or less useful to strip than segwit signatures.\n\nOf course they are, because they are included in the txid calculation.\n\nI understand there's a user who is complaining, but I thought our view on this issue was that people just shouldn't upgrade their software until their rpc clients, zmq clients, REST clients etc were ready for segwit serialization.  I haven't looked b",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261808462,261808462,
luke-jr,2016-11-20T21:54:17Z,"@sipa If they want the txids, they should be using the verbose mode in the first place, no? And if they actually need the signatures, they should need the segwit signatures as well...\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261808833,261808833,
instagibbs,2016-11-20T21:55:15Z,"@sdaftuar in the interest of doing a command line level argument I'm going to audit how many RPC points would need to know about a flag. This exercise also may come in handy when it comes to switching over wallet functionality to segwit by default, which I'm imagining will be a similar mechanism. I also think that any time we have to change serialization in the future, we can ratchet whatever argu",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261808903,261808903,
sipa,2016-11-20T21:56:35Z,"@luke-jr Yes, in an ideal world everybody would use everything the way it\nis designed. But in an ideal world, we'd also have segwit from the start,\nand we'd never have any compatibility issue at all.\n\nStripping scriptSigs will break software.\n",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-261808979,261808979,
instagibbs,2016-11-21T19:03:44Z,"I agree that adding another boolean for legacy purposes to the rpc api was suboptimal, so I have added a command line argument at startup to offer the same functionality called `-rpcserialversion` with a default value of `1`. If set to `0` the `NO_WITNESS` flag is included in the same places as before. I believe this covers the major use-cases, which is passing along serializations of transactions",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-262034300,262034300,
instagibbs,2016-11-22T14:52:50Z,"Updated EncodeHexTx to take serialization flag directly, gettransaction[""hex""] is now affected, and added more testing.",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-262261013,262261013,
sdaftuar,2016-11-22T18:23:56Z,"As mentioned before and on IRC, I think if we're adding a command line argument to change the serialization for RPC calls, then for consistency's sake we ought to do the same for REST and ZMQ.  Looks to me like just a couple additional call sites would be affected.",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-262322692,262322692,
instagibbs,2016-11-22T21:57:40Z,updated as per @sdaftuar's reasonable request,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-262378004,262378004,
instagibbs,2016-12-01T19:08:01Z,rebased.,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264263600,264263600,
instagibbs,2016-12-01T19:22:18Z,"Cribbing from IRC for historical reasons @petertodd :\n>re: luke-jr's point on ""stripped sigs"", lots of code gets written that calculates its own txids and isn't using the RPC for that, e.g. python-bitcoinlib RPC code would likely do that, so stripped sigs mode isn't useful there; 100% backwards compatibility is",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264267433,264267433,
instagibbs,2016-12-01T19:26:22Z,backport tag @fanquake ?,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264268563,264268563,
jtimon,2016-12-01T20:43:01Z,utACK ebe6c30,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264288919,264288919,
sipa,2016-12-01T20:59:24Z,utACK ebe6c30a2763a281425de35fd7b2f5dc87f48199,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264293125,264293125,
sdaftuar,2016-12-01T21:32:36Z,"""no objection"" utACK ebe6c30a2763a281425de35fd7b2f5dc87f48199\n\nIt's good that the RPC handling is tested with the segwit.py test; it'd be nice to update the zmq and rest python tests as well, but I think that can be done later.",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264301780,264301780,
MarcoFalke,2016-12-02T15:51:29Z,Note: Needs release notes for 0.13.2 after merge.,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264486304,264486304,
laanwj,2016-12-05T07:12:33Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264782756,264782756,
instagibbs,2016-12-05T13:24:46Z,rebased,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-264852969,264852969,
gmaxwell,2016-12-06T04:29:31Z,ACK (however I did not test rest/ZMQ).,https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-265057838,265057838,
MarcoFalke,2016-12-14T11:56:20Z,"Removing label ""Needs backport"". This was backported in f26dab7 and 21ccb9f\n\n\nStill needs release notes.",https://github.com/bitcoin/bitcoin/pull/9194#issuecomment-267016158,267016158,
instagibbs,2016-11-21T19:08:03Z,Perhaps a serialize flag directly here is more appropriate and would effortlessly extend if we have additional serialization flags.,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r88964865,88964865,src/core_write.cpp
gmaxwell,2016-11-22T04:29:51Z,"Yes, I think thats a good idea-- and consistent with how things are done for p2p.",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89041900,89041900,src/core_write.cpp
sipa,2016-11-22T22:24:31Z,Can you extract out this conditional expression into a utility function?,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89223679,89223679,src/rest.cpp
instagibbs,2016-11-23T02:42:38Z,done,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89249574,89249574,src/rest.cpp
sipa,2016-11-23T05:57:47Z,Unsure this belongs in main. Maybe in util?,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89259748,89259748,src/main.cpp
jonasschnelli,2016-11-23T07:35:13Z,This should go away because it seems to be no longer in use.,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89266066,89266066,src/rpc/blockchain.cpp
jonasschnelli,2016-11-23T07:37:14Z,This should be move from `main.cpp` to `server.cpp` or `core_write.cpp`.,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89266201,89266201,src/main.cpp
instagibbs,2016-11-23T14:40:26Z,fixed thanks,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89328277,89328277,src/rpc/blockchain.cpp
instagibbs,2016-11-23T14:40:34Z,moved to server.cpp,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89328309,89328309,src/main.cpp
sdaftuar,2016-11-28T20:50:11Z,"I'm confused by this comment -- after segwit activates, the coinbase transaction will generally have a witness, namely the nonce (assuming there's a witness commitment).",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89881080,89881080,qa/rpc-tests/segwit.py
sdaftuar,2016-11-28T20:59:36Z,Isn't `segwit_tx_list` a list of txids?,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r89882960,89882960,qa/rpc-tests/segwit.py
sdaftuar,2016-12-01T19:14:36Z,extra text?,https://github.com/bitcoin/bitcoin/pull/9194#discussion_r90515960,90515960,src/core_io.h
instagibbs,2016-12-01T19:15:32Z,"argh, kdiff. fixing",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r90516135,90516135,src/core_io.h
sdaftuar,2016-12-01T21:13:14Z,"Perhaps the test should explicitly test the correctness of the serializations, rather than just comparing output against each other?  (Maybe just the node0/legacy-serialization case, since I presume something would break if the `rpcserializationversion=1` handling were busted.)",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r90538396,90538396,qa/rpc-tests/segwit.py
sdaftuar,2016-12-01T21:28:10Z,"FYI this did the trick for me:\n\n```\ndiff --git a/qa/rpc-tests/segwit.py b/qa/rpc-tests/segwit.py\nindex a618aec..e8a5512 100755\n--- a/qa/rpc-tests/segwit.py\n+++ b/qa/rpc-tests/segwit.py\n@@ -219,10 +219,13 @@ class SegWitTest(BitcoinTestFramework):\n         assert(self.nodes[2].getblock(block[0], False) !=  self.nodes[0].getblock(block[0], False))\n         assert(self.nodes[1].getb",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r90541102,90541102,qa/rpc-tests/segwit.py
instagibbs,2016-12-02T01:15:41Z,"thanks, included!",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r90571504,90571504,qa/rpc-tests/segwit.py
sipa,2016-12-06T07:21:08Z,"I think you should say `(1)` specifically, and not just `(>0)`. If a value is passed that the node doesn't understand, it should complain, because it means the user is asking to serialize in a way it does not know about.",https://github.com/bitcoin/bitcoin/pull/9194#discussion_r91023104,91023104,src/init.cpp
