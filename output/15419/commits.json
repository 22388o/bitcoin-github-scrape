[
  {
    "sha": "fab0d858027844f602e9e6103a66d97fdacc13ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWIwZDg1ODAyNzg0NGY2MDJlOWU2MTAzYTY2ZDk3ZmRhY2MxM2Fi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T16:18:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T15:43:58Z"
      },
      "message": "qa: Remove mocktime unless required",
      "tree": {
        "sha": "d92bf57df1843428f606559c1a6c4167b26948c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d92bf57df1843428f606559c1a6c4167b26948c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbCQ+AAoJEM4rdWl+aaVIqCoMAJ4OwqAgUf/swBT2Rvli6ksg\nqgL8zJoy8AG3vk+58H19vKw0aoc7aigiW33aYRiV0oA5J81IiAeFrJwbbySc3o1Y\nuCCsmPlWgikyO3v+OoXQRJGJ91r9uoEoJlg6Ff3/MRZHd1LoahOUZhF3QhGjzRId\nKTmz/2R63EMg908+A+q1W867FmHN3dx8ESmFecLFeSeHnmnw+CTcDQDINwIMkmDw\n1gszwNG1igoeSpYvfMCgumSZAbl+a5VjceV+Pss6Ll0QY6fAtLp1JMLjiwPcpYAb\ni9cN0R4Pp4ZY9WSprdNdL8pLIKjuH+FPJ02nprNdXoD9ko5MX+hoBN8f5+hxB7LH\nd84oeBH3AgZ6xUejxh16UiYJau9qavzDhpZrzqVWFdcnqG6gf1OqBrQhdgKkFgrY\n/ZFRL4XC/IFmc4hjJJnpcvlnapHC5FllHo3vr0zlS27DlKuL18d8XFkUf2crPDwE\nrpu46i171V281IA+1buOpO6ivoOAWPmhh36f/JvnwQ==\n=YHgy\n-----END PGP SIGNATURE-----",
        "payload": "tree d92bf57df1843428f606559c1a6c4167b26948c8\nparent 3e4fd407538160daf4267a784d308e8368177edc\nauthor MarcoFalke <falke.marco@gmail.com> 1549901916 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550591038 -0500\n\nqa: Remove mocktime unless required\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d858027844f602e9e6103a66d97fdacc13ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e4fd407538160daf4267a784d308e8368177edc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e4fd407538160daf4267a784d308e8368177edc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e4fd407538160daf4267a784d308e8368177edc"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "af150a09af20812abfea94fb17532392243b7cdc",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -35,6 +35,7 @@\n from test_framework.blocktools import (\n     create_block,\n     create_coinbase,\n+    TIME_GENESIS_BLOCK,\n )\n from test_framework.messages import (\n     msg_block,\n@@ -46,9 +47,11 @@\n \n class BlockchainTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def run_test(self):\n+        self.mine_chain()\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n         self._test_getblockchaininfo()\n@@ -61,6 +64,15 @@ def run_test(self):\n         self._test_waitforblockheight()\n         assert self.nodes[0].verifychain(4, 0)\n \n+    def mine_chain(self):\n+        self.log.info('Create some old blocks')\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        for t in range(TIME_GENESIS_BLOCK, TIME_GENESIS_BLOCK + 200 * 600, 600):\n+            # ten-minute steps from genesis block time\n+            self.nodes[0].setmocktime(t)\n+            self.nodes[0].generatetoaddress(1, address)\n+        assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n+\n     def _test_getblockchaininfo(self):\n         self.log.info(\"Test getblockchaininfo\")\n "
      },
      {
        "sha": "49c15112b388eb980788d4ee2b4d2e9960619cd5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 18,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -29,11 +29,11 @@\n     get_datadir_path,\n     initialize_datadir,\n     p2p_port,\n-    set_node_times,\n     sync_blocks,\n     sync_mempools,\n )\n \n+\n class TestStatus(Enum):\n     PASSED = 1\n     FAILED = 2\n@@ -94,7 +94,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.network_thread = None\n-        self.mocktime = 0\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n         self.supports_cli = False\n         self.bind_to_localhost_only = True\n@@ -316,7 +315,6 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None):\n                 timewait=self.rpc_timeout,\n                 bitcoind=binary[i],\n                 bitcoin_cli=self.options.bitcoincli,\n-                mocktime=self.mocktime,\n                 coverage_dir=self.options.coveragedir,\n                 cwd=self.options.tmpdir,\n                 extra_conf=extra_confs[i],\n@@ -468,7 +466,6 @@ def _initialize_chain(self):\n                     timewait=self.rpc_timeout,\n                     bitcoind=self.options.bitcoind,\n                     bitcoin_cli=self.options.bitcoincli,\n-                    mocktime=self.mocktime,\n                     coverage_dir=None,\n                     cwd=self.options.tmpdir,\n                 ))\n@@ -479,32 +476,18 @@ def _initialize_chain(self):\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n \n-            # For backward compatibility of the python scripts with previous\n-            # versions of the cache, set mocktime to Jan 1,\n-            # 2014 + (201 * 10 * 60)\"\"\"\n-            self.mocktime = 1388534400 + (201 * 10 * 60)\n-\n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n-            # Note: To preserve compatibility with older versions of\n-            # initialize_chain, only 4 nodes will generate coins.\n-            #\n-            # blocks are created with timestamps 10 minutes apart\n-            # starting from 2010 minutes in the past\n-            block_time = self.mocktime - (201 * 10 * 60)\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n-                        set_node_times(self.nodes, block_time)\n                         self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n-                        block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n \n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []\n-            self.mocktime = 0\n \n             def cache_path(n, *paths):\n                 return os.path.join(get_datadir_path(self.options.cachedir, n), \"regtest\", *paths)"
      },
      {
        "sha": "37fd2a8744cf7cd50c87be3a4b25b9dc86e164de",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -61,7 +61,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n+    def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -90,8 +90,7 @@ def __init__(self, i, datadir, *, rpchost, timewait, bitcoind, bitcoin_cli, mock\n             \"-debug\",\n             \"-debugexclude=libevent\",\n             \"-debugexclude=leveldb\",\n-            \"-mocktime=\" + str(mocktime),\n-            \"-uacomment=testnode%d\" % i\n+            \"-uacomment=testnode%d\" % i,\n         ]\n \n         self.cli = TestNodeCLI(bitcoin_cli, self.datadir)"
      },
      {
        "sha": "7b749235e200e63f9791b68b58387955807bb67c",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab0d858027844f602e9e6103a66d97fdacc13ab/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=fab0d858027844f602e9e6103a66d97fdacc13ab",
        "patch": "@@ -7,17 +7,25 @@\n from test_framework.util import (\n     assert_equal,\n )\n+from test_framework.blocktools import (\n+    TIME_GENESIS_BLOCK,\n+)\n \n \n class CreateTxWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n+        self.log.info('Create some old blocks')\n+        self.nodes[0].setmocktime(TIME_GENESIS_BLOCK)\n+        self.nodes[0].generate(200)\n+        self.nodes[0].setmocktime(0)\n+\n         self.log.info('Check that we have some (old) blocks and that anti-fee-sniping is disabled')\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      }
    ]
  },
  {
    "sha": "1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTExYWVjYmI1OGQ2ZTM3ZDQzMGQ0NzdhYzQzZjUyODExZmQ5N2Q5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-11T18:56:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T19:22:13Z"
      },
      "message": "qa: Always refresh stale cache to be out of ibd",
      "tree": {
        "sha": "2ab2e86f5155279ca30701ca1eb03b510bcf347f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab2e86f5155279ca30701ca1eb03b510bcf347f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbFdlAAoJEM4rdWl+aaVIAnUL/it0qwQgPqsBpkmgT+26RzTq\nmf7loJ7KUAuK6mURHcjUgo2Vibo3110nyhVjAPn3ekCjsn247P+dxR5W74DbIvSu\nzJrAGqaDXRXMOZNMBs3raQxVroh9/Cx82cwBMNhe66gculhB+pJtt8ZV14/X7Ew6\nQbekkeB++UifwZtC1pnRWQLLpFKFLUaeFMlvIXw0knNSbumc2SaAXhS/1OzmpMWp\n2evJocCWiGnZAqCXECpWaDT/Bu2uo4iwr+Zbv23VYwWM0nJzSq58YQGxE5WPyqGi\nMl9N1jmeC7zMQHQ7o5gXkokLAzpnXMqiLVojmVKMAWwJ6q3JwjsJ3F2ss2AmjNj3\n+wIybffzgfuBGr/+GApvCxh94IA85R2iEBW30SmzNXstKkpETFfVomn+ebmsC2HD\n8k/bNnwdqRt/MlgTul4vhuHeylBOoFohdohs3wjOP9oicgWlQAibBo4bc+Be9POo\nBY+BH9BS7eg8Epvo+jUiQvIGyxr7vu3zArWbFbF6Gw==\n=88Ay\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ab2e86f5155279ca30701ca1eb03b510bcf347f\nparent fab0d858027844f602e9e6103a66d97fdacc13ab\nauthor MarcoFalke <falke.marco@gmail.com> 1549911379 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550604133 -0500\n\nqa: Always refresh stale cache to be out of ibd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1111aecbb58d6e37d430d477ac43f52811fd97d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab0d858027844f602e9e6103a66d97fdacc13ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab0d858027844f602e9e6103a66d97fdacc13ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab0d858027844f602e9e6103a66d97fdacc13ab"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 25,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5453f0be3b938173393930aa2b611283de443141",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -41,9 +41,11 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n+\n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n \n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n@@ -198,4 +200,3 @@ def networks_dict(d):\n \n if __name__ == '__main__':\n     ProxyTest().main()\n-"
      },
      {
        "sha": "efe720b9b10494a54809b4b9468e0b2ab64152fc",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -29,7 +29,6 @@\n     assert_raises_rpc_error,\n     bytes_to_hex_str,\n     hex_str_to_bytes,\n-    wait_until,\n )\n \n \n@@ -38,7 +37,6 @@ def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n             '-txindex',\n-            '-reindex',  # Need reindex for txindex\n             '-acceptnonstdtxn=0',  # Try to mimic main-net\n         ]] * self.num_nodes\n \n@@ -56,7 +54,7 @@ def run_test(self):\n \n         self.log.info('Start with empty mempool, and 200 blocks')\n         self.mempool_size = 0\n-        wait_until(lambda: node.getblockcount() == 200)\n+        assert_equal(node.getblockcount(), 200)\n         assert_equal(node.getmempoolinfo()['size'], self.mempool_size)\n         coins = node.listunspent()\n "
      },
      {
        "sha": "24e1a21a281b8b9b69f4b32b449ffc9c0dfdf73f",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1111aecbb58d6e37d430d477ac43f52811fd97d9/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "patch": "@@ -274,6 +274,17 @@ def setup_nodes(self):\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n+        if not self.setup_clean_chain:\n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+            self.log.debug('Generate a block with current time to finalize the cache and assert we are out of IBD')\n+            block_hash = self.nodes[0].generate(1)[0]\n+            block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n+            for n in self.nodes:\n+                n.submitblock(block)\n+                chain_info = n.getblockchaininfo()\n+                assert_equal(chain_info[\"blocks\"], 200)\n+                assert_equal(chain_info[\"initialblockdownload\"], False)\n \n     def import_deterministic_coinbase_privkeys(self):\n         for n in self.nodes:\n@@ -433,7 +444,7 @@ def _start_logging(self):\n     def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n-        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Create a cache of a 199-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n         assert self.num_nodes <= MAX_NODES\n@@ -476,15 +487,24 @@ def _initialize_chain(self):\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n \n-            # Create a 200-block-long chain; each of the 4 first nodes\n+            # Create a 199-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n+            # The 4th node gets only 24 immature blocks so that the very last\n+            # block in the cache does not age too much (have an old tip age).\n+            # This is needed so that we are out of IBD when the test starts,\n+            # see the tip age check in IsInitialBlockDownload().\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n+                        if i == 1 and peer == 3 and j == 24:\n+                            break\n                         self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n                     # Must sync before next peer starts generating blocks\n                     sync_blocks(self.nodes)\n \n+            for n in self.nodes:\n+                assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n+\n             # Shut them down, and clean up cache directories:\n             self.stop_nodes()\n             self.nodes = []"
      }
    ]
  },
  {
    "sha": "fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI1MjEwZDYyNjZkNTBhNmMyYmZkNmQ5NjA2MmJhY2IyYWUzOTNi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-15T15:15:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T19:22:15Z"
      },
      "message": "qa: Fix wallet_txn_doublespend issue",
      "tree": {
        "sha": "26c7e632a78db9c7cb277cfccd16b19c35167072",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26c7e632a78db9c7cb277cfccd16b19c35167072"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcbFdnAAoJEM4rdWl+aaVIgZUL/imgwRlPed2wVxqU3VMjCwkq\nk3Erxvum/twVcsEtiSXwAR3jLEv0kWrBz0rdOHjgCUP4sCDdnP86InS/2HTGSRyo\nXeXfEosakepRFl7ddUacEAnulnsmf1xIBFEHjFL4ss0jB4HQsMXhS4RGsQqvVqOf\ny671wKV1xwMMEZki01hwg6mXP/J2elAY38BoDB6sy9r+Xw465uoCMt7VC2aRXJ2V\n9Uh9s532TWJVQK7tLS5q7m1AU++D88LzWCxwbcJ/1D64YOTW0sKWnYDKayvAlnpK\nrTFrUlFAUuDgjzJ5i/KITtaqQ0TGzEFyCCz4bYQF2vvuqhPKGmDCywKoV1YYbbTx\nRy9AwYosVjuuC+k6st/VimCPCF2inaNRhHBUZv8PaKQjvgcHYDXihVVHcz16w889\nhGfrFRQPhIwejffFwUnlOoF7ml/DT3V+wT+xYt92DfIiV8ZtSS0b6xI+D47AEzyc\n/Q8D9Z36Dr18X6UehrQicRNwdJduMnalcTRs81TZAw==\n=ruVx\n-----END PGP SIGNATURE-----",
        "payload": "tree 26c7e632a78db9c7cb277cfccd16b19c35167072\nparent 1111aecbb58d6e37d430d477ac43f52811fd97d9\nauthor MarcoFalke <falke.marco@gmail.com> 1550243728 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550604135 -0500\n\nqa: Fix wallet_txn_doublespend issue\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1111aecbb58d6e37d430d477ac43f52811fd97d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1111aecbb58d6e37d430d477ac43f52811fd97d9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f042adb7aa25c264d94006560ffae6326898d785",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "patch": "@@ -41,7 +41,6 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4"
      },
      {
        "sha": "9050e212474559af093ea4eed118dca25b0165a3",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25210d6266d50a6c2bfd6d96062bacb2ae393b/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "patch": "@@ -34,6 +34,14 @@ def setup_network(self):\n     def run_test(self):\n         # All nodes should start with 1,250 BTC:\n         starting_balance = 1250\n+\n+        # All nodes should be out of IBD.\n+        # If the nodes are not all out of IBD, that can interfere with\n+        # blockchain sync later in the test when nodes are connected, due to\n+        # timing issues.\n+        for n in self.nodes:\n+            assert n.getblockchaininfo()[\"initialblockdownload\"] == False\n+\n         for i in range(4):\n             assert_equal(self.nodes[i].getbalance(), starting_balance)\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!"
      }
    ]
  },
  {
    "sha": "fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJjZGM5YWMyNjcyMzAxNTkxY2FmY2ViOGZmMjMwYjk1NDI1YWQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-23T17:56:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-25T16:18:24Z"
      },
      "message": "test: Simplify create_cache",
      "tree": {
        "sha": "2ccc551e83a884f1af58435bead84018773049dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ccc551e83a884f1af58435bead84018773049dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcdBVQAAoJEM4rdWl+aaVIerEL/0nrqZ6U4EhHWaZPGBIS/mko\n5g9B2b7LZnno1tVXa/8+qrrtYiK6NZFzLvrqVhikqtRyftjNu2ui7/X7j+JAV98d\nCF/j2qBlWJtVdexbP9KrOTb/s9NNOUO7dhBB8fv03J9qj0k+jyiUu24gE5x4Ie1o\nVov6/wMugT4Iwy+aeth6KE9z6sHvXlWK+JvullQMqWJ9PVsrub3m2O7lR5laFDQL\nUpy1UvmBDKl4tDpUb3eabJ5bNd7d1TeIGnq3x/g5obtci8tUlAkExYfoyGrAC4rI\nXVLHUxRvu2cPPg8rc2PC0zUY3ISGljcQ1yY8ULNEeTcxDyq4XW9DAH3q2C06pc8S\nbrFfLuCZ6xH1nM1wkXlBlX3/6ryQ5h3jVEJGy4MjGrpScXDsDVtjfth+E3zuEqF9\nW1gnnde07O923Y5wy3aa+8oe7wd0KlqFfQE9VX4RcGcAJvNJuzTbGlzIHSmGXbnr\nyygmq4OuekqmesNqqUfxtP5zJrpmVLVnFy4W2+tAxA==\n=t0iD\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ccc551e83a884f1af58435bead84018773049dd\nparent fa25210d6266d50a6c2bfd6d96062bacb2ae393b\nauthor MarcoFalke <falke.marco@gmail.com> 1550944614 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551111504 -0500\n\ntest: Simplify create_cache\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cdc9ac2672301591cafceb8ff230b95425ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cdc9ac2672301591cafceb8ff230b95425ad0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25210d6266d50a6c2bfd6d96062bacb2ae393b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25210d6266d50a6c2bfd6d96062bacb2ae393b"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "09d7d877a7b02e6a3167e730aa22cc93ba3f18f8",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cdc9ac2672301591cafceb8ff230b95425ad0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cdc9ac2672301591cafceb8ff230b95425ad0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa2cdc9ac2672301591cafceb8ff230b95425ad0",
        "patch": "@@ -277,7 +277,9 @@ def setup_nodes(self):\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n-            self.log.debug('Generate a block with current time to finalize the cache and assert we are out of IBD')\n+            # To ensure that all nodes are out of IBD, the most recent block\n+            # must have a timestamp not too old (see IsInitialBlockDownload()).\n+            self.log.debug('Generate a block with current time')\n             block_hash = self.nodes[0].generate(1)[0]\n             block = self.nodes[0].getblock(blockhash=block_hash, verbosity=0)\n             for n in self.nodes:\n@@ -493,14 +495,9 @@ def _initialize_chain(self):\n             # block in the cache does not age too much (have an old tip age).\n             # This is needed so that we are out of IBD when the test starts,\n             # see the tip age check in IsInitialBlockDownload().\n-            for i in range(2):\n-                for peer in range(4):\n-                    for j in range(25):\n-                        if i == 1 and peer == 3 and j == 24:\n-                            break\n-                        self.nodes[peer].generatetoaddress(1, self.nodes[peer].get_deterministic_priv_key().address)\n-                    # Must sync before next peer starts generating blocks\n-                    sync_blocks(self.nodes)\n+            for i in range(8):\n+                self.nodes[0].generatetoaddress(25 if i != 7 else 24, self.nodes[i % 4].get_deterministic_priv_key().address)\n+            sync_blocks(self.nodes)\n \n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)"
      }
    ]
  }
]