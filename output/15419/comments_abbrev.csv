DrahtBot,2019-02-15T15:46:34Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#12134](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12134.html) (Build previous releases and run functional ",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-464097027,464097027,
jnewbery,2019-02-18T23:39:21Z,"Concept ACK. Please remove unrelated code style fixes from your commits.\n\nI think 'rot' is the wrong terminology, and the comment here: https://github.com/bitcoin/bitcoin/pull/15419/commits/faeb65a8cdeb4495e5b0cd8b515a19911ba0a6ad#diff-64721c5ee64d44f7114d6d0d2226db4dR495 isn't clear.",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-464922537,464922537,
sipa,2019-02-19T00:58:27Z,"By rotten, you mean dirty? :)",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-464936750,464936750,
MarcoFalke,2019-02-19T13:55:27Z,"rotten as in *from yesterday* or *from last week*. If the cache was edible, it would be rotten, no?",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465136475,465136475,
jnewbery,2019-02-19T14:11:53Z,"> rotten as in _from yesterday_ or _from last week_. If the cache was edible, it would be rotten, no?\n\nThere's nothing wrong with the block, it's just old. I think this would be much clearer to people reading the tests if you removed the *rotten* terminology and just said that the latest block needs to be within the last 24 hours for the nodes to consider themselves sync'ed to the tip, possibl",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465142837,465142837,
Sjors,2019-02-19T14:32:16Z,"> the latest block needs to be within the last 24 hours for the nodes to consider themselves sync'ed to the tip\n\nThat's definitely useful to remind the reader of (including yours truly).",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465151203,465151203,
MarcoFalke,2019-02-19T15:28:03Z,"Ok, going to fixup that comment as per @jnewbery's suggestion",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465176589,465176589,
jnewbery,2019-02-19T16:44:15Z,"*stale* is still wrong:\n\n- in caching terminology, stale is commonly understood as meaning that a piece of data in a cache is no longer valid because the underlying value for that data has been updated.\n- In Bitcoin terminology, a stale block is one which is valid, but not part of the main chain as its on a fork which has less work than the main chain.\n\nNeither of those is the case here.",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465212621,465212621,
jnewbery,2019-02-19T17:03:16Z,"Can you remove unrelated style changes?\n\nI don't care much about additional new lines between classes (https://github.com/bitcoin/bitcoin/pull/15419/files#diff-a12894108450a68b27252d39d7b6e704R44) or terminating lists with commas (https://github.com/bitcoin/bitcoin/pull/15419/files#diff-86294e5ae5283eebdd9f98d79007a0e1R93).\n\nIf you think that should be the project code style, the right thi",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465220801,465220801,
MarcoFalke,2019-02-19T19:28:28Z,"@jnewbery We agreed to not add any style-related linters to this project several times already. Personally I format all changed code according to https://github.com/bitcoin/bitcoin/blob/master/doc/productivity.md#writing-code, so that review can focus on the actual changes and is not wasted on counting how many spaces or newlines are between non-whitepace characters.",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465276019,465276019,
jnewbery,2019-02-19T19:38:14Z,"> so that review can focus on the actual changes and is not wasted on counting how many spaces or newlines are between non-whitepace characters.\n\nMy suggestion is to not change code style in PRs which are supposed to be changing behaviour. Here for example: https://github.com/bitcoin/bitcoin/pull/15419/files#diff-64721c5ee64d44f7114d6d0d2226db4dR36 you add a newline that has nothing to do with",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465279467,465279467,
MarcoFalke,2019-02-19T22:15:00Z,"I fixed up the comment and removed a newline that the formatter added. I missed the newline you pointed in the previous comment. Though, I am going to leave this as is for now unless there are actual concerns about the code.",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465332894,465332894,
Sjors,2019-02-20T09:26:06Z,"Python syntax issue are fixed in #15439. Also ignore the `tool_wallet.py` failure, since I forgot to build that target.\n\nutACK fa25210",https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-465494373,465494373,
jnewbery,2019-02-25T19:43:58Z,utACK fa2cdc9ac2672301591cafceb8ff230b95425ad0,https://github.com/bitcoin/bitcoin/pull/15419#issuecomment-467154606,467154606,
promag,2019-02-18T18:51:44Z,Could remove this right?,https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257799583,257799583,test/functional/test_framework/test_framework.py
promag,2019-02-18T18:56:38Z,Care to explain why it needs to wait?,https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257800600,257800600,test/functional/test_framework/test_framework.py
promag,2019-02-18T19:20:38Z,"Maybe something more straightforward?\n```py\ndef gen_blocks(peer, blocks):\n    node = self.nodes[peer]\n    address = node.get_deterministic_priv_key().address\n    return node.generatetoaddress(blocks, address)\n\ngen_blocks(0, 25)\ngen_blocks(1, 25)\ngen_blocks(2, 25)\ngen_blocks(3, 24)\n```",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257805739,257805739,test/functional/test_framework/test_framework.py
promag,2019-02-18T19:24:23Z,Is this really necessary?,https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257806489,257806489,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T19:30:59Z,Why?,https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257807874,257807874,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T19:31:46Z,"No, that would generate 99 blocks, we need 199.\n\nNot sure if this looks simpler:\n\n```py\ngen_blocks(0, 25)\ngen_blocks(1, 25)\ngen_blocks(2, 25)\ngen_blocks(3, 25)\ngen_blocks(0, 25)\ngen_blocks(1, 25)\ngen_blocks(2, 25)\ngen_blocks(3, 24)",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257808037,257808037,test/functional/test_framework/test_framework.py
promag,2019-02-18T19:33:14Z,"Oh right, I was doing for 99 ü§¶‚Äç‚ôÇÔ∏è",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257808326,257808326,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T19:34:03Z,"No, but nice to see that the cache *really is* 199 blocks high",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257808496,257808496,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T19:36:26Z,"I had it fail locally. Not sure why, but the wait_until decays into a single check without wait when the condition was already true",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257808987,257808987,test/functional/test_framework/test_framework.py
promag,2019-02-18T19:37:07Z,"In that case\n```py\ngen_blocks(0, 50)\ngen_blocks(1, 50)\ngen_blocks(2, 50)\ngen_blocks(3, 49)\n```\nOr is there a reason against?",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257809114,257809114,test/functional/test_framework/test_framework.py
promag,2019-02-18T19:40:58Z,"Ok, maybe add a comment saying it needs to wait for nodes to complete loading from the cache?",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257809848,257809848,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T20:21:38Z,"See the comment two lines up:\n\n```\n            # Create a 199-block-long chain; each of the 4 first nodes\n            # gets 25 mature blocks and 25 immature.",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257818115,257818115,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T20:29:35Z,"Hmm, I guess you are right. This really makes no sense to have. Going to replace with an assert",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257819725,257819725,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-18T20:54:41Z,"Ah, so the wait_until would be needed if we wanted to `-reindex` on the first start (e.g. mempool_accept)\n\nHowever, with txindex as a background thread, this is no longer required in mempool_accept.",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r257824746,257824746,test/functional/test_framework/test_framework.py
Sjors,2019-02-19T16:46:37Z,"This needs more explanation, since iiuc it's very relevant to the bug you're trying to squash. What cache is going stale and what is the consequence of that? And in what we should one see `IsInitialBlockDownload`? What about the cache causes nodes to think they're in or out of IBD? The absolute age of the block in the cache?\n\nIt's explained a bit in the next commit, but that's in a very differ",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258128988,258128988,test/functional/test_framework/test_framework.py
MarcoFalke,2019-02-19T17:03:43Z,"There are other conditions that keep our node in IBD, but the one we care about here is the tip age (difference between now and the time the miner claimed to have mined the block)",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258137237,258137237,test/functional/test_framework/test_framework.py
jnewbery,2019-02-21T14:55:21Z,"I don't think ""finalize the cache"" would mean anything to people without more context. I'd suggest changing this to:\n\n```py\n            # To ensure that all nodes are out of IBD, the most recent block must\n            # be within the last 24 hours (see IsInitialBlockDownload()). Generate it here.\n            self.log.debug('Generate a block with current time')\n```",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258962034,258962034,test/functional/test_framework/test_framework.py
jnewbery,2019-02-21T15:03:32Z,"There's no race here since `submitblock()` will only return after `ActivateBestChain()`, but if we ever make `ProcessNewBlock()` multithreaded, then there could be a race if `submitblock()` returns before the best chain has been activated.\n\nI don't think you need to do anything here, but you could add a comment or a `wait_until()` if you wanted to make this clear to readers.",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258965691,258965691,test/functional/test_framework/test_framework.py
jnewbery,2019-02-21T15:08:01Z,"A couple of suggestions that could make this more efficient/clear:\n\n- you could generate all blocks on node0, generating to the other nodes' addresses in turn. This would avoid the `sync_blocks()` calls.\n- do any of the tests rely on the immature blocks becoming mature during the test? I'd hope not. If they don't, you could generate those immature blocks to a dummy address, and change this t",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258967701,258967701,test/functional/test_framework/test_framework.py
jnewbery,2019-02-21T15:11:47Z,Suggestion: combine this with the for loop below.,https://github.com/bitcoin/bitcoin/pull/15419#discussion_r258969485,258969485,test/functional/wallet_txn_doublespend.py
MarcoFalke,2019-02-25T16:36:16Z,"Done, I measured that it wouldn't make it faster, but at least the code is shorter",https://github.com/bitcoin/bitcoin/pull/15419#discussion_r259910830,259910830,test/functional/test_framework/test_framework.py
