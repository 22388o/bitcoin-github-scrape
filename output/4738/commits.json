[
  {
    "sha": "385625799c8463a9aad5a6e92eb8d478a29ea8de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODU2MjU3OTljODQ2M2E5YWFkNWE2ZTkyZWI4ZDQ3OGEyOWVhOGRl",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T13:59:31Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T13:59:31Z"
      },
      "message": "UniValue: prefer .size() to .count(), to harmonize w/ existing tree",
      "tree": {
        "sha": "81763f30b71cb8f948573be6bed669804d5da53e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81763f30b71cb8f948573be6bed669804d5da53e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/385625799c8463a9aad5a6e92eb8d478a29ea8de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/385625799c8463a9aad5a6e92eb8d478a29ea8de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/385625799c8463a9aad5a6e92eb8d478a29ea8de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/385625799c8463a9aad5a6e92eb8d478a29ea8de/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "dc271fc025d219c18428a4d36dbc372c8e457908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc271fc025d219c18428a4d36dbc372c8e457908",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc271fc025d219c18428a4d36dbc372c8e457908"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "d7683d1d1384463f32bcf1b420324d3a0e5babf0",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=385625799c8463a9aad5a6e92eb8d478a29ea8de",
        "patch": "@@ -347,7 +347,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     UniValue keysObj = registers[\"privatekeys\"];\n     fGivenKeys = true;\n \n-    for (unsigned int kidx = 0; kidx < keysObj.count(); kidx++) {\n+    for (unsigned int kidx = 0; kidx < keysObj.size(); kidx++) {\n         if (!keysObj[kidx].isStr())\n             throw runtime_error(\"privatekey not a string\");\n         CBitcoinSecret vchSecret;\n@@ -364,7 +364,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         throw runtime_error(\"prevtxs register variable must be set.\");\n     UniValue prevtxsObj = registers[\"privatekeys\"];\n     {\n-        for (unsigned int previdx = 0; previdx < prevtxsObj.count(); previdx++) {\n+        for (unsigned int previdx = 0; previdx < prevtxsObj.size(); previdx++) {\n             UniValue prevOut = prevtxsObj[previdx];\n             if (!prevOut.isObject())\n                 throw runtime_error(\"expected prevtxs internal object\");"
      },
      {
        "sha": "9096dabc27473eb3fe5df0b5414ccd0bf5478612",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=385625799c8463a9aad5a6e92eb8d478a29ea8de",
        "patch": "@@ -71,13 +71,13 @@ BOOST_AUTO_TEST_CASE(univalue_set)\n \n     BOOST_CHECK(v.setObject());\n     BOOST_CHECK(v.isObject());\n-    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n     BOOST_CHECK_EQUAL(v.getType(), UniValue::VOBJ);\n     BOOST_CHECK(v.empty());\n \n     BOOST_CHECK(v.setArray());\n     BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.count(), 0);\n+    BOOST_CHECK_EQUAL(v.size(), 0);\n \n     BOOST_CHECK(v.setStr(\"zum\"));\n     BOOST_CHECK(v.isStr());\n@@ -144,7 +144,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n     BOOST_CHECK(arr.push_backV(vec));\n \n     BOOST_CHECK_EQUAL(arr.empty(), false);\n-    BOOST_CHECK_EQUAL(arr.count(), 5);\n+    BOOST_CHECK_EQUAL(arr.size(), 5);\n \n     BOOST_CHECK_EQUAL(arr[0].getValStr(), \"1023\");\n     BOOST_CHECK_EQUAL(arr[1].getValStr(), \"zippy\");\n@@ -156,7 +156,7 @@ BOOST_AUTO_TEST_CASE(univalue_array)\n \n     arr.clear();\n     BOOST_CHECK(arr.empty());\n-    BOOST_CHECK_EQUAL(arr.count(), 0);\n+    BOOST_CHECK_EQUAL(arr.size(), 0);\n }\n \n BOOST_AUTO_TEST_CASE(univalue_object)\n@@ -196,7 +196,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n     BOOST_CHECK(obj.pushKVs(obj2));\n \n     BOOST_CHECK_EQUAL(obj.empty(), false);\n-    BOOST_CHECK_EQUAL(obj.count(), 9);\n+    BOOST_CHECK_EQUAL(obj.size(), 9);\n \n     BOOST_CHECK_EQUAL(obj[\"age\"].getValStr(), \"100\");\n     BOOST_CHECK_EQUAL(obj[\"first\"].getValStr(), \"John\");\n@@ -239,7 +239,7 @@ BOOST_AUTO_TEST_CASE(univalue_object)\n \n     obj.clear();\n     BOOST_CHECK(obj.empty());\n-    BOOST_CHECK_EQUAL(obj.count(), 0);\n+    BOOST_CHECK_EQUAL(obj.size(), 0);\n }\n \n static const char *json1 =\n@@ -254,13 +254,13 @@ BOOST_AUTO_TEST_CASE(univalue_readwrite)\n     BOOST_CHECK(v.read(strJson1));\n \n     BOOST_CHECK(v.isArray());\n-    BOOST_CHECK_EQUAL(v.count(), 2);\n+    BOOST_CHECK_EQUAL(v.size(), 2);\n \n     BOOST_CHECK_EQUAL(v[0].getValStr(), \"1.1\");\n \n     UniValue obj = v[1];\n     BOOST_CHECK(obj.isObject());\n-    BOOST_CHECK_EQUAL(obj.count(), 3);\n+    BOOST_CHECK_EQUAL(obj.size(), 3);\n \n     BOOST_CHECK(obj[\"key1\"].isStr());\n     BOOST_CHECK_EQUAL(obj[\"key1\"].getValStr(), \"str\");"
      },
      {
        "sha": "af51d43f6657d2baecb8cdf877d51b97f3941608",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/385625799c8463a9aad5a6e92eb8d478a29ea8de/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=385625799c8463a9aad5a6e92eb8d478a29ea8de",
        "patch": "@@ -58,7 +58,7 @@ class UniValue {\n     std::string getValStr() const { return val; }\n     bool empty() const { return (values.size() == 0); }\n \n-    size_t count() const { return values.size(); }\n+    size_t size() const { return values.size(); }\n \n     bool getBool() const { return isTrue(); }\n     bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);"
      }
    ]
  },
  {
    "sha": "bd02690f5af6c839b72940039a4000451b44948d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDAyNjkwZjVhZjZjODM5YjcyOTQwMDM5YTQwMDA0NTFiNDQ5NDhk",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T15:13:52Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T15:13:52Z"
      },
      "message": "UniValue: export NullUniValue global constant",
      "tree": {
        "sha": "8cdfa0fbcc927c61cd9d3b94d451250d01008a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cdfa0fbcc927c61cd9d3b94d451250d01008a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd02690f5af6c839b72940039a4000451b44948d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd02690f5af6c839b72940039a4000451b44948d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd02690f5af6c839b72940039a4000451b44948d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd02690f5af6c839b72940039a4000451b44948d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "385625799c8463a9aad5a6e92eb8d478a29ea8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/385625799c8463a9aad5a6e92eb8d478a29ea8de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/385625799c8463a9aad5a6e92eb8d478a29ea8de"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ee39d37065c2f4519c7d5c7bc3383639809aed70",
        "filename": "src/univalue/univalue.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd02690f5af6c839b72940039a4000451b44948d/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd02690f5af6c839b72940039a4000451b44948d/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=bd02690f5af6c839b72940039a4000451b44948d",
        "patch": "@@ -9,7 +9,7 @@\n \n using namespace std;\n \n-static const UniValue nullValue;\n+const UniValue NullUniValue;\n \n void UniValue::clear()\n {\n@@ -175,21 +175,21 @@ bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n const UniValue& UniValue::operator[](const std::string& key) const\n {\n     if (typ != VOBJ)\n-        return nullValue;\n+        return NullUniValue;\n \n     int index = findKey(key);\n     if (index < 0)\n-        return nullValue;\n+        return NullUniValue;\n \n     return values[index];\n }\n \n const UniValue& UniValue::operator[](unsigned int index) const\n {\n     if (typ != VOBJ && typ != VARR)\n-        return nullValue;\n+        return NullUniValue;\n     if (index >= values.size())\n-        return nullValue;\n+        return NullUniValue;\n \n     return values[index];\n }"
      },
      {
        "sha": "4a5865e14dddbed7dfe7c56836f672cbadf18f3f",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd02690f5af6c839b72940039a4000451b44948d/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd02690f5af6c839b72940039a4000451b44948d/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=bd02690f5af6c839b72940039a4000451b44948d",
        "patch": "@@ -152,4 +152,6 @@ extern enum jtokentype getJsonToken(std::string& tokenVal,\n                                     unsigned int& consumed, const char *raw);\n extern const char *uvTypeName(UniValue::VType t);\n \n+extern const UniValue NullUniValue;\n+\n #endif // __UNIVALUE_H__"
      }
    ]
  },
  {
    "sha": "2765757ec864e672b4fabf43004747699c5923da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzY1NzU3ZWM4NjRlNjcyYjRmYWJmNDMwMDQ3NDc2OTljNTkyM2Rh",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T19:15:16Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-08-20T19:15:16Z"
      },
      "message": "Convert tree to using univalue. Eliminate all json_spirit uses.",
      "tree": {
        "sha": "31259f09751bf8a8de518b474ecc692d375e54b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31259f09751bf8a8de518b474ecc692d375e54b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2765757ec864e672b4fabf43004747699c5923da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2765757ec864e672b4fabf43004747699c5923da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2765757ec864e672b4fabf43004747699c5923da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2765757ec864e672b4fabf43004747699c5923da/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bd02690f5af6c839b72940039a4000451b44948d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd02690f5af6c839b72940039a4000451b44948d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd02690f5af6c839b72940039a4000451b44948d"
      }
    ],
    "stats": {
      "total": 528,
      "additions": 312,
      "deletions": 216
    },
    "files": [
      {
        "sha": "f033ed91cffd2bf80e73e39696810a6229d5c137",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -268,6 +268,7 @@ bitcoind_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS)\n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n   $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(BOOST_LIBS) \\"
      },
      {
        "sha": "5109a5f0da1c9613e36fb71568d4bb101e726fd6",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -137,7 +137,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n \n     // Parse reply\n     Value valReply;\n-    if (!read_string(strReply, valReply))\n+    if (!valReply.read(strReply))\n         throw runtime_error(\"couldn't parse reply from server\");\n     const Object& reply = valReply.get_obj();\n     if (reply.empty())\n@@ -173,19 +173,19 @@ int CommandLineRPC(int argc, char *argv[])\n         const Value& result = find_value(reply, \"result\");\n         const Value& error  = find_value(reply, \"error\");\n \n-        if (error.type() != null_type) {\n+        if (!error.isNull()) {\n             // Error\n-            strPrint = \"error: \" + write_string(error, false);\n-            int code = find_value(error.get_obj(), \"code\").get_int();\n+            strPrint = \"error: \" + error.write();\n+            int code = error[\"code\"].get_int();\n             nRet = abs(code);\n         } else {\n             // Result\n-            if (result.type() == null_type)\n+            if (result.isNull())\n                 strPrint = \"\";\n-            else if (result.type() == str_type)\n+            else if (result.isStr())\n                 strPrint = result.get_str();\n             else\n-                strPrint = write_string(result, true);\n+                strPrint = result.write(2);\n         }\n     }\n     catch (boost::thread_interrupted) {"
      },
      {
        "sha": "1962cf6431f01aff3fd72b1bad6ae51a2c701f41",
        "filename": "src/json_spirit_wrapper.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/json_spirit_wrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/json_spirit_wrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/json_spirit_wrapper.h?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -0,0 +1,17 @@\n+#ifndef __JSON_SPIRIT_WRAPPER_H__\n+#define __JSON_SPIRIT_WRAPPER_H__\n+\n+#include \"univalue/univalue.h\"\n+\n+namespace json_spirit {\n+\n+typedef UniValue Value;\n+typedef UniValue Array;\n+typedef UniValue Object;\n+typedef UniValue::VType Value_type;\n+\n+}\n+\n+#define find_value(val,key) (val[key])\n+\n+#endif // __JSON_SPIRIT_WRAPPER_H__"
      },
      {
        "sha": "0e7fc2958c12d0417672aa8e59531fd6695968e5",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -15,7 +15,7 @@\n #include \"rpcclient.h\"\n #include \"util.h\"\n \n-#include \"json/json_spirit_value.h\"\n+#include \"univalue/univalue.h\"\n #ifdef ENABLE_WALLET\n #include <db_cxx.h>\n #endif\n@@ -164,21 +164,21 @@ void RPCExecutor::request(const QString &command)\n         std::string strPrint;\n         // Convert argument list to JSON objects in method-dependent way,\n         // and pass it along with the method name to the dispatcher.\n-        json_spirit::Value result = tableRPC.execute(\n+        UniValue result = tableRPC.execute(\n             args[0],\n             RPCConvertValues(args[0], std::vector<std::string>(args.begin() + 1, args.end())));\n \n         // Format result reply\n-        if (result.type() == json_spirit::null_type)\n+        if (result.isNull())\n             strPrint = \"\";\n-        else if (result.type() == json_spirit::str_type)\n+        else if (result.isStr())\n             strPrint = result.get_str();\n         else\n-            strPrint = write_string(result, true);\n+            strPrint = result.write(2);\n \n         emit reply(RPCConsole::CMD_REPLY, QString::fromStdString(strPrint));\n     }\n-    catch (json_spirit::Object& objError)\n+    catch (UniValue& objError)\n     {\n         try // Nice formatting for standard-format error\n         {\n@@ -188,7 +188,7 @@ void RPCExecutor::request(const QString &command)\n         }\n         catch(std::runtime_error &) // raised when converting to invalid type, i.e. missing code or message\n         {   // Show raw JSON object\n-            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(write_string(json_spirit::Value(objError), false)));\n+            emit reply(RPCConsole::CMD_ERROR, QString::fromStdString(objError.write()));\n         }\n     }\n     catch (std::exception& e)"
      },
      {
        "sha": "95cac6077c2a05a3b73906e3f870e3485f13bf23",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -10,7 +10,7 @@\n \n #include <stdint.h>\n \n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -186,7 +186,13 @@ Value getrawmempool(const Array& params, bool fHelp)\n                 if (mempool.exists(txin.prevout.hash))\n                     setDepends.insert(txin.prevout.hash.ToString());\n             }\n-            Array depends(setDepends.begin(), setDepends.end());\n+\n+            UniValue depends;\n+            BOOST_FOREACH(const string& dep, setDepends)\n+            {\n+                depends.push_back(dep);\n+            }\n+\n             info.push_back(Pair(\"depends\", depends));\n             o.push_back(Pair(hash.ToString(), info));\n         }\n@@ -380,14 +386,14 @@ Value gettxout(const Array& params, bool fHelp)\n         LOCK(mempool.cs);\n         CCoinsViewMemPool view(*pcoinsTip, mempool);\n         if (!view.GetCoins(hash, coins))\n-            return Value::null;\n+            return NullUniValue;\n         mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool\n     } else {\n         if (!pcoinsTip->GetCoins(hash, coins))\n-            return Value::null;\n+            return NullUniValue;\n     }\n     if (n<0 || (unsigned int)n>=coins.vout.size() || coins.vout[n].IsNull())\n-        return Value::null;\n+        return NullUniValue;\n \n     std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;"
      },
      {
        "sha": "21fbae2b8d43806c0510d0eb545468044c447bb6",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -131,7 +131,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n         // parse string as JSON, insert bool/number/object/etc. value\n         else {\n             Value jVal;\n-            if (!read_string(strVal, jVal))\n+            if (!jVal.read(strVal))\n                 throw runtime_error(string(\"Error parsing JSON:\")+strVal);\n             params.push_back(jVal);\n         }"
      },
      {
        "sha": "edbcf2acb43e6804387b6fbfdee3ef59c4daec24",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -6,9 +6,7 @@\n #ifndef _BITCOINRPC_CLIENT_H_\n #define _BITCOINRPC_CLIENT_H_ 1\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n "
      },
      {
        "sha": "21ea818f2de67607639c4246f837e181bd9ceaaf",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -14,7 +14,7 @@\n \n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -116,7 +116,7 @@ Value importprivkey(const Array& params, bool fHelp)\n \n         // Don't throw error in case a key is already there\n         if (pwalletMain->HaveKey(vchAddress))\n-            return Value::null;\n+            return NullUniValue;\n \n         pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = 1;\n \n@@ -131,7 +131,7 @@ Value importprivkey(const Array& params, bool fHelp)\n         }\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value importaddress(const Array& params, bool fHelp)\n@@ -184,7 +184,7 @@ Value importaddress(const Array& params, bool fHelp)\n \n         // Don't throw error in case an address is already there\n         if (pwalletMain->HaveWatchOnly(script))\n-            return Value::null;\n+            return NullUniValue;\n \n         pwalletMain->MarkDirty();\n \n@@ -198,7 +198,7 @@ Value importaddress(const Array& params, bool fHelp)\n         }\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value importwallet(const Array& params, bool fHelp)\n@@ -296,7 +296,7 @@ Value importwallet(const Array& params, bool fHelp)\n     if (!fGood)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value dumpprivkey(const Array& params, bool fHelp)\n@@ -389,5 +389,5 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file << \"\\n\";\n     file << \"# End of dump\\n\";\n     file.close();\n-    return Value::null;\n+    return NullUniValue;\n }"
      },
      {
        "sha": "9a070491670bbf9b3a3c20d49b9abe1c46a1dd2c",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -20,8 +20,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -180,7 +179,7 @@ Value setgenerate(const Array& params, bool fHelp)\n         GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value gethashespersec(const Array& params, bool fHelp)\n@@ -344,14 +343,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n          );\n \n     std::string strMode = \"template\";\n-    Value lpval = Value::null;\n+    Value lpval = NullUniValue;\n     if (params.size() > 0)\n     {\n         const Object& oparam = params[0].get_obj();\n         const Value& modeval = find_value(oparam, \"mode\");\n-        if (modeval.type() == str_type)\n+        if (modeval.isStr())\n             strMode = modeval.get_str();\n-        else if (modeval.type() == null_type)\n+        else if (modeval.isNull())\n         {\n             /* Do nothing */\n         }\n@@ -371,14 +370,14 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n     static unsigned int nTransactionsUpdatedLast;\n \n-    if (lpval.type() != null_type)\n+    if (!lpval.isNull())\n     {\n         // Wait to respond until either the best block changes, OR a minute has passed and there are more transactions\n         uint256 hashWatchedChain;\n         boost::system_time checktxtime;\n         unsigned int nTransactionsUpdatedLastLP;\n \n-        if (lpval.type() == str_type)\n+        if (lpval.isStr())\n         {\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n             std::string lpstr = lpval.get_str();\n@@ -561,7 +560,7 @@ Value submitblock(const Array& params, bool fHelp)\n     if (!fAccepted)\n         return \"rejected\"; // TODO: report validation state\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value estimatefee(const Array& params, bool fHelp)\n@@ -583,7 +582,7 @@ Value estimatefee(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)\n@@ -615,7 +614,7 @@ Value estimatepriority(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)"
      },
      {
        "sha": "1618e357fcf6652a9d13f42176f834171289787a",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -19,8 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace boost;\n using namespace boost::assign;\n@@ -188,7 +187,7 @@ Value validateaddress(const Array& params, bool fHelp)\n         if (mine != ISMINE_NO) {\n             ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n             Object detail = boost::apply_visitor(DescribeAddressVisitor(mine), dest);\n-            ret.insert(ret.end(), detail.begin(), detail.end());\n+            ret.pushKVs(detail);\n         }\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));"
      },
      {
        "sha": "1635706ed03026d3bf4e1284f9fa8d26974adc96",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n \n #include <boost/foreach.hpp>\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -54,7 +54,7 @@ Value ping(const Array& params, bool fHelp)\n         pNode->fPingQueued = true;\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n@@ -171,7 +171,7 @@ Value addnode(const Array& params, bool fHelp)\n     {\n         CAddress addr;\n         OpenNetworkConnection(addr, NULL, strNode.c_str());\n-        return Value::null;\n+        return NullUniValue;\n     }\n \n     LOCK(cs_vAddedNodes);\n@@ -193,7 +193,7 @@ Value addnode(const Array& params, bool fHelp)\n         vAddedNodes.erase(it);\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n Value getaddednodeinfo(const Array& params, bool fHelp)"
      },
      {
        "sha": "8a95f43f3929dac9af4c1fe8cf872b3d02fe7d12",
        "filename": "src/rpcprotocol.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcprotocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcprotocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace boost;\n@@ -257,14 +257,14 @@ string JSONRPCRequest(const string& strMethod, const Array& params, const Value&\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return write_string(Value(request), false) + \"\\n\";\n+    return request.write() + \"\\n\";\n }\n \n Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n {\n     Object reply;\n-    if (error.type() != null_type)\n-        reply.push_back(Pair(\"result\", Value::null));\n+    if (!error.isNull())\n+        reply.push_back(Pair(\"result\", NullUniValue));\n     else\n         reply.push_back(Pair(\"result\", result));\n     reply.push_back(Pair(\"error\", error));\n@@ -275,7 +275,7 @@ Object JSONRPCReplyObj(const Value& result, const Value& error, const Value& id)\n string JSONRPCReply(const Value& result, const Value& error, const Value& id)\n {\n     Object reply = JSONRPCReplyObj(result, error, id);\n-    return write_string(Value(reply), false) + \"\\n\";\n+    return reply.write() + \"\\n\";\n }\n \n Object JSONRPCError(int code, const string& message)"
      },
      {
        "sha": "0bac708dfc0b6e868ff53b628d18dd43b468a596",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -15,9 +15,7 @@\n #include <boost/asio.hpp>\n #include <boost/asio/ssl.hpp>\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n // HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "08c656a0b53efb098e74bfa0c631ecfe25708467",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 25,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -19,8 +19,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace boost;\n@@ -226,7 +225,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -239,7 +238,8 @@ Value listunspent(const Array& params, bool fHelp)\n     set<CBitcoinAddress> setAddress;\n     if (params.size() > 2) {\n         Array inputs = params[2].get_array();\n-        BOOST_FOREACH(Value& input, inputs) {\n+        for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+            const Value& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n             if (!address.IsValid())\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+input.get_str());\n@@ -330,20 +330,21 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, list_of(UniValue::VARR)(UniValue::VOBJ));\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n-    BOOST_FOREACH(const Value& input, inputs) {\n+    for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n+        const Value& input = inputs[idx];\n         const Object& o = input.get_obj();\n \n         uint256 txid = ParseHashO(o, \"txid\");\n \n         const Value& vout_v = find_value(o, \"vout\");\n-        if (vout_v.type() != int_type)\n+        if (!vout_v.isNum())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, missing vout key\");\n         int nOutput = vout_v.get_int();\n         if (nOutput < 0)\n@@ -354,18 +355,19 @@ Value createrawtransaction(const Array& params, bool fHelp)\n     }\n \n     set<CBitcoinAddress> setAddress;\n-    BOOST_FOREACH(const Pair& s, sendTo) {\n-        CBitcoinAddress address(s.name_);\n+    vector<string> addrList = sendTo.getKeys();\n+    BOOST_FOREACH(const string& name_, addrList) {\n+        CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        int64_t nAmount = AmountFromValue(sendTo[name_]);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);\n@@ -425,7 +427,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, list_of(UniValue::VSTR));\n \n     CTransaction tx;\n \n@@ -463,7 +465,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, list_of(UniValue::VSTR));\n \n     Object r;\n     CScript script;\n@@ -529,7 +531,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -573,10 +575,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && params[2].type() != null_type) {\n+    if (params.size() > 2 && !params[2].isNull()) {\n         fGivenKeys = true;\n         Array keys = params[2].get_array();\n-        BOOST_FOREACH(Value k, keys) {\n+        for (unsigned int idx = 0; idx < keys.size(); idx++) {\n+            Value k = keys[idx];\n             CBitcoinSecret vchSecret;\n             bool fGood = vchSecret.SetString(k.get_str());\n             if (!fGood)\n@@ -591,15 +594,16 @@ Value signrawtransaction(const Array& params, bool fHelp)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1 && params[1].type() != null_type) {\n+    if (params.size() > 1 && !params[1].isNull()) {\n         Array prevTxs = params[1].get_array();\n-        BOOST_FOREACH(Value& p, prevTxs) {\n-            if (p.type() != obj_type)\n+        for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n+            const Value& p = prevTxs[idx];\n+            if (!p.isObject())\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheckObj(prevOut, map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR));\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -629,9 +633,9 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheckObj(prevOut, map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM)(\"scriptPubKey\", UniValue::VSTR)(\"redeemScript\",UniValue::VSTR));\n                 Value v = find_value(prevOut, \"redeemScript\");\n-                if (!(v == Value::null)) {\n+                if (!v.isNull()) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n                     CScript redeemScript(rsData.begin(), rsData.end());\n                     tempKeystore.AddCScript(redeemScript);\n@@ -647,7 +651,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3 && params[3].type() != null_type) {\n+    if (params.size() > 3 && !params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n             (string(\"ALL\"), int(SIGHASH_ALL))\n@@ -719,7 +723,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "4330e9dbf040b3d0b0eed631f5e49751e3145f93",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -23,7 +23,7 @@\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/shared_ptr.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace boost;\n using namespace boost::asio;\n@@ -53,30 +53,30 @@ void RPCTypeCheck(const Array& params,\n             break;\n \n         const Value& v = params[i];\n-        if (!((v.type() == t) || (fAllowNull && (v.type() == null_type))))\n+        if (!((v.type() == t) || (fAllowNull && (v.isNull()))))\n         {\n             string err = strprintf(\"Expected type %s, got %s\",\n-                                   Value_type_name[t], Value_type_name[v.type()]);\n+                                   uvTypeName(t), uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n         i++;\n     }\n }\n \n-void RPCTypeCheck(const Object& o,\n-                  const map<string, Value_type>& typesExpected,\n+void RPCTypeCheckObj(const UniValue& o,\n+                  const map<string, UniValue::VType>& typesExpected,\n                   bool fAllowNull)\n {\n     BOOST_FOREACH(const PAIRTYPE(string, Value_type)& t, typesExpected)\n     {\n         const Value& v = find_value(o, t.first);\n-        if (!fAllowNull && v.type() == null_type)\n+        if (!fAllowNull && v.isNull())\n             throw JSONRPCError(RPC_TYPE_ERROR, strprintf(\"Missing %s\", t.first));\n \n-        if (!((v.type() == t.second) || (fAllowNull && (v.type() == null_type))))\n+        if (!((v.type() == t.second) || (fAllowNull && (v.isNull()))))\n         {\n             string err = strprintf(\"Expected type %s for %s, got %s\",\n-                                   Value_type_name[t.second], t.first, Value_type_name[v.type()]);\n+                                   uvTypeName(t.second), t.first, uvTypeName(v.type()));\n             throw JSONRPCError(RPC_TYPE_ERROR, err);\n         }\n     }\n@@ -101,7 +101,7 @@ Value ValueFromAmount(int64_t amount)\n uint256 ParseHashV(const Value& v, string strName)\n {\n     string strHex;\n-    if (v.type() == str_type)\n+    if (v.isStr())\n         strHex = v.get_str();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n@@ -116,7 +116,7 @@ uint256 ParseHashO(const Object& o, string strKey)\n vector<unsigned char> ParseHexV(const Value& v, string strName)\n {\n     string strHex;\n-    if (v.type() == str_type)\n+    if (v.isStr())\n         strHex = v.get_str();\n     if (!IsHex(strHex))\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n@@ -373,7 +373,7 @@ void ErrorReply(std::ostream& stream, const Object& objError, const Value& id)\n     int code = find_value(objError, \"code\").get_int();\n     if (code == RPC_INVALID_REQUEST) nStatus = HTTP_BAD_REQUEST;\n     else if (code == RPC_METHOD_NOT_FOUND) nStatus = HTTP_NOT_FOUND;\n-    string strReply = JSONRPCReply(Value::null, objError, id);\n+    string strReply = JSONRPCReply(NullUniValue, objError, id);\n     stream << HTTPReply(nStatus, strReply, false) << std::flush;\n }\n \n@@ -766,14 +766,14 @@ class JSONRequest\n     string strMethod;\n     Array params;\n \n-    JSONRequest() { id = Value::null; }\n+    JSONRequest() { id = NullUniValue; }\n     void parse(const Value& valRequest);\n };\n \n void JSONRequest::parse(const Value& valRequest)\n {\n     // Parse request\n-    if (valRequest.type() != obj_type)\n+    if (!valRequest.isObject())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Invalid Request object\");\n     const Object& request = valRequest.get_obj();\n \n@@ -782,19 +782,19 @@ void JSONRequest::parse(const Value& valRequest)\n \n     // Parse method\n     Value valMethod = find_value(request, \"method\");\n-    if (valMethod.type() == null_type)\n+    if (valMethod.isNull())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Missing method\");\n-    if (valMethod.type() != str_type)\n+    if (!valMethod.isStr())\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n     if (strMethod != \"getblocktemplate\")\n         LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n \n     // Parse params\n     Value valParams = find_value(request, \"params\");\n-    if (valParams.type() == array_type)\n+    if (valParams.isArray())\n         params = valParams.get_array();\n-    else if (valParams.type() == null_type)\n+    else if (valParams.isNull())\n         params = Array();\n     else\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Params must be an array\");\n@@ -810,15 +810,15 @@ static Object JSONRPCExecOne(const Value& req)\n         jreq.parse(req);\n \n         Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n-        rpc_result = JSONRPCReplyObj(result, Value::null, jreq.id);\n+        rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (Object& objError)\n     {\n-        rpc_result = JSONRPCReplyObj(Value::null, objError, jreq.id);\n+        rpc_result = JSONRPCReplyObj(NullUniValue, objError, jreq.id);\n     }\n     catch (std::exception& e)\n     {\n-        rpc_result = JSONRPCReplyObj(Value::null,\n+        rpc_result = JSONRPCReplyObj(NullUniValue,\n                                      JSONRPCError(RPC_PARSE_ERROR, e.what()), jreq.id);\n     }\n \n@@ -831,7 +831,7 @@ static string JSONRPCExecBatch(const Array& vReq)\n     for (unsigned int reqIdx = 0; reqIdx < vReq.size(); reqIdx++)\n         ret.push_back(JSONRPCExecOne(vReq[reqIdx]));\n \n-    return write_string(Value(ret), false) + \"\\n\";\n+    return ret.write() + \"\\n\";\n }\n \n static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n@@ -863,22 +863,22 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n     {\n         // Parse request\n         Value valRequest;\n-        if (!read_string(strRequest, valRequest))\n+        if (!valRequest.read(strRequest))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n         string strReply;\n \n         // singleton request\n-        if (valRequest.type() == obj_type) {\n+        if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n             Value result = tableRPC.execute(jreq.strMethod, jreq.params);\n \n             // Send reply\n-            strReply = JSONRPCReply(result, Value::null, jreq.id);\n+            strReply = JSONRPCReply(result, NullUniValue, jreq.id);\n \n         // array of requests\n-        } else if (valRequest.type() == array_type)\n+        } else if (valRequest.isArray())\n             strReply = JSONRPCExecBatch(valRequest.get_array());\n         else\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Top-level object parse error\");"
      },
      {
        "sha": "f54848ac5fe2123701f2573c3ad03ce2c77d98e4",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -14,9 +14,8 @@\n #include <stdint.h>\n #include <string>\n \n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include <boost/function.hpp>\n+#include \"json_spirit_wrapper.h\"\n \n class CBlockIndex;\n class CNetAddr;\n@@ -52,10 +51,10 @@ void RPCTypeCheck(const json_spirit::Array& params,\n                   const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n /*\n   Check for expected keys/value types in an Object.\n-  Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n+  Use like: RPCTypeCheckObj(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n */\n-void RPCTypeCheck(const json_spirit::Object& o,\n-                  const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n+void RPCTypeCheckObj(const UniValue& o,\n+                  const std::map<std::string, UniValue::VType>& typesExpected, bool fAllowNull=false);\n \n /*\n   Run func nSeconds from now. Uses boost deadline timers."
      },
      {
        "sha": "791750a9179149edbdf6ba159854808ef71c6615",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 29,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -17,8 +17,7 @@\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_value.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace boost;\n@@ -241,7 +240,7 @@ Value setaccount(const Array& params, bool fHelp)\n \n     pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -336,9 +335,9 @@ Value sendtoaddress(const Array& params, bool fHelp)\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (params.size() > 2 && params[2].type() != null_type && !params[2].get_str().empty())\n+    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[2].get_str();\n-    if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n+    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[3].get_str();\n \n     EnsureWalletIsUnlocked();\n@@ -775,9 +774,9 @@ Value sendfrom(const Array& params, bool fHelp)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 4 && params[4].type() != null_type && !params[4].get_str().empty())\n+    if (params.size() > 4 && !params[4].isNull() && !params[4].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[4].get_str();\n-    if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n+    if (params.size() > 5 && !params[5].isNull() && !params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[5].get_str();\n \n     EnsureWalletIsUnlocked();\n@@ -832,26 +831,27 @@ Value sendmany(const Array& params, bool fHelp)\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 3 && params[3].type() != null_type && !params[3].get_str().empty())\n+    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n     vector<pair<CScript, int64_t> > vecSend;\n \n     int64_t totalAmount = 0;\n-    BOOST_FOREACH(const Pair& s, sendTo)\n+    vector<string> keys = sendTo.getKeys();\n+    BOOST_FOREACH(const string& name_, keys)\n     {\n-        CBitcoinAddress address(s.name_);\n+        CBitcoinAddress address(name_);\n         if (!address.IsValid())\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, string(\"Invalid Bitcoin address: \")+name_);\n \n         if (setAddress.count(address))\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+name_);\n         setAddress.insert(address);\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        int64_t nAmount = AmountFromValue(sendTo[name_]);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -1312,15 +1312,21 @@ Value listtransactions(const Array& params, bool fHelp)\n         nFrom = ret.size();\n     if ((nFrom + nCount) > (int)ret.size())\n         nCount = ret.size() - nFrom;\n-    Array::iterator first = ret.begin();\n+\n+    vector<UniValue> arrTmp = ret.getValues();\n+\n+    vector<UniValue>::iterator first = arrTmp.begin();\n     std::advance(first, nFrom);\n-    Array::iterator last = ret.begin();\n+    vector<UniValue>::iterator last = arrTmp.begin();\n     std::advance(last, nFrom+nCount);\n \n-    if (last != ret.end()) ret.erase(last, ret.end());\n-    if (first != ret.begin()) ret.erase(ret.begin(), first);\n+    if (last != arrTmp.end()) arrTmp.erase(last, arrTmp.end());\n+    if (first != arrTmp.begin()) arrTmp.erase(arrTmp.begin(), first);\n \n-    std::reverse(ret.begin(), ret.end()); // Return oldest to newest\n+    std::reverse(arrTmp.begin(), arrTmp.end()); // Return oldest to newest\n+\n+    ret.clear();\n+    ret.push_backV(arrTmp);\n \n     return ret;\n }\n@@ -1575,7 +1581,7 @@ Value backupwallet(const Array& params, bool fHelp)\n     if (!BackupWallet(*pwalletMain, strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1607,7 +1613,7 @@ Value keypoolrefill(const Array& params, bool fHelp)\n     if (pwalletMain->GetKeyPoolSize() < kpSize)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1669,7 +1675,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1710,7 +1716,7 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1744,7 +1750,7 @@ Value walletlock(const Array& params, bool fHelp)\n         nWalletUnlockTime = 0;\n     }\n \n-    return Value::null;\n+    return NullUniValue;\n }\n \n \n@@ -1839,9 +1845,9 @@ Value lockunspent(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, list_of(bool_type));\n+        RPCTypeCheck(params, list_of(UniValue::VBOOL));\n     else\n-        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, list_of(UniValue::VBOOL)(UniValue::VARR));\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -1852,13 +1858,13 @@ Value lockunspent(const Array& params, bool fHelp)\n     }\n \n     Array outputs = params[1].get_array();\n-    BOOST_FOREACH(Value& output, outputs)\n-    {\n-        if (output.type() != obj_type)\n+    for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n+        const UniValue& output = outputs[idx];\n+        if (!output.isObject())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheckObj(o, map_list_of(\"txid\", UniValue::VSTR)(\"vout\", UniValue::VNUM));\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      },
      {
        "sha": "c61d1d0d033d2776ba793fe103098f4ec0361498",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 23,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -15,9 +15,7 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n@@ -28,10 +26,9 @@ BOOST_AUTO_TEST_SUITE(base58_tests)\n BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n {\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -51,10 +48,9 @@ BOOST_AUTO_TEST_CASE(base58_DecodeBase58)\n     Array tests = read_json(std::string(json_tests::base58_encode_decode, json_tests::base58_encode_decode + sizeof(json_tests::base58_encode_decode)));\n     std::vector<unsigned char> result;\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 2) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -127,10 +123,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -183,10 +178,10 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n {\n     Array tests = read_json(std::string(json_tests::base58_keys_valid, json_tests::base58_keys_valid + sizeof(json_tests::base58_keys_valid)));\n     std::vector<unsigned char> result;\n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 3) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -254,10 +249,9 @@ BOOST_AUTO_TEST_CASE(base58_keys_invalid)\n     CBitcoinSecret secret;\n     CBitcoinAddress addr;\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "e3ad30dad5796767e258192287d5c83114799d40",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -14,7 +14,7 @@\n \n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n #include <openssl/ecdsa.h>\n \n using namespace std;\n@@ -67,8 +67,8 @@ BOOST_AUTO_TEST_CASE(script_canon)\n {\n     Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n \n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        string test = tests[idx].getValStr();\n         if (IsHex(test)) {\n             std::vector<unsigned char> sig = ParseHex(test);\n             BOOST_CHECK_MESSAGE(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n@@ -81,8 +81,8 @@ BOOST_AUTO_TEST_CASE(script_noncanon)\n {\n     Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n \n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        string test = tests[idx].getValStr();\n         if (IsHex(test)) {\n             std::vector<unsigned char> sig = ParseHex(test);\n             BOOST_CHECK_MESSAGE(!IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);"
      },
      {
        "sha": "8287149c42f173aba053e4dd9ffc8f1499a9bde6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -110,20 +110,20 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n \n BOOST_AUTO_TEST_CASE(rpc_format_monetary_values)\n {\n-    BOOST_CHECK(write_string(ValueFromAmount(0LL), false) == \"0.00000000\");\n-    BOOST_CHECK(write_string(ValueFromAmount(1LL), false) == \"0.00000001\");\n-    BOOST_CHECK(write_string(ValueFromAmount(17622195LL), false) == \"0.17622195\");\n-    BOOST_CHECK(write_string(ValueFromAmount(50000000LL), false) == \"0.50000000\");\n-    BOOST_CHECK(write_string(ValueFromAmount(89898989LL), false) == \"0.89898989\");\n-    BOOST_CHECK(write_string(ValueFromAmount(100000000LL), false) == \"1.00000000\");\n-    BOOST_CHECK(write_string(ValueFromAmount(2099999999999990LL), false) == \"20999999.99999990\");\n-    BOOST_CHECK(write_string(ValueFromAmount(2099999999999999LL), false) == \"20999999.99999999\");\n+    BOOST_CHECK(ValueFromAmount(0LL).write() == \"0.00000000\");\n+    BOOST_CHECK(ValueFromAmount(1LL).write() == \"0.00000001\");\n+    BOOST_CHECK(ValueFromAmount(17622195LL).write() == \"0.17622195\");\n+    BOOST_CHECK(ValueFromAmount(50000000LL).write() == \"0.50000000\");\n+    BOOST_CHECK(ValueFromAmount(89898989LL).write() == \"0.89898989\");\n+    BOOST_CHECK(ValueFromAmount(100000000LL).write() == \"1.00000000\");\n+    BOOST_CHECK(ValueFromAmount(2099999999999990LL).write() == \"20999999.99999990\");\n+    BOOST_CHECK(ValueFromAmount(2099999999999999LL).write() == \"20999999.99999999\");\n }\n \n static Value ValueFromString(const std::string &str)\n {\n     Value value;\n-    BOOST_CHECK(read_string(str, value));\n+    BOOST_CHECK(value.read(str));\n     return value;\n }\n "
      },
      {
        "sha": "cf96c244a61dee9fb1dd9c5831c08c9e1ca73492",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -26,9 +26,7 @@\n #include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -41,7 +39,7 @@ read_json(const std::string& jsondata)\n {\n     Value v;\n \n-    if (!read_string(jsondata, v) || v.type() != array_type)\n+    if (!v.read(jsondata) || !v.isArray())\n     {\n         BOOST_ERROR(\"Parse error.\");\n         return Array();\n@@ -60,10 +58,9 @@ BOOST_AUTO_TEST_CASE(script_valid)\n     // scripts.\n     Array tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n         if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -84,10 +81,9 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     // Scripts that should evaluate as invalid\n     Array tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n         if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "8415622225ff1bed3e33b1994ed9793ccbad5fc2",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -13,9 +13,7 @@\n #include <iostream>\n \n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_utils.h\"\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n@@ -166,10 +164,9 @@ BOOST_AUTO_TEST_CASE(sighash_from_data)\n {\n     Array tests = read_json(std::string(json_tests::sighash, json_tests::sighash + sizeof(json_tests::sighash)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        std::string strTest = write_string(tv, false);\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        std::string strTest = test.write();\n         if (test.size() < 1) // Allow for extra stuff (useful for comments)\n         {\n             BOOST_ERROR(\"Bad test: \" << strTest);"
      },
      {
        "sha": "4d9a501ba29885abbf55d409979e1e8e39cea8cb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -17,7 +17,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n+#include \"json_spirit_wrapper.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -65,13 +65,12 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     Array tests = read_json(std::string(json_tests::tx_valid, json_tests::tx_valid + sizeof(json_tests::tx_valid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n-        if (test[0].type() == array_type)\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n+        if (test[0].isArray())\n         {\n-            if (test.size() != 3 || test[1].type() != str_type || test[2].type() != str_type)\n+            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n@@ -80,9 +79,9 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n-            {\n-                if (input.type() != array_type)\n+\t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n+\t        const Value& input = inputs[inpIdx];\n+                if (!input.isArray())\n                 {\n                     fValid = false;\n                     break;\n@@ -139,13 +138,12 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n     // verifyFlags is a comma separated list of script verification flags to apply, or \"NONE\"\n     Array tests = read_json(std::string(json_tests::tx_invalid, json_tests::tx_invalid + sizeof(json_tests::tx_invalid)));\n \n-    BOOST_FOREACH(Value& tv, tests)\n-    {\n-        Array test = tv.get_array();\n-        string strTest = write_string(tv, false);\n-        if (test[0].type() == array_type)\n+    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n+        Array test = tests[idx];\n+        string strTest = test.write();\n+        if (test[0].isArray())\n         {\n-            if (test.size() != 3 || test[1].type() != str_type || test[2].type() != str_type)\n+            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n@@ -154,9 +152,9 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             Array inputs = test[0].get_array();\n             bool fValid = true;\n-            BOOST_FOREACH(Value& input, inputs)\n-            {\n-                if (input.type() != array_type)\n+\t    for (unsigned int inpIdx = 0; inpIdx < inputs.size(); inpIdx++) {\n+\t        const Value& input = inputs[inpIdx];\n+                if (!input.isArray())\n                 {\n                     fValid = false;\n                     break;"
      },
      {
        "sha": "8530110866d4a0fcf51d0b812e21744c15978de6",
        "filename": "src/univalue/univalue.h",
        "status": "modified",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2765757ec864e672b4fabf43004747699c5923da/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2765757ec864e672b4fabf43004747699c5923da/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=2765757ec864e672b4fabf43004747699c5923da",
        "patch": "@@ -11,6 +11,10 @@\n #include <map>\n #include <cassert>\n \n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+#include <stdlib.h>       // atoi(), atof()   TODO: remove\n+\n class UniValue {\n public:\n     enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n@@ -130,8 +134,88 @@ class UniValue {\n     int findKey(const std::string& key) const;\n     void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n     void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    //\n+    // The following were added for compatibility with json_spirit.\n+    // Most duplicate other methods, and should be removed.\n+    //\n+    std::vector<std::string> getKeys() const { return keys; }\n+    std::vector<UniValue> getValues() const { return values; }\n+    bool get_bool() const { return getBool(); }\n+    std::string get_str() const { return getValStr(); }\n+    int get_int() const { return atoi(getValStr().c_str()); }\n+    double get_real() const { return atof(getValStr().c_str()); }\n+    const UniValue& get_obj() const { return *this; }\n+    const UniValue& get_array() const { return *this; }\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    int64_t get_int64() const {\n+        int64_t ret;\n+        std::istringstream(getValStr()) >> ret;\n+        return ret;\n+    }\n };\n \n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n enum jtokentype {\n     JTOK_ERR        = -1,\n     JTOK_NONE       = 0,                           // eof"
      }
    ]
  }
]