DrahtBot,2019-05-03 13:40:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20827 (During IBD, prune as much as possible until we get close to where we will eventually keep blocks by luke-jr)\n* #2",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-489099020,489099020,
promag,2019-05-06 17:37:12,Closes #15867?,https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-489707230,489707230,
jonasschnelli,2019-05-09 18:10:16,Rebased and fixed reported points.,https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-491008776,491008776,
Roasbeef,2020-01-08 01:43:34,"Any chance this will be revived? This is a blocker for `lnd` to support a pruned `bitcoind` node, as we want to be able to fetch filters from `bitcoind`, then manually fetch blocks ourselves (if `bitcoind` doesn't have them) to scan them for rescans or just normal wallet sync. ",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-571854091,571854091,
prusnak,2020-07-08 15:54:08,This feature increases the value of running a pruned node significantly. +1 for adding this!,https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-655605491,655605491,
luke-jr,2020-07-08 16:56:07,I suspect #19463 could be useful for this,https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-655638171,655638171,
jonasschnelli,2020-12-10 19:30:51,"Rewrote this PR and tried to fix the reported point by @promag, @MarcoFalke and @luke-jr.\nAdded `-fastprune` debug parameter to test pruning more effectively (added a functional-test as well).",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-742744931,742744931,
jonasschnelli,2021-01-29 09:19:54,"Thanks @fjahr for the reviews.\nAnd I agree that there should be a test for the FlushStateToDisk() changes.",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-769684234,769684234,
achow101,2021-02-08 21:38:29,"Code Review ACK 0280274368e2df7c7832549cd581c710875a6be1\n\nThis is simpler than I expected it to be.",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-775480470,775480470,
jonasschnelli,2021-02-11 10:44:49,"Thanks a lot for testing @ryanofsky.\nAddressed your points (+rebased)(force pushed).",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-777355249,777355249,
jonasschnelli,2021-02-16 09:37:52,Thanks @ryanofsky and @fjahr! Fixed the reported points. Thanks for a quick retest.,https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-779710204,779710204,
fjahr,2021-02-17 22:23:40,"Code review ACK 84716b1\n\nChecked that only changes since last review were small improvements on the functional test and the added parameter to `FindFilesToPrune()`.",https://github.com/bitcoin/bitcoin/pull/15946#issuecomment-780894327,780894327,
promag,2019-05-06 14:21:58,"0d8f7369cd8b51dfb7b3b9b920e4e11f7962faa9 \n\nThis doesn't check `status & BLOCK_HAVE_DATA` on the tip, is that intentional?",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281206430,281206430,src/index/base.cpp
promag,2019-05-06 14:26:02,"d2ab62fede34b7980863617f3669c019ee42d029 \n\nThese comment were added in the previous commit, could fixup these hunks?",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281208250,281208250,src/index/base.cpp
promag,2019-05-06 14:28:01,"8bb1ca8a276f5f6fc5af3639c2d58c496b71bf8f \n\n`bool IsSyned() const;`. Any reason to not write implementation here?",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281209023,281209023,src/index/base.h
promag,2019-05-06 14:30:44,"bd11606a95022478e6ef1ccaada1589cff13a327\n\nCan be checked before locking `cs_main`?",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281210225,281210225,src/rpc/blockchain.cpp
promag,2019-05-06 14:31:12,"bd11606a95022478e6ef1ccaada1589cff13a327\n\nDo you see a way to test this?",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281210459,281210459,src/rpc/blockchain.cpp
promag,2019-05-06 14:38:02,"bf744288bd58718844841c088c498cd57a8f87d8 \n\nnit, no need for `{}`. Alternative:\n```\ndelay_pruning |= !index.IsSynced();\n```",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281213644,281213644,src/validation.cpp
promag,2019-05-06 14:48:22,"bf744288bd58718844841c088c498cd57a8f87d8\n\nAn alternative is to add a global `g_delay_pruning` in validation.h which gets updated every time an index `m_synced` is updated.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281218262,281218262,test/lint/lint-circular-dependencies.sh
MarcoFalke,2019-05-06 14:53:56,I don't think the tip can ever not have data?,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281220802,281220802,src/index/base.cpp
MarcoFalke,2019-05-06 14:54:39,"Or move the ""load block"" function into a separate ""storage"" module.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r281221080,281221080,test/lint/lint-circular-dependencies.sh
jonasschnelli,2019-05-09 15:58:25,I'm currently working on making the block-/undo-filesize dynamic which would then allow testing this more reliable.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282552651,282552651,src/rpc/blockchain.cpp
jonasschnelli,2019-05-09 18:04:33,"The global `g_delay_pruning` smells fragile. Better not do that.\n\nI like the ""storage"" module approach which though would be something for another PR.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282601175,282601175,test/lint/lint-circular-dependencies.sh
jonasschnelli,2019-05-09 18:06:33,"> I don't think the tip can ever not have data? \n\nJup.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282601885,282601885,src/index/base.cpp
jonasschnelli,2019-05-09 18:06:46,Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282601960,282601960,src/index/base.h
jonasschnelli,2019-05-09 18:08:04,Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282602418,282602418,src/rpc/blockchain.cpp
jonasschnelli,2019-05-09 18:08:38,"Rather not do `|= !` for code readability, but removed the extra unnecessary block ",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r282602625,282602625,src/validation.cpp
luke-jr,2019-08-19 16:17:53,Aren't we intentionally keeping the message vague here to avoid confusing users?,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315296449,315296449,src/index/base.cpp
luke-jr,2019-08-19 16:20:20,"IIRC, having the data for block N is not a guarantee we have it for block N+M, since blocks are stored out of order and pruned only as entire files.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315297460,315297460,src/index/base.cpp
luke-jr,2019-08-19 16:21:00,"If `m_best_block_index` is not in the main chain, we may need its parent blocks to undo indexing. This should be checked here too.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315297746,315297746,src/index/base.cpp
luke-jr,2019-08-19 16:21:34,lead*,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315297976,315297976,src/index/base.cpp
luke-jr,2019-08-19 16:22:52,Would be nicer to just check if the indexes are beyond the requested prune height...,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315298520,315298520,src/rpc/blockchain.cpp
luke-jr,2019-08-19 16:23:38,Won't this effectively prevent all pruning until IBD completes? Seems important to prune as soon as all indexes are caught up to the given height...,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r315298813,315298813,src/validation.cpp
fjahr,2021-01-02 17:08:26,`has_blockfilter = true;`?,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r550900736,550900736,src/validation.cpp
fjahr,2021-01-02 17:22:07,I think this whole block of additions can be moved below line 2255 (`if (fPruneMode...`) because it's only relevant for what is inside there.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r550901918,550901918,src/validation.cpp
fjahr,2021-01-02 17:27:46,should this be `index_lowest_blockheight = height;`?,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r550902448,550902448,src/validation.cpp
fjahr,2021-01-02 17:33:23,Shouldn't this be `std::min()` because the lower height number is the one that let's us prune less? (same below),https://github.com/bitcoin/bitcoin/pull/15946#discussion_r550902906,550902906,src/validation.cpp
jonasschnelli,2021-01-29 09:06:25,Good point. Will change.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r566674758,566674758,src/validation.cpp
jonasschnelli,2021-01-29 09:18:40,Absolutely. Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r566681917,566681917,src/validation.cpp
jonasschnelli,2021-01-29 09:18:47,Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r566681970,566681970,src/validation.cpp
jonasschnelli,2021-01-29 09:18:49,Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r566681981,566681981,src/validation.cpp
prusnak,2021-02-08 21:48:27,The numeric constant could be extracted into `src/validation.h` (on top of the file where `MAX_BLOCKFILE_SIZE` is defined).,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r572397573,572397573,src/validation.cpp
prusnak,2021-02-08 21:48:36,The numeric constant could be extracted to top of the file where `BLOCKFILE_CHUNK_SIZE` is defined.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r572397668,572397668,src/validation.cpp
ryanofsky,2021-02-10 01:08:26,"In commit ""Avoid pruning below the blockfilterindex sync height"" (bda1c9fc90a704d1962b16fe4242b5637c930b29)\n\nEarlier commit can set best_block_height to 0, while FindFilesToPruneManual is asserting prune height > 0, which seems like it could lead to an unlucky crash.\n\nAlso, the has_blockfilter variable and conditionals below seem unnecessary, and the logic would work fine if it were just a",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573368857,573368857,src/validation.cpp
ryanofsky,2021-02-10 01:18:07,"In commit ""Allow blockfilter in conjunction with prune"" (92b4a9cc3eca0897e455e00144a96e88b5c4ea1c)\n\nOn these two lines it's confusing and appears racy for this code to be referring to the shared `m_best_block_index.load()` value when it could be just be using the private `block_to_test` value. Would suggest `s/m_best_block_index.load()/block_to_test/`",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573372325,573372325,src/index/base.cpp
ryanofsky,2021-02-10 01:20:17,"In commit ""Allow blockfilter in conjunction with prune"" (92b4a9cc3eca0897e455e00144a96e88b5c4ea1c)\n\nThis seems wrong in the fork case. Should be fixed with  `s/m_best_block_index.load()/block_to_test/` again",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573373090,573373090,src/index/base.cpp
ryanofsky,2021-02-10 01:57:16,"In commit ""Avoid pruning below the blockfilterindex sync height"" (bda1c9fc90a704d1962b16fe4242b5637c930b29)\n\nThis comment and this commit title seem wrong, should `s/below/above/`",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573385944,573385944,src/validation.cpp
ryanofsky,2021-02-10 02:09:03,"In commit ""Avoid pruning below the blockfilterindex sync height"" (bda1c9fc90a704d1962b16fe4242b5637c930b29)\n\nI don't think just passing a lower `nPruneAfterHeight` argument value is sufficient to avoid pruning here. I think the `index_lowest_blockheight` variable (`last_prune` variable in my previous suggestion) has to be passed as a new argument to `FindFilesToPrune`. If you look at the `Find",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573391858,573391858,src/validation.cpp
jonasschnelli,2021-02-11 09:37:13,Using `last_prune` instead of `m_chain.Height()` will lead to preserve 288 blocks below the artificial tip (`last_prune`) which IMO are not subject to reorg.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r574358480,574358480,src/validation.cpp
ryanofsky,2021-02-11 09:49:56,"> Using `last_prune` instead of `m_chain.Height()` will lead to preserve 288 blocks below the artificial tip (`last_prune`) which IMO are not subject to reorg.\n\nIf you're talking about the non-manual case, the you need to FindFilesToPrune a new parameter, not use the existing one, see https://github.com/bitcoin/bitcoin/pull/15946#discussion_r573391858. Not suggesting preserving below the tip.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r574366925,574366925,src/validation.cpp
jonasschnelli,2021-02-11 10:46:08,Yes. You're right. Lets just accept the 288blocks buffer for now (can be changed later if necessary).,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r574402608,574402608,src/validation.cpp
jonasschnelli,2021-02-11 10:47:41,I thought about it but since its a debug only parameter I rather keep that inline.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r574403596,574403596,src/validation.cpp
ryanofsky,2021-02-12 21:30:12,"In commit ""Avoid pruning below the blockfilterindex sync height"" (14c95089fe9727794c1a6101d5cedaca54292bb7)\n\nPretending `last_prune` as the chain height may be safe, because the only side effect is to not prune blocks that could be pruned, but it is confusing, and also creates a difference in behavior between the manual prune case which uses the real height and this case which pretends the min",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r575529707,575529707,src/validation.cpp
fjahr,2021-02-14 17:43:09,"in b5c243cd5202ba17ed20e0ea7c14bb9e11ef2425:\n\nDescription needs an update.",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r575840775,575840775,test/functional/feature_blockfilterindex_prune.py
fjahr,2021-02-14 17:50:51,"in b5c243cd5202ba17ed20e0ea7c14bb9e11ef2425:\n\nnit: ""...but no blocks are actually pruned""",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r575841826,575841826,test/functional/feature_blockfilterindex_prune.py
fjahr,2021-02-14 18:35:18,"in b5c243c:\n\nSuggested addition\n\n```suggestion\n        self.log.info(""make sure the node starts again with the -reindex arg"")\n        reindex_args = self.extra_args[1]\n        reindex_args.append(""-reindex"")\n        self.start_node(1, extra_args=reindex_args)\n```",https://github.com/bitcoin/bitcoin/pull/15946#discussion_r575846927,575846927,test/functional/feature_blockfilterindex_prune.py
jonasschnelli,2021-02-16 09:31:38,Yes. That makes sense. Implemented now as suggested by @ryanofsky.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r576674356,576674356,src/validation.cpp
jonasschnelli,2021-02-16 09:31:47,Thanks for spotting. Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r576674458,576674458,test/functional/feature_blockfilterindex_prune.py
jonasschnelli,2021-02-16 09:31:53,Fixed.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r576674509,576674509,test/functional/feature_blockfilterindex_prune.py
jonasschnelli,2021-02-16 09:32:06,Added that additional test.,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r576674666,576674666,test/functional/feature_blockfilterindex_prune.py
jnewbery,2021-02-23 10:31:52,Is this making blockfilterindex part of validation code?,https://github.com/bitcoin/bitcoin/pull/15946#discussion_r580924696,580924696,src/validation.cpp
