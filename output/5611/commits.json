[
  {
    "sha": "f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGI4YWZjODhiYTQ3YTQ0MmM3NDkzYTNiZjE5MGFjZjkyNzVmYjYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-07T01:11:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-07T01:18:12Z"
      },
      "message": "tests: fix spurious windows test failures after 012598880c\n\non rare occasions, rand() was returning duped values, causing duplicate\ntransactions.\n\nBuildMerkleTree happily used these, but CPartialMerkleTree caught them and\nreturned a null merkle root.\n\nRather than taking changes with rand(), use the loop counter to guarantee\nunique values.\n\nAt sipa's request, also remove the remaining uses of rand().",
      "tree": {
        "sha": "fa84cd2f1808d2c7e1eb08b95439a17694ffb7ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa84cd2f1808d2c7e1eb08b95439a17694ffb7ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b8afc88ba47a442c7493a3bf190acf9275fb60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b8afc88ba47a442c7493a3bf190acf9275fb60/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b95808428c16b2276cf1a6416d0c01ae515e81a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b95808428c16b2276cf1a6416d0c01ae515e81a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4406b08e5692c75260494690e0f42fcfdc496d46",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b8afc88ba47a442c7493a3bf190acf9275fb60/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b8afc88ba47a442c7493a3bf190acf9275fb60/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=f0b8afc88ba47a442c7493a3bf190acf9275fb60",
        "patch": "@@ -8,6 +8,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n+#include \"random.h\"\n \n #include <vector>\n \n@@ -21,8 +22,8 @@ class CPartialMerkleTreeTester : public CPartialMerkleTree\n public:\n     // flip one bit in one of the hashes - this should break the authentication\n     void Damage() {\n-        unsigned int n = rand() % vHash.size();\n-        int bit = rand() % 256;\n+        unsigned int n = insecure_rand() % vHash.size();\n+        int bit = insecure_rand() % 256;\n         *(vHash[n].begin() + (bit>>3)) ^= 1<<(bit&7);\n     }\n };\n@@ -31,6 +32,7 @@ BOOST_AUTO_TEST_SUITE(pmt_tests)\n \n BOOST_AUTO_TEST_CASE(pmt_test1)\n {\n+    seed_insecure_rand(false);\n     static const unsigned int nTxCounts[] = {1, 4, 7, 17, 56, 100, 127, 256, 312, 513, 1000, 4095};\n \n     for (int n = 0; n < 12; n++) {\n@@ -40,7 +42,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n         CBlock block;\n         for (unsigned int j=0; j<nTx; j++) {\n             CMutableTransaction tx;\n-            tx.nLockTime = rand(); // actual transaction data doesn't matter; just make the nLockTime's unique\n+            tx.nLockTime = j; // actual transaction data doesn't matter; just make the nLockTime's unique\n             block.vtx.push_back(CTransaction(tx));\n         }\n \n@@ -61,7 +63,7 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n             std::vector<bool> vMatch(nTx, false);\n             std::vector<uint256> vMatchTxid1;\n             for (unsigned int j=0; j<nTx; j++) {\n-                bool fInclude = (rand() & ((1 << (att/2)) - 1)) == 0;\n+                bool fInclude = (insecure_rand() & ((1 << (att/2)) - 1)) == 0;\n                 vMatch[j] = fInclude;\n                 if (fInclude)\n                     vMatchTxid1.push_back(vTxid[j]);"
      }
    ]
  }
]