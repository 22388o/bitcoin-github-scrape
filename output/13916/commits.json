[
  {
    "sha": "fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU1ODdmZTcxY2UwNDFkYzY5Y2IwZDQ2Njk3OTc1YmI1MWVmMWY2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-08T21:22:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-08T21:22:35Z"
      },
      "message": "qa: wait_for_verack by default",
      "tree": {
        "sha": "ed1eb744ee32af6b25a90d4557b3af1c3ee62d34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1eb744ee32af6b25a90d4557b3af1c3ee62d34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJba18bAAoJEM4rdWl+aaVIZVsMAKXMpESLGaSvkXSscw+HP5hA\nrR1iXQpJQtGbu1g3/Yjj89XPw1s/q/+XRugCOniKD5oVAqsv0qo9qdwvWeC6b9Im\niwVotZH9Ejl2DEo9w/4jwJCC6f9f5vD52qjqL70SMLNdZQEvfV3n91ewqQy0S02r\nuzRaW/K7PFjn+umn4iszg5r7UpJJL7cVL+DFMKMzDm2NCg7SKS/r0KB860ZW/Fwq\nQ+5flQyn/j8Ydq3A0i/jLhrMRKTk6ek0BwxIG+j1IM62lE7G1XyZcVG1RE+VIy07\n2umeswDXm6rMMVS9AmJhTEwY1pQd/ZNW5kDXm2aWddLcEdly8zbNKVVuXgUIM8DX\n1dHAufPzDYMd6ZJKwlx5ERiNw7U7+8IBQSctWlrge9j0uCRTKPGLJDvSpdImpqYx\nWnZAjP4CMglp3bnktSqetuVrAmAxja7b/dDNIucLZ6P+wdXMr3QgIMfNVOLSFlDt\n603YmPSAZ/k4KMJ+6aiqCMBnVH2NFjFs6XBWS4UzqQ==\n=oQKy\n-----END PGP SIGNATURE-----",
        "payload": "tree ed1eb744ee32af6b25a90d4557b3af1c3ee62d34\nparent 1cd5f2cf9a98708767049a7ddf577cc3f4527617\nauthor MarcoFalke <falke.marco@gmail.com> 1533763365 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1533763355 -0400\n\nqa: wait_for_verack by default\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cd5f2cf9a98708767049a7ddf577cc3f4527617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cd5f2cf9a98708767049a7ddf577cc3f4527617",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cd5f2cf9a98708767049a7ddf577cc3f4527617"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 11,
      "deletions": 56
    },
    "files": [
      {
        "sha": "b9e1a4b6824357dce1442d0a9076766eba4c391d",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -130,12 +130,9 @@ def custom_method(self):\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n-        # Create P2P connections to two of the nodes\n+        # Create P2P connections will wait for a verack to make sure the connection is fully up\n         self.nodes[0].add_p2p_connection(BaseNode())\n \n-        # wait_for_verack ensures that the P2P connection is fully up.\n-        self.nodes[0].p2p.wait_for_verack()\n-\n         # Generating a block on one of the nodes will get us out of IBD\n         blocks = [int(self.nodes[0].generate(nblocks=1)[0], 16)]\n         self.sync_all([self.nodes[0:1]])\n@@ -187,7 +184,6 @@ def run_test(self):\n         self.nodes[0].disconnect_p2ps()\n \n         self.nodes[2].add_p2p_connection(BaseNode())\n-        self.nodes[2].p2p.wait_for_verack()\n \n         self.log.info(\"Wait for node2 reach current tip. Test that it has propagated all the blocks to us\")\n "
      },
      {
        "sha": "c5b58f71f0da8c68976ec01865ff9e5b3b3cf2ac",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -95,10 +95,7 @@ def assert_blockchain_height(self, node, height):\n                 break\n \n     def run_test(self):\n-\n-        # Connect to node0\n         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         # Build the blockchain\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n@@ -168,10 +165,6 @@ def run_test(self):\n         p2p1 = self.nodes[1].add_p2p_connection(BaseNode())\n         p2p2 = self.nodes[2].add_p2p_connection(BaseNode())\n \n-        p2p0.wait_for_verack()\n-        p2p1.wait_for_verack()\n-        p2p2.wait_for_verack()\n-\n         # send header lists to all three nodes\n         p2p0.send_header_for_blocks(self.blocks[0:2000])\n         p2p0.send_header_for_blocks(self.blocks[2000:])"
      },
      {
        "sha": "623b540add7da5e5e04b62606721c7c495406cba",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -67,7 +67,6 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         self.log.info(\"Mining %d blocks\", CLTV_HEIGHT - 2)\n         self.coinbase_blocks = self.nodes[0].generate(CLTV_HEIGHT - 2)"
      },
      {
        "sha": "06a8c69712fb28ddde6327b11aa275aed778a1ef",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -183,7 +183,6 @@ def sync_blocks(self, blocks, success=True, reject_code=None, reject_reason=None\n \n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PDataStore())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         self.log.info(\"Generate blocks in the past for coinbase outputs.\")\n         long_past_time = int(time.time()) - 600 * 1000  # enough to build up to 1000 blocks 10 minutes apart without worrying about getting into the future"
      },
      {
        "sha": "47dc6754bf7ff2112c3f0ce13cdca60d0ed73ee3",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -57,9 +57,6 @@ def set_test_params(self):\n     def run_test(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())\n \n-        # wait_for_verack ensures that the P2P connection is fully up.\n-        self.nodes[0].p2p.wait_for_verack()\n-\n         self.log.info(\"Mining %d blocks\", DERSIG_HEIGHT - 2)\n         self.coinbase_blocks = self.nodes[0].generate(DERSIG_HEIGHT - 2)\n         self.nodeaddress = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "273c8d92c4f7a6eff225b961432bd6d36fecba02",
        "filename": "test/functional/feature_maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_maxuploadtarget.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -57,11 +57,6 @@ def run_test(self):\n         for _ in range(3):\n             p2p_conns.append(self.nodes[0].add_p2p_connection(TestP2PConn()))\n \n-        for p2pc in p2p_conns:\n-            p2pc.wait_for_verack()\n-\n-        # Test logic begins here\n-\n         # Now mine a big block\n         mine_large_block(self.nodes[0], self.utxo_cache)\n \n@@ -147,7 +142,6 @@ def run_test(self):\n \n         # Reconnect to self.nodes[0]\n         self.nodes[0].add_p2p_connection(TestP2PConn())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit\n         getdata_request.inv = [CInv(2, big_new_block)]"
      },
      {
        "sha": "4d359da20b264f73bc87603b478db72aee885548",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -62,10 +62,8 @@ def versionbits_in_alert_file(self):\n         return VB_PATTERN.search(alert_text) is not None\n \n     def run_test(self):\n-        # Handy alias\n         node = self.nodes[0]\n         node.add_p2p_connection(P2PInterface())\n-        node.p2p.wait_for_verack()\n \n         # Mine one period worth of blocks\n         node.generate(VB_PERIOD)"
      },
      {
        "sha": "bb19ec7c72b59120006972360a4f1dbb61a79352",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -790,11 +790,9 @@ def announce_cmpct_block(node, peer):\n     def run_test(self):\n         # Setup the p2p connections\n         self.test_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n-        self.segwit_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK|NODE_WITNESS)\n+        self.segwit_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK | NODE_WITNESS)\n         self.old_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK)\n \n-        self.test_node.wait_for_verack()\n-\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n "
      },
      {
        "sha": "08d512ef10827530dded8199df70d3fb5cf57617",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -47,9 +47,7 @@ def run_test(self):\n         node1.generate(1)\n         sync_blocks(self.nodes)\n \n-        # Setup the p2p connections\n         self.nodes[0].add_p2p_connection(TestP2PConn())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))"
      },
      {
        "sha": "b872bacbdc3d38c26a14f1ab13e0394fe315c8d0",
        "filename": "test/functional/p2p_fingerprint.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_fingerprint.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_fingerprint.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_fingerprint.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -75,7 +75,6 @@ def last_header_equals(self, expected_hash, node):\n     # last month but that have over a month's worth of work are also withheld.\n     def run_test(self):\n         node0 = self.nodes[0].add_p2p_connection(P2PInterface())\n-        node0.wait_for_verack()\n \n         # Set node time to 60 days ago\n         self.nodes[0].setmocktime(int(time.time()) - 60 * 24 * 60 * 60)"
      },
      {
        "sha": "58ae881f2f7c8ce043d01595bb98771b7c67abba",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -28,7 +28,6 @@ def run_test(self):\n         # Add p2p connection to node0\n         node = self.nodes[0]  # convenience reference to the node\n         node.add_p2p_connection(P2PDataStore())\n-        node.p2p.wait_for_verack()\n \n         best_block = node.getblock(node.getbestblockhash())\n         tip = int(node.getbestblockhash(), 16)"
      },
      {
        "sha": "5c7ae97dd98b6abd1b75858c23b3b46ae00b2f18",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -32,7 +32,6 @@ def bootstrap_p2p(self, *, num_connections=1):\n         Helper to connect and wait for version handshake.\"\"\"\n         for _ in range(num_connections):\n             self.nodes[0].add_p2p_connection(P2PDataStore())\n-        self.nodes[0].p2p.wait_for_verack()\n \n     def reconnect_p2p(self, **kwargs):\n         \"\"\"Tear down and bootstrap the P2P connection to the node."
      },
      {
        "sha": "ab404d6ba5f8c385fd605b7e624b63a4500211a2",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -88,11 +88,11 @@ def on_version(self, message):\n class P2PLeakTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-banscore='+str(banscore)]]\n+        self.extra_args = [['-banscore=' + str(banscore)]]\n \n     def run_test(self):\n-        no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False)\n-        no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False)\n+        no_version_bannode = self.nodes[0].add_p2p_connection(CNodeNoVersionBan(), send_version=False, wait_for_verack=False)\n+        no_version_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVersionIdle(), send_version=False, wait_for_verack=False)\n         no_verack_idlenode = self.nodes[0].add_p2p_connection(CNodeNoVerackIdle())\n \n         wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)"
      },
      {
        "sha": "e90320ef0bbb90e1acc1644375948eb0637edf99",
        "filename": "test/functional/p2p_mempool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_mempool.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -21,7 +21,6 @@ def set_test_params(self):\n     def run_test(self):\n         # Add a p2p connection\n         self.nodes[0].add_p2p_connection(P2PInterface())\n-        self.nodes[0].p2p.wait_for_verack()\n \n         #request mempool\n         self.nodes[0].p2p.send_message(msg_mempool())"
      },
      {
        "sha": "fb1d3b75457fec7d09443807f7b5aa654bab3ca3",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -48,7 +48,6 @@ def setup_network(self):\n \n     def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        node.wait_for_verack()\n \n         expected_services = NODE_BLOOM | NODE_WITNESS | NODE_NETWORK_LIMITED\n \n@@ -74,7 +73,6 @@ def run_test(self):\n         self.log.info(\"Check local address relay, do a fresh connection.\")\n         self.nodes[0].disconnect_p2ps()\n         node1 = self.nodes[0].add_p2p_connection(P2PIgnoreInv())\n-        node1.wait_for_verack()\n         node1.send_message(msg_verack())\n \n         node1.wait_for_addr()"
      },
      {
        "sha": "4231774ce7c4fc238fffd3ef952f4d31db463bb2",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -231,9 +231,6 @@ def run_test(self):\n         # self.std_node is for testing node1 (fRequireStandard=true)\n         self.std_node = self.nodes[1].add_p2p_connection(TestP2PConn(), services=NODE_NETWORK | NODE_WITNESS)\n \n-        for conn in (self.test_node, self.old_node, self.std_node):\n-            conn.wait_for_verack()\n-\n         assert self.test_node.nServices & NODE_WITNESS != 0\n \n         # Keep a place to store utxo's that can be used in later tests"
      },
      {
        "sha": "52f539b264ba759c7850c97700b934cac7a9f449",
        "filename": "test/functional/p2p_sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_sendheaders.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -242,8 +242,6 @@ def run_test(self):\n         # Make sure NODE_NETWORK is not set for test_node, so no block download\n         # will occur outside of direct fetching\n         test_node = self.nodes[0].add_p2p_connection(BaseNode(), services=NODE_WITNESS)\n-        inv_node.wait_for_verack()\n-        test_node.wait_for_verack()\n \n         # Ensure verack's have been processed by our peer\n         inv_node.sync_with_ping()"
      },
      {
        "sha": "7abd5fab8e416286dea3e518e7d77dd584fa729e",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -40,8 +40,8 @@ def set_test_params(self):\n     def run_test(self):\n         # Setup the p2p connections\n         no_verack_node = self.nodes[0].add_p2p_connection(TestP2PConn())\n-        no_version_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n-        no_send_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False)\n+        no_version_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False, wait_for_verack=False)\n+        no_send_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False, wait_for_verack=False)\n \n         sleep(1)\n "
      },
      {
        "sha": "03a47950cad99e2450438175060e4ddcb238ee06",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -78,8 +78,6 @@ def run_test(self):\n         test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n         # min_work_node connects to node1 (whitelisted)\n         min_work_node = self.nodes[1].add_p2p_connection(P2PInterface())\n-        test_node.wait_for_verack()\n-        min_work_node.wait_for_verack()\n \n         # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n@@ -202,7 +200,6 @@ def run_test(self):\n         self.nodes[1].disconnect_p2ps()\n \n         test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n-        test_node.wait_for_verack()\n \n         test_node.send_message(msg_block(block_h1f))\n \n@@ -287,7 +284,6 @@ def run_test(self):\n \n             self.nodes[0].disconnect_p2ps()\n             test_node = self.nodes[0].add_p2p_connection(P2PInterface())\n-            test_node.wait_for_verack()\n \n         # We should have failed reorg and switched back to 290 (but have block 291)\n         assert_equal(self.nodes[0].getblockcount(), 290)"
      },
      {
        "sha": "cfc9958875177aac219a4efec8ae129337bfb0c4",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -256,12 +256,8 @@ def _test_stopatheight(self):\n \n     def _test_waitforblockheight(self):\n         self.log.info(\"Test waitforblockheight\")\n-\n         node = self.nodes[0]\n-\n-        # Start a P2P connection since we'll need to create some blocks.\n         node.add_p2p_connection(P2PInterface())\n-        node.p2p.wait_for_verack()\n \n         current_height = node.getblock(node.getbestblockhash())['height']\n "
      },
      {
        "sha": "f90f5affc2299fcabab62cfcbb3bc2a8239d5198",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5587fe71ce041dc69cb0d46697975bb51ef1f6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fa5587fe71ce041dc69cb0d46697975bb51ef1f6",
        "patch": "@@ -276,7 +276,7 @@ def node_encrypt_wallet(self, passphrase):\n         self.encryptwallet(passphrase)\n         self.wait_until_stopped()\n \n-    def add_p2p_connection(self, p2p_conn, *args, **kwargs):\n+    def add_p2p_connection(self, p2p_conn, *, wait_for_verack=True, **kwargs):\n         \"\"\"Add a p2p connection to the node.\n \n         This method adds the p2p connection to the self.p2ps list and also\n@@ -286,8 +286,10 @@ def add_p2p_connection(self, p2p_conn, *args, **kwargs):\n         if 'dstaddr' not in kwargs:\n             kwargs['dstaddr'] = '127.0.0.1'\n \n-        p2p_conn.peer_connect(*args, **kwargs)()\n+        p2p_conn.peer_connect(**kwargs)()\n         self.p2ps.append(p2p_conn)\n+        if wait_for_verack:\n+            p2p_conn.wait_for_verack()\n \n         return p2p_conn\n "
      }
    ]
  }
]