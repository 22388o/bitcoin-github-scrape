DrahtBot,2020-10-15 21:03:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21148 (Split orphan handling from net_processing into txorphanage by ajtowns)\n* #21146 ([WIP] validation/coins: limit Me",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-709588627,709588627,
laanwj,2020-10-16 10:01:12,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-709951262,709951262,
jamesob,2020-10-16 16:03:05,Concept ACK - really like the direction of this work.,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-710143583,710143583,
ryanofsky,2020-10-26 16:20:58,"Reproduced ci error locally https://cirrus-ci.com/task/5403931733917696?command=ci#L4078\n\n```sh\ngit checkout 2a05215114f2e4ebf764647af7e48ca1a8cb9ff9\n./autogen.sh\n./configure CXX=clang++ CXXFLAGS=""-fsanitize=address -fno-omit-frame-pointer"" LDFLAGS=-fsanitize=address --enable-debug --enable-werror --disable-ccache\nmake -C src qt/test/test_bitcoin-qt && ASAN_OPTIONS=abort_on_error=1 gdb",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-716660486,716660486,
ryanofsky,2020-10-26 17:01:11,"Following change partially reverting 50f680b402a84b605aa9b9aa58cb571ef32e190e seems to fix the error:\n\n```diff\n--- a/src/qt/test/apptests.cpp\n+++ b/src/qt/test/apptests.cpp\n@@ -84,6 +84,10 @@ void AppTests::appTests()\n     // Reset global state to avoid interfering with later tests.\n     LogInstance().DisconnectTestLogger();\n     AbortShutdown();\n+    {\n+        LOCK(cs_main);",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-716688829,716688829,
practicalswift,2020-10-28 06:59:14,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-717741613,717741613,
troygiorshev,2020-11-04 06:41:18,"Concept ACK, excited for this to be sliced into smaller PRs for deeper review!",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-721542870,721542870,
dongcarl,2020-11-05 19:01:35,Reviewers: Just split off the first few fix commits in a non-draft PR #20323!,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-722576976,722576976,
fjahr,2020-11-07 19:20:16,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-723483988,723483988,
ryanofsky,2020-12-18 14:37:08,"re: https://github.com/bitcoin/bitcoin/pull/20158#issue-504296351\n\n> ### Current split-off PRs ready for review\n> _Last updated Nov 5th, 2020_\n> \n> * [ ]  #20323 | tests: Create or use existing properly initialized NodeContexts\n\n#20323 is now merged, so it would be good to post a followup or rebase this",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-748117563,748117563,
dongcarl,2020-12-18 22:13:00,"Pushed 912512a27c1caa59eb928e10f1022d1b33c2d711 -> abcde917ddec206cd938d6d418094d5db645f740 | Thanks ryanofsky for the reminder!\n\n- Rebased over current master\n- All commits should now compile",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-748344844,748344844,
jnewbery,2020-12-22 17:45:51,@dongcarl are you planning on carving off some more commits into a separate PR? I'd love to help this make some progress.,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-749684574,749684574,
dongcarl,2020-12-22 17:47:07,"@jnewbery Yup, got a bit caught up on other things but will open that first PR today!",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-749685220,749685220,
Sjors,2020-12-30 14:21:52,Concept ACK. Thanks for chopping this into smaller PR's.,https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-752638393,752638393,
jnewbery,2021-02-01 12:16:37,"https://github.com/bitcoin/bitcoin/pull/20749 is merged. I think next up is https://github.com/bitcoin/bitcoin/pull/20750.\n\n@dongcarl - do you mind linking these bundle PRs in the [PR description](https://github.com/bitcoin/bitcoin/pull/20158#issue-504296351) so it's easy to see the project progress at a glance?",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-770814271,770814271,
dongcarl,2021-02-01 16:51:01,"@jnewbery Good point, done!",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-770997518,770997518,
dongcarl,2021-06-16 16:19:42,"Thanks everyone for the reviews, seems like the last bundle is merged. I would like to call attention to #21766, where a few leftover improvements were collated.",https://github.com/bitcoin/bitcoin/pull/20158#issuecomment-862519040,862519040,
ryanofsky,2020-10-22 21:41:48,"In commit ""validation: Move LookupBlockIndex to BlockManager"" (8615dbd1250c2dddec2f54bf80e2a1b7013bc871)\n\nCommit doesn't compile, not sure if this is intended. Could make this a wrapper function until after the scripted diff",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510474839,510474839,src/validation.cpp
ryanofsky,2020-10-22 21:47:14,"In commit ""validation: Move FindForkInGlobalIndex to BlockManager"" (8dbedcb3bf123411ebcd9ccb7521b44cacc8e385)\n\nre: ""Let me know if this should be changed"", this makes sense to me. A possible alternative might be to make this a chain method, too",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510477316,510477316,src/validation.h
ryanofsky,2020-10-22 21:57:57,"In commit ""validation: Move GetSpendHeight to BlockManager"" (05a9e983b421f7728c6cf4c18525abba8a68c82a)\n\nThis isn't changing behavior, but I don't think it's correct to lock cs_main after mempool.cs. Other code locks in the opposite order so there could be a deadlock if cs_main lock is actually acquired here and this isn't a redundant recursive lock. Maybe it is possible to clean this up simply",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510481852,510481852,src/txmempool.cpp
ryanofsky,2020-10-22 22:07:36,"In commit ""validation: Remove global ::ActivateBestChain"" (7e15a2c88e49ec6719997e2cdd8481ddd4e7f6be)\n\nWould seem clearer to say `= nullptr` if that works and you don't prefer this longer version",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510485799,510485799,src/validation.h
ryanofsky,2020-10-22 22:33:40,"In commit ""validation: Remove global ::VersionBitsTip{State,SinceHeight,Statistics}"" (b60c7e5a5a60fe60a3bc8ba540dc7c8d5c935869)\n\nI'm a little unclear why it's safe to drop these locks, or why they were here to begin with, or if VersionBits or ChainActive or Tip functions should have been annotated to require cs_main. It seems like something should have be annotated if cs_main was required here",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510495615,510495615,src/validation.cpp
ryanofsky,2020-10-23 21:24:51,"In commit ""validation: Pass in spendheight to CTxMemPool::check"" (0af807545a93891df691acb43e07fd465c996ecd)\n\n~This is fine, but not sure if it was intentional to keep this TODO comment here, but not in the other asserts~\n\nEDIT: Apparently this is done to help the 09a153e13506d6352e478256ce4220232455000f scripted-diff, and the other asserts treat `addressof` as the TODO",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511162039,511162039,src/txmempool.cpp
ryanofsky,2020-10-23 21:34:02,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r510481852\n\n> In commit ""validation: Move GetSpendHeight to BlockManager"" ([05a9e98](https://github.com/bitcoin/bitcoin/commit/05a9e983b421f7728c6cf4c18525abba8a68c82a))\n> \n> This isn't changing behavior, but I don't think it's correct to lock cs_main after mempool.cs. Other code locks in the opposite order so there could be a de",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511165117,511165117,src/txmempool.cpp
ryanofsky,2020-10-23 21:50:51,"In commit ""miner: Add chainstate member to BlockAssembler"" (9d74aa3fd30810197d24ec0768f3e28467abe114)\n\nThis appears to be safe because cs_main is held the entire time a BlockAssembler object is constructed is used `cs_main` is held, but because unlike m_mempool, m_active_chainstate will be able to change at runtime with utxo snapshot loading, it might be safer to just pass CChainState as a reg",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511170968,511170968,src/miner.h
ryanofsky,2020-10-23 21:58:45,"In commit ""miner: Pass in blockman to ::RegenerateCommitments"" (a1acd859bd06ead8fb38fac2d10340a658d7a061)\n\n\nIf this lock is needed now can RegenerateCommitments be annotated to require cs_main? Also, why is this lock needed now if it wasn't needed before?",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511173525,511173525,src/rpc/mining.cpp
ryanofsky,2020-10-23 22:03:12,"In commit ""node/coinstats: Pass in CChainState to GetUTXOStats"" (a9e77bb0a70a473aab0a52e0d411af8f692ab700)\n\nFrom the commit description ""ATTENTION"" this may be a work in progress, but a suggestion here might be to just pass in CCoinsView and blockman as separate arguments, instead of passing the whole chain state class.",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511174948,511174948,src/node/coinstats.cpp
ryanofsky,2020-10-23 22:09:43,"In commit ""net_processing: Move some static functions to PeerManager"" (053c84ce5a99f0ef87fe23164dc11a0eac725680)\n\nMight be nice to split this commit, and move the function bodies in a MOVEONLY commit. But this is maybe less important than it used to be now that git diff displays moved code better than it used to",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r511176771,511176771,src/net_processing.cpp
jnewbery,2020-10-28 12:12:32,I think this should be changed to `reset()` like the other unique pointers.,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r513393711,513393711,src/init.cpp
jnewbery,2020-10-28 12:37:52,"This is only used in validation_chainstatemanager_tests.cpp. Rather than adding complexity to the common setup for all tests, can you define this struct inside validation_chainstatemanager_tests.cpp and leave setup_common unchanged?",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r513408032,513408032,src/test/util/setup_common.h
ariard,2020-11-03 18:22:19,"What would be the utility of finding a fork against a chain which isn't the current active one ? May we have a future module interested in learning the common ancestor between a discovered locator and a chain known to not-be the best one ? \n\nE.g, in `src/net_processing`, at `NetMsgType::GETBLOCKS` reception, this common ancestor is used at a starting point to send the rest of the chain to the ",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r516869430,516869430,src/validation.h
ariard,2020-11-03 18:32:55,"I think interpretation of this comment can be confusing.\n\nIt does say ""one more than the inputs.GetBestBlock()"" where GetBestBlock is defined as ""Get best block at the time this cursor was created"" (L173, in `src/coins.h`). If `GetSpendHeight` means the spend height of a utxo, you may have between ""one to infinite numbers of blocks"" between utxo creation height and its spending height.\n\nBu",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r516875108,516875108,src/validation.h
ariard,2020-11-03 18:45:56,"Should you introduce a `AssertLockHeld(cs_main)` here to demonstrate the lock tacking is still enforced ? Some moved function (`FindForkInGlobalIndex`) already have such one.\n\nMore generally, I think you PR description could talk about what the actual lock model of this subsystem and how do you convey to reviewers that old code lock model is equivalent to the new one (or not if you've changed ",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r516882150,516882150,src/validation.cpp
ariard,2020-11-03 18:55:51,This comment can be improved by specifying how `m_blockman` is used by `CChainState` thus documenting the rational of its presence.,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r516887573,516887573,src/validation.h
dongcarl,2020-11-04 18:53:42,"The reason why I thought it'd be okay to lock `cs_main` after `mempool.cs` was because that's basically what's happening in GetSpendHeight prior to this changeset. As in:\n\n1. We lock `mempool.cs` at the start of `CTxMemPool::check`\n2. We call `GetSpendHeight`, which locks `cs_main`\n\nAre you saying that this was wrong all along?",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517561522,517561522,src/txmempool.cpp
dongcarl,2020-11-04 19:19:05,"Digging in the git history a bit, it seems that the earliest of this trio -- namely `VersionBitsTipState` -- was introduced in d23f6c6a0d2. My hypothesis is that the `LOCK(cs_main)` was added in order to stop the chain from advancing and make sure that the caller got info on the actual tip. However, it seems like a `AssertLockHeld(cs_main);` annotation would have been much more suitable in that ca",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517575732,517575732,src/validation.cpp
dongcarl,2020-11-04 19:19:14,Fixed!,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517575818,517575818,src/validation.h
dongcarl,2020-11-04 19:20:06,Done!,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517576337,517576337,src/validation.cpp
ariard,2020-11-06 00:45:22,"This comment still holds on `CChainState::ActivateBestChain`. But I wonder if it shouldn't be changed to a ""Must not be called with cs_main held` given we assert that lock isn't held L2878 (`src/validation.cpp`).",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r518457319,518457319,src/validation.h
ariard,2020-11-06 00:53:59,"I think this commit message should say something like ""Use accessible chainstate in ChainstateManager::ProcessNewBlock""",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r518459897,518459897,src/validation.cpp
ariard,2020-11-06 01:07:53,This commit doesn't compile as `CheckFinalTx` is used L197  (`src/interfaces/chain.cpp`). But fixed in next commit AFAICT.,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r518464000,518464000,src/validation.h
ariard,2020-11-08 01:11:40,Maybe add a friendly comment in commit about the fact that `versionbitscache` is currently a global and thus the stays the same. Though we can't assert it ?,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r519241551,519241551,src/rpc/blockchain.cpp
ariard,2020-11-08 01:12:55,At least add a comment about the fact the `cs_main` lock is already taken in this code path L1317 (`src/rpc/blockchain.cpp`) ?,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r519241638,519241638,src/validation.cpp
ariard,2020-11-08 01:19:56,"I don't follow what you mean by commit message ""This is the only instance where validation reaches for something outside of it"", you mean the mempool accessing `spendheight` ?",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r519242130,519242130,src/net_processing.cpp
ariard,2020-11-08 01:39:26,"Can we pass directly the result of `LookupBlockIndex(block.hashPrevBlock)` ? Block is already known here. Because AFAIU, the lock isn't held once `RegenerateCommitment` argument are loaded on the stack thus do you have guarantee you're calling the new `blockman.LookupBlockIndex()` with a lock ?\n\nI think so otherwise `LookupBlockIndex`'s lock annotation would yelled but I can't convince myself ",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r519243530,519243530,src/test/util/setup_common.cpp
ariard,2020-11-08 01:43:00,Maybe drag comments here ? Can't remember the style policy on this.,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r519243818,519243818,src/net_processing.h
ryanofsky,2020-11-10 15:14:02,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517561522\n\nIn commit ""validation: Move GetSpendHeight to BlockManager"" (f2fded4d0d938eec936076a65bfab6932b73fb50)\n\n> The reason why I thought it'd be okay to lock `cs_main` after `mempool.cs` was because that's basically what's happening in GetSpendHeight prior to this changeset. As in:\n> \n> 1. We lock `mempool.cs` at the st",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520639845,520639845,src/txmempool.cpp
ryanofsky,2020-11-10 15:25:08,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r516875108\n\n> I think interpretation of this comment can be confusing.\n\nComment is not new, just moved.\n\n> It does say ""one more than the inputs.GetBestBlock()"" where GetBestBlock is defined as ""Get best block at the time this cursor was created"" (L173, in `src/coins.h`). If `GetSpendHeight` means the spend height of a utxo, ",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520648610,520648610,src/validation.h
ryanofsky,2020-11-10 15:38:33,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r517575732\n\nIn commit ""validation: Remove global ::VersionBitsTip{State,SinceHeight,Statistics}"" (ff894f9f710118a13b51f2496e1261c795844840)\n\n> Digging in the git history a bit, it seems that the earliest of this trio -- namely VersionBitsTipState -- was introduced in d23f6c6.\n\nThanks for checking! I see `EXCLUSIVE_LOCKS_REQUI",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520659343,520659343,src/validation.cpp
ryanofsky,2020-11-10 16:27:27,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r518464000\n\n> This commit doesn't compile as `CheckFinalTx` is used L197 (`src/interfaces/chain.cpp`). But fixed in next commit AFAICT.\n\nI'm seeing this problem in commit ""validation: Pass in chain tip to ::CheckFinalTx"" (5433a716e7f871204474117b0f9bdcd6ad8a16ce)\n",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520697255,520697255,src/validation.h
ryanofsky,2020-11-10 16:36:48,"In commit ""validation: Pass in chainstate to ::AcceptToMemoryPool"" (f75c7ca1cb46eb5824c3c5db666143f9a74c0eda)\n\nThis commit also doesn't compile, looks like there are calls in net_processing to update",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r520704172,520704172,src/validation.h
dongcarl,2020-11-17 20:38:33,"Don't think we need to add that bit, I think the rationale is more clearly explained by: https://github.com/bitcoin/bitcoin/blob/912512a27c1caa59eb928e10f1022d1b33c2d711/src/validation.cpp#L2867-L2871",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r525509078,525509078,src/validation.h
dongcarl,2020-11-17 21:02:31,"I mean that in the codepath I'm touching, `CChainState::ActivateBestChainStep` (which resides in `validation.cpp`) is calling (reaching for) `CTXMemPool::Check` (which resides in `txmempool.cpp`), which means that I need to resolve `CTXMemPool::Check`'s reference of `g_chainman` first.",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r525522402,525522402,src/net_processing.cpp
dongcarl,2020-11-17 21:28:37,"Right, this is a shitty situation where the lock in this diff is only needed because:\nhttps://github.com/bitcoin/bitcoin/blob/831675c8dccfa6525ffe751da3cc60709c380953/src/validation.h#L944\nand\nhttps://github.com/bitcoin/bitcoin/blob/831675c8dccfa6525ffe751da3cc60709c380953/src/validation.h#L840\n\nThen the lock is released as `RegenerateCommitments`'s assembly function prologue is run, and",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r525536197,525536197,src/test/util/setup_common.cpp
dongcarl,2020-12-18 22:24:00,"@ariard @ryanofsky would it be preferable to add a `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` annotation to `VersionBitsTip{State,SinceHeight,Statistics}` here just in case they get new callers in the future?",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r546119285,546119285,src/validation.cpp
ryanofsky,2020-12-22 13:38:18,"re: https://github.com/bitcoin/bitcoin/pull/20158#discussion_r546119285\n\nIn commit ""validation: Remove global ::VersionBitsTip{State,SinceHeight,Statistics}"" (6ed743d86fb1b5466076eaacf1e8ebc830abde62)\n\n> @ariard @ryanofsky would it be preferable to add a `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` annotation to `VersionBitsTip{State,SinceHeight,Statistics}` here just in case they get new callers i",https://github.com/bitcoin/bitcoin/pull/20158#discussion_r547282238,547282238,src/validation.cpp
dongcarl,2021-02-01 16:52:33,Resolved by: https://github.com/bitcoin/bitcoin/pull/20972,https://github.com/bitcoin/bitcoin/pull/20158#discussion_r567979676,567979676,src/txmempool.cpp
