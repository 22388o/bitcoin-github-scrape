[
  {
    "sha": "333d823afda17342a2c3ca57b34b885e7051d2be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzNkODIzYWZkYTE3MzQyYTJjM2NhNTdiMzRiODg1ZTcwNTFkMmJl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:35:38Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:33:27Z"
      },
      "message": "validation: Pass in chainstate to ::LimitMempoolSize",
      "tree": {
        "sha": "4dbcedc0849b1c65cd957c067039a3d3635ea2f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dbcedc0849b1c65cd957c067039a3d3635ea2f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/333d823afda17342a2c3ca57b34b885e7051d2be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333d823afda17342a2c3ca57b34b885e7051d2be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/333d823afda17342a2c3ca57b34b885e7051d2be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333d823afda17342a2c3ca57b34b885e7051d2be/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f72d80b07af8ecbb2f9df1e87344eb465186f19d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f72d80b07af8ecbb2f9df1e87344eb465186f19d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "990b0c363668737f4da3c2bf36ff030ddd3e3f59",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/333d823afda17342a2c3ca57b34b885e7051d2be/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/333d823afda17342a2c3ca57b34b885e7051d2be/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=333d823afda17342a2c3ca57b34b885e7051d2be",
        "patch": "@@ -327,7 +327,7 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n // Returns the script flags which should be checked for a given block\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& chainparams);\n \n-static void LimitMempoolSize(CTxMemPool& pool, size_t limit, std::chrono::seconds age)\n+static void LimitMempoolSize(CTxMemPool& pool, CChainState& chainstate, size_t limit, std::chrono::seconds age)\n     EXCLUSIVE_LOCKS_REQUIRED(pool.cs, ::cs_main)\n {\n     int expired = pool.Expire(GetTime<std::chrono::seconds>() - age);\n@@ -337,8 +337,9 @@ static void LimitMempoolSize(CTxMemPool& pool, size_t limit, std::chrono::second\n \n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     for (const COutPoint& removed : vNoSpendsRemaining)\n-        ::ChainstateActive().CoinsTip().Uncache(removed);\n+        chainstate.CoinsTip().Uncache(removed);\n }\n \n static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -403,7 +404,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     // We also need to remove any now-immature transactions\n     mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(mempool, ::ChainstateActive(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -1024,7 +1025,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, ::ChainstateActive(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }"
      }
    ]
  },
  {
    "sha": "7f51417327a4c5ab890608b347b3fe47fff5801e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjUxNDE3MzI3YTRjNWFiODkwNjA4YjM0N2IzZmU0N2ZmZjU4MDFl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:36:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:33:27Z"
      },
      "message": "validation: Pass in chainstate to IsCurrentForFeeEstimation",
      "tree": {
        "sha": "539352b819f76f689f46a061c68912cd7bcbbcb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/539352b819f76f689f46a061c68912cd7bcbbcb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f51417327a4c5ab890608b347b3fe47fff5801e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f51417327a4c5ab890608b347b3fe47fff5801e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f51417327a4c5ab890608b347b3fe47fff5801e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f51417327a4c5ab890608b347b3fe47fff5801e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "333d823afda17342a2c3ca57b34b885e7051d2be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/333d823afda17342a2c3ca57b34b885e7051d2be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/333d823afda17342a2c3ca57b34b885e7051d2be"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "00a8b8cf48607114d3f796f69f233d0f58ab6eaa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f51417327a4c5ab890608b347b3fe47fff5801e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f51417327a4c5ab890608b347b3fe47fff5801e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7f51417327a4c5ab890608b347b3fe47fff5801e",
        "patch": "@@ -342,14 +342,15 @@ static void LimitMempoolSize(CTxMemPool& pool, CChainState& chainstate, size_t l\n         chainstate.CoinsTip().Uncache(removed);\n }\n \n-static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool IsCurrentForFeeEstimation(CChainState& chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n-    if (::ChainstateActive().IsInitialBlockDownload())\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+    if (chainstate.IsInitialBlockDownload())\n         return false;\n-    if (::ChainActive().Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n+    if (chainstate.m_chain.Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n         return false;\n-    if (::ChainActive().Height() < pindexBestHeader->nHeight - 1)\n+    if (chainstate.m_chain.Height() < pindexBestHeader->nHeight - 1)\n         return false;\n     return true;\n }\n@@ -1018,7 +1019,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(::ChainstateActive()) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);"
      }
    ]
  },
  {
    "sha": "e83c8538ec022fa29bed2894471cdee8a974f66f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODNjODUzOGVjMDIyZmEyOWJlZDI4OTQ0NzFjZGVlOGE5NzRmNjZm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:42:01Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:33:27Z"
      },
      "message": "validation: Pass in chainstate to CheckInputsFromMempoolAndCache",
      "tree": {
        "sha": "436ba1f232a9b9b56654991818a3694b9265c3a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/436ba1f232a9b9b56654991818a3694b9265c3a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e83c8538ec022fa29bed2894471cdee8a974f66f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83c8538ec022fa29bed2894471cdee8a974f66f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e83c8538ec022fa29bed2894471cdee8a974f66f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83c8538ec022fa29bed2894471cdee8a974f66f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f51417327a4c5ab890608b347b3fe47fff5801e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f51417327a4c5ab890608b347b3fe47fff5801e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f51417327a4c5ab890608b347b3fe47fff5801e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0f053e1e163d177de8306ff2d186cfe49f24c8fd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e83c8538ec022fa29bed2894471cdee8a974f66f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e83c8538ec022fa29bed2894471cdee8a974f66f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e83c8538ec022fa29bed2894471cdee8a974f66f",
        "patch": "@@ -415,7 +415,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n * */\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationState& state,\n                 const CCoinsViewCache& view, const CTxMemPool& pool,\n-                unsigned int flags, PrecomputedTransactionData& txdata)\n+                unsigned int flags, PrecomputedTransactionData& txdata, CChainState& chainstate)\n                 EXCLUSIVE_LOCKS_REQUIRED(cs_main, pool.cs)\n {\n     AssertLockHeld(cs_main);\n@@ -440,7 +440,8 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n             assert(txFrom->vout.size() > txin.prevout.n);\n             assert(txFrom->vout[txin.prevout.n] == coin.out);\n         } else {\n-            const Coin& coinFromUTXOSet = ::ChainstateActive().CoinsTip().AccessCoin(txin.prevout);\n+            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+            const Coin& coinFromUTXOSet = chainstate.CoinsTip().AccessCoin(txin.prevout);\n             assert(!coinFromUTXOSet.IsSpent());\n             assert(coinFromUTXOSet.out == coin.out);\n         }\n@@ -978,7 +979,7 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, P\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n     unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata)) {\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, ::ChainstateActive())) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n     }"
      }
    ]
  },
  {
    "sha": "e5198eff4b80d0d39d1cd9b3da317b25026c436d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTE5OGVmZjRiODBkMGQzOWQxY2Q5YjNkYTMxN2IyNTAyNmM0MzZk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:17:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:43:14Z"
      },
      "message": "validation: Pass in chain tip to ::CheckFinalTx",
      "tree": {
        "sha": "8370d0750f541e04c6e5fa130d40875812113048",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8370d0750f541e04c6e5fa130d40875812113048"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5198eff4b80d0d39d1cd9b3da317b25026c436d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5198eff4b80d0d39d1cd9b3da317b25026c436d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5198eff4b80d0d39d1cd9b3da317b25026c436d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5198eff4b80d0d39d1cd9b3da317b25026c436d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e83c8538ec022fa29bed2894471cdee8a974f66f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e83c8538ec022fa29bed2894471cdee8a974f66f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e83c8538ec022fa29bed2894471cdee8a974f66f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "05c188a10fb22c5f009c4bc2caec56b8f176ae3a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5198eff4b80d0d39d1cd9b3da317b25026c436d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5198eff4b80d0d39d1cd9b3da317b25026c436d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e5198eff4b80d0d39d1cd9b3da317b25026c436d",
        "patch": "@@ -203,8 +203,14 @@ static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n bool CheckFinalTx(const CTransaction &tx, int flags)\n+{\n+    return CheckFinalTx(::ChainActive().Tip(), tx, flags);\n+}\n+\n+bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n+    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*active_chain_tip));\n \n     // By convention a negative value for flags indicates that the\n     // current network-enforced consensus rules should be used. In\n@@ -220,15 +226,15 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // evaluated is what is used. Thus if we want to know if a\n     // transaction can be part of the *next* block, we need to call\n     // IsFinalTx() with one more than ::ChainActive().Height().\n-    const int nBlockHeight = ::ChainActive().Height() + 1;\n+    const int nBlockHeight = active_chain_tip->nHeight + 1;\n \n     // BIP113 requires that time-locked transactions have nLockTime set to\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n     // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n     const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? ::ChainActive().Tip()->GetMedianTimePast()\n+                             ? active_chain_tip->GetMedianTimePast()\n                              : GetAdjustedTime();\n \n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n@@ -599,7 +605,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(::ChainActive().Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?"
      },
      {
        "sha": "e44bdfa7464ea55ca728c800cd869bfb47d69922",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5198eff4b80d0d39d1cd9b3da317b25026c436d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5198eff4b80d0d39d1cd9b3da317b25026c436d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e5198eff4b80d0d39d1cd9b3da317b25026c436d",
        "patch": "@@ -211,6 +211,7 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  * See consensus/consensus.h for flag definitions.\n  */\n bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain"
      }
    ]
  },
  {
    "sha": "6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTBmNGFlMmFjNWUxYjk3MjNmMjc0ZDIwNmVmZTU5YTRlMTAzMzEz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:25:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:43:19Z"
      },
      "message": "scripted-diff: Invoke ::CheckFinalTx with chain tip\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='\\bCheckFinalTx\\(' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E 's@'\"$find_regex\"'@\\0::ChainActive().Tip(), @g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "86119e59ffaa4a6863f1fe5bbd16e8e3e7b7b31a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86119e59ffaa4a6863f1fe5bbd16e8e3e7b7b31a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5198eff4b80d0d39d1cd9b3da317b25026c436d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5198eff4b80d0d39d1cd9b3da317b25026c436d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5198eff4b80d0d39d1cd9b3da317b25026c436d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ec976fe9bfa9e048897b04d2eee364c23e808e02",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
        "patch": "@@ -441,7 +441,7 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        return CheckFinalTx(tx);\n+        return CheckFinalTx(::ChainActive().Tip(), tx);\n     }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {"
      },
      {
        "sha": "81bfee23beddb8665833c0a99c668d701d13e481",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
        "patch": "@@ -435,7 +435,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n@@ -445,7 +445,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -461,7 +461,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = ::ChainActive().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n@@ -472,7 +472,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n@@ -481,7 +481,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = ::ChainActive().Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail"
      },
      {
        "sha": "7b9014e18c8186a798d5c707e079dd2a6c12d0b3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e0f4ae2ac5e1b9723f274d206efe59a4e103313/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
        "patch": "@@ -508,7 +508,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n-        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n+        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      }
    ]
  },
  {
    "sha": "3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDA0YWMwZjFmODZlN2NkNjY5OWVmZmQ1OWZkNzhmODU4NzBiNWEz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T20:27:35Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:32Z"
      },
      "message": "validation: Remove old CheckFinalTx w/o chain tip param",
      "tree": {
        "sha": "4b083529a2e52778a39d937a22d7ee45dfb2a738",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b083529a2e52778a39d937a22d7ee45dfb2a738"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404ac0f1f86e7cd6699effd59fd78f85870b5a3/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e0f4ae2ac5e1b9723f274d206efe59a4e103313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e0f4ae2ac5e1b9723f274d206efe59a4e103313"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a15f36084766629bf21008ef5797dbfee29e11f9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3404ac0f1f86e7cd6699effd59fd78f85870b5a3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3404ac0f1f86e7cd6699effd59fd78f85870b5a3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
        "patch": "@@ -202,11 +202,6 @@ static FILE* OpenUndoFile(const FlatFilePos &pos, bool fReadOnly = false);\n static FlatFileSeq BlockFileSeq();\n static FlatFileSeq UndoFileSeq();\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n-{\n-    return CheckFinalTx(::ChainActive().Tip(), tx, flags);\n-}\n-\n bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "683838ccec01b907afe50581a7673e606bffdc59",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3404ac0f1f86e7cd6699effd59fd78f85870b5a3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3404ac0f1f86e7cd6699effd59fd78f85870b5a3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
        "patch": "@@ -210,7 +210,6 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**"
      }
    ]
  },
  {
    "sha": "76e0811629cfe94a19a2ee52aff51bcba073b55c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmUwODExNjI5Y2ZlOTRhMTlhMmVlNTJhZmY1MWJjYmEwNzNiNTVj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:29:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to ::CheckSequenceLocks",
      "tree": {
        "sha": "128847ffad4f3562a26397c2168b760b05f80b5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/128847ffad4f3562a26397c2168b760b05f80b5c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76e0811629cfe94a19a2ee52aff51bcba073b55c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76e0811629cfe94a19a2ee52aff51bcba073b55c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76e0811629cfe94a19a2ee52aff51bcba073b55c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76e0811629cfe94a19a2ee52aff51bcba073b55c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3404ac0f1f86e7cd6699effd59fd78f85870b5a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3404ac0f1f86e7cd6699effd59fd78f85870b5a3"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 11,
      "deletions": 10
    },
    "files": [
      {
        "sha": "9f276cb208e2375386ffbca80605738c32e98ab9",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "patch": "@@ -28,7 +28,7 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(*m_node.mempool, tx, flags);\n+        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n };"
      },
      {
        "sha": "30a48ae00176b5a64f7b8261445bf6d197ddf17b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "patch": "@@ -508,7 +508,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n-        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n+        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      },
      {
        "sha": "2c8f109fc85ce8498dd75e311ae8e643e84d4ff7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "patch": "@@ -253,22 +253,23 @@ bool TestLockPointValidity(const LockPoints* lp)\n     return true;\n }\n \n-bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n+bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp, bool useExistingLockPoints)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(pool.cs);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n \n-    CBlockIndex* tip = ::ChainActive().Tip();\n+    CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     assert(tip != nullptr);\n \n     CBlockIndex index;\n     index.pprev = tip;\n-    // CheckSequenceLocks() uses ::ChainActive().Height()+1 to evaluate\n+    // CheckSequenceLocks() uses active_chainstate.m_chain.Height()+1 to evaluate\n     // height based locks because when SequenceLocks() is called within\n     // ConnectBlock(), the height of the block *being*\n     // evaluated is what is used.\n     // Thus if we want to know if a transaction can be part of the\n-    // *next* block, we need to use one more than ::ChainActive().Height()\n+    // *next* block, we need to use one more than active_chainstate.m_chain.Height()\n     index.nHeight = tip->nHeight + 1;\n \n     std::pair<int, int64_t> lockPair;\n@@ -278,8 +279,8 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n         lockPair.second = lp->time;\n     }\n     else {\n-        // CoinsTip() contains the UTXO set for ::ChainActive().Tip()\n-        CCoinsViewMemPool viewMemPool(&::ChainstateActive().CoinsTip(), pool);\n+        // CoinsTip() contains the UTXO set for active_chainstate.m_chain.Tip()\n+        CCoinsViewMemPool viewMemPool(&active_chainstate.CoinsTip(), pool);\n         std::vector<int> prevheights;\n         prevheights.resize(tx.vin.size());\n         for (size_t txinIndex = 0; txinIndex < tx.vin.size(); txinIndex++) {\n@@ -684,7 +685,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // be mined yet.\n     // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n     // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    if (!CheckSequenceLocks(::ChainstateActive(), m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     CAmount nFees = 0;"
      },
      {
        "sha": "925910b28c9cf689c773c569166c3e0a424ab99d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76e0811629cfe94a19a2ee52aff51bcba073b55c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "patch": "@@ -228,7 +228,7 @@ bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_mai\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n+bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, pool.cs);\n \n /**\n  * Closure representing one script verification"
      }
    ]
  },
  {
    "sha": "dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDdlOTg5YjBhNGFkNjk0OWNjYjcwZDEzNDA1ZjdhZjNmMDViNzI0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:53:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Add chainstate member to MemPoolAccept",
      "tree": {
        "sha": "c281344e053ecc8c862215128d91b167af468399",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c281344e053ecc8c862215128d91b167af468399"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e989b0a4ad6949ccb70d13405f7af3f05b724/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76e0811629cfe94a19a2ee52aff51bcba073b55c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76e0811629cfe94a19a2ee52aff51bcba073b55c"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "520b8b39a4a99195a45f61c72e8626955b73bf46",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd7e989b0a4ad6949ccb70d13405f7af3f05b724/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd7e989b0a4ad6949ccb70d13405f7af3f05b724/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
        "patch": "@@ -458,11 +458,13 @@ namespace {\n class MemPoolAccept\n {\n public:\n-    explicit MemPoolAccept(CTxMemPool& mempool) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&::ChainstateActive().CoinsTip(), m_pool),\n+    explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n         m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n-        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {}\n+        m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n+    }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n     // around easier.\n@@ -547,6 +549,8 @@ class MemPoolAccept\n     CCoinsViewMemPool m_viewmempool;\n     CCoinsView m_dummy;\n \n+    CChainState& m_active_chainstate;\n+\n     // The package limits in effect at the time of invocation.\n     const size_t m_limit_ancestors;\n     const size_t m_limit_ancestor_size;\n@@ -601,7 +605,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(::ChainActive().Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(m_active_chainstate.m_chain.Tip(), tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -649,7 +653,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     LockPoints lp;\n     m_view.SetBackend(m_viewmempool);\n \n-    const CCoinsViewCache& coins_cache = ::ChainstateActive().CoinsTip();\n+    const CCoinsViewCache& coins_cache = m_active_chainstate.CoinsTip();\n     // do all inputs exist?\n     for (const CTxIn& txin : tx.vin) {\n         if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n@@ -685,11 +689,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // be mined yet.\n     // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n     // CoinsViewCache instead of create its own\n-    if (!CheckSequenceLocks(::ChainstateActive(), m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+    if (!CheckSequenceLocks(m_active_chainstate, m_pool, tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n         return state.Invalid(TxValidationResult::TX_PREMATURE_SPEND, \"non-BIP68-final\");\n \n     CAmount nFees = 0;\n-    if (!Consensus::CheckTxInputs(tx, state, m_view, g_chainman.m_blockman.GetSpendHeight(m_view), nFees)) {\n+    if (!Consensus::CheckTxInputs(tx, state, m_view, m_active_chainstate.m_blockman.GetSpendHeight(m_view), nFees)) {\n         return false; // state filled in by CheckTxInputs\n     }\n \n@@ -700,7 +704,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Check for non-standard pay-to-script-hash in inputs\n     const auto& params = args.m_chainparams.GetConsensus();\n-    auto taproot_state = VersionBitsState(::ChainActive().Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n+    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n     if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n@@ -726,7 +730,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         }\n     }\n \n-    entry.reset(new CTxMemPoolEntry(ptx, nFees, nAcceptTime, ::ChainActive().Height(),\n+    entry.reset(new CTxMemPoolEntry(ptx, nFees, nAcceptTime, m_active_chainstate.m_chain.Height(),\n             fSpendsCoinbase, nSigOpsCost, lp));\n     unsigned int nSize = entry->GetTxSize();\n \n@@ -980,8 +984,8 @@ bool MemPoolAccept::ConsensusScriptChecks(ATMPArgs& args, const Workspace& ws, P\n     // There is a similar check in CreateNewBlock() to prevent creating\n     // invalid blocks (using TestBlockValidity), however allowing such\n     // transactions into the mempool can be exploited as a DoS attack.\n-    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(::ChainActive().Tip(), chainparams.GetConsensus());\n-    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, ::ChainstateActive())) {\n+    unsigned int currentBlockScriptVerifyFlags = GetBlockScriptFlags(m_active_chainstate.m_chain.Tip(), chainparams.GetConsensus());\n+    if (!CheckInputsFromMempoolAndCache(tx, state, m_view, m_pool, currentBlockScriptVerifyFlags, txdata, m_active_chainstate)) {\n         return error(\"%s: BUG! PLEASE REPORT THIS! CheckInputScripts failed against latest-block but not STANDARD flags %s, %s\",\n                 __func__, hash.ToString(), state.ToString());\n     }\n@@ -1022,14 +1026,14 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     // - it's not being re-added during a reorg which bypasses typical mempool fee limits\n     // - the node is not behind\n     // - the transaction is not dependent on any other transactions in the mempool\n-    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(::ChainstateActive()) && m_pool.HasNoInputsOf(tx);\n+    bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation(m_active_chainstate) && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n     m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {\n-        LimitMempoolSize(m_pool, ::ChainstateActive(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+        LimitMempoolSize(m_pool, m_active_chainstate, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n         if (!m_pool.exists(hash))\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"mempool full\");\n     }\n@@ -1074,7 +1078,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n+    bool res = MemPoolAccept(pool, ::ChainstateActive()).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of"
      }
    ]
  },
  {
    "sha": "7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDkwY2Y5MDBhMzdjMGZhZWE1YjFmM2E2MGFmYjBiZDA5NmRhNTdi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:08:41Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to AcceptToMemoryPoolWithTime",
      "tree": {
        "sha": "77d5ef7912a9d6d3525d42709b79e8359a8d6aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d5ef7912a9d6d3525d42709b79e8359a8d6aa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d90cf900a37c0faea5b1f3a60afb0bd096da57b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd7e989b0a4ad6949ccb70d13405f7af3f05b724",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd7e989b0a4ad6949ccb70d13405f7af3f05b724"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2b03aa5b29da26cd9cfd5b95c3c1acfbda405d65",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d90cf900a37c0faea5b1f3a60afb0bd096da57b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d90cf900a37c0faea5b1f3a60afb0bd096da57b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
        "patch": "@@ -1072,25 +1072,26 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n } // anon namespace\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n+static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CChainState& active_chainstate, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    bool res = MemPoolAccept(pool, ::ChainstateActive()).AcceptSingleTransaction(tx, args);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    bool res = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n         // this is to prevent memory DoS in case we receive a large number of\n         // invalid transactions that attempt to overrun the in-memory coins cache\n         // (`CCoinsViewCache::cacheCoins`).\n \n         for (const COutPoint& hashTx : coins_to_uncache)\n-            ::ChainstateActive().CoinsTip().Uncache(hashTx);\n+            active_chainstate.CoinsTip().Uncache(hashTx);\n     }\n     // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n-    ::ChainstateActive().FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n+    active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n     return res;\n }\n \n@@ -1099,7 +1100,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTrans\n                         bool bypass_limits, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)\n@@ -5041,7 +5042,7 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, nTime,\n+                AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), state, tx, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {"
      }
    ]
  },
  {
    "sha": "cffd76a750c7f91aac9a367ddbef9944de40cf0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmZkNzZhNzUwYzdmOTFhYWM5YTM2N2RkYmVmOTk0NGRlNDBjZjBj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T20:18:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to ::LoadMempool",
      "tree": {
        "sha": "ed1dc398fcbf9592c32926f28a90ffd822b80d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1dc398fcbf9592c32926f28a90ffd822b80d93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cffd76a750c7f91aac9a367ddbef9944de40cf0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffd76a750c7f91aac9a367ddbef9944de40cf0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cffd76a750c7f91aac9a367ddbef9944de40cf0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffd76a750c7f91aac9a367ddbef9944de40cf0c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d90cf900a37c0faea5b1f3a60afb0bd096da57b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d90cf900a37c0faea5b1f3a60afb0bd096da57b"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e556fbd721d1d1073287880a3b3baa50a71c31d6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffd76a750c7f91aac9a367ddbef9944de40cf0c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffd76a750c7f91aac9a367ddbef9944de40cf0c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=cffd76a750c7f91aac9a367ddbef9944de40cf0c",
        "patch": "@@ -4171,7 +4171,7 @@ bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& ch\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool);\n+        ::LoadMempool(m_mempool, ::ChainstateActive());\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n }\n@@ -5001,7 +5001,7 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool(CTxMemPool& pool)\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n@@ -5042,7 +5042,8 @@ bool LoadMempool(CTxMemPool& pool)\n             TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), state, tx, nTime,\n+                assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+                AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, state, tx, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {"
      },
      {
        "sha": "e213f6253985ef11f0984dfae4cf8c1f9cb8b869",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cffd76a750c7f91aac9a367ddbef9944de40cf0c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cffd76a750c7f91aac9a367ddbef9944de40cf0c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=cffd76a750c7f91aac9a367ddbef9944de40cf0c",
        "patch": "@@ -970,7 +970,7 @@ CBlockFileInfo* GetBlockFileInfo(size_t n);\n bool DumpMempool(const CTxMemPool& pool);\n \n /** Load the mempool from disk. */\n-bool LoadMempool(CTxMemPool& pool);\n+bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate);\n \n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)"
      }
    ]
  },
  {
    "sha": "314c92bef1cd376f7e470238364a1c5282ac2cef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTRjOTJiZWYxY2QzNzZmN2U0NzAyMzgzNjRhMWM1MjgyYWMyY2Vm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:00:04Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to ::AcceptToMemoryPool",
      "tree": {
        "sha": "7c6720a57099b5fdbc3403de83b95f5a83eed5c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c6720a57099b5fdbc3403de83b95f5a83eed5c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/314c92bef1cd376f7e470238364a1c5282ac2cef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314c92bef1cd376f7e470238364a1c5282ac2cef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/314c92bef1cd376f7e470238364a1c5282ac2cef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314c92bef1cd376f7e470238364a1c5282ac2cef/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cffd76a750c7f91aac9a367ddbef9944de40cf0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cffd76a750c7f91aac9a367ddbef9944de40cf0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cffd76a750c7f91aac9a367ddbef9944de40cf0c"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c6307dbbd5e579ddab3913e8eee9afcd24869315",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314c92bef1cd376f7e470238364a1c5282ac2cef/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314c92bef1cd376f7e470238364a1c5282ac2cef/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=314c92bef1cd376f7e470238364a1c5282ac2cef",
        "patch": "@@ -386,7 +386,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n         // ignore validation errors in resurrected transactions\n         TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(mempool, stateDummy, *it,\n+            !AcceptToMemoryPool(::ChainstateActive(), mempool, stateDummy, *it,\n                                 nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n@@ -1098,9 +1098,17 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept, CAmount* fee_out)\n+{\n+    return AcceptToMemoryPool(::ChainstateActive(), pool, state, tx, plTxnReplaced, bypass_limits, test_accept, fee_out);\n+}\n+\n+bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n+                        std::list<CTransactionRef>* plTxnReplaced,\n+                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, ::ChainstateActive(), state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)"
      },
      {
        "sha": "c5a7e90a0e40dbb3c0dcf3414dfeb6c29d4c2711",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/314c92bef1cd376f7e470238364a1c5282ac2cef/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/314c92bef1cd376f7e470238364a1c5282ac2cef/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=314c92bef1cd376f7e470238364a1c5282ac2cef",
        "patch": "@@ -187,6 +187,9 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n+                        std::list<CTransactionRef>* plTxnReplaced,\n+                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      }
    ]
  },
  {
    "sha": "8b65ddd399efc655ac1921b6281ad231c76faf19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjY1ZGRkMzk5ZWZjNjU1YWMxOTIxYjYyODFhZDIzMWM3NmZhZjE5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:09:38Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "scripted-diff: Invoke ::AcceptToMemoryPool with chainstate\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='\\bAcceptToMemoryPool\\(' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/validation\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E 's@'\"$find_regex\"'@\\0::ChainstateActive(), @g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "f742ba16685e83c66fd8ec887346ef8db8e9ad3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f742ba16685e83c66fd8ec887346ef8db8e9ad3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b65ddd399efc655ac1921b6281ad231c76faf19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b65ddd399efc655ac1921b6281ad231c76faf19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b65ddd399efc655ac1921b6281ad231c76faf19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b65ddd399efc655ac1921b6281ad231c76faf19/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "314c92bef1cd376f7e470238364a1c5282ac2cef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/314c92bef1cd376f7e470238364a1c5282ac2cef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/314c92bef1cd376f7e470238364a1c5282ac2cef"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a449e1a4324e2f85253a82e7ec05658330697d59",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -49,7 +49,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(*test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n+            bool ret{::AcceptToMemoryPool(::ChainstateActive(), *test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n             assert(ret);\n         }\n     }"
      },
      {
        "sha": "c294d13b539dc110a4ea2085371ed0b657abc1ed",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -2181,7 +2181,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         TxValidationState state;\n         std::list<CTransactionRef> removed_txn;\n \n-        if (AcceptToMemoryPool(m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(::ChainstateActive(), m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n@@ -3200,7 +3200,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         TxValidationState state;\n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (AcceptToMemoryPool(m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(::ChainstateActive(), m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n             m_mempool.check(&::ChainstateActive().CoinsTip());\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it."
      },
      {
        "sha": "6b136a736066134343a0042cee6feff8e707d7a6",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -55,15 +55,15 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n             CAmount fee{0};\n-            if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+            if (!AcceptToMemoryPool(::ChainstateActive(), *node.mempool, state, tx,\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n                 return HandleATMPError(state, err_string);\n             } else if (fee > max_tx_fee) {\n                 return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n         // Try to submit the transaction to the mempool.\n-        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n+        if (!AcceptToMemoryPool(::ChainstateActive(), *node.mempool, state, tx,\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n             return HandleATMPError(state, err_string);\n         }"
      },
      {
        "sha": "9394ebe0b2159ec37c79bf88f8b5d5aa53edb611",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -951,7 +951,7 @@ static RPCHelpMan testmempoolaccept()\n     CAmount fee{0};\n     {\n         LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n+        test_accept_res = AcceptToMemoryPool(::ChainstateActive(), mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n     }\n "
      },
      {
        "sha": "c392bdb0529ed83b96c86948d9414513c0dc0dfe",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -38,7 +38,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK_EQUAL(\n             false,\n-            AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n+            AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */));\n "
      },
      {
        "sha": "5ff1a8443c03e4427034750a6d7c7a11ddf7b505",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -29,7 +29,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n \n         TxValidationState state;\n-        return AcceptToMemoryPool(*m_node.mempool, state, MakeTransactionRef(tx),\n+        return AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, state, MakeTransactionRef(tx),\n             nullptr /* plTxnReplaced */, true /* bypass_limits */);\n     };\n "
      },
      {
        "sha": "aa4f6fdf1f10c2bfb73186cfd6a6bfa642c2f1a0",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -286,7 +286,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             TxValidationState state;\n             std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n-                BOOST_REQUIRE(AcceptToMemoryPool(\n+                BOOST_REQUIRE(AcceptToMemoryPool(::ChainstateActive(), \n                     *m_node.mempool,\n                     state,\n                     tx,"
      },
      {
        "sha": "b207358a4f77ffc639a76f95e8c9bd0884bf2016",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b65ddd399efc655ac1921b6281ad231c76faf19/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b65ddd399efc655ac1921b6281ad231c76faf19/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8b65ddd399efc655ac1921b6281ad231c76faf19",
        "patch": "@@ -356,7 +356,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     // Add to memory pool without checking anything.\n-    // Used by AcceptToMemoryPool(), which DOES do\n+    // Used by AcceptToMemoryPool(::ChainstateActive(), ), which DOES do\n     // all the appropriate checks.\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n "
      }
    ]
  },
  {
    "sha": "85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWY5ODQ0YmM0YzRkYzI2NDgyYTY4ZTc5NGQ3ZGJhOWZjYjYyNzdj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T20:39:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Remove old AcceptToMemoryPool w/o chainstate param",
      "tree": {
        "sha": "9cca826db144b30346d8b8edfe63dc93fdc75fa8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cca826db144b30346d8b8edfe63dc93fdc75fa8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f9844bc4c4dc26482a68e794d7dba9fcb6277c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b65ddd399efc655ac1921b6281ad231c76faf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b65ddd399efc655ac1921b6281ad231c76faf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b65ddd399efc655ac1921b6281ad231c76faf19"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 0,
      "deletions": 10
    },
    "files": [
      {
        "sha": "00434240e3478c11a3d82f1f0b6d7dcd01f6b00e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85f9844bc4c4dc26482a68e794d7dba9fcb6277c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85f9844bc4c4dc26482a68e794d7dba9fcb6277c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
        "patch": "@@ -1095,13 +1095,6 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n     return res;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept, CAmount* fee_out)\n-{\n-    return AcceptToMemoryPool(::ChainstateActive(), pool, state, tx, plTxnReplaced, bypass_limits, test_accept, fee_out);\n-}\n-\n bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept, CAmount* fee_out)"
      },
      {
        "sha": "2889b7f16ed6531255ed9d0b45f421e193766b17",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85f9844bc4c4dc26482a68e794d7dba9fcb6277c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85f9844bc4c4dc26482a68e794d7dba9fcb6277c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
        "patch": "@@ -184,9 +184,6 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool\n  * @param[out] fee_out optional argument to return tx fee to the caller **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n-                        std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "d722f7ddcd216966414936dde89cfa2d5481944f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzIyZjdkZGNkMjE2OTY2NDE0OTM2ZGRlODljZmEyZDU0ODE5NDRm",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T14:25:16Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "tree-wide: Fix erroneous AcceptToMemoryPool replacements",
      "tree": {
        "sha": "110c2a55a04d84d85efe959377ab6a29831bd00a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/110c2a55a04d84d85efe959377ab6a29831bd00a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d722f7ddcd216966414936dde89cfa2d5481944f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d722f7ddcd216966414936dde89cfa2d5481944f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d722f7ddcd216966414936dde89cfa2d5481944f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d722f7ddcd216966414936dde89cfa2d5481944f/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f9844bc4c4dc26482a68e794d7dba9fcb6277c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85f9844bc4c4dc26482a68e794d7dba9fcb6277c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "158611f39e68e209c5d02e52d8db791bc1e28043",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d722f7ddcd216966414936dde89cfa2d5481944f/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d722f7ddcd216966414936dde89cfa2d5481944f/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=d722f7ddcd216966414936dde89cfa2d5481944f",
        "patch": "@@ -286,7 +286,8 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             TxValidationState state;\n             std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n-                BOOST_REQUIRE(AcceptToMemoryPool(::ChainstateActive(), \n+                BOOST_REQUIRE(AcceptToMemoryPool(\n+                    ::ChainstateActive(),\n                     *m_node.mempool,\n                     state,\n                     tx,"
      },
      {
        "sha": "30a48ae00176b5a64f7b8261445bf6d197ddf17b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d722f7ddcd216966414936dde89cfa2d5481944f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d722f7ddcd216966414936dde89cfa2d5481944f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d722f7ddcd216966414936dde89cfa2d5481944f",
        "patch": "@@ -356,7 +356,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n {\n     // Add to memory pool without checking anything.\n-    // Used by AcceptToMemoryPool(::ChainstateActive(), ), which DOES do\n+    // Used by AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     indexed_transaction_set::iterator newit = mapTx.insert(entry).first;\n "
      }
    ]
  },
  {
    "sha": "b9185dc29a828bb1a58fb5157c8a15344130716e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTE4NWRjMjlhODI4YmIxYTU4ZmI1MTU3YzhhMTUzNDQxMzA3MTZl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:40:00Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chain to ::TestLockPointValidity",
      "tree": {
        "sha": "d00ff5ebfa97d20a8cca17009cd2a165881281a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d00ff5ebfa97d20a8cca17009cd2a165881281a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9185dc29a828bb1a58fb5157c8a15344130716e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9185dc29a828bb1a58fb5157c8a15344130716e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9185dc29a828bb1a58fb5157c8a15344130716e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9185dc29a828bb1a58fb5157c8a15344130716e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d722f7ddcd216966414936dde89cfa2d5481944f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d722f7ddcd216966414936dde89cfa2d5481944f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d722f7ddcd216966414936dde89cfa2d5481944f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "15f11a716b94412254146171bca04d0ee67e7273",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9185dc29a828bb1a58fb5157c8a15344130716e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9185dc29a828bb1a58fb5157c8a15344130716e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b9185dc29a828bb1a58fb5157c8a15344130716e",
        "patch": "@@ -507,7 +507,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        bool validLP =  TestLockPointValidity(&lp);\n+        bool validLP =  TestLockPointValidity(::ChainActive(), &lp);\n         if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints."
      },
      {
        "sha": "b6e495f4797cfc3751950c7f5ce1e20ff8cae7f2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9185dc29a828bb1a58fb5157c8a15344130716e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9185dc29a828bb1a58fb5157c8a15344130716e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b9185dc29a828bb1a58fb5157c8a15344130716e",
        "patch": "@@ -235,7 +235,7 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n-bool TestLockPointValidity(const LockPoints* lp)\n+bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n {\n     AssertLockHeld(cs_main);\n     assert(lp);\n@@ -244,7 +244,8 @@ bool TestLockPointValidity(const LockPoints* lp)\n     if (lp->maxInputBlock) {\n         // Check whether ::ChainActive() is an extension of the block at which the LockPoints\n         // calculation was valid.  If not LockPoints are no longer valid\n-        if (!::ChainActive().Contains(lp->maxInputBlock)) {\n+        assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n+        if (!active_chain.Contains(lp->maxInputBlock)) {\n             return false;\n         }\n     }"
      },
      {
        "sha": "3814d554d63692ef66518a22b4d6e55168c93a4c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9185dc29a828bb1a58fb5157c8a15344130716e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9185dc29a828bb1a58fb5157c8a15344130716e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b9185dc29a828bb1a58fb5157c8a15344130716e",
        "patch": "@@ -215,7 +215,7 @@ bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, i\n /**\n  * Test whether the LockPoints height and time are still valid on the current chain\n  */\n-bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created."
      }
    ]
  },
  {
    "sha": "28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGRkOTU1ZGMwZGNkN2E0ZjlkZDdmNDE0ZmQ1M2E0YjU1NWI2NjUz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:48:55Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to CTxMemPool::removeForReorg",
      "tree": {
        "sha": "f8b27fc22893213b7274bafbed015b8f7360d229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8b27fc22893213b7274bafbed015b8f7360d229"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9185dc29a828bb1a58fb5157c8a15344130716e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9185dc29a828bb1a58fb5157c8a15344130716e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9185dc29a828bb1a58fb5157c8a15344130716e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 7,
      "deletions": 5
    },
    "files": [
      {
        "sha": "44a4e52a470be3ec98936c0cb6585b34fa3007b2",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
        "patch": "@@ -499,16 +499,17 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         RemoveStaged(setAllRemoves, false, reason);\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(CChainState& active_chainstate, const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     AssertLockHeld(cs);\n     setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        bool validLP =  TestLockPointValidity(::ChainActive(), &lp);\n-        if (!CheckFinalTx(::ChainActive().Tip(), tx, flags) || !CheckSequenceLocks(::ChainstateActive(), *this, tx, flags, &lp, validLP)) {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+        bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n+        if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags) || !CheckSequenceLocks(active_chainstate, *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      },
      {
        "sha": "43c28c48aad45f0d3f3b78f211235b2f96ed0047",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
        "patch": "@@ -29,6 +29,7 @@\n #include <boost/multi_index/sequenced_index.hpp>\n \n class CBlockIndex;\n+class CChainState;\n extern RecursiveMutex cs_main;\n \n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n@@ -615,7 +616,7 @@ class CTxMemPool\n     void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n     void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void removeForReorg(CChainState& active_chainstate, const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n     void removeConflicts(const CTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      },
      {
        "sha": "26438070e88b92bd084ab43e738fb3eb51d70783",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
        "patch": "@@ -406,7 +406,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(&::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(::ChainstateActive(), &::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n     LimitMempoolSize(mempool, ::ChainstateActive(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }"
      }
    ]
  },
  {
    "sha": "5203b8522061c1e7b18b1eb609cdd464b8a01678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjAzYjg1MjIwNjFjMWU3YjE4YjFlYjYwOWNkZDQ2NGI4YTAxNjc4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-16T21:53:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Pass in chainstate to UpdateMempoolForReorg",
      "tree": {
        "sha": "338c26822fcc6aa95c2c5fbb4588bed79e80d19d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/338c26822fcc6aa95c2c5fbb4588bed79e80d19d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5203b8522061c1e7b18b1eb609cdd464b8a01678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5203b8522061c1e7b18b1eb609cdd464b8a01678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5203b8522061c1e7b18b1eb609cdd464b8a01678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5203b8522061c1e7b18b1eb609cdd464b8a01678/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28dd955dc0dcd7a4f9dd7f414fd53a4b555b6653"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "57b3889aebd9aa8a2ddc9a486ae3fad5a6fbd437",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5203b8522061c1e7b18b1eb609cdd464b8a01678/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5203b8522061c1e7b18b1eb609cdd464b8a01678/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5203b8522061c1e7b18b1eb609cdd464b8a01678",
        "patch": "@@ -371,10 +371,11 @@ static bool IsCurrentForFeeEstimation(CChainState& chainstate) EXCLUSIVE_LOCKS_R\n  * and instead just erase from the mempool as needed.\n  */\n \n-static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n+static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& mempool, DisconnectedBlockTransactions& disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs)\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -387,7 +388,7 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n         // ignore validation errors in resurrected transactions\n         TxValidationState stateDummy;\n         if (!fAddToMempool || (*it)->IsCoinBase() ||\n-            !AcceptToMemoryPool(::ChainstateActive(), mempool, stateDummy, *it,\n+            !AcceptToMemoryPool(active_chainstate, mempool, stateDummy, *it,\n                                 nullptr /* plTxnReplaced */, true /* bypass_limits */)) {\n             // If the transaction doesn't make it in to the mempool, remove any\n             // transactions that depend on it (which would now be orphans).\n@@ -406,9 +407,9 @@ static void UpdateMempoolForReorg(CTxMemPool& mempool, DisconnectedBlockTransact\n     mempool.UpdateTransactionsFromBlock(vHashUpdate);\n \n     // We also need to remove any now-immature transactions\n-    mempool.removeForReorg(::ChainstateActive(), &::ChainstateActive().CoinsTip(), ::ChainActive().Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(active_chainstate, &active_chainstate.CoinsTip(), active_chainstate.m_chain.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n     // Re-limit mempool size, in case we added any transactions\n-    LimitMempoolSize(mempool, ::ChainstateActive(), gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n+    LimitMempoolSize(mempool, active_chainstate, gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, std::chrono::hours{gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY)});\n }\n \n /**\n@@ -2705,7 +2706,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(m_mempool, disconnectpool, false);\n+            UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2749,7 +2750,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(m_mempool, disconnectpool, false);\n+                    UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2766,7 +2767,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(m_mempool, disconnectpool, true);\n+        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, true);\n     }\n     m_mempool.check(&CoinsTip());\n \n@@ -3003,7 +3004,7 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n "
      }
    ]
  },
  {
    "sha": "64db9d61f4c23acb8b68b1a778db02aed0f582f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGRiOWQ2MWY0YzIzYWNiOGI2OGIxYTc3OGRiMDJhZWQwZjU4MmYx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-17T18:26:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:44:35Z"
      },
      "message": "validation: Use *this in CChainState::LoadMempool",
      "tree": {
        "sha": "d243c9a2ebfcbe1e5fd7e044e4ccf8ae310a5c29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d243c9a2ebfcbe1e5fd7e044e4ccf8ae310a5c29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64db9d61f4c23acb8b68b1a778db02aed0f582f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64db9d61f4c23acb8b68b1a778db02aed0f582f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64db9d61f4c23acb8b68b1a778db02aed0f582f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64db9d61f4c23acb8b68b1a778db02aed0f582f1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5203b8522061c1e7b18b1eb609cdd464b8a01678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5203b8522061c1e7b18b1eb609cdd464b8a01678",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5203b8522061c1e7b18b1eb609cdd464b8a01678"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "30c517f41ca79a144ae324a8303ecb6b16707400",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64db9d61f4c23acb8b68b1a778db02aed0f582f1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64db9d61f4c23acb8b68b1a778db02aed0f582f1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=64db9d61f4c23acb8b68b1a778db02aed0f582f1",
        "patch": "@@ -4174,7 +4174,8 @@ bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& ch\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        ::LoadMempool(m_mempool, ::ChainstateActive());\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+        ::LoadMempool(m_mempool, *this);\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n }"
      }
    ]
  },
  {
    "sha": "107a0282534b633bfccd94d09088341f9de35e6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDdhMDI4MjUzNGI2MzNiZmNjZDk0ZDA5MDg4MzQxZjlkZTM1ZTZl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-22T19:33:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "COMMITS AFTER THIS ARE NON-BASE",
      "tree": {
        "sha": "d243c9a2ebfcbe1e5fd7e044e4ccf8ae310a5c29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d243c9a2ebfcbe1e5fd7e044e4ccf8ae310a5c29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/107a0282534b633bfccd94d09088341f9de35e6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/107a0282534b633bfccd94d09088341f9de35e6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/107a0282534b633bfccd94d09088341f9de35e6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/107a0282534b633bfccd94d09088341f9de35e6e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64db9d61f4c23acb8b68b1a778db02aed0f582f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64db9d61f4c23acb8b68b1a778db02aed0f582f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64db9d61f4c23acb8b68b1a778db02aed0f582f1"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjhmZmYzNDk3YWYwYmQ0OTdiMDQ1Y2ZhOGVkZWQ4NTIyYmQzYTNl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T02:29:31Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Remove global ::LoadGenesisBlock",
      "tree": {
        "sha": "bd5034ca386e7edf83f62c8171edf0b3bdad8478",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5034ca386e7edf83f62c8171edf0b3bdad8478"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "107a0282534b633bfccd94d09088341f9de35e6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/107a0282534b633bfccd94d09088341f9de35e6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/107a0282534b633bfccd94d09088341f9de35e6e"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 3,
      "deletions": 8
    },
    "files": [
      {
        "sha": "4a301615898a0baeeaa15b7159e66b788106a7b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
        "patch": "@@ -713,7 +713,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        LoadGenesisBlock(chainparams);\n+        ::ChainstateActive().LoadGenesisBlock(chainparams);\n     }\n \n     // -loadblock=\n@@ -1623,7 +1623,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !LoadGenesisBlock(chainparams)) {\n+                if (!fReindex && !::ChainstateActive().LoadGenesisBlock(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }"
      },
      {
        "sha": "25d2e5759c41c0bed6316c602df631bd7bd46be5",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
        "patch": "@@ -178,7 +178,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     assert(!::ChainstateActive().CanFlushToDisk());\n     ::ChainstateActive().InitCoinsCache(1 << 23);\n     assert(::ChainstateActive().CanFlushToDisk());\n-    if (!LoadGenesisBlock(chainparams)) {\n+    if (!::ChainstateActive().LoadGenesisBlock(chainparams)) {\n         throw std::runtime_error(\"LoadGenesisBlock failed.\");\n     }\n "
      },
      {
        "sha": "427b1d2874ae7ab96754bab5b5f686c3518a1251",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb8fff3497af0bd497b045cfa8eded8522bd3a3e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
        "patch": "@@ -4617,11 +4617,6 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadGenesisBlock(const CChainParams& chainparams)\n-{\n-    return ::ChainstateActive().LoadGenesisBlock(chainparams);\n-}\n-\n void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, FlatFilePos* dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)"
      }
    ]
  },
  {
    "sha": "7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Yjc2ZmRiYmJkNzMxOTY4MDNlNmVjZjRmOTZlODAwZGI0OGEyNmE0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T19:10:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Remove global ::{{Precious,Invalidate}Block,ResetBlockFailureFlags}",
      "tree": {
        "sha": "585a0573f87b6cc1a263cce68ccd8a802ce8bcf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/585a0573f87b6cc1a263cce68ccd8a802ce8bcf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb8fff3497af0bd497b045cfa8eded8522bd3a3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb8fff3497af0bd497b045cfa8eded8522bd3a3e"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 9,
      "deletions": 27
    },
    "files": [
      {
        "sha": "b03c3d5e82fa51530f007501846f64dc554e9d71",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
        "patch": "@@ -1564,7 +1564,7 @@ static RPCHelpMan preciousblock()\n     }\n \n     BlockValidationState state;\n-    PreciousBlock(state, Params(), pblockindex);\n+    ::ChainstateActive().PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1600,7 +1600,7 @@ static RPCHelpMan invalidateblock()\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n-    InvalidateBlock(state, Params(), pblockindex);\n+    ::ChainstateActive().InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n         ::ChainstateActive().ActivateBestChain(state, Params());\n@@ -1639,7 +1639,7 @@ static RPCHelpMan reconsiderblock()\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n \n-        ResetBlockFailureFlags(pblockindex);\n+        ::ChainstateActive().ResetBlockFailureFlags(pblockindex);\n     }\n \n     BlockValidationState state;"
      },
      {
        "sha": "31ec62a594f9b8ffdd2a7b63320b66ebb6fad03d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
        "patch": "@@ -2940,9 +2940,6 @@ bool CChainState::PreciousBlock(BlockValidationState& state, const CChainParams&\n \n     return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n }\n-bool PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n-    return ::ChainstateActive().PreciousBlock(state, params, pindex);\n-}\n \n bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n@@ -3080,10 +3077,6 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n     return true;\n }\n \n-bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n-    return ::ChainstateActive().InvalidateBlock(state, chainparams, pindex);\n-}\n-\n void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     AssertLockHeld(cs_main);\n \n@@ -3118,10 +3111,6 @@ void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n }\n \n-void ResetBlockFailureFlags(CBlockIndex *pindex) {\n-    return ::ChainstateActive().ResetBlockFailureFlags(pindex);\n-}\n-\n CBlockIndex* BlockManager::AddToBlockIndex(const CBlockHeader& block)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "7ead2d3e675d06b89cf530841075edc07fa5ad2c",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b76fdbbbd73196803e6ecf4f96e800db48a26a4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
        "patch": "@@ -678,8 +678,14 @@ class CChainState\n     bool DisconnectTip(BlockValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions* disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_mempool.cs);\n \n     // Manual block validity manipulation:\n+    /** Mark a block as precious and reorganize.\n+     *\n+     * May not be called in a validationinterface callback.\n+     */\n     bool PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n+    /** Mark a block as invalid. */\n     bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n+    /** Remove invalidity status from a block and its descendants. */\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Replay blocks that aren't fully applied to the database. */\n@@ -736,19 +742,6 @@ class CChainState\n     friend ChainstateManager;\n };\n \n-/** Mark a block as precious and reorganize.\n- *\n- * May not be called in a\n- * validationinterface callback.\n- */\n-bool PreciousBlock(BlockValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n-\n-/** Mark a block as invalid. */\n-bool InvalidateBlock(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n-\n-/** Remove invalidity status from a block and its descendants. */\n-void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n /**\n  * Provides an interface for creating and interacting with one or two\n  * chainstates: an IBD chainstate generated by downloading blocks, and"
      }
    ]
  },
  {
    "sha": "403c5cbffda7cb2a219dfc2c4542bc250d832e60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDNjNWNiZmZkYTdjYjJhMjE5ZGZjMmM0NTQyYmMyNTBkODMyZTYw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T19:50:04Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Pass in chainstate to UpdateTip",
      "tree": {
        "sha": "387292548b75151ad3d5dc7bf62b15f98f449d7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/387292548b75151ad3d5dc7bf62b15f98f449d7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/403c5cbffda7cb2a219dfc2c4542bc250d832e60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/403c5cbffda7cb2a219dfc2c4542bc250d832e60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/403c5cbffda7cb2a219dfc2c4542bc250d832e60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/403c5cbffda7cb2a219dfc2c4542bc250d832e60/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b76fdbbbd73196803e6ecf4f96e800db48a26a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b76fdbbbd73196803e6ecf4f96e800db48a26a4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "474f5e6c840e88f3f4c50f3a48cd78fab12c8946",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/403c5cbffda7cb2a219dfc2c4542bc250d832e60/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/403c5cbffda7cb2a219dfc2c4542bc250d832e60/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=403c5cbffda7cb2a219dfc2c4542bc250d832e60",
        "patch": "@@ -2408,7 +2408,7 @@ static void AppendWarning(bilingual_str& res, const bilingual_str& warn)\n }\n \n /** Check warning conditions and do some notifications on new chain tip set. */\n-static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams)\n+static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const CChainParams& chainParams, CChainState& active_chainstate)\n     EXCLUSIVE_LOCKS_REQUIRED(::cs_main)\n {\n     // New best block\n@@ -2421,7 +2421,9 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    if (!::ChainstateActive().IsInitialBlockDownload()) {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    if (!active_chainstate.IsInitialBlockDownload())\n+    {\n         const CBlockIndex* pindex = pindexNew;\n         for (int bit = 0; bit < VERSIONBITS_NUM_BITS; bit++) {\n             WarningBitsConditionChecker checker(bit);\n@@ -2436,11 +2438,12 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n             }\n         }\n     }\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n       FormatISO8601DateTime(pindexNew->GetBlockTime()),\n-      GuessVerificationProgress(chainParams.TxData(), pindexNew), ::ChainstateActive().CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), ::ChainstateActive().CoinsTip().GetCacheSize(),\n+      GuessVerificationProgress(chainParams.TxData(), pindexNew), active_chainstate.CoinsTip().DynamicMemoryUsage() * (1.0 / (1<<20)), active_chainstate.CoinsTip().GetCacheSize(),\n       !warning_messages.empty() ? strprintf(\" warning='%s'\", warning_messages.original) : \"\");\n }\n \n@@ -2496,7 +2499,7 @@ bool CChainState::DisconnectTip(BlockValidationState& state, const CChainParams&\n \n     m_chain.SetTip(pindexDelete->pprev);\n \n-    UpdateTip(m_mempool, pindexDelete->pprev, chainparams);\n+    UpdateTip(m_mempool, pindexDelete->pprev, chainparams, *this);\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock, pindexDelete);\n@@ -2604,7 +2607,7 @@ bool CChainState::ConnectTip(BlockValidationState& state, const CChainParams& ch\n     disconnectpool.removeForBlock(blockConnecting.vtx);\n     // Update m_chain & related variables.\n     m_chain.SetTip(pindexNew);\n-    UpdateTip(m_mempool, pindexNew, chainparams);\n+    UpdateTip(m_mempool, pindexNew, chainparams, *this);\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);"
      }
    ]
  },
  {
    "sha": "081631efcc545f663a83c98b4cce9367009d1c4c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODE2MzFlZmNjNTQ1ZjY2M2E4M2M5OGI0Y2NlOTM2NzAwOWQxYzRj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T19:59:46Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Pass in chainstate to ::PruneBlockFilesManual",
      "tree": {
        "sha": "44efafebc36eb623eac6cd3c6caeeb5bc630029a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44efafebc36eb623eac6cd3c6caeeb5bc630029a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/081631efcc545f663a83c98b4cce9367009d1c4c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081631efcc545f663a83c98b4cce9367009d1c4c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/081631efcc545f663a83c98b4cce9367009d1c4c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081631efcc545f663a83c98b4cce9367009d1c4c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "403c5cbffda7cb2a219dfc2c4542bc250d832e60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/403c5cbffda7cb2a219dfc2c4542bc250d832e60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/403c5cbffda7cb2a219dfc2c4542bc250d832e60"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4cd2e90c3027fb188384a7a9d7a79c6e971a975f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081631efcc545f663a83c98b4cce9367009d1c4c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081631efcc545f663a83c98b4cce9367009d1c4c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=081631efcc545f663a83c98b4cce9367009d1c4c",
        "patch": "@@ -1036,7 +1036,7 @@ static RPCHelpMan pruneblockchain()\n         height = chainHeight - MIN_BLOCKS_TO_KEEP;\n     }\n \n-    PruneBlockFilesManual(height);\n+    PruneBlockFilesManual(::ChainstateActive(), height);\n     const CBlockIndex* block = ::ChainActive().Tip();\n     CHECK_NONFATAL(block);\n     while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {"
      },
      {
        "sha": "a15a434f0d63e636e8008a42c374ddfa88067a9d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081631efcc545f663a83c98b4cce9367009d1c4c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081631efcc545f663a83c98b4cce9367009d1c4c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=081631efcc545f663a83c98b4cce9367009d1c4c",
        "patch": "@@ -3929,11 +3929,12 @@ void BlockManager::FindFilesToPruneManual(std::set<int>& setFilesToPrune, int nM\n }\n \n /* This function is called from the RPC code for pruneblockchain */\n-void PruneBlockFilesManual(int nManualPruneHeight)\n+void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight)\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    if (!::ChainstateActive().FlushStateToDisk(\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    if (!active_chainstate.FlushStateToDisk(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n     }"
      },
      {
        "sha": "ed36f2f7f4d043bdf0ce7a57cb1cba1129a5b871",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/081631efcc545f663a83c98b4cce9367009d1c4c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/081631efcc545f663a83c98b4cce9367009d1c4c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=081631efcc545f663a83c98b4cce9367009d1c4c",
        "patch": "@@ -179,7 +179,7 @@ uint64_t CalculateCurrentUsage();\n void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n \n /** Prune block files up to a given height */\n-void PruneBlockFilesManual(int nManualPruneHeight);\n+void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool"
      }
    ]
  },
  {
    "sha": "a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzU2ZWNiN2JjZjNkZGMyZmY4NmQyMDA1YjY1NTY2NjhmNDdmOTg4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T20:16:56Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Remove global ::VersionBitsTip{State,SinceHeight,Statistics}\n\nTip: versionbitscache is currently a global so we didn't need to pass it\n     in to any of ::VersionBitsTip*'s callers",
      "tree": {
        "sha": "e9ad39eb514ed24809339c6820d1055b584bb319",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9ad39eb514ed24809339c6820d1055b584bb319"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "081631efcc545f663a83c98b4cce9367009d1c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/081631efcc545f663a83c98b4cce9367009d1c4c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/081631efcc545f663a83c98b4cce9367009d1c4c"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 6,
      "deletions": 30
    },
    "files": [
      {
        "sha": "3e87ea6b30b2289c6d29eff9ba7ab3cc8c99dbb4",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "patch": "@@ -1236,7 +1236,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n+    const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1250,12 +1250,12 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n+    int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n+        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);"
      },
      {
        "sha": "5932cdbd70157dd0f89aa9d81c6be0779276c6c1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "patch": "@@ -4973,24 +4973,6 @@ CBlockFileInfo* GetBlockFileInfo(size_t n)\n     return &vinfoBlockFile.at(n);\n }\n \n-ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsState(::ChainActive().Tip(), params, pos, versionbitscache);\n-}\n-\n-BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsStatistics(::ChainActive().Tip(), params, pos);\n-}\n-\n-int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n-{\n-    LOCK(cs_main);\n-    return VersionBitsStateSinceHeight(::ChainActive().Tip(), params, pos, versionbitscache);\n-}\n-\n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)"
      },
      {
        "sha": "ab14b4b17ad7ef7c0f6ff8423173929b71fd68d3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "patch": "@@ -188,15 +188,6 @@ bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxVali\n                         std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n-ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n-BIP9Stats VersionBitsTipStatistics(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n-int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n \n /** Apply the effects of this transaction on the UTXO set represented by view */\n void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);"
      },
      {
        "sha": "6df1db881478d6eeea75bf6a11be96889880c87b",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a756ecb7bcf3ddc2ff86d2005b6556668f47f988/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "patch": "@@ -79,8 +79,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n+/** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  },
  {
    "sha": "bcf23b528322e191980fa7d5de8aa9dc22e220eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2YyM2I1MjgzMjJlMTkxOTgwZmE3ZDVkZThhYTlkYzIyZTIyMGVi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-15T20:30:32Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:01Z"
      },
      "message": "validation: Pass in chainstate to CVerifyDB::VerifyDB",
      "tree": {
        "sha": "723d0f823d1d4a915dffa48bd1b2f27545bda4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/723d0f823d1d4a915dffa48bd1b2f27545bda4c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bcf23b528322e191980fa7d5de8aa9dc22e220eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcf23b528322e191980fa7d5de8aa9dc22e220eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf23b528322e191980fa7d5de8aa9dc22e220eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcf23b528322e191980fa7d5de8aa9dc22e220eb/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a756ecb7bcf3ddc2ff86d2005b6556668f47f988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a756ecb7bcf3ddc2ff86d2005b6556668f47f988"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 19,
      "deletions": 18
    },
    "files": [
      {
        "sha": "dfeedb88e11cf3bbaf570da8c1002dd377ea9629",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "patch": "@@ -1734,7 +1734,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                         // work when we allow VerifyDB to be parameterized by chainstate.\n                         if (&::ChainstateActive() == chainstate &&\n                             !CVerifyDB().VerifyDB(\n-                                chainparams, &chainstate->CoinsDB(),\n+                                chainparams, *chainstate, &chainstate->CoinsDB(),\n                                 args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                 args.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                             strLoadError = _(\"Corrupted block database detected\");"
      },
      {
        "sha": "1f87e754efa2d7c551decd85f3f27d036456451b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "patch": "@@ -1204,7 +1204,7 @@ static RPCHelpMan verifychain()\n \n     LOCK(cs_main);\n \n-    return CVerifyDB().VerifyDB(Params(), &::ChainstateActive().CoinsTip(), check_level, check_depth);\n+    return CVerifyDB().VerifyDB(Params(), ::ChainstateActive(), &::ChainstateActive().CoinsTip(), check_level, check_depth);\n },\n     };\n }"
      },
      {
        "sha": "5ceccd2b803e853f94ce0c69f9b1b3ef388cf28a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "patch": "@@ -4211,15 +4211,16 @@ CVerifyDB::~CVerifyDB()\n     uiInterface.ShowProgress(\"\", 100, false);\n }\n \n-bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CChainState& active_chainstate, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n     LOCK(cs_main);\n-    if (::ChainActive().Tip() == nullptr || ::ChainActive().Tip()->pprev == nullptr)\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    if (active_chainstate.m_chain.Tip() == nullptr || active_chainstate.m_chain.Tip()->pprev == nullptr)\n         return true;\n \n     // Verify blocks in the best chain\n-    if (nCheckDepth <= 0 || nCheckDepth > ::ChainActive().Height())\n-        nCheckDepth = ::ChainActive().Height();\n+    if (nCheckDepth <= 0 || nCheckDepth > active_chainstate.m_chain.Height())\n+        nCheckDepth = active_chainstate.m_chain.Height();\n     nCheckLevel = std::max(0, std::min(4, nCheckLevel));\n     LogPrintf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n     CCoinsViewCache coins(coinsview);\n@@ -4229,15 +4230,15 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n     BlockValidationState state;\n     int reportDone = 0;\n     LogPrintf(\"[0%%]...\"); /* Continued */\n-    for (pindex = ::ChainActive().Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n-        const int percentageDone = std::max(1, std::min(99, (int)(((double)(::ChainActive().Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n+    for (pindex = active_chainstate.m_chain.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {\n+        const int percentageDone = std::max(1, std::min(99, (int)(((double)(active_chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));\n         if (reportDone < percentageDone/10) {\n             // report every 10% step\n             LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n             reportDone = percentageDone/10;\n         }\n         uiInterface.ShowProgress(_(\"Verifying blocks...\").translated, percentageDone, false);\n-        if (pindex->nHeight <= ::ChainActive().Height()-nCheckDepth)\n+        if (pindex->nHeight <= active_chainstate.m_chain.Height()-nCheckDepth)\n             break;\n         if (fPruneMode && !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n             // If pruning, only go back as far as we have data.\n@@ -4262,9 +4263,9 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n-        if (nCheckLevel >= 3 && (coins.DynamicMemoryUsage() + ::ChainstateActive().CoinsTip().DynamicMemoryUsage()) <= ::ChainstateActive().m_coinstip_cache_size_bytes) {\n+        if (nCheckLevel >= 3 && (coins.DynamicMemoryUsage() + active_chainstate.CoinsTip().DynamicMemoryUsage()) <= active_chainstate.m_coinstip_cache_size_bytes) {\n             assert(coins.GetBestBlock() == pindex->GetBlockHash());\n-            DisconnectResult res = ::ChainstateActive().DisconnectBlock(block, pindex, coins);\n+            DisconnectResult res = active_chainstate.DisconnectBlock(block, pindex, coins);\n             if (res == DISCONNECT_FAILED) {\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n@@ -4278,26 +4279,26 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n         if (ShutdownRequested()) return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", ::ChainActive().Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", active_chainstate.m_chain.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // store block count as we move pindex at check level >= 4\n-    int block_count = ::ChainActive().Height() - pindex->nHeight;\n+    int block_count = active_chainstate.m_chain.Height() - pindex->nHeight;\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n-        while (pindex != ::ChainActive().Tip()) {\n-            const int percentageDone = std::max(1, std::min(99, 100 - (int)(((double)(::ChainActive().Height() - pindex->nHeight)) / (double)nCheckDepth * 50)));\n+        while (pindex != active_chainstate.m_chain.Tip()) {\n+            const int percentageDone = std::max(1, std::min(99, 100 - (int)(((double)(active_chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * 50)));\n             if (reportDone < percentageDone/10) {\n                 // report every 10% step\n                 LogPrintf(\"[%d%%]...\", percentageDone); /* Continued */\n                 reportDone = percentageDone/10;\n             }\n             uiInterface.ShowProgress(_(\"Verifying blocks...\").translated, percentageDone, false);\n-            pindex = ::ChainActive().Next(pindex);\n+            pindex = active_chainstate.m_chain.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex, chainparams.GetConsensus()))\n                 return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-            if (!::ChainstateActive().ConnectBlock(block, state, pindex, coins, chainparams))\n+            if (!active_chainstate.ConnectBlock(block, state, pindex, coins, chainparams))\n                 return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s (%s)\", pindex->nHeight, pindex->GetBlockHash().ToString(), state.ToString());\n             if (ShutdownRequested()) return true;\n         }"
      },
      {
        "sha": "f8a7f919a6e0d79d3e0d0250243a781d3961bd1e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bcf23b528322e191980fa7d5de8aa9dc22e220eb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "patch": "@@ -297,7 +297,7 @@ class CVerifyDB {\n public:\n     CVerifyDB();\n     ~CVerifyDB();\n-    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+    bool VerifyDB(const CChainParams& chainparams, CChainState& active_chainstate, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n enum DisconnectResult"
      }
    ]
  },
  {
    "sha": "61a45ad2bad26d418aed423c0a545209ace76e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWE0NWFkMmJhZDI2ZDQxOGFlZDQyM2MwYTU0NTIwOWFjZTc2ZTc1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-05T19:14:35Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Move invalid block handling to CChainState\n\n- InvalidChainFound\n- ForkWarningConditions\n- ForkWarningConditionsOnNewFork",
      "tree": {
        "sha": "31db50a43495485b3f5f8bb2c657be462a7e6f20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31db50a43495485b3f5f8bb2c657be462a7e6f20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61a45ad2bad26d418aed423c0a545209ace76e75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a45ad2bad26d418aed423c0a545209ace76e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61a45ad2bad26d418aed423c0a545209ace76e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a45ad2bad26d418aed423c0a545209ace76e75/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bcf23b528322e191980fa7d5de8aa9dc22e220eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bcf23b528322e191980fa7d5de8aa9dc22e220eb"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2932c3abedd52357f5a6f399fdcc6453b6d2026b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a45ad2bad26d418aed423c0a545209ace76e75/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a45ad2bad26d418aed423c0a545209ace76e75/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=61a45ad2bad26d418aed423c0a545209ace76e75",
        "patch": "@@ -1349,16 +1349,18 @@ static void AlertNotify(const std::string& strMessage)\n #endif\n }\n \n-static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void CChainState::CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+\n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before finishing our initial sync)\n-    if (::ChainstateActive().IsInitialBlockDownload()) {\n+    if (IsInitialBlockDownload()) {\n         return;\n     }\n \n-    if (pindexBestInvalid && pindexBestInvalid->nChainWork > ::ChainActive().Tip()->nChainWork + (GetBlockProof(*::ChainActive().Tip()) * 6)) {\n+    if (pindexBestInvalid && pindexBestInvalid->nChainWork > m_chain.Tip()->nChainWork + (GetBlockProof(*m_chain.Tip()) * 6)) {\n         LogPrintf(\"%s: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\\nChain state database corruption likely.\\n\", __func__);\n         SetfLargeWorkInvalidChainFound(true);\n     } else {\n@@ -1367,21 +1369,22 @@ static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n }\n \n // Called both upon regular invalid block discovery *and* InvalidateBlock\n-void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void CChainState::InvalidChainFound(CBlockIndex* pindexNew)\n {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n     if (pindexBestHeader != nullptr && pindexBestHeader->GetAncestor(pindexNew->nHeight) == pindexNew) {\n-        pindexBestHeader = ::ChainActive().Tip();\n+        pindexBestHeader = m_chain.Tip();\n     }\n \n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%f  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));\n-    CBlockIndex *tip = ::ChainActive().Tip();\n+    CBlockIndex *tip = m_chain.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%f  date=%s\\n\", __func__,\n-      tip->GetBlockHash().ToString(), ::ChainActive().Height(), log(tip->nChainWork.getdouble())/log(2.0),\n+      tip->GetBlockHash().ToString(), m_chain.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n       FormatISO8601DateTime(tip->GetBlockTime()));\n     CheckForkWarningConditions();\n }"
      },
      {
        "sha": "41d81c22356afff7902d3ccb6b7f0f631c8504d3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61a45ad2bad26d418aed423c0a545209ace76e75/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61a45ad2bad26d418aed423c0a545209ace76e75/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=61a45ad2bad26d418aed423c0a545209ace76e75",
        "patch": "@@ -730,6 +730,10 @@ class CChainState\n     //! Mark a block as not having block data\n     void EraseBlockData(CBlockIndex* index) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "fa730f7a871c49072e2e899cefbc8275e5f67057",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTczMGY3YTg3MWM0OTA3MmUyZTg5OWNlZmJjODI3NWU1ZjY3MDU3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T18:50:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Move LoadBlockIndexDB to CChainState\n\nCChainState needed cuz setBlockIndexCandidates",
      "tree": {
        "sha": "1e134d01769b0d305f9695c68f0831d203f9d589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e134d01769b0d305f9695c68f0831d203f9d589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa730f7a871c49072e2e899cefbc8275e5f67057",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa730f7a871c49072e2e899cefbc8275e5f67057",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa730f7a871c49072e2e899cefbc8275e5f67057",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa730f7a871c49072e2e899cefbc8275e5f67057/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61a45ad2bad26d418aed423c0a545209ace76e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61a45ad2bad26d418aed423c0a545209ace76e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61a45ad2bad26d418aed423c0a545209ace76e75"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "93b645d28cf0c9f702fc3bb7534a62c4f74d7492",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa730f7a871c49072e2e899cefbc8275e5f67057/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa730f7a871c49072e2e899cefbc8275e5f67057/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa730f7a871c49072e2e899cefbc8275e5f67057",
        "patch": "@@ -4112,11 +4112,12 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    if (!chainman.m_blockman.LoadBlockIndex(\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+    if (!m_blockman.LoadBlockIndex(\n             chainparams.GetConsensus(), *pblocktree,\n-            ::ChainstateActive().setBlockIndexCandidates)) {\n+            setBlockIndexCandidates)) {\n         return false;\n     }\n \n@@ -4140,7 +4141,7 @@ bool static LoadBlockIndexDB(ChainstateManager& chainman, const CChainParams& ch\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<const uint256, CBlockIndex*>& item : chainman.BlockIndex()) {\n+    for (const std::pair<const uint256, CBlockIndex*>& item : m_blockman.m_block_index) {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             setBlkDataFiles.insert(pindex->nFile);\n@@ -4572,7 +4573,7 @@ bool ChainstateManager::LoadBlockIndex(const CChainParams& chainparams)\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = LoadBlockIndexDB(*this, chainparams);\n+        bool ret = ActiveChainstate().LoadBlockIndexDB(chainparams);\n         if (!ret) return false;\n         needs_init = m_blockman.m_block_index.empty();\n     }"
      },
      {
        "sha": "bb4c3898e033f3549e902f95868658ac2749388d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa730f7a871c49072e2e899cefbc8275e5f67057/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa730f7a871c49072e2e899cefbc8275e5f67057/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa730f7a871c49072e2e899cefbc8275e5f67057",
        "patch": "@@ -734,6 +734,8 @@ class CChainState\n     void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    bool LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n     friend ChainstateManager;\n };\n "
      }
    ]
  },
  {
    "sha": "6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjdjZjVkOTk2OGNkMzEyZmUwODdiZDZjYzlmMzI5MDJiZDg5ODZj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-17T19:46:29Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Use *this in CChainState::InvalidateBlock",
      "tree": {
        "sha": "b5ecba12fc0e1727697d0ed40c4e25242b6fa2e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5ecba12fc0e1727697d0ed40c4e25242b6fa2e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa730f7a871c49072e2e899cefbc8275e5f67057",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa730f7a871c49072e2e899cefbc8275e5f67057",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa730f7a871c49072e2e899cefbc8275e5f67057"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "15f05d8202c46074e32f1442cde8fb334d7f7514",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
        "patch": "@@ -3007,7 +3007,8 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n+        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n "
      }
    ]
  },
  {
    "sha": "a765747415aebd432d5feffb6cb609be62e2592b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzY1NzQ3NDE1YWViZDQzMmQ1ZmVmZmI2Y2I2MDliZTYyZTI1OTJi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T20:05:39Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Pass in spendheight to CTxMemPool::check\n\nThis is the only instance where validation reaches for something outside\nof it.",
      "tree": {
        "sha": "77b009c63dd0423f5e13228c9828f520a0c4a5b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77b009c63dd0423f5e13228c9828f520a0c4a5b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a765747415aebd432d5feffb6cb609be62e2592b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a765747415aebd432d5feffb6cb609be62e2592b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a765747415aebd432d5feffb6cb609be62e2592b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a765747415aebd432d5feffb6cb609be62e2592b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b7cf5d9968cd312fe087bd6cc9f32902bd8986c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7ea0f4387b746cc824941c160d638b117443774c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a765747415aebd432d5feffb6cb609be62e2592b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a765747415aebd432d5feffb6cb609be62e2592b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a765747415aebd432d5feffb6cb609be62e2592b",
        "patch": "@@ -2243,7 +2243,9 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n             break;\n         }\n     }\n-    m_mempool.check(&::ChainstateActive().CoinsTip());\n+    CChainState& active_chainstate = m_chainman.ActiveChainstate();\n+    CCoinsViewCache& active_coins_tip = active_chainstate.CoinsTip();\n+    m_mempool.check(&active_coins_tip, active_chainstate.m_blockman.GetSpendHeight(active_coins_tip));\n }\n \n /**\n@@ -3201,7 +3203,10 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         std::list<CTransactionRef> lRemovedTxn;\n \n         if (AcceptToMemoryPool(::ChainstateActive(), m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n-            m_mempool.check(&::ChainstateActive().CoinsTip());\n+            CChainState& active_chainstate = m_chainman.ActiveChainstate();\n+            CCoinsViewCache& active_coins_tip = active_chainstate.CoinsTip();\n+            m_mempool.check(&active_coins_tip, active_chainstate.m_blockman.GetSpendHeight(active_coins_tip));\n+\n             // As this version of the transaction was acceptable, we can forget about any\n             // requests for it.\n             m_txrequest.ForgetTxHash(tx.GetHash());"
      },
      {
        "sha": "0ad600f276c33b3be80d4be9719193a236f0c229",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a765747415aebd432d5feffb6cb609be62e2592b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a765747415aebd432d5feffb6cb609be62e2592b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a765747415aebd432d5feffb6cb609be62e2592b",
        "patch": "@@ -613,7 +613,7 @@ static void CheckInputsAndUpdateCoins(const CTransaction& tx, CCoinsViewCache& m\n     UpdateCoins(tx, mempoolDuplicate, std::numeric_limits<int>::max());\n }\n \n-void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n+void CTxMemPool::check(const CCoinsViewCache *pcoins, const int64_t spendheight) const\n {\n     if (m_check_ratio == 0) return;\n \n@@ -627,7 +627,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    const int64_t spendheight = g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate);\n+    assert(g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate) == spendheight); // TODO: REVIEW-ONLY, REMOVE IN FUTURE COMMIT\n \n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      },
      {
        "sha": "75a2963daf3a50da12f8b98729bc58634f94d0ee",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a765747415aebd432d5feffb6cb609be62e2592b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a765747415aebd432d5feffb6cb609be62e2592b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a765747415aebd432d5feffb6cb609be62e2592b",
        "patch": "@@ -603,7 +603,7 @@ class CTxMemPool\n      * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n      * check does nothing.\n      */\n-    void check(const CCoinsViewCache *pcoins) const EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    void check(const CCoinsViewCache *pcoins, const int64_t spendheight) const EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      },
      {
        "sha": "186f50f225519ce2aebebed481e68ee1da783d61",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a765747415aebd432d5feffb6cb609be62e2592b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a765747415aebd432d5feffb6cb609be62e2592b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=a765747415aebd432d5feffb6cb609be62e2592b",
        "patch": "@@ -2775,7 +2775,9 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         // any disconnected transactions back to the mempool.\n         UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, true);\n     }\n-    m_mempool.check(&CoinsTip());\n+\n+    CCoinsViewCache& active_coins_tip = CoinsTip();\n+    m_mempool.check(&active_coins_tip, m_blockman.GetSpendHeight(active_coins_tip));\n \n     CheckForkWarningConditions();\n "
      }
    ]
  },
  {
    "sha": "4582551c20a1058c1e97a14f528588a04bdce5f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTgyNTUxYzIwYTEwNThjMWU5N2ExNGY1Mjg1ODhhMDRiZGNlNWYw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-17T19:46:16Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Use *this in CChainState::ActivateBestChainStep",
      "tree": {
        "sha": "0d68db20957fd4e0aeec105c4d7504f0c01c296b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d68db20957fd4e0aeec105c4d7504f0c01c296b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4582551c20a1058c1e97a14f528588a04bdce5f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4582551c20a1058c1e97a14f528588a04bdce5f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4582551c20a1058c1e97a14f528588a04bdce5f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4582551c20a1058c1e97a14f528588a04bdce5f0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a765747415aebd432d5feffb6cb609be62e2592b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a765747415aebd432d5feffb6cb609be62e2592b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a765747415aebd432d5feffb6cb609be62e2592b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "416090880698ac1d41cd70737cfe60b378bd868a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4582551c20a1058c1e97a14f528588a04bdce5f0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4582551c20a1058c1e97a14f528588a04bdce5f0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4582551c20a1058c1e97a14f528588a04bdce5f0",
        "patch": "@@ -2701,6 +2701,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2712,7 +2713,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n             // This is likely a fatal error, but keep the mempool consistent,\n             // just in case. Only remove from the mempool in this case.\n-            UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n+            UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n \n             // If we're unable to disconnect a block during normal operation,\n             // then that is a failure of our local system -- we should abort\n@@ -2756,7 +2757,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n                     // A system error occurred (disk space, database error, ...).\n                     // Make the mempool consistent with the current tip, just in case\n                     // any observers try to use it before shutdown.\n-                    UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, false);\n+                    UpdateMempoolForReorg(*this, m_mempool, disconnectpool, false);\n                     return false;\n                 }\n             } else {\n@@ -2773,7 +2774,7 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n     if (fBlocksDisconnected) {\n         // If any blocks were disconnected, disconnectpool may be non empty.  Add\n         // any disconnected transactions back to the mempool.\n-        UpdateMempoolForReorg(::ChainstateActive(), m_mempool, disconnectpool, true);\n+        UpdateMempoolForReorg(*this, m_mempool, disconnectpool, true);\n     }\n \n     CCoinsViewCache& active_coins_tip = CoinsTip();"
      }
    ]
  },
  {
    "sha": "55a2f2cf55b4fa3cc2b7e701917965323a44c020",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWEyZjJjZjU1YjRmYTNjYzJiN2U3MDE5MTc5NjUzMjNhNDRjMDIw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T20:08:26Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Pass in chain to FindBlockPos+SaveBlockToDisk",
      "tree": {
        "sha": "0cffeb629bf1596f751ea88af18dcce57f58aa22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cffeb629bf1596f751ea88af18dcce57f58aa22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55a2f2cf55b4fa3cc2b7e701917965323a44c020",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a2f2cf55b4fa3cc2b7e701917965323a44c020",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55a2f2cf55b4fa3cc2b7e701917965323a44c020",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a2f2cf55b4fa3cc2b7e701917965323a44c020/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4582551c20a1058c1e97a14f528588a04bdce5f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4582551c20a1058c1e97a14f528588a04bdce5f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4582551c20a1058c1e97a14f528588a04bdce5f0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "38b29f13492160f614fb260d7bfe28f8da1f8b12",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a2f2cf55b4fa3cc2b7e701917965323a44c020/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a2f2cf55b4fa3cc2b7e701917965323a44c020/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=55a2f2cf55b4fa3cc2b7e701917965323a44c020",
        "patch": "@@ -3204,7 +3204,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int nHeight, CChain& active_chain, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3219,7 +3219,8 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n             // when the undo file is keeping up with the block file, we want to flush it explicitly\n             // when it is lagging behind (more blocks arrive than are being connected), we let the\n             // undo block write case handle it\n-            finalize_undo = (vinfoBlockFile[nFile].nHeightLast == (unsigned int)ChainActive().Tip()->nHeight);\n+            assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n+            finalize_undo = (vinfoBlockFile[nFile].nHeightLast == (unsigned int)active_chain.Tip()->nHeight);\n             nFile++;\n             if (vinfoBlockFile.size() <= nFile) {\n                 vinfoBlockFile.resize(nFile + 1);\n@@ -3681,12 +3682,12 @@ bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>&\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, const CChainParams& chainparams, const FlatFilePos* dbp) {\n+static FlatFilePos SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp) {\n     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);\n     FlatFilePos blockPos;\n     if (dbp != nullptr)\n         blockPos = *dbp;\n-    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != nullptr)) {\n+    if (!FindBlockPos(blockPos, nBlockSize+8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {\n         error(\"%s: FindBlockPos failed\", __func__);\n         return FlatFilePos();\n     }\n@@ -3765,7 +3766,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n     try {\n-        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, ::ChainActive(), chainparams, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;\n@@ -4607,7 +4608,7 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n \n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n-        FlatFilePos blockPos = SaveBlockToDisk(block, 0, chainparams, nullptr);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, ::ChainActive(), chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = m_blockman.AddToBlockIndex(block);"
      }
    ]
  },
  {
    "sha": "1886642f6470ff32609dc80cf2bf7b019ba3ab10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODg2NjQyZjY0NzBmZjMyNjA5ZGM4MGNmMmJmN2IwMTliYTNhYjEw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T20:13:36Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Use existing chain member in CChainState::AcceptBlock",
      "tree": {
        "sha": "7fd8c1c2566e60c9c7cfc132e178da653746bc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fd8c1c2566e60c9c7cfc132e178da653746bc57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1886642f6470ff32609dc80cf2bf7b019ba3ab10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1886642f6470ff32609dc80cf2bf7b019ba3ab10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1886642f6470ff32609dc80cf2bf7b019ba3ab10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1886642f6470ff32609dc80cf2bf7b019ba3ab10/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55a2f2cf55b4fa3cc2b7e701917965323a44c020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a2f2cf55b4fa3cc2b7e701917965323a44c020",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55a2f2cf55b4fa3cc2b7e701917965323a44c020"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cce80f6ccf322bf84bc4e983075f6db884efecf8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1886642f6470ff32609dc80cf2bf7b019ba3ab10/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1886642f6470ff32609dc80cf2bf7b019ba3ab10/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1886642f6470ff32609dc80cf2bf7b019ba3ab10",
        "patch": "@@ -3765,8 +3765,9 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n \n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n+    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n-        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, ::ChainActive(), chainparams, dbp);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, chainparams, dbp);\n         if (blockPos.IsNull()) {\n             state.Error(strprintf(\"%s: Failed to find position to write new block to disk\", __func__));\n             return false;"
      }
    ]
  },
  {
    "sha": "f5ee2f37742da70d1731508e647dccd9b6035a7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWVlMmYzNzc0MmRhNzBkMTczMTUwOGU2NDdkY2NkOWI2MDM1YTdj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T20:13:50Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:50:02Z"
      },
      "message": "validation: Use existing chain member in CChainState::LoadGenesisBlock",
      "tree": {
        "sha": "bae9b5fea60a801e54949c7a2aab199cd6b39bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bae9b5fea60a801e54949c7a2aab199cd6b39bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5ee2f37742da70d1731508e647dccd9b6035a7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ee2f37742da70d1731508e647dccd9b6035a7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ee2f37742da70d1731508e647dccd9b6035a7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ee2f37742da70d1731508e647dccd9b6035a7c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1886642f6470ff32609dc80cf2bf7b019ba3ab10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1886642f6470ff32609dc80cf2bf7b019ba3ab10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1886642f6470ff32609dc80cf2bf7b019ba3ab10"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e5ea20f22e5f7d28aa67e83a917c615315e76d44",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5ee2f37742da70d1731508e647dccd9b6035a7c/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5ee2f37742da70d1731508e647dccd9b6035a7c/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f5ee2f37742da70d1731508e647dccd9b6035a7c",
        "patch": "@@ -4607,9 +4607,10 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n     if (m_blockman.m_block_index.count(chainparams.GenesisBlock().GetHash()))\n         return true;\n \n+    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n-        FlatFilePos blockPos = SaveBlockToDisk(block, 0, ::ChainActive(), chainparams, nullptr);\n+        FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, chainparams, nullptr);\n         if (blockPos.IsNull())\n             return error(\"%s: writing genesis block to disk failed\", __func__);\n         CBlockIndex *pindex = m_blockman.AddToBlockIndex(block);"
      }
    ]
  },
  {
    "sha": "15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWI2ZTZhZDk2NmU5OWZlMDY0MGNkNWRjMWE5YjJhZDQ1MmVkOTMx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-22T19:33:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "COMMITS AFTER THIS ARE NON-BASE",
      "tree": {
        "sha": "bae9b5fea60a801e54949c7a2aab199cd6b39bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bae9b5fea60a801e54949c7a2aab199cd6b39bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5ee2f37742da70d1731508e647dccd9b6035a7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5ee2f37742da70d1731508e647dccd9b6035a7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5ee2f37742da70d1731508e647dccd9b6035a7c"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "f80378c8a52312876aa48304a86521ba65785538",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODAzNzhjOGE1MjMxMjg3NmFhNDgzMDRhODY1MjFiYTY1Nzg1NTM4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-11-05T00:25:46Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "miner: Pass in chainstate to BlockAssembler::CreateNewBlock",
      "tree": {
        "sha": "8489af7ad776d4bd012c8d05b546048219ea2128",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8489af7ad776d4bd012c8d05b546048219ea2128"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f80378c8a52312876aa48304a86521ba65785538",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80378c8a52312876aa48304a86521ba65785538",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f80378c8a52312876aa48304a86521ba65785538",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80378c8a52312876aa48304a86521ba65785538/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15b6e6ad966e99fe0640cd5dc1a9b2ad452ed931"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e0e5ad41feebc43432c5bcad5c308f3479881794",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80378c8a52312876aa48304a86521ba65785538/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80378c8a52312876aa48304a86521ba65785538/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f80378c8a52312876aa48304a86521ba65785538",
        "patch": "@@ -100,6 +100,11 @@ Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n \n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+{\n+    return CreateNewBlock(::ChainstateActive(), scriptPubKeyIn);\n+}\n+\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();\n \n@@ -117,7 +122,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*chainstate.m_chain.Tip()));\n+    CBlockIndex* pindexPrev = chainstate.m_chain.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n@@ -176,7 +182,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), *pblock, pindexPrev, false, false)) {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n+    if (!TestBlockValidity(state, chainparams, chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "95f267e491a2ec1247bb2033bdfd98d24ec2c352",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80378c8a52312876aa48304a86521ba65785538/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80378c8a52312876aa48304a86521ba65785538/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=f80378c8a52312876aa48304a86521ba65785538",
        "patch": "@@ -159,6 +159,7 @@ class BlockAssembler\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n     static Optional<int64_t> m_last_block_num_txs;\n     static Optional<int64_t> m_last_block_weight;"
      }
    ]
  },
  {
    "sha": "363d6d53515675fdec679f1ed6116d5ebae6aa55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjNkNmQ1MzUxNTY3NWZkZWM2NzlmMWVkNjExNmQ1ZWJhZTZhYTU1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-11-05T00:34:22Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "scripted-diff: Invoke CreateNewBlock with chainstate\n\n-BEGIN VERIFY SCRIPT-\nfind_regex='(\\.|->)CreateNewBlock\\(' \\\n    && git grep -l -E \"$find_regex\" -- src \\\n        | grep -v '^src/miner\\.\\(cpp\\|h\\)$' \\\n        | xargs sed -i -E 's@'\"$find_regex\"'@\\0::ChainstateActive(), @g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "dce9e0ba7abe07f61b03eb256027b4abbc473264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dce9e0ba7abe07f61b03eb256027b4abbc473264"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/363d6d53515675fdec679f1ed6116d5ebae6aa55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363d6d53515675fdec679f1ed6116d5ebae6aa55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/363d6d53515675fdec679f1ed6116d5ebae6aa55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363d6d53515675fdec679f1ed6116d5ebae6aa55/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f80378c8a52312876aa48304a86521ba65785538",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80378c8a52312876aa48304a86521ba65785538",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f80378c8a52312876aa48304a86521ba65785538"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 27,
      "deletions": 27
    },
    "files": [
      {
        "sha": "c1602a1af39e188aba5547af67f3d75056ec5aeb",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -150,7 +150,7 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -358,7 +358,7 @@ static RPCHelpMan generateblock()\n         LOCK(cs_main);\n \n         CTxMemPool empty_mempool;\n-        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(coinbase_script));\n+        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(::ChainstateActive(), coinbase_script));\n         if (!blocktemplate) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         }\n@@ -747,7 +747,7 @@ static RPCHelpMan getblocktemplate()\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "04da10715f3298a368d620cb19d9d3bf47fabad8",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -62,7 +62,7 @@ CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n     const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;"
      },
      {
        "sha": "d7bc5c29be7d7f6b7df1e7d8464e318c02c65b46",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -122,7 +122,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     uint256 hashHighFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -142,7 +142,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -156,7 +156,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -177,7 +177,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -190,7 +190,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n \n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     LOCK(m_node.mempool->cs);\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n \n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n     m_node.mempool->clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // block size > limit\n@@ -309,13 +309,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // child with higher feerate than parent\n@@ -332,7 +332,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // coinbase in *m_node.mempool, template creation fails\n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // give it a fee so it'll get mined\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     m_node.mempool->clear();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n@@ -357,7 +357,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // subsidy changing\n@@ -373,7 +373,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n     // Extend to a 210000-long block chain.\n     while (::ChainActive().Tip()->nHeight < 210000) {\n         CBlockIndex* prev = ::ChainActive().Tip();\n@@ -385,7 +385,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         ::ChainActive().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n \n     // invalid p2sh txn in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -402,7 +402,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n     m_node.mempool->clear();\n \n     // Delete the dummy blocks again.\n@@ -490,7 +490,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -503,7 +503,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     ::ChainActive().Tip()->nHeight++;\n     SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n     ::ChainActive().Tip()->nHeight--;"
      },
      {
        "sha": "ba1edba0ae3288d80dbca47d3aaf2a20fbd41e17",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -42,7 +42,7 @@ std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coi\n {\n     auto block = std::make_shared<CBlock>(\n         BlockAssembler{*Assert(node.mempool), Params()}\n-            .CreateNewBlock(coinbase_scriptPubKey)\n+            .CreateNewBlock(::ChainstateActive(), coinbase_scriptPubKey)\n             ->block);\n \n     LOCK(cs_main);"
      },
      {
        "sha": "34d040492cc62f9d0b2d193521980aa9430b49db",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -215,7 +215,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(scriptPubKey)->block;\n+    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {"
      },
      {
        "sha": "39e9cc6954210a61a9036c517964edd8903850e5",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/363d6d53515675fdec679f1ed6116d5ebae6aa55/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "patch": "@@ -67,7 +67,7 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n     CScript pubKey;\n     pubKey << i++ << OP_TRUE;\n \n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), pubKey);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(witness_commitment_index)\n {\n     CScript pubKey;\n     pubKey << 1 << OP_TRUE;\n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), pubKey);\n     CBlock pblock = ptemplate->block;\n \n     CTxOut witness;"
      }
    ]
  },
  {
    "sha": "ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjUzMjYzMDBmNmVhYjkwYjdkNWI5MjgxNjNmMGFjMDBmOGJlNWVk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T20:46:16Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "miner: Remove old CreateNewBlock w/o chainstate param",
      "tree": {
        "sha": "4e91dcd7cc91c27962960e20ac44767afc371395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e91dcd7cc91c27962960e20ac44767afc371395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff5326300f6eab90b7d5b928163f0ac00f8be5ed/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/363d6d53515675fdec679f1ed6116d5ebae6aa55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/363d6d53515675fdec679f1ed6116d5ebae6aa55"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "444edb697637d2bba56f47a2028658dab4d39815",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff5326300f6eab90b7d5b928163f0ac00f8be5ed/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff5326300f6eab90b7d5b928163f0ac00f8be5ed/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
        "patch": "@@ -99,11 +99,6 @@ void BlockAssembler::resetBlock()\n Optional<int64_t> BlockAssembler::m_last_block_num_txs{nullopt};\n Optional<int64_t> BlockAssembler::m_last_block_weight{nullopt};\n \n-std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n-{\n-    return CreateNewBlock(::ChainstateActive(), scriptPubKeyIn);\n-}\n-\n std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn)\n {\n     int64_t nTimeStart = GetTimeMicros();"
      },
      {
        "sha": "9cbec35cc5e023db8a53884d7c88eb6a050d98c8",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff5326300f6eab90b7d5b928163f0ac00f8be5ed/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff5326300f6eab90b7d5b928163f0ac00f8be5ed/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
        "patch": "@@ -158,7 +158,6 @@ class BlockAssembler\n     explicit BlockAssembler(const CTxMemPool& mempool, const CChainParams& params, const Options& options);\n \n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(CChainState& chainstate, const CScript& scriptPubKeyIn);\n \n     static Optional<int64_t> m_last_block_num_txs;"
      }
    ]
  },
  {
    "sha": "4620ba194acc269681168497144a9952d8e0fe47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjIwYmExOTRhY2MyNjk2ODExNjg0OTcxNDRhOTk1MmQ4ZTBmZTQ3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T18:20:25Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "miner: Pass in blockman to ::RegenerateCommitments\n\nREQUIRES ATTENTION",
      "tree": {
        "sha": "6024c7fdc8ad73d694ef52f5f7e243917f677f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6024c7fdc8ad73d694ef52f5f7e243917f677f82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4620ba194acc269681168497144a9952d8e0fe47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4620ba194acc269681168497144a9952d8e0fe47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4620ba194acc269681168497144a9952d8e0fe47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4620ba194acc269681168497144a9952d8e0fe47/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff5326300f6eab90b7d5b928163f0ac00f8be5ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff5326300f6eab90b7d5b928163f0ac00f8be5ed"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fbaef0f22450dccdcdc0394727a2b6e2c86dc7d5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4620ba194acc269681168497144a9952d8e0fe47/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4620ba194acc269681168497144a9952d8e0fe47/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4620ba194acc269681168497144a9952d8e0fe47",
        "patch": "@@ -39,13 +39,13 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-void RegenerateCommitments(CBlock& block)\n+void RegenerateCommitments(CBlock& block, BlockManager& blockman)\n {\n     CMutableTransaction tx{*block.vtx.at(0)};\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    GenerateCoinbaseCommitment(block, WITH_LOCK(cs_main, return g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+    GenerateCoinbaseCommitment(block, WITH_LOCK(::cs_main, assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman)); return blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n }"
      },
      {
        "sha": "a67fec6dd89ee163b6e84c359f67490abeba2685",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4620ba194acc269681168497144a9952d8e0fe47/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4620ba194acc269681168497144a9952d8e0fe47/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=4620ba194acc269681168497144a9952d8e0fe47",
        "patch": "@@ -202,6 +202,6 @@ void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);\n \n /** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */\n-void RegenerateCommitments(CBlock& block);\n+void RegenerateCommitments(CBlock& block, BlockManager& blockman);\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "d9eaccd4dc7bdd5d6fe2256097380041360ff141",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4620ba194acc269681168497144a9952d8e0fe47/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4620ba194acc269681168497144a9952d8e0fe47/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4620ba194acc269681168497144a9952d8e0fe47",
        "patch": "@@ -369,7 +369,7 @@ static RPCHelpMan generateblock()\n \n     // Add transactions\n     block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n-    RegenerateCommitments(block);\n+    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n \n     {\n         LOCK(cs_main);"
      },
      {
        "sha": "55ed2e8e3fa5c853c57521937e0ce7012fd5cecb",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4620ba194acc269681168497144a9952d8e0fe47/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4620ba194acc269681168497144a9952d8e0fe47/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=4620ba194acc269681168497144a9952d8e0fe47",
        "patch": "@@ -221,7 +221,7 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     for (const CMutableTransaction& tx : txns) {\n         block.vtx.push_back(MakeTransactionRef(tx));\n     }\n-    RegenerateCommitments(block);\n+    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      }
    ]
  },
  {
    "sha": "05083dc1277bb47fc735e1b53437ccdc340e8fb0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTA4M2RjMTI3N2JiNDdmYzczNWUxYjUzNDM3Y2NkYzM0MGU4ZmIw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-01T20:15:57Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "node/coinstats: Pass in BlockManager to GetUTXOStats",
      "tree": {
        "sha": "463b0a9fa63b6fc4184c4716f3d0be69cdc2002e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/463b0a9fa63b6fc4184c4716f3d0be69cdc2002e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05083dc1277bb47fc735e1b53437ccdc340e8fb0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05083dc1277bb47fc735e1b53437ccdc340e8fb0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05083dc1277bb47fc735e1b53437ccdc340e8fb0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05083dc1277bb47fc735e1b53437ccdc340e8fb0/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4620ba194acc269681168497144a9952d8e0fe47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4620ba194acc269681168497144a9952d8e0fe47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4620ba194acc269681168497144a9952d8e0fe47"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2e06edee6c2b2b58dde23253d952f113b9ca65ee",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "patch": "@@ -54,7 +54,7 @@ static void ApplyStats(CCoinsStats& stats, std::nullptr_t, const uint256& hash,\n \n //! Calculate statistics about the unspent transaction output set\n template <typename T>\n-static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point)\n+static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point)\n {\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n@@ -63,7 +63,8 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        stats.nHeight = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n+        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n+        stats.nHeight = blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n     }\n \n     PrepareHash(hash_obj, stats);\n@@ -97,15 +98,15 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     return true;\n }\n \n-bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, CoinStatsHashType hash_type, const std::function<void()>& interruption_point)\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, CoinStatsHashType hash_type, const std::function<void()>& interruption_point)\n {\n     switch (hash_type) {\n     case(CoinStatsHashType::HASH_SERIALIZED): {\n         CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-        return GetUTXOStats(view, stats, ss, interruption_point);\n+        return GetUTXOStats(view, blockman, stats, ss, interruption_point);\n     }\n     case(CoinStatsHashType::NONE): {\n-        return GetUTXOStats(view, stats, nullptr, interruption_point);\n+        return GetUTXOStats(view, blockman, stats, nullptr, interruption_point);\n     }\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);"
      },
      {
        "sha": "29eb36e300109cd7d08da1e9703d4251fc50ec48",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <uint256.h>\n+#include <validation.h>\n \n #include <cstdint>\n #include <functional>\n@@ -35,6 +36,6 @@ struct CCoinsStats\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, const CoinStatsHashType hash_type, const std::function<void()>& interruption_point = {});\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const CoinStatsHashType hash_type, const std::function<void()>& interruption_point = {});\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "8e6457ee7445c8202b58a7481c4b02740ab22cf7",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "patch": "@@ -1080,9 +1080,9 @@ static RPCHelpMan gettxoutsetinfo()\n \n     const CoinStatsHashType hash_type = ParseHashType(request.params[0], CoinStatsHashType::HASH_SERIALIZED);\n \n-    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    CCoinsView* coins_view = WITH_LOCK(::cs_main, return &::ChainstateActive().CoinsDB());\n     NodeContext& node = EnsureNodeContext(request.context);\n-    if (GetUTXOStats(coins_view, stats, hash_type, node.rpc_interruption_point)) {\n+    if (GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -2435,7 +2435,8 @@ static RPCHelpMan dumptxoutset()\n \n         ::ChainstateActive().ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&::ChainstateActive().CoinsDB(), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n+        CCoinsView* coins_view = WITH_LOCK(::cs_main, return &::ChainstateActive().CoinsDB());\n+        if (!GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n "
      },
      {
        "sha": "995b0e1a351d5d04325e834137edd598f5363986",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05083dc1277bb47fc735e1b53437ccdc340e8fb0/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "patch": "@@ -263,7 +263,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 CCoinsStats stats;\n                 bool expected_code_path = false;\n                 try {\n-                    (void)GetUTXOStats(&coins_view_cache, stats, CoinStatsHashType::HASH_SERIALIZED);\n+                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, CoinStatsHashType::HASH_SERIALIZED);\n                 } catch (const std::logic_error&) {\n                     expected_code_path = true;\n                 }"
      }
    ]
  },
  {
    "sha": "973fbe888f51e3a82644a2ff6a0611172cad283c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzNmYmU4ODhmNTFlM2E4MjY0NGEyZmY2YTA2MTExNzJjYWQyODNj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T18:12:04Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "node: Use existing NodeContext",
      "tree": {
        "sha": "da02aae8d18e157c03e900e3ff22d9d84334b15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da02aae8d18e157c03e900e3ff22d9d84334b15a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/973fbe888f51e3a82644a2ff6a0611172cad283c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/973fbe888f51e3a82644a2ff6a0611172cad283c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/973fbe888f51e3a82644a2ff6a0611172cad283c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/973fbe888f51e3a82644a2ff6a0611172cad283c/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05083dc1277bb47fc735e1b53437ccdc340e8fb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05083dc1277bb47fc735e1b53437ccdc340e8fb0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "263dcff6570b86f6c193d647ff2b93b3c0458209",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/973fbe888f51e3a82644a2ff6a0611172cad283c/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/973fbe888f51e3a82644a2ff6a0611172cad283c/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=973fbe888f51e3a82644a2ff6a0611172cad283c",
        "patch": "@@ -12,7 +12,8 @@ void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n     assert(node.mempool);\n     LOCK2(cs_main, node.mempool->cs);\n-    CCoinsViewCache& chain_view = ::ChainstateActive().CoinsTip();\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n+    CCoinsViewCache& chain_view = node.chainman->ActiveChainstate().CoinsTip();\n     CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {\n         if (!mempool_view.GetCoin(coin.first, coin.second)) {"
      },
      {
        "sha": "b47695a10b183bf4a62aae2004d5fcd20f5665dc",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/973fbe888f51e3a82644a2ff6a0611172cad283c/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/973fbe888f51e3a82644a2ff6a0611172cad283c/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=973fbe888f51e3a82644a2ff6a0611172cad283c",
        "patch": "@@ -39,9 +39,10 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n \n     { // cs_main scope\n     LOCK(cs_main);\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     // If the transaction is already confirmed in the chain, don't do anything\n     // and return early.\n-    CCoinsViewCache &view = ::ChainstateActive().CoinsTip();\n+    CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();\n     for (size_t o = 0; o < tx->vout.size(); o++) {\n         const Coin& existingCoin = view.AccessCoin(COutPoint(hashTx, o));\n         // IsSpent doesn't mean the coin is spent, it means the output doesn't exist.\n@@ -55,15 +56,15 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n             // First, call ATMP with test_accept and check the fee. If ATMP\n             // fails here, return error immediately.\n             CAmount fee{0};\n-            if (!AcceptToMemoryPool(::ChainstateActive(), *node.mempool, state, tx,\n+            if (!AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, state, tx,\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee)) {\n                 return HandleATMPError(state, err_string);\n             } else if (fee > max_tx_fee) {\n                 return TransactionError::MAX_FEE_EXCEEDED;\n             }\n         }\n         // Try to submit the transaction to the mempool.\n-        if (!AcceptToMemoryPool(::ChainstateActive(), *node.mempool, state, tx,\n+        if (!AcceptToMemoryPool(node.chainman->ActiveChainstate(), *node.mempool, state, tx,\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */)) {\n             return HandleATMPError(state, err_string);\n         }"
      }
    ]
  },
  {
    "sha": "b652f403a57560a3e1ea43384f39f5f10ee82e3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjUyZjQwM2E1NzU2MGEzZTFlYTQzMzg0ZjM5ZjVmMTBlZTgyZTNh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T19:24:55Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "node/ifaces: NodeImpl: Use existing NodeContext member",
      "tree": {
        "sha": "b6ccdda5de4f2d44eca18ac034ed7e58f1d5aa44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6ccdda5de4f2d44eca18ac034ed7e58f1d5aa44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b652f403a57560a3e1ea43384f39f5f10ee82e3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b652f403a57560a3e1ea43384f39f5f10ee82e3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b652f403a57560a3e1ea43384f39f5f10ee82e3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b652f403a57560a3e1ea43384f39f5f10ee82e3a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "973fbe888f51e3a82644a2ff6a0611172cad283c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/973fbe888f51e3a82644a2ff6a0611172cad283c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/973fbe888f51e3a82644a2ff6a0611172cad283c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 15,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6c829e472310879150dc08e482140486831585c0",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 7,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b652f403a57560a3e1ea43384f39f5f10ee82e3a/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b652f403a57560a3e1ea43384f39f5f10ee82e3a/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=b652f403a57560a3e1ea43384f39f5f10ee82e3a",
        "patch": "@@ -182,18 +182,21 @@ class NodeImpl : public Node\n     int getNumBlocks() override\n     {\n         LOCK(::cs_main);\n-        return ::ChainActive().Height();\n+        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n+        return m_context->chainman->ActiveChain().Height();\n     }\n     uint256 getBestBlockHash() override\n     {\n-        const CBlockIndex* tip = WITH_LOCK(::cs_main, return ::ChainActive().Tip());\n+        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n+        const CBlockIndex* tip = WITH_LOCK(::cs_main, return m_context->chainman->ActiveChain().Tip());\n         return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n     }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n-        if (::ChainActive().Tip()) {\n-            return ::ChainActive().Tip()->GetBlockTime();\n+        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n+        if (m_context->chainman->ActiveChain().Tip()) {\n+            return m_context->chainman->ActiveChain().Tip()->GetBlockTime();\n         }\n         return Params().GenesisBlock().GetBlockTime(); // Genesis block's time of current network\n     }\n@@ -202,11 +205,15 @@ class NodeImpl : public Node\n         const CBlockIndex* tip;\n         {\n             LOCK(::cs_main);\n-            tip = ::ChainActive().Tip();\n+            assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n+            tip = m_context->chainman->ActiveChain().Tip();\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n-    bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n+    bool isInitialBlockDownload() override {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n+        return m_context->chainman->ActiveChainstate().IsInitialBlockDownload();\n+    }\n     bool getReindex() override { return ::fReindex; }\n     bool getImporting() override { return ::fImporting; }\n     void setNetworkActive(bool active) override\n@@ -231,7 +238,8 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        return ::ChainstateActive().CoinsTip().GetCoin(output, coin);\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n+        return m_context->chainman->ActiveChainstate().CoinsTip().GetCoin(output, coin);\n     }\n     WalletClient& walletClient() override\n     {"
      }
    ]
  },
  {
    "sha": "1bd97da9d49c3f8243b87b6c5478552925e8aef3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmQ5N2RhOWQ0OWMzZjgyNDNiODdiNmM1NDc4NTUyOTI1ZThhZWYz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-18T19:30:28Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "node/ifaces: ChainImpl: Use existing NodeContext member",
      "tree": {
        "sha": "ab84b591269cf4be76076a37a9f5ab04dab5152f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab84b591269cf4be76076a37a9f5ab04dab5152f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bd97da9d49c3f8243b87b6c5478552925e8aef3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bd97da9d49c3f8243b87b6c5478552925e8aef3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bd97da9d49c3f8243b87b6c5478552925e8aef3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bd97da9d49c3f8243b87b6c5478552925e8aef3/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b652f403a57560a3e1ea43384f39f5f10ee82e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b652f403a57560a3e1ea43384f39f5f10ee82e3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b652f403a57560a3e1ea43384f39f5f10ee82e3a"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 24,
      "deletions": 11
    },
    "files": [
      {
        "sha": "506e55cd9a12f421a5a4ac75eafa4e4ca3bb4379",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 11,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bd97da9d49c3f8243b87b6c5478552925e8aef3/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bd97da9d49c3f8243b87b6c5478552925e8aef3/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=1bd97da9d49c3f8243b87b6c5478552925e8aef3",
        "patch": "@@ -449,13 +449,15 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        return CheckFinalTx(::ChainActive().Tip(), tx);\n+        assert(std::addressof(::ChainActive()) == std::addressof(m_node.chainman->ActiveChain()));\n+        return CheckFinalTx(m_node.chainman->ActiveChain().Tip(), tx);\n     }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        if (CBlockIndex* fork = g_chainman.m_blockman.FindForkInGlobalIndex(active, locator)) {\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n         return nullopt;\n@@ -464,7 +466,8 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        return FillBlock(g_chainman.m_blockman.LookupBlockIndex(hash), block, lock, active);\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        return FillBlock(m_node.chainman->m_blockman.LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n     {\n@@ -476,7 +479,8 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        if (const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        if (const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock, active);\n             }\n@@ -487,17 +491,21 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        const CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n-        const CBlockIndex* ancestor = g_chainman.m_blockman.LookupBlockIndex(ancestor_hash);\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash);\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        const CBlockIndex* ancestor = m_node.chainman->m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock, active);\n     }\n     bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        const CBlockIndex* block1 = g_chainman.m_blockman.LookupBlockIndex(block_hash1);\n-        const CBlockIndex* block2 = g_chainman.m_blockman.LookupBlockIndex(block_hash2);\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        const CBlockIndex* block1 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash1);\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        const CBlockIndex* block2 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n         // output uninitialized.\n@@ -507,7 +515,8 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        return GuessVerificationProgress(Params().TxData(), g_chainman.m_blockman.LookupBlockIndex(block_hash));\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        return GuessVerificationProgress(Params().TxData(), m_node.chainman->m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n     {\n@@ -519,7 +528,8 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        if (CBlockIndex* block = g_chainman.m_blockman.LookupBlockIndex(block_hash)) {\n+        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n+        if (CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n                 // Check pprev to not segfault if min_height is too low\n@@ -603,7 +613,10 @@ class ChainImpl : public Chain\n         return ::fHavePruned;\n     }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n-    bool isInitialBlockDownload() override { return ::ChainstateActive().IsInitialBlockDownload(); }\n+    bool isInitialBlockDownload() override {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_node.chainman->ActiveChainstate()));\n+        return m_node.chainman->ActiveChainstate().IsInitialBlockDownload();\n+    }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }"
      }
    ]
  },
  {
    "sha": "2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWQ3MjM5YTg0MzhlZTAzNWU0OWY4OWI1ZTlmNmViZDc4MTU4MmQ0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-22T16:43:18Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "net_processing: Move some static functions to PeerManager\n\n- BlockRequestAllowed\n- AlreadyHaveTx\n- AlreadyHaveBlock\n- ProcessGetBlockData\n- ProcessGetData\n- PrepareBlockFilterRequest\n- ProcessGetCFilters\n- ProcessGetCFHeaders\n- ProcessGetCFCheckPt\n\nMoved out of anonymous namespace:\n- ProcessBlockAvailability\n- UpdateBlockAvailability\n- CanDirectFetch\n- FindNextBlocksToDownload",
      "tree": {
        "sha": "f025284f51cecce6dfb0fa5bcb4e01cd3eff8573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f025284f51cecce6dfb0fa5bcb4e01cd3eff8573"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad7239a8438ee035e49f89b5e9f6ebd781582d4/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bd97da9d49c3f8243b87b6c5478552925e8aef3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bd97da9d49c3f8243b87b6c5478552925e8aef3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bd97da9d49c3f8243b87b6c5478552925e8aef3"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 74,
      "deletions": 53
    },
    "files": [
      {
        "sha": "e171d3fea3ca5319f229333976c30d45735ec63b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 53,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad7239a8438ee035e49f89b5e9f6ebd781582d4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad7239a8438ee035e49f89b5e9f6ebd781582d4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
        "patch": "@@ -345,6 +345,27 @@ class PeerManagerImpl final : public PeerManager\n      * their own locks.\n      */\n     std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+\n+    void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    void ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman);\n+    void ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(!cs_main, peer.m_getdata_requests_mutex);\n+    bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n+                                   BlockFilterType filter_type, uint32_t start_height,\n+                                   const uint256& stop_hash, uint32_t max_height_diff,\n+                                   const CBlockIndex*& stop_index,\n+                                   BlockFilterIndex*& filter_index);\n+    void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+                                   CConnman& connman);\n+    void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+                                    CConnman& connman);\n+    void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+                                    CConnman& connman);\n };\n } // namespace\n \n@@ -670,41 +691,6 @@ static bool MarkBlockAsInFlight(CTxMemPool& mempool, NodeId nodeid, const uint25\n     return true;\n }\n \n-/** Check whether the last unknown block a peer advertised is not yet known. */\n-static void ProcessBlockAvailability(NodeId nodeid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    CNodeState *state = State(nodeid);\n-    assert(state != nullptr);\n-\n-    if (!state->hashLastUnknownBlock.IsNull()) {\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n-        if (pindex && pindex->nChainWork > 0) {\n-            if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n-                state->pindexBestKnownBlock = pindex;\n-            }\n-            state->hashLastUnknownBlock.SetNull();\n-        }\n-    }\n-}\n-\n-/** Update tracking information about which blocks a peer is assumed to have. */\n-static void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    CNodeState *state = State(nodeid);\n-    assert(state != nullptr);\n-\n-    ProcessBlockAvailability(nodeid);\n-\n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-    if (pindex && pindex->nChainWork > 0) {\n-        // An actually better block was announced.\n-        if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n-            state->pindexBestKnownBlock = pindex;\n-        }\n-    } else {\n-        // An unknown block was announced; just assume that the latest one is the best one.\n-        state->hashLastUnknownBlock = hash;\n-    }\n-}\n-\n /**\n  * When a peer sends us a valid block, instruct it to announce blocks to us\n  * using CMPCTBLOCK if possible by adding its nodeid to the end of\n@@ -759,11 +745,6 @@ static bool TipMayBeStale(const Consensus::Params &consensusParams) EXCLUSIVE_LO\n     return g_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n }\n \n-static bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n-{\n-    return ::ChainActive().Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n-}\n-\n static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (state->pindexBestKnownBlock && pindex == state->pindexBestKnownBlock->GetAncestor(pindex->nHeight))\n@@ -773,9 +754,51 @@ static bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex) EXCLUSIV\n     return false;\n }\n \n+} // namespace\n+\n+/** Check whether the last unknown block a peer advertised is not yet known. */\n+void PeerManagerImpl::ProcessBlockAvailability(NodeId nodeid) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != nullptr);\n+\n+    if (!state->hashLastUnknownBlock.IsNull()) {\n+        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n+        if (pindex && pindex->nChainWork > 0) {\n+            if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n+                state->pindexBestKnownBlock = pindex;\n+            }\n+            state->hashLastUnknownBlock.SetNull();\n+        }\n+    }\n+}\n+\n+/** Update tracking information about which blocks a peer is assumed to have. */\n+void PeerManagerImpl::UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n+    CNodeState *state = State(nodeid);\n+    assert(state != nullptr);\n+\n+    ProcessBlockAvailability(nodeid);\n+\n+    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+    if (pindex && pindex->nChainWork > 0) {\n+        // An actually better block was announced.\n+        if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n+            state->pindexBestKnownBlock = pindex;\n+        }\n+    } else {\n+        // An unknown block was announced; just assume that the latest one is the best one.\n+        state->hashLastUnknownBlock = hash;\n+    }\n+}\n+\n+bool PeerManagerImpl::CanDirectFetch(const Consensus::Params &consensusParams)\n+{\n+    return ::ChainActive().Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n+}\n+\n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams)\n {\n     if (count == 0)\n         return;\n@@ -862,9 +885,7 @@ static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vec\n     }\n }\n \n-} // namespace\n-\n-void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n+ void PeerManagerImpl::PushNodeVersion(CNode& pnode, int64_t nTime)\n {\n     // Note that pnode->GetLocalServices() is a reflection of the local\n     // services we were offering when the CNode object was created for this\n@@ -1305,7 +1326,7 @@ bool PeerManagerImpl::MaybePunishNodeForTx(NodeId nodeid, const TxValidationStat\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     AssertLockHeld(cs_main);\n     if (::ChainActive().Contains(pindex)) return true;\n@@ -1563,7 +1584,7 @@ void PeerManagerImpl::BlockChecked(const CBlock& block, const BlockValidationSta\n //\n \n \n-bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool)\n {\n     assert(recentRejects);\n     if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n@@ -1594,7 +1615,7 @@ bool static AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool) EXCLU\n     return recentRejects->contains(hash) || mempool.exists(gtxid);\n }\n \n-bool static AlreadyHaveBlock(const uint256& block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool PeerManagerImpl::AlreadyHaveBlock(const uint256& block_hash)\n {\n     return g_chainman.m_blockman.LookupBlockIndex(block_hash) != nullptr;\n }\n@@ -1669,7 +1690,7 @@ static void RelayAddress(const CNode& originator,\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman)\n+void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman)\n {\n     bool send = false;\n     std::shared_ptr<const CBlock> a_recent_block;\n@@ -1853,7 +1874,7 @@ static CTransactionRef FindTxForGetData(const CTxMemPool& mempool, const CNode&\n     return {};\n }\n \n-void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc) EXCLUSIVE_LOCKS_REQUIRED(!cs_main, peer.m_getdata_requests_mutex)\n+void PeerManagerImpl::ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, CConnman& connman, CTxMemPool& mempool, const std::atomic<bool>& interruptMsgProc)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -2263,7 +2284,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n-static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n+bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_params,\n                                       BlockFilterType filter_type, uint32_t start_height,\n                                       const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n@@ -2326,7 +2347,7 @@ static bool PrepareBlockFilterRequest(CNode& peer, const CChainParams& chain_par\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+void PeerManagerImpl::ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                CConnman& connman)\n {\n     uint8_t filter_type_ser;\n@@ -2368,7 +2389,7 @@ static void ProcessGetCFilters(CNode& peer, CDataStream& vRecv, const CChainPara\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+void PeerManagerImpl::ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                 CConnman& connman)\n {\n     uint8_t filter_type_ser;\n@@ -2423,7 +2444,7 @@ static void ProcessGetCFHeaders(CNode& peer, CDataStream& vRecv, const CChainPar\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   connman         Pointer to the connection manager\n  */\n-static void ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n+void PeerManagerImpl::ProcessGetCFCheckPt(CNode& peer, CDataStream& vRecv, const CChainParams& chain_params,\n                                 CConnman& connman)\n {\n     uint8_t filter_type_ser;"
      }
    ]
  },
  {
    "sha": "4328d09e694c2be634afb79c54f0fe9167b4c813",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzI4ZDA5ZTY5NGMyYmU2MzRhZmI3OWM1NGYwZmU5MTY3YjRjODEz",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T18:24:29Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "scripted-diff: net_processing: Use existing chainman\n\n-BEGIN VERIFY SCRIPT-\nsed -i -E \\\n    -e 's/g_chainman/m_chainman/g' \\\n    -e 's@([^:])(Chain(state|)Active)@\\1::\\2@g' \\\n    -e 's@::Chain(state|)Active\\(\\)@m_chainman.ActiveChain\\1()@g' \\\n    -- src/net_processing.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9f6516bde4b8984e448aaaf55a171cdb16ec1fe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f6516bde4b8984e448aaaf55a171cdb16ec1fe0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4328d09e694c2be634afb79c54f0fe9167b4c813",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4328d09e694c2be634afb79c54f0fe9167b4c813",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4328d09e694c2be634afb79c54f0fe9167b4c813",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4328d09e694c2be634afb79c54f0fe9167b4c813/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad7239a8438ee035e49f89b5e9f6ebd781582d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad7239a8438ee035e49f89b5e9f6ebd781582d4"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 70,
      "deletions": 70
    },
    "files": [
      {
        "sha": "8ca0cd1b7c9ce2b7509a954729039f22eb153b1f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 70,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4328d09e694c2be634afb79c54f0fe9167b4c813/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4328d09e694c2be634afb79c54f0fe9167b4c813/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4328d09e694c2be634afb79c54f0fe9167b4c813",
        "patch": "@@ -762,7 +762,7 @@ void PeerManagerImpl::ProcessBlockAvailability(NodeId nodeid) {\n     assert(state != nullptr);\n \n     if (!state->hashLastUnknownBlock.IsNull()) {\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n+        const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(state->hashLastUnknownBlock);\n         if (pindex && pindex->nChainWork > 0) {\n             if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n                 state->pindexBestKnownBlock = pindex;\n@@ -779,7 +779,7 @@ void PeerManagerImpl::UpdateBlockAvailability(NodeId nodeid, const uint256 &hash\n \n     ProcessBlockAvailability(nodeid);\n \n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+    const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(hash);\n     if (pindex && pindex->nChainWork > 0) {\n         // An actually better block was announced.\n         if (state->pindexBestKnownBlock == nullptr || pindex->nChainWork >= state->pindexBestKnownBlock->nChainWork) {\n@@ -793,7 +793,7 @@ void PeerManagerImpl::UpdateBlockAvailability(NodeId nodeid, const uint256 &hash\n \n bool PeerManagerImpl::CanDirectFetch(const Consensus::Params &consensusParams)\n {\n-    return ::ChainActive().Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n+    return m_chainman.ActiveChain().Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n }\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n@@ -810,15 +810,15 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < ::ChainActive().Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < m_chainman.ActiveChain().Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }\n \n     if (state->pindexLastCommonBlock == nullptr) {\n         // Bootstrap quickly by guessing a parent of our best tip is the forking point.\n         // Guessing wrong in either direction is not a problem.\n-        state->pindexLastCommonBlock = ::ChainActive()[std::min(state->pindexBestKnownBlock->nHeight, ::ChainActive().Height())];\n+        state->pindexLastCommonBlock = m_chainman.ActiveChain()[std::min(state->pindexBestKnownBlock->nHeight, m_chainman.ActiveChain().Height())];\n     }\n \n     // If the peer reorganized, our previous pindexLastCommonBlock may not be an ancestor\n@@ -860,7 +860,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n-            if (pindex->nStatus & BLOCK_HAVE_DATA || ::ChainActive().Contains(pindex)) {\n+            if (pindex->nStatus & BLOCK_HAVE_DATA || m_chainman.ActiveChain().Contains(pindex)) {\n                 if (pindex->HaveTxsDownloaded())\n                     state->pindexLastCommonBlock = pindex;\n             } else if (mapBlocksInFlight.count(pindex->GetBlockHash()) == 0) {\n@@ -1329,7 +1329,7 @@ bool PeerManagerImpl::MaybePunishNodeForTx(NodeId nodeid, const TxValidationStat\n bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     AssertLockHeld(cs_main);\n-    if (::ChainActive().Contains(pindex)) return true;\n+    if (m_chainman.ActiveChain().Contains(pindex)) return true;\n     return pindex->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n         (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n@@ -1506,7 +1506,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n \n /**\n  * Update our best height and announce any block hashes which weren't previously\n- * in ::ChainActive() to our peers.\n+ * in m_chainman.ActiveChain() to our peers.\n  */\n void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n@@ -1568,7 +1568,7 @@ void PeerManagerImpl::BlockChecked(const CBlock& block, const BlockValidationSta\n     //    the tip yet so we have no way to check this directly here. Instead we\n     //    just check that there are currently no other blocks in flight.\n     else if (state.IsValid() &&\n-             !::ChainstateActive().IsInitialBlockDownload() &&\n+             !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n              mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n             MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, m_connman);\n@@ -1587,12 +1587,12 @@ void PeerManagerImpl::BlockChecked(const CBlock& block, const BlockValidationSta\n bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& mempool)\n {\n     assert(recentRejects);\n-    if (::ChainActive().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n+    if (m_chainman.ActiveChain().Tip()->GetBlockHash() != hashRecentRejectsChainTip) {\n         // If the chain tip has changed previously rejected transactions\n         // might be now valid, e.g. due to a nLockTime'd tx becoming valid,\n         // or a double-spend. Reset the rejects filter and give those\n         // txs a second chance.\n-        hashRecentRejectsChainTip = ::ChainActive().Tip()->GetBlockHash();\n+        hashRecentRejectsChainTip = m_chainman.ActiveChain().Tip()->GetBlockHash();\n         recentRejects->reset();\n     }\n \n@@ -1617,7 +1617,7 @@ bool PeerManagerImpl::AlreadyHaveTx(const GenTxid& gtxid, const CTxMemPool& memp\n \n bool PeerManagerImpl::AlreadyHaveBlock(const uint256& block_hash)\n {\n-    return g_chainman.m_blockman.LookupBlockIndex(block_hash) != nullptr;\n+    return m_chainman.m_blockman.LookupBlockIndex(block_hash) != nullptr;\n }\n \n void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman)\n@@ -1707,7 +1707,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n     bool need_activate_chain = false;\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n+        const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(inv.hash);\n         if (pindex) {\n             if (pindex->HaveTxsDownloaded() && !pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n                     pindex->IsValid(BLOCK_VALID_TREE)) {\n@@ -1722,13 +1722,13 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!::ChainstateActive().ActivateBestChain(state, chainparams, a_recent_block)) {\n+        if (!m_chainman.ActiveChainstate().ActivateBestChain(state, chainparams, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n \n     LOCK(cs_main);\n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(inv.hash);\n+    const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(inv.hash);\n     if (pindex) {\n         send = BlockRequestAllowed(pindex, consensusParams);\n         if (!send) {\n@@ -1750,7 +1750,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n     if (send && !pfrom.HasPermission(PF_NOBAN) && (\n-            (((pfrom.GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom.GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (::ChainActive().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n+            (((pfrom.GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom.GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (m_chainman.ActiveChain().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n         LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom.GetId());\n \n@@ -1817,7 +1817,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n                 // instead we respond with the full, non-compact block.\n                 bool fPeerWantsWitness = State(pfrom.GetId())->fWantsCmpctWitness;\n                 int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-                if (CanDirectFetch(consensusParams) && pindex->nHeight >= ::ChainActive().Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if (CanDirectFetch(consensusParams) && pindex->nHeight >= m_chainman.ActiveChain().Height() - MAX_CMPCTBLOCK_DEPTH) {\n                     if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n                         connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n                     } else {\n@@ -1838,7 +1838,7 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChain\n                 // and we want it right after the last block so they don't\n                 // wait for other stuff first.\n                 std::vector<CInv> vInv;\n-                vInv.push_back(CInv(MSG_BLOCK, ::ChainActive().Tip()->GetBlockHash()));\n+                vInv.push_back(CInv(MSG_BLOCK, m_chainman.ActiveChain().Tip()->GetBlockHash()));\n                 connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                 peer.m_continuation_block.SetNull();\n             }\n@@ -2018,9 +2018,9 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         //   don't connect before giving DoS points\n         // - Once a headers message is received that is valid and does connect,\n         //   nUnconnectingHeaders gets reset back to 0.\n-        if (!g_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+        if (!m_chainman.m_blockman.LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexBestHeader), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n@@ -2048,7 +2048,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n \n         // If we don't have the last header, then they'll have given us\n         // something new (if these headers are valid).\n-        if (!g_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n+        if (!m_chainman.m_blockman.LookupBlockIndex(hashLastBlock)) {\n             received_new_header = true;\n         }\n     }\n@@ -2076,27 +2076,27 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         // because it is set in UpdateBlockAvailability. Some nullptr checks\n         // are still present, however, as belt-and-suspenders.\n \n-        if (received_new_header && pindexLast->nChainWork > ::ChainActive().Tip()->nChainWork) {\n+        if (received_new_header && pindexLast->nChainWork > m_chainman.ActiveChain().Tip()->nChainWork) {\n             nodestate->m_last_block_announcement = GetTime();\n         }\n \n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of ::ChainActive().Tip or pindexBestHeader, continue\n+            // TODO: optimize: if pindexLast is an ancestor of m_chainman.ActiveChain().Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\",\n                                  pindexLast->nHeight, pfrom.GetId(), peer.m_starting_height);\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexLast), uint256()));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexLast), uint256()));\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(m_chainparams.GetConsensus());\n         // If this set of headers is valid and ends in a block with at least as\n         // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && ::ChainActive().Tip()->nChainWork <= pindexLast->nChainWork) {\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && m_chainman.ActiveChain().Tip()->nChainWork <= pindexLast->nChainWork) {\n             std::vector<const CBlockIndex*> vToFetch;\n             const CBlockIndex *pindexWalk = pindexLast;\n             // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n-            while (pindexWalk && !::ChainActive().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+            while (pindexWalk && !m_chainman.ActiveChain().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n                         (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n@@ -2109,7 +2109,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             // very large reorg at a time we think we're close to caught up to\n             // the main chain -- this shouldn't really happen.  Bail out on the\n             // direct fetch and rely on parallel download instead.\n-            if (!::ChainActive().Contains(pindexWalk)) {\n+            if (!m_chainman.ActiveChain().Contains(pindexWalk)) {\n                 LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n                         pindexLast->GetBlockHash().ToString(),\n                         pindexLast->nHeight);\n@@ -2142,15 +2142,15 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         }\n         // If we're in IBD, we want outbound peers that will serve us a useful\n         // chain. Disconnect peers that are on chains with insufficient work.\n-        if (::ChainstateActive().IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n             // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n             // headers to fetch from this peer.\n             if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n                 // This peer has too little work on their headers chain to help\n                 // us sync -- disconnect if it is an outbound disconnection\n                 // candidate.\n                 // Note: We compare their tip to nMinimumChainWork (rather than\n-                // ::ChainActive().Tip()) because we won't start block download\n+                // m_chainman.ActiveChain().Tip()) because we won't start block download\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n                 // as an anti-DoS measure.\n@@ -2167,7 +2167,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n         // thus always subject to eviction under the bad/lagging chain logic.\n         // See ChainSyncTimeoutState.\n         if (!pfrom.fDisconnect && pfrom.IsFullOutboundConn() && nodestate->pindexBestKnownBlock != nullptr) {\n-            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= ::ChainActive().Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= m_chainman.ActiveChain().Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n                 LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom.GetId());\n                 nodestate->m_chain_sync.m_protect = true;\n                 ++g_outbound_peers_with_protect_from_disconnect;\n@@ -2202,7 +2202,7 @@ void PeerManagerImpl::ProcessOrphanTx(std::set<uint256>& orphan_work_set)\n         TxValidationState state;\n         std::list<CTransactionRef> removed_txn;\n \n-        if (AcceptToMemoryPool(::ChainstateActive(), m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(m_chainman.ActiveChainstate(), m_mempool, state, porphanTx, &removed_txn, false /* bypass_limits */)) {\n             LogPrint(BCLog::MEMPOOL, \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n             RelayTransaction(orphanHash, porphanTx->GetWitnessHash(), m_connman);\n             for (unsigned int i = 0; i < porphanTx->vout.size(); i++) {\n@@ -2302,7 +2302,7 @@ bool PeerManagerImpl::PrepareBlockFilterRequest(CNode& peer, const CChainParams&\n \n     {\n         LOCK(cs_main);\n-        stop_index = g_chainman.m_blockman.LookupBlockIndex(stop_hash);\n+        stop_index = m_chainman.m_blockman.LookupBlockIndex(stop_hash);\n \n         // Check that the stop block exists and the peer would be allowed to fetch it.\n         if (!stop_index || !BlockRequestAllowed(stop_index, chain_params.GetConsensus())) {\n@@ -2624,7 +2624,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             //\n             // We skip this for block-relay-only peers to avoid potentially leaking\n             // information about our block-relay-only connections via address relay.\n-            if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n+            if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n                 FastRandomContext insecure_rand;\n@@ -2941,7 +2941,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         if (best_block != nullptr) {\n-            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), *best_block));\n+            m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexBestHeader), *best_block));\n             LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, best_block->ToString(), pfrom.GetId());\n         }\n \n@@ -2997,22 +2997,22 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!::ChainstateActive().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n+            if (!m_chainman.ActiveChainstate().ActivateBestChain(state, m_chainparams, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }\n \n         LOCK(cs_main);\n \n         // Find the last block the caller has in the main chain\n-        const CBlockIndex* pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n+        const CBlockIndex* pindex = m_chainman.m_blockman.FindForkInGlobalIndex(m_chainman.ActiveChain(), locator);\n \n         // Send the rest of the chain\n         if (pindex)\n-            pindex = ::ChainActive().Next(pindex);\n+            pindex = m_chainman.ActiveChain().Next(pindex);\n         int nLimit = 500;\n         LogPrint(BCLog::NET, \"getblocks %d to %s limit %d from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), nLimit, pfrom.GetId());\n-        for (; pindex; pindex = ::ChainActive().Next(pindex))\n+        for (; pindex; pindex = m_chainman.ActiveChain().Next(pindex))\n         {\n             if (pindex->GetBlockHash() == hashStop)\n             {\n@@ -3022,7 +3022,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n             // If pruning, don't inv blocks unless we have on disk and are likely to still have\n             // for some reasonable time window (1 hour) that block relay might require.\n             const int nPrunedBlocksLikelyToHave = MIN_BLOCKS_TO_KEEP - 3600 / m_chainparams.GetConsensus().nPowTargetSpacing;\n-            if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= ::ChainActive().Tip()->nHeight - nPrunedBlocksLikelyToHave))\n+            if (fPruneMode && (!(pindex->nStatus & BLOCK_HAVE_DATA) || pindex->nHeight <= m_chainman.ActiveChain().Tip()->nHeight - nPrunedBlocksLikelyToHave))\n             {\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n@@ -3058,13 +3058,13 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         {\n             LOCK(cs_main);\n \n-            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(req.blockhash);\n+            const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(req.blockhash);\n             if (!pindex || !(pindex->nStatus & BLOCK_HAVE_DATA)) {\n                 LogPrint(BCLog::NET, \"Peer %d sent us a getblocktxn for a block we don't have\\n\", pfrom.GetId());\n                 return;\n             }\n \n-            if (pindex->nHeight >= ::ChainActive().Height() - MAX_BLOCKTXN_DEPTH) {\n+            if (pindex->nHeight >= m_chainman.ActiveChain().Height() - MAX_BLOCKTXN_DEPTH) {\n                 CBlock block;\n                 bool ret = ReadBlockFromDisk(block, pindex, m_chainparams.GetConsensus());\n                 assert(ret);\n@@ -3102,7 +3102,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         LOCK(cs_main);\n-        if (::ChainstateActive().IsInitialBlockDownload() && !pfrom.HasPermission(PF_DOWNLOAD)) {\n+        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(PF_DOWNLOAD)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom.GetId());\n             return;\n         }\n@@ -3112,7 +3112,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (locator.IsNull())\n         {\n             // If locator is null, return the hashStop block\n-            pindex = g_chainman.m_blockman.LookupBlockIndex(hashStop);\n+            pindex = m_chainman.m_blockman.LookupBlockIndex(hashStop);\n             if (!pindex) {\n                 return;\n             }\n@@ -3125,23 +3125,23 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         else\n         {\n             // Find the last block the caller has in the main chain\n-            pindex = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n+            pindex = m_chainman.m_blockman.FindForkInGlobalIndex(m_chainman.ActiveChain(), locator);\n             if (pindex)\n-                pindex = ::ChainActive().Next(pindex);\n+                pindex = m_chainman.ActiveChain().Next(pindex);\n         }\n \n         // we must use CBlocks, as CBlockHeaders won't include the 0x00 nTx count at the end\n         std::vector<CBlock> vHeaders;\n         int nLimit = MAX_HEADERS_RESULTS;\n         LogPrint(BCLog::NET, \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom.GetId());\n-        for (; pindex; pindex = ::ChainActive().Next(pindex))\n+        for (; pindex; pindex = m_chainman.ActiveChain().Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n-        // pindex can be nullptr either if we sent ::ChainActive().Tip() OR\n-        // if our peer has ::ChainActive().Tip() (and thus we are sending an empty\n+        // pindex can be nullptr either if we sent m_chainman.ActiveChain().Tip() OR\n+        // if our peer has m_chainman.ActiveChain().Tip() (and thus we are sending an empty\n         // headers message). In both cases it's safe to update\n         // pindexBestHeaderSent to be our tip.\n         //\n@@ -3152,7 +3152,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         // without the new block. By resetting the BestHeaderSent, we ensure we\n         // will re-announce the new block via headers (or compact blocks again)\n         // in the SendMessages logic.\n-        nodestate->pindexBestHeaderSent = pindex ? pindex : ::ChainActive().Tip();\n+        nodestate->pindexBestHeaderSent = pindex ? pindex : m_chainman.ActiveChain().Tip();\n         m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n         return;\n     }\n@@ -3223,7 +3223,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         TxValidationState state;\n         std::list<CTransactionRef> lRemovedTxn;\n \n-        if (AcceptToMemoryPool(::ChainstateActive(), m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n+        if (AcceptToMemoryPool(m_chainman.ActiveChainstate(), m_mempool, state, ptx, &lRemovedTxn, false /* bypass_limits */)) {\n             CChainState& active_chainstate = m_chainman.ActiveChainstate();\n             CCoinsViewCache& active_coins_tip = active_chainstate.CoinsTip();\n             m_mempool.check(&active_coins_tip, active_chainstate.m_blockman.GetSpendHeight(active_coins_tip));\n@@ -3392,14 +3392,14 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         {\n         LOCK(cs_main);\n \n-        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n+        if (!m_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n-            if (!::ChainstateActive().IsInitialBlockDownload())\n-                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n+            if (!m_chainman.ActiveChainstate().IsInitialBlockDownload())\n+                m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexBestHeader), uint256()));\n             return;\n         }\n \n-        if (!g_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.GetHash())) {\n+        if (!m_chainman.m_blockman.LookupBlockIndex(cmpctblock.header.GetHash())) {\n             received_new_header = true;\n         }\n         }\n@@ -3439,7 +3439,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // If this was a new header with more work than our tip, update the\n         // peer's last block announcement time\n-        if (received_new_header && pindex->nChainWork > ::ChainActive().Tip()->nChainWork) {\n+        if (received_new_header && pindex->nChainWork > m_chainman.ActiveChain().Tip()->nChainWork) {\n             nodestate->m_last_block_announcement = GetTime();\n         }\n \n@@ -3449,7 +3449,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n             return;\n \n-        if (pindex->nChainWork <= ::ChainActive().Tip()->nChainWork || // We know something better\n+        if (pindex->nChainWork <= m_chainman.ActiveChain().Tip()->nChainWork || // We know something better\n                 pindex->nTx != 0) { // We had this block at some point, but pruned it\n             if (fAlreadyInFlight) {\n                 // We requested this block for some reason, but our mempool will probably be useless\n@@ -3473,7 +3473,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         // We want to be a bit conservative just to be extra careful about DoS\n         // possibilities in compact block processing...\n-        if (pindex->nHeight <= ::ChainActive().Height() + 2) {\n+        if (pindex->nHeight <= m_chainman.ActiveChain().Height() + 2) {\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n                  (fAlreadyInFlight && blockInFlightIt->second.first == pfrom.GetId())) {\n                 std::list<QueuedBlock>::iterator* queuedBlockIt = nullptr;\n@@ -4123,7 +4123,7 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n         // their chain has more work than ours, we should sync to it,\n         // unless it's invalid, in which case we should find that out and\n         // disconnect from them elsewhere).\n-        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= ::ChainActive().Tip()->nChainWork) {\n+        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= m_chainman.ActiveChain().Tip()->nChainWork) {\n             if (state.m_chain_sync.m_timeout != 0) {\n                 state.m_chain_sync.m_timeout = 0;\n                 state.m_chain_sync.m_work_header = nullptr;\n@@ -4135,7 +4135,7 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n             // where we checked against our tip.\n             // Either way, set a new timeout based on current tip.\n             state.m_chain_sync.m_timeout = time_in_seconds + CHAIN_SYNC_TIMEOUT;\n-            state.m_chain_sync.m_work_header = ::ChainActive().Tip();\n+            state.m_chain_sync.m_work_header = m_chainman.ActiveChain().Tip();\n             state.m_chain_sync.m_sent_getheaders = false;\n         } else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout) {\n             // No evidence yet that our peer has synced to a chain with work equal to that\n@@ -4148,7 +4148,7 @@ void PeerManagerImpl::ConsiderEviction(CNode& pto, int64_t time_in_seconds)\n             } else {\n                 assert(state.m_chain_sync.m_work_header);\n                 LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto.GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n-                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n+                m_connman.PushMessage(&pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n                 state.m_chain_sync.m_sent_getheaders = true;\n                 constexpr int64_t HEADERS_RESPONSE_TIME = 120; // 2 minutes\n                 // Bump the timeout to allow a response, which could clear the timeout\n@@ -4363,7 +4363,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Address refresh broadcast\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n+        if (pto->RelayAddrsWithConn() && !m_chainman.ActiveChainstate().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n             // If we've sent before, clear the bloom filter for the peer, so that our\n             // self-announcement will actually go out.\n             // This might be unnecessary if the bloom filter has already rolled\n@@ -4420,7 +4420,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n \n         // Start block sync\n         if (pindexBestHeader == nullptr)\n-            pindexBestHeader = ::ChainActive().Tip();\n+            pindexBestHeader = m_chainman.ActiveChain().Tip();\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->IsAddrFetchConn()); // Download if this is a nice peer, or we have no nice peers and this one might do.\n         if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n@@ -4439,7 +4439,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), peer->m_starting_height);\n-                m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexStart), uint256()));\n+                m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, m_chainman.ActiveChain().GetLocator(pindexStart), uint256()));\n             }\n         }\n \n@@ -4466,11 +4466,11 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 bool fFoundStartingHeader = false;\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n-                // headers that aren't on ::ChainActive(), give up.\n+                // headers that aren't on m_chainman.ActiveChain(), give up.\n                 for (const uint256& hash : peer->m_blocks_for_headers_relay) {\n-                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+                    const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(hash);\n                     assert(pindex);\n-                    if (::ChainActive()[pindex->nHeight] != pindex) {\n+                    if (m_chainman.ActiveChain()[pindex->nHeight] != pindex) {\n                         // Bail out if we reorged away from this block\n                         fRevertToInv = true;\n                         break;\n@@ -4560,15 +4560,15 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                 // in the past.\n                 if (!peer->m_blocks_for_headers_relay.empty()) {\n                     const uint256& hashToAnnounce = peer->m_blocks_for_headers_relay.back();\n-                    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashToAnnounce);\n+                    const CBlockIndex* pindex = m_chainman.m_blockman.LookupBlockIndex(hashToAnnounce);\n                     assert(pindex);\n \n                     // Warn if we're announcing a block that is not on the main chain.\n                     // This should be very rare and could be optimized out.\n                     // Just log for now.\n-                    if (::ChainActive()[pindex->nHeight] != pindex) {\n+                    if (m_chainman.ActiveChain()[pindex->nHeight] != pindex) {\n                         LogPrint(BCLog::NET, \"Announcing block %s not on main chain (tip=%s)\\n\",\n-                            hashToAnnounce.ToString(), ::ChainActive().Tip()->GetBlockHash().ToString());\n+                            hashToAnnounce.ToString(), m_chainman.ActiveChain().Tip()->GetBlockHash().ToString());\n                     }\n \n                     // If the peer's chain has this block, don't inv it back.\n@@ -4799,7 +4799,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         // Message: getdata (blocks)\n         //\n         std::vector<CInv> vGetData;\n-        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !::ChainstateActive().IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && ((fFetch && !pto->m_limited_node) || !m_chainman.ActiveChainstate().IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             std::vector<const CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);"
      }
    ]
  },
  {
    "sha": "98904649c0399ca659f96c8888650a6feaceda97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODkwNDY0OWMwMzk5Y2E2NTlmOTZjODg4ODY1MGE2ZmVhY2VkYTk3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:07:25Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:53:08Z"
      },
      "message": "net_processing: Add review-only assertion to PeerManager",
      "tree": {
        "sha": "78126d320cdc373b8a7d61be18bebea5e836116d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78126d320cdc373b8a7d61be18bebea5e836116d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98904649c0399ca659f96c8888650a6feaceda97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98904649c0399ca659f96c8888650a6feaceda97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98904649c0399ca659f96c8888650a6feaceda97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98904649c0399ca659f96c8888650a6feaceda97/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4328d09e694c2be634afb79c54f0fe9167b4c813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4328d09e694c2be634afb79c54f0fe9167b4c813",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4328d09e694c2be634afb79c54f0fe9167b4c813"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7ef8f536d0c65fe416f4284ba99ae0c5480f737d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98904649c0399ca659f96c8888650a6feaceda97/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98904649c0399ca659f96c8888650a6feaceda97/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=98904649c0399ca659f96c8888650a6feaceda97",
        "patch": "@@ -1353,6 +1353,7 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n+    assert(std::addressof(g_chainman) == std::addressof(m_chainman));\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n "
      }
    ]
  },
  {
    "sha": "fa970fbfa9cafb4480beab16d7c89afa2298acd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTk3MGZiZmE5Y2FmYjQ0ODBiZWFiMTZkN2M4OWFmYTIyOThhY2Qx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-22T19:33:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "COMMITS AFTER THIS ARE NON-BASE",
      "tree": {
        "sha": "78126d320cdc373b8a7d61be18bebea5e836116d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78126d320cdc373b8a7d61be18bebea5e836116d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa970fbfa9cafb4480beab16d7c89afa2298acd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa970fbfa9cafb4480beab16d7c89afa2298acd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa970fbfa9cafb4480beab16d7c89afa2298acd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa970fbfa9cafb4480beab16d7c89afa2298acd1/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98904649c0399ca659f96c8888650a6feaceda97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98904649c0399ca659f96c8888650a6feaceda97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98904649c0399ca659f96c8888650a6feaceda97"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "8919757c2b28640b6491023abc72b190dd8c51b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTE5NzU3YzJiMjg2NDBiNjQ5MTAyM2FiYzcyYjE5MGRkOGM1MWI1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-15T17:02:06Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rpc/*,rest: Add review-only assertion to EnsureChainman",
      "tree": {
        "sha": "fdaf1ada290700427f563231d43d8a7363b3a200",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdaf1ada290700427f563231d43d8a7363b3a200"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8919757c2b28640b6491023abc72b190dd8c51b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919757c2b28640b6491023abc72b190dd8c51b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8919757c2b28640b6491023abc72b190dd8c51b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919757c2b28640b6491023abc72b190dd8c51b5/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa970fbfa9cafb4480beab16d7c89afa2298acd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa970fbfa9cafb4480beab16d7c89afa2298acd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa970fbfa9cafb4480beab16d7c89afa2298acd1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "defe9720c1b81af5647c3d41dd1b1108aa05b0fe",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8919757c2b28640b6491023abc72b190dd8c51b5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8919757c2b28640b6491023abc72b190dd8c51b5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8919757c2b28640b6491023abc72b190dd8c51b5",
        "patch": "@@ -79,6 +79,7 @@ ChainstateManager& EnsureChainman(const util::Ref& context)\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n+    WITH_LOCK(::cs_main, assert(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n "
      }
    ]
  },
  {
    "sha": "1ac12e958d68a49382d752603b6883161926f1bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWMxMmU5NThkNjhhNDkzODJkNzUyNjAzYjY4ODMxNjE5MjZmMWJk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T19:40:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rpc/blockchain: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- BIP9SoftForkDescPushBack\n- BuriedForkDescPushBack",
      "tree": {
        "sha": "237c646717f7fa8a15a82d3cd43b5b2e54217abe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/237c646717f7fa8a15a82d3cd43b5b2e54217abe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ac12e958d68a49382d752603b6883161926f1bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac12e958d68a49382d752603b6883161926f1bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac12e958d68a49382d752603b6883161926f1bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac12e958d68a49382d752603b6883161926f1bd/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8919757c2b28640b6491023abc72b190dd8c51b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8919757c2b28640b6491023abc72b190dd8c51b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8919757c2b28640b6491023abc72b190dd8c51b5"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 76,
      "deletions": 59
    },
    "files": [
      {
        "sha": "f8badce19e970b6d4d6dd582f0b9df217c6ba182",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 59,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ac12e958d68a49382d752603b6883161926f1bd/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ac12e958d68a49382d752603b6883161926f1bd/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1ac12e958d68a49382d752603b6883161926f1bd",
        "patch": "@@ -220,7 +220,7 @@ static RPCHelpMan getblockcount()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return ::ChainActive().Height();\n+    return EnsureChainman(request.context).ActiveChain().Height();\n },\n     };\n }\n@@ -239,7 +239,7 @@ static RPCHelpMan getbestblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return ::ChainActive().Tip()->GetBlockHash().GetHex();\n+    return EnsureChainman(request.context).ActiveChain().Tip()->GetBlockHash().GetHex();\n },\n     };\n }\n@@ -420,7 +420,8 @@ static RPCHelpMan getdifficulty()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetDifficulty(::ChainActive().Tip());\n+    CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    return GetDifficulty(active_chain.Tip());\n },\n     };\n }\n@@ -785,12 +786,13 @@ static RPCHelpMan getblockhash()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n \n     int nHeight = request.params[0].get_int();\n-    if (nHeight < 0 || nHeight > ::ChainActive().Height())\n+    if (nHeight < 0 || nHeight > active_chain.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n-    CBlockIndex* pblockindex = ::ChainActive()[nHeight];\n+    CBlockIndex* pblockindex = active_chain[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n },\n     };\n@@ -844,8 +846,9 @@ static RPCHelpMan getblockheader()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        tip = ::ChainActive().Tip();\n+        ChainstateManager& chainman = EnsureChainman(request.context);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        tip = chainman.ActiveChain().Tip();\n     }\n \n     if (!pblockindex) {\n@@ -968,8 +971,9 @@ static RPCHelpMan getblock()\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        tip = ::ChainActive().Tip();\n+        ChainstateManager& chainman = EnsureChainman(request.context);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        tip = chainman.ActiveChain().Tip();\n \n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -1010,6 +1014,7 @@ static RPCHelpMan pruneblockchain()\n         throw JSONRPCError(RPC_MISC_ERROR, \"Cannot prune blocks because node is not in prune mode.\");\n \n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     int heightParam = request.params[0].get_int();\n     if (heightParam < 0)\n@@ -1019,15 +1024,15 @@ static RPCHelpMan pruneblockchain()\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = ::ChainActive().FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n+        CBlockIndex* pindex = chainman.ActiveChain().FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW, 0);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n         heightParam = pindex->nHeight;\n     }\n \n     unsigned int height = (unsigned int) heightParam;\n-    unsigned int chainHeight = (unsigned int) ::ChainActive().Height();\n+    unsigned int chainHeight = (unsigned int) chainman.ActiveChain().Height();\n     if (chainHeight < Params().PruneAfterHeight())\n         throw JSONRPCError(RPC_MISC_ERROR, \"Blockchain is too short for pruning.\");\n     else if (height > chainHeight)\n@@ -1037,8 +1042,8 @@ static RPCHelpMan pruneblockchain()\n         height = chainHeight - MIN_BLOCKS_TO_KEEP;\n     }\n \n-    PruneBlockFilesManual(::ChainstateActive(), height);\n-    const CBlockIndex* block = ::ChainActive().Tip();\n+    PruneBlockFilesManual(chainman.ActiveChainstate(), height);\n+    const CBlockIndex* block = chainman.ActiveChain().Tip();\n     CHECK_NONFATAL(block);\n     while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n         block = block->pprev;\n@@ -1077,13 +1082,15 @@ static RPCHelpMan gettxoutsetinfo()\n     UniValue ret(UniValue::VOBJ);\n \n     CCoinsStats stats;\n-    ::ChainstateActive().ForceFlushStateToDisk();\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    active_chainstate.ForceFlushStateToDisk();\n \n     const CoinStatsHashType hash_type = ParseHashType(request.params[0], CoinStatsHashType::HASH_SERIALIZED);\n \n-    CCoinsView* coins_view = WITH_LOCK(::cs_main, return &::ChainstateActive().CoinsDB());\n+    CCoinsView* coins_view = WITH_LOCK(::cs_main, return &active_chainstate.CoinsDB());\n+    BlockManager& blockman = WITH_LOCK(::cs_main, return std::ref(active_chainstate.m_blockman));\n     NodeContext& node = EnsureNodeContext(request.context);\n-    if (GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, hash_type, node.rpc_interruption_point)) {\n+    if (GetUTXOStats(coins_view, blockman, stats, hash_type, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -1150,7 +1157,8 @@ static RPCHelpMan gettxout()\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n-    CCoinsViewCache* coins_view = &::ChainstateActive().CoinsTip();\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    CCoinsViewCache* coins_view = &active_chainstate.CoinsTip();\n \n     if (fMempool) {\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n@@ -1165,7 +1173,7 @@ static RPCHelpMan gettxout()\n         }\n     }\n \n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n+    const CBlockIndex* pindex = active_chainstate.m_blockman.LookupBlockIndex(coins_view->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);\n@@ -1205,12 +1213,13 @@ static RPCHelpMan verifychain()\n \n     LOCK(cs_main);\n \n-    return CVerifyDB().VerifyDB(Params(), ::ChainstateActive(), &::ChainstateActive().CoinsTip(), check_level, check_depth);\n+    CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n+    return CVerifyDB().VerifyDB(Params(), active_chainstate, &active_chainstate.CoinsTip(), check_level, check_depth);\n },\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height, int active_tip_nheight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n@@ -1223,12 +1232,12 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n+    rv.pushKV(\"active\", active_tip_nheight + 1 >= height);\n     rv.pushKV(\"height\", height);\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BIP9SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n     // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n@@ -1237,7 +1246,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = VersionBitsState(active_chain_tip, consensusParams, id, versionbitscache);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1251,12 +1260,12 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    int64_t since_height = VersionBitsStateSinceHeight(active_chain_tip, consensusParams, id, versionbitscache);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        BIP9Stats statsStruct = VersionBitsStatistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n@@ -1332,17 +1341,18 @@ RPCHelpMan getblockchaininfo()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n-    const CBlockIndex* tip = ::ChainActive().Tip();\n+    const CBlockIndex* tip = chainman.ActiveChain().Tip();\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"chain\",                 Params().NetworkIDString());\n-    obj.pushKV(\"blocks\",                (int)::ChainActive().Height());\n+    obj.pushKV(\"blocks\",                (int)chainman.ActiveChain().Height());\n     obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n     obj.pushKV(\"bestblockhash\",         tip->GetBlockHash().GetHex());\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(tip));\n     obj.pushKV(\"mediantime\",            (int64_t)tip->GetMedianTimePast());\n     obj.pushKV(\"verificationprogress\",  GuessVerificationProgress(Params().TxData(), tip));\n-    obj.pushKV(\"initialblockdownload\",  ::ChainstateActive().IsInitialBlockDownload());\n+    obj.pushKV(\"initialblockdownload\",  chainman.ActiveChainstate().IsInitialBlockDownload());\n     obj.pushKV(\"chainwork\",             tip->nChainWork.GetHex());\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n@@ -1364,14 +1374,15 @@ RPCHelpMan getblockchaininfo()\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n+    int active_tip_nheight = tip->nHeight;\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height, active_tip_nheight);\n+    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height, active_tip_nheight);\n+    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height, active_tip_nheight);\n+    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight, active_tip_nheight);\n+    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight, active_tip_nheight);\n+    BIP9SoftForkDescPushBack(tip, softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    BIP9SoftForkDescPushBack(tip, softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n     obj.pushKV(\"softforks\",             softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n@@ -1556,16 +1567,17 @@ static RPCHelpMan preciousblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CBlockIndex* pblockindex;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n \n     BlockValidationState state;\n-    ::ChainstateActive().PreciousBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1593,18 +1605,19 @@ static RPCHelpMan invalidateblock()\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     BlockValidationState state;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n-    ::ChainstateActive().InvalidateBlock(state, Params(), pblockindex);\n+    chainman.ActiveChainstate().InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n-        ::ChainstateActive().ActivateBestChain(state, Params());\n+        chainman.ActiveChainstate().ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1631,20 +1644,21 @@ static RPCHelpMan reconsiderblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        CBlockIndex* pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n \n-        ::ChainstateActive().ResetBlockFailureFlags(pblockindex);\n+        chainman.ActiveChainstate().ResetBlockFailureFlags(pblockindex);\n     }\n \n     BlockValidationState state;\n-    ::ChainstateActive().ActivateBestChain(state, Params());\n+    chainman.ActiveChainstate().ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.ToString());\n@@ -1681,20 +1695,21 @@ static RPCHelpMan getchaintxstats()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     const CBlockIndex* pindex;\n     int blockcount = 30 * 24 * 60 * 60 / Params().GetConsensus().nPowTargetSpacing; // By default: 1 month\n \n     if (request.params[1].isNull()) {\n         LOCK(cs_main);\n-        pindex = ::ChainActive().Tip();\n+        pindex = chainman.ActiveChain().Tip();\n     } else {\n         uint256 hash(ParseHashV(request.params[1], \"blockhash\"));\n         LOCK(cs_main);\n-        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!::ChainActive().Contains(pindex)) {\n+        if (!chainman.ActiveChain().Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block is not in main chain\");\n         }\n     }\n@@ -1853,26 +1868,27 @@ static RPCHelpMan getblockstats()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     CBlockIndex* pindex;\n     if (request.params[0].isNum()) {\n         const int height = request.params[0].get_int();\n-        const int current_tip = ::ChainActive().Height();\n+        const int current_tip = chainman.ActiveChain().Height();\n         if (height < 0) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n         }\n         if (height > current_tip) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n         }\n \n-        pindex = ::ChainActive()[height];\n+        pindex = chainman.ActiveChain()[height];\n     } else {\n         const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!::ChainActive().Contains(pindex)) {\n+        if (!chainman.ActiveChain().Contains(pindex)) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n         }\n     }\n@@ -2251,10 +2267,11 @@ static RPCHelpMan scantxoutset()\n         CBlockIndex* tip;\n         {\n             LOCK(cs_main);\n-            ::ChainstateActive().ForceFlushStateToDisk();\n-            pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n+            ChainstateManager& chainman = EnsureChainman(request.context);\n+            chainman.ActiveChainstate().ForceFlushStateToDisk();\n+            pcursor = std::unique_ptr<CCoinsViewCursor>(chainman.ActiveChainstate().CoinsDB().Cursor());\n             CHECK_NONFATAL(pcursor);\n-            tip = ::ChainActive().Tip();\n+            tip = chainman.ActiveChain().Tip();\n             CHECK_NONFATAL(tip);\n         }\n         NodeContext& node = EnsureNodeContext(request.context);\n@@ -2331,7 +2348,7 @@ static RPCHelpMan getblockfilter()\n     bool block_was_connected;\n     {\n         LOCK(cs_main);\n-        block_index = g_chainman.m_blockman.LookupBlockIndex(block_hash);\n+        block_index = EnsureChainman(request.context).m_blockman.LookupBlockIndex(block_hash);\n         if (!block_index) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -2433,16 +2450,16 @@ static RPCHelpMan dumptxoutset()\n         //   https://github.com/bitcoin/bitcoin/pull/15606#discussion_r274479369\n         //\n         LOCK(::cs_main);\n+        CChainState& active_chainstate = EnsureChainman(request.context).ActiveChainstate();\n \n-        ::ChainstateActive().ForceFlushStateToDisk();\n+        active_chainstate.ForceFlushStateToDisk();\n \n-        CCoinsView* coins_view = WITH_LOCK(::cs_main, return &::ChainstateActive().CoinsDB());\n-        if (!GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n+        if (!GetUTXOStats(&active_chainstate.CoinsDB(), active_chainstate.m_blockman, stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n \n-        pcursor = std::unique_ptr<CCoinsViewCursor>(::ChainstateActive().CoinsDB().Cursor());\n-        tip = g_chainman.m_blockman.LookupBlockIndex(stats.hashBlock);\n+        pcursor = std::unique_ptr<CCoinsViewCursor>(active_chainstate.CoinsDB().Cursor());\n+        tip = active_chainstate.m_blockman.LookupBlockIndex(stats.hashBlock);\n         CHECK_NONFATAL(tip);\n     }\n "
      }
    ]
  },
  {
    "sha": "2cb0446d10fcaa658cfaccb7bca0ea3420290750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2IwNDQ2ZDEwZmNhYTY1OGNmYWNjYjdiY2EwZWEzNDIwMjkwNzUw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T19:57:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rpc/mining: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- GetNetworkHashPS\n- [gG]enerateBlock{,s}",
      "tree": {
        "sha": "6302d4fcfff8eca1599af7374f5f9e4680bcdd54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6302d4fcfff8eca1599af7374f5f9e4680bcdd54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cb0446d10fcaa658cfaccb7bca0ea3420290750",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb0446d10fcaa658cfaccb7bca0ea3420290750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb0446d10fcaa658cfaccb7bca0ea3420290750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb0446d10fcaa658cfaccb7bca0ea3420290750/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ac12e958d68a49382d752603b6883161926f1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ac12e958d68a49382d752603b6883161926f1bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ac12e958d68a49382d752603b6883161926f1bd"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 37,
      "deletions": 28
    },
    "files": [
      {
        "sha": "858a6ef007e45921197f039e1e67374e4c2f402c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 28,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb0446d10fcaa658cfaccb7bca0ea3420290750/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb0446d10fcaa658cfaccb7bca0ea3420290750/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2cb0446d10fcaa658cfaccb7bca0ea3420290750",
        "patch": "@@ -44,11 +44,12 @@\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-static UniValue GetNetworkHashPS(int lookup, int height) {\n-    CBlockIndex *pb = ::ChainActive().Tip();\n+static UniValue GetNetworkHashPS(int lookup, int height, CChain& active_chain) {\n+    CBlockIndex *pb = active_chain.Tip();\n \n-    if (height >= 0 && height < ::ChainActive().Height())\n-        pb = ::ChainActive()[height];\n+    if (height >= 0 && height < active_chain.Height()) {\n+        pb = active_chain[height];\n+    }\n \n     if (pb == nullptr || !pb->nHeight)\n         return 0;\n@@ -100,7 +101,8 @@ static RPCHelpMan getnetworkhashps()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n-    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n+    CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n+    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1, active_chain);\n },\n     };\n }\n@@ -111,7 +113,8 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n \n     {\n         LOCK(cs_main);\n-        IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n+        assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+        IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);\n     }\n \n     CChainParams chainparams(Params());\n@@ -143,14 +146,15 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        nHeight = ::ChainActive().Height();\n+        assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+        nHeight = chainman.ActiveChain().Height();\n         nHeightEnd = nHeight+nGenerate;\n     }\n     unsigned int nExtraNonce = 0;\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd && !ShutdownRequested())\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), coinbase_script));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(mempool, Params()).CreateNewBlock(chainman.ActiveChainstate(), coinbase_script));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -354,11 +358,12 @@ static RPCHelpMan generateblock()\n     CChainParams chainparams(Params());\n     CBlock block;\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n \n         CTxMemPool empty_mempool;\n-        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(::ChainstateActive(), coinbase_script));\n+        std::unique_ptr<CBlockTemplate> blocktemplate(BlockAssembler(empty_mempool, chainparams).CreateNewBlock(chainman.ActiveChainstate(), coinbase_script));\n         if (!blocktemplate) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         }\n@@ -369,13 +374,13 @@ static RPCHelpMan generateblock()\n \n     // Add transactions\n     block.vtx.insert(block.vtx.end(), txs.begin(), txs.end());\n-    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n+    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(chainman.m_blockman)));\n \n     {\n         LOCK(cs_main);\n \n         BlockValidationState state;\n-        if (!TestBlockValidity(state, chainparams, ::ChainstateActive(), block, g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n+        if (!TestBlockValidity(state, chainparams, chainman.ActiveChainstate(), block, chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf(\"TestBlockValidity failed: %s\", state.ToString()));\n         }\n     }\n@@ -384,7 +389,7 @@ static RPCHelpMan generateblock()\n     uint64_t max_tries{DEFAULT_MAX_TRIES};\n     unsigned int extra_nonce{0};\n \n-    if (!GenerateBlock(EnsureChainman(request.context), block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n+    if (!GenerateBlock(chainman, block, max_tries, extra_nonce, block_hash) || block_hash.IsNull()) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Failed to make block.\");\n     }\n \n@@ -420,12 +425,13 @@ static RPCHelpMan getmininginfo()\n {\n     LOCK(cs_main);\n     const CTxMemPool& mempool = EnsureMemPool(request.context);\n+    CChain& active_chain = EnsureChainman(request.context).ActiveChain();\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"blocks\",           (int)::ChainActive().Height());\n+    obj.pushKV(\"blocks\",           (int)active_chain.Height());\n     if (BlockAssembler::m_last_block_weight) obj.pushKV(\"currentblockweight\", *BlockAssembler::m_last_block_weight);\n     if (BlockAssembler::m_last_block_num_txs) obj.pushKV(\"currentblocktx\", *BlockAssembler::m_last_block_num_txs);\n-    obj.pushKV(\"difficulty\",       (double)GetDifficulty(::ChainActive().Tip()));\n+    obj.pushKV(\"difficulty\",       (double)GetDifficulty(active_chain.Tip()));\n     obj.pushKV(\"networkhashps\",    getnetworkhashps().HandleRequest(request));\n     obj.pushKV(\"pooledtx\",         (uint64_t)mempool.size());\n     obj.pushKV(\"chain\",            Params().NetworkIDString());\n@@ -588,6 +594,7 @@ static RPCHelpMan getblocktemplate()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     LOCK(cs_main);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n@@ -618,7 +625,7 @@ static RPCHelpMan getblocktemplate()\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n             uint256 hash = block.GetHash();\n-            const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+            const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n             if (pindex) {\n                 if (pindex->IsValid(BLOCK_VALID_SCRIPTS))\n                     return \"duplicate\";\n@@ -627,12 +634,12 @@ static RPCHelpMan getblocktemplate()\n                 return \"duplicate-inconclusive\";\n             }\n \n-            CBlockIndex* const pindexPrev = ::ChainActive().Tip();\n+            CBlockIndex* const pindexPrev = chainman.ActiveChain().Tip();\n             // TestBlockValidity only supports blocks built on the current Tip\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             BlockValidationState state;\n-            TestBlockValidity(state, Params(), ::ChainstateActive(), block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), chainman.ActiveChainstate(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -663,7 +670,7 @@ static RPCHelpMan getblocktemplate()\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n         }\n \n-        if (::ChainstateActive().IsInitialBlockDownload()) {\n+        if (chainman.IsInitialBlockDownload()) {\n             throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n         }\n     }\n@@ -689,7 +696,7 @@ static RPCHelpMan getblocktemplate()\n         else\n         {\n             // NOTE: Spec does not specify behaviour for non-string longpollid, but this makes testing easier\n-            hashWatchedChain = ::ChainActive().Tip()->GetBlockHash();\n+            hashWatchedChain = chainman.ActiveChain().Tip()->GetBlockHash();\n             nTransactionsUpdatedLastLP = nTransactionsUpdatedLast;\n         }\n \n@@ -734,20 +741,20 @@ static RPCHelpMan getblocktemplate()\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n-    if (pindexPrev != ::ChainActive().Tip() ||\n+    if (pindexPrev != chainman.ActiveChain().Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n         pindexPrev = nullptr;\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = ::ChainActive().Tip();\n+        CBlockIndex* pindexPrevNew = chainman.ActiveChain().Tip();\n         nStart = GetTime();\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(::ChainstateActive(), scriptDummy);\n+        pblocktemplate = BlockAssembler(mempool, Params()).CreateNewBlock(chainman.ActiveChainstate(), scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n \n@@ -883,7 +890,7 @@ static RPCHelpMan getblocktemplate()\n     result.pushKV(\"transactions\", transactions);\n     result.pushKV(\"coinbaseaux\", aux);\n     result.pushKV(\"coinbasevalue\", (int64_t)pblock->vtx[0]->vout[0].nValue);\n-    result.pushKV(\"longpollid\", ::ChainActive().Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n+    result.pushKV(\"longpollid\", chainman.ActiveChain().Tip()->GetBlockHash().GetHex() + ToString(nTransactionsUpdatedLast));\n     result.pushKV(\"target\", hashTarget.GetHex());\n     result.pushKV(\"mintime\", (int64_t)pindexPrev->GetMedianTimePast()+1);\n     result.pushKV(\"mutable\", aMutable);\n@@ -963,10 +970,11 @@ static RPCHelpMan submitblock()\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block does not start with a coinbase\");\n     }\n \n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     uint256 hash = block.GetHash();\n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (pindex) {\n             if (pindex->IsValid(BLOCK_VALID_SCRIPTS)) {\n                 return \"duplicate\";\n@@ -979,7 +987,7 @@ static RPCHelpMan submitblock()\n \n     {\n         LOCK(cs_main);\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock);\n         if (pindex) {\n             UpdateUncommittedBlockStructures(block, pindex, Params().GetConsensus());\n         }\n@@ -988,7 +996,7 @@ static RPCHelpMan submitblock()\n     bool new_block;\n     auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n     RegisterSharedValidationInterface(sc);\n-    bool accepted = EnsureChainman(request.context).ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool accepted = chainman.ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n     UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n@@ -1021,15 +1029,16 @@ static RPCHelpMan submitheader()\n     if (!DecodeHexBlockHeader(h, request.params[0].get_str())) {\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block header decode failed\");\n     }\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     {\n         LOCK(cs_main);\n-        if (!g_chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n+        if (!chainman.m_blockman.LookupBlockIndex(h.hashPrevBlock)) {\n             throw JSONRPCError(RPC_VERIFY_ERROR, \"Must submit previous header (\" + h.hashPrevBlock.GetHex() + \") first\");\n         }\n     }\n \n     BlockValidationState state;\n-    EnsureChainman(request.context).ProcessNewBlockHeaders({h}, state, Params());\n+    chainman.ProcessNewBlockHeaders({h}, state, Params());\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n         throw JSONRPCError(RPC_VERIFY_ERROR, state.ToString());"
      }
    ]
  },
  {
    "sha": "a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTEwZTQxYzZmYjZlNTE4ZWI1NGI0Y2IyMjcwZDRhMTczNWM1MjMx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:05:27Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rpc/rawtx: Use existing NodeContext\n\nAlso pass in appropriate object to:\n- TxToJSON",
      "tree": {
        "sha": "cc9a16036686a917544916e6dc149dc91377d37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc9a16036686a917544916e6dc149dc91377d37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a910e41c6fb6e518eb54b4cb2270d4a1735c5231/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cb0446d10fcaa658cfaccb7bca0ea3420290750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb0446d10fcaa658cfaccb7bca0ea3420290750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb0446d10fcaa658cfaccb7bca0ea3420290750"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 19,
      "deletions": 16
    },
    "files": [
      {
        "sha": "11a8ad2714ee065db7c95228d9dfafc0d9801de6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a910e41c6fb6e518eb54b4cb2270d4a1735c5231/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a910e41c6fb6e518eb54b4cb2270d4a1735c5231/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
        "patch": "@@ -41,7 +41,7 @@\n \n #include <univalue.h>\n \n-static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry, CChainState& active_chainstate)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //\n@@ -54,10 +54,10 @@ static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue&\n         LOCK(cs_main);\n \n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n-        CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        CBlockIndex* pindex = active_chainstate.m_blockman.LookupBlockIndex(hashBlock);\n         if (pindex) {\n-            if (::ChainActive().Contains(pindex)) {\n-                entry.pushKV(\"confirmations\", 1 + ::ChainActive().Height() - pindex->nHeight);\n+            if (active_chainstate.m_chain.Contains(pindex)) {\n+                entry.pushKV(\"confirmations\", 1 + active_chainstate.m_chain.Height() - pindex->nHeight);\n                 entry.pushKV(\"time\", pindex->GetBlockTime());\n                 entry.pushKV(\"blocktime\", pindex->GetBlockTime());\n             }\n@@ -158,6 +158,7 @@ static RPCHelpMan getrawtransaction()\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     const NodeContext& node = EnsureNodeContext(request.context);\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -178,11 +179,11 @@ static RPCHelpMan getrawtransaction()\n         LOCK(cs_main);\n \n         uint256 blockhash = ParseHashV(request.params[2], \"parameter 3\");\n-        blockindex = g_chainman.m_blockman.LookupBlockIndex(blockhash);\n+        blockindex = chainman.m_blockman.LookupBlockIndex(blockhash);\n         if (!blockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block hash not found\");\n         }\n-        in_active_chain = ::ChainActive().Contains(blockindex);\n+        in_active_chain = chainman.ActiveChain().Contains(blockindex);\n     }\n \n     bool f_txindex_ready = false;\n@@ -215,7 +216,7 @@ static RPCHelpMan getrawtransaction()\n \n     UniValue result(UniValue::VOBJ);\n     if (blockindex) result.pushKV(\"in_active_chain\", in_active_chain);\n-    TxToJSON(*tx, hash_block, result);\n+    TxToJSON(*tx, hash_block, result, chainman.ActiveChainstate());\n     return result;\n },\n     };\n@@ -257,10 +258,11 @@ static RPCHelpMan gettxoutproof()\n \n     CBlockIndex* pblockindex = nullptr;\n     uint256 hashBlock;\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n     if (!request.params[1].isNull()) {\n         LOCK(cs_main);\n         hashBlock = ParseHashV(request.params[1], \"blockhash\");\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -269,9 +271,9 @@ static RPCHelpMan gettxoutproof()\n \n         // Loop through txids and try to find which block they're in. Exit loop once a block is found.\n         for (const auto& tx : setTxids) {\n-            const Coin& coin = AccessByTxid(::ChainstateActive().CoinsTip(), tx);\n+            const Coin& coin = AccessByTxid(chainman.ActiveChainstate().CoinsTip(), tx);\n             if (!coin.IsSpent()) {\n-                pblockindex = ::ChainActive()[coin.nHeight];\n+                pblockindex = chainman.ActiveChain()[coin.nHeight];\n                 break;\n             }\n         }\n@@ -290,7 +292,7 @@ static RPCHelpMan gettxoutproof()\n         if (!tx || hashBlock.IsNull()) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n         }\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hashBlock);\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hashBlock);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n         }\n@@ -350,8 +352,9 @@ static RPCHelpMan verifytxoutproof()\n \n     LOCK(cs_main);\n \n-    const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n-    if (!pindex || !::ChainActive().Contains(pindex) || pindex->nTx == 0) {\n+    ChainstateManager& chainman = EnsureChainman(request.context);\n+    const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(merkleBlock.header.GetHash());\n+    if (!pindex || !chainman.ActiveChain().Contains(pindex) || pindex->nTx == 0) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n@@ -675,7 +678,7 @@ static RPCHelpMan combinerawtransaction()\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK(cs_main);\n         LOCK(mempool.cs);\n-        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n@@ -951,7 +954,7 @@ static RPCHelpMan testmempoolaccept()\n     CAmount fee{0};\n     {\n         LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(::ChainstateActive(), mempool, state, std::move(tx),\n+        test_accept_res = AcceptToMemoryPool(EnsureChainman(request.context).ActiveChainstate(), mempool, state, std::move(tx),\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, /* test_accept */ true, &fee);\n     }\n \n@@ -1606,7 +1609,7 @@ static RPCHelpMan utxoupdatepsbt()\n     {\n         const CTxMemPool& mempool = EnsureMemPool(request.context);\n         LOCK2(cs_main, mempool.cs);\n-        CCoinsViewCache &viewChain = ::ChainstateActive().CoinsTip();\n+        CCoinsViewCache &viewChain = EnsureChainman(request.context).ActiveChainstate().CoinsTip();\n         CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n "
      }
    ]
  },
  {
    "sha": "0be47f862669ffc747935018e13a703f6482302b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmU0N2Y4NjI2NjlmZmM3NDc5MzUwMThlMTNhNzAzZjY0ODIzMDJi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-02T21:24:03Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rest: Pass in NodeContext to rest_block",
      "tree": {
        "sha": "31dd723ec73452947466e43a60061ed0e8d05ce0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31dd723ec73452947466e43a60061ed0e8d05ce0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0be47f862669ffc747935018e13a703f6482302b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be47f862669ffc747935018e13a703f6482302b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0be47f862669ffc747935018e13a703f6482302b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be47f862669ffc747935018e13a703f6482302b/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a910e41c6fb6e518eb54b4cb2270d4a1735c5231",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a910e41c6fb6e518eb54b4cb2270d4a1735c5231"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "305c2b40cb1bee85e29e3965b046623b5b6220d3",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be47f862669ffc747935018e13a703f6482302b/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be47f862669ffc747935018e13a703f6482302b/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=0be47f862669ffc747935018e13a703f6482302b",
        "patch": "@@ -228,7 +228,8 @@ static bool rest_headers(const util::Ref& context,\n     }\n }\n \n-static bool rest_block(HTTPRequest* req,\n+static bool rest_block(const util::Ref& context,\n+                       HTTPRequest* req,\n                        const std::string& strURIPart,\n                        bool showTxDetails)\n {\n@@ -294,12 +295,12 @@ static bool rest_block(HTTPRequest* req,\n \n static bool rest_block_extended(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(req, strURIPart, true);\n+    return rest_block(context, req, strURIPart, true);\n }\n \n static bool rest_block_notxdetails(const util::Ref& context, HTTPRequest* req, const std::string& strURIPart)\n {\n-    return rest_block(req, strURIPart, false);\n+    return rest_block(context, req, strURIPart, false);\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp"
      }
    ]
  },
  {
    "sha": "3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTJhOGNmYTRhNGFkYTgwZGFiOWMyODZiNjdiYjM5ZmMwOTIyYTJh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:16:34Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "rest: Use existing NodeContext",
      "tree": {
        "sha": "dafadc04b877cd36f8d92b8ee2083a2ea8a7cbaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dafadc04b877cd36f8d92b8ee2083a2ea8a7cbaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0be47f862669ffc747935018e13a703f6482302b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be47f862669ffc747935018e13a703f6482302b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0be47f862669ffc747935018e13a703f6482302b"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 18,
      "deletions": 14
    },
    "files": [
      {
        "sha": "bae726e3d1537688933a002a42bcbf0c4969fc89",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
        "patch": "@@ -178,13 +178,14 @@ static bool rest_headers(const util::Ref& context,\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n-        const CBlockIndex* pindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n-        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+        ChainstateManager& chainman = EnsureChainman(context);\n+        tip = chainman.ActiveChain().Tip();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+        while (pindex != nullptr && chainman.ActiveChain().Contains(pindex)) {\n             headers.push_back(pindex);\n             if (headers.size() == (unsigned long)count)\n                 break;\n-            pindex = ::ChainActive().Next(pindex);\n+            pindex = chainman.ActiveChain().Next(pindex);\n         }\n     }\n \n@@ -247,8 +248,9 @@ static bool rest_block(const util::Ref& context,\n     CBlockIndex* tip = nullptr;\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n-        pblockindex = g_chainman.m_blockman.LookupBlockIndex(hash);\n+        ChainstateManager& chainman = EnsureChainman(context);\n+        tip = chainman.ActiveChain().Tip();\n+        pblockindex = chainman.m_blockman.LookupBlockIndex(hash);\n         if (!pblockindex) {\n             return RESTERR(req, HTTP_NOT_FOUND, hashStr + \" not found\");\n         }\n@@ -533,6 +535,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n+    ChainstateManager& chainman = EnsureChainman(context);\n     {\n         auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n@@ -548,12 +551,12 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n             if (!mempool) return false;\n             // use db+mempool as cache backend in case user likes to query mempool\n             LOCK2(cs_main, mempool->cs);\n-            CCoinsViewCache& viewChain = ::ChainstateActive().CoinsTip();\n+            CCoinsViewCache& viewChain = chainman.ActiveChainstate().CoinsTip();\n             CCoinsViewMemPool viewMempool(&viewChain, *mempool);\n             process_utxos(viewMempool, *mempool);\n         } else {\n             LOCK(cs_main);  // no need to lock mempool!\n-            process_utxos(::ChainstateActive().CoinsTip(), CTxMemPool());\n+            process_utxos(chainman.ActiveChainstate().CoinsTip(), CTxMemPool());\n         }\n \n         for (size_t i = 0; i < hits.size(); ++i) {\n@@ -568,7 +571,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << ::ChainActive().Height() << ::ChainActive().Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainman.ActiveChain().Height() << chainman.ActiveChain().Tip()->GetBlockHash() << bitmap << outs;\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -578,7 +581,7 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n \n     case RetFormat::HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << ::ChainActive().Height() << ::ChainActive().Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainman.ActiveChain().Height() << chainman.ActiveChain().Tip()->GetBlockHash() << bitmap << outs;\n         std::string strHex = HexStr(ssGetUTXOResponse) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -591,8 +594,8 @@ static bool rest_getutxos(const util::Ref& context, HTTPRequest* req, const std:\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.pushKV(\"chainHeight\", ::ChainActive().Height());\n-        objGetUTXOResponse.pushKV(\"chaintipHash\", ::ChainActive().Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainman.ActiveChain().Height());\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainman.ActiveChain().Tip()->GetBlockHash().GetHex());\n         objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);\n@@ -636,10 +639,11 @@ static bool rest_blockhash_by_height(const util::Ref& context, HTTPRequest* req,\n     CBlockIndex* pblockindex = nullptr;\n     {\n         LOCK(cs_main);\n-        if (blockheight > ::ChainActive().Height()) {\n+        CChain& active_chain = EnsureChainman(context).ActiveChain();\n+        if (blockheight > active_chain.Height()) {\n             return RESTERR(req, HTTP_NOT_FOUND, \"Block height out of range\");\n         }\n-        pblockindex = ::ChainActive()[blockheight];\n+        pblockindex = active_chain[blockheight];\n     }\n     switch (rf) {\n     case RetFormat::BINARY: {"
      }
    ]
  },
  {
    "sha": "2acbe46fceb187b4707ae56c780c4b3e394c59db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWNiZTQ2ZmNlYjE4N2I0NzA3YWU1NmM3ODBjNGIzZTM5NGM1OWRi",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-01-26T21:24:33Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:15Z"
      },
      "message": "fixup! rpc/mining: Use existing NodeContext",
      "tree": {
        "sha": "1a20a2f5d5fb822b85dd9c3221131f31ea4dc329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a20a2f5d5fb822b85dd9c3221131f31ea4dc329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2acbe46fceb187b4707ae56c780c4b3e394c59db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2acbe46fceb187b4707ae56c780c4b3e394c59db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2acbe46fceb187b4707ae56c780c4b3e394c59db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2acbe46fceb187b4707ae56c780c4b3e394c59db/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a2a8cfa4a4ada80dab9c286b67bb39fc0922a2a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7693877334db66b9a67634d5e69b3242187290e4",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2acbe46fceb187b4707ae56c780c4b3e394c59db/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2acbe46fceb187b4707ae56c780c4b3e394c59db/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2acbe46fceb187b4707ae56c780c4b3e394c59db",
        "patch": "@@ -670,7 +670,7 @@ static RPCHelpMan getblocktemplate()\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n         }\n \n-        if (chainman.IsInitialBlockDownload()) {\n+        if (chainman.ActiveChainstate().IsInitialBlockDownload()) {\n             throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, PACKAGE_NAME \" is in initial sync and waiting for blocks...\");\n         }\n     }"
      }
    ]
  },
  {
    "sha": "711f37ac3e175cd8df309aabe0aeb316e9d17e14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTFmMzdhYzNlMTc1Y2Q4ZGYzMDlhYWJlMGFlYjMxNmU5ZDE3ZTE0",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-22T19:33:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:40Z"
      },
      "message": "COMMITS AFTER THIS ARE NON-BASE",
      "tree": {
        "sha": "1a20a2f5d5fb822b85dd9c3221131f31ea4dc329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a20a2f5d5fb822b85dd9c3221131f31ea4dc329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/711f37ac3e175cd8df309aabe0aeb316e9d17e14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f37ac3e175cd8df309aabe0aeb316e9d17e14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/711f37ac3e175cd8df309aabe0aeb316e9d17e14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f37ac3e175cd8df309aabe0aeb316e9d17e14/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2acbe46fceb187b4707ae56c780c4b3e394c59db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2acbe46fceb187b4707ae56c780c4b3e394c59db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2acbe46fceb187b4707ae56c780c4b3e394c59db"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDllYmMzYmM2YWZmMTQ5N2M3OTMxM2NlZjhkZGJlMGEwNTYyZjBh",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T19:37:31Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:40Z"
      },
      "message": "bench: Use existing NodeContext in DuplicateInputs",
      "tree": {
        "sha": "e32012913bb97178c0316fe43275f86717cc2c93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e32012913bb97178c0316fe43275f86717cc2c93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "711f37ac3e175cd8df309aabe0aeb316e9d17e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/711f37ac3e175cd8df309aabe0aeb316e9d17e14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/711f37ac3e175cd8df309aabe0aeb316e9d17e14"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ee0721dd4c90fa0f001496205242709722cd9f0b",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
        "patch": "@@ -31,7 +31,8 @@ static void DuplicateInputs(benchmark::Bench& bench)\n     CMutableTransaction naughtyTx{};\n \n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = ::ChainActive().Tip();\n+    assert(std::addressof(::ChainActive()) == std::addressof(test_setup.m_node.chainman->ActiveChain()));\n+    CBlockIndex* pindexPrev = test_setup.m_node.chainman->ActiveChain().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());\n     block.nNonce = 0;"
      }
    ]
  },
  {
    "sha": "053893acdc79d58bf29828d4418a475a07a8cbb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTM4OTNhY2RjNzlkNThiZjI5ODI4ZDQ0MThhNDc1YTA3YThjYmI2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:32:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:40Z"
      },
      "message": "bench: Use existing chainman in AssembleBlock",
      "tree": {
        "sha": "427597c18a6733daf8bcb207fc571e0132dc2d64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/427597c18a6733daf8bcb207fc571e0132dc2d64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/053893acdc79d58bf29828d4418a475a07a8cbb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053893acdc79d58bf29828d4418a475a07a8cbb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/053893acdc79d58bf29828d4418a475a07a8cbb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053893acdc79d58bf29828d4418a475a07a8cbb6/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/409ebc3bc6aff1497c79313cef8ddbe0a0562f0a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "275af32fed3c0ee0cef1e2453ef70ec5d55b0d34",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053893acdc79d58bf29828d4418a475a07a8cbb6/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053893acdc79d58bf29828d4418a475a07a8cbb6/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=053893acdc79d58bf29828d4418a475a07a8cbb6",
        "patch": "@@ -49,7 +49,7 @@ static void AssembleBlock(benchmark::Bench& bench)\n \n         for (const auto& txr : txs) {\n             TxValidationState state;\n-            bool ret{::AcceptToMemoryPool(::ChainstateActive(), *test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n+            bool ret{::AcceptToMemoryPool(test_setup.m_node.chainman->ActiveChainstate(), *test_setup.m_node.mempool, state, txr, nullptr /* plTxnReplaced */, false /* bypass_limits */)};\n             assert(ret);\n         }\n     }"
      }
    ]
  },
  {
    "sha": "b476400d8428cdfd790c4d8d6209f9f528aa8488",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDc2NDAwZDg0MjhjZGZkNzkwYzRkOGQ2MjA5ZjlmNTI4YWE4NDg4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T20:48:17Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:40Z"
      },
      "message": "index: Add chainstate member to BaseIndex",
      "tree": {
        "sha": "bfaed1b88b9242ed89e779f1027b19ca777ebdf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfaed1b88b9242ed89e779f1027b19ca777ebdf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b476400d8428cdfd790c4d8d6209f9f528aa8488",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b476400d8428cdfd790c4d8d6209f9f528aa8488",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b476400d8428cdfd790c4d8d6209f9f528aa8488",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b476400d8428cdfd790c4d8d6209f9f528aa8488/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "053893acdc79d58bf29828d4418a475a07a8cbb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053893acdc79d58bf29828d4418a475a07a8cbb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/053893acdc79d58bf29828d4418a475a07a8cbb6"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f9bb0dcab6fbb5a0b3c1647644d8568dea092fbf",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -62,26 +62,26 @@ bool BaseIndex::Init()\n     if (locator.IsNull()) {\n         m_best_block_index = nullptr;\n     } else {\n-        m_best_block_index = g_chainman.m_blockman.FindForkInGlobalIndex(::ChainActive(), locator);\n+        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(m_chainstate->m_chain, locator);\n     }\n-    m_synced = m_best_block_index.load() == ::ChainActive().Tip();\n+    m_synced = m_best_block_index.load() == m_chainstate->m_chain.Tip();\n     return true;\n }\n \n-static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev, CChain& chain) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n     if (!pindex_prev) {\n-        return ::ChainActive().Genesis();\n+        return chain.Genesis();\n     }\n \n-    const CBlockIndex* pindex = ::ChainActive().Next(pindex_prev);\n+    const CBlockIndex* pindex = chain.Next(pindex_prev);\n     if (pindex) {\n         return pindex;\n     }\n \n-    return ::ChainActive().Next(::ChainActive().FindFork(pindex_prev));\n+    return chain.Next(chain.FindFork(pindex_prev));\n }\n \n void BaseIndex::ThreadSync()\n@@ -104,7 +104,7 @@ void BaseIndex::ThreadSync()\n \n             {\n                 LOCK(cs_main);\n-                const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n+                const CBlockIndex* pindex_next = NextSyncBlock(pindex, m_chainstate->m_chain);\n                 if (!pindex_next) {\n                     m_best_block_index = pindex;\n                     m_synced = true;\n@@ -167,7 +167,7 @@ bool BaseIndex::Commit()\n bool BaseIndex::CommitInternal(CDBBatch& batch)\n {\n     LOCK(cs_main);\n-    GetDB().WriteBestBlock(batch, ::ChainActive().GetLocator(m_best_block_index));\n+    GetDB().WriteBestBlock(batch, m_chainstate->m_chain.GetLocator(m_best_block_index));\n     return true;\n }\n \n@@ -239,7 +239,7 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n     const CBlockIndex* locator_tip_index;\n     {\n         LOCK(cs_main);\n-        locator_tip_index = g_chainman.m_blockman.LookupBlockIndex(locator_tip_hash);\n+        locator_tip_index = m_chainstate->m_blockman.LookupBlockIndex(locator_tip_hash);\n     }\n \n     if (!locator_tip_index) {\n@@ -280,7 +280,7 @@ bool BaseIndex::BlockUntilSyncedToCurrentChain() const\n         // Skip the queue-draining stuff if we know we're caught up with\n         // ::ChainActive().Tip().\n         LOCK(cs_main);\n-        const CBlockIndex* chain_tip = ::ChainActive().Tip();\n+        const CBlockIndex* chain_tip = m_chainstate->m_chain.Tip();\n         const CBlockIndex* best_block_index = m_best_block_index.load();\n         if (best_block_index->GetAncestor(chain_tip->nHeight) == chain_tip) {\n             return true;\n@@ -297,8 +297,10 @@ void BaseIndex::Interrupt()\n     m_interrupt();\n }\n \n-void BaseIndex::Start()\n+void BaseIndex::Start(CChainState& active_chainstate)\n {\n+    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n+    m_chainstate = &active_chainstate;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true.\n     RegisterValidationInterface(this);"
      },
      {
        "sha": "fbd4b2a519c5af37807f952dba32b6a645016f0e",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -12,6 +12,7 @@\n #include <validationinterface.h>\n \n class CBlockIndex;\n+class CChainState;\n \n struct IndexSummary {\n     std::string name;\n@@ -75,8 +76,9 @@ class BaseIndex : public CValidationInterface\n     /// to a chain reorganization), the index must halt until Commit succeeds or else it could end up\n     /// getting corrupted.\n     bool Commit();\n-\n protected:\n+    CChainState* m_chainstate{nullptr};\n+\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex) override;\n \n     void ChainStateFlushed(const CBlockLocator& locator) override;\n@@ -115,7 +117,7 @@ class BaseIndex : public CValidationInterface\n \n     /// Start initializes the sync state and registers the instance as a\n     /// ValidationInterface so that it stays in sync with blockchain updates.\n-    void Start();\n+    void Start(CChainState& active_chainstate);\n \n     /// Stops the instance from staying in sync with blockchain updates.\n     void Stop();"
      },
      {
        "sha": "4bc38cd20e6a7a3f4f6a4d88f1ca9bd16f7d24cd",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -204,7 +204,7 @@ bool TxIndex::Init()\n     // Attempt to migrate txindex from the old database to the new one. Even if\n     // chain_tip is null, the node could be reindexing and we still want to\n     // delete txindex records in the old database.\n-    if (!m_db->MigrateData(*pblocktree, ::ChainActive().GetLocator())) {\n+    if (!m_db->MigrateData(*pblocktree, m_chainstate->m_chain.GetLocator())) {\n         return false;\n     }\n "
      },
      {
        "sha": "f54a05388ea025f900d36ac1c762e7e24a72058a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -1787,12 +1787,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n-        g_txindex->Start();\n+        g_txindex->Start(::ChainstateActive());\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        GetBlockFilterIndex(filter_type)->Start();\n+        GetBlockFilterIndex(filter_type)->Start(::ChainstateActive());\n     }\n \n     // ********************************************************* Step 9: load wallet"
      },
      {
        "sha": "34aff279eae375a0c31fb104a59146bd66be6786",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -131,7 +131,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n     BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n \n-    filter_index.Start();\n+    filter_index.Start(::ChainstateActive());\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "ac84cd0d4a4d5f576864de593a81ed801a58664a",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b476400d8428cdfd790c4d8d6209f9f528aa8488/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "patch": "@@ -7,6 +7,7 @@\n #include <script/standard.h>\n #include <test/util/setup_common.h>\n #include <util/time.h>\n+#include <validation.h>\n \n #include <boost/test/unit_test.hpp>\n \n@@ -27,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    txindex.Start();\n+    txindex.Start(::ChainstateActive());\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      }
    ]
  },
  {
    "sha": "9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2FjMGIwYTY5YjJjMGRlYjRmNzYzMmMxNjU4NmVjOTZiMDU0ZDQy",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-12-22T19:33:24Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:59Z"
      },
      "message": "COMMITS AFTER THIS ARE NON-BASE",
      "tree": {
        "sha": "bfaed1b88b9242ed89e779f1027b19ca777ebdf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfaed1b88b9242ed89e779f1027b19ca777ebdf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cac0b0a69b2c0deb4f7632c16586ec96b054d42/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b476400d8428cdfd790c4d8d6209f9f528aa8488",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b476400d8428cdfd790c4d8d6209f9f528aa8488"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "e391187676db4de828fa4e5fac2fb30ee5953b21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzkxMTg3Njc2ZGI0ZGU4MjhmYTRlNWZhYzJmYjMwZWU1OTUzYjIx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-08-26T17:44:10Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:59Z"
      },
      "message": "init: Use existing chainman",
      "tree": {
        "sha": "367200b35d435f2fa5d4c263fe4602960832df0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/367200b35d435f2fa5d4c263fe4602960832df0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e391187676db4de828fa4e5fac2fb30ee5953b21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e391187676db4de828fa4e5fac2fb30ee5953b21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e391187676db4de828fa4e5fac2fb30ee5953b21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e391187676db4de828fa4e5fac2fb30ee5953b21/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cac0b0a69b2c0deb4f7632c16586ec96b054d42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cac0b0a69b2c0deb4f7632c16586ec96b054d42"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "e9f74a3e96bbbfef2bb63a892ec3ffb949805912",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e391187676db4de828fa4e5fac2fb30ee5953b21/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e391187676db4de828fa4e5fac2fb30ee5953b21/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e391187676db4de828fa4e5fac2fb30ee5953b21",
        "patch": "@@ -702,7 +702,7 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            ::ChainstateActive().LoadExternalBlockFile(chainparams, file, &pos);\n+            chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file, &pos);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;\n@@ -713,15 +713,15 @@ static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImp\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        ::ChainstateActive().LoadGenesisBlock(chainparams);\n+        chainman.ActiveChainstate().LoadGenesisBlock(chainparams);\n     }\n \n     // -loadblock=\n     for (const fs::path& path : vImportFiles) {\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            ::ChainstateActive().LoadExternalBlockFile(chainparams, file);\n+            chainman.ActiveChainstate().LoadExternalBlockFile(chainparams, file);\n             if (ShutdownRequested()) {\n                 LogPrintf(\"Shutdown requested. Exit %s\\n\", __func__);\n                 return;\n@@ -1607,8 +1607,9 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n+                assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n                 if (!chainman.BlockIndex().empty() &&\n-                        !g_chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                        !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1623,7 +1624,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 // If we're not mid-reindex (based on disk + args), add a genesis block on disk\n                 // (otherwise we use the one already on disk).\n                 // This is called again in ThreadImport after the reindex completes.\n-                if (!fReindex && !::ChainstateActive().LoadGenesisBlock(chainparams)) {\n+                if (!fReindex && !chainman.ActiveChainstate().LoadGenesisBlock(chainparams)) {\n                     strLoadError = _(\"Error initializing block database\");\n                     break;\n                 }\n@@ -1732,7 +1733,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n                         // Only verify the DB of the active chainstate. This is fixed in later\n                         // work when we allow VerifyDB to be parameterized by chainstate.\n-                        if (&::ChainstateActive() == chainstate &&\n+                        assert(std::addressof(::ChainstateActive()) == std::addressof(chainman.ActiveChainstate()));\n+                        if (&chainman.ActiveChainstate() == chainstate &&\n                             !CVerifyDB().VerifyDB(\n                                 chainparams, *chainstate, &chainstate->CoinsDB(),\n                                 args.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n@@ -1787,12 +1789,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // ********************************************************* Step 8: start indexers\n     if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         g_txindex = MakeUnique<TxIndex>(nTxIndexCache, false, fReindex);\n-        g_txindex->Start(::ChainstateActive());\n+        g_txindex->Start(chainman.ActiveChainstate());\n     }\n \n     for (const auto& filter_type : g_enabled_filter_types) {\n         InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n-        GetBlockFilterIndex(filter_type)->Start(::ChainstateActive());\n+        GetBlockFilterIndex(filter_type)->Start(chainman.ActiveChainstate());\n     }\n \n     // ********************************************************* Step 9: load wallet\n@@ -1838,7 +1840,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n-    if (::ChainActive().Tip() == nullptr) {\n+    assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n+    if (chainman.ActiveChain().Tip() == nullptr) {\n         block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {\n         fHaveGenesis = true;"
      }
    ]
  },
  {
    "sha": "a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzQ2MWE1YzZiNWM1ODMxOGE3Njg0NmFiOTY1YjljMmZlNGU4MTFk",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T21:00:00Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:54:59Z"
      },
      "message": "test/util: Use existing chainman in ::PrepareBlock",
      "tree": {
        "sha": "2fa2ae7add77e7e2740d9ff14f2d31693f9a024c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fa2ae7add77e7e2740d9ff14f2d31693f9a024c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7461a5c6b5c58318a76846ab965b9c2fe4e811d/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e391187676db4de828fa4e5fac2fb30ee5953b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e391187676db4de828fa4e5fac2fb30ee5953b21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e391187676db4de828fa4e5fac2fb30ee5953b21"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "395395bd86ccc4a6e2362dd92999a764d9be2a5f",
        "filename": "src/test/util/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7461a5c6b5c58318a76846ab965b9c2fe4e811d/src/test/util/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7461a5c6b5c58318a76846ab965b9c2fe4e811d/src/test/util/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/mining.cpp?ref=a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
        "patch": "@@ -42,11 +42,11 @@ std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coi\n {\n     auto block = std::make_shared<CBlock>(\n         BlockAssembler{*Assert(node.mempool), Params()}\n-            .CreateNewBlock(::ChainstateActive(), coinbase_scriptPubKey)\n+            .CreateNewBlock(Assert(node.chainman)->ActiveChainstate(), coinbase_scriptPubKey)\n             ->block);\n \n     LOCK(cs_main);\n-    block->nTime = ::ChainActive().Tip()->GetMedianTimePast() + 1;\n+    block->nTime = Assert(node.chainman)->ActiveChain().Tip()->GetMedianTimePast() + 1;\n     block->hashMerkleRoot = BlockMerkleRoot(*block);\n \n     return block;"
      }
    ]
  },
  {
    "sha": "755ceeac73a7ad847224fb17986261a883361e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTVjZWVhYzczYTdhZDg0NzIyNGZiMTc5ODYyNjFhODgzMzYxZTc1",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-14T21:03:18Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "test/miner_tests: Pass in chain tip to CreateBlockIndex",
      "tree": {
        "sha": "5f52cd44e075423fa533daeebb413d482fa0d218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f52cd44e075423fa533daeebb413d482fa0d218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/755ceeac73a7ad847224fb17986261a883361e75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755ceeac73a7ad847224fb17986261a883361e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/755ceeac73a7ad847224fb17986261a883361e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755ceeac73a7ad847224fb17986261a883361e75/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7461a5c6b5c58318a76846ab965b9c2fe4e811d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7461a5c6b5c58318a76846ab965b9c2fe4e811d"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4bb458bdc416e24a1e50f3f911c7cbd21936d438",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/755ceeac73a7ad847224fb17986261a883361e75/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/755ceeac73a7ad847224fb17986261a883361e75/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=755ceeac73a7ad847224fb17986261a883361e75",
        "patch": "@@ -81,11 +81,11 @@ constexpr static struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static CBlockIndex CreateBlockIndex(int nHeight, CBlockIndex* active_chain_tip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n-    index.pprev = ::ChainActive().Tip();\n+    index.pprev = active_chain_tip;\n     return index;\n }\n \n@@ -437,7 +437,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+\n+    {\n+        CBlockIndex* active_chain_tip = m_node.chainman->ActiveChain().Tip();\n+        BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(active_chain_tip->nHeight + 2, active_chain_tip))); // Sequence locks pass on 2nd block\n+    }\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n@@ -449,8 +453,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+\n+    {\n+        CBlockIndex* active_chain_tip = m_node.chainman->ActiveChain().Tip();\n+        BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(active_chain_tip->nHeight + 1, active_chain_tip))); // Sequence locks pass 512 seconds later\n+    }\n+\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n "
      }
    ]
  },
  {
    "sha": "b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzhjM2M5NTI5N2NkOWJmODBmMWNmYjhmNTJkNzNlNmYxZWEyMDll",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T20:46:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "test: Pass in CoinsTip to ValidateCheckInputsForAllFlags",
      "tree": {
        "sha": "29b1f1a37b998f16806d6c11753d575bcdea6ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29b1f1a37b998f16806d6c11753d575bcdea6ce7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "755ceeac73a7ad847224fb17986261a883361e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/755ceeac73a7ad847224fb17986261a883361e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/755ceeac73a7ad847224fb17986261a883361e75"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "60fac699ff3582f27326e00a3cb9174ae0721d7b",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
        "patch": "@@ -106,7 +106,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n // should fail.\n // Capture this interaction with the upgraded_nop argument: set it when evaluating\n // any script flag that is implemented as an upgraded NOP code.\n-static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t failing_flags, bool add_to_cache, CCoinsViewCache& active_coins_tip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     PrecomputedTransactionData txdata;\n     // If we add many more flags, this loop can get too expensive, but we can\n@@ -123,7 +123,7 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n             // WITNESS requires P2SH\n             test_flags |= SCRIPT_VERIFY_P2SH;\n         }\n-        bool ret = CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, nullptr);\n+        bool ret = CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, nullptr);\n         // CheckInputScripts should succeed iff test_flags doesn't intersect with\n         // failing_flags\n         bool expected_return_value = !(test_flags & failing_flags);\n@@ -133,13 +133,13 @@ static void ValidateCheckInputsForAllFlags(const CTransaction &tx, uint32_t fail\n         if (ret && add_to_cache) {\n             // Check that we get a cache hit if the tx was valid\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK(scriptchecks.empty());\n         } else {\n             // Check that we get script executions to check, if the transaction\n             // was invalid, or we didn't add to cache.\n             std::vector<CScriptCheck> scriptchecks;\n-            BOOST_CHECK(CheckInputScripts(tx, state, &::ChainstateActive().CoinsTip(), test_flags, true, add_to_cache, txdata, &scriptchecks));\n+            BOOST_CHECK(CheckInputScripts(tx, state, &active_coins_tip, test_flags, true, add_to_cache, txdata, &scriptchecks));\n             BOOST_CHECK_EQUAL(scriptchecks.size(), tx.vin.size());\n         }\n     }\n@@ -215,7 +215,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false);\n+        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, ::ChainstateActive().CoinsTip());\n     }\n \n     // And if we produce a block with this tx, it should be valid (DERSIG not\n@@ -241,7 +241,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, ::ChainstateActive().CoinsTip());\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -264,7 +264,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, ::ChainstateActive().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -292,7 +292,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, ::ChainstateActive().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n@@ -321,11 +321,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, ::ChainstateActive().CoinsTip());\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, ::ChainstateActive().CoinsTip());\n     }\n \n     {\n@@ -350,7 +350,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true);\n+        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, ::ChainstateActive().CoinsTip());\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached."
      }
    ]
  },
  {
    "sha": "3d54028c480811e124c9904539adcc84fd786d26",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDU0MDI4YzQ4MDgxMWUxMjRjOTkwNDUzOWFkY2M4NGZkNzg2ZDI2",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-09T20:15:15Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "scripted-diff: test: Use existing chainman in unit tests\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- src/test \\\n    | grep -v '^src/test/fuzz' \\\n    | xargs sed -i -E \\\n            -e 's@g_chainman\\.m_blockman@m_node.chainman->m_blockman@g' \\\n            -e 's@([^:])(Chain(state|)Active)@\\1::\\2@g' \\\n            -e 's@::Chain(state|)Active\\(\\)@m_node.chainman->ActiveChain\\1()@g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "a590d78f8202de5b441563a263584406284d75f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a590d78f8202de5b441563a263584406284d75f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d54028c480811e124c9904539adcc84fd786d26",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d54028c480811e124c9904539adcc84fd786d26",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d54028c480811e124c9904539adcc84fd786d26",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d54028c480811e124c9904539adcc84fd786d26/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b38c3c95297cd9bf80f1cfb8f52d73e6f1ea209e"
      }
    ],
    "stats": {
      "total": 220,
      "additions": 110,
      "deletions": 110
    },
    "files": [
      {
        "sha": "6f95ab6fe2b7789cf46f4254760cdafa2af81f43",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -62,7 +62,7 @@ CBlock BuildChainTestingSetup::CreateBlock(const CBlockIndex* prev,\n     const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(*m_node.mempool, chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n     block.hashPrevBlock = prev->GetBlockHash();\n     block.nTime = prev->nTime + 1;\n@@ -117,9 +117,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         std::vector<BlockFilter> filters;\n         std::vector<uint256> filter_hashes;\n \n-        for (const CBlockIndex* block_index = ::ChainActive().Genesis();\n+        for (const CBlockIndex* block_index = m_node.chainman->ActiveChain().Genesis();\n              block_index != nullptr;\n-             block_index = ::ChainActive().Next(block_index)) {\n+             block_index = m_node.chainman->ActiveChain().Next(block_index)) {\n             BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n             BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n             BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n@@ -131,7 +131,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     // BlockUntilSyncedToCurrentChain should return false before index is started.\n     BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n \n-    filter_index.Start(::ChainstateActive());\n+    filter_index.Start(m_node.chainman->ActiveChainstate());\n \n     // Allow filter index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;\n@@ -145,9 +145,9 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     {\n         LOCK(cs_main);\n         const CBlockIndex* block_index;\n-        for (block_index = ::ChainActive().Genesis();\n+        for (block_index = m_node.chainman->ActiveChain().Genesis();\n              block_index != nullptr;\n-             block_index = ::ChainActive().Next(block_index)) {\n+             block_index = m_node.chainman->ActiveChain().Next(block_index)) {\n             CheckFilterLookups(filter_index, block_index, last_header);\n         }\n     }\n@@ -156,7 +156,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n     const CBlockIndex* tip;\n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n+        tip = m_node.chainman->ActiveChain().Tip();\n     }\n     CKey coinbase_key_A, coinbase_key_B;\n     coinbase_key_A.MakeNewKey(true);\n@@ -178,7 +178,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -196,7 +196,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -210,7 +210,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = g_chainman.m_blockman.LookupBlockIndex(block->GetHash());\n+            block_index = m_node.chainman->m_blockman.LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n@@ -231,14 +231,14 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n          {\n              LOCK(cs_main);\n-             block_index = g_chainman.m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n+             block_index = m_node.chainman->m_blockman.LookupBlockIndex(chainA[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainA_last_header);\n \n          {\n              LOCK(cs_main);\n-             block_index = g_chainman.m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n+             block_index = m_node.chainman->m_blockman.LookupBlockIndex(chainB[i]->GetHash());\n          }\n          BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n          CheckFilterLookups(filter_index, block_index, chainB_last_header);\n@@ -250,7 +250,7 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, BuildChainTestingSetup)\n \n     {\n         LOCK(cs_main);\n-        tip = ::ChainActive().Tip();\n+        tip = m_node.chainman->ActiveChain().Tip();\n     }\n     BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n     BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));"
      },
      {
        "sha": "5330f07ea156cb743683b7c116fe9403fc4fa6f8",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -94,8 +94,8 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     // This test requires that we have a chain with non-zero work.\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip() != nullptr);\n-        BOOST_CHECK(::ChainActive().Tip()->nChainWork > 0);\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip() != nullptr);\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->nChainWork > 0);\n     }\n \n     // Test starts here"
      },
      {
        "sha": "42a7c7798c7524d3c48375b106c122220c2bb623",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -98,7 +98,7 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n     auto* orig_tip = active.Tip();\n     for (int i = 0; i < 10; ++i) {\n         BlockValidationState state;\n-        ChainstateActive().InvalidateBlock(state, Params(), active.Tip());\n+        m_node.chainman->ActiveChainstate().InvalidateBlock(state, Params(), active.Tip());\n     }\n     BOOST_CHECK_EQUAL(active.Height(), orig_tip->nHeight - 10);\n     coinbaseKey.MakeNewKey(true);"
      },
      {
        "sha": "8f47dfbbc6759cb3808bdc680150f93fb98ec4d5",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -28,7 +28,7 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        return CheckSequenceLocks(::ChainstateActive(), *m_node.mempool, tx, flags);\n+        return CheckSequenceLocks(m_node.chainman->ActiveChainstate(), *m_node.mempool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n };\n@@ -122,7 +122,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     uint256 hashHighFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -142,7 +142,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -156,7 +156,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -177,7 +177,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -190,7 +190,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey);\n+    pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n \n@@ -212,7 +212,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 110 blocks :)\n@@ -225,17 +225,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         {\n             LOCK(cs_main);\n             pblock->nVersion = 1;\n-            pblock->nTime = ::ChainActive().Tip()->GetMedianTimePast()+1;\n+            pblock->nTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1;\n             CMutableTransaction txCoinbase(*pblock->vtx[0]);\n             txCoinbase.nVersion = 1;\n             txCoinbase.vin[0].scriptSig = CScript();\n             txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n-            txCoinbase.vin[0].scriptSig.push_back(::ChainActive().Height());\n+            txCoinbase.vin[0].scriptSig.push_back(m_node.chainman->ActiveChain().Height());\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n             pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n             if (txFirst.size() == 0)\n-                baseheight = ::ChainActive().Height();\n+                baseheight = m_node.chainman->ActiveChain().Height();\n             if (txFirst.size() < 4)\n                 txFirst.push_back(pblock->vtx[0]);\n             pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n@@ -250,7 +250,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     LOCK(m_node.mempool->cs);\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -275,7 +275,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n \n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey), std::runtime_error, HasReason(\"bad-blk-sigops\"));\n     m_node.mempool->clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -289,7 +289,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // block size > limit\n@@ -309,13 +309,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // orphan in *m_node.mempool, template creation fails\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // child with higher feerate than parent\n@@ -332,7 +332,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n     m_node.mempool->clear();\n \n     // coinbase in *m_node.mempool, template creation fails\n@@ -344,7 +344,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // give it a fee so it'll get mined\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw bad-cb-multiple\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey), std::runtime_error, HasReason(\"bad-cb-multiple\"));\n     m_node.mempool->clear();\n \n     // double spend txn pair in *m_node.mempool, template creation fails\n@@ -357,35 +357,35 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey), std::runtime_error, HasReason(\"bad-txns-inputs-missingorspent\"));\n     m_node.mempool->clear();\n \n     // subsidy changing\n-    int nHeight = ::ChainActive().Height();\n+    int nHeight = m_node.chainman->ActiveChain().Height();\n     // Create an actual 209999-long block chain (without valid blocks).\n-    while (::ChainActive().Tip()->nHeight < 209999) {\n-        CBlockIndex* prev = ::ChainActive().Tip();\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = m_node.chainman->ActiveChain().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        m_node.chainman->ActiveChain().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n     // Extend to a 210000-long block chain.\n-    while (::ChainActive().Tip()->nHeight < 210000) {\n-        CBlockIndex* prev = ::ChainActive().Tip();\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = m_node.chainman->ActiveChain().Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n-        ::ChainstateActive().CoinsTip().SetBestBlock(next->GetBlockHash());\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        ::ChainActive().SetTip(next);\n+        m_node.chainman->ActiveChain().SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n \n     // invalid p2sh txn in *m_node.mempool, template creation fails\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -402,20 +402,20 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n     // Should throw block-validation-failed\n-    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n+    BOOST_CHECK_EXCEPTION(AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey), std::runtime_error, HasReason(\"block-validation-failed\"));\n     m_node.mempool->clear();\n \n     // Delete the dummy blocks again.\n-    while (::ChainActive().Tip()->nHeight > nHeight) {\n-        CBlockIndex* del = ::ChainActive().Tip();\n-        ::ChainActive().SetTip(del->pprev);\n-        ::ChainstateActive().CoinsTip().SetBestBlock(del->pprev->GetBlockHash());\n+    while (m_node.chainman->ActiveChain().Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = m_node.chainman->ActiveChain().Tip();\n+        m_node.chainman->ActiveChain().SetTip(del->pprev);\n+        m_node.chainman->ActiveChainstate().CoinsTip().SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;\n     }\n \n     // non-final txs in mempool\n-    SetMockTime(::ChainActive().Tip()->GetMedianTimePast()+1);\n+    SetMockTime(m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1);\n     int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n     // height map\n     std::vector<int> prevheights;\n@@ -427,15 +427,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = ::ChainActive().Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    tx.vin[0].nSequence = m_node.chainman->ActiveChain().Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n     prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     {\n@@ -445,11 +445,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((::ChainActive().Tip()->GetMedianTimePast()+1-::ChainActive()[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((m_node.chainman->ActiveChain().Tip()->GetMedianTimePast()+1-m_node.chainman->ActiveChain()[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -461,36 +461,36 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     prevheights[0] = baseheight + 3;\n-    tx.nLockTime = ::ChainActive().Tip()->nHeight + 1;\n+    tx.nLockTime = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+    BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n-    tx.nLockTime = ::ChainActive().Tip()->GetMedianTimePast();\n+    tx.nLockTime = m_node.chainman->ActiveChain().Tip()->GetMedianTimePast();\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(CTransaction(tx), ::ChainActive().Tip()->nHeight + 2, ::ChainActive().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+    BOOST_CHECK(IsFinalTx(CTransaction(tx), m_node.chainman->ActiveChain().Tip()->nHeight + 2, m_node.chainman->ActiveChain().Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n     // mempool-dependent transactions (not added)\n     tx.vin[0].prevout.hash = hash;\n-    prevheights[0] = ::ChainActive().Tip()->nHeight + 1;\n+    prevheights[0] = m_node.chainman->ActiveChain().Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(::ChainActive().Tip(), CTransaction(tx), flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(m_node.chainman->ActiveChain().Tip(), CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n@@ -499,7 +499,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -508,14 +508,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3U);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    ::ChainActive().Tip()->nHeight++;\n-    SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n+        m_node.chainman->ActiveChain().Tip()->GetAncestor(m_node.chainman->ActiveChain().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    m_node.chainman->ActiveChain().Tip()->nHeight++;\n+    SetMockTime(m_node.chainman->ActiveChain().Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n-    ::ChainActive().Tip()->nHeight--;\n+    m_node.chainman->ActiveChain().Tip()->nHeight--;\n     SetMockTime(0);\n     m_node.mempool->clear();\n "
      },
      {
        "sha": "174e92f5e3c67455fe2bcf78240d4f0ccdd63f5d",
        "filename": "src/test/txindex_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/txindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/txindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txindex_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -28,7 +28,7 @@ BOOST_FIXTURE_TEST_CASE(txindex_initial_sync, TestChain100Setup)\n     // BlockUntilSyncedToCurrentChain should return false before txindex is started.\n     BOOST_CHECK(!txindex.BlockUntilSyncedToCurrentChain());\n \n-    txindex.Start(::ChainstateActive());\n+    txindex.Start(m_node.chainman->ActiveChainstate());\n \n     // Allow tx index to catch up with the block index.\n     constexpr int64_t timeout_ms = 10 * 1000;"
      },
      {
        "sha": "288a1b2feb3451b01e9005da46c574f7b10183f0",
        "filename": "src/test/txvalidation_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/txvalidation_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/txvalidation_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidation_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -38,7 +38,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_reject_coinbase, TestChain100Setup)\n \n     BOOST_CHECK_EQUAL(\n             false,\n-            AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n+            AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, state, MakeTransactionRef(coinbaseTx),\n                 nullptr /* plTxnReplaced */,\n                 true /* bypass_limits */));\n "
      },
      {
        "sha": "f4c6ab97b50d5cb2cf37fa779b936bcd0be434b4",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -29,7 +29,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n         LOCK(cs_main);\n \n         TxValidationState state;\n-        return AcceptToMemoryPool(::ChainstateActive(), *m_node.mempool, state, MakeTransactionRef(tx),\n+        return AcceptToMemoryPool(m_node.chainman->ActiveChainstate(), *m_node.mempool, state, MakeTransactionRef(tx),\n             nullptr /* plTxnReplaced */, true /* bypass_limits */);\n     };\n \n@@ -60,15 +60,15 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[0]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n     m_node.mempool->clear();\n \n@@ -77,7 +77,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() != block.GetHash());\n     }\n     m_node.mempool->clear();\n \n@@ -88,7 +88,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n     {\n         LOCK(cs_main);\n-        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n+        BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() == block.GetHash());\n     }\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n@@ -202,20 +202,20 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         TxValidationState state;\n         PrecomputedTransactionData ptd_spend_tx;\n \n-        BOOST_CHECK(!CheckInputScripts(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n+        BOOST_CHECK(!CheckInputScripts(CTransaction(spend_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, nullptr));\n \n         // If we call again asking for scriptchecks (as happens in\n         // ConnectBlock), we should add a script check object for this -- we're\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(spend_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(spend_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 1U);\n \n         // Test that CheckInputScripts returns true iff DERSIG-enforcing flags are\n         // not present.  Don't add these checks to the cache, so that we can\n         // test later that block validation works fine in the absence of cached\n         // successes.\n-        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(spend_tx), SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC, false, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     // And if we produce a block with this tx, it should be valid (DERSIG not\n@@ -224,8 +224,8 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n     LOCK(cs_main);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n-    BOOST_CHECK(::ChainstateActive().CoinsTip().GetBestBlock() == block.GetHash());\n+    BOOST_CHECK(m_node.chainman->ActiveChain().Tip()->GetBlockHash() == block.GetHash());\n+    BOOST_CHECK(m_node.chainman->ActiveChainstate().CoinsTip().GetBestBlock() == block.GetHash());\n \n     // Test P2SH: construct a transaction that is valid without P2SH, and\n     // then test validity with P2SH.\n@@ -241,7 +241,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         std::vector<unsigned char> vchSig2(p2pk_scriptPubKey.begin(), p2pk_scriptPubKey.end());\n         invalid_under_p2sh_tx.vin[0].scriptSig << vchSig2;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_under_p2sh_tx), SCRIPT_VERIFY_P2SH, true, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     // Test CHECKLOCKTIMEVERIFY\n@@ -264,13 +264,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_cltv_tx), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_cltv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_cltv_tx), state, ::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_cltv_tx), state, m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TEST CHECKSEQUENCEVERIFY\n@@ -292,13 +292,13 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         vchSig.push_back((unsigned char)SIGHASH_ALL);\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 101;\n \n-        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(invalid_with_csv_tx), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Make it valid, and check again\n         invalid_with_csv_tx.vin[0].scriptSig = CScript() << vchSig << 100;\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n-        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_csv_tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(invalid_with_csv_tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_CHECKSEQUENCEVERIFY, true, true, txdata, nullptr));\n     }\n \n     // TODO: add tests for remaining script flags\n@@ -321,11 +321,11 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         UpdateInput(valid_with_witness_tx.vin[0], sigdata);\n \n         // This should be valid under all script flags.\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), 0, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Remove the witness, and check that it is now invalid.\n         valid_with_witness_tx.vin[0].scriptWitness.SetNull();\n-        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(valid_with_witness_tx), SCRIPT_VERIFY_WITNESS, true, m_node.chainman->ActiveChainstate().CoinsTip());\n     }\n \n     {\n@@ -350,7 +350,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         }\n \n         // This should be valid under all script flags\n-        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, ::ChainstateActive().CoinsTip());\n+        ValidateCheckInputsForAllFlags(CTransaction(tx), 0, true, m_node.chainman->ActiveChainstate().CoinsTip());\n \n         // Check that if the second input is invalid, but the first input is\n         // valid, the transaction is not cached.\n@@ -360,12 +360,12 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         TxValidationState state;\n         PrecomputedTransactionData txdata;\n         // This transaction is now invalid under segwit, because of the second input.\n-        BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n+        BOOST_CHECK(!CheckInputScripts(CTransaction(tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, nullptr));\n \n         std::vector<CScriptCheck> scriptchecks;\n         // Make sure this transaction was not cached (ie because the first\n         // input was valid)\n-        BOOST_CHECK(CheckInputScripts(CTransaction(tx), state, &::ChainstateActive().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n+        BOOST_CHECK(CheckInputScripts(CTransaction(tx), state, &m_node.chainman->ActiveChainstate().CoinsTip(), SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n         BOOST_CHECK_EQUAL(scriptchecks.size(), 2U);\n     }"
      },
      {
        "sha": "cd2188c78fa640f39206486374e2e7a3d47eebc5",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -173,17 +173,17 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     RegisterAllCoreRPCCommands(tableRPC);\n \n     m_node.chainman->InitializeChainstate(*m_node.mempool);\n-    ::ChainstateActive().InitCoinsDB(\n+    m_node.chainman->ActiveChainstate().InitCoinsDB(\n         /* cache_size_bytes */ 1 << 23, /* in_memory */ true, /* should_wipe */ false);\n-    assert(!::ChainstateActive().CanFlushToDisk());\n-    ::ChainstateActive().InitCoinsCache(1 << 23);\n-    assert(::ChainstateActive().CanFlushToDisk());\n-    if (!::ChainstateActive().LoadGenesisBlock(chainparams)) {\n+    assert(!m_node.chainman->ActiveChainstate().CanFlushToDisk());\n+    m_node.chainman->ActiveChainstate().InitCoinsCache(1 << 23);\n+    assert(m_node.chainman->ActiveChainstate().CanFlushToDisk());\n+    if (!m_node.chainman->ActiveChainstate().LoadGenesisBlock(chainparams)) {\n         throw std::runtime_error(\"LoadGenesisBlock failed.\");\n     }\n \n     BlockValidationState state;\n-    if (!::ChainstateActive().ActivateBestChain(state, chainparams)) {\n+    if (!m_node.chainman->ActiveChainstate().ActivateBestChain(state, chainparams)) {\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n@@ -215,13 +215,13 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n {\n     const CChainParams& chainparams = Params();\n     CTxMemPool empty_pool;\n-    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(::ChainstateActive(), scriptPubKey)->block;\n+    CBlock block = BlockAssembler(empty_pool, chainparams).CreateNewBlock(m_node.chainman->ActiveChainstate(), scriptPubKey)->block;\n \n     Assert(block.vtx.size() == 1);\n     for (const CMutableTransaction& tx : txns) {\n         block.vtx.push_back(MakeTransactionRef(tx));\n     }\n-    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)));\n+    RegenerateCommitments(block, WITH_LOCK(::cs_main, return std::ref(m_node.chainman->m_blockman)));\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      },
      {
        "sha": "61067548ce82cebc5a35166730115e15ed0ebe57",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d54028c480811e124c9904539adcc84fd786d26/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d54028c480811e124c9904539adcc84fd786d26/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=3d54028c480811e124c9904539adcc84fd786d26",
        "patch": "@@ -67,7 +67,7 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n     CScript pubKey;\n     pubKey << i++ << OP_TRUE;\n \n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(m_node.chainman->ActiveChainstate(), pubKey);\n     auto pblock = std::make_shared<CBlock>(ptemplate->block);\n     pblock->hashPrevBlock = prev_hash;\n     pblock->nTime = ++time;\n@@ -95,8 +95,8 @@ std::shared_ptr<CBlock> MinerTestingSetup::Block(const uint256& prev_hash)\n \n std::shared_ptr<CBlock> MinerTestingSetup::FinalizeBlock(std::shared_ptr<CBlock> pblock)\n {\n-    LOCK(cs_main); // For g_chainman.m_blockman.LookupBlockIndex\n-    GenerateCoinbaseCommitment(*pblock, g_chainman.m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n+    LOCK(cs_main); // For m_node.chainman->m_blockman.LookupBlockIndex\n+    GenerateCoinbaseCommitment(*pblock, m_node.chainman->m_blockman.LookupBlockIndex(pblock->hashPrevBlock), Params().GetConsensus());\n \n     pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n \n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     const CBlockIndex* initial_tip = nullptr;\n     {\n         LOCK(cs_main);\n-        initial_tip = ::ChainActive().Tip();\n+        initial_tip = m_node.chainman->ActiveChain().Tip();\n     }\n     auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n     RegisterSharedValidationInterface(sub);\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     UnregisterSharedValidationInterface(sub);\n \n     LOCK(cs_main);\n-    BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(sub->m_expected_tip, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n }\n \n /**\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n \n     // Run the test multiple times\n     for (int test_runs = 3; test_runs > 0; --test_runs) {\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n         // Later on split from here\n         const uint256 split_hash{last_mined->hashPrevBlock};\n@@ -287,7 +287,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             std::list<CTransactionRef> plTxnReplaced;\n             for (const auto& tx : txs) {\n                 BOOST_REQUIRE(AcceptToMemoryPool(\n-                    ::ChainstateActive(),\n+                    m_node.chainman->ActiveChainstate(),\n                     *m_node.mempool,\n                     state,\n                     tx,\n@@ -324,15 +324,15 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n             }\n             LOCK(cs_main);\n             // We are done with the reorg, so the tip must have changed\n-            assert(tip_init != ::ChainActive().Tip()->GetBlockHash());\n+            assert(tip_init != m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }};\n \n         // Submit the reorg in this thread to invalidate and remove the txs from the tx pool\n         for (const auto& b : reorg) {\n             ProcessBlock(b);\n         }\n         // Check that the reorg was eventually successful\n-        BOOST_CHECK_EQUAL(last_mined->GetHash(), ::ChainActive().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(last_mined->GetHash(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n         // We can join the other thread, which returns when the reorg was successful\n         rpc_thread.join();\n@@ -343,7 +343,7 @@ BOOST_AUTO_TEST_CASE(witness_commitment_index)\n {\n     CScript pubKey;\n     pubKey << 1 << OP_TRUE;\n-    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(::ChainstateActive(), pubKey);\n+    auto ptemplate = BlockAssembler(*m_node.mempool, Params()).CreateNewBlock(m_node.chainman->ActiveChainstate(), pubKey);\n     CBlock pblock = ptemplate->block;\n \n     CTxOut witness;"
      }
    ]
  },
  {
    "sha": "c3efbcb2b981fa9cd6685ef102d7483ab2245449",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2VmYmNiMmI5ODFmYTljZDY2ODVlZjEwMmQ3NDgzYWIyMjQ1NDQ5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-27T22:17:51Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "fuzz: Initialize a TestingSetup for test_one_input\n\nFor fuzz tests that need it.",
      "tree": {
        "sha": "83d0c94c5baa0241ddee95254943e352e533edaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83d0c94c5baa0241ddee95254943e352e533edaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3efbcb2b981fa9cd6685ef102d7483ab2245449",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efbcb2b981fa9cd6685ef102d7483ab2245449",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3efbcb2b981fa9cd6685ef102d7483ab2245449",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efbcb2b981fa9cd6685ef102d7483ab2245449/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d54028c480811e124c9904539adcc84fd786d26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d54028c480811e124c9904539adcc84fd786d26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d54028c480811e124c9904539adcc84fd786d26"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e48336750ddde03cd37cfde4f3719cbe9083799a",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3efbcb2b981fa9cd6685ef102d7483ab2245449/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3efbcb2b981fa9cd6685ef102d7483ab2245449/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=c3efbcb2b981fa9cd6685ef102d7483ab2245449",
        "patch": "@@ -25,6 +25,7 @@\n #include <vector>\n \n namespace {\n+const TestingSetup* g_setup;\n const Coin EMPTY_COIN{};\n \n bool operator==(const Coin& a, const Coin& b)\n@@ -37,6 +38,7 @@ bool operator==(const Coin& a, const Coin& b)\n void initialize_coins_view()\n {\n     static const auto testing_setup = MakeFuzzingContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n@@ -263,7 +265,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 CCoinsStats stats;\n                 bool expected_code_path = false;\n                 try {\n-                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, CoinStatsHashType::HASH_SERIALIZED);\n+                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_setup->m_node.chainman->m_blockman)), stats, CoinStatsHashType::HASH_SERIALIZED);\n                 } catch (const std::logic_error&) {\n                     expected_code_path = true;\n                 }"
      },
      {
        "sha": "002a06875b59acd600c6fb5bba9081639c00c418",
        "filename": "src/test/fuzz/load_external_block_file.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3efbcb2b981fa9cd6685ef102d7483ab2245449/src/test/fuzz/load_external_block_file.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3efbcb2b981fa9cd6685ef102d7483ab2245449/src/test/fuzz/load_external_block_file.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/load_external_block_file.cpp?ref=c3efbcb2b981fa9cd6685ef102d7483ab2245449",
        "patch": "@@ -13,9 +13,14 @@\n #include <cstdint>\n #include <vector>\n \n+namespace {\n+const TestingSetup* g_setup;\n+} // namespace\n+\n void initialize_load_external_block_file()\n {\n     static const auto testing_setup = MakeFuzzingContext<const TestingSetup>();\n+    g_setup = testing_setup.get();\n }\n \n FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n@@ -27,5 +32,5 @@ FUZZ_TARGET_INIT(load_external_block_file, initialize_load_external_block_file)\n         return;\n     }\n     FlatFilePos flat_file_pos;\n-    ::ChainstateActive().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n+    g_setup->m_node.chainman->ActiveChainstate().LoadExternalBlockFile(Params(), fuzzed_block_file, fuzzed_data_provider.ConsumeBool() ? &flat_file_pos : nullptr);\n }"
      }
    ]
  },
  {
    "sha": "b24576ecde92ac860fa2bf448e146d80ca00d0e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjQ1NzZlY2RlOTJhYzg2MGZhMmJmNDQ4ZTE0NmQ4MGNhMDBkMGU3",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:35:45Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "scripted-diff: wallet/test: Use existing chainman\n\n-BEGIN VERIFY SCRIPT-\ngit ls-files -- src/wallet/test \\\n    | xargs sed -i -E \\\n            -e 's@g_chainman\\.m_blockman@m_node.chainman->m_blockman@g' \\\n            -e 's@([^:])(Chain(state|)Active)@\\1::\\2@g' \\\n            -e 's@::Chain(state|)Active\\(\\)@m_node.chainman->ActiveChain\\1()@g'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e29c9c4cf3049af84795f1efd264470a0a7584b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e29c9c4cf3049af84795f1efd264470a0a7584b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b24576ecde92ac860fa2bf448e146d80ca00d0e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b24576ecde92ac860fa2bf448e146d80ca00d0e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b24576ecde92ac860fa2bf448e146d80ca00d0e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b24576ecde92ac860fa2bf448e146d80ca00d0e7/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3efbcb2b981fa9cd6685ef102d7483ab2245449",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efbcb2b981fa9cd6685ef102d7483ab2245449",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3efbcb2b981fa9cd6685ef102d7483ab2245449"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "6404d7701ce97ed7605b34f21ed8f9561d2b89d7",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b24576ecde92ac860fa2bf448e146d80ca00d0e7/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b24576ecde92ac860fa2bf448e146d80ca00d0e7/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=b24576ecde92ac860fa2bf448e146d80ca00d0e7",
        "patch": "@@ -80,17 +80,17 @@ static void AddKey(CWallet& wallet, const CKey& key)\n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* oldTip = ::ChainActive().Tip();\n+    CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = ::ChainActive().Tip();\n+    CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\n \n     // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -109,7 +109,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -135,7 +135,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -160,7 +160,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         CWallet wallet(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             LOCK(wallet.cs_wallet);\n-            wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet);\n@@ -177,10 +177,10 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* oldTip = ::ChainActive().Tip();\n+    CBlockIndex* oldTip = m_node.chainman->ActiveChain().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = ::ChainActive().Tip();\n+    CBlockIndex* newTip = m_node.chainman->ActiveChain().Tip();\n \n     // Prune the older block file.\n     {\n@@ -240,7 +240,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n-    const int64_t BLOCK_TIME = ::ChainActive().Tip()->GetBlockTimeMax() + 5;\n+    const int64_t BLOCK_TIME = m_node.chainman->ActiveChain().Tip()->GetBlockTimeMax() + 5;\n     SetMockTime(BLOCK_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n@@ -263,7 +263,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n             spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n             AddWallet(wallet);\n-            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         util::Ref context;\n         JSONRPCRequest request(context);\n@@ -286,7 +286,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n-        wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n         RemoveWallet(wallet, nullopt);\n \n@@ -315,9 +315,9 @@ BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n \n     LOCK2(wallet.cs_wallet, spk_man->cs_KeyStore);\n-    wallet.SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+    wallet.SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n \n-    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 0);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash(), 0);\n     wtx.m_confirm = confirm;\n \n     // Call GetImmatureCredit() once before adding the key to the wallet to\n@@ -488,17 +488,17 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet = MakeUnique<CWallet>(m_node.chain.get(), \"\", CreateMockWalletDatabase());\n         {\n             LOCK2(wallet->cs_wallet, ::cs_main);\n-            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+            wallet->SetLastBlockProcessed(m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         }\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(m_node.chainman->ActiveChain().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n-        BOOST_CHECK_EQUAL(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n-        BOOST_CHECK_EQUAL(*result.last_scanned_height, ::ChainActive().Height());\n+        BOOST_CHECK_EQUAL(result.last_scanned_block, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n+        BOOST_CHECK_EQUAL(*result.last_scanned_height, m_node.chainman->ActiveChain().Height());\n         BOOST_CHECK(result.last_failed_block.IsNull());\n     }\n \n@@ -527,10 +527,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n \n         LOCK(wallet->cs_wallet);\n-        wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(wallet->GetLastBlockHeight() + 1, m_node.chainman->ActiveChain().Tip()->GetBlockHash());\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n-        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, ::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash(), 1);\n+        CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, m_node.chainman->ActiveChain().Height(), m_node.chainman->ActiveChain().Tip()->GetBlockHash(), 1);\n         it->second.m_confirm = confirm;\n         return it->second;\n     }"
      }
    ]
  },
  {
    "sha": "947b3c59d28b828d18c91cdf19a17ae762de4cfc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDdiM2M1OWQyOGI4MjhkMThjOTFjZGYxOWExN2FlNzYyZGU0Y2Zj",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-09-18T17:35:27Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "qt/test: Use existing chainman in ::TestGUI (can be scripted-diff)",
      "tree": {
        "sha": "92efaa8ea8cd2738b7fc3830f270630dabe75af0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92efaa8ea8cd2738b7fc3830f270630dabe75af0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/947b3c59d28b828d18c91cdf19a17ae762de4cfc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947b3c59d28b828d18c91cdf19a17ae762de4cfc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/947b3c59d28b828d18c91cdf19a17ae762de4cfc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947b3c59d28b828d18c91cdf19a17ae762de4cfc/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b24576ecde92ac860fa2bf448e146d80ca00d0e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b24576ecde92ac860fa2bf448e146d80ca00d0e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b24576ecde92ac860fa2bf448e146d80ca00d0e7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "48879a34a36c573bce9f4f2dd51af838078da87e",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/947b3c59d28b828d18c91cdf19a17ae762de4cfc/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/947b3c59d28b828d18c91cdf19a17ae762de4cfc/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=947b3c59d28b828d18c91cdf19a17ae762de4cfc",
        "patch": "@@ -147,14 +147,14 @@ void TestGUI(interfaces::Node& node)\n         LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n         wallet->SetAddressBook(GetDestinationForKey(test.coinbaseKey.GetPubKey(), wallet->m_default_address_type), \"\", \"receive\");\n         spk_man->AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n-        wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n+        wallet->SetLastBlockProcessed(105, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n     }\n     {\n         WalletRescanReserver reserver(*wallet);\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n-        QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n+        QCOMPARE(result.last_scanned_block, node.context()->chainman->ActiveChain().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());\n     }\n     wallet->SetBroadcastTransactions(true);"
      }
    ]
  },
  {
    "sha": "a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2Q0MDFjYjBiZWYxYTZkMThjYWY1YTcyNGMwMmI5Y2M1NmM2MmFl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-11-04T22:18:09Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "miner: Remove stray review-only assertion\n\nUnfortunately, this assertion doesn't fit the regex in the\nscripted-diff. Therefore, we remove it manually.",
      "tree": {
        "sha": "0a6bbdb6630333c3d050d3899a8c796ac225e080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a6bbdb6630333c3d050d3899a8c796ac225e080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "947b3c59d28b828d18c91cdf19a17ae762de4cfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/947b3c59d28b828d18c91cdf19a17ae762de4cfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/947b3c59d28b828d18c91cdf19a17ae762de4cfc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b09a5a5366155598ae87201d0675186491ce4536",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
        "patch": "@@ -45,7 +45,7 @@ void RegenerateCommitments(CBlock& block, BlockManager& blockman)\n     tx.vout.erase(tx.vout.begin() + GetWitnessCommitmentIndex(block));\n     block.vtx.at(0) = MakeTransactionRef(tx);\n \n-    GenerateCoinbaseCommitment(block, WITH_LOCK(::cs_main, assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman)); return blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n+    GenerateCoinbaseCommitment(block, WITH_LOCK(::cs_main, return blockman.LookupBlockIndex(block.hashPrevBlock)), Params().GetConsensus());\n \n     block.hashMerkleRoot = BlockMerkleRoot(block);\n }"
      }
    ]
  },
  {
    "sha": "9b3925b8be927e852e6a4ce28e47a068e380fa28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjM5MjViOGJlOTI3ZTg1MmU2YTRjZTI4ZTQ3YTA2OGUzODBmYTI4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:20:26Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "scripted-diff: tree-wide: Remove all review-only assertions\n\n-BEGIN VERIFY SCRIPT-\ngit grep -lwE '(assert\\(std::addressof|TODO: REVIEW-ONLY)' | xargs sed -i -E -e '/(assert\\(std::addressof|TODO: REVIEW-ONLY)/d'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "efb79c98865195bd07323bce865fe4777d9d9004",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efb79c98865195bd07323bce865fe4777d9d9004"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b3925b8be927e852e6a4ce28e47a068e380fa28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b3925b8be927e852e6a4ce28e47a068e380fa28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b3925b8be927e852e6a4ce28e47a068e380fa28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b3925b8be927e852e6a4ce28e47a068e380fa28/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3d401cb0bef1a6d18caf5a724c02b9cc56c62ae"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 0,
      "deletions": 74
    },
    "files": [
      {
        "sha": "8388a3a287c425772b18e420bf28482df04b31c6",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -31,7 +31,6 @@ static void DuplicateInputs(benchmark::Bench& bench)\n     CMutableTransaction naughtyTx{};\n \n     LOCK(cs_main);\n-    assert(std::addressof(::ChainActive()) == std::addressof(test_setup.m_node.chainman->ActiveChain()));\n     CBlockIndex* pindexPrev = test_setup.m_node.chainman->ActiveChain().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());"
      },
      {
        "sha": "eef00420b319ba4232b1056fa755f3da24f3c746",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -299,7 +299,6 @@ void BaseIndex::Interrupt()\n \n void BaseIndex::Start(CChainState& active_chainstate)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     m_chainstate = &active_chainstate;\n     // Need to register this ValidationInterface before running Init(), so that\n     // callbacks are not missed if Init sets m_synced to true."
      },
      {
        "sha": "647770f480fcefd797cc4a66e377c8b5440a22ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -1607,7 +1607,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainman.m_blockman));\n                 if (!chainman.BlockIndex().empty() &&\n                         !chainman.m_blockman.LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n@@ -1733,7 +1732,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n                         // Only verify the DB of the active chainstate. This is fixed in later\n                         // work when we allow VerifyDB to be parameterized by chainstate.\n-                        assert(std::addressof(::ChainstateActive()) == std::addressof(chainman.ActiveChainstate()));\n                         if (&chainman.ActiveChainstate() == chainstate &&\n                             !CVerifyDB().VerifyDB(\n                                 chainparams, *chainstate, &chainstate->CoinsDB(),\n@@ -1840,7 +1838,6 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     boost::signals2::connection block_notify_genesis_wait_connection;\n-    assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n     if (chainman.ActiveChain().Tip() == nullptr) {\n         block_notify_genesis_wait_connection = uiInterface.NotifyBlockTip_connect(std::bind(BlockNotifyGenesisWait, std::placeholders::_2));\n     } else {"
      },
      {
        "sha": "0c0cdd56ea3b38435bf0c4c10220156390afdf1c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -117,7 +117,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chai\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, m_mempool.cs);\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*chainstate.m_chain.Tip()));\n     CBlockIndex* pindexPrev = chainstate.m_chain.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n@@ -177,7 +176,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(CChainState& chai\n     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);\n \n     BlockValidationState state;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     if (!TestBlockValidity(state, chainparams, chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }"
      },
      {
        "sha": "8ca0cd1b7c9ce2b7509a954729039f22eb153b1f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -1353,7 +1353,6 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n-    assert(std::addressof(g_chainman) == std::addressof(m_chainman));\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n "
      },
      {
        "sha": "c684955ea777f06751a21befbbcfd3375c4eb659",
        "filename": "src/node/coin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/coin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/coin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coin.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -12,7 +12,6 @@ void FindCoins(const NodeContext& node, std::map<COutPoint, Coin>& coins)\n {\n     assert(node.mempool);\n     LOCK2(cs_main, node.mempool->cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     CCoinsViewCache& chain_view = node.chainman->ActiveChainstate().CoinsTip();\n     CCoinsViewMemPool mempool_view(&chain_view, *node.mempool);\n     for (auto& coin : coins) {"
      },
      {
        "sha": "5cc70124451554b082d715d0730046413cc8d3cb",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -63,7 +63,6 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n         stats.nHeight = blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n     }\n "
      },
      {
        "sha": "0c52d7a9fb18bee7bd06b78b44340b04d19e47b8",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -182,19 +182,16 @@ class NodeImpl : public Node\n     int getNumBlocks() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n         return m_context->chainman->ActiveChain().Height();\n     }\n     uint256 getBestBlockHash() override\n     {\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n         const CBlockIndex* tip = WITH_LOCK(::cs_main, return m_context->chainman->ActiveChain().Tip());\n         return tip ? tip->GetBlockHash() : Params().GenesisBlock().GetHash();\n     }\n     int64_t getLastBlockTime() override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n         if (m_context->chainman->ActiveChain().Tip()) {\n             return m_context->chainman->ActiveChain().Tip()->GetBlockTime();\n         }\n@@ -205,13 +202,11 @@ class NodeImpl : public Node\n         const CBlockIndex* tip;\n         {\n             LOCK(::cs_main);\n-            assert(std::addressof(::ChainActive()) == std::addressof(m_context->chainman->ActiveChain()));\n             tip = m_context->chainman->ActiveChain().Tip();\n         }\n         return GuessVerificationProgress(Params().TxData(), tip);\n     }\n     bool isInitialBlockDownload() override {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n         return m_context->chainman->ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool getReindex() override { return ::fReindex; }\n@@ -238,7 +233,6 @@ class NodeImpl : public Node\n     bool getUnspentOutput(const COutPoint& output, Coin& coin) override\n     {\n         LOCK(::cs_main);\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_context->chainman->ActiveChainstate()));\n         return m_context->chainman->ActiveChainstate().CoinsTip().GetCoin(output, coin);\n     }\n     WalletClient& walletClient() override\n@@ -449,14 +443,12 @@ class ChainImpl : public Chain\n     bool checkFinalTx(const CTransaction& tx) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(m_node.chainman->ActiveChain()));\n         return CheckFinalTx(m_node.chainman->ActiveChain().Tip(), tx);\n     }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LOCK(cs_main);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* fork = m_node.chainman->m_blockman.FindForkInGlobalIndex(active, locator)) {\n             return fork->nHeight;\n         }\n@@ -466,7 +458,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return FillBlock(m_node.chainman->m_blockman.LookupBlockIndex(hash), block, lock, active);\n     }\n     bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n@@ -479,7 +470,6 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n                 return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -491,9 +481,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* ancestor = m_node.chainman->m_blockman.LookupBlockIndex(ancestor_hash);\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock, active);\n@@ -502,9 +490,7 @@ class ChainImpl : public Chain\n     {\n         WAIT_LOCK(cs_main, lock);\n         const CChain& active = Assert(m_node.chainman)->ActiveChain();\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block1 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash1);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         const CBlockIndex* block2 = m_node.chainman->m_blockman.LookupBlockIndex(block_hash2);\n         const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n         // Using & instead of && below to avoid short circuiting and leaving\n@@ -515,7 +501,6 @@ class ChainImpl : public Chain\n     double guessVerificationProgress(const uint256& block_hash) override\n     {\n         LOCK(cs_main);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         return GuessVerificationProgress(Params().TxData(), m_node.chainman->m_blockman.LookupBlockIndex(block_hash));\n     }\n     bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n@@ -528,7 +513,6 @@ class ChainImpl : public Chain\n         // used to limit the range, and passing min_height that's too low or\n         // max_height that's too high will not crash or change the result.\n         LOCK(::cs_main);\n-        assert(std::addressof(g_chainman) == std::addressof(*m_node.chainman));\n         if (CBlockIndex* block = m_node.chainman->m_blockman.LookupBlockIndex(block_hash)) {\n             if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n             for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n@@ -614,7 +598,6 @@ class ChainImpl : public Chain\n     }\n     bool isReadyToBroadcast() override { return !::fImporting && !::fReindex && !isInitialBlockDownload(); }\n     bool isInitialBlockDownload() override {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_node.chainman->ActiveChainstate()));\n         return m_node.chainman->ActiveChainstate().IsInitialBlockDownload();\n     }\n     bool shutdownRequested() override { return ShutdownRequested(); }"
      },
      {
        "sha": "2f0a1f45a9b2bdb86af85e05914adc0a34ebaa2a",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -39,7 +39,6 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n \n     { // cs_main scope\n     LOCK(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(node.chainman->ActiveChainstate()));\n     // If the transaction is already confirmed in the chain, don't do anything\n     // and return early.\n     CCoinsViewCache &view = node.chainman->ActiveChainstate().CoinsTip();"
      },
      {
        "sha": "cefc190abdc1c5afe55ab011fb3515e85b184912",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -79,7 +79,6 @@ ChainstateManager& EnsureChainman(const util::Ref& context)\n     if (!node.chainman) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Node chainman not found\");\n     }\n-    WITH_LOCK(::cs_main, assert(std::addressof(g_chainman) == std::addressof(*node.chainman)));\n     return *node.chainman;\n }\n "
      },
      {
        "sha": "9856fe9cd963a6b41b7da26024acc76ee516ad63",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -113,7 +113,6 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n \n     {\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         IncrementExtraNonce(&block, chainman.ActiveChain().Tip(), extra_nonce);\n     }\n \n@@ -146,7 +145,6 @@ static UniValue generateBlocks(ChainstateManager& chainman, const CTxMemPool& me\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n-        assert(std::addressof(::ChainActive()) == std::addressof(chainman.ActiveChain()));\n         nHeight = chainman.ActiveChain().Height();\n         nHeightEnd = nHeight+nGenerate;\n     }"
      },
      {
        "sha": "b4ab7ff773f24e6a79462edbbcc417aaa4156d07",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -507,7 +507,6 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, const CCoinsView\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n         if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags) || !CheckSequenceLocks(active_chainstate, *this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n@@ -627,7 +626,6 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins, const int64_t spendheight)\n     uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n-    assert(g_chainman.m_blockman.GetSpendHeight(mempoolDuplicate) == spendheight); // TODO: REVIEW-ONLY, REMOVE IN FUTURE COMMIT\n \n     std::list<const CTxMemPoolEntry*> waitingOnDependants;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      },
      {
        "sha": "5cb11b211c39d3d4ab683c2f48099309b5bb2e42",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b3925b8be927e852e6a4ce28e47a068e380fa28/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "patch": "@@ -170,7 +170,6 @@ namespace {\n CBlockIndex* BlockManager::LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.BlockIndex()) == std::addressof(m_block_index));\n     BlockMap::const_iterator it = m_block_index.find(hash);\n     return it == m_block_index.end() ? nullptr : it->second;\n }\n@@ -179,7 +178,6 @@ CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlo\n {\n     AssertLockHeld(cs_main);\n \n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     // Find the latest block common to locator and chain - we expect that\n     // locator.vHave is sorted descending by height.\n     for (const uint256& hash : locator.vHave) {\n@@ -205,7 +203,6 @@ static FlatFileSeq UndoFileSeq();\n bool CheckFinalTx(const CBlockIndex* active_chain_tip, const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(*::ChainActive().Tip()) == std::addressof(*active_chain_tip));\n \n     // By convention a negative value for flags indicates that the\n     // current network-enforced consensus rules should be used. In\n@@ -244,7 +241,6 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp)\n     if (lp->maxInputBlock) {\n         // Check whether ::ChainActive() is an extension of the block at which the LockPoints\n         // calculation was valid.  If not LockPoints are no longer valid\n-        assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n         if (!active_chain.Contains(lp->maxInputBlock)) {\n             return false;\n         }\n@@ -258,7 +254,6 @@ bool CheckSequenceLocks(CChainState& active_chainstate, const CTxMemPool& pool,\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(pool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n \n     CBlockIndex* tip = active_chainstate.m_chain.Tip();\n     assert(tip != nullptr);\n@@ -340,15 +335,13 @@ static void LimitMempoolSize(CTxMemPool& pool, CChainState& chainstate, size_t l\n \n     std::vector<COutPoint> vNoSpendsRemaining;\n     pool.TrimToSize(limit, &vNoSpendsRemaining);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     for (const COutPoint& removed : vNoSpendsRemaining)\n         chainstate.CoinsTip().Uncache(removed);\n }\n \n static bool IsCurrentForFeeEstimation(CChainState& chainstate) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     if (chainstate.IsInitialBlockDownload())\n         return false;\n     if (chainstate.m_chain.Tip()->GetBlockTime() < count_seconds(GetTime<std::chrono::seconds>() - MAX_FEE_ESTIMATION_TIP_AGE))\n@@ -375,7 +368,6 @@ static void UpdateMempoolForReorg(CChainState& active_chainstate, CTxMemPool& me\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     std::vector<uint256> vHashUpdate;\n     // disconnectpool's insertion_order index sorts the entries from\n     // oldest to newest, but the oldest entry will be the last tx from the\n@@ -444,7 +436,6 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, TxValidationS\n             assert(txFrom->vout.size() > txin.prevout.n);\n             assert(txFrom->vout[txin.prevout.n] == coin.out);\n         } else {\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n             const Coin& coinFromUTXOSet = chainstate.CoinsTip().AccessCoin(txin.prevout);\n             assert(!coinFromUTXOSet.IsSpent());\n             assert(coinFromUTXOSet.out == coin.out);\n@@ -465,7 +456,6 @@ class MemPoolAccept\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n         m_limit_descendant_size(gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT)*1000) {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n     }\n \n     // We put the arguments we're handed into a struct, so we can pass them\n@@ -1080,7 +1070,6 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, coins_to_uncache, test_accept, fee_out };\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     bool res = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1102,7 +1091,6 @@ bool AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPool& pool, TxVali\n                         bool bypass_limits, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     return AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, state, tx, GetTime(), plTxnReplaced, bypass_limits, test_accept, fee_out);\n }\n \n@@ -1352,7 +1340,6 @@ static void AlertNotify(const std::string& strMessage)\n void CChainState::CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n \n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before finishing our initial sync)\n@@ -1371,7 +1358,6 @@ void CChainState::CheckForkWarningConditions()\n // Called both upon regular invalid block discovery *and* InvalidateBlock\n void CChainState::InvalidChainFound(CBlockIndex* pindexNew)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n     if (pindexBestHeader != nullptr && pindexBestHeader->GetAncestor(pindexNew->nHeight) == pindexNew) {\n@@ -1431,7 +1417,6 @@ bool CScriptCheck::operator()() {\n int BlockManager::GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n     CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n@@ -2424,7 +2409,6 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n     }\n \n     bilingual_str warning_messages;\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (!active_chainstate.IsInitialBlockDownload())\n     {\n         const CBlockIndex* pindex = pindexNew;\n@@ -2441,7 +2425,6 @@ static void UpdateTip(CTxMemPool& mempool, const CBlockIndex* pindexNew, const C\n             }\n         }\n     }\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     LogPrintf(\"%s: new best=%s height=%d version=0x%08x log2_work=%f tx=%lu date='%s' progress=%f cache=%.1fMiB(%utxo)%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight, pindexNew->nVersion,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), (unsigned long)pindexNew->nChainTx,\n@@ -2701,7 +2684,6 @@ bool CChainState::ActivateBestChainStep(BlockValidationState& state, const CChai\n {\n     AssertLockHeld(cs_main);\n     AssertLockHeld(m_mempool.cs);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n \n     const CBlockIndex* pindexOldTip = m_chain.Tip();\n     const CBlockIndex* pindexFork = m_chain.FindFork(pindexMostWork);\n@@ -2803,7 +2785,6 @@ static bool NotifyHeaderTip(CChainState& chainstate) LOCKS_EXCLUDED(cs_main) {\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n-            assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n             fInitialBlockDownload = chainstate.IsInitialBlockDownload();\n             pindexHeaderOld = pindexHeader;\n         }\n@@ -3010,7 +2991,6 @@ bool CChainState::InvalidateBlock(BlockValidationState& state, const CChainParam\n         // transactions back to the mempool if disconnecting was successful,\n         // and we're not doing a very deep invalidation (in which case\n         // keeping the mempool up to date is probably futile anyway).\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n         UpdateMempoolForReorg(*this, m_mempool, disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == m_chain.Tip());\n@@ -3219,7 +3199,6 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n             // when the undo file is keeping up with the block file, we want to flush it explicitly\n             // when it is lagging behind (more blocks arrive than are being connected), we let the\n             // undo block write case handle it\n-            assert(std::addressof(::ChainActive()) == std::addressof(active_chain));\n             finalize_undo = (vinfoBlockFile[nFile].nHeightLast == (unsigned int)active_chain.Tip()->nHeight);\n             nFile++;\n             if (vinfoBlockFile.size() <= nFile) {\n@@ -3418,7 +3397,6 @@ CBlockIndex* BlockManager::GetLastCheckpoint(const CCheckpointData& data)\n     for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n     {\n         const uint256& hash = i.second;\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(*this));\n         CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             return pindex;\n@@ -3451,7 +3429,6 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // BlockIndex().\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n         CBlockIndex* pcheckpoint = blockman.GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight) {\n             LogPrintf(\"ERROR: %s: forked chain older than last checkpoint (height %d)\\n\", __func__, nHeight);\n@@ -3655,7 +3632,6 @@ bool BlockManager::AcceptBlockHeader(const CBlockHeader& block, BlockValidationS\n // Exposed wrapper for AcceptBlockHeader\n bool ChainstateManager::ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, BlockValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n     AssertLockNotHeld(cs_main);\n     {\n         LOCK(cs_main);\n@@ -3765,7 +3741,6 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n \n     // Write block to history file\n     if (fNewBlock) *fNewBlock = true;\n-    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n         FlatFilePos blockPos = SaveBlockToDisk(block, pindex->nHeight, m_chain, chainparams, dbp);\n         if (blockPos.IsNull()) {\n@@ -3787,7 +3762,6 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(ActiveChainstate()));\n \n     {\n         CBlockIndex *pindex = nullptr;\n@@ -3829,7 +3803,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(chainstate));\n     assert(pindexPrev && pindexPrev == chainstate.m_chain.Tip());\n     CCoinsViewCache viewNew(&chainstate.CoinsTip());\n     uint256 block_hash(block.GetHash());\n@@ -3839,7 +3812,6 @@ bool TestBlockValidity(BlockValidationState& state,\n     indexDummy.phashBlock = &block_hash;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    assert(std::addressof(g_chainman.m_blockman) == std::addressof(chainstate.m_blockman));\n     if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, state.ToString());\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n@@ -3942,7 +3914,6 @@ void PruneBlockFilesManual(CChainState& active_chainstate, int nManualPruneHeigh\n {\n     BlockValidationState state;\n     const CChainParams& chainparams = Params();\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (!active_chainstate.FlushStateToDisk(\n             chainparams, state, FlushStateMode::NONE, nManualPruneHeight)) {\n         LogPrintf(\"%s: failed to flush state (%s)\\n\", __func__, state.ToString());\n@@ -4120,7 +4091,6 @@ void BlockManager::Unload() {\n \n bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n     if (!m_blockman.LoadBlockIndex(\n             chainparams.GetConsensus(), *pblocktree,\n             setBlockIndexCandidates)) {\n@@ -4177,7 +4147,6 @@ bool CChainState::LoadBlockIndexDB(const CChainParams& chainparams) EXCLUSIVE_LO\n void CChainState::LoadMempool(const ArgsManager& args)\n {\n     if (args.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n-        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n         ::LoadMempool(m_mempool, *this);\n     }\n     m_mempool.SetIsLoaded(!ShutdownRequested());\n@@ -4224,7 +4193,6 @@ CVerifyDB::~CVerifyDB()\n bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CChainState& active_chainstate, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n     LOCK(cs_main);\n-    assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     if (active_chainstate.m_chain.Tip() == nullptr || active_chainstate.m_chain.Tip()->pprev == nullptr)\n         return true;\n \n@@ -4607,7 +4575,6 @@ bool CChainState::LoadGenesisBlock(const CChainParams& chainparams)\n     if (m_blockman.m_block_index.count(chainparams.GenesisBlock().GetHash()))\n         return true;\n \n-    assert(std::addressof(::ChainActive()) == std::addressof(m_chain));\n     try {\n         const CBlock& block = chainparams.GenesisBlock();\n         FlatFilePos blockPos = SaveBlockToDisk(block, 0, m_chain, chainparams, nullptr);\n@@ -4671,7 +4638,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 {\n                     LOCK(cs_main);\n                     // detect out of order blocks, and store them for later\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     if (hash != chainparams.GetConsensus().hashGenesisBlock && !m_blockman.LookupBlockIndex(block.hashPrevBlock)) {\n                         LogPrint(BCLog::REINDEX, \"%s: Out of order block %s, parent %s not known\\n\", __func__, hash.ToString(),\n                                 block.hashPrevBlock.ToString());\n@@ -4681,11 +4647,9 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                     }\n \n                     // process in case the block isn't known yet\n-                    assert(std::addressof(g_chainman.m_blockman) == std::addressof(m_blockman));\n                     CBlockIndex* pindex = m_blockman.LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       BlockValidationState state;\n-                      assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                       if (AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n@@ -4700,13 +4664,11 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                 // Activate the genesis block so normal node progress can continue\n                 if (hash == chainparams.GetConsensus().hashGenesisBlock) {\n                     BlockValidationState state;\n-                    assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                     if (!ActivateBestChain(state, chainparams, nullptr)) {\n                         break;\n                     }\n                 }\n \n-                assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                 NotifyHeaderTip(*this);\n \n                 // Recursively process earlier encountered successors of this block\n@@ -4725,7 +4687,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                                     head.ToString());\n                             LOCK(cs_main);\n                             BlockValidationState dummy;\n-                            assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                             if (AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n@@ -4734,7 +4695,6 @@ void CChainState::LoadExternalBlockFile(const CChainParams& chainparams, FILE* f\n                         }\n                         range.first++;\n                         mapBlocksUnknownParent.erase(it);\n-                        assert(std::addressof(::ChainstateActive()) == std::addressof(*this));\n                         NotifyHeaderTip(*this);\n                     }\n                 }\n@@ -5028,7 +4988,6 @@ bool LoadMempool(CTxMemPool& pool, CChainState& active_chainstate)\n             TxValidationState state;\n             if (nTime > nNow - nExpiryTimeout) {\n                 LOCK(cs_main);\n-                assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n                 AcceptToMemoryPoolWithTime(chainparams, pool, active_chainstate, state, tx, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */,\n                                            false /* test_accept */);"
      }
    ]
  },
  {
    "sha": "62893af086bb7454d822f2be4c2b51fe3292ec70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Mjg5M2FmMDg2YmI3NDU0ZDgyMmYyYmU0YzJiNTFmZTMyOTJlYzcw",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:35:53Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "qt/test: Reset chainman in ~ChainstateManager instead\n\nThere are some mutable, global state variables that are currently reset\nby UnloadBlockIndex such as pindexBestHeader which should be cleaned up\nwhenever the ChainstateManager is unloaded/reset/destructed/etc.\n\nNot cleaning them up leads to bugs like a use-after-free that happens\nlike so:\n\n1. At the end of a test, ChainstateManager is destructed, which also\n   destructs BlockManager, which calls BlockManager::Unload to free all\n   CBlockIndexes in its BlockMap\n2. Since pindexBestHeader is not cleaned up, it now points to an invalid\n   location\n3. Another test starts to init, and calls LoadGenesisBlock, which calls\n   AddToBlockIndex, which compares the genesis block with an invalid\n   location\n4. Cute puppies perish by the hundreds\n\nPreviously, for normal codepaths (e.g. bitcoind), we relied on the fact\nthat our program will be unloaded by the operating system which\neffectively resets these variables. The one exception is in QT tests,\nwhere these variables had to be manually reset.\n\nSince now ChainstateManager is no longer a global, we can just put this\nlogic in its destructor to make sure that callers are always correct.\n\nOver time, we should probably move these mutable global state variables\ninto ChainstateManager or CChainState so it's easier to reason about\ntheir lifecycles.",
      "tree": {
        "sha": "c2a2c473eaae92ce76674b1a11c999accd943a11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2a2c473eaae92ce76674b1a11c999accd943a11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62893af086bb7454d822f2be4c2b51fe3292ec70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62893af086bb7454d822f2be4c2b51fe3292ec70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62893af086bb7454d822f2be4c2b51fe3292ec70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62893af086bb7454d822f2be4c2b51fe3292ec70/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b3925b8be927e852e6a4ce28e47a068e380fa28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b3925b8be927e852e6a4ce28e47a068e380fa28"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4a0edb3cdaa580922e4d2d289815a7edc90fa016",
        "filename": "src/qt/test/apptests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62893af086bb7454d822f2be4c2b51fe3292ec70/src/qt/test/apptests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62893af086bb7454d822f2be4c2b51fe3292ec70/src/qt/test/apptests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.cpp?ref=62893af086bb7454d822f2be4c2b51fe3292ec70",
        "patch": "@@ -84,11 +84,6 @@ void AppTests::appTests()\n     // Reset global state to avoid interfering with later tests.\n     LogInstance().DisconnectTestLogger();\n     AbortShutdown();\n-    {\n-        LOCK(cs_main);\n-        UnloadBlockIndex(/* mempool */ nullptr, g_chainman);\n-        g_chainman.Reset();\n-    }\n }\n \n //! Entry point for BitcoinGUI tests."
      },
      {
        "sha": "5ddba18cace7b17a405477c220f50344480df47d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62893af086bb7454d822f2be4c2b51fe3292ec70/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62893af086bb7454d822f2be4c2b51fe3292ec70/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=62893af086bb7454d822f2be4c2b51fe3292ec70",
        "patch": "@@ -932,6 +932,12 @@ class ChainstateManager\n     //! Check to see if caches are out of balance and if so, call\n     //! ResizeCoinsCaches() as needed.\n     void MaybeRebalanceCaches() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    ~ChainstateManager() {\n+        LOCK(::cs_main);\n+        UnloadBlockIndex(/* mempool */ nullptr, *this);\n+        Reset();\n+    }\n };\n \n /** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */"
      }
    ]
  },
  {
    "sha": "6bda9eb9e26012fd75db079555d2f75e742c8c18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmRhOWViOWUyNjAxMmZkNzVkYjA3OTU1NWQyZjc1ZTc0MmM4YzE4",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-10-06T21:35:11Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2021-02-02T02:55:00Z"
      },
      "message": "validation: Farewell, global Chainstate!",
      "tree": {
        "sha": "4a9ea97046b6e48d23354f74f88dceefa74613da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a9ea97046b6e48d23354f74f88dceefa74613da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bda9eb9e26012fd75db079555d2f75e742c8c18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bda9eb9e26012fd75db079555d2f75e742c8c18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bda9eb9e26012fd75db079555d2f75e742c8c18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bda9eb9e26012fd75db079555d2f75e742c8c18/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62893af086bb7454d822f2be4c2b51fe3292ec70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62893af086bb7454d822f2be4c2b51fe3292ec70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62893af086bb7454d822f2be4c2b51fe3292ec70"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 7,
      "deletions": 34
    },
    "files": [
      {
        "sha": "9b82526f421982c8434e053a1e5dd8a91b9bb586",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -292,7 +292,7 @@ void Shutdown(NodeContext& node)\n     ECC_Stop();\n     node.mempool.reset();\n     node.fee_estimator.reset();\n-    node.chainman = nullptr;\n+    node.chainman.reset();\n     node.scheduler.reset();\n \n     try {\n@@ -1402,8 +1402,8 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), check_ratio);\n \n     assert(!node.chainman);\n-    node.chainman = &g_chainman;\n-    ChainstateManager& chainman = *Assert(node.chainman);\n+    node.chainman = MakeUnique<ChainstateManager>();\n+    ChainstateManager& chainman = *node.chainman;\n \n     assert(!node.peerman);\n     node.peerman = PeerManager::make(chainparams, *node.connman, node.banman.get(),"
      },
      {
        "sha": "fa064a205733c0a1f177371279ef46c6ea82ff08",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -11,6 +11,7 @@\n #include <policy/fees.h>\n #include <scheduler.h>\n #include <txmempool.h>\n+#include <validation.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "bf64a00760f380454dbcc9470ca3b14c51dc53b0",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -39,7 +39,7 @@ struct NodeContext {\n     std::unique_ptr<CTxMemPool> mempool;\n     std::unique_ptr<CBlockPolicyEstimator> fee_estimator;\n     std::unique_ptr<PeerManager> peerman;\n-    ChainstateManager* chainman{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n+    std::unique_ptr<ChainstateManager> chainman;\n     std::unique_ptr<BanMan> banman;\n     ArgsManager* args{nullptr}; // Currently a raw pointer because the memory is not managed by this struct\n     std::unique_ptr<interfaces::Chain> chain;"
      },
      {
        "sha": "a045d0e9f7f57d19eaa65b54f21bb84a17d6456b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -139,7 +139,7 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     m_node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n     m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n-    m_node.chainman = &::g_chainman;\n+    m_node.chainman = MakeUnique<ChainstateManager>();\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n@@ -160,7 +160,7 @@ ChainTestingSetup::~ChainTestingSetup()\n     m_node.mempool.reset();\n     m_node.scheduler.reset();\n     m_node.chainman->Reset();\n-    m_node.chainman = nullptr;\n+    m_node.chainman.reset();\n     pblocktree.reset();\n }\n "
      },
      {
        "sha": "799812da1843d632fcc81081c3deeb9a823968b8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -100,21 +100,6 @@ bool CBlockIndexWorkComparator::operator()(const CBlockIndex *pa, const CBlockIn\n     return false;\n }\n \n-ChainstateManager g_chainman;\n-\n-CChainState& ChainstateActive()\n-{\n-    LOCK(::cs_main);\n-    assert(g_chainman.m_active_chainstate);\n-    return *g_chainman.m_active_chainstate;\n-}\n-\n-CChain& ChainActive()\n-{\n-    LOCK(::cs_main);\n-    return ::ChainstateActive().m_chain;\n-}\n-\n /**\n  * Mutex to guard access to validation specific variables, such as reading\n  * or changing the chainstate."
      },
      {
        "sha": "52caddba05e890d903cef3b7cc051d4c4e3c2ea7",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bda9eb9e26012fd75db079555d2f75e742c8c18/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6bda9eb9e26012fd75db079555d2f75e742c8c18",
        "patch": "@@ -824,10 +824,6 @@ class ChainstateManager\n     //! by the background validation chainstate.\n     bool m_snapshot_validated{false};\n \n-    // For access to m_active_chainstate.\n-    friend CChainState& ChainstateActive();\n-    friend CChain& ChainActive();\n-\n public:\n     //! A single BlockManager instance is shared across each constructed\n     //! chainstate to avoid duplicating block metadata.\n@@ -940,15 +936,6 @@ class ChainstateManager\n     }\n };\n \n-/** DEPRECATED! Please use node.chainman instead. May only be used in validation.cpp internally */\n-extern ChainstateManager g_chainman GUARDED_BY(::cs_main);\n-\n-/** Please prefer the identical ChainstateManager::ActiveChainstate */\n-CChainState& ChainstateActive();\n-\n-/** Please prefer the identical ChainstateManager::ActiveChain */\n-CChain& ChainActive();\n-\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n "
      }
    ]
  }
]