[
  {
    "sha": "2672e726dab23a5a19d2685f113c7096592156e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjcyZTcyNmRhYjIzYTVhMTlkMjY4NWYxMTNjNzA5NjU5MjE1NmU3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-12-24T13:00:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-06-25T08:27:32Z"
      },
      "message": "[net] Don't use third-party \"what is my IP\" services.\n\nThis patch eliminates the privacy and reliability problematic use\nof centralized web services for discovering the node's addresses\nfor advertisement.\n\nThe Bitcoin protocol already allows your peers to tell you what\nIP they think you have, but this data isn't trustworthy since\nthey could lie. So the challenge is using it without creating a\nDOS vector.\n\nTo accomplish this we adopt an approach similar to the one used\nby P2Pool:  If we're announcing and don't have a better address\ndiscovered (e.g. via UPNP) or configured we just announce to\neach peer the address that peer told us.  Since peers could\nalready replace, forge, or drop our address messages this cannot\ncreate a new vulnerability... but if even one of our peers is\ngiving us a good address we'll eventually make a useful\nadvertisement.\n\nRebased-From: a851bf84f6a2ff95bd86b23e55bb0647f5f47188\nRebased-By: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "4798123ca267d5a036c948e0f9cd10b9e355952b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4798123ca267d5a036c948e0f9cd10b9e355952b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2672e726dab23a5a19d2685f113c7096592156e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2672e726dab23a5a19d2685f113c7096592156e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2672e726dab23a5a19d2685f113c7096592156e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2672e726dab23a5a19d2685f113c7096592156e7/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "208bf5b9e0a86900bddf5722dc192c3262480e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/208bf5b9e0a86900bddf5722dc192c3262480e36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/208bf5b9e0a86900bddf5722dc192c3262480e36"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 47,
      "deletions": 148
    },
    "files": [
      {
        "sha": "6d3fbd35d7b2533a163eb0ff7fabad25a5d2d5ff",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2672e726dab23a5a19d2685f113c7096592156e7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2672e726dab23a5a19d2685f113c7096592156e7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2672e726dab23a5a19d2685f113c7096592156e7",
        "patch": "@@ -436,6 +436,7 @@ bool InitSanityCheck(void)\n  */\n bool AppInit2(boost::thread_group& threadGroup)\n {\n+    nNodeStartTime = GetTime();\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n     // Turn off Microsoft heap dump noise\n@@ -665,7 +666,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n #endif\n     if (!fLogTimestamps)\n-        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n+        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nNodeStartTime));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());"
      },
      {
        "sha": "82ec6eb2e7ba093e3752c6ae234f351ee746796e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2672e726dab23a5a19d2685f113c7096592156e7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2672e726dab23a5a19d2685f113c7096592156e7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2672e726dab23a5a19d2685f113c7096592156e7",
        "patch": "@@ -3418,6 +3418,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         else\n             pfrom->fRelayTxes = true;\n \n+        pfrom->addrMe = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             pfrom->addrLocal = addrMe;\n@@ -3447,11 +3448,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             // Advertise our address\n             if (fListen && !IsInitialBlockDownload())\n-            {\n-                CAddress addr = GetLocalAddress(&pfrom->addr);\n-                if (addr.IsRoutable())\n-                    pfrom->PushAddress(addr);\n-            }\n+                AdvertizeLocalNode(pfrom, true);\n \n             // Get recent addresses\n             if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n@@ -4216,11 +4213,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n \n                     // Rebroadcast our address\n                     if (fListen)\n-                    {\n-                        CAddress addr = GetLocalAddress(&pnode->addr);\n-                        if (addr.IsRoutable())\n-                            pnode->PushAddress(addr);\n-                    }\n+                        AdvertizeLocalNode(pnode,true);\n                 }\n             }\n             nLastRebroadcast = GetTime();"
      },
      {
        "sha": "5781dad09fc41598bc0c25da3dfd3c55f4fbc1ae",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 135,
        "changes": 173,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2672e726dab23a5a19d2685f113c7096592156e7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2672e726dab23a5a19d2685f113c7096592156e7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=2672e726dab23a5a19d2685f113c7096592156e7",
        "patch": "@@ -12,6 +12,7 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"core.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n \n #ifdef WIN32\n@@ -57,6 +58,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+int64_t nNodeStartTime;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -183,22 +185,49 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n     }\n }\n \n+bool static HasSeenLocal(const CService& addr)\n+{\n+    LOCK(cs_mapLocalHost);\n+    if (mapLocalHost.count(addr) == 0)\n+      return false;\n+    return mapLocalHost[addr].nScore > 1;\n+}\n+\n+void AdvertizeLocalNode(CNode* pnode, bool fForce)\n+{\n+    // If our routably addressed peer claims a routable address for\n+    // us on a network we support and we are open to discovery and\n+    // are listening on the default port, and we either don't know\n+    // our address or seems to not be working we'll tell just that\n+    // peer the address it sees for us.\n+    CAddress addrLocal = GetLocalAddress(&pnode->addr);\n+    if (fDiscover && pnode->addr.IsRoutable() && pnode->addrMe.IsRoutable() && pnode->addrMe != addrLocal &&\n+        GetListenPort() == Params().GetDefaultPort() && !IsLimited(pnode->addrMe.GetNetwork()) &&\n+        (!addrLocal.IsRoutable() || ((GetTime() - nNodeStartTime > 60 * 60) && GetRand(4) == 0 && !HasSeenLocal(addrLocal))))\n+    {\n+        addrLocal = CAddress(pnode->addrMe);\n+        addrLocal.SetPort(GetListenPort());\n+    }\n+    if (addrLocal.IsRoutable() && (fForce || (CService)addrLocal != (CService)pnode->addrLocal))\n+    {\n+        pnode->PushAddress(addrLocal);\n+        pnode->addrLocal = addrLocal;\n+    }\n+}\n+\n // used when scores of local addresses may have changed\n // pushes better local address to peers\n void static AdvertizeLocal()\n {\n+    if (fNoListen)\n+        return;\n+    if (IsInitialBlockDownload())\n+        return;\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {\n         if (pnode->fSuccessfullyConnected)\n-        {\n-            CAddress addrLocal = GetLocalAddress(&pnode->addr);\n-            if (addrLocal.IsRoutable() && (CService)addrLocal != (CService)pnode->addrLocal)\n-            {\n-                pnode->PushAddress(addrLocal);\n-                pnode->addrLocal = addrLocal;\n-            }\n-        }\n+            AdvertizeLocalNode(pnode);\n     }\n }\n \n@@ -295,133 +324,11 @@ bool IsReachable(const CNetAddr& addr)\n     return vfReachable[net] && !vfLimited[net];\n }\n \n-bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n-{\n-    SOCKET hSocket;\n-    if (!ConnectSocket(addrConnect, hSocket))\n-        return error(\"GetMyExternalIP() : connection to %s failed\", addrConnect.ToString());\n-\n-    send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);\n-\n-    string strLine;\n-    while (RecvLine(hSocket, strLine))\n-    {\n-        if (strLine.empty()) // HTTP response is separated from headers by blank line\n-        {\n-            while (true)\n-            {\n-                if (!RecvLine(hSocket, strLine))\n-                {\n-                    closesocket(hSocket);\n-                    return false;\n-                }\n-                if (pszKeyword == NULL)\n-                    break;\n-                if (strLine.find(pszKeyword) != string::npos)\n-                {\n-                    strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));\n-                    break;\n-                }\n-            }\n-            closesocket(hSocket);\n-            if (strLine.find(\"<\") != string::npos)\n-                strLine = strLine.substr(0, strLine.find(\"<\"));\n-            strLine = strLine.substr(strspn(strLine.c_str(), \" \\t\\n\\r\"));\n-            while (strLine.size() > 0 && isspace(strLine[strLine.size()-1]))\n-                strLine.resize(strLine.size()-1);\n-            CService addr(strLine,0,true);\n-            LogPrintf(\"GetMyExternalIP() received [%s] %s\\n\", strLine, addr.ToString());\n-            if (!addr.IsValid() || !addr.IsRoutable())\n-                return false;\n-            ipRet.SetIP(addr);\n-            return true;\n-        }\n-    }\n-    closesocket(hSocket);\n-    return error(\"GetMyExternalIP() : connection closed\");\n-}\n-\n-bool GetMyExternalIP(CNetAddr& ipRet)\n-{\n-    CService addrConnect;\n-    const char* pszGet;\n-    const char* pszKeyword;\n-\n-    for (int nLookup = 0; nLookup <= 1; nLookup++)\n-    for (int nHost = 1; nHost <= 2; nHost++)\n-    {\n-        // We should be phasing out our use of sites like these. If we need\n-        // replacements, we should ask for volunteers to put this simple\n-        // php file on their web server that prints the client IP:\n-        //  <?php echo $_SERVER[\"REMOTE_ADDR\"]; ?>\n-        if (nHost == 1)\n-        {\n-            addrConnect = CService(\"91.198.22.70\", 80); // checkip.dyndns.org\n-\n-            if (nLookup == 1)\n-            {\n-                CService addrIP(\"checkip.dyndns.org\", 80, true);\n-                if (addrIP.IsValid())\n-                    addrConnect = addrIP;\n-            }\n-\n-            pszGet = \"GET / HTTP/1.1\\r\\n\"\n-                     \"Host: checkip.dyndns.org\\r\\n\"\n-                     \"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\\r\\n\"\n-                     \"Connection: close\\r\\n\"\n-                     \"\\r\\n\";\n-\n-            pszKeyword = \"Address:\";\n-        }\n-        else if (nHost == 2)\n-        {\n-            addrConnect = CService(\"74.208.43.192\", 80); // www.showmyip.com\n-\n-            if (nLookup == 1)\n-            {\n-                CService addrIP(\"www.showmyip.com\", 80, true);\n-                if (addrIP.IsValid())\n-                    addrConnect = addrIP;\n-            }\n-\n-            pszGet = \"GET /simple/ HTTP/1.1\\r\\n\"\n-                     \"Host: www.showmyip.com\\r\\n\"\n-                     \"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\\r\\n\"\n-                     \"Connection: close\\r\\n\"\n-                     \"\\r\\n\";\n-\n-            pszKeyword = NULL; // Returns just IP address\n-        }\n-\n-        if (GetMyExternalIP2(addrConnect, pszGet, pszKeyword, ipRet))\n-            return true;\n-    }\n-\n-    return false;\n-}\n-\n-void ThreadGetMyExternalIP()\n-{\n-    CNetAddr addrLocalHost;\n-    if (GetMyExternalIP(addrLocalHost))\n-    {\n-        LogPrintf(\"GetMyExternalIP() returned %s\\n\", addrLocalHost.ToStringIP());\n-        AddLocal(addrLocalHost, LOCAL_HTTP);\n-    }\n-}\n-\n-\n-\n-\n-\n void AddressCurrentlyConnected(const CService& addr)\n {\n     addrman.Connected(addr);\n }\n \n-\n-\n-\n uint64_t CNode::nTotalBytesRecv = 0;\n uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n@@ -1705,10 +1612,6 @@ void static Discover(boost::thread_group& threadGroup)\n         freeifaddrs(myaddrs);\n     }\n #endif\n-\n-    // Don't use external IPv4 discovery, when -onlynet=\"IPv6\"\n-    if (!IsLimited(NET_IPV4))\n-        threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"ext-ip\", &ThreadGetMyExternalIP));\n }\n \n void StartNode(boost::thread_group& threadGroup)\n@@ -1734,7 +1637,7 @@ void StartNode(boost::thread_group& threadGroup)\n         threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"dnsseed\", &ThreadDNSAddressSeed));\n \n     // Map ports with UPnP\n-    MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+    if (!fNoListen && !IsLimited(NET_IPV4)) MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n     // Send and receive from sockets, accept connections\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));"
      },
      {
        "sha": "cbece46e58c74178b578cf18e5fb81233d115c2a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2672e726dab23a5a19d2685f113c7096592156e7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2672e726dab23a5a19d2685f113c7096592156e7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2672e726dab23a5a19d2685f113c7096592156e7",
        "patch": "@@ -52,12 +52,14 @@ static const bool DEFAULT_UPNP = USE_UPNP;\n static const bool DEFAULT_UPNP = false;\n #endif\n \n+extern int64_t nNodeStartTime;\n+\n inline unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n-bool GetMyExternalIP(CNetAddr& ipRet);\n+void AdvertizeLocalNode(CNode* pnode, bool fForce=false);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n@@ -92,7 +94,6 @@ enum\n     LOCAL_IF,     // address a local interface listens on\n     LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n-    LOCAL_HTTP,   // address reported by whatismyip.com and similar\n     LOCAL_MANUAL, // address explicitly specified (-externalip=)\n \n     LOCAL_MAX\n@@ -227,6 +228,7 @@ class CNode\n     int64_t nTimeConnected;\n     CAddress addr;\n     std::string addrName;\n+    CService addrMe;\n     CService addrLocal;\n     int nVersion;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended"
      }
    ]
  }
]