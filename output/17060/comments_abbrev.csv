DrahtBot,2019-10-05 11:54:46,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#18113](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/18113.html) ([coins] Don't allow a coin to spent and FRE",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-538643385,538643385,
Sjors,2019-10-06 13:51:19,"Would be nice to test this on a Raspberry-like device. They tend to have low memory and slow storage. Unfortunately they generally also require pruning, and the way pruning currently works we flush the coin cache.\n\nFor example I have an Orange Pi chipping away at IBD this week; although it has 2 GB of RAM, because I'm pruning it to 5 GB, it never uses more than 230 MB.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-538749228,538749228,
MarcoFalke,2019-10-07 17:05:11,"> For example I have an Orange Pi chipping away at IBD this week; although it has 2 GB of RAM, because I'm pruning it to 5 GB, it never uses more than 230 MB.\n\nA 512 GB micro SD card should do the job, no?",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-539110266,539110266,
fanquake,2019-10-08 15:38:56,@TheBlueMatt You might be interested here given you commented in #16970.,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-539573426,539573426,
laanwj,2019-10-09 10:03:53,"> A 512 GB micro SD card should do the job, no?\n\nYep, works fine.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-539932847,539932847,
fanquake,2019-10-09 14:03:09,Please lets keep the discussion high level before pointing out any typos.,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-540015565,540015565,
laanwj,2019-10-12 07:41:57,"@promag that's what the bitfield syntax `unsigned int dirty : 1;` does, it makes the flags take up the minimum possible space.\nOr maybe I'm misunderstanding what you're trying to accomplish.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541297211,541297211,
GChuf,2019-10-12 13:26:30,"Would like to test this on my VM using a HDD.\nI'm not sure how to benchmark this - I've tried https://github.com/chaincodelabs/bitcoinperf but haven't succeeded. Any info/help would be appreciated.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541324891,541324891,
MarcoFalke,2019-10-12 13:30:02,bitcoinperf is a bit messy to set up. I think it requires docker. Is there any specific issue you ran into? I guess it might be better to report such upstream at https://github.com/chaincodelabs/bitcoinperf to not bloat this thread,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541325156,541325156,
martinus,2019-10-12 13:46:01,"> Would like to test this on my VM using a HDD.\n> I'm not sure how to benchmark this - I've tried https://github.com/chaincodelabs/bitcoinperf but haven't succeeded. Any info/help would be appreciated.\n\nIn my benchmarks I deleted `debug.log`, ran `/usr/bin/time -v ./bitcoind -reindex-chainstate -stopatheight=594000 -printtoconsole=0 -dbcache=500`, then used a hand written script to convert t",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541326478,541326478,
GChuf,2019-10-12 13:52:40,"There were a couple issues. Could you recommend anything else to test `-reindex-chainstate`? Should I simply run bitcoind and have linux count time ... ?\nOr maybe I'll look around things mentioned in this [stackexchange answer](https://unix.stackexchange.com/a/414770/334043).\n\np.s. thanks for the info @martinus. I'll figure something out with what you did and those tools mentioned in the lin",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541327005,541327005,
promag,2019-10-12 14:24:54,"@laanwj I mean stuff like this:\n```\n        auto oldDirty = coin.dirty;\n        auto oldFresh = coin.fresh;\n```\ncould be\n```\n        auto old_cache = coin.cache;\n```\nwhere\n```\n    unsigned int cache : 2;   // DIRTY = 1,  FRESH = 2\n```",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-541329578,541329578,
GChuf,2019-10-15 17:55:18,"The debug.log from first benchmark (master) got overwritten by the second benchmark, and I didn't make a script to do a graph from debug.log yet anyway, so I'm just gonna post the `/usr/bin/time -v`  results.\nThe improvement seems remarkable! I tested this on Ubuntu 16 VM running on a Seagate SSHD (also called bybrid) disk. It seems however the process used more CPU - not sure what's going on wi",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-542331666,542331666,
martinus,2019-10-15 19:05:03,"Thanks @GChuf for testing this! This are really nice results.\n\n> It seems however the process used more CPU\n\nI don't think so:\n* master had 19760.08 sec user + 1031.02 sec system = 20791.1 sec\n* 2019-09-more-compact-Coin had 19004.87 sec user + 598.24 sec system = 19603,11\n\nSo the branch used ~6% less CPU. Note that the percentage 233% is much higher than for master because it used",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-542359379,542359379,
GChuf,2019-10-16 17:40:30,"> The percentage is calculated 100*(user + system time) / elapsed. 233 percent means that on average 2.33 cores were running for this job.\n\nThanks for the explaination! The math works :)\nIf more testing is needed I'd be glad to help, but I think HDDs will show similar results to my SSHD and it's clear that the improvements are real.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-542812785,542812785,
jamesob,2019-10-17 05:48:57,"Concept ACK from me, seems like some great savings here. Though it'll be crucial to test this thoroughly across platforms. Will review in depth soon.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543014001,543014001,
GChuf,2019-10-17 17:11:30,"I can also test it on windows. Does anyone have the windows executable for this already, to make my life easier? @martinus maybe? ",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543273045,543273045,
sipa,2019-10-17 17:35:19,"These are pretty impressive gains, so concept ACK.\n\nSome overall comments:\n* Since this is making the boundary between `Coin` and `CCoinsCacheEntry` a bit less clear, maybe it would be useful to either have a `Coin::AssignWithoutFlags` function, or even make `Coin::operator=` not touch the flags. That would avoid all the `oldX = ...; ...; ... = oldX` code, and make review easier.\n* The cod",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543282296,543282296,
martinus,2019-10-17 17:43:12,"> I can also test it on windows. Does anyone have the windows executable for this already, to make my life easier? @martinus maybe?\n\nSorry, I build only in Linux, never tried to build in Windows\n\n>  Since this is making the boundary between `Coin` and `CCoinsCacheEntry` a bit less clear, maybe it would be useful to either have a `Coin::AssignWithoutFlags` function, or even make `Coin::oper",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543285380,543285380,
MarcoFalke,2019-10-17 18:21:24,@DrahtBot might have a windows build ready tomorrow,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543300465,543300465,
dongcarl,2019-10-17 19:20:36,I have Gitian-built windows binaries of 03cb535384eb6d2f4284524c33ab03371bd263e2 here for those who are keen (@GChuf): https://send.firefox.com/download/c78ac103a4dabe86/#S70uxKCUua-baEeR0v029g,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543323173,543323173,
GChuf,2019-10-17 20:15:42,"Thanks @MarcoFalke & @dongcarl, will test on Win10 tomorrow/this weekend.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543343451,543343451,
wtogami,2019-10-18 00:28:39,"> A 512 GB micro SD card should do the job, no?\n\nYou'll find sdcards larger than 32GB to be rather terrible for anything aside from sequential write (4K video cameras). The main issue is the ""erase block size"" which is the minimum size of any erase. Every time you write anything to disk it could rewrite that size. 32GB is the smallest sdcard I've seen with 4MB erase block size. I've seen 128GB",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543424057,543424057,
jamesob,2019-10-18 02:07:49,"Hm, getting the opposite of what I would expect in terms of benchmark results. For `/usr/bin/time -v ./src/bitcoind -reindex-chainstate -stopatheight=550000 -dbcache=4000 -connect=0` (run using a lightly modified version of [this script](https://github.com/chaincodelabs/bitcoinperf/blob/master/bin/run_remote_reindex.py)) across a number of different machines, I'm seeing this branch as reliably slo",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543451649,543451649,
martinus,2019-10-18 16:03:23,"> Can anyone think of an explanation for this?\n\nI really can't explain why the diffference is so huge. Maybe it has something to do with the Xeon CPU? Or there is still a bug in the code that manifests on that CPU. Do you have the `debug.log` files, or graphs of the progress? Maybe there it's visible at which point the difference occurs.\n\nI'm currently running a comparison on a very slow I",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-543811585,543811585,
DrahtBot,2019-10-19 04:45:55,<!--a722867cd34abeea1fadc8d60700f111-->\nGitian builds for commit ec3ed5a4487886f1c2a35fda0a3289be7b280248 (master):\n * `f64e5b9561bbfd24763ca216dfb72e6c...` [bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz](https://drahtbot.space/gitian/bitcoin/bitcoin/ec3ed5a4487886f1c2a35fda0a3289be7b280248/bitcoin-0.19.99-aarch64-linux-gnu-debug.tar.gz)\n * `3450cd39da524d4259d8971fa07f7cd3...` [bitcoin-0.19.9,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544095713,544095713,
GChuf,2019-10-19 15:55:09,"@jamesob please post the debug logs, some time ago I was looking at your results at https://github.com/bitcoin/bitcoin/pull/16801 which seemed weird as well, and debug logs could shed some much needed light into this.\nAs for Xeon CPUs, I've got a Xeon E3 1240 v2. The previous test on ubuntu VM was run with this CPU and I'm gonna run windows benchmarks on it as well and post the results here. Any",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544164077,544164077,
GChuf,2019-10-20 08:56:00,"Much more modest improvements when running this on a physical Windows machine (~2% improvement in time). Same hardware was used as in my previous benchmark.\nI might have seen better improvements if I used an old HDD, but I just wanted to make sure the improvements are there on windows as well.\n\nmaster: 02:59:21\n2019-09-more-compact-Coin: 02:56:05\n\n![figure_1](https://user-images.github",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544233613,544233613,
martinus,2019-10-20 12:31:15,"@GChuf , did you run the windows benchmark on the same hardware where you got the 31% improvement in Linux?\n\nMy benchmark with Intel Celeron N3050 has finished, where the branch is about of 1.4% faster. It seems that the CPU is definitely the limiting factor here - each run took over 6 days\n\n![out2](https://user-images.githubusercontent.com/14386/67159490-a3541380-f345-11e9-989f-8135ebc2bf",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544247983,544247983,
GChuf,2019-10-20 13:38:49,"@martinus yes, forgot to mention. Hardware was the same. The difference was that on the first run I was running the benchmark on a VM, which certainly performs worse. I think the difference between physical vs VM is more pronounced with CPUs rather than disks.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544253328,544253328,
JeremyRubin,2019-10-20 19:03:28,"Some notes on other paths to shave off bytes here:\n\nAs an alternative, you could do something like the union below to compact the CAmount for the (evidence: https://eprint.iacr.org/2017/1095.pdf, also by pigeon hole we have 21M coins and 100+M UTXOs so most have to be small) common case of a UTXO smaller than 2**31/100e6 (about 21.47 BTC). This technique saves another 4 bytes. The nice thing a",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544281616,544281616,
jamesob,2019-10-21 06:25:42,"Just finished another benchmark run on a significantly beefier machine with similar (odd) results. Only the debug.log for this branch was preserved since I started the run a few days ago, but (i) I'm working on some better tooling to parse debug.log files (optionally contingent on #16805) and generate tables, graphs, etc., and (ii) in future runs I'll make sure I preserve the debug.log files for e",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544367528,544367528,
martinus,2019-10-21 06:55:55,"Thanks for posting the debug.log! That's already helpful. I was hoping to find some issue where e.g. db sync takes a long time, but this is not the case. Flushing the db cache takes a few minutes, but nothing extraordinary:\n\n```\n2019-10-18T08:30:54Z UpdateTip: new best=000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f height=0 version=0x00000001 log2_work=32.000022 tx=1 date='",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544375855,544375855,
GChuf,2019-10-21 14:53:51,"@martinus @jamesob looking at the first test results from James, it occured to me that the ""problem"" must be in the CPU (or at least not in the disks) - benching master on ssd vs hdd turned out to be ~2x faster (as expected), whereas benching this branch took 9h on ssd and 10h on hdd.\n\nJames, you mentioned this in https://github.com/bitcoin/bitcoin/pull/16801:\n>Before anyone asks: these are ",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-544552437,544552437,
jamesob,2019-10-29 20:21:19,"Okay, I've finally gotten around to taking perf to the weird `bench-strong` results. I took measurements at `progress=0.20` (roughly height 387,000) by doing \n```sh\n$ # configure with -fno-omit-frame-pointer, tune system params to enable perf, make, etc.\n$ ./src/bitcoind -reindex-chainstate -stopatheight=550000 -dbcache=7000 -printtoconsole=0 -connect=0 &\n$ while ! tail -n 10000 ~/.bitcoin",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547611741,547611741,
elichai,2019-10-29 21:05:16,"@jamesob twice the time or twice the percentage?\nBecause I can confirm that my own benchmarks of master from ~2-3 weeks ago showed `SipHashUint256Extra` very very high on the list (spent a while re-implementing it with SSE instructions just to see it's actually slower with them lol)\n\n(i'm usually using the following flags: `perf report -g 'graph,0.5,caller'` that way it sorts the percentages",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547629076,547629076,
martinus,2019-10-29 21:11:15,@jamesob did your master build already contain #16957? ,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547631234,547631234,
JeremyRubin,2019-10-29 21:12:13,"@martinus yes it did -- are you not rebased?\n\nWorth pointing out that a prevector<28> on master fits perfectly in a 32 byte or 64 byte cache line.\n\nNo longer after this change (which is fine, we can increase to prevector<31> where sensitive to it, like std::vector<prevector<>>.\n\nAlso, now that CAmounts are unaligned, they too can be extra slow to do something with.\n\nI doubt that's ",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547631578,547631578,
martinus,2019-10-29 22:51:34,"> @martinus yes it did -- are you not rebased?\n\nI didn't saw he linked to the master revision, so both master and my branch has #16957 so it's not that.\n\nI suspect that there is something strange going on with the threading code. Maybe some timing issue causes lots of caching misses for some reason? I don't know much about how the checkqueue and surrounding classes work though.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547664250,547664250,
martinus,2019-10-29 23:30:04,"I think I might have been able to reproduce this issue. I've tried `./bitcoind -datadir=/run/media/martinus/tera/bitcoin/db -reindex-chainstate -stopatheight=150000 -printtoconsole=0 -connect=0 -dbcache=15000` on master, and on an older version, before #16957. The old version used ~20 seconds of user time, master used 332 seconds. I've done `git bisect` and found this revision as the first bad com",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547674256,547674256,
sipa,2019-10-29 23:34:04,@martinus Are you aware that blocks before the assumevalid point don't get signature/script validated?,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547675174,547675174,
MarcoFalke,2019-10-30 00:31:53,"For benchmarking purposes, it might be best to set all nodes compiled from different branches to `-noassumevalid` or the same block hash.",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547687821,547687821,
martinus,2019-10-30 05:03:48,"> @martinus Are you aware that blocks before the assumevalid point don't get signature/script validated?\n\nNo, I didn't know. Also it seems that since I didn't yet have this block, -reindex-chainstate signature/script validates everything\n\nIt might be helpful to have a *list* of assumevalid blocks instead of just a single block, to prevent revalidating everything when that specific marker b",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-547740076,547740076,
jamesob,2019-11-12 17:09:50,"Did some benches over the weekend ([`bench/master.1`](https://github.com/jamesob/bitcoin/tree/bench/master.1) vs. [`bench/compactcoin.1`](https://github.com/jamesob/bitcoin/tree/bench/compactcoin.1)) with the same setup/reindex-to-550,000 as mentioned in the allocator PR (https://github.com/bitcoin/bitcoin/pull/16801#issuecomment-551883348):\n\n```\nhost         tag                      time   ",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-552990885,552990885,
ajtowns,2019-12-10 12:47:28,"If `CScript` needs to be 8 byte aligned (because it has a pointer), then I think this becomes:\n\n* **88** CCoinsMap::value_type\n  * 36 COutPoint\n    * 32 uint256\n    * 4 uint32_t\n  * **4** PADDING\n  * **48** CCoinsCacheEntry\n    * **48** Coin\n      * **40** CTxOut\n        * 8 nValue\n        * **32** CScript\n      * **4** nHeight\n      * **1** fCoinBase & flags (dirty & fre",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-564017288,564017288,
DrahtBot,2020-02-11 08:57:02,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-584532588,584532588,
martinus,2020-02-18 22:45:52,"I'll close this issue, as @ajtowns noted, this PR has illegally aligned the CScript to 4 bytes to get it to 28 bytes. ",https://github.com/bitcoin/bitcoin/pull/17060#issuecomment-587942416,587942416,
practicalswift,2019-10-08 21:31:26,"Should be ""regardless"" :)",https://github.com/bitcoin/bitcoin/pull/17060#discussion_r332743152,332743152,src/primitives/transaction.h
practicalswift,2019-10-08 21:31:51,Should be `explicit`? :),https://github.com/bitcoin/bitcoin/pull/17060#discussion_r332743291,332743291,src/primitives/transaction.h
GChuf,2019-10-09 13:59:16,"Should be ""known"".\n... And, uh, is that ""away"" or ""anyway""?",https://github.com/bitcoin/bitcoin/pull/17060#discussion_r333029200,333029200,src/primitives/transaction.h
martinus,2019-10-09 14:37:38,"It should, I can add that easily by adding the assignment operator for CAmount. \n\nAlso theoretically the `operator CAmount()` should be explicit too, but changing that would mean that I'd have to change practically all usages of this class...",https://github.com/bitcoin/bitcoin/pull/17060#discussion_r333051913,333051913,src/primitives/transaction.h
martinus,2019-10-09 14:52:32,"fixed in 03cb535384eb6d2f4284524c33ab03371bd263e2, also it should be ""optimized away"" because the compiler can the function call away. See this: https://godbolt.org/z/6uP9_S",https://github.com/bitcoin/bitcoin/pull/17060#discussion_r333060751,333060751,src/primitives/transaction.h
