[
  {
    "sha": "6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDEzZDRkYjIwZTY1NWQ1YjYyM2FjODc4OGM4MTRjZThmN2YzM2E3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T16:22:39Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T17:47:23Z"
      },
      "message": "[moveonly] Move PoissonNextSend to random\n\nPoissonNextSend is no longer used only for net. Since it's\na utility random function, move it to random.cpp",
      "tree": {
        "sha": "43bc902c31357f320d3a12dd92c764a013f23867",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43bc902c31357f320d3a12dd92c764a013f23867"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f54753293fe7355e4280944d766f22054b560ba1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f54753293fe7355e4280944d766f22054b560ba1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f54753293fe7355e4280944d766f22054b560ba1"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 32,
      "deletions": 29
    },
    "files": [
      {
        "sha": "10640cb52d8397b153799514ba4450193fc8ec26",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -2791,11 +2791,6 @@ int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_secon\n     return m_next_send_inv_to_incoming;\n }\n \n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n-{\n-    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n-}\n-\n CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n {\n     return CSipHasher(nSeed0, nSeed1).Write(id);"
      },
      {
        "sha": "fea16bb317e0a39eebbfad0ff266a162c6e3976c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -1003,13 +1003,4 @@ class CNode\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-/** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n-\n-/** Wrapper to return mockable type */\n-inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n-{\n-    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n-}\n-\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "423cc0572d4dafbf91846e39a61ff1a8b20c782a",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -17,6 +17,7 @@\n #include <sync.h>     // for Mutex\n #include <util/time.h> // for GetTimeMicros()\n \n+#include <cmath>\n #include <stdlib.h>\n #include <thread>\n \n@@ -721,3 +722,9 @@ void RandomInit()\n \n     ReportHardwareRand();\n }\n+\n+int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n+{\n+    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+}\n+"
      },
      {
        "sha": "c60768134f1adaaedcab4408949dd372d6961d85",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -253,4 +253,13 @@ bool Random_SanityCheck();\n  */\n void RandomInit();\n \n+/** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n+int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n+\n+/** Wrapper to return mockable type */\n+inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n+{\n+    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n+}\n+\n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "42e673f83b26747ad297fae2c7d1e1b0bc44cd31",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -8,6 +8,7 @@\n #include <clientversion.h>\n #include <net.h>\n #include <netbase.h>\n+#include <random.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/util/setup_common.h>\n@@ -305,19 +306,4 @@ BOOST_AUTO_TEST_CASE(LocalAddress_BasicLifecycle)\n     BOOST_CHECK_EQUAL(IsLocal(addr), false);\n }\n \n-BOOST_AUTO_TEST_CASE(PoissonNextSend)\n-{\n-    g_mock_deterministic_tests = true;\n-\n-    int64_t now = 5000;\n-    int average_interval_seconds = 600;\n-\n-    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n-    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n-\n-    BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n-\n-    g_mock_deterministic_tests = false;\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e9d5d79eaf9ca5f64ccfa7c02e777aa8cc3040cd",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d13d4db20e655d5b623ac8788c814ce8f7f33a7/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "patch": "@@ -130,4 +130,19 @@ BOOST_AUTO_TEST_CASE(shuffle_stat_test)\n     BOOST_CHECK_EQUAL(sum, 12000);\n }\n \n+BOOST_AUTO_TEST_CASE(PoissonNextSend)\n+{\n+    g_mock_deterministic_tests = true;\n+\n+    int64_t now = 5000;\n+    int average_interval_seconds = 600;\n+\n+    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n+    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n+\n+    BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n+\n+    g_mock_deterministic_tests = false;\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGQzOWQxZTgwYzBhZDZiOWE4YTJjZDI1MmNmNzNkNWJhNzgyZjNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T17:30:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T17:47:25Z"
      },
      "message": "[style] Don't use implicit std namespace in PoissonNextSend",
      "tree": {
        "sha": "c4eb3fad16d8fbfd98990150302572cf0b01c6a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4eb3fad16d8fbfd98990150302572cf0b01c6a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d13d4db20e655d5b623ac8788c814ce8f7f33a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d13d4db20e655d5b623ac8788c814ce8f7f33a7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b64b9dd8c76544c574d5c9eeeb7477a3c352fafd",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
        "patch": "@@ -725,6 +725,6 @@ void RandomInit()\n \n int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n {\n-    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+    return now + (int64_t)(std::log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n "
      }
    ]
  },
  {
    "sha": "3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTdlNGY1OWJlODljYmQ0MTBiMGE1NGZhMWZlODFjNWQzMjcwZmU0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-15T23:06:59Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-08T17:54:20Z"
      },
      "message": "scripted-diff: replace PoissonNextSend with GetPoissonRand\n\nPoisson distributions are used for more than just the next inv send.\nMake the name more generic.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<PoissonNextSend\\>/GetPoissonRand/g' $(git grep -l 'PoissonNextSend' ./src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "27d704350a0f302594953c39e462dc820347f664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27d704350a0f302594953c39e462dc820347f664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dd39d1e80c0ad6b9a8a2cd252cf73d5ba782f3c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "ac8a74248002b8eed0256b3fb8f35bb41258c2ca",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "patch": "@@ -1741,7 +1741,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n     int64_t nStart = GetTime();\n \n     // Minimum time before next feeler connection (in microseconds).\n-    int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n+    int64_t nNextFeeler = GetPoissonRand(nStart*1000*1000, FEELER_INTERVAL);\n     while (!interruptNet)\n     {\n         ProcessOneShot();\n@@ -1810,7 +1810,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n         if (nOutboundFullRelay >= m_max_outbound_full_relay && nOutboundBlockRelay >= m_max_outbound_block_relay && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n-                nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n+                nNextFeeler = GetPoissonRand(nTime, FEELER_INTERVAL);\n                 fFeeler = true;\n             } else {\n                 continue;\n@@ -2786,7 +2786,7 @@ int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_secon\n         // If this function were called from multiple threads simultaneously\n         // it would possible that both update the next send variable, and return a different result to their caller.\n         // This is not possible in practice as only the net processing thread invokes this function.\n-        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval_seconds);\n+        m_next_send_inv_to_incoming = GetPoissonRand(now, average_interval_seconds);\n     }\n     return m_next_send_inv_to_incoming;\n }"
      },
      {
        "sha": "5d0152e3edc7fe3cb5dcad045073e65e5490a6f4",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "patch": "@@ -3638,14 +3638,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n         if (pto->IsAddrRelayPeer() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n             AdvertiseLocal(pto);\n-            pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n+            pto->m_next_local_addr_send = GetPoissonRand(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n \n         //\n         // Message: addr\n         //\n         if (pto->IsAddrRelayPeer() && pto->m_next_addr_send < current_time) {\n-            pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n+            pto->m_next_addr_send = GetPoissonRand(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());\n             assert(pto->m_addr_known);\n@@ -3863,7 +3863,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                         pto->m_tx_relay->nNextInvSend = std::chrono::microseconds{connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL)};\n                     } else {\n                         // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                        pto->m_tx_relay->nNextInvSend = PoissonNextSend(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n+                        pto->m_tx_relay->nNextInvSend = GetPoissonRand(current_time, std::chrono::seconds{INVENTORY_BROADCAST_INTERVAL >> 1});\n                     }\n                 }\n \n@@ -4145,7 +4145,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     connman->PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->m_tx_relay->lastSentFeeFilter = filterToSend;\n                 }\n-                pto->m_tx_relay->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+                pto->m_tx_relay->nextSendTimeFeeFilter = GetPoissonRand(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n             }\n             // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY."
      },
      {
        "sha": "43fa937b8add8963a7b3df7e8382bef7ea0d9b76",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "patch": "@@ -723,7 +723,7 @@ void RandomInit()\n     ReportHardwareRand();\n }\n \n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n+int64_t GetPoissonRand(int64_t now, int average_interval_seconds)\n {\n     return now + (int64_t)(std::log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "10773fd6679da5826a6a91f80f3b06804fb67a53",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "patch": "@@ -254,12 +254,12 @@ bool Random_SanityCheck();\n void RandomInit();\n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n-int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n+int64_t GetPoissonRand(int64_t now, int average_interval_seconds);\n \n /** Wrapper to return mockable type */\n-inline std::chrono::microseconds PoissonNextSend(std::chrono::microseconds now, std::chrono::seconds average_interval)\n+inline std::chrono::microseconds GetPoissonRand(std::chrono::microseconds now, std::chrono::seconds average_interval)\n {\n-    return std::chrono::microseconds{PoissonNextSend(now.count(), average_interval.count())};\n+    return std::chrono::microseconds{GetPoissonRand(now.count(), average_interval.count())};\n }\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "a48c2615eedebb3d737b86f791baf0e862a39f9a",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "patch": "@@ -130,15 +130,15 @@ BOOST_AUTO_TEST_CASE(shuffle_stat_test)\n     BOOST_CHECK_EQUAL(sum, 12000);\n }\n \n-BOOST_AUTO_TEST_CASE(PoissonNextSend)\n+BOOST_AUTO_TEST_CASE(GetPoissonRand)\n {\n     g_mock_deterministic_tests = true;\n \n     int64_t now = 5000;\n     int average_interval_seconds = 600;\n \n-    auto poisson = ::PoissonNextSend(now, average_interval_seconds);\n-    std::chrono::microseconds poisson_chrono = ::PoissonNextSend(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n+    auto poisson = ::GetPoissonRand(now, average_interval_seconds);\n+    std::chrono::microseconds poisson_chrono = ::GetPoissonRand(std::chrono::microseconds{now}, std::chrono::seconds{average_interval_seconds});\n \n     BOOST_CHECK_EQUAL(poisson, poisson_chrono.count());\n "
      }
    ]
  },
  {
    "sha": "3acca09685bd0038a74a9468c7e9e33e40b7d8a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWNjYTA5Njg1YmQwMDM4YTc0YTk0NjhjN2U5ZTMzZTQwYjdkOGE4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2020-05-08T18:00:22Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-12T01:08:32Z"
      },
      "message": "[net processing] requeue transaction GETDATA requests more frequently\n\nThis means that if the transaction has cleared out from\ng_already_asked_for, we'll rerequest from an announcing peer sooner.",
      "tree": {
        "sha": "99ebb74add0382a6f131b248d4017417eced5405",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99ebb74add0382a6f131b248d4017417eced5405"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3acca09685bd0038a74a9468c7e9e33e40b7d8a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acca09685bd0038a74a9468c7e9e33e40b7d8a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3acca09685bd0038a74a9468c7e9e33e40b7d8a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acca09685bd0038a74a9468c7e9e33e40b7d8a8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e7e4f59be89cbd410b0a54fa1fe81c5d3270fe4"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "caf0f7b7d450814043f1a7298d7618ba3c0303b1",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acca09685bd0038a74a9468c7e9e33e40b7d8a8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acca09685bd0038a74a9468c7e9e33e40b7d8a8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3acca09685bd0038a74a9468c7e9e33e40b7d8a8",
        "patch": "@@ -746,13 +746,18 @@ std::chrono::microseconds CalculateTxGetDataTime(const uint256& txid, std::chron\n {\n     std::chrono::microseconds process_time;\n     const auto last_request_time = GetTxRequestTime(txid);\n-    // First time requesting this tx\n     if (last_request_time.count() == 0) {\n+        // This peer has just announced the tx. Consider requesting now.\n         process_time = current_time;\n     } else {\n-        // Randomize the delay to avoid biasing some peers over others (such as due to\n-        // fixed ordering of peer processing in ThreadMessageHandler)\n-        process_time = last_request_time + GETDATA_TX_INTERVAL + GetRandMicros(MAX_GETDATA_RANDOM_DELAY);\n+        // We're requeuing when we'll consider requesting from this peer.\n+        // Randomize the delay to avoid biasing some peers over others (such as\n+        // due to fixed ordering of peer processing in ThreadMessageHandler)\n+        std::chrono::microseconds next_process_time = GetPoissonRand(current_time, std::chrono::seconds(20));\n+        // The time we reconsider requesting should be no more than 2 seconds\n+        // after the previous request timeout. Again, add some randomness to\n+        // spread out requests and randomize order.\n+        process_time = std::min(last_request_time + GETDATA_TX_INTERVAL + GetRandMicros(MAX_GETDATA_RANDOM_DELAY), next_process_time);\n     }\n \n     // We delay processing announcements from inbound peers\n@@ -4109,10 +4114,8 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     UpdateTxRequestTime(inv.hash, current_time);\n                     state.m_tx_download.m_tx_in_flight.emplace(inv.hash, current_time);\n                 } else {\n-                    // This transaction is in flight from someone else; queue\n-                    // up processing to happen after the download times out\n-                    // (with a slight delay for inbound peers, to prefer\n-                    // requests to outbound peers).\n+                    // This transaction is in flight from someone else; Set a\n+                    // new time to reconsider downloading from this peer.\n                     const auto next_process_time = CalculateTxGetDataTime(txid, current_time, !state.fPreferredDownload);\n                     tx_process_time.emplace(next_process_time, txid);\n                 }"
      }
    ]
  }
]