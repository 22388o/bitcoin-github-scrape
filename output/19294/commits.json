[
  {
    "sha": "faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE4NDFiYzk3OWNhMzA2ZjViYTRkNWY3Yjc4ZmNjNDI3YjhlNDEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-16T11:39:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-16T12:27:57Z"
      },
      "message": "test: refactor: Inline adjust_bitcoin_conf_for_pre_17",
      "tree": {
        "sha": "e3fbfeadec7eed9b5070ecdea2759120cb4a9d54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3fbfeadec7eed9b5070ecdea2759120cb4a9d54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhUPQv9HmdllTTu/7bqdhhLYjx5a1Win3xsU9GVa5EPNC2aPbahsbYmzKEAr3Tt\ny9jSH0jZvKM1MG+tln7KmBD8OtEmBQX08klpYh8v2BYLivnOCZQSZKw1ivsUpGm5\nHveT539o3wUSheIYVGUydmKnkP7NEdImROd+3KgqhcHXRfVdUyBOAXu9RU5b9SYO\nSiXHlDynVNjF+Czjkh9p6m4831dBQ/AcHQ4U/MBEndSq/QJIj3ZnaprbpFiueXTH\niQj5gY+wEf6M2vnfgJF0j6tBzYCoyM2k8jPxLcbjlhxd6r66hCqhVnnGFSk9SJxP\nfOyD1lCPg/AQEitMI/ZjoAp1kR386nUkE40uS2HkD8R8S6UuAssV7COef10nAfc5\nhF4Wj8z28G6iLNvAqDEVkkB1qwh6+bqb9jaghGjVaokS3ImiBiDHvBGA3ArjcB2V\nZ3MAzSq9SEowOJoMiTPM/YWcRd5RFW7ClSgJbJvn9JS/x6xg+IFUYbECk8sRoyO9\nSU2aT1X0\n=yr4v\n-----END PGP SIGNATURE-----",
        "payload": "tree e3fbfeadec7eed9b5070ecdea2759120cb4a9d54\nparent 0afbeb73ccb7523794e1e4a3422607c4423d1048\nauthor MarcoFalke <falke.marco@gmail.com> 1592307558 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592310477 -0400\n\ntest: refactor: Inline adjust_bitcoin_conf_for_pre_17\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0afbeb73ccb7523794e1e4a3422607c4423d1048",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0afbeb73ccb7523794e1e4a3422607c4423d1048",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0afbeb73ccb7523794e1e4a3422607c4423d1048"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 11,
      "deletions": 19
    },
    "files": [
      {
        "sha": "0ab309f9b9c89e78078bcce1d12ce841ff7676a8",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "patch": "@@ -26,7 +26,6 @@\n from test_framework.descriptors import descsum_create\n \n from test_framework.util import (\n-    adjust_bitcoin_conf_for_pre_17,\n     assert_equal,\n     sync_blocks,\n     sync_mempools,\n@@ -60,8 +59,6 @@ def setup_nodes(self):\n             170100,\n             160300,\n         ])\n-        # adapt bitcoin.conf, because older bitcoind's don't recognize config sections\n-        adjust_bitcoin_conf_for_pre_17(self.nodes[5].bitcoinconf)\n \n         self.start_nodes()\n "
      },
      {
        "sha": "999399dec0a8134cc48c8bbb26419eb8d25719a3",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "patch": "@@ -16,9 +16,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    adjust_bitcoin_conf_for_pre_17\n-)\n+\n \n class MempoolCompatibilityTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -33,7 +31,6 @@ def setup_network(self):\n             150200, # oldest version supported by the test framework\n             None,\n         ])\n-        adjust_bitcoin_conf_for_pre_17(self.nodes[0].bitcoinconf)\n         self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n "
      },
      {
        "sha": "c9fad914813e26d5da67fce298727da5eb363849",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "patch": "@@ -452,7 +452,7 @@ def get_bin_from_version(version, bin_name, bin_default):\n         assert_equal(len(binary), num_nodes)\n         assert_equal(len(binary_cli), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(\n+            test_node_i = TestNode(\n                 i,\n                 get_datadir_path(self.options.tmpdir, i),\n                 chain=self.chain,\n@@ -470,7 +470,15 @@ def get_bin_from_version(version, bin_name, bin_default):\n                 start_perf=self.options.perf,\n                 use_valgrind=self.options.valgrind,\n                 descriptors=self.options.descriptors,\n-            ))\n+            )\n+            self.nodes.append(test_node_i)\n+            if not test_node_i.version_is_at_least(170000):\n+                # adjust conf for pre 17\n+                conf_file = test_node_i.bitcoinconf\n+                with open(conf_file, 'r', encoding='utf8') as conf:\n+                    conf_data = conf.read()\n+                with open(conf_file, 'w', encoding='utf8') as conf:\n+                    conf.write(conf_data.replace('[regtest]', ''))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\""
      },
      {
        "sha": "f1e8cc95c87a2f2290b4818aa88cd98069896d4d",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "patch": "@@ -327,12 +327,6 @@ def initialize_datadir(dirname, n, chain):\n         os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n     return datadir\n \n-def adjust_bitcoin_conf_for_pre_17(conf_file):\n-    with open(conf_file,'r', encoding='utf8') as conf:\n-        conf_data = conf.read()\n-    with open(conf_file, 'w', encoding='utf8') as conf:\n-        conf_data_changed = conf_data.replace('[regtest]', '')\n-        conf.write(conf_data_changed)\n \n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))"
      },
      {
        "sha": "cc2139a027e29ade1e77f4bceace15871ae79a65",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa841bc979ca306f5ba4d5f7b78fcc427b8e413/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "patch": "@@ -16,7 +16,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    adjust_bitcoin_conf_for_pre_17,\n     assert_equal,\n     assert_greater_than,\n     assert_is_hex_string,\n@@ -46,9 +45,6 @@ def setup_nodes(self):\n             160300,\n             150200,\n         ])\n-        # adapt bitcoin.conf, because older bitcoind's don't recognize config sections\n-        adjust_bitcoin_conf_for_pre_17(self.nodes[1].bitcoinconf)\n-        adjust_bitcoin_conf_for_pre_17(self.nodes[2].bitcoinconf)\n         self.start_nodes()\n \n     def dumb_sync_blocks(self):"
      }
    ]
  },
  {
    "sha": "fa41b0a6dac7afd77e2b94eca6520ab3d2adc231",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQxYjBhNmRhYzdhZmQ3N2UyYjk0ZWNhNjUyMGFiM2QyYWRjMjMx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-16T11:42:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-16T12:28:06Z"
      },
      "message": "pep-8 test/functional/test_framework/util.py\n\nCan be reviewed with\n--word-diff-regex=. -U0",
      "tree": {
        "sha": "2e15caf0a576e1428ee897519c751fcd7644617b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e15caf0a576e1428ee897519c751fcd7644617b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg3hAwAw4Mri/HpiKvYTJWmF50odsLhRytCnzdIdYNdVWVkZIFF2vK4BNh4PNyB\nqyzc8qbLFH/yYAxUgYujg+sikXVG9CqRAkA1aTWKOpGNj1VV1mmJN+7KMK+GSIHA\nlhZoAdrX+z51qqrO7TuzjCRGKiXWp9fwVfTw3HNjRyajSOGf2GTvrrttTWIh0K0j\nH1y9407PXh1wJP8dd7eI4GOoqjzzIZTrkRbNc98AYCENlSzF9E2qsEJgQjPx5ZN8\nRy+yhn4t3y1VEs/5vX40szaCKO7WiVKp7gTRHCldcaoirEbiRZ5ZpucN2OtzDjb6\n1Afs7heL0W2i61RHODffOU6lkKP2LnsiNeklA8eZmkqLDGCsgNjQgj/vxmbEfaUq\nKCXQsbszALxJ0ei4yxBGbnvjShHFLgvFh8y7i7orpsYPsSfX5mHejFmeUuYQ5tng\nGT9D2TAFaSejcj3nzTJ/URDvBbuOThb3lkwM9ujMS+lZTk3lf99n50I3GeU6xaMY\nkK13nyu+\n=63YE\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e15caf0a576e1428ee897519c751fcd7644617b\nparent faa841bc979ca306f5ba4d5f7b78fcc427b8e413\nauthor MarcoFalke <falke.marco@gmail.com> 1592307765 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1592310486 -0400\n\npep-8 test/functional/test_framework/util.py\n\nCan be reviewed with\n--word-diff-regex=. -U0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa841bc979ca306f5ba4d5f7b78fcc427b8e413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa841bc979ca306f5ba4d5f7b78fcc427b8e413"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 48,
      "deletions": 10
    },
    "files": [
      {
        "sha": "17b2cbb9713b3b97105b923fb525a878c9c6c5f1",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 48,
        "deletions": 10,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa41b0a6dac7afd77e2b94eca6520ab3d2adc231/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa41b0a6dac7afd77e2b94eca6520ab3d2adc231",
        "patch": "@@ -25,13 +25,15 @@\n # Assert functions\n ##################\n \n+\n def assert_approx(v, vexp, vspan=0.00001):\n     \"\"\"Assert that `v` is within `vspan` of `vexp`\"\"\"\n     if v < vexp - vspan:\n         raise AssertionError(\"%s < [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n     if v > vexp + vspan:\n         raise AssertionError(\"%s > [%s..%s]\" % (str(v), str(vexp - vspan), str(vexp + vspan)))\n \n+\n def assert_fee_amount(fee, tx_size, fee_per_kB):\n     \"\"\"Assert the fee was in range\"\"\"\n     target_fee = round(tx_size * fee_per_kB / 1000, 8)\n@@ -41,21 +43,26 @@ def assert_fee_amount(fee, tx_size, fee_per_kB):\n     if fee > (tx_size + 2) * fee_per_kB / 1000:\n         raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\" % (str(fee), str(target_fee)))\n \n+\n def assert_equal(thing1, thing2, *args):\n     if thing1 != thing2 or any(thing1 != arg for arg in args):\n         raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\n \n+\n def assert_greater_than(thing1, thing2):\n     if thing1 <= thing2:\n         raise AssertionError(\"%s <= %s\" % (str(thing1), str(thing2)))\n \n+\n def assert_greater_than_or_equal(thing1, thing2):\n     if thing1 < thing2:\n         raise AssertionError(\"%s < %s\" % (str(thing1), str(thing2)))\n \n+\n def assert_raises(exc, fun, *args, **kwds):\n     assert_raises_message(exc, None, fun, *args, **kwds)\n \n+\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n@@ -71,6 +78,7 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+\n def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     \"\"\"Execute a process and asserts the process return code and output.\n \n@@ -95,6 +103,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+\n def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n@@ -113,6 +122,7 @@ def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"\n     assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n \n+\n def try_rpc(code, message, fun, *args, **kwds):\n     \"\"\"Tries to run an rpc command.\n \n@@ -134,22 +144,22 @@ def try_rpc(code, message, fun, *args, **kwds):\n     else:\n         return False\n \n+\n def assert_is_hex_string(string):\n     try:\n         int(string, 16)\n     except Exception as e:\n-        raise AssertionError(\n-            \"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n+        raise AssertionError(\"Couldn't interpret %r as hexadecimal; raised: %s\" % (string, e))\n+\n \n def assert_is_hash_string(string, length=64):\n     if not isinstance(string, str):\n         raise AssertionError(\"Expected a string, got type %r\" % type(string))\n     elif length and len(string) != length:\n-        raise AssertionError(\n-            \"String of length %d expected; got %d\" % (length, len(string)))\n+        raise AssertionError(\"String of length %d expected; got %d\" % (length, len(string)))\n     elif not re.match('[abcdef0-9]+$', string):\n-        raise AssertionError(\n-            \"String %r contains invalid characters for a hash.\" % string)\n+        raise AssertionError(\"String %r contains invalid characters for a hash.\" % string)\n+\n \n def assert_array_result(object_array, to_match, expected, should_not_find=False):\n     \"\"\"\n@@ -180,34 +190,41 @@ def assert_array_result(object_array, to_match, expected, should_not_find=False)\n     if num_matched > 0 and should_not_find:\n         raise AssertionError(\"Objects were found %s\" % (str(to_match)))\n \n+\n # Utility functions\n ###################\n \n+\n def check_json_precision():\n     \"\"\"Make sure json library being used does not lose precision converting BTC values\"\"\"\n     n = Decimal(\"20000000.00000003\")\n     satoshis = int(json.loads(json.dumps(float(n))) * 1.0e8)\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+\n def EncodeDecimal(o):\n     if isinstance(o, Decimal):\n         return str(o)\n     raise TypeError(repr(o) + \" is not JSON serializable\")\n \n+\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n \n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n \n+\n def str_to_b64str(string):\n     return b64encode(string.encode('utf-8')).decode('ascii')\n \n+\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+\n def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None, timeout_factor=1.0):\n     if attempts == float('inf') and timeout == float('inf'):\n         timeout = 60\n@@ -235,6 +252,7 @@ def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=N\n         raise AssertionError(\"Predicate {} not true after {} seconds\".format(predicate_source, timeout))\n     raise RuntimeError('Unreachable')\n \n+\n # RPC/P2P connection constants and functions\n ############################################\n \n@@ -250,6 +268,7 @@ class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n \n+\n def get_rpc_proxy(url, node_number, *, timeout=None, coveragedir=None):\n     \"\"\"\n     Args:\n@@ -271,18 +290,20 @@ def get_rpc_proxy(url, node_number, *, timeout=None, coveragedir=None):\n     proxy = AuthServiceProxy(url, **proxy_kwargs)\n     proxy.url = url  # store URL on proxy for info\n \n-    coverage_logfile = coverage.get_filename(\n-        coveragedir, node_number) if coveragedir else None\n+    coverage_logfile = coverage.get_filename(coveragedir, node_number) if coveragedir else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n+\n def p2p_port(n):\n     assert n <= MAX_NODES\n     return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n+\n def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n+\n def rpc_url(datadir, i, chain, rpchost):\n     rpc_u, rpc_p = get_auth_cookie(datadir, chain)\n     host = '127.0.0.1'\n@@ -295,9 +316,11 @@ def rpc_url(datadir, i, chain, rpchost):\n             host = rpchost\n     return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n+\n # Node functions\n ################\n \n+\n def initialize_datadir(dirname, n, chain):\n     datadir = get_datadir_path(dirname, n)\n     if not os.path.isdir(datadir):\n@@ -331,11 +354,13 @@ def initialize_datadir(dirname, n, chain):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n+\n def append_config(datadir, options):\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n         for option in options:\n             f.write(option + \"\\n\")\n \n+\n def get_auth_cookie(datadir, chain):\n     user = None\n     password = None\n@@ -360,20 +385,24 @@ def get_auth_cookie(datadir, chain):\n         raise ValueError(\"No RPC credentials\")\n     return user, password\n \n+\n # If a cookie file exists in the given datadir, delete it.\n def delete_cookie_file(datadir, chain):\n     if os.path.isfile(os.path.join(datadir, chain, \".cookie\")):\n         logger.debug(\"Deleting leftover cookie file\")\n         os.remove(os.path.join(datadir, chain, \".cookie\"))\n \n+\n def softfork_active(node, key):\n     \"\"\"Return whether a softfork is active.\"\"\"\n     return node.getblockchaininfo()['softforks'][key]['active']\n \n+\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n \n+\n def disconnect_nodes(from_connection, node_num):\n     def get_peer_ids():\n         result = []\n@@ -386,7 +415,7 @@ def get_peer_ids():\n     if not peer_ids:\n         logger.warning(\"disconnect_nodes: {} and {} were not connected\".format(\n             from_connection.index,\n-            node_num\n+            node_num,\n         ))\n         return\n     for peer_id in peer_ids:\n@@ -396,12 +425,13 @@ def get_peer_ids():\n             # If this node is disconnected between calculating the peer id\n             # and issuing the disconnect, don't worry about it.\n             # This avoids a race condition if we're mass-disconnecting peers.\n-            if e.error['code'] != -29: # RPC_CLIENT_NODE_NOT_CONNECTED\n+            if e.error['code'] != -29:  # RPC_CLIENT_NODE_NOT_CONNECTED\n                 raise\n \n     # wait to disconnect\n     wait_until(lambda: not get_peer_ids(), timeout=5)\n \n+\n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")\n@@ -473,6 +503,7 @@ def find_output(node, txid, amount, *, blockhash=None):\n             return i\n     raise RuntimeError(\"find_output txid %s : %s not found\" % (txid, str(amount)))\n \n+\n def gather_inputs(from_node, amount_needed, confirmations_required=1):\n     \"\"\"\n     Return a random set of unspent txouts that are enough to pay amount_needed\n@@ -490,6 +521,7 @@ def gather_inputs(from_node, amount_needed, confirmations_required=1):\n         raise RuntimeError(\"Insufficient funds: need %d, have %d\" % (amount_needed, total_in))\n     return (total_in, inputs)\n \n+\n def make_change(from_node, amount_in, amount_out, fee):\n     \"\"\"\n     Create change output(s), return them\n@@ -507,6 +539,7 @@ def make_change(from_node, amount_in, amount_out, fee):\n         outputs[from_node.getnewaddress()] = change\n     return outputs\n \n+\n def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n     \"\"\"\n     Create a random transaction.\n@@ -526,6 +559,7 @@ def random_transaction(nodes, amount, min_fee, fee_increment, fee_variants):\n \n     return (txid, signresult[\"hex\"], fee)\n \n+\n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions.\n def create_confirmed_utxos(fee, node, count):\n@@ -558,6 +592,7 @@ def create_confirmed_utxos(fee, node, count):\n     assert len(utxos) >= count\n     return utxos\n \n+\n # Create large OP_RETURN txouts that can be appended to a transaction\n # to make it large (helper for constructing large transactions).\n def gen_return_txouts():\n@@ -577,6 +612,7 @@ def gen_return_txouts():\n         txouts.append(txout)\n     return txouts\n \n+\n # Create a spend of each passed-in utxo, splicing in \"txouts\" to each raw\n # transaction to make it large.  See gen_return_txouts() above.\n def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n@@ -600,6 +636,7 @@ def create_lots_of_big_transactions(node, txouts, utxos, num, fee):\n         txids.append(txid)\n     return txids\n \n+\n def mine_large_block(node, utxos=None):\n     # generate a 66k transaction,\n     # and 14 of them is close to the 1MB block limit\n@@ -613,6 +650,7 @@ def mine_large_block(node, utxos=None):\n     create_lots_of_big_transactions(node, txouts, utxos, num, fee=fee)\n     node.generate(1)\n \n+\n def find_vout_for_address(node, txid, addr):\n     \"\"\"\n     Locate the vout index of the given transaction sending to the"
      }
    ]
  }
]