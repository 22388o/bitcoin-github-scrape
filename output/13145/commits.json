[
  {
    "sha": "075429a482392050c8e9008d9c990d185054a597",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzU0MjlhNDgyMzkyMDUwYzhlOTAwOGQ5Yzk5MGQxODUwNTRhNTk3",
    "commit": {
      "author": {
        "name": "winder",
        "email": "wwinder.unh@gmail.com",
        "date": "2018-07-12T03:44:12Z"
      },
      "committer": {
        "name": "winder",
        "email": "wwinder.unh@gmail.com",
        "date": "2018-07-12T03:44:12Z"
      },
      "message": "Use common SetDataDir method to create temp directory in tests.",
      "tree": {
        "sha": "e0bec3da4d66f83fc994a73c2523a55959df6476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0bec3da4d66f83fc994a73c2523a55959df6476"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/075429a482392050c8e9008d9c990d185054a597",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/075429a482392050c8e9008d9c990d185054a597",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/075429a482392050c8e9008d9c990d185054a597",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/075429a482392050c8e9008d9c990d185054a597/comments",
    "author": {
      "login": "winder",
      "id": 125509,
      "node_id": "MDQ6VXNlcjEyNTUwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/125509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winder",
      "html_url": "https://github.com/winder",
      "followers_url": "https://api.github.com/users/winder/followers",
      "following_url": "https://api.github.com/users/winder/following{/other_user}",
      "gists_url": "https://api.github.com/users/winder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winder/subscriptions",
      "organizations_url": "https://api.github.com/users/winder/orgs",
      "repos_url": "https://api.github.com/users/winder/repos",
      "events_url": "https://api.github.com/users/winder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winder/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "winder",
      "id": 125509,
      "node_id": "MDQ6VXNlcjEyNTUwOQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/125509?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/winder",
      "html_url": "https://github.com/winder",
      "followers_url": "https://api.github.com/users/winder/followers",
      "following_url": "https://api.github.com/users/winder/following{/other_user}",
      "gists_url": "https://api.github.com/users/winder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/winder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/winder/subscriptions",
      "organizations_url": "https://api.github.com/users/winder/orgs",
      "repos_url": "https://api.github.com/users/winder/repos",
      "events_url": "https://api.github.com/users/winder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/winder/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43ae5ee9e4c274c402ebb9a73795593a6c18c157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43ae5ee9e4c274c402ebb9a73795593a6c18c157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43ae5ee9e4c274c402ebb9a73795593a6c18c157"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 42,
      "deletions": 29
    },
    "files": [
      {
        "sha": "fac7418cba5b5e260d895e7c7dfe2177f6713e4e",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/075429a482392050c8e9008d9c990d185054a597/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/075429a482392050c8e9008d9c990d185054a597/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=075429a482392050c8e9008d9c990d185054a597",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = InsecureRand256();\n@@ -47,7 +47,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_batch\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = SetDataDir(std::string(\"dbwrapper_iterator\").append(obfuscate ? \"_true\" : \"_false\"));\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -123,7 +123,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = SetDataDir(\"existing_data_no_obfuscate\");\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -164,7 +164,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = SetDataDir(\"existing_data_reindex\");\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = SetDataDir(\"iterator_ordering\");\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = SetDataDir(\"iterator_string_ordering\");\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "6ede65c23a70d18fb781e3fa4bddba42e9f27fc5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 15,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/075429a482392050c8e9008d9c990d185054a597/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/075429a482392050c8e9008d9c990d185054a597/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=075429a482392050c8e9008d9c990d185054a597",
        "patch": "@@ -46,35 +46,43 @@ std::ostream& operator<<(std::ostream& os, const uint256& num)\n }\n \n BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n+    : m_path_root(fs::temp_directory_path() / \"test_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30))))\n {\n-        SHA256AutoDetect();\n-        RandomInit();\n-        ECC_Start();\n-        SetupEnvironment();\n-        SetupNetworking();\n-        InitSignatureCache();\n-        InitScriptExecutionCache();\n-        fCheckBlockIndex = true;\n-        SelectParams(chainName);\n-        noui_connect();\n+    SHA256AutoDetect();\n+    RandomInit();\n+    ECC_Start();\n+    SetupEnvironment();\n+    SetupNetworking();\n+    InitSignatureCache();\n+    InitScriptExecutionCache();\n+    fCheckBlockIndex = true;\n+    SelectParams(chainName);\n+    noui_connect();\n }\n \n BasicTestingSetup::~BasicTestingSetup()\n {\n-        ECC_Stop();\n+    fs::remove_all(m_path_root);\n+    ECC_Stop();\n+}\n+\n+fs::path BasicTestingSetup::SetDataDir(const std::string& name)\n+{\n+    fs::path ret = m_path_root / name;\n+    fs::create_directories(ret);\n+    gArgs.ForceSetArg(\"-datadir\", ret.string());\n+    return ret;\n }\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n+    SetDataDir(\"tempdir\");\n     const CChainParams& chainparams = Params();\n         // Ideally we'd move all the RPC tests to the functional testing framework\n         // instead of unit tests, but for now we need these here.\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n-        fs::create_directories(pathTemp);\n-        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun.\n@@ -114,7 +122,6 @@ TestingSetup::~TestingSetup()\n         pcoinsTip.reset();\n         pcoinsdbview.reset();\n         pblocktree.reset();\n-        fs::remove_all(pathTemp);\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "88b2d37e87c2ecce057184c75c1a1f3d906ca567",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/075429a482392050c8e9008d9c990d185054a597/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/075429a482392050c8e9008d9c990d185054a597/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=075429a482392050c8e9008d9c990d185054a597",
        "patch": "@@ -45,6 +45,11 @@ struct BasicTestingSetup {\n \n     explicit BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n+\n+    fs::path SetDataDir(const std::string& name);\n+\n+private:\n+    const fs::path m_path_root;\n };\n \n /** Testing setup that configures a complete environment.\n@@ -59,7 +64,6 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;"
      },
      {
        "sha": "d535f74e9138c6a075d1689c50bd91f5bc0bb84d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/075429a482392050c8e9008d9c990d185054a597/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/075429a482392050c8e9008d9c990d185054a597/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=075429a482392050c8e9008d9c990d185054a597",
        "patch": "@@ -1100,7 +1100,7 @@ static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n \n BOOST_AUTO_TEST_CASE(test_LockDirectory)\n {\n-    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    fs::path dirname = SetDataDir(\"test_LockDirectory\") / fs::unique_path();\n     const std::string lockname = \".lock\";\n #ifndef WIN32\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on\n@@ -1188,12 +1188,12 @@ BOOST_AUTO_TEST_CASE(test_LockDirectory)\n \n BOOST_AUTO_TEST_CASE(test_DirIsWritable)\n {\n-    // Should be able to write to the system tmp dir.\n-    fs::path tmpdirname = fs::temp_directory_path();\n+    // Should be able to write to the data dir.\n+    fs::path tmpdirname = SetDataDir(\"test_DirIsWritable\");\n     BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), true);\n \n     // Should not be able to write to a non-existent dir.\n-    tmpdirname = fs::temp_directory_path() / fs::unique_path();\n+    tmpdirname = tmpdirname / fs::unique_path();\n     BOOST_CHECK_EQUAL(DirIsWritable(tmpdirname), false);\n \n     fs::create_directory(tmpdirname);"
      },
      {
        "sha": "a946b565f122a33a75815bacf0d6faa905711062",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/075429a482392050c8e9008d9c990d185054a597/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/075429a482392050c8e9008d9c990d185054a597/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=075429a482392050c8e9008d9c990d185054a597",
        "patch": "@@ -130,6 +130,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n     LOCK(cs_main);\n \n+    std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n+\n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(\"dummy\", WalletDatabase::CreateDummy());\n@@ -139,7 +141,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back(backup_file);\n         AddWallet(wallet);\n         ::dumpwallet(request);\n         RemoveWallet(wallet);\n@@ -152,7 +154,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back(backup_file);\n         AddWallet(wallet);\n         ::importwallet(request);\n         RemoveWallet(wallet);"
      }
    ]
  }
]