DrahtBot,2021-05-22 03:49:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23534](https://github.com/bitcoin/bitcoin/pull/23534) (wallet: Allow negtive effective value inputs when subtracting fee",https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-846344191,846344191,
theStack,2021-09-08 14:38:13,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-915297129,915297129,
achow101,2021-09-28 23:18:56,"Rebased. I've also made some additional changes. Notably, instead of using `SelectionResult` as an out parameter, all of the coin selection functions will return an `std::optional<SelectionResult>` instead.",https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-929692924,929692924,
S3RK,2021-10-07 07:53:58,"Concept ACK, going to review the code",https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-937544686,937544686,
Empact,2021-10-13 12:12:22,"Concept ACK.\n\nWas troubled by the largely unused `cost_of_change` attr, and looked to narrow its scope. I think I've come up with some useful additions here: https://github.com/achow101/bitcoin/compare/selectionresult...Empact:selectionresult\n\n* test: Drop unused knapsack_result var\n* refactor: Move cost_of_change param from SelectionResult to #GetWaste\n* refactor: Calculate waste once",https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-942238913,942238913,
achow101,2021-10-13 17:29:52,I've pulled in all of the suggested changes.,https://github.com/bitcoin/bitcoin/pull/22019#issuecomment-942552328,942552328,
Xekyo,2021-09-03 20:22:38,"Commit 80402a13e52671aa7359e3b87d85098805926a63: This may be more a comment on the commit message, but shouldn't the result of BnB be deterministic? Are the OutputGroups unsorted, or how is this happening?",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702143396,702143396,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-09-03 21:00:23,"```suggestion\n    /** Whether the input values for calculations should be the effective value (true) or normal value (false) */\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702158462,702158462,src/wallet/coinselection.h
Xekyo,2021-09-03 21:05:04,"What do you mean with ""independent of the selection""? Do you mean that it's the same across different algorithms, independent of the inputs that get picked, or smth else? It's definitely dependent on the selection parameters, especially the feerate.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702160046,702160046,src/wallet/coinselection.h
Xekyo,2021-09-03 21:06:59,Could 75672596d018f857013599b94f65efaf6446a825 perhaps be a scripted diff?,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702160682,702160682,src/wallet/test/coinselector_tests.cpp
Xekyo,2021-09-03 21:28:39,"This looks perhaps like an accidental edit\n```suggestion\nbool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702168017,702168017,src/wallet/spend.cpp
Xekyo,2021-09-03 21:31:48,"""as don't matter"" seems to be missing a word",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702169072,702169072,src/wallet/spend.cpp
achow101,2021-09-03 22:12:32,"I don't remember the specifics, but I think it had to with different txids being in `utxo_pool` and `actual_selection`",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702180754,702180754,src/wallet/test/coinselector_tests.cpp
achow101,2021-09-03 22:16:36,Independent of the algorithm.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702181824,702181824,src/wallet/coinselection.h
achow101,2021-09-04 00:34:33,Fixed,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702208825,702208825,src/wallet/coinselection.h
achow101,2021-09-04 00:34:40,Clarified the comment.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702208834,702208834,src/wallet/coinselection.h
achow101,2021-09-04 00:34:44,Done,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702208838,702208838,src/wallet/test/coinselector_tests.cpp
achow101,2021-09-04 00:34:51,Fixed,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702208846,702208846,src/wallet/spend.cpp
achow101,2021-09-04 00:34:56,fixed,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r702208852,702208852,src/wallet/spend.cpp
Empact,2021-10-13 12:14:04,This is apparently unused. https://github.com/Empact/bitcoin/commit/4719cc5aacf7531724d24a81b5b8935d2605f13f,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r727997015,727997015,src/wallet/test/coinselector_tests.cpp
S3RK,2021-11-02 08:34:09,"```suggestion\n        if (result.GetSelectedValue() < nTargetValue) return std::nullopt;\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r740817760,740817760,src/wallet/spend.cpp
achow101,2021-11-02 16:29:05,"Oops, fixed.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r741267727,741267727,src/wallet/spend.cpp
S3RK,2021-11-02 19:16:52,"Looks like this hasn't been caught by the tests, probably a nice to have follow up and a good first issue.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r741394282,741394282,src/wallet/spend.cpp
glozow,2021-11-14 14:58:57,"In 94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f\n\nI think there should definitely be a comment here about the difference describing exactly what `equivalent_sets` checks and its difference vs `equal_sets`",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748866164,748866164,src/wallet/test/coinselector_tests.cpp
glozow,2021-11-14 15:00:48,"In fe4d2eff23f22ec09b71bd4f218a28c66a386f10:\nShould this be `private`? Especially since you have functions to `AddInput()` and `GetInputVector()`, nobody should have direct access to this set.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748866401,748866401,src/wallet/coinselection.h
glozow,2021-11-14 15:01:30,"In fe4d2eff23f22ec09b71bd4f218a28c66a386f10:\ndelete default ctor, to make it impossible to create a `SelectionResult` with no specified target?",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748866526,748866526,src/wallet/coinselection.h
glozow,2021-11-14 15:05:41,"In cb6507ca5fc2be3d88ad5764185419e0f20a175c:\n\nThis seems strange, since `m_use_effective` should never really change. IIRC, `m_subtract_fee_outputs` is known right from the start (`CreateTransactionInternal()`) right? It seems that `SelectionResult::m_use_effective` should be a `const bool` and set in the constructor.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748867141,748867141,src/wallet/coinselection.cpp
glozow,2021-11-14 15:06:35,My expectation would be to `Assume(group.m_subtract_fee_outputs != m_use_effective)`. Maybe I'm misunderstanding?,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748867273,748867273,src/wallet/coinselection.cpp
glozow,2021-11-14 15:14:14,"I think this is cleaner, and keeps the scope of the result to this `if` block. There's no reason why `r1`'s scope should persist through the end of the lambda.\n```suggestion\n        if (auto r1{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, coin_selection_params)}) {\n            return r1.value();\n        }\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748868349,748868349,src/wallet/spend.cpp
glozow,2021-11-14 15:16:33,(same with the rest of the `AttemptSelection` calls),https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748868619,748868619,src/wallet/spend.cpp
glozow,2021-11-14 15:30:53,"is there any benefit to using a `std::make_optional` here?\n```suggestion\n    return result;\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748870402,748870402,src/wallet/coinselection.cpp
glozow,2021-11-14 15:31:34,"note to self, `std::make_optional` makes sense here to avoid the copy of the temporary `SelectionResult`; it's constructed in place",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748870486,748870486,src/wallet/spend.cpp
glozow,2021-11-14 15:34:24,"```suggestion\n    if (auto bnb_result{SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change)}) {\n```",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748870890,748870890,src/wallet/spend.cpp
glozow,2021-11-14 15:35:30,"Can this be written into a comparison operator for `SelectionResult`? The logic of waste and what makes one selection result better than another is inherent to the `SelectionResult` type; imo it fits better there than within `AttemptSelection`. \n\nIf you have a `<` operator defined, you can sort and/or just return the min element.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r748870994,748870994,src/wallet/spend.cpp
laanwj,2021-11-23 18:09:26,"I think randomizing in a `Get` function is very unexpected. You wouldn't expect it to return a different value every time. I'd prefer to either rename this function to e.g. `RandomizedInputVector()` or, do it at the call site, or do the shuffle somewhere else.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755390185,755390185,src/wallet/coinselection.cpp
laanwj,2021-11-23 18:10:34,Maybe move this under the global `::GetSelectionWaste`? Currently no problem but if you'd ever want to make it static.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755390977,755390977,src/wallet/coinselection.cpp
laanwj,2021-11-23 18:14:24,"Local function, could be static",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755393639,755393639,src/wallet/test/coinselector_tests.cpp
laanwj,2021-11-23 18:21:37,"I don't think this function is ever used. I think I'd prefer to remove it, in general it seems unnecessary to have a `Clear` function instead of replacing the structure with a new, empty one.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755398596,755398596,src/wallet/coinselection.cpp
achow101,2021-11-23 18:51:20,A comment is added when these are later replaced with `EquivalentResuls` and `EqualResults`.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755419084,755419084,src/wallet/test/coinselector_tests.cpp
achow101,2021-11-23 18:54:10,I did it this way because `SelectionResult`s are constructed by the `SelectCoins*` functions which do not know about `m_subtract_fee_outputs` and didn't feel like adding more parameters to those functions just to have `m_use_effective` be set in the constructor.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755420991,755420991,src/wallet/coinselection.cpp
achow101,2021-11-23 22:03:14,Inserted a commit which makes them private.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755536234,755536234,src/wallet/coinselection.h
achow101,2021-11-23 22:03:20,Done,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755536278,755536278,src/wallet/coinselection.h
achow101,2021-11-23 22:03:30,Done here and elsewhere.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755536363,755536363,src/wallet/spend.cpp
achow101,2021-11-23 22:03:41,"No, changed to just `return result`.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755536456,755536456,src/wallet/coinselection.cpp
achow101,2021-11-23 22:03:52,Done,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755536553,755536553,src/wallet/spend.cpp
achow101,2021-11-23 22:05:17,"I didn't want to always be computing waste every time, especially because we may not have access to information such as the cost of change. So the approach I've done for this is to have a function which computes and stores the waste inside of `SelectionResult`, and then `operator<` will use that when doing the comparison.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755537255,755537255,src/wallet/spend.cpp
achow101,2021-11-23 22:05:44,I've added `GetInputSet` to just return `m_selected_inputs` and changed this to be `GetShuffledInputVector`.,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755537550,755537550,src/wallet/coinselection.cpp
achow101,2021-11-23 22:05:51,Done,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755537591,755537591,src/wallet/coinselection.cpp
achow101,2021-11-23 22:05:57,Done,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755537641,755537641,src/wallet/test/coinselector_tests.cpp
achow101,2021-11-23 22:06:22,"I had intended to use it in the tests, and with the changes to make `m_selected_inputs` private, it is now being used by those tests.",https://github.com/bitcoin/bitcoin/pull/22019#discussion_r755537859,755537859,src/wallet/coinselection.cpp
laanwj,2021-11-25 14:14:03,Thanks!,https://github.com/bitcoin/bitcoin/pull/22019#discussion_r756925836,756925836,src/wallet/coinselection.cpp
