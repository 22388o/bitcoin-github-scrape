[
  {
    "sha": "94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
    "node_id": "C_kwDOABII59oAKDk0ZDg1MWQyOGNiOTA5YThmMWY4YWI3OTVmMWQ5ZmM3NGJlYmZjN2Y",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-09T22:23:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-22T17:35:53Z"
      },
      "message": "Fix bnb_search_test to use set equivalence for\n\nFor BnB, we only want to check that sets are equivalent with their\nvalues, whereas in knapsack we care about the outpoints.",
      "tree": {
        "sha": "4c7e6c35d19de4655545bd6741a18afdbc9ecd7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c7e6c35d19de4655545bd6741a18afdbc9ecd7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "224e90d9fdf895d3ee212edcf7dec3eb4d94ce91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/224e90d9fdf895d3ee212edcf7dec3eb4d94ce91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/224e90d9fdf895d3ee212edcf7dec3eb4d94ce91"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 27,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6b0cbd5fd69d1d5c021f86a92b0d1ca982cd45f7",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 8,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
        "patch": "@@ -31,12 +31,14 @@ typedef std::set<CInputCoin> CoinSet;\n static const CoinEligibilityFilter filter_standard(1, 6, 0);\n static const CoinEligibilityFilter filter_confirmed(1, 1, 0);\n static const CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n+static int nextLockTime = 0;\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     set.emplace_back(MakeTransactionRef(tx), nInput);\n }\n \n@@ -45,6 +47,7 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fe\n     CMutableTransaction tx;\n     tx.vout.resize(nInput + 1);\n     tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     CInputCoin coin(MakeTransactionRef(tx), nInput);\n     coin.effective_value = nValue - fee;\n     coin.m_fee = fee;\n@@ -54,7 +57,6 @@ static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fe\n \n static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0, bool spendable = false)\n {\n-    static int nextLockTime = 0;\n     CMutableTransaction tx;\n     tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n     tx.vout.resize(nInput + 1);\n@@ -81,6 +83,23 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     coins.push_back(output);\n }\n \n+static bool equivalent_sets(CoinSet a, CoinSet b)\n+{\n+    std::vector<CAmount> a_amts;\n+    std::vector<CAmount> b_amts;\n+    for (const auto& coin : a) {\n+        a_amts.push_back(coin.txout.nValue);\n+    }\n+    for (const auto& coin : b) {\n+        b_amts.push_back(coin.txout.nValue);\n+    }\n+    std::sort(a_amts.begin(), a_amts.end());\n+    std::sort(b_amts.begin(), b_amts.end());\n+\n+    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n+    return ret.first == a_amts.end() && ret.second == b_amts.end();\n+}\n+\n static bool equal_sets(CoinSet a, CoinSet b)\n {\n     std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n@@ -158,15 +177,15 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Select 1 Cent\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -175,7 +194,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -189,7 +208,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     actual_selection.clear();\n     selection.clear();\n \n@@ -204,7 +223,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     actual_selection.clear();\n     selection.clear();\n@@ -217,7 +236,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equal_sets(selection, actual_selection));\n+    // BOOST_CHECK(equivalent_sets(selection, actual_selection));\n \n     // Select 0.25 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n@@ -247,7 +266,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equal_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n \n     ////////////////////\n     // Behavior tests //"
      }
    ]
  },
  {
    "sha": "1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
    "node_id": "C_kwDOABII59oAKDFiMWFkNDI1ZDZiMmNhOTUxZTBhN2U2MDk2ODE5ZmM1ZTQ2OGFmNGI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:24:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:38Z"
      },
      "message": "Introduce SelectionResult struct\n\nIntroduces a SelectionResult struct which contains the set of selected\ninputs and the total transaction fee for the transaction. This will be\nused by the various SelectCoins* functions. Additionally helpers are\nprovided to compute the total input value and result comparisons.",
      "tree": {
        "sha": "32a38a00e8a298a5a4c441c61b1c5fd923854390",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32a38a00e8a298a5a4c441c61b1c5fd923854390"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94d851d28cb909a8f1f8ab795f1d9fc74bebfc7f"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 85,
      "deletions": 0
    },
    "files": [
      {
        "sha": "963f8bfb962e2ec0c814ba65ac74549a87d02009",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
        "patch": "@@ -395,3 +395,53 @@ CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cos\n \n     return waste;\n }\n+\n+void SelectionResult::ComputeAndSetWaste(CAmount change_cost)\n+{\n+    m_waste = GetSelectionWaste(m_selected_inputs, change_cost, m_target, m_use_effective);\n+}\n+\n+CAmount SelectionResult::GetWaste() const\n+{\n+    Assume(m_waste != std::nullopt);\n+    return *m_waste;\n+}\n+\n+CAmount SelectionResult::GetSelectedValue() const\n+{\n+    CAmount ret = 0;\n+    for (const auto& coin : m_selected_inputs) {\n+        ret += coin.txout.nValue;\n+    }\n+    return ret;\n+}\n+\n+void SelectionResult::Clear()\n+{\n+    m_selected_inputs.clear();\n+}\n+\n+void SelectionResult::AddInput(const OutputGroup& group)\n+{\n+    util::insert(m_selected_inputs, group.m_outputs);\n+}\n+\n+const std::set<CInputCoin>& SelectionResult::GetInputSet() const\n+{\n+    return m_selected_inputs;\n+}\n+\n+std::vector<CInputCoin> SelectionResult::GetShuffledInputVector() const\n+{\n+    std::vector<CInputCoin> coins(m_selected_inputs.begin(), m_selected_inputs.end());\n+    Shuffle(coins.begin(), coins.end(), FastRandomContext());\n+    return coins;\n+}\n+\n+bool SelectionResult::operator<(SelectionResult other) const\n+{\n+    Assume(m_waste != std::nullopt);\n+    Assume(other.m_waste != std::nullopt);\n+    // As this operator is only used in std::min_element, we want the result that has more inputs when waste are equal.\n+    return *m_waste < *other.m_waste || (*m_waste == *other.m_waste && m_selected_inputs.size() > other.m_selected_inputs.size());\n+}"
      },
      {
        "sha": "75e9dee5bed918d327edb4c62e2144465575733e",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
        "patch": "@@ -197,6 +197,41 @@ struct OutputGroup\n  */\n [[nodiscard]] CAmount GetSelectionWaste(const std::set<CInputCoin>& inputs, CAmount change_cost, CAmount target, bool use_effective_value = true);\n \n+struct SelectionResult\n+{\n+    /** Set of inputs selected by the algorithm to use in the transaction */\n+    std::set<CInputCoin> m_selected_inputs;\n+    /** The target the algorithm selected for. Note that this may not be equal to the recipient amount as it can include non-input fees */\n+    const CAmount m_target;\n+    /** Whether the input values for calculations should be the effective value (true) or normal value (false) */\n+    bool m_use_effective{false};\n+    /** The computed waste */\n+    std::optional<CAmount> m_waste;\n+\n+    explicit SelectionResult(const CAmount target)\n+        : m_target(target) {}\n+\n+    SelectionResult() = delete;\n+\n+    /** Get the sum of the input values */\n+    CAmount GetSelectedValue() const;\n+\n+    void Clear();\n+\n+    void AddInput(const OutputGroup& group);\n+\n+    /** Calculates and stores the waste for this selection via GetSelectionWaste */\n+    void ComputeAndSetWaste(CAmount change_cost);\n+    CAmount GetWaste() const;\n+\n+    /** Get m_selected_inputs */\n+    const std::set<CInputCoin>& GetInputSet() const;\n+    /** Get the vector of CInputCoins that will be used to fill in a CTransaction's vin */\n+    std::vector<CInputCoin> GetShuffledInputVector() const;\n+\n+    bool operator<(SelectionResult other) const;\n+};\n+\n bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n \n /** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible"
      }
    ]
  },
  {
    "sha": "679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
    "node_id": "C_kwDOABII59oAKDY3OWE1YjY4YWZmYTZlNWQ2ZTdlYWE2YzViYThmNmY3MWRkZWY2Zjk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:48:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "scripted-diff: Use SelectionResult in coin selector tests\n\nReplace the CoinSet actual_selection with a SelectionResult\nexpected_result. We don't use the SelectionResult functions yet, but\nwill soon.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/CoinSet actual_selection/SelectionResult expected_result(CAmount(0))/' src/wallet/test/coinselector_tests.cpp\nsed -i 's/actual_selection/expected_result.m_selected_inputs/' src/wallet/test/coinselector_tests.cpp\nsed -i 's/expected_result.m_selected_inputs.clear/expected_result.Clear/' src/wallet/test/coinselector_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "1e3caece223797dffa9d4b7ebe0f1dd9a7742c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e3caece223797dffa9d4b7ebe0f1dd9a7742c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b1ad425d6b2ca951e0a7e6096819fc5e468af4b"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "adc2266477d35df7fbafd19a43a67c0afd996563",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
        "patch": "@@ -157,7 +157,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n     CoinSet selection;\n-    CoinSet actual_selection;\n+    SelectionResult expected_result(CAmount(0));\n     CAmount value_ret = 0;\n \n     /////////////////////////\n@@ -175,72 +175,72 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, utxo_pool);\n \n     // Select 1 Cent\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Select 2 Cent\n-    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Select 5 Cent\n-    add_coin(4 * CENT, 4, actual_selection);\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Select 11 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Cost of change is greater than the difference between target value and utxo sum\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n-    actual_selection.clear();\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    expected_result.Clear();\n     selection.clear();\n \n     // Cost of change is less than the difference between target value and utxo sum\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Select 10 Cent\n     add_coin(5 * CENT, 5, utxo_pool);\n-    add_coin(5 * CENT, 5, actual_selection);\n-    add_coin(4 * CENT, 4, actual_selection);\n-    add_coin(1 * CENT, 1, actual_selection);\n+    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n+    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Negative effective value\n     // Select 10 Cent but have 1 Cent not be possible because too small\n-    add_coin(5 * CENT, 5, actual_selection);\n-    add_coin(3 * CENT, 3, actual_selection);\n-    add_coin(2 * CENT, 2, actual_selection);\n+    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n+    add_coin(3 * CENT, 3, expected_result.m_selected_inputs);\n+    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    // BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n \n     // Select 0.25 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n-    actual_selection.clear();\n+    expected_result.Clear();\n     selection.clear();\n \n     // Iteration exhaustion test\n@@ -251,11 +251,11 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(7 * CENT, 7, actual_selection);\n-    add_coin(2 * CENT, 7, actual_selection);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(2 * CENT, 7, expected_result.m_selected_inputs);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n@@ -266,7 +266,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, actual_selection));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n \n     ////////////////////\n     // Behavior tests //"
      }
    ]
  },
  {
    "sha": "bbcd22ef66d20adde1517d9116f00093e904fb23",
    "node_id": "C_kwDOABII59oAKGJiY2QyMmVmNjZkMjBhZGRlMTUxN2Q5MTE2ZjAwMDkzZTkwNGZiMjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T20:46:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Make member variables of SelectionResult private",
      "tree": {
        "sha": "636e864b36e4fae7ebfb1e12f2e0dd585d304233",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/636e864b36e4fae7ebfb1e12f2e0dd585d304233"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbcd22ef66d20adde1517d9116f00093e904fb23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcd22ef66d20adde1517d9116f00093e904fb23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcd22ef66d20adde1517d9116f00093e904fb23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcd22ef66d20adde1517d9116f00093e904fb23/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/679a5b68affa6e5d6e7eaa6c5ba8f6f71ddef6f9"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 37,
      "deletions": 23
    },
    "files": [
      {
        "sha": "8c6df363d226a0e88ba151995d84382d80b3143b",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbcd22ef66d20adde1517d9116f00093e904fb23/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbcd22ef66d20adde1517d9116f00093e904fb23/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=bbcd22ef66d20adde1517d9116f00093e904fb23",
        "patch": "@@ -199,6 +199,7 @@ struct OutputGroup\n \n struct SelectionResult\n {\n+private:\n     /** Set of inputs selected by the algorithm to use in the transaction */\n     std::set<CInputCoin> m_selected_inputs;\n     /** The target the algorithm selected for. Note that this may not be equal to the recipient amount as it can include non-input fees */\n@@ -208,6 +209,7 @@ struct SelectionResult\n     /** The computed waste */\n     std::optional<CAmount> m_waste;\n \n+public:\n     explicit SelectionResult(const CAmount target)\n         : m_target(target) {}\n "
      },
      {
        "sha": "d0d7a927b0b19901beaa6ef9a6962baf19f75bb0",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 23,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbcd22ef66d20adde1517d9116f00093e904fb23/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbcd22ef66d20adde1517d9116f00093e904fb23/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=bbcd22ef66d20adde1517d9116f00093e904fb23",
        "patch": "@@ -42,6 +42,18 @@ static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>&\n     set.emplace_back(MakeTransactionRef(tx), nInput);\n }\n \n+static void add_coin(const CAmount& nValue, int nInput, SelectionResult& result)\n+{\n+    CMutableTransaction tx;\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    tx.nLockTime = nextLockTime++;        // so all transactions get different hashes\n+    CInputCoin coin(MakeTransactionRef(tx), nInput);\n+    OutputGroup group;\n+    group.Insert(coin, 1, false, 0, 0, true);\n+    result.AddInput(group);\n+}\n+\n static void add_coin(const CAmount& nValue, int nInput, CoinSet& set, CAmount fee = 0, CAmount long_term_fee = 0)\n {\n     CMutableTransaction tx;\n@@ -175,26 +187,26 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(4 * CENT, 4, utxo_pool);\n \n     // Select 1 Cent\n-    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n     expected_result.Clear();\n     selection.clear();\n \n     // Select 2 Cent\n-    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n+    add_coin(2 * CENT, 2, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n     expected_result.Clear();\n     selection.clear();\n \n     // Select 5 Cent\n-    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n-    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n+    add_coin(4 * CENT, 4, expected_result);\n+    add_coin(1 * CENT, 1, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n     expected_result.Clear();\n     selection.clear();\n@@ -205,10 +217,10 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     selection.clear();\n \n     // Cost of change is greater than the difference between target value and utxo sum\n-    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n+    add_coin(1 * CENT, 1, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n     expected_result.Clear();\n     selection.clear();\n \n@@ -219,24 +231,24 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 10 Cent\n     add_coin(5 * CENT, 5, utxo_pool);\n-    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n-    add_coin(4 * CENT, 4, expected_result.m_selected_inputs);\n-    add_coin(1 * CENT, 1, expected_result.m_selected_inputs);\n+    add_coin(5 * CENT, 5, expected_result);\n+    add_coin(4 * CENT, 4, expected_result);\n+    add_coin(1 * CENT, 1, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     expected_result.Clear();\n     selection.clear();\n \n     // Negative effective value\n     // Select 10 Cent but have 1 Cent not be possible because too small\n-    add_coin(5 * CENT, 5, expected_result.m_selected_inputs);\n-    add_coin(3 * CENT, 3, expected_result.m_selected_inputs);\n-    add_coin(2 * CENT, 2, expected_result.m_selected_inputs);\n+    add_coin(5 * CENT, 5, expected_result);\n+    add_coin(3 * CENT, 3, expected_result);\n+    add_coin(2 * CENT, 2, expected_result);\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    // BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n \n     // Select 0.25 Cent, not possible\n     BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n@@ -251,11 +263,11 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n-    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n-    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n-    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n-    add_coin(7 * CENT, 7, expected_result.m_selected_inputs);\n-    add_coin(2 * CENT, 7, expected_result.m_selected_inputs);\n+    add_coin(7 * CENT, 7, expected_result);\n+    add_coin(7 * CENT, 7, expected_result);\n+    add_coin(7 * CENT, 7, expected_result);\n+    add_coin(7 * CENT, 7, expected_result);\n+    add_coin(2 * CENT, 7, expected_result);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n     add_coin(7 * CENT, 7, utxo_pool);\n@@ -266,7 +278,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.m_selected_inputs));\n+    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n \n     ////////////////////\n     // Behavior tests //"
      }
    ]
  },
  {
    "sha": "557f060e2e0d6de30d2f3f06546ed088f2c00234",
    "node_id": "C_kwDOABII59oAKDU1N2YwNjBlMmUwZDZkZTMwZDJmM2YwNjU0NmVkMDg4ZjJjMDAyMzQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T19:31:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Return SelectionResult from SelectCoinsBnB\n\nRemoves coins_out and value_ret has SelectCoinsBnB return a\nstd::optional<SelectionResult>",
      "tree": {
        "sha": "9cace2c19c3958cffc8f64e89adf1b0fe8e88632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cace2c19c3958cffc8f64e89adf1b0fe8e88632"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/557f060e2e0d6de30d2f3f06546ed088f2c00234",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f060e2e0d6de30d2f3f06546ed088f2c00234",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/557f060e2e0d6de30d2f3f06546ed088f2c00234",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f060e2e0d6de30d2f3f06546ed088f2c00234/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bbcd22ef66d20adde1517d9116f00093e904fb23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbcd22ef66d20adde1517d9116f00093e904fb23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbcd22ef66d20adde1517d9116f00093e904fb23"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 60,
      "deletions": 70
    },
    "files": [
      {
        "sha": "0ac8fc6b34b9e30b682a8fb84802b01e890293a7",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "patch": "@@ -92,17 +92,14 @@ static void BnBExhaustion(benchmark::Bench& bench)\n {\n     // Setup\n     std::vector<OutputGroup> utxo_pool;\n-    CoinSet selection;\n-    CAmount value_ret = 0;\n \n     bench.run([&] {\n         // Benchmark\n         CAmount target = make_hard_case(17, utxo_pool);\n-        SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret); // Should exhaust\n+        SelectCoinsBnB(utxo_pool, target, 0); // Should exhaust\n \n         // Cleanup\n         utxo_pool.clear();\n-        selection.clear();\n     });\n }\n "
      },
      {
        "sha": "b577f14718030f16484316a78d769bb0e95f6c14",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "patch": "@@ -56,17 +56,14 @@ struct {\n  *        bound of the range.\n  * @param const CAmount& cost_of_change This is the cost of creating and spending a change output.\n  *        This plus selection_target is the upper bound of the range.\n- * @param std::set<CInputCoin>& out_set -> This is an output parameter for the set of CInputCoins\n- *        that have been selected.\n- * @param CAmount& value_ret -> This is an output parameter for the total value of the CInputCoins\n- *        that were selected.\n+ * @returns The result of this coin selection algorithm, or std::nullopt\n  */\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret)\n+std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change)\n {\n-    out_set.clear();\n+    SelectionResult result(selection_target);\n     CAmount curr_value = 0;\n \n     std::vector<bool> curr_selection; // select the utxo at this index\n@@ -80,7 +77,7 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n         curr_available_value += utxo.GetSelectionAmount();\n     }\n     if (curr_available_value < selection_target) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Sort the utxo_pool\n@@ -156,19 +153,17 @@ bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selectio\n \n     // Check for solution\n     if (best_selection.empty()) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Set output set\n-    value_ret = 0;\n     for (size_t i = 0; i < best_selection.size(); ++i) {\n         if (best_selection.at(i)) {\n-            util::insert(out_set, utxo_pool.at(i).m_outputs);\n-            value_ret += utxo_pool.at(i).m_value;\n+            result.AddInput(utxo_pool.at(i));\n         }\n     }\n \n-    return true;\n+    return result;\n }\n \n std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n@@ -424,6 +419,7 @@ void SelectionResult::Clear()\n void SelectionResult::AddInput(const OutputGroup& group)\n {\n     util::insert(m_selected_inputs, group.m_outputs);\n+    m_use_effective = !group.m_subtract_fee_outputs;\n }\n \n const std::set<CInputCoin>& SelectionResult::GetInputSet() const"
      },
      {
        "sha": "510c676a5f33557621ce468bbae9d832228e6121",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "patch": "@@ -234,7 +234,7 @@ struct SelectionResult\n     bool operator<(SelectionResult other) const;\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret);\n+std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& selection_target, const CAmount& cost_of_change);\n \n /** Select coins by Single Random Draw. OutputGroups are selected randomly from the eligible\n  * outputs until the target is satisfied"
      },
      {
        "sha": "022420c57d8605aa4efd55db3d78e323bd20ccde",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "patch": "@@ -385,11 +385,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     // Note that unlike KnapsackSolver, we do not include the fee for creating a change output as BnB will not create a change output.\n     std::vector<OutputGroup> positive_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n-    std::set<CInputCoin> bnb_coins;\n-    CAmount bnb_value;\n-    if (SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change, bnb_coins, bnb_value)) {\n-        const auto waste = GetSelectionWaste(bnb_coins, /* cost of change */ CAmount(0), nTargetValue, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(bnb_coins), bnb_value));\n+    if (auto bnb_result{SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change)}) {\n+        bnb_result->ComputeAndSetWaste(CAmount(0));\n+        results.emplace_back(std::make_tuple(bnb_result->GetWaste(), bnb_result->GetInputSet(), bnb_result->GetSelectedValue()));\n     }\n \n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here."
      },
      {
        "sha": "8bb2105242c9f47609cf75cdc928f9b59775cf34",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 48,
        "changes": 95,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/557f060e2e0d6de30d2f3f06546ed088f2c00234/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "patch": "@@ -14,6 +14,7 @@\n #include <wallet/test/wallet_test_fixture.h>\n #include <wallet/wallet.h>\n \n+#include <algorithm>\n #include <boost/test/unit_test.hpp>\n #include <random>\n \n@@ -95,20 +96,22 @@ static void add_coin(std::vector<COutput>& coins, CWallet& wallet, const CAmount\n     coins.push_back(output);\n }\n \n-static bool equivalent_sets(CoinSet a, CoinSet b)\n+/** Check if SelectionResult a is equivalent to SelectionResult b.\n+ * Equivalent means same input values, but maybe different inputs (i.e. same value, different prevout) */\n+static bool EquivalentResult(const SelectionResult& a, const SelectionResult& b)\n {\n     std::vector<CAmount> a_amts;\n     std::vector<CAmount> b_amts;\n-    for (const auto& coin : a) {\n+    for (const auto& coin : a.GetInputSet()) {\n         a_amts.push_back(coin.txout.nValue);\n     }\n-    for (const auto& coin : b) {\n+    for (const auto& coin : b.GetInputSet()) {\n         b_amts.push_back(coin.txout.nValue);\n     }\n     std::sort(a_amts.begin(), a_amts.end());\n     std::sort(b_amts.begin(), b_amts.end());\n \n-    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n+    std::pair<std::vector<CAmount>::iterator, std::vector<CAmount>::iterator> ret = std::mismatch(a_amts.begin(), a_amts.end(), b_amts.begin());\n     return ret.first == a_amts.end() && ret.second == b_amts.end();\n }\n \n@@ -168,17 +171,14 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n {\n     // Setup\n     std::vector<CInputCoin> utxo_pool;\n-    CoinSet selection;\n     SelectionResult expected_result(CAmount(0));\n-    CAmount value_ret = 0;\n \n     /////////////////////////\n     // Known Outcome tests //\n     /////////////////////////\n \n     // Empty utxo pool\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    selection.clear();\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT));\n \n     // Add utxos\n     add_coin(1 * CENT, 1, utxo_pool);\n@@ -188,78 +188,77 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 1 Cent\n     add_coin(1 * CENT, 1, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n-    BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n+    const auto result1 = SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result1);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result1));\n+    BOOST_CHECK_EQUAL(result1->GetSelectedValue(), 1 * CENT);\n     expected_result.Clear();\n-    selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n-    BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n+    const auto result2 = SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result2);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result2));\n+    BOOST_CHECK_EQUAL(result2->GetSelectedValue(), 2 * CENT);\n     expected_result.Clear();\n-    selection.clear();\n \n     // Select 5 Cent\n     add_coin(4 * CENT, 4, expected_result);\n     add_coin(1 * CENT, 1, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n-    BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n+    const auto result3 = SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result3);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result3));\n+    BOOST_CHECK_EQUAL(result3->GetSelectedValue(), 5 * CENT);\n     expected_result.Clear();\n-    selection.clear();\n \n     // Select 11 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT));\n     expected_result.Clear();\n-    selection.clear();\n \n     // Cost of change is greater than the difference between target value and utxo sum\n     add_coin(1 * CENT, 1, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n+    const auto result4 = SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result4);\n+    BOOST_CHECK_EQUAL(result4->GetSelectedValue(), 1 * CENT);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result4));\n     expected_result.Clear();\n-    selection.clear();\n \n     // Cost of change is less than the difference between target value and utxo sum\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.9 * CENT, 0));\n     expected_result.Clear();\n-    selection.clear();\n \n     // Select 10 Cent\n     add_coin(5 * CENT, 5, utxo_pool);\n     add_coin(5 * CENT, 5, expected_result);\n     add_coin(4 * CENT, 4, expected_result);\n     add_coin(1 * CENT, 1, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret));\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n-    BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n+    const auto result5 = SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT);\n+    BOOST_CHECK(result5);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result5));\n+    BOOST_CHECK_EQUAL(result5->GetSelectedValue(), 10 * CENT);\n     expected_result.Clear();\n-    selection.clear();\n \n     // Negative effective value\n     // Select 10 Cent but have 1 Cent not be possible because too small\n     add_coin(5 * CENT, 5, expected_result);\n     add_coin(3 * CENT, 3, expected_result);\n     add_coin(2 * CENT, 2, expected_result);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n+    const auto result6 = SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000);\n+    BOOST_CHECK(result6);\n+    BOOST_CHECK_EQUAL(result6->GetSelectedValue(), 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n-    // BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n+    // BOOST_CHECK(EquivalentResult(expected_result, *result));\n \n     // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT));\n     expected_result.Clear();\n-    selection.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret)); // Should exhaust\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0)); // Should exhaust\n     target = make_hard_case(14, utxo_pool);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret)); // Should not exhaust\n+    const auto result7 = SelectCoinsBnB(GroupCoins(utxo_pool), target, 0); // Should not exhaust\n+    BOOST_CHECK(result7);\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n@@ -276,9 +275,10 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 50000; ++i) {\n         add_coin(5 * CENT, 7, utxo_pool);\n     }\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret));\n-    BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n-    BOOST_CHECK(equivalent_sets(selection, expected_result.GetInputSet()));\n+    const auto result8 = SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000);\n+    BOOST_CHECK(result8);\n+    BOOST_CHECK_EQUAL(result8->GetSelectedValue(), 30 * CENT);\n+    BOOST_CHECK(EquivalentResult(expected_result, *result8));\n \n     ////////////////////\n     // Behavior tests //\n@@ -290,7 +290,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     // Run 100 times, to make sure it is never finding a solution\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT, selection, value_ret));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT));\n     }\n \n     // Make sure that effective value is working in AttemptSelection when BnB is used\n@@ -306,20 +306,19 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n-        CoinSet setCoinsRet;\n-        CAmount nValueRet;\n \n         add_coin(coins, *wallet, 1);\n         coins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change));\n \n         // Test fees subtracted from output:\n         coins.clear();\n         add_coin(coins, *wallet, 1 * CENT);\n         coins.at(0).nInputBytes = 40;\n         coin_selection_params_bnb.m_subtract_fee_outputs = true;\n-        BOOST_CHECK(SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        const auto result9 = SelectCoinsBnB(GroupCoins(coins), 1 * CENT, coin_selection_params_bnb.m_cost_of_change);\n+        BOOST_CHECK(result9);\n+        BOOST_CHECK_EQUAL(result9->GetSelectedValue(), 1 * CENT);\n     }\n \n     {"
      }
    ]
  },
  {
    "sha": "22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
    "node_id": "C_kwDOABII59oAKDIyZTNiNWI2M2M0NmQyZTJkYzYwMWE4Y2EwNjE4MjNlMjFhYjcxNTE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T20:36:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Return SelectionResult from KnapsackSolver\n\nReturns a std::optional<SelectionResult> from KnapsackSolver instead of\nusing out parameters for the inputs set and selected value.",
      "tree": {
        "sha": "9bf42290f70b248b201b8cc503d8b6df158e5b65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bf42290f70b248b201b8cc503d8b6df158e5b65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/557f060e2e0d6de30d2f3f06546ed088f2c00234",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/557f060e2e0d6de30d2f3f06546ed088f2c00234"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 134,
      "deletions": 114
    },
    "files": [
      {
        "sha": "6dedf6b53cf9c9ec95e2c0d7b3ca0f4d2b924c7d",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 18,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "patch": "@@ -236,10 +236,9 @@ static void ApproximateBestSubset(const std::vector<OutputGroup>& groups, const\n     }\n }\n \n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet)\n+std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue)\n {\n-    setCoinsRet.clear();\n-    nValueRet = 0;\n+    SelectionResult result(nTargetValue);\n \n     // List of values less than target\n     std::optional<OutputGroup> lowest_larger;\n@@ -250,9 +249,8 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n     for (const OutputGroup& group : groups) {\n         if (group.GetSelectionAmount() == nTargetValue) {\n-            util::insert(setCoinsRet, group.m_outputs);\n-            nValueRet += group.m_value;\n-            return true;\n+            result.AddInput(group);\n+            return result;\n         } else if (group.GetSelectionAmount() < nTargetValue + MIN_CHANGE) {\n             applicable_groups.push_back(group);\n             nTotalLower += group.GetSelectionAmount();\n@@ -263,17 +261,15 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n \n     if (nTotalLower == nTargetValue) {\n         for (const auto& group : applicable_groups) {\n-            util::insert(setCoinsRet, group.m_outputs);\n-            nValueRet += group.m_value;\n+            result.AddInput(group);\n         }\n-        return true;\n+        return result;\n     }\n \n     if (nTotalLower < nTargetValue) {\n-        if (!lowest_larger) return false;\n-        util::insert(setCoinsRet, lowest_larger->m_outputs);\n-        nValueRet += lowest_larger->m_value;\n-        return true;\n+        if (!lowest_larger) return std::nullopt;\n+        result.AddInput(*lowest_larger);\n+        return result;\n     }\n \n     // Solve subset sum by stochastic approximation\n@@ -290,13 +286,11 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (lowest_larger &&\n         ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || lowest_larger->GetSelectionAmount() <= nBest)) {\n-        util::insert(setCoinsRet, lowest_larger->m_outputs);\n-        nValueRet += lowest_larger->m_value;\n+        result.AddInput(*lowest_larger);\n     } else {\n         for (unsigned int i = 0; i < applicable_groups.size(); i++) {\n             if (vfBest[i]) {\n-                util::insert(setCoinsRet, applicable_groups[i].m_outputs);\n-                nValueRet += applicable_groups[i].m_value;\n+                result.AddInput(applicable_groups[i]);\n             }\n         }\n \n@@ -311,7 +305,7 @@ bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& group\n         }\n     }\n \n-    return true;\n+    return result;\n }\n \n /******************************************************************************"
      },
      {
        "sha": "609a5e7b897046ebdb60c2b57893db5e68712c23",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "patch": "@@ -246,6 +246,6 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n \n // Original coin selection algorithm as a fallback\n-bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);\n+std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue);\n \n #endif // BITCOIN_WALLET_COINSELECTION_H"
      },
      {
        "sha": "e953c83c10db3ffbb900df4c5aea45bc09f92ceb",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "patch": "@@ -394,11 +394,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     std::vector<OutputGroup> all_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, false /* positive_only */);\n     // While nTargetValue includes the transaction fees for non-input things, it does not include the fee for creating a change output.\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n-    std::set<CInputCoin> knapsack_coins;\n-    CAmount knapsack_value;\n-    if (KnapsackSolver(nTargetValue + coin_selection_params.m_change_fee, all_groups, knapsack_coins, knapsack_value)) {\n-        const auto waste = GetSelectionWaste(knapsack_coins, coin_selection_params.m_cost_of_change, nTargetValue + coin_selection_params.m_change_fee, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(knapsack_coins), knapsack_value));\n+    if (auto knapsack_result{KnapsackSolver(all_groups, nTargetValue + coin_selection_params.m_change_fee)}) {\n+        knapsack_result->ComputeAndSetWaste(coin_selection_params.m_cost_of_change);\n+        results.emplace_back(std::make_tuple(knapsack_result->GetWaste(), knapsack_result->GetInputSet(), knapsack_result->GetSelectedValue()));\n     }\n \n     // We include the minimum final change for SRD as we do want to avoid making really small change."
      },
      {
        "sha": "5cfc3dd001e85c922496e4fa6c9643b0a1a30c71",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 90,
        "changes": 208,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22e3b5b63c46d2e2dc601a8ca061823e21ab7151/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "patch": "@@ -115,10 +115,11 @@ static bool EquivalentResult(const SelectionResult& a, const SelectionResult& b)\n     return ret.first == a_amts.end() && ret.second == b_amts.end();\n }\n \n-static bool equal_sets(CoinSet a, CoinSet b)\n+/** Check if this selection is equal to another one. Equal means same inputs (i.e same value and prevout) */\n+static bool EqualResult(const SelectionResult& a, const SelectionResult& b)\n {\n-    std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n-    return ret.first == a.end() && ret.second == b.end();\n+    std::pair<std::set<CInputCoin>::iterator, std::set<CInputCoin>::iterator> ret = std::mismatch(a.GetInputSet().begin(), a.GetInputSet().end(), b.GetInputSet().begin());\n+    return ret.first == a.GetInputSet().end() && ret.second == b.GetInputSet().end();\n }\n \n static CAmount make_hard_case(int utxos, std::vector<CInputCoin>& utxo_pool)\n@@ -351,8 +352,6 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     wallet->SetupDescriptorScriptPubKeyMans();\n \n-    CoinSet setCoinsRet, setCoinsRet2;\n-    CAmount nValueRet;\n     std::vector<COutput> coins;\n \n     // test multiple times to allow for differences in the shuffle order\n@@ -361,25 +360,27 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         coins.clear();\n \n         // with an empty wallet we can't even pay one cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1 * CENT));\n \n         add_coin(coins, *wallet, 1*CENT, 4);        // add a new 1 cent coin\n \n         // with a new 1 cent coin, we still can't find a mature 1 cent\n-        BOOST_CHECK(!KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1 * CENT));\n \n         // but we can find a new 1 cent\n-        BOOST_CHECK(KnapsackSolver(1 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        const auto result1 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * CENT);\n+        BOOST_CHECK(result1);\n+        BOOST_CHECK_EQUAL(result1->GetSelectedValue(), 1 * CENT);\n \n         add_coin(coins, *wallet, 2*CENT);           // add a mature 2 cent coin\n \n         // we can't make 3 cents of mature coins\n-        BOOST_CHECK(!KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 3 * CENT));\n \n         // we can make 3 cents of new coins\n-        BOOST_CHECK(KnapsackSolver(3 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n+        const auto result2 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 3 * CENT);\n+        BOOST_CHECK(result2);\n+        BOOST_CHECK_EQUAL(result2->GetSelectedValue(), 3 * CENT);\n \n         add_coin(coins, *wallet, 5*CENT);           // add a mature 5 cent coin,\n         add_coin(coins, *wallet, 10*CENT, 3, true); // a new 10 cent coin sent from one of our own addresses\n@@ -388,35 +389,41 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         // now we have new: 1+10=11 (of which 10 was self-sent), and mature: 2+5+20=27.  total = 38\n \n         // we can't make 38 cents only if we disallow new coins:\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 38 * CENT));\n         // we can't even make 37 cents if we don't allow new coins even if they're from us\n-        BOOST_CHECK(!KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard_extra), setCoinsRet, nValueRet));\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard_extra), 38 * CENT));\n         // but we can make 37 cents if we accept new coins from ourself\n-        BOOST_CHECK(KnapsackSolver(37 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 37 * CENT);\n+        const auto result3 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 37 * CENT);\n+        BOOST_CHECK(result3);\n+        BOOST_CHECK_EQUAL(result3->GetSelectedValue(), 37 * CENT);\n         // and we can make 38 cents if we accept all new coins\n-        BOOST_CHECK(KnapsackSolver(38 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 38 * CENT);\n+        const auto result4 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 38 * CENT);\n+        BOOST_CHECK(result4);\n+        BOOST_CHECK_EQUAL(result4->GetSelectedValue(), 38 * CENT);\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n-        BOOST_CHECK(KnapsackSolver(34 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n+        const auto result5 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 34 * CENT);\n+        BOOST_CHECK(result5);\n+        BOOST_CHECK_EQUAL(result5->GetSelectedValue(), 35 * CENT);       // but 35 cents is closest\n+        BOOST_CHECK_EQUAL(result5->GetInputSet().size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n-        BOOST_CHECK(KnapsackSolver(7 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result6 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 7 * CENT);\n+        BOOST_CHECK(result6);\n+        BOOST_CHECK_EQUAL(result6->GetSelectedValue(), 7 * CENT);\n+        BOOST_CHECK_EQUAL(result6->GetInputSet().size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n-        BOOST_CHECK(KnapsackSolver(8 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK(nValueRet == 8 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result7 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 8 * CENT);\n+        BOOST_CHECK(result7);\n+        BOOST_CHECK(result7->GetSelectedValue() == 8 * CENT);\n+        BOOST_CHECK_EQUAL(result7->GetInputSet().size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n-        BOOST_CHECK(KnapsackSolver(9 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result8 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 9 * CENT);\n+        BOOST_CHECK(result8);\n+        BOOST_CHECK_EQUAL(result8->GetSelectedValue(), 10 * CENT);\n+        BOOST_CHECK_EQUAL(result8->GetInputSet().size(), 1U);\n \n         // now clear out the wallet and start again to test choosing between subsets of smaller coins and the next biggest coin\n         coins.clear();\n@@ -428,45 +435,52 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, 30*CENT); // now we have 6+7+8+20+30 = 71 cents total\n \n         // check that we have 71 and not 72\n-        BOOST_CHECK(KnapsackSolver(71 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK(!KnapsackSolver(72 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+        const auto result9 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 71 * CENT);\n+        BOOST_CHECK(result9);\n+        BOOST_CHECK(!KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 72 * CENT));\n \n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result10 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result10);\n+        BOOST_CHECK_EQUAL(result10->GetSelectedValue(), 20 * CENT); // we should get 20 in one coin\n+        BOOST_CHECK_EQUAL(result10->GetInputSet().size(), 1U);\n \n         add_coin(coins, *wallet,  5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result11 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result11);\n+        BOOST_CHECK_EQUAL(result11->GetSelectedValue(), 18 * CENT); // we should get 18 in 3 coins\n+        BOOST_CHECK_EQUAL(result11->GetInputSet().size(), 3U);\n \n         add_coin(coins, *wallet,  18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n-        BOOST_CHECK(KnapsackSolver(16 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n+        const auto result12 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 16 * CENT);\n+        BOOST_CHECK(result12);\n+        BOOST_CHECK_EQUAL(result12->GetSelectedValue(), 18 * CENT);  // we should get 18 in 1 coin\n+        BOOST_CHECK_EQUAL(result12->GetInputSet().size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n-        BOOST_CHECK(KnapsackSolver(11 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result13 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 11 * CENT);\n+        BOOST_CHECK(result13);\n+        BOOST_CHECK_EQUAL(result13->GetSelectedValue(), 11 * CENT);\n+        BOOST_CHECK_EQUAL(result13->GetInputSet().size(), 2U);\n \n         // check that the smallest bigger coin is used\n         add_coin(coins, *wallet,  1*COIN);\n         add_coin(coins, *wallet,  2*COIN);\n         add_coin(coins, *wallet,  3*COIN);\n         add_coin(coins, *wallet,  4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n-        BOOST_CHECK(KnapsackSolver(95 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result14 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 95 * CENT);\n+        BOOST_CHECK(result14);\n+        BOOST_CHECK_EQUAL(result14->GetSelectedValue(), 1 * COIN);  // we should get 1 BTC in 1 coin\n+        BOOST_CHECK_EQUAL(result14->GetInputSet().size(), 1U);\n \n-        BOOST_CHECK(KnapsackSolver(195 * CENT, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result15 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 195 * CENT);\n+        BOOST_CHECK(result15);\n+        BOOST_CHECK_EQUAL(result15->GetSelectedValue(), 2 * COIN);  // we should get 2 BTC in 1 coin\n+        BOOST_CHECK_EQUAL(result15->GetInputSet().size(), 1U);\n \n         // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n \n@@ -479,33 +493,37 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n         // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n+        const auto result16 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE);\n+        BOOST_CHECK(result16);\n+        BOOST_CHECK_EQUAL(result16->GetSelectedValue(), MIN_CHANGE);\n \n         // but if we add a bigger coin, small change is avoided\n         add_coin(coins, *wallet, 1111*MIN_CHANGE);\n \n         // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n+        const auto result17 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result17);\n+        BOOST_CHECK_EQUAL(result17->GetSelectedValue(), 1 * MIN_CHANGE); // we should get the exact amount\n \n         // if we add more small coins:\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n \n         // and try again to make 1.0 * MIN_CHANGE\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n+        const auto result18 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result18);\n+        BOOST_CHECK_EQUAL(result18->GetSelectedValue(), 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see https://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n         coins.clear();\n         for (int j = 0; j < 20; j++)\n             add_coin(coins, *wallet, 50000 * COIN);\n \n-        BOOST_CHECK(KnapsackSolver(500000 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n+        const auto result19 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 500000 * COIN);\n+        BOOST_CHECK(result19);\n+        BOOST_CHECK_EQUAL(result19->GetSelectedValue(), 500000 * COIN); // we should get the exact amount\n+        BOOST_CHECK_EQUAL(result19->GetInputSet().size(), 10U); // in ten coins\n \n         // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n@@ -516,19 +534,21 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 7 / 10);\n         add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(1 * MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+        const auto result20 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 1 * MIN_CHANGE);\n+        BOOST_CHECK(result20);\n+        BOOST_CHECK_EQUAL(result20->GetSelectedValue(), 1111 * MIN_CHANGE); // we get the bigger coin\n+        BOOST_CHECK_EQUAL(result20->GetInputSet().size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         coins.clear();\n         add_coin(coins, *wallet, MIN_CHANGE * 4 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 6 / 10);\n         add_coin(coins, *wallet, MIN_CHANGE * 8 / 10);\n         add_coin(coins, *wallet, 1111 * MIN_CHANGE);\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n+        const auto result21 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE);\n+        BOOST_CHECK(result21);\n+        BOOST_CHECK_EQUAL(result21->GetSelectedValue(), MIN_CHANGE);   // we should get the exact amount\n+        BOOST_CHECK_EQUAL(result21->GetInputSet().size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding small change\n         coins.clear();\n@@ -537,14 +557,16 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         add_coin(coins, *wallet, MIN_CHANGE * 100);\n \n         // trying to make 100.01 from these three coins\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 10001 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE * 10105 / 100); // we should get all coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n+        const auto result22 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE * 10001 / 100);\n+        BOOST_CHECK(result22);\n+        BOOST_CHECK_EQUAL(result22->GetSelectedValue(), MIN_CHANGE * 10105 / 100); // we should get all coins\n+        BOOST_CHECK_EQUAL(result22->GetInputSet().size(), 3U);\n \n         // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n-        BOOST_CHECK(KnapsackSolver(MIN_CHANGE * 9990 / 100, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+        const auto result23 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), MIN_CHANGE * 9990 / 100);\n+        BOOST_CHECK(result23);\n+        BOOST_CHECK_EQUAL(result23->GetSelectedValue(), 101 * MIN_CHANGE);\n+        BOOST_CHECK_EQUAL(result23->GetInputSet().size(), 2U);\n     }\n \n     // test with many inputs\n@@ -556,18 +578,19 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n \n         // We only create the wallet once to save time, but we still run the coin selection RUN_TESTS times.\n         for (int i = 0; i < RUN_TESTS; i++) {\n-            BOOST_CHECK(KnapsackSolver(2000, KnapsackGroupOutputs(coins, *wallet, filter_confirmed), setCoinsRet, nValueRet));\n+            const auto result24 = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_confirmed), 2000);\n+            BOOST_CHECK(result24);\n \n             if (amt - 2000 < MIN_CHANGE) {\n                 // needs more than one input:\n                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n                 CAmount returnValue = amt * returnSize;\n-                BOOST_CHECK_EQUAL(nValueRet, returnValue);\n-                BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+                BOOST_CHECK_EQUAL(result24->GetSelectedValue(), returnValue);\n+                BOOST_CHECK_EQUAL(result24->GetInputSet().size(), returnSize);\n             } else {\n                 // one input is sufficient:\n-                BOOST_CHECK_EQUAL(nValueRet, amt);\n-                BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+                BOOST_CHECK_EQUAL(result24->GetSelectedValue(), amt);\n+                BOOST_CHECK_EQUAL(result24->GetInputSet().size(), 1U);\n             }\n         }\n     }\n@@ -582,9 +605,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n         for (int i = 0; i < RUN_TESTS; i++) {\n             // picking 50 from 100 coins doesn't depend on the shuffle,\n             // but does depend on randomness in the stochastic approximation code\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n-            BOOST_CHECK(KnapsackSolver(50 * COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n-            BOOST_CHECK(!equal_sets(setCoinsRet, setCoinsRet2));\n+            const auto result25 = KnapsackSolver(GroupCoins(coins), 50 * COIN);\n+            BOOST_CHECK(result25);\n+            const auto result26 = KnapsackSolver(GroupCoins(coins), 50 * COIN);\n+            BOOST_CHECK(result26);\n+            BOOST_CHECK(!EqualResult(*result25, *result26));\n \n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n@@ -593,9 +618,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n                 // When choosing 1 from 100 identical coins, 1% of the time, this test will choose the same coin twice\n                 // which will cause it to fail.\n                 // To avoid that issue, run the test RANDOM_REPEATS times and only complain if all of them fail\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(COIN, GroupCoins(coins), setCoinsRet2, nValueRet));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n+                const auto result27 = KnapsackSolver(GroupCoins(coins), COIN);\n+                BOOST_CHECK(result27);\n+                const auto result28 = KnapsackSolver(GroupCoins(coins), COIN);\n+                BOOST_CHECK(result28);\n+                if (EqualResult(*result27, *result28))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n@@ -614,9 +641,11 @@ BOOST_AUTO_TEST_CASE(knapsack_solver_test)\n             int fails = 0;\n             for (int j = 0; j < RANDOM_REPEATS; j++)\n             {\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet, nValueRet));\n-                BOOST_CHECK(KnapsackSolver(90*CENT, GroupCoins(coins), setCoinsRet2, nValueRet));\n-                if (equal_sets(setCoinsRet, setCoinsRet2))\n+                const auto result29 = KnapsackSolver(GroupCoins(coins), 90 * CENT);\n+                BOOST_CHECK(result29);\n+                const auto result30 = KnapsackSolver(GroupCoins(coins), 90 * CENT);\n+                BOOST_CHECK(result30);\n+                if (EqualResult(*result29, *result30))\n                     fails++;\n             }\n             BOOST_CHECK_NE(fails, RANDOM_REPEATS);\n@@ -632,18 +661,17 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     wallet->SetupDescriptorScriptPubKeyMans();\n \n-    CoinSet setCoinsRet;\n-    CAmount nValueRet;\n     std::vector<COutput> coins;\n \n     // Test vValue sort order\n     for (int i = 0; i < 1000; i++)\n         add_coin(coins, *wallet, 1000 * COIN);\n     add_coin(coins, *wallet, 3 * COIN);\n \n-    BOOST_CHECK(KnapsackSolver(1003 * COIN, KnapsackGroupOutputs(coins, *wallet, filter_standard), setCoinsRet, nValueRet));\n-    BOOST_CHECK_EQUAL(nValueRet, 1003 * COIN);\n-    BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n+    const auto result = KnapsackSolver(KnapsackGroupOutputs(coins, *wallet, filter_standard), 1003 * COIN);\n+    BOOST_CHECK(result);\n+    BOOST_CHECK_EQUAL(result->GetSelectedValue(), 1003 * COIN);\n+    BOOST_CHECK_EQUAL(result->GetInputSet().size(), 2U);\n }\n \n // Tests that with the ideal conditions, the coin selector will always be able to find a solution that can pay the target value"
      }
    ]
  },
  {
    "sha": "c1a75c571da278988cae51fe13b1ef886b35c8af",
    "node_id": "C_kwDOABII59oAKGMxYTc1YzU3MWRhMjc4OTg4Y2FlNTFmZTEzYjFlZjg4NmIzNWM4YWY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-09-28T03:22:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Return SelectionResult from SelectCoinsSRD\n\nChanges SelectCoinsSRD to return a SelectionResult.",
      "tree": {
        "sha": "042ea1e9e7f42e0da2a8139b2f8fbe0f1bd9f497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/042ea1e9e7f42e0da2a8139b2f8fbe0f1bd9f497"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1a75c571da278988cae51fe13b1ef886b35c8af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1a75c571da278988cae51fe13b1ef886b35c8af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1a75c571da278988cae51fe13b1ef886b35c8af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1a75c571da278988cae51fe13b1ef886b35c8af/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e3b5b63c46d2e2dc601a8ca061823e21ab7151",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e3b5b63c46d2e2dc601a8ca061823e21ab7151"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "05c0e9e9b4f8cbe80d7f4467ea9b733952d3ab22",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=c1a75c571da278988cae51fe13b1ef886b35c8af",
        "patch": "@@ -166,10 +166,9 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n     return result;\n }\n \n-std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n+std::optional<SelectionResult> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value)\n {\n-    std::set<CInputCoin> out_set;\n-    CAmount value_ret = 0;\n+    SelectionResult result(target_value);\n \n     std::vector<size_t> indexes;\n     indexes.resize(utxo_pool.size());\n@@ -181,10 +180,9 @@ std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std\n         const OutputGroup& group = utxo_pool.at(i);\n         Assume(group.GetSelectionAmount() > 0);\n         selected_eff_value += group.GetSelectionAmount();\n-        value_ret += group.m_value;\n-        util::insert(out_set, group.m_outputs);\n+        result.AddInput(group);\n         if (selected_eff_value >= target_value) {\n-            return std::make_pair(out_set, value_ret);\n+            return result;\n         }\n     }\n     return std::nullopt;"
      },
      {
        "sha": "252d786c4c6462baa4833b332eef128a4e8e21b6",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=c1a75c571da278988cae51fe13b1ef886b35c8af",
        "patch": "@@ -241,9 +241,9 @@ std::optional<SelectionResult> SelectCoinsBnB(std::vector<OutputGroup>& utxo_poo\n  *\n  * @param[in]  utxo_pool    The positive effective value OutputGroups eligible for selection\n  * @param[in]  target_value The target value to select for\n- * @returns If successful, a pair of set of outputs and total selected value, otherwise, std::nullopt\n+ * @returns If successful, a SelectionResult, otherwise, std::nullopt\n  */\n-std::optional<std::pair<std::set<CInputCoin>, CAmount>> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n+std::optional<SelectionResult> SelectCoinsSRD(const std::vector<OutputGroup>& utxo_pool, CAmount target_value);\n \n // Original coin selection algorithm as a fallback\n std::optional<SelectionResult> KnapsackSolver(std::vector<OutputGroup>& groups, const CAmount& nTargetValue);"
      },
      {
        "sha": "ef8885e738959e54d7b39f58f5fd8325c47f3d47",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1a75c571da278988cae51fe13b1ef886b35c8af/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=c1a75c571da278988cae51fe13b1ef886b35c8af",
        "patch": "@@ -402,10 +402,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     // We include the minimum final change for SRD as we do want to avoid making really small change.\n     // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n     const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n-    auto srd_result = SelectCoinsSRD(positive_groups, srd_target);\n-    if (srd_result != std::nullopt) {\n-        const auto waste = GetSelectionWaste(srd_result->first, coin_selection_params.m_cost_of_change, srd_target, !coin_selection_params.m_subtract_fee_outputs);\n-        results.emplace_back(std::make_tuple(waste, std::move(srd_result->first), srd_result->second));\n+    if (auto srd_result{SelectCoinsSRD(positive_groups, srd_target)}) {\n+        srd_result->ComputeAndSetWaste(coin_selection_params.m_cost_of_change);\n+        results.emplace_back(std::make_tuple(srd_result->GetWaste(), srd_result->GetInputSet(), srd_result->GetSelectedValue()));\n     }\n \n     if (results.size() == 0) {"
      }
    ]
  },
  {
    "sha": "e36703d120f98146cd33173a3f98e96c71a49548",
    "node_id": "C_kwDOABII59oAKGUzNjcwM2QxMjBmOTgxNDZjZDMzMTczYTNmOThlOTZjNzFhNDk1NDg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-11-16T21:39:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Make an OutputGroup for preset inputs\n\nIn SelectCoins, for our preset inputs, we combine all of the preset\ninputs into a single OutputGroup. This allows us to combine the preset\ninputs with additional selection algo results.",
      "tree": {
        "sha": "381b7b10cd41666487a13b2a0970b7c16fa6e649",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/381b7b10cd41666487a13b2a0970b7c16fa6e649"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e36703d120f98146cd33173a3f98e96c71a49548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36703d120f98146cd33173a3f98e96c71a49548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e36703d120f98146cd33173a3f98e96c71a49548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36703d120f98146cd33173a3f98e96c71a49548/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1a75c571da278988cae51fe13b1ef886b35c8af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1a75c571da278988cae51fe13b1ef886b35c8af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1a75c571da278988cae51fe13b1ef886b35c8af"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d975e5a95b0c1eb97827c5d5461da59fda07c41e",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e36703d120f98146cd33173a3f98e96c71a49548/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e36703d120f98146cd33173a3f98e96c71a49548/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=e36703d120f98146cd33173a3f98e96c71a49548",
        "patch": "@@ -443,6 +443,7 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n     CAmount nValueFromPresetInputs = 0;\n+    OutputGroup preset_inputs(coin_selection_params);\n \n     std::vector<COutPoint> vPresetInputs;\n     coin_control.ListSelected(vPresetInputs);\n@@ -480,6 +481,10 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             value_to_select -= coin.effective_value;\n         }\n         setPresetCoins.insert(coin);\n+        /* Set depth, from_me, ancestors, and descendants to 0 or false as don't matter for preset inputs as no actual selection is being done.\n+         * positive_only is set to false because we want to include all preset inputs, even if they are dust.\n+         */\n+        preset_inputs.Insert(coin, 0, false, 0, 0, false);\n     }\n \n     // remove preset inputs from vCoins so that Coin Selection doesn't pick them."
      }
    ]
  },
  {
    "sha": "0211023c256dd5fde9ff82e832305c8b3c981d89",
    "node_id": "C_kwDOABII59oAKDAyMTEwMjNjMjU2ZGQ1ZmRlOWZmODJlODMyMzA1YzhiM2M5ODFkODk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:15:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Use SelectionResult for waste calculation",
      "tree": {
        "sha": "73b5de68046a8ed79e6ed88c5783f57374490e3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b5de68046a8ed79e6ed88c5783f57374490e3a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0211023c256dd5fde9ff82e832305c8b3c981d89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0211023c256dd5fde9ff82e832305c8b3c981d89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0211023c256dd5fde9ff82e832305c8b3c981d89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0211023c256dd5fde9ff82e832305c8b3c981d89/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e36703d120f98146cd33173a3f98e96c71a49548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e36703d120f98146cd33173a3f98e96c71a49548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e36703d120f98146cd33173a3f98e96c71a49548"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 10,
      "deletions": 12
    },
    "files": [
      {
        "sha": "ac06e67a412c5c7e5bace3360a51b1d582394720",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0211023c256dd5fde9ff82e832305c8b3c981d89/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0211023c256dd5fde9ff82e832305c8b3c981d89/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=0211023c256dd5fde9ff82e832305c8b3c981d89",
        "patch": "@@ -187,6 +187,8 @@ struct OutputGroup\n  * where excess = selected_effective_value - target\n  * change_cost = effective_feerate * change_output_size + long_term_feerate * change_spend_size\n  *\n+ * Note this function is separate from SelectionResult for the tests.\n+ *\n  * @param[in] inputs The selected inputs\n  * @param[in] change_cost The cost of creating change and spending it in the future.\n  *                        Only used if there is change, in which case it must be positive."
      },
      {
        "sha": "7b6101ce2d73e9295e72bbe9b666baf4ef7fab90",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0211023c256dd5fde9ff82e832305c8b3c981d89/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0211023c256dd5fde9ff82e832305c8b3c981d89/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=0211023c256dd5fde9ff82e832305c8b3c981d89",
        "patch": "@@ -378,16 +378,14 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n-    // Vector of results for use with waste calculation\n-    // In order: calculated waste, selected inputs, selected input value (sum of input values)\n-    // TODO: Use a struct representing the selection result\n-    std::vector<std::tuple<CAmount, std::set<CInputCoin>, CAmount>> results;\n+    // Vector of result and waste pairs. We will choose the best one based on waste.\n+    std::vector<SelectionResult> results;\n \n     // Note that unlike KnapsackSolver, we do not include the fee for creating a change output as BnB will not create a change output.\n     std::vector<OutputGroup> positive_groups = GroupOutputs(wallet, coins, coin_selection_params, eligibility_filter, true /* positive_only */);\n     if (auto bnb_result{SelectCoinsBnB(positive_groups, nTargetValue, coin_selection_params.m_cost_of_change)}) {\n         bnb_result->ComputeAndSetWaste(CAmount(0));\n-        results.emplace_back(std::make_tuple(bnb_result->GetWaste(), bnb_result->GetInputSet(), bnb_result->GetSelectedValue()));\n+        results.push_back(*bnb_result);\n     }\n \n     // The knapsack solver has some legacy behavior where it will spend dust outputs. We retain this behavior, so don't filter for positive only here.\n@@ -396,15 +394,15 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n     // So we need to include that for KnapsackSolver as well, as we are expecting to create a change output.\n     if (auto knapsack_result{KnapsackSolver(all_groups, nTargetValue + coin_selection_params.m_change_fee)}) {\n         knapsack_result->ComputeAndSetWaste(coin_selection_params.m_cost_of_change);\n-        results.emplace_back(std::make_tuple(knapsack_result->GetWaste(), knapsack_result->GetInputSet(), knapsack_result->GetSelectedValue()));\n+        results.push_back(*knapsack_result);\n     }\n \n     // We include the minimum final change for SRD as we do want to avoid making really small change.\n     // KnapsackSolver does not need this because it includes MIN_CHANGE internally.\n     const CAmount srd_target = nTargetValue + coin_selection_params.m_change_fee + MIN_FINAL_CHANGE;\n     if (auto srd_result{SelectCoinsSRD(positive_groups, srd_target)}) {\n         srd_result->ComputeAndSetWaste(coin_selection_params.m_cost_of_change);\n-        results.emplace_back(std::make_tuple(srd_result->GetWaste(), srd_result->GetInputSet(), srd_result->GetSelectedValue()));\n+        results.push_back(*srd_result);\n     }\n \n     if (results.size() == 0) {\n@@ -414,11 +412,9 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     // Choose the result with the least waste\n     // If the waste is the same, choose the one which spends more inputs.\n-    const auto& best_result = std::min_element(results.begin(), results.end(), [](const auto& a, const auto& b) {\n-        return std::get<0>(a) < std::get<0>(b) || (std::get<0>(a) == std::get<0>(b) && std::get<1>(a).size() > std::get<1>(b).size());\n-    });\n-    setCoinsRet = std::get<1>(*best_result);\n-    nValueRet = std::get<2>(*best_result);\n+    auto best_result = *std::min_element(results.begin(), results.end());\n+    setCoinsRet = best_result.GetInputSet();\n+    nValueRet = best_result.GetSelectedValue();\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
    "node_id": "C_kwDOABII59oAKDFhM2RlYzVlYjczYzk1NTI3MjFlZDljOTc5ZWQ4N2ZiODI2Yjc1ZmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:39:41Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Use SelectionResult in AttemptSelection\n\nReplace setCoinsRet and nValueRet with a SelectionResult in\nAttemptSelection",
      "tree": {
        "sha": "cd1986821460d65e0a5f3a94bcacd43f8edfc892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd1986821460d65e0a5f3a94bcacd43f8edfc892"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0211023c256dd5fde9ff82e832305c8b3c981d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0211023c256dd5fde9ff82e832305c8b3c981d89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0211023c256dd5fde9ff82e832305c8b3c981d89"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 42,
      "deletions": 45
    },
    "files": [
      {
        "sha": "686811d95bcaf6291b1a6cbb4f865945a0961d1f",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
        "patch": "@@ -54,12 +54,10 @@ static void CoinSelection(benchmark::Bench& bench)\n                                                     /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                     /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n-        std::set<CInputCoin> setCoinsRet;\n-        CAmount nValueRet;\n-        bool success = AttemptSelection(wallet, 1003 * COIN, filter_standard, coins, setCoinsRet, nValueRet, coin_selection_params);\n-        assert(success);\n-        assert(nValueRet == 1003 * COIN);\n-        assert(setCoinsRet.size() == 2);\n+        auto result = AttemptSelection(wallet, 1003 * COIN, filter_standard, coins, coin_selection_params);\n+        assert(result);\n+        assert(result->GetSelectedValue() == 1003 * COIN);\n+        assert(result->GetInputSet().size() == 2);\n     });\n }\n "
      },
      {
        "sha": "33e4fcc6675292abf4b5b3de7b772ab4087b6506",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 37,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
        "patch": "@@ -373,11 +373,9 @@ std::vector<OutputGroup> GroupOutputs(const CWallet& wallet, const std::vector<C\n     return groups_out;\n }\n \n-bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                                 std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params)\n+std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n+                               const CoinSelectionParams& coin_selection_params)\n {\n-    setCoinsRet.clear();\n-    nValueRet = 0;\n     // Vector of result and waste pairs. We will choose the best one based on waste.\n     std::vector<SelectionResult> results;\n \n@@ -407,15 +405,13 @@ bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const\n \n     if (results.size() == 0) {\n         // No solution found\n-        return false;\n+        return std::nullopt;\n     }\n \n     // Choose the result with the least waste\n     // If the waste is the same, choose the one which spends more inputs.\n     auto best_result = *std::min_element(results.begin(), results.end());\n-    setCoinsRet = best_result.GetInputSet();\n-    nValueRet = best_result.GetSelectedValue();\n-    return true;\n+    return best_result;\n }\n \n bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n@@ -438,7 +434,6 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n \n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n-    CAmount nValueFromPresetInputs = 0;\n     OutputGroup preset_inputs(coin_selection_params);\n \n     std::vector<COutPoint> vPresetInputs;\n@@ -466,7 +461,6 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n         }\n \n         CInputCoin coin(outpoint, txout, input_bytes);\n-        nValueFromPresetInputs += coin.txout.nValue;\n         if (coin.m_input_bytes == -1) {\n             return false; // Not solvable, can't estimate size for fee\n         }\n@@ -511,62 +505,67 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n     // Coin Selection attempts to select inputs from a pool of eligible UTXOs to fund the\n     // transaction at a target feerate. If an attempt fails, more attempts may be made using a more\n     // permissive CoinEligibilityFilter.\n-    const bool res = [&] {\n+    std::optional<SelectionResult> res = [&] {\n         // Pre-selected inputs already cover the target amount.\n-        if (value_to_select <= 0) return true;\n+        if (value_to_select <= 0) return std::make_optional(SelectionResult(nTargetValue));\n \n         // If possible, fund the transaction with confirmed UTXOs only. Prefer at least six\n         // confirmations on outputs received from other wallets and only spend confirmed change.\n-        if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n-        if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n+        if (auto r1{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 6, 0), vCoins, coin_selection_params)}) return r1;\n+        if (auto r2{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(1, 1, 0), vCoins, coin_selection_params)}) return r2;\n \n         // Fall back to using zero confirmation change (but with as few ancestors in the mempool as\n         // possible) if we cannot fund the transaction otherwise.\n         if (wallet.m_spend_zero_conf_change) {\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params)) return true;\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+            if (auto r3{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, 2), vCoins, coin_selection_params)}) return r3;\n+            if (auto r4{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, std::min((size_t)4, max_ancestors/3), std::min((size_t)4, max_descendants/3)),\n+                                   vCoins, coin_selection_params)}) {\n+                return r4;\n             }\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+            if (auto r5{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors/2, max_descendants/2),\n+                                   vCoins, coin_selection_params)}) {\n+                return r5;\n             }\n             // If partial groups are allowed, relax the requirement of spending OutputGroups (groups\n             // of UTXOs sent to the same address, which are obviously controlled by a single wallet)\n             // in their entirety.\n-            if (AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n-                                   vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+            if (auto r6{AttemptSelection(wallet, value_to_select, CoinEligibilityFilter(0, 1, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n+                                   vCoins, coin_selection_params)}) {\n+                return r6;\n             }\n             // Try with unsafe inputs if they are allowed. This may spend unconfirmed outputs\n             // received from other wallets.\n-            if (coin_control.m_include_unsafe_inputs\n-                && AttemptSelection(wallet, value_to_select,\n+            if (coin_control.m_include_unsafe_inputs) {\n+                if (auto r7{AttemptSelection(wallet, value_to_select,\n                     CoinEligibilityFilter(0 /* conf_mine */, 0 /* conf_theirs */, max_ancestors-1, max_descendants-1, true /* include_partial_groups */),\n-                    vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+                    vCoins, coin_selection_params)}) {\n+                    return r7;\n+                }\n             }\n             // Try with unlimited ancestors/descendants. The transaction will still need to meet\n             // mempool ancestor/descendant policy to be accepted to mempool and broadcasted, but\n             // OutputGroups use heuristics that may overestimate ancestor/descendant counts.\n-            if (!fRejectLongChains && AttemptSelection(wallet, value_to_select,\n+            if (!fRejectLongChains) {\n+                if (auto r8{AttemptSelection(wallet, value_to_select,\n                                       CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max(), std::numeric_limits<uint64_t>::max(), true /* include_partial_groups */),\n-                                      vCoins, setCoinsRet, nValueRet, coin_selection_params)) {\n-                return true;\n+                                      vCoins, coin_selection_params)}) {\n+                    return r8;\n+                }\n             }\n         }\n         // Coin Selection failed.\n-        return false;\n+        return std::optional<SelectionResult>();\n     }();\n \n-    // AttemptSelection clears setCoinsRet, so add the preset inputs from coin_control to the coinset\n-    util::insert(setCoinsRet, setPresetCoins);\n+    if (!res) return false;\n \n-    // add preset inputs to the total value selected\n-    nValueRet += nValueFromPresetInputs;\n+    // Add preset inputs to result\n+    res->AddInput(preset_inputs);\n \n-    return res;\n+    setCoinsRet = res->GetInputSet();\n+    nValueRet = res->GetSelectedValue();\n+\n+    return true;\n }\n \n static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, const uint256& block_hash)"
      },
      {
        "sha": "f5b427c82a902ca691556477a94780b19587003e",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a3dec5eb73c9552721ed9c979ed87fb826b75fe/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
        "patch": "@@ -111,8 +111,8 @@ std::vector<OutputGroup> GroupOutputs(const CWallet& wallet, const std::vector<C\n  * param@[out]  setCoinsRet     Populated with the coins selected if successful.\n  * param@[out]  nValueRet       Used to return the total value of selected coins.\n  */\n-bool AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n-                        std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params);\n+std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> coins,\n+                        const CoinSelectionParams& coin_selection_params);\n \n /**\n  * Select a set of coins such that nValueRet >= nTargetValue and at least"
      }
    ]
  },
  {
    "sha": "e142d9af81c502a4694565ee6eef7b87ca1c0387",
    "node_id": "C_kwDOABII59oAKGUxNDJkOWFmODFjNTAyYTQ2OTQ1NjVlZTZlZWY3Yjg3Y2ExYzAzODc",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-05-21T22:55:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-23T23:26:40Z"
      },
      "message": "Use SelectionResult in SelectCoins\n\nReplace setCoinsRet and nValueRet with SelectionResult",
      "tree": {
        "sha": "8cc069a8f1a75f6c34ad8971eff9ce7cdab155b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cc069a8f1a75f6c34ad8971eff9ce7cdab155b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e142d9af81c502a4694565ee6eef7b87ca1c0387",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e142d9af81c502a4694565ee6eef7b87ca1c0387",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e142d9af81c502a4694565ee6eef7b87ca1c0387",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e142d9af81c502a4694565ee6eef7b87ca1c0387/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a3dec5eb73c9552721ed9c979ed87fb826b75fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a3dec5eb73c9552721ed9c979ed87fb826b75fe"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 29,
      "deletions": 33
    },
    "files": [
      {
        "sha": "088adb734776f38d4d380fd15d5e8a29698520cf",
        "filename": "src/wallet/spend.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 24,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/spend.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/spend.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.cpp?ref=e142d9af81c502a4694565ee6eef7b87ca1c0387",
        "patch": "@@ -414,27 +414,31 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n     return best_result;\n }\n \n-bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n+std::optional<SelectionResult> SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params)\n {\n     std::vector<COutput> vCoins(vAvailableCoins);\n     CAmount value_to_select = nTargetValue;\n \n+    OutputGroup preset_inputs(coin_selection_params);\n+\n     // coin control -> return all selected outputs (we want all selected to go into the transaction for sure)\n     if (coin_control.HasSelected() && !coin_control.fAllowOtherInputs)\n     {\n-        for (const COutput& out : vCoins)\n-        {\n-            if (!out.fSpendable)\n-                 continue;\n-            nValueRet += out.tx->tx->vout[out.i].nValue;\n-            setCoinsRet.insert(out.GetInputCoin());\n+        for (const COutput& out : vCoins) {\n+            if (!out.fSpendable) continue;\n+            /* Set depth, from_me, ancestors, and descendants to 0 or false as these don't matter for preset inputs as no actual selection is being done.\n+             * positive_only is set to false because we want to include all preset inputs, even if they are dust.\n+             */\n+            preset_inputs.Insert(out.GetInputCoin(), 0, false, 0, 0, false);\n         }\n-        return (nValueRet >= nTargetValue);\n+        SelectionResult result(nTargetValue);\n+        result.AddInput(preset_inputs);\n+        if (result.GetSelectedValue() < nTargetValue) return std::nullopt;\n+        return result;\n     }\n \n     // calculate value from preset inputs and store them\n     std::set<CInputCoin> setPresetCoins;\n-    OutputGroup preset_inputs(coin_selection_params);\n \n     std::vector<COutPoint> vPresetInputs;\n     coin_control.ListSelected(vPresetInputs);\n@@ -446,7 +450,7 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n             if (wtx.tx->vout.size() <= outpoint.n) {\n-                return false;\n+                return std::nullopt;\n             }\n             input_bytes = GetTxSpendSize(wallet, wtx, outpoint.n, false);\n             txout = wtx.tx->vout.at(outpoint.n);\n@@ -455,14 +459,14 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n             // The input is external. We either did not find the tx in mapWallet, or we did but couldn't compute the input size with wallet data\n             if (!coin_control.GetExternalOutput(outpoint, txout)) {\n                 // Not ours, and we don't have solving data.\n-                return false;\n+                return std::nullopt;\n             }\n             input_bytes = CalculateMaximumSignedInputSize(txout, &coin_control.m_external_provider, /* use_max_sig */ true);\n         }\n \n         CInputCoin coin(outpoint, txout, input_bytes);\n         if (coin.m_input_bytes == -1) {\n-            return false; // Not solvable, can't estimate size for fee\n+            return std::nullopt; // Not solvable, can't estimate size for fee\n         }\n         coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n         if (coin_selection_params.m_subtract_fee_outputs) {\n@@ -557,15 +561,12 @@ bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCo\n         return std::optional<SelectionResult>();\n     }();\n \n-    if (!res) return false;\n+    if (!res) return std::nullopt;\n \n     // Add preset inputs to result\n     res->AddInput(preset_inputs);\n \n-    setCoinsRet = res->GetInputSet();\n-    nValueRet = res->GetSelectedValue();\n-\n-    return true;\n+    return res;\n }\n \n static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, const uint256& block_hash)\n@@ -761,17 +762,15 @@ static bool CreateTransactionInternal(\n     AvailableCoins(wallet, vAvailableCoins, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n \n     // Choose coins to use\n-    CAmount inputs_sum = 0;\n-    std::set<CInputCoin> setCoins;\n-    if (!SelectCoins(wallet, vAvailableCoins, /* nTargetValue */ selection_target, setCoins, inputs_sum, coin_control, coin_selection_params))\n-    {\n+    std::optional<SelectionResult> result = SelectCoins(wallet, vAvailableCoins, /* nTargetValue */ selection_target, coin_control, coin_selection_params);\n+    if (!result) {\n         error = _(\"Insufficient funds\");\n         return false;\n     }\n \n     // Always make a change output\n     // We will reduce the fee from this change output later, and remove the output if it is too small.\n-    const CAmount change_and_fee = inputs_sum - recipients_sum;\n+    const CAmount change_and_fee = result->GetSelectedValue() - recipients_sum;\n     assert(change_and_fee >= 0);\n     CTxOut newTxOut(change_and_fee, scriptChange);\n \n@@ -790,8 +789,7 @@ static bool CreateTransactionInternal(\n     auto change_position = txNew.vout.insert(txNew.vout.begin() + nChangePosInOut, newTxOut);\n \n     // Shuffle selected coins and fill in final vin\n-    std::vector<CInputCoin> selected_coins(setCoins.begin(), setCoins.end());\n-    Shuffle(selected_coins.begin(), selected_coins.end(), FastRandomContext());\n+    std::vector<CInputCoin> selected_coins = result->GetShuffledInputVector();\n \n     // Note how the sequence number is set to non-maxint so that\n     // the nLockTime set above actually works."
      },
      {
        "sha": "00389d803e23a74847ccd6dd90e1bd7bc63d251e",
        "filename": "src/wallet/spend.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/spend.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/spend.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/spend.h?ref=e142d9af81c502a4694565ee6eef7b87ca1c0387",
        "patch": "@@ -122,8 +122,8 @@ std::optional<SelectionResult> AttemptSelection(const CWallet& wallet, const CAm\n  * param@[out]  nValueRet           Total value of selected coins including pre-selected ones\n  *                                  from coin_control and Coin Selection if successful.\n  */\n-bool SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n-                 const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n+std::optional<SelectionResult> SelectCoins(const CWallet& wallet, const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, const CCoinControl& coin_control,\n+                 CoinSelectionParams& coin_selection_params) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet);\n \n /**\n  * Create a new transaction paying the recipients with a set of coins"
      },
      {
        "sha": "58472034187be8206944d7ac1216471e321dbebd",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e142d9af81c502a4694565ee6eef7b87ca1c0387/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=e142d9af81c502a4694565ee6eef7b87ca1c0387",
        "patch": "@@ -330,8 +330,6 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         wallet->SetupDescriptorScriptPubKeyMans();\n \n         std::vector<COutput> coins;\n-        CoinSet setCoinsRet;\n-        CAmount nValueRet;\n \n         add_coin(coins, *wallet, 5 * CENT, 6 * 24, false, 0, true);\n         add_coin(coins, *wallet, 3 * CENT, 6 * 24, false, 0, true);\n@@ -340,7 +338,8 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         coin_control.fAllowOtherInputs = true;\n         coin_control.Select(COutPoint(coins.at(0).tx->GetHash(), coins.at(0).i));\n         coin_selection_params_bnb.m_effective_feerate = CFeeRate(0);\n-        BOOST_CHECK(SelectCoins(*wallet, coins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb));\n+        const auto result10 = SelectCoins(*wallet, coins, 10 * CENT, coin_control, coin_selection_params_bnb);\n+        BOOST_CHECK(result10);\n     }\n }\n \n@@ -713,11 +712,10 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n                                       /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                       /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                       /* tx_noinputs_size= */ 0, /* avoid_partial= */ false);\n-        CoinSet out_set;\n-        CAmount out_value = 0;\n         CCoinControl cc;\n-        BOOST_CHECK(SelectCoins(*wallet, coins, target, out_set, out_value, cc, cs_params));\n-        BOOST_CHECK_GE(out_value, target);\n+        const auto result = SelectCoins(*wallet, coins, target, cc, cs_params);\n+        BOOST_CHECK(result);\n+        BOOST_CHECK_GE(result->GetSelectedValue(), target);\n     }\n }\n "
      }
    ]
  }
]