[
  {
    "sha": "fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmY0NGU2ZjNlNTVkMjVhYTQwY2E0NjZiZTNkYmZkNTVkZTYxNzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:47:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:47:01Z"
      },
      "message": "Add debug message to CValidationState for optional extra information\n\nAdd a field `strDebugMessage` which can be passed to DoS or Invalid,\nand queried using GetDebugMessage() to add extra troubleshooting\ninformation to the validation state.",
      "tree": {
        "sha": "b91253c926e3fd2c8ebd3207c4da6b3653619943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b91253c926e3fd2c8ebd3207c4da6b3653619943"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149f96c9b0693a61f27016572a12fb21436a442d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149f96c9b0693a61f27016572a12fb21436a442d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149f96c9b0693a61f27016572a12fb21436a442d"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d6051edc385dc899c168d2420b3ee608c9378d5b",
        "filename": "src/consensus/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/src/consensus/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a/src/consensus/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/validation.h?ref=fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "patch": "@@ -30,23 +30,27 @@ class CValidationState {\n     std::string strRejectReason;\n     unsigned int chRejectCode;\n     bool corruptionPossible;\n+    std::string strDebugMessage;\n public:\n     CValidationState() : mode(MODE_VALID), nDoS(0), chRejectCode(0), corruptionPossible(false) {}\n     bool DoS(int level, bool ret = false,\n-             unsigned int chRejectCodeIn=0, std::string strRejectReasonIn=\"\",\n-             bool corruptionIn=false) {\n+             unsigned int chRejectCodeIn=0, const std::string &strRejectReasonIn=\"\",\n+             bool corruptionIn=false,\n+             const std::string &strDebugMessageIn=\"\") {\n         chRejectCode = chRejectCodeIn;\n         strRejectReason = strRejectReasonIn;\n         corruptionPossible = corruptionIn;\n+        strDebugMessage = strDebugMessageIn;\n         if (mode == MODE_ERROR)\n             return ret;\n         nDoS += level;\n         mode = MODE_INVALID;\n         return ret;\n     }\n     bool Invalid(bool ret = false,\n-                 unsigned int _chRejectCode=0, std::string _strRejectReason=\"\") {\n-        return DoS(0, ret, _chRejectCode, _strRejectReason);\n+                 unsigned int _chRejectCode=0, const std::string &_strRejectReason=\"\",\n+                 const std::string &_strDebugMessage=\"\") {\n+        return DoS(0, ret, _chRejectCode, _strRejectReason, false, _strDebugMessage);\n     }\n     bool Error(const std::string& strRejectReasonIn) {\n         if (mode == MODE_VALID)\n@@ -75,6 +79,7 @@ class CValidationState {\n     }\n     unsigned int GetRejectCode() const { return chRejectCode; }\n     std::string GetRejectReason() const { return strRejectReason; }\n+    std::string GetDebugMessage() const { return strDebugMessage; }\n };\n \n #endif // BITCOIN_CONSENSUS_VALIDATION_H"
      }
    ]
  },
  {
    "sha": "dc58258adf1fb1e05002c3057045f113aa214cb7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzU4MjU4YWRmMWZiMWUwNTAwMmMzMDU3MDQ1ZjExM2FhMjE0Y2I3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:51:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:33Z"
      },
      "message": "Introduce REJECT_INTERNAL codes for local AcceptToMempool errors\n\nAdd status codes specific to AcceptToMempool procession of transactions.\nThese can never happen due to block validation, and must never be sent\nover the P2P network. Add assertions where appropriate.",
      "tree": {
        "sha": "4c081f14d824328c6f80709559ce279839447f7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c081f14d824328c6f80709559ce279839447f7a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc58258adf1fb1e05002c3057045f113aa214cb7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbf44e6f3e55d25aa40ca466be3dbfd55de6170a"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 20,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5949e5285dc7812dbc1ff31d9a1c5ef694e93246",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc58258adf1fb1e05002c3057045f113aa214cb7",
        "patch": "@@ -811,7 +811,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n     if (pool.exists(hash))\n-        return false;\n+        return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-in-mempool\");\n \n     // Check for conflicts with in-memory transactions\n     {\n@@ -822,7 +822,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         if (pool.mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n-            return false;\n+            return state.Invalid(false, REJECT_CONFLICT, \"txn-mempool-conflict\");\n         }\n     }\n     }\n@@ -839,7 +839,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // do we already have it?\n         if (view.HaveCoins(hash))\n-            return false;\n+            return state.Invalid(false, REJECT_ALREADY_KNOWN, \"txn-already-known\");\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n@@ -848,7 +848,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n                     *pfMissingInputs = true;\n-                return false;\n+                return false; // fMissingInputs and !state.IsInvalid() is used to detect this condition, don't set state.Invalid()\n             }\n         }\n \n@@ -868,7 +868,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check for non-standard pay-to-script-hash in inputs\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n-            return error(\"AcceptToMemoryPool: nonstandard transaction input\");\n+            return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -1239,7 +1239,7 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n     if (state.IsInvalid(nDoS)) {\n         std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            assert(state.GetRejectCode() < 0x100);\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n@@ -4358,8 +4358,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n                 state.GetRejectReason());\n-            pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n-                               state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n+            if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+                pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n+                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0)\n                 Misbehaving(pfrom->GetId(), nDoS);\n         }\n@@ -4439,6 +4440,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);\n             if (nDoS > 0) {"
      },
      {
        "sha": "5c54b11d469279b53ab848570c1328282f39dae5",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc58258adf1fb1e05002c3057045f113aa214cb7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=dc58258adf1fb1e05002c3057045f113aa214cb7",
        "patch": "@@ -455,7 +455,16 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n-/** local \"reject\" message codes for RPC which can not be triggered by p2p trasactions */\n+/** Reject codes greater or equal to this can be returned by AcceptToMemPool\n+ * for transactions, to signal internal conditions. They cannot and should not\n+ * be sent over the P2P network.\n+ */\n+static const unsigned int REJECT_INTERNAL = 0x100;\n+/** Too high fee. Can not be triggered by P2P transactions */\n static const unsigned int REJECT_HIGHFEE = 0x100;\n+/** Transaction is already known (either in mempool or blockchain) */\n+static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n+/** Transaction conflicts with a transaction already known */\n+static const unsigned int REJECT_CONFLICT = 0x102;\n \n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "9003c7cdd88402986e48ec126258fc10d6742fc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDAzYzdjZGQ4ODQwMjk4NmU0OGVjMTI2MjU4ZmMxMGQ2NzQyZmM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:53:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:33Z"
      },
      "message": "Add function to convert CValidationState to a human-readable message\n\nIt is necessary to be able to concisely log a validation state.\nConvert CValidationState to a human-readable message for logging.",
      "tree": {
        "sha": "c58ec8372165dfb0a091b3e975ec1a33014975bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c58ec8372165dfb0a091b3e975ec1a33014975bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9003c7cdd88402986e48ec126258fc10d6742fc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc58258adf1fb1e05002c3057045f113aa214cb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc58258adf1fb1e05002c3057045f113aa214cb7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc58258adf1fb1e05002c3057045f113aa214cb7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d7a620433760bec6a26ff30b35d7251c18b9007",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9003c7cdd88402986e48ec126258fc10d6742fc7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9003c7cdd88402986e48ec126258fc10d6742fc7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9003c7cdd88402986e48ec126258fc10d6742fc7",
        "patch": "@@ -778,6 +778,14 @@ CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowF\n     return nMinFee;\n }\n \n+/** Convert CValidationState to a human-readable message for logging */\n+static std::string FormatStateMessage(const CValidationState &state)\n+{\n+    return strprintf(\"%s%s (code %i)\",\n+        state.GetRejectReason(),\n+        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage(),\n+        state.GetRejectCode());\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectAbsurdFee)"
      }
    ]
  },
  {
    "sha": "6cab80827277a66a339f1035c58a8f26e347e191",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2FiODA4MjcyNzdhNjZhMzM5ZjEwMzVjNThhOGYyNmUzNDdlMTkx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T07:59:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Remove most logging from transaction validation\n\nRemove unnecessary direct logging in CheckTransaction,\nAcceptToMemoryPool, CheckTxInputs, CScriptCheck::operator()\n\nAll status information should be returned in the CValidationState.\nRelevant debug information is also added to the CValidationState using\nthe recently introduced debug message.\n\nDo keep the \"BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags\"\nerror as it is meant to appear as bug in the log.",
      "tree": {
        "sha": "87c5f17a8d8ef3abd1ce7cc828be52d525bc2e37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87c5f17a8d8ef3abd1ce7cc828be52d525bc2e37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cab80827277a66a339f1035c58a8f26e347e191",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab80827277a66a339f1035c58a8f26e347e191",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9003c7cdd88402986e48ec126258fc10d6742fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9003c7cdd88402986e48ec126258fc10d6742fc7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9003c7cdd88402986e48ec126258fc10d6742fc7"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 35,
      "deletions": 59
    },
    "files": [
      {
        "sha": "947bd8ef1a6fbef2b566cd1bf9f3dad2cfb6058c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 59,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cab80827277a66a339f1035c58a8f26e347e191/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cab80827277a66a339f1035c58a8f26e347e191/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6cab80827277a66a339f1035c58a8f26e347e191",
        "patch": "@@ -696,54 +696,45 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n-                         REJECT_INVALID, \"bad-txns-vin-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n-                         REJECT_INVALID, \"bad-txns-vout-empty\");\n+        return state.DoS(10, false, REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n-                         REJECT_INVALID, \"bad-txns-oversize\");\n+        return state.DoS(100, false, REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n-                             REJECT_INVALID, \"bad-txns-vout-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n-                             REJECT_INVALID, \"bad-txns-vout-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n-                             REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n     // Check for duplicate inputs\n     set<COutPoint> vInOutPoints;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n-                             REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n-                             REJECT_INVALID, \"bad-cb-length\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n-                                 REJECT_INVALID, \"bad-txns-prevout-null\");\n+                return state.DoS(10, false, REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n     return true;\n@@ -795,26 +786,22 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         *pfMissingInputs = false;\n \n     if (!CheckTransaction(tx, state))\n-        return error(\"AcceptToMemoryPool: CheckTransaction failed\");\n+        return false;\n \n     // Coinbase is only valid in a block, not as a loose transaction\n     if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"AcceptToMemoryPool: coinbase as individual tx\"),\n-                         REJECT_INVALID, \"coinbase\");\n+        return state.DoS(100, false, REJECT_INVALID, \"coinbase\");\n \n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (fRequireStandard && !IsStandardTx(tx, reason))\n-        return state.DoS(0,\n-                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n-                         REJECT_NONSTANDARD, reason);\n+        return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n     if (!CheckFinalTx(tx))\n-        return state.DoS(0, error(\"AcceptToMemoryPool: non-final\"),\n-                         REJECT_NONSTANDARD, \"non-final\");\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n     uint256 hash = tx.GetHash();\n@@ -862,8 +849,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n-                                 REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n+            return state.Invalid(false, REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n         view.GetBestBlock();\n@@ -886,10 +872,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         unsigned int nSigOps = GetLegacySigOpCount(tx);\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n-            return state.DoS(0,\n-                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n-                                   hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n-                             REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n+                strprintf(\"%d > %d\", nSigOps, MAX_STANDARD_TX_SIGOPS));\n \n         CAmount nValueOut = tx.GetValueOut();\n         CAmount nFees = nValueIn-nValueOut;\n@@ -901,9 +885,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n-                                      hash.ToString(), nFees, txMinFee),\n-                             REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n+                strprintf(\"%d < %d\", nFees, txMinFee));\n \n         // Require that free transactions have sufficient priority to be mined in the next block.\n         if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n@@ -928,24 +911,20 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n-                                 REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n         if (fRejectAbsurdFee && nFees > ::minRelayTxFee.GetFee(nSize) * 10000)\n-            return state.Invalid(error(\"AcceptToMemoryPool: absurdly high fees %s, %d > %d\",\n-                                       hash.ToString(),\n-                                       nFees, ::minRelayTxFee.GetFee(nSize) * 10000),\n-                                 REJECT_HIGHFEE, \"absurdly-high-fee\");\n+            return state.Invalid(false,\n+                REJECT_HIGHFEE, \"absurdly-high-fee\",\n+                strprintf(\"%d > %d\", nFees, ::minRelayTxFee.GetFee(nSize) * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n         if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n-        {\n-            return error(\"AcceptToMemoryPool: ConnectInputs failed %s\", hash.ToString());\n-        }\n+            return false;\n \n         // Check again against just the consensus-critical mandatory script\n         // verification flags, in case of bugs in the standard flags that cause\n@@ -958,7 +937,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // can be exploited as a DoS attack.\n         if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n         {\n-            return error(\"AcceptToMemoryPool: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s\", hash.ToString());\n+            return error(\"%s: BUG! PLEASE REPORT THIS! ConnectInputs failed against MANDATORY but not STANDARD flags %s, %s\",\n+                __func__, hash.ToString(), FormatStateMessage(state));\n         }\n \n         // Store transaction in memory\n@@ -1298,7 +1278,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return false;\n     }\n     return true;\n }\n@@ -1316,7 +1296,7 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(false, 0, \"\", \"Inputs unavailable\");\n \n         CAmount nValueIn = 0;\n         CAmount nFees = 0;\n@@ -1329,33 +1309,29 @@ bool CheckTxInputs(const CTransaction& tx, CValidationState& state, const CCoins\n             // If prev is coinbase, check that it's matured\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n-                    return state.Invalid(\n-                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n-                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n+                    return state.Invalid(false,\n+                        REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\",\n+                        strprintf(\"tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight));\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n-                                 REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n+                return state.DoS(100, false, REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n-                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n-                             REJECT_INVALID, \"bad-txns-in-belowout\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-in-belowout\", false,\n+                strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())));\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n-                             REJECT_INVALID, \"bad-txns-fee-negative\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n-                             REJECT_INVALID, \"bad-txns-fee-outofrange\");\n+            return state.DoS(100, false, REJECT_INVALID, \"bad-txns-fee-outofrange\");\n     return true;\n }\n }// namespace Consensus"
      }
    ]
  },
  {
    "sha": "66daed5e1be7932e08896794ca016ff31c71a1d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmRhZWQ1ZTFiZTc5MzJlMDg4OTY3OTRjYTAxNmZmMzFjNzFhMWQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T08:02:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Add information to errors in ConnectBlock, CheckBlock\n\nAdd detailed state information to the errors, as it is no longer being\nlogged downstream.\n\nAlso add the state information to mempool rejection debug message in\nProcessMessages.",
      "tree": {
        "sha": "1744b68f255ab169e9ddba3c479f60b3751caee8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1744b68f255ab169e9ddba3c479f60b3751caee8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66daed5e1be7932e08896794ca016ff31c71a1d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cab80827277a66a339f1035c58a8f26e347e191",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cab80827277a66a339f1035c58a8f26e347e191",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cab80827277a66a339f1035c58a8f26e347e191"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5d9247e4b015a43fd2e21e54545b5296b358f333",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66daed5e1be7932e08896794ca016ff31c71a1d4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66daed5e1be7932e08896794ca016ff31c71a1d4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=66daed5e1be7932e08896794ca016ff31c71a1d4",
        "patch": "@@ -1777,7 +1777,8 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n+                return error(\"ConnectBlock(): CheckInputs on %s failed with %s\",\n+                    tx.GetHash().ToString(), FormatStateMessage(state));\n             control.Add(vChecks);\n         }\n \n@@ -2604,7 +2605,9 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock(): CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction of %s failed with %s\",\n+                tx.GetHash().ToString(),\n+                FormatStateMessage(state));\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n@@ -4341,7 +4344,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n-                state.GetRejectReason());\n+                FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n                 pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash);"
      }
    ]
  },
  {
    "sha": "7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjFmOGY1ZWRmMzZiMDg4NWIwZjJiNzQ2ZTI4YTJmOWJkZThmNGYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-06T08:03:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-08-11T15:29:34Z"
      },
      "message": "Move mempool rejections to new debug category\n\nMove mempool rejections to debug category `mempoolrej`, to make it possible\nto show them without enabling the entire category `mempool` which is\nhigh volume.",
      "tree": {
        "sha": "d434f7499eb84cb41f1f4f880c93fa7dba6491dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d434f7499eb84cb41f1f4f880c93fa7dba6491dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66daed5e1be7932e08896794ca016ff31c71a1d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66daed5e1be7932e08896794ca016ff31c71a1d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66daed5e1be7932e08896794ca016ff31c71a1d4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "085e04fdfd7d5bcc9bcf570dcb2b829462f59c1d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "patch": "@@ -373,7 +373,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net, proxy, prune\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, mempoolrej, net, proxy, prune\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "bb0ca9db54230f4d759960442ab3e2f19650b96b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f1f8f5edf36b0885b0f2b746e28a2f9bde8f4f0",
        "patch": "@@ -4342,7 +4342,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int nDoS = 0;\n         if (state.IsInvalid(nDoS))\n         {\n-            LogPrint(\"mempool\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n+            LogPrint(\"mempoolrej\", \"%s from peer=%d %s was not accepted into the memory pool: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->id, pfrom->cleanSubVer,\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P"
      }
    ]
  }
]