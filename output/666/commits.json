[
  {
    "sha": "94f778bdebe1438fbe0206621ce44b4e25196e59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGY3NzhiZGViZTE0MzhmYmUwMjA2NjIxY2U0NGI0ZTI1MTk2ZTU5",
    "commit": {
      "author": {
        "name": "Dylan Noblesmith",
        "email": "nobled@dreamwidth.org",
        "date": "2011-11-26T06:02:04Z"
      },
      "committer": {
        "name": "Dylan Noblesmith",
        "email": "nobled@dreamwidth.org",
        "date": "2011-11-26T06:02:04Z"
      },
      "message": "Implement an mlock()'d string class for storing passphrases\n\nSecureString is identical to std::string except with secure_allocator\nsubstituting for std::allocator. This makes casting between them\nimpossible, so converting between the two at API boundaries requires\ncalling ::c_str() for now.",
      "tree": {
        "sha": "5e8add3e2a97bf32f59bc94a7b250dbae728783f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e8add3e2a97bf32f59bc94a7b250dbae728783f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94f778bdebe1438fbe0206621ce44b4e25196e59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f778bdebe1438fbe0206621ce44b4e25196e59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94f778bdebe1438fbe0206621ce44b4e25196e59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94f778bdebe1438fbe0206621ce44b4e25196e59/comments",
    "author": {
      "login": "nobled",
      "id": 29161,
      "node_id": "MDQ6VXNlcjI5MTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29161?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobled",
      "html_url": "https://github.com/nobled",
      "followers_url": "https://api.github.com/users/nobled/followers",
      "following_url": "https://api.github.com/users/nobled/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobled/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobled/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobled/subscriptions",
      "organizations_url": "https://api.github.com/users/nobled/orgs",
      "repos_url": "https://api.github.com/users/nobled/repos",
      "events_url": "https://api.github.com/users/nobled/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobled/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "nobled",
      "id": 29161,
      "node_id": "MDQ6VXNlcjI5MTYx",
      "avatar_url": "https://avatars.githubusercontent.com/u/29161?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nobled",
      "html_url": "https://github.com/nobled",
      "followers_url": "https://api.github.com/users/nobled/followers",
      "following_url": "https://api.github.com/users/nobled/following{/other_user}",
      "gists_url": "https://api.github.com/users/nobled/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nobled/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nobled/subscriptions",
      "organizations_url": "https://api.github.com/users/nobled/orgs",
      "repos_url": "https://api.github.com/users/nobled/repos",
      "events_url": "https://api.github.com/users/nobled/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nobled/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8b86408636388195596f6c7dded23f777f99a07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8b86408636388195596f6c7dded23f777f99a07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8b86408636388195596f6c7dded23f777f99a07"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 40,
      "deletions": 54
    },
    "files": [
      {
        "sha": "317f6e66dcf49e94f580c2f056c6f08afda60b62",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 34,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -1453,21 +1453,16 @@ Value walletpassphrase(const Array& params, bool fHelp)\n         throw JSONRPCError(-17, \"Error: Wallet is already unlocked.\");\n \n     // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n-    string strWalletPass;\n+    SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    mlock(&strWalletPass[0], strWalletPass.capacity());\n-    strWalletPass = params[0].get_str();\n+    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    strWalletPass = params[0].get_str().c_str();\n \n     if (strWalletPass.length() > 0)\n     {\n         if (!pwalletMain->Unlock(strWalletPass))\n-        {\n-            fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n-            munlock(&strWalletPass[0], strWalletPass.capacity());\n             throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n-        }\n-        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n-        munlock(&strWalletPass[0], strWalletPass.capacity());\n     }\n     else\n         throw runtime_error(\n@@ -1493,33 +1488,23 @@ Value walletpassphrasechange(const Array& params, bool fHelp)\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(-15, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n-    string strOldWalletPass;\n+    // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n+    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    SecureString strOldWalletPass;\n     strOldWalletPass.reserve(100);\n-    mlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n-    strOldWalletPass = params[0].get_str();\n+    strOldWalletPass = params[0].get_str().c_str();\n \n-    string strNewWalletPass;\n+    SecureString strNewWalletPass;\n     strNewWalletPass.reserve(100);\n-    mlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n-    strNewWalletPass = params[1].get_str();\n+    strNewWalletPass = params[1].get_str().c_str();\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw runtime_error(\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n     if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n-    {\n-        fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n-        fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n-        munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n-        munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n         throw JSONRPCError(-14, \"Error: The wallet passphrase entered was incorrect.\");\n-    }\n-    fill(strNewWalletPass.begin(), strNewWalletPass.end(), '\\0');\n-    fill(strOldWalletPass.begin(), strOldWalletPass.end(), '\\0');\n-    munlock(&strOldWalletPass[0], strOldWalletPass.capacity());\n-    munlock(&strNewWalletPass[0], strNewWalletPass.capacity());\n \n     return Value::null;\n }\n@@ -1564,24 +1549,19 @@ Value encryptwallet(const Array& params, bool fHelp)\n     throw runtime_error(\"Not Yet Implemented: use GUI to encrypt wallet, not RPC command\");\n #endif\n \n-    string strWalletPass;\n+    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    mlock(&strWalletPass[0], strWalletPass.capacity());\n-    strWalletPass = params[0].get_str();\n+    strWalletPass = params[0].get_str().c_str();\n \n     if (strWalletPass.length() < 1)\n         throw runtime_error(\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n     if (!pwalletMain->EncryptWallet(strWalletPass))\n-    {\n-        fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n-        munlock(&strWalletPass[0], strWalletPass.capacity());\n         throw JSONRPCError(-16, \"Error: Failed to encrypt the wallet.\");\n-    }\n-    fill(strWalletPass.begin(), strWalletPass.end(), '\\0');\n-    munlock(&strWalletPass[0], strWalletPass.capacity());\n \n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is"
      },
      {
        "sha": "7f53e22f1e300f8202a1a4572e4ad9548273ba7f",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -15,7 +15,7 @@\n #include \"main.h\"\n #include \"util.h\"\n \n-bool CCrypter::SetKeyFromPassphrase(const std::string& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n+bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n {\n     if (nRounds < 1 || chSalt.size() != WALLET_CRYPTO_SALT_SIZE)\n         return false;"
      },
      {
        "sha": "d7f8a39d8393122172394e6dadf0d5755bb9e0a6",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -65,7 +65,7 @@ class CCrypter\n     bool fKeySet;\n \n public:\n-    bool SetKeyFromPassphrase(const std::string &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n+    bool SetKeyFromPassphrase(const SecureString &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n     bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext);\n     bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext);\n     bool SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV);"
      },
      {
        "sha": "24f622d6378244496156f8e7ef11a2e837a24201",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -71,16 +71,17 @@ void AskPassphraseDialog::setModel(WalletModel *model)\n \n void AskPassphraseDialog::accept()\n {\n-    std::string oldpass, newpass1, newpass2;\n+    SecureString oldpass, newpass1, newpass2;\n     if(!model)\n         return;\n-    // TODO: mlock memory / munlock on return so they will not be swapped out, really need \"mlockedstring\" wrapper class to do this safely\n     oldpass.reserve(MAX_PASSPHRASE_SIZE);\n     newpass1.reserve(MAX_PASSPHRASE_SIZE);\n     newpass2.reserve(MAX_PASSPHRASE_SIZE);\n-    oldpass.assign(ui->passEdit1->text().toStdString());\n-    newpass1.assign(ui->passEdit2->text().toStdString());\n-    newpass2.assign(ui->passEdit3->text().toStdString());\n+    // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n+    // Alternately, find a way to make this input mlock()'d to begin with.\n+    oldpass.assign(ui->passEdit1->text().toStdString().c_str());\n+    newpass1.assign(ui->passEdit2->text().toStdString().c_str());\n+    newpass2.assign(ui->passEdit3->text().toStdString().c_str());\n \n     switch(mode)\n     {"
      },
      {
        "sha": "f028f10f6c69fe6b25f25cfaa5e22691a23a207e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -200,7 +200,7 @@ WalletModel::EncryptionStatus WalletModel::getEncryptionStatus() const\n     }\n }\n \n-bool WalletModel::setWalletEncrypted(bool encrypted, const std::string &passphrase)\n+bool WalletModel::setWalletEncrypted(bool encrypted, const SecureString &passphrase)\n {\n     if(encrypted)\n     {\n@@ -214,7 +214,7 @@ bool WalletModel::setWalletEncrypted(bool encrypted, const std::string &passphra\n     }\n }\n \n-bool WalletModel::setWalletLocked(bool locked, const std::string &passPhrase)\n+bool WalletModel::setWalletLocked(bool locked, const SecureString &passPhrase)\n {\n     if(locked)\n     {\n@@ -228,7 +228,7 @@ bool WalletModel::setWalletLocked(bool locked, const std::string &passPhrase)\n     }\n }\n \n-bool WalletModel::changePassphrase(const std::string &oldPass, const std::string &newPass)\n+bool WalletModel::changePassphrase(const SecureString &oldPass, const SecureString &newPass)\n {\n     bool retval;\n     CRITICAL_BLOCK(wallet->cs_wallet)"
      },
      {
        "sha": "89e8cdd2a0fc130dd3c21729d6b8922e00c8329b",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -2,7 +2,8 @@\n #define WALLETMODEL_H\n \n #include <QObject>\n-#include <string>\n+\n+#include \"util.h\"\n \n class OptionsModel;\n class AddressTableModel;\n@@ -72,10 +73,10 @@ class WalletModel : public QObject\n     SendCoinsReturn sendCoins(const QList<SendCoinsRecipient> &recipients);\n \n     // Wallet encryption\n-    bool setWalletEncrypted(bool encrypted, const std::string &passphrase);\n+    bool setWalletEncrypted(bool encrypted, const SecureString &passphrase);\n     // Passphrase only needed when unlocking\n-    bool setWalletLocked(bool locked, const std::string &passPhrase=std::string());\n-    bool changePassphrase(const std::string &oldPass, const std::string &newPass);\n+    bool setWalletLocked(bool locked, const SecureString &passPhrase=SecureString());\n+    bool changePassphrase(const SecureString &oldPass, const SecureString &newPass);\n \n     // RAI object for unlocking wallet, returned by requestUnlock()\n     class UnlockContext"
      },
      {
        "sha": "1ef0e6f15cd3fb64c5f2a83e6554d552e1439a40",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -292,6 +292,10 @@ class CTryCriticalBlock\n \n \n \n+// This is exactly like std::string, but with a custom allocator.\n+// (secure_allocator<> is defined in serialize.h)\n+typedef std::basic_string<char, std::char_traits<char>, secure_allocator<char> > SecureString;\n+\n \n \n "
      },
      {
        "sha": "28babdb3e2c8a778a7d63771e0557e2bec86a7eb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -42,7 +42,7 @@ bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector\n     return false;\n }\n \n-bool CWallet::Unlock(const string& strWalletPassphrase)\n+bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     if (!IsLocked())\n         return false;\n@@ -63,7 +63,7 @@ bool CWallet::Unlock(const string& strWalletPassphrase)\n     return false;\n }\n \n-bool CWallet::ChangeWalletPassphrase(const string& strOldWalletPassphrase, const string& strNewWalletPassphrase)\n+bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase)\n {\n     bool fWasLocked = IsLocked();\n \n@@ -122,7 +122,7 @@ class CCorruptAddress\n     )\n };\n \n-bool CWallet::EncryptWallet(const string& strWalletPassphrase)\n+bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n {\n     if (IsCrypted())\n         return false;"
      },
      {
        "sha": "ca7cf67317955b572913c99304ffddf93572ff2a",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94f778bdebe1438fbe0206621ce44b4e25196e59/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94f778bdebe1438fbe0206621ce44b4e25196e59/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=94f778bdebe1438fbe0206621ce44b4e25196e59",
        "patch": "@@ -70,9 +70,9 @@ class CWallet : public CCryptoKeyStore\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n \n-    bool Unlock(const std::string& strWalletPassphrase);\n-    bool ChangeWalletPassphrase(const std::string& strOldWalletPassphrase, const std::string& strNewWalletPassphrase);\n-    bool EncryptWallet(const std::string& strWalletPassphrase);\n+    bool Unlock(const SecureString& strWalletPassphrase);\n+    bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n+    bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n     bool AddToWallet(const CWalletTx& wtxIn);\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate = false);"
      }
    ]
  }
]