paveljanik,2017-05-04T06:35:29Z,Rebase needed.,https://github.com/bitcoin/bitcoin/pull/10238#issuecomment-299106814,299106814,
jonasschnelli,2017-05-04T12:42:58Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/10238#issuecomment-299173989,299173989,
ryanofsky,2017-07-25T17:55:07Z,"In #10882 it seems like looking up keypool index using key id is more useful than looking up key id using key index, so I'm not sure if there is a direct use for this PR and maybe it should be reconsidered.\n\nIf the goal is to avoid reading all the unused keys from disk each time an IsMine transaction is encountered, I think there are three ways it could be done:\n\n1. Easiest way is probably",https://github.com/bitcoin/bitcoin/pull/10238#issuecomment-317817700,317817700,
jonasschnelli,2017-10-05T03:37:27Z,"No longer really useful, closing for now.",https://github.com/bitcoin/bitcoin/pull/10238#issuecomment-334349951,334349951,
TheBlueMatt,2017-10-05T21:23:30Z,"Hmm, I actually think this was a really nice change, though I guess it hits at the broader specifically-define-what-we-cache-from-db issue that has persisted for some time.",https://github.com/bitcoin/bitcoin/pull/10238#issuecomment-334596258,334596258,
ryanofsky,2017-05-01T17:24:52Z,"I think it would be more straightforward to replace setKeyPool with a `std::map<int64_t, CKeyID>` instead of taking this approach which basically emulates a map using set entries with a custom `<` operator.",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114159298,114159298,src/wallet/wallet.h
ryanofsky,2017-05-01T17:37:29Z,"Note: `keyId` member is not actually used anywhere in this PR. (Fine, just pointing out to help review).",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114161735,114161735,src/wallet/wallet.h
jonasschnelli,2017-05-04T12:35:37Z,"Yes. This is true, though, the keyId is relatively important for future performance improvements. We could add it later,.. but I guess it doesn't hurt to already have it there in this PR.",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114761278,114761278,src/wallet/wallet.h
jonasschnelli,2017-05-04T12:42:18Z,Yes. But IMO holding a flexible data-structure (`KeypoolCache`) allows us to be more flexible in future. Though no strong opinion.,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114762459,114762459,src/wallet/wallet.h
NicolasDorier,2017-05-04T13:04:20Z,why is it added ? where is it used ?,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114767005,114767005,src/wallet/wallet.h
NicolasDorier,2017-05-04T13:05:40Z,I am wondering if it is not better (minimum diff) to just change `ReadPool` signature to take KeyPoolCache instead of index.,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114767279,114767279,src/wallet/wallet.cpp
NicolasDorier,2017-05-04T13:06:35Z,why not just take `KeypoolCache` ?,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114767473,114767473,src/wallet/wallet.h
jonasschnelli,2017-05-04T13:09:07Z,"Oh. That's a rebase issue. `fFileBackand` was removed in the meantime, Will remove it here.",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114767978,114767978,src/wallet/wallet.h
jonasschnelli,2017-05-04T13:09:39Z,Hmm.. then CReserveKey::Return key would have to create a `KeypoolCache()`?,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114768072,114768072,src/wallet/wallet.h
jonasschnelli,2017-05-04T13:13:06Z,Removed.,https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114768747,114768747,src/wallet/wallet.h
NicolasDorier,2017-05-04T13:21:30Z,"why ? I mean KeypoolCache is (int, KeyId) anyway. It is just strange to pass them as two distinct parameters here.\n",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114770582,114770582,src/wallet/wallet.h
ryanofsky,2017-05-04T19:28:01Z,"> holding a flexible data-structure (KeypoolCache) allows us to be more flexible in future\n\nI don't have any problem with keeping `KeypoolCache` if it will be useful later.\n\nWhat seems bad to me is using `std::set` with a custom comparison function to emulate a map. Would suggest removing `nIndex` and `operator<` from KeypoolCache and using `std::map<int64_t, KeypoolCache>`",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114867245,114867245,src/wallet/wallet.h
jonasschnelli,2017-05-04T19:37:12Z,"Fair point. The question is should we do it in this PR or later. But since we significant change the  set's content, It should be changed now (which I will do soon).",https://github.com/bitcoin/bitcoin/pull/10238#discussion_r114868956,114868956,src/wallet/wallet.h
