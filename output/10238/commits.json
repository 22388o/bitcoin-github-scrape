[
  {
    "sha": "af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjFjNGVjNTNhZjEzOGFmZGQ4NDFhMTg5M2E4ZmI4NGU1Y2NiZjIx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T13:30:50Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-04T13:12:29Z"
      },
      "message": "Change setKeyPool from pure int64_t to a custom class for more flexible in-mem storage",
      "tree": {
        "sha": "0109415b5e21c960ff6f8176af166e989c42ca9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0109415b5e21c960ff6f8176af166e989c42ca9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlkLKL4ACgkQHrd2uwPH\nki3ByhAAhjPYjRcYXT1x0W4e6X99yYFa5STMLsJF3FpPFKzpdyz46Kfvhp+jo03R\ncVwJS2UqPuzUlSwXhffxzqDvzcwY9F7VZzt+gdUX+Bna87KXoVb4vAf6+HljOB4r\nPKdBy96wSDCx7EFNRDiEttH9wroE3N8IYLO7nKlLTMAhN0vbO/O+1pOBS2Pmahoj\nAM22Ki+J72ISK+Nx4uyCJ4vXQX4DtKcUvh4oV50+Vfx3YlyzbZ4ce5sRkc9NKlTS\nb6sK4z3o/4OE6JlSAx7vrF315gTGdid0dUDvRKQ5DMxewkYImDtOg3Ez9yBJ7+mn\nqGjBZCYPCLpE7MCIZXVJd82QauKZay5DbRXXv6Ri24EW5VMIwxmXxOq/DpbQT5p8\nLKyhuW5MfZn/3wpknMYuu4QoyJnLtD3xgdWOtO8RaeYbSGjlZTRgs5KhkN2+cxeP\ns33KPNBDBLmD+IKJM3AqEAvGZCV7HsaY+2rGUSvD2sdA9BMRbKffpGRgvTpG6qLn\np2AEeNNgz2VgGuVxEAplJ5M3pyJbRuJ5k3jKb4Ybue6KQbh3wwxs4iPbSLvZEaZc\nw+Sx7C0tALiYeRZMxr1wB0pccLh5k3QOrp8bw9Vlrg6mX4T/tzrBShydoBFeCG/V\n/VyAiybMGyueLYSp82wUOxDDdKHvIXN+BPkRGyyXR1UCbE0uSNw=\n=HtfH\n-----END PGP SIGNATURE-----",
        "payload": "tree 0109415b5e21c960ff6f8176af166e989c42ca9b\nparent 35da2aeed7d4000dde93957c3b6e048ab83c4f2b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1492695050 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1493903549 +0200\n\nChange setKeyPool from pure int64_t to a custom class for more flexible in-mem storage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af1c4ec53af138afdd841a1893a8fb84e5ccbf21/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 35,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d698ea18bb1d000eea83e82d7e5917ed830121af",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1c4ec53af138afdd841a1893a8fb84e5ccbf21/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1c4ec53af138afdd841a1893a8fb84e5ccbf21/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
        "patch": "@@ -2941,8 +2941,8 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(*dbw);\n-        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n-            walletdb.ErasePool(nIndex);\n+        for(const KeypoolCache &poolPair : setKeyPool)\n+            walletdb.ErasePool(poolPair.nIndex);\n         setKeyPool.clear();\n \n         if (!TopUpKeyPool()) {\n@@ -2965,10 +2965,10 @@ size_t CWallet::KeypoolCountExternalKeys()\n \n     // count amount of external keys\n     size_t amountE = 0;\n-    for(const int64_t& id : setKeyPool)\n+    for(const KeypoolCache &poolPair : setKeyPool)\n     {\n         CKeyPool tmpKeypool;\n-        if (!walletdb.ReadPool(id, tmpKeypool))\n+        if (!walletdb.ReadPool(poolPair.nIndex, tmpKeypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         amountE += !tmpKeypool.fInternal;\n     }\n@@ -3011,10 +3011,11 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (i < missingInternal)\n                 internal = true;\n             if (!setKeyPool.empty())\n-                nEnd = *(--setKeyPool.end()) + 1;\n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(internal), internal)))\n+                nEnd = (*(--setKeyPool.end())).nIndex + 1;\n+            CPubKey pubkey = GenerateNewKey(internal);\n+            if (!walletdb.WritePool(nEnd, CKeyPool(pubkey, internal)))\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            setKeyPool.insert(nEnd);\n+            setKeyPool.insert(KeypoolCache(nEnd, pubkey.GetID()));\n             LogPrintf(\"keypool added key %d, size=%u, internal=%d\\n\", nEnd, setKeyPool.size(), internal);\n         }\n     }\n@@ -3038,20 +3039,20 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool int\n         CWalletDB walletdb(*dbw);\n \n         // try to find a key that matches the internal/external filter\n-        for(const int64_t& id : setKeyPool)\n+        for(const KeypoolCache &poolPair : setKeyPool)\n         {\n             CKeyPool tmpKeypool;\n-            if (!walletdb.ReadPool(id, tmpKeypool))\n+            if (!walletdb.ReadPool(poolPair.nIndex, tmpKeypool))\n                 throw std::runtime_error(std::string(__func__) + \": read failed\");\n             if (!HaveKey(tmpKeypool.vchPubKey.GetID()))\n                 throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n             if (!IsHDEnabled() || !CanSupportFeature(FEATURE_HD_SPLIT) || tmpKeypool.fInternal == internal)\n             {\n-                nIndex = id;\n+                nIndex = poolPair.nIndex;\n                 keypool = tmpKeypool;\n-                setKeyPool.erase(id);\n+                setKeyPool.erase(poolPair);\n                 assert(keypool.vchPubKey.IsValid());\n-                LogPrintf(\"keypool reserve %d\\n\", nIndex);\n+                LogPrintf(\"keypool reserve %d\\n\", poolPair.nIndex);\n                 return;\n             }\n         }\n@@ -3066,12 +3067,12 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex)\n+void CWallet::ReturnKey(int64_t nIndex, const CKeyID &keyid)\n {\n     // Return to key pool\n     {\n         LOCK(cs_wallet);\n-        setKeyPool.insert(nIndex);\n+        setKeyPool.insert(KeypoolCache(nIndex, keyid));\n     }\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n@@ -3112,9 +3113,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n         int64_t now = GetTime();\n         int64_t oldest_external = now, oldest_internal = now;\n \n-        for(const int64_t& id : setKeyPool)\n+        for(const KeypoolCache &id : setKeyPool)\n         {\n-            if (!walletdb.ReadPool(id, keypool)) {\n+            if (!walletdb.ReadPool(id.nIndex, keypool)) {\n                 throw std::runtime_error(std::string(__func__) + \": read failed\");\n             }\n             if (keypool.fInternal && keypool.nTime < oldest_internal) {\n@@ -3130,7 +3131,7 @@ int64_t CWallet::GetOldestKeyPoolTime()\n         return std::max(oldest_internal, oldest_external);\n     }\n     // load oldest key from keypool, get time and return\n-    int64_t nIndex = *(setKeyPool.begin());\n+    int64_t nIndex = (*(setKeyPool.begin())).nIndex;\n     if (!walletdb.ReadPool(nIndex, keypool))\n         throw std::runtime_error(std::string(__func__) + \": read oldest key in keypool failed\");\n     assert(keypool.vchPubKey.IsValid());\n@@ -3312,7 +3313,7 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1)\n-        pwallet->ReturnKey(nIndex);\n+        pwallet->ReturnKey(nIndex, vchPubKey.GetID());\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n@@ -3324,10 +3325,10 @@ void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n     CWalletDB walletdb(*dbw);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64_t& id, setKeyPool)\n+    for (const KeypoolCache &poolPair : setKeyPool)\n     {\n         CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n+        if (!walletdb.ReadPool(poolPair.nIndex, keypool))\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();"
      },
      {
        "sha": "3ff9d4c9ced7d398570f90f7eaf2567d0f3a1e64",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af1c4ec53af138afdd841a1893a8fb84e5ccbf21/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af1c4ec53af138afdd841a1893a8fb84e5ccbf21/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=af1c4ec53af138afdd841a1893a8fb84e5ccbf21",
        "patch": "@@ -696,7 +696,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(CKeyMetadata& metadata, CKey& secret, bool internal = false);\n \n-    std::set<int64_t> setKeyPool;\n+\n+    // class for holding a keypool-key-entry in memory\n+    class KeypoolCache {\n+    public:\n+        int64_t nIndex;\n+        CKeyID keyId;\n+        KeypoolCache(int64_t index, CKeyID id) : nIndex(index), keyId(id) {}\n+        bool operator<(const KeypoolCache& rhs) const { return nIndex < rhs.nIndex; }\n+    };\n+\n+    std::set<KeypoolCache> setKeyPool;\n \n     int64_t nTimeFirstKey;\n \n@@ -741,12 +751,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n     {\n-        setKeyPool.insert(nIndex);\n+        CKeyID keyid = keypool.vchPubKey.GetID();\n+        setKeyPool.insert(KeypoolCache(nIndex, keyid));\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n         // stored metadata for that key later, which is fine.\n-        CKeyID keyid = keypool.vchPubKey.GetID();\n         if (mapKeyMetadata.count(keyid) == 0)\n             mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n     }\n@@ -957,7 +967,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool internal);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex, const CKeyID &keyid);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;"
      }
    ]
  }
]