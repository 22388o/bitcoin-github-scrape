[
  {
    "sha": "ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDJlMTgzOThiM2FiNjU3ZTk4ZTNlMWZlMTM1Y2JmOGRkOTRmZGEz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-20T13:29:48Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-10-25T14:33:56Z"
      },
      "message": "Remove fs::relative call and fix listwalletdir tests\n\nThe implementation of fs::relative resolves symlinks which is not intended\nin ListWalletDir. The replacement does what is required, and listwalletdir\ntests are fixed accordingly.\n\nAlso, building with boost 1.47 required 2 changes:\n - replace fs::relative with an alternative implementation;\n - fix fs::recursive_directory_iterator iteration.",
      "tree": {
        "sha": "5a98156130dbeab900b4f1cd44596163fa24d1a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a98156130dbeab900b4f1cd44596163fa24d1a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "613fc95ee4ead5962e960137e694aec5888e2680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/613fc95ee4ead5962e960137e694aec5888e2680",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/613fc95ee4ead5962e960137e694aec5888e2680"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 11,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d66d8a37753d03fa81788ee6140f574ca04af189",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
        "patch": "@@ -52,12 +52,17 @@ static bool IsBerkeleyBtree(const fs::path& path)\n std::vector<fs::path> ListWalletDir()\n {\n     const fs::path wallet_dir = GetWalletDir();\n+    const size_t offset = wallet_dir.string().size() + 1;\n     std::vector<fs::path> paths;\n \n-    for (auto it = fs::recursive_directory_iterator(wallet_dir); it != end(it); ++it) {\n+    for (auto it = fs::recursive_directory_iterator(wallet_dir); it != fs::recursive_directory_iterator(); ++it) {\n+        // Get wallet path relative to walletdir by removing walletdir from the wallet path.\n+        // This can be replaced by boost::filesystem::lexically_relative once boost is bumped to 1.60.\n+        const fs::path path = it->path().string().substr(offset);\n+\n         if (it->status().type() == fs::directory_file && IsBerkeleyBtree(it->path() / \"wallet.dat\")) {\n             // Found a directory which contains wallet.dat btree file, add it as a wallet.\n-            paths.emplace_back(fs::relative(it->path(), wallet_dir));\n+            paths.emplace_back(path);\n         } else if (it.level() == 0 && it->symlink_status().type() == fs::regular_file && IsBerkeleyBtree(it->path())) {\n             if (it->path().filename() == \"wallet.dat\") {\n                 // Found top-level wallet.dat btree file, add top level directory \"\"\n@@ -68,7 +73,7 @@ std::vector<fs::path> ListWalletDir()\n                 // software will never create these files but will allow them to be\n                 // opened in a shared database environment for backwards compatibility.\n                 // Add it to the list of available wallets.\n-                paths.emplace_back(fs::relative(it->path(), wallet_dir));\n+                paths.emplace_back(path);\n             }\n         }\n     }"
      },
      {
        "sha": "4f663c82c715cf6890437680ffe043d977d70a98",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=ed2e18398b3ab657e98e3e1fe135cbf8dd94fda3",
        "patch": "@@ -71,7 +71,7 @@ def wallet_file(name):\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n@@ -144,7 +144,7 @@ def wallet_file(name):\n \n         self.restart_node(0, extra_args)\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n \n         wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n@@ -291,7 +291,7 @@ def wallet_file(name):\n         assert_equal(self.nodes[0].listwallets(), ['w1'])\n         assert_equal(w1.getwalletinfo()['walletname'], 'w1')\n \n-        assert_equal(set(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), set(['', 'w3', 'w2', os.path.join('sub', 'w5'), 'w7', 'w9', 'w7', 'w8_copy', 'w1', 'w8', 'w']))\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy', 'w9'])\n \n         # Test backing up and restoring wallets\n         self.log.info(\"Test wallet backup\")"
      }
    ]
  }
]