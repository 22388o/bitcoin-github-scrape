[
  {
    "sha": "ccedbafd73514e0e5b58c1a6251029e84dadaea8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2VkYmFmZDczNTE0ZTBlNWI1OGMxYTYyNTEwMjllODRkYWRhZWE4",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-02-20T22:25:24Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2018-03-29T05:34:37Z"
      },
      "message": "Increase LevelDB max_open_files unless on 32-bit Unix.\n\nThis change significantly increases IBD performance by increasing the\namount of the UTXO index that can remain in memory. To ensure this\ndoesn't cause problems in the future, a static_assert on the LevelDB\nversion has been added, which must be updated by anyone upgrading\nLevelDB.",
      "tree": {
        "sha": "7c25ca67b7d9aedfba73fd2e6c8bce9a0b0c357f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c25ca67b7d9aedfba73fd2e6c8bce9a0b0c357f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccedbafd73514e0e5b58c1a6251029e84dadaea8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEr5FzGLjELREnIWJdFX78rLxkhCIFAlq8eu0ACgkQFX78rLxk\nhCJYFQ/+LopKJKk3cQgqEuuddrDonMUoRs50K6lJJomq4HYrnHMVRkuFd0tV59in\nFiPbtpf6bhifluNT3CwUXrA7yIyn24/+Hs6TyznbC05YyODRFadiaPXwinj0wU5N\nPyOcXY4b5KaMgZGEbv7QEZTR7XVKXlvpAb/4gqflM0dgzKR/WQ7C0gBz28jX9VMF\nLcm2NzA1XEmx7qK+/otxmjSj+P9wLITuCm+1Wj1FKGELz5pMY9Zf0BhXjI7F7/65\nyh04fAkDzzit/HKBL0z3F8GlCg6pr9Z5I1kSdxzH7kUCviSGCeCRO/lwnMEH5HsJ\niIfbiYCB6AF7KtpRcKJYhYQheU5OcY8aAs4SH0QI5X+PZxb5O7Eoq+2H8Od/KXd+\nzEg4RzwRrqWeeYd///vFnvaR1Fj2cpGSV3xZ65gqKvDF1o9twTPjmLCCwjI/2xIA\nnNRR6je1XDmKdArh3RC7TDsGPZa324YAR+45XSVCARtKo2dydzUubl8WOGyvYElH\n24ZspVNz0jEaM3glmfBp3Cdo2c/x8I1LDF42CWJ5npcMygmV/euAK5yA3Hz26VIl\nfnZ+xEcqK/V462GkWUgujEi/pHZB4xIm4L7u44weVcw+t/T5fRaY13g1nYS/yzHp\nSIRPRL182AIlHOyoLNZoO8tpuGFTrvLnNhWr2WoRnETjy5p0G58=\n=hTj2\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c25ca67b7d9aedfba73fd2e6c8bce9a0b0c357f\nparent 624bee96597c1d59018e58131b8285c0b332700d\nauthor Evan Klitzke <evan@eklitzke.org> 1519165524 -0500\ncommitter Evan Klitzke <evan@eklitzke.org> 1522301677 -0700\n\nIncrease LevelDB max_open_files unless on 32-bit Unix.\n\nThis change significantly increases IBD performance by increasing the\namount of the UTXO index that can remain in memory. To ensure this\ndoesn't cause problems in the future, a static_assert on the LevelDB\nversion has been added, which must be updated by anyone upgrading\nLevelDB.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccedbafd73514e0e5b58c1a6251029e84dadaea8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccedbafd73514e0e5b58c1a6251029e84dadaea8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccedbafd73514e0e5b58c1a6251029e84dadaea8/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "624bee96597c1d59018e58131b8285c0b332700d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/624bee96597c1d59018e58131b8285c0b332700d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/624bee96597c1d59018e58131b8285c0b332700d"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 76,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f4513dca1f20c049f56cce87e2cc32d08fa837b5",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 50,
        "deletions": 1,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccedbafd73514e0e5b58c1a6251029e84dadaea8/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccedbafd73514e0e5b58c1a6251029e84dadaea8/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=ccedbafd73514e0e5b58c1a6251029e84dadaea8",
        "patch": "@@ -543,7 +543,10 @@ its upstream repository.\n Current subtrees include:\n \n - src/leveldb\n-  - Upstream at https://github.com/google/leveldb ; Maintained by Google, but open important PRs to Core to avoid delay\n+  - Upstream at https://github.com/google/leveldb ; Maintained by Google, but\n+    open important PRs to Core to avoid delay.\n+  - **Note**: Follow the instructions in [Upgrading LevelDB](#upgrading-leveldb) when\n+    merging upstream changes to the leveldb subtree.\n \n - src/libsecp256k1\n   - Upstream at https://github.com/bitcoin-core/secp256k1/ ; actively maintaned by Core contributors.\n@@ -554,6 +557,52 @@ Current subtrees include:\n - src/univalue\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n \n+Upgrading LevelDB\n+---------------------\n+\n+Extra care must be taken when upgrading LevelDB. This section explains issues\n+you must be aware of.\n+\n+### File Descriptor Counts\n+\n+In most configurations we use the default LevelDB value for `max_open_files`,\n+which is 1000 at the time of this writing. If LevelDB actually uses this many\n+file descriptors it will cause problems with Bitcoin's `select()` loop, because\n+it may cause new sockets to be created where the fd value is >= 1024. For this\n+reason, on 64-bit Unix systems we rely on an internal LevelDB optimization that\n+uses `mmap()` + `close()` to open table files without actually retaining\n+references to the table file descriptors. If you are upgrading LevelDB, you must\n+sanity check the changes to make sure that this assumption remains valid.\n+\n+In addition to reviewing the upstream changes in `env_posix.cc`, you can use `lsof` to\n+check this. For example, on Linux this command will show open `.ldb` file counts:\n+\n+```bash\n+$ lsof -p $(pidof bitcoind) |\\\n+    awk 'BEGIN { fd=0; mem=0; } /ldb$/ { if ($4 == \"mem\") mem++; else fd++ } END { printf \"mem = %s, fd = %s\\n\", mem, fd}'\n+mem = 119, fd = 0\n+```\n+\n+The `mem` value shows how many files are mmap'ed, and the `fd` value shows you\n+many file descriptors these files are using. You should check that `fd` is a\n+small number (usually 0 on 64-bit hosts).\n+\n+See the notes in the `SetMaxOpenFiles()` function in `dbwrapper.cc` for more\n+details.\n+\n+### Consensus Compatibility\n+\n+It is possible for LevelDB changes to inadvertently change consensus\n+compatibility between nodes. This happened in Bitcoin 0.8 (when LevelDB was\n+first introduced). When upgrading LevelDB you should review the upstream changes\n+to check for issues affecting consensus compatibility.\n+\n+For example, if LevelDB had a bug that accidentally prevented a key from being\n+returned in an edge case, and that bug was fixed upstream, the bug \"fix\" would\n+be an incompatible consensus change. In this situation the correct behavior\n+would be to revert the upstream fix before applying the updates to Bitcoin's\n+copy of LevelDB. In general you should be wary of any upstream changes affecting\n+what data is returned from LevelDB queries.\n \n Git and GitHub tips\n ---------------------"
      },
      {
        "sha": "fef8eedd147464683134684da04320d798c3cf69",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccedbafd73514e0e5b58c1a6251029e84dadaea8/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccedbafd73514e0e5b58c1a6251029e84dadaea8/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=ccedbafd73514e0e5b58c1a6251029e84dadaea8",
        "patch": "@@ -71,20 +71,45 @@ class CBitcoinLevelDBLogger : public leveldb::Logger {\n     }\n };\n \n+static void SetMaxOpenFiles(leveldb::Options *options) {\n+    // On most platforms the default setting of max_open_files (which is 1000)\n+    // is optimal. On Windows using a large file count is OK because the handles\n+    // do not interfere with select() loops. On 64-bit Unix hosts this value is\n+    // also OK, because up to that amount LevelDB will use an mmap\n+    // implementation that does not use extra file descriptors (the fds are\n+    // closed after being mmaped).\n+    //\n+    // Increasing the value beyond the default is dangerous because LevelDB will\n+    // fall back to a non-mmap implementation when the file count is too large.\n+    // On 32-bit Unix host we should decrease the value because the handles use\n+    // up real fds, and we want to avoid fd exhaustion issues.\n+    //\n+    // See PR #12495 for further discussion.\n+\n+    int default_open_files = options->max_open_files;\n+#ifndef WIN32\n+    if (sizeof(void*) < 8) {\n+        options->max_open_files = 64;\n+    }\n+#endif\n+    LogPrint(BCLog::LEVELDB, \"LevelDB using max_open_files=%d (default=%d)\\n\",\n+             options->max_open_files, default_open_files);\n+}\n+\n static leveldb::Options GetOptions(size_t nCacheSize)\n {\n     leveldb::Options options;\n     options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n     options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n     options.filter_policy = leveldb::NewBloomFilterPolicy(10);\n     options.compression = leveldb::kNoCompression;\n-    options.max_open_files = 64;\n     options.info_log = new CBitcoinLevelDBLogger();\n     if (leveldb::kMajorVersion > 1 || (leveldb::kMajorVersion == 1 && leveldb::kMinorVersion >= 16)) {\n         // LevelDB versions before 1.16 consider short writes to be corruption. Only trigger error\n         // on corruption in later versions.\n         options.paranoid_checks = true;\n     }\n+    SetMaxOpenFiles(&options);\n     return options;\n }\n "
      }
    ]
  }
]