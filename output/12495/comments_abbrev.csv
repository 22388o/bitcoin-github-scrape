eklitzke,2018-02-22T14:41:06Z,"I measured the impact of this change, you can see a graph here: https://monad.io/max_open_files.png\n\nMethod for creating this graph:\n * Ran `bitcoind -reindex-chainstate` on a full node that had already been synced on mainnet\n * Instance is a GCP n1-standard-1 host which has one vCPU pinned to host CPU, 4 GB of RAM, and very slow virtualized disks",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-367701278,367701278,
laanwj,2018-02-22T14:51:39Z,"> I measured the impact of this change, you can see a graph here: https://monad.io/max_open_files.png\n\nNice!",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-367704702,367704702,
eklitzke,2018-02-22T20:40:42Z,"The reason for this speedup isn't super obvious, and I think merits some explanation. I've spent a lot of time the last three days reading the LevelDB source code and think I understand now. It actually has nothing to do with reducing the number of open/close/mmap/munmap syscalls, as I had originally thought.\n\nThe LevelDB terminology for a `.ldb` file is a ""table"", and the tables are composed ",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-367815005,367815005,
donaloconnor,2018-02-22T22:00:40Z,"@eklitzke Cheers for referencing #12123 . Replying here to get subscribed.\n\nI am going to do more tests on a Windows machine at the weekend with your changes here and report back my results.\n\nI am pretty familiar with Windows internals so I'll do further investigations to see if we can have similar changes on Windows.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-367837075,367837075,
donaloconnor,2018-02-24T19:23:33Z,"I had a closer look at Windows and the way we use the win32 apis in LevelDB.\n\nObservations:\n\n1. Win32RandomAccessFile does not use memory mapped files.\n2. The file opening and reading is done on the Win32 API level: CreateFile, ReadFile. There is no limit to the number of files that can be opened at this level (Use Window's HANDLES rather than FDs). Limits are at the C runtime library le",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-368252740,368252740,
eklitzke,2018-02-26T22:44:45Z,"I have a branch that measures how much extra memory this uses. On my node, the average block index size is 19797 bytes for the chainstate database. The bloom filters (which are also loaded in memory) are 6 bytes or 7 bytes depending on the file. Thus a reasonable approximation is 20 KB of data per chainstate `.ldb` file. This means on master the indexes use about 1 MB of memory, and with this bran",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-368678039,368678039,
donaloconnor,2018-03-01T21:38:52Z,"I ran bitcoind -reindex-chainstate on my Windows 10 PC with the full node synced.\n\nFirst I ran using the default: `max_open_files=64` (Blue series)\nNext I ran using `max_open_files=1000` (Red series).\n\nThe results show a substantial difference in sync time.\n\n![image](https://user-images.githubusercontent.com/6394033/36870837-37cffa7c-1d98-11e8-84fa-507a290a89bb.png)\n\nTime to reac",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369739699,369739699,
achow101,2018-03-01T22:10:17Z,That's a pretty big speedup! Does this only work on 64 bit systems? Would it be possible to do it for all systems?,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369748527,369748527,
eklitzke,2018-03-02T05:03:49Z,"At least for POSIX systems, the issue is that LevelDB won't use `mmap()` on 32-bit systems because the virtual memory space isn't large enough. The chainstate database is larger than 4 GB. On such hosts, each open file handle really does use up a file descriptor, which can obviously lead to problems in a `select(2)` loop if the fd count exceeds 1024. I haven't posted this data yet, but I also have",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369821550,369821550,
luke-jr,2018-03-02T05:11:18Z,"Windows by default has a limit of 64 descriptors in `select()`, but:\n\n1. This is a limit on the number of descriptors added to the fd_set, not a limit on total descriptors in the process.\n2. We override `FD_SETSIZE` to 1024 in compat.h.\n\n(POSIX is supposed to allow changing `FD_SETSIZE` too, but this is broken in some versions of glibc)",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369822424,369822424,
donaloconnor,2018-03-02T12:04:56Z,"> Does this only work on 64 bit systems\n\nThe LevelDB's Win32 code does not use memory mapped files (Unlike the POSIX version) so this change should improve both 32/64bit versions of Windows. \n\n>@donaloconnor Can you comment on whether select() loops have the same 1024 fd limit on Windows?\n\nWhat @luke-jr said above ^. Again since the LevelDB code for Win32 is using the Win32 ReadFile/Cr",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369903951,369903951,
donaloconnor,2018-03-02T12:18:26Z,"Interesting stats from observing Disk I/O reported by Task Manager:\n\n`max_open_files=64` - seems to hover around 2 - 6 MB/s with bursts of 40MB/s +\n`max_open_files=1000` - Seemed to be consistently above 60 MB/s when ever I looked at it\n\nThis backs up the theory that since the files remain open, the file cache on Windows remains warm.\n\n*Not scientific, just observations. Can do some ",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-369906511,369906511,
eklitzke,2018-03-03T17:47:49Z,"I don't think it's related to the disk cache, it's due to the increased availability of the deserialized buffer indexes (and bloom filters) in memory. At least on Unix, files being open is unrelated to the availability of their contents in the page cache. In my measurements it takes four disk seeks just to open each .ldb file (which is related to parsing out the file header, bloom filter, and the ",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370166267,370166267,
donaloconnor,2018-03-03T18:07:12Z,"Yes, I'm also now inclined to believe that it's probably unrelated to disk cache. Actually I've seen higher utilization of CPU in the 1000 limit case (mine was about 60-80% CPU usage, where as with the 64 limit it was just 30% mostly.\n\nAnyway, I just finished the tests again a few minutes ago:\n\n`max_open_files=64`  -reindex-chainstate time: **13h 30m**\n`max_open_files=1000` -reindex-chai",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370167628,370167628,
eklitzke,2018-03-03T18:27:05Z,Can you let me know if the comment looks correct regarding Windows behavior?,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370168999,370168999,
donaloconnor,2018-03-03T18:55:29Z,"> Can you let me know if the comment looks correct regarding Windows behavior?\n\nComment LGTM!",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370170999,370170999,
luke-jr,2018-03-03T19:10:29Z,"Might be good to log somewhere which limit is being used...\n\n```C++\n#ifndef WIN32\n    if (sizeof(void*) < 8 || leveldb::kMajorVersion != 1 || leveldb::kMinorVersion < 3 || leveldb::kMinorVersion > 20) {\n        options->max_open_files = 64;\n        LogPrint(BCLog::LEVELDB, ""LevelDB max_open_files=%d\n"", options->max_open_files);\n    } else {\n        LogPrint(BCLog::LEVELDB, ""LevelD",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370172051,370172051,
eklitzke,2018-03-03T20:39:10Z,"I've added the log statement. I also added a `static_assert()` on the exact LevelDB version. That way in the future if someone upgrades LevelDB, they will be forced to check that the POSIX `RandomAccessFile` implementation hasn't changed in a way that will cause fd exhaustion issues. What do you think of this approach?",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370178046,370178046,
luke-jr,2018-03-03T20:44:13Z,"It's a booby trap that everyone using system LevelDB libraries will need to patch out. But maybe a good idea anyway, to re-enforce the danger of using other versions. But it should probably at least tolerate older versions back to 1.3 (which added mmap support).",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370178384,370178384,
eklitzke,2018-03-03T21:33:48Z,"Booby trap is intentional. I couldn't figure out how to make `git log -GkMinorVersion src/leveldb` work correctly with merge commits/subtrees, so I did this manually. From what I can tell the update history for LevelDB in the Bitcoin source tree is:\n\n * 2012-06-25 initial import of 1.5\n * 2012-12-12 upgrade to 1.7\n * 2013-08-24 upgrade to 1.13\n * 2013-12-12 upgrade to 1.15\n * 2014-05-0",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370181582,370181582,
luke-jr,2018-03-03T21:42:55Z,"Considering that LevelDB upgrades already need to be checked for consensus compatibility, I guess it doesn't make sense to be stricter on this regard.\n\nPerhaps a checklist for things to check on updates should be added to `doc/developer-notes.md` instead.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370182136,370182136,
luke-jr,2018-03-03T21:46:43Z,"```C++\n    const char *default_indicator = "" (default)"";\n#ifndef WIN32\n    if (sizeof(void*) < 8) {\n        options->max_open_files = 64;\n        default_indicator = """";\n    }\n#endif\n    LogPrint(BCLog::LEVELDB, ""LevelDB max_open_files=%d%s\n"", options->max_open_files, default_indicator);\n```",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370182392,370182392,
laanwj,2018-03-05T15:12:50Z,"Using system leveldb is generally discouraged, because we have our own fork of leveldb and we only test with that one. I'd say if you really, really want to use that, patching out a boobytrap is the least of worries.\n\nGood idea to log the value, but yes it will get logged twice in some cases now.\n",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370450357,370450357,
donaloconnor,2018-03-05T16:32:53Z,"This seems a bit overly complicated imo. We could just log both values (set and default):\n\n```cpp\nint default_max = options->max_open_files;\n\n#ifndef WIN32\n    if (sizeof(void*) < 8) {\n        options->max_open_files = 64;\n    } else\n#endif\n\nLogPrint(BCLog::LEVELDB, ""LevelDB max_open_files=%d (Default=%d)\n"", options->max_open_files, default_max);\n```\n\nAlso, I feel the ",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370478530,370478530,
eklitzke,2018-03-05T17:35:40Z,"I thought about this more and I think that a note about LevelDB upgrades in `docs/developer-notes.md` is sufficient. I've added some notes to that file in this change. We do upgrades pretty rarely and it looks like in the past it's usually been sipa who has done it. I'm interested in long-term ownership of the LevelDB code (as I mentioned, I'm working on other LevelDB changes in some other branche",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370499445,370499445,
eklitzke,2018-03-05T21:31:28Z,"Added this to the top level comment in this PR, but adding here for visibility.\n\nFlame graph I generated of `-reindex-chainstate`:\n * Without this change: https://monad.io/maxopenfiles-master.svg\n * With this change: https://monad.io/maxopenfiles-increase.svg\n\nNote especially the time spent in `leveldb::TableCache::Get` between the two implementations",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370573179,370573179,
donaloconnor,2018-03-05T22:42:04Z,utACK,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-370594015,370594015,
jimpo,2018-03-09T13:14:16Z,"ACK 32372e9\n\nTested on Linux x86_64. Reduced initial sync time on an EC2 m5.xlarge from 8:31:01 to 6:36:25.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-371808846,371808846,
eklitzke,2018-03-09T18:54:57Z,Updated and rebased to reword the consensus compatibility issue that @luke-jr noted.,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-371911477,371911477,
donaloconnor,2018-03-10T19:54:12Z,Can we change the title to include windows. Just for future reference.,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-372060643,372060643,
eklitzke,2018-03-10T23:41:59Z,"Updated the title for this PR, and rewrote the pull request description to reflect the discoveries/changes made since I opened the PR.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-372076440,372076440,
ryanofsky,2018-03-12T22:18:08Z,utACK 21e2144a3159fdadd937388be10545dccd524d0f. Only change since last review is in developer notes.,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-372481480,372481480,
eklitzke,2018-03-15T03:42:49Z,@laanwj Can you take another look at this? ,https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-373251295,373251295,
eklitzke,2018-03-22T04:55:08Z,"@donaloconnor As you acked this, can you change your review status? It stills shows up in GitHub as ""requested changes"".\n\n@laanwj Sorry to ping you on this again, but you requested changes on this earlier and I think this is ready to go (unless you have further objections). I'm trying to not stack PRs in the dbwrapper code, and this is preventing me from submitting further changes for review.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-375179681,375179681,
eklitzke,2018-03-29T06:20:00Z,"Rebased with master, as other dbwrapper changes have been merged since my last update.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-377133973,377133973,
laanwj,2018-03-29T13:03:39Z,"utACK https://github.com/bitcoin/bitcoin/pull/12495/commits/ccedbafd73514e0e5b58c1a6251029e84dadaea8 - with the comment that I think relying on undocumented behavior of leveldb is risky. This is only remotely acceptable because we have our own leveldb tree (https://github.com/bitcoin-core/leveldb), and don't blindly merge changes from upstream. I also think you have properly documented this.",https://github.com/bitcoin/bitcoin/pull/12495#issuecomment-377228329,377228329,
laanwj,2018-02-22T14:22:39Z,Add `static`?,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r169968749,169968749,src/dbwrapper.cpp
laanwj,2018-02-22T14:27:17Z,"I don't think this does what you expect it to. As I understand it, confirmed by the [gcc page](https://www.gnu.org/software/libc/manual/html_node/Feature-Test-Macros.html) about it, `_POSIX_C_SOURCE` is supposed to be defined explicitly at the top of the compilation unit to request certain POSIX C library features. It is not defined by the compiler. So it can't be used to detect whether the platfo",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r169970767,169970767,src/dbwrapper.cpp
eklitzke,2018-02-22T19:37:16Z,"You're absolutely right, I will fix this.",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r170069914,170069914,src/dbwrapper.cpp
eklitzke,2018-02-22T20:26:59Z,The `static` specifier isn't necessary because `constexpr` functions are evaluated at compile time. I double checked that `nm ./src/bitcoind | c++filt | grep Permissible` produces no output.,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r170083156,170083156,src/dbwrapper.cpp
donaloconnor,2018-03-03T18:53:34Z,max_open_files is not set explicitly before calling SetMaxOpenFiles. Probably should be set in SetMaxOpenFiles explicitly to 1000 before the #ifndef ,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172025190,172025190,src/dbwrapper.cpp
luke-jr,2018-03-03T18:53:50Z,"Prefer, to be safe:\n\n```C++\nif (sizeof(void*) < 8 || leveldb::kMajorVersion != 1 || leveldb::kMinorVersion < 3 || leveldb::kMinorVersion > 20) {\n    options->max_open_files = 64;\n}\n```",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172025197,172025197,src/dbwrapper.cpp
luke-jr,2018-03-03T18:59:45Z,The constructor for `leveldb::Options` sets it to 1000.,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172025351,172025351,src/dbwrapper.cpp
donaloconnor,2018-03-03T19:03:57Z,I didn't scroll far another down :) - you're right.,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172025474,172025474,src/dbwrapper.cpp
luke-jr,2018-03-03T21:41:15Z,This will log twice!,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172029575,172029575,src/dbwrapper.cpp
luke-jr,2018-03-05T17:40:26Z,Please add mention of the need to check for consensus-incompatible changes.,https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172268867,172268867,doc/developer-notes.md
eklitzke,2018-03-05T17:45:33Z,"I'm familiar with the accidental fork that was introduced in 0.8 when LevelDB was first added, but what specifically would you like me to add here? That developers should test their change (e.g. on testnet) when updating LevelDB?",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172270437,172270437,doc/developer-notes.md
luke-jr,2018-03-05T17:53:45Z,"Testing is not sufficient. The LevelDB changes need to be reviewed for consensus-compatibility. For example, if there was a bug that caused a record with a particular CRC to not be returned later on, and LevelDB fixed this bug, we would need to reject the bugfix from Bitcoin since it would be a hardfork.",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172272657,172272657,doc/developer-notes.md
eklitzke,2018-03-05T18:43:02Z,"Updated here, and you can see the GH rendering at https://github.com/eklitzke/bitcoin/blob/ldb_max_open_files/doc/developer-notes.md",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172287109,172287109,doc/developer-notes.md
luke-jr,2018-03-06T03:46:03Z,"Eh, that's not what I meant... In this example:\n\nYou set database key ABC to DEF; you then get database key ABC, but due to a bug in LevelDB, it answers that the key doesn't exist.\n\nIf you now fix this LevelDB bug, you have broken consensus because all the other nodes expect key ABC to be non-existent.",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172402200,172402200,doc/developer-notes.md
ryanofsky,2018-03-06T14:29:03Z,"Could also suggest checking the log for warnings like:\n\nhttps://github.com/bitcoin/bitcoin/blob/7deba93bdc76616011a9f493cbc203d60084416f/src/netbase.cpp#L450",https://github.com/bitcoin/bitcoin/pull/12495#discussion_r172532248,172532248,doc/developer-notes.md
