sipa,2016-09-28T02:46:19Z,"utACK 76992bf22987ead0c2643685a228769ef0932a1b\n\nSide note: it seems we have no tests for bitcoin-tx JSON functionality, despite there being some other tests for it. Perhaps it can be added (see `src/test/data/bitcoin-util-test.py`).\n",https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250057803,250057803,
jonasschnelli,2016-09-28T13:04:32Z,utACK 76992bf22987ead0c2643685a228769ef0932a1b\nAgree with @sipa about the tests.\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250160335,250160335,
jnewbery,2016-09-28T17:53:57Z,I've added JSON test cases in https://github.com/bitcoin/bitcoin/pull/8829\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250245150,250245150,
MarcoFalke,2016-09-29T08:58:36Z,I assume this needs backport?\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250409787,250409787,
btcdrak,2016-09-29T11:00:12Z,utACK 76992bf\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250435044,250435044,
fivepiece,2016-09-29T18:28:42Z,I'll reference this here as well since it all seems (to me) to be setting some kind of precedent wrt blank transactions.\nWould love a bit of insight into this.\n~~https://github.com/bitcoin/bitcoin/pull/8837#issuecomment-250542708~~\n\nCleared.\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250551384,250551384,
jtimon,2016-09-30T15:24:54Z,"Concept ACK. I believe it would be simpler and not harder for me to review if you go with your ""full solution that doesn't duplicate code"" in the same PR, but that may just be me...\n",https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-250773912,250773912,
sipa,2016-10-03T00:26:19Z,utACK 76992bf22987ead0c2643685a228769ef0932a1b\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251006595,251006595,
gmaxwell,2016-10-03T07:24:28Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251042434,251042434,
jnewbery,2016-10-03T22:25:15Z,I've applied @ryanofsky's changes and rebased.\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251245195,251245195,
MarcoFalke,2016-10-04T09:03:27Z,Fails with `Output data mismatch for blanktx.json`\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251333892,251333892,
laanwj,2016-10-04T11:41:26Z,Failing test:\n\n```\n\nmake  check-TESTS check-local\nmake[3]: Entering directory `/home/travis/build/bitcoin/bitcoin/build/src'\nRunning test/bitcoin-util-test.py...\nmake[4]: Entering directory `/home/travis/build/bitcoin/bitcoin/build/src'\nOutput data mismatch for blanktx.json\nmake[3]: *** [check-local] Error 1\nmake[3]: *** Waiting for unfinished jobs....\n```\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251365007,251365007,
fanquake,2016-10-05T04:02:04Z,Looks like all tests are now passing.\n\n```\nMaking check in src\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-TESTS check-local\nPASS: test/test_bitcoin\nPASS: qt/test/test_bitcoin-qt\n============================================================================\nTestsuite summary for Bitcoin Core 0.13.99\n=========================================================================,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251576490,251576490,
jnewbery,2016-10-05T13:01:19Z,Commits squashed and commit comment updated.\n,https://github.com/bitcoin/bitcoin/pull/8817#issuecomment-251667443,251667443,
ryanofsky,2016-10-03T19:30:26Z,Might be good to use BOOST_FOREACH here (for readability and to avoid copying the stack items).\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81622154,81622154,src/core_write.cpp
ryanofsky,2016-10-03T19:39:31Z,"This check is redundant with the check above, and might be worth removing.\n\nIt would probably also be good to add an (i < tx.wit.vtxinwit.size()) check or assertion.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81623699,81623699,src/core_write.cpp
ryanofsky,2016-10-03T19:42:49Z,"For clarity and efficiency would suggest moving this outside the for loop, since internally CTxWitness::IsNull loops over all the i's.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81624272,81624272,src/core_write.cpp
jnewbery,2016-10-03T20:06:23Z,"I don't think we need to be too concerned about efficiency here. ScriptPubKeyToUniv() isn't heavily used, so looping through the CTxIn isn't going to cause any performance issues.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81628648,81628648,src/core_write.cpp
jnewbery,2016-10-03T20:07:29Z,I've added your `(i < tx.wit.vtxinwit.size())` check and moved all checks into a single if statement.\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81628848,81628848,src/core_write.cpp
jnewbery,2016-10-03T20:11:40Z,We're trying to move away from BOOST in favour of c++11. See https://github.com/bitcoin/bitcoin/projects/3\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81629621,81629621,src/core_write.cpp
ryanofsky,2016-10-03T20:12:53Z,"Sounds good. I was suggesting this more for clarity than efficiency, though. Right now I would be surprised looking at this code to learn that if that any /single/ vtxinwit is null, then no output will be produced for all other vtxinwit. Adding a well named bool variable outside the for loop might make it a little clearer. Anyway, thanks for considering this, and for making the other changes.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81629825,81629825,src/core_write.cpp
ryanofsky,2016-10-03T20:15:08Z,"In that case, for (const auto& item : tx.wit.vtxinwit[i].scriptWitness.stack) would be great.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81630219,81630219,src/core_write.cpp
ryanofsky,2016-10-03T20:40:54Z,"Actually, I'm wrong about this. CTxWitness::IsNull returns true if all vtxinwits are null, not if any are null, so having this check isn't actually misleading w.r.t the individual entries, just redundant.\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81635242,81635242,src/core_write.cpp
jnewbery,2016-10-03T21:33:50Z,Yep. Much better. Thanks!\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81645039,81645039,src/core_write.cpp
MarcoFalke,2016-10-04T09:06:21Z,Why? Please keep it at BOOST or make it cpp11\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81713988,81713988,src/core_write.cpp
laanwj,2016-10-04T09:47:37Z,"I think it's because he needs index `i` below. I've wondered this before: does c++11 have a canonical way to do enumerated iteration (like `enumerate()` in python or `for i, a := range ... {` in golang)\n",https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81721340,81721340,src/core_write.cpp
jnewbery,2016-10-04T13:16:46Z,That's correct. I don't think there's a direct equivalent for python's enumerate in c++11. The most common suggestions I can find on stackoverflow are zipping with an index or tracking the index outside the for loop. I think it's clearer just to iterate through the indexes in the for loop.\n,https://github.com/bitcoin/bitcoin/pull/8817#discussion_r81753406,81753406,src/core_write.cpp
