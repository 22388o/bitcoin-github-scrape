[
  {
    "sha": "fd61d6f5068cf92d34569862b4225f177049a4f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDYxZDZmNTA2OGNmOTJkMzQ1Njk4NjJiNDIyNWYxNzcwNDlhNGYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-14T17:07:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-24T17:58:12Z"
      },
      "message": "Encapsulate public keys in CPubKey",
      "tree": {
        "sha": "5556094bda3a7162535b9352b67016e620bb9a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5556094bda3a7162535b9352b67016e620bb9a77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd61d6f5068cf92d34569862b4225f177049a4f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd61d6f5068cf92d34569862b4225f177049a4f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd61d6f5068cf92d34569862b4225f177049a4f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd61d6f5068cf92d34569862b4225f177049a4f0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f04017f702e36563b9ba05b3fede216767de580a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f04017f702e36563b9ba05b3fede216767de580a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f04017f702e36563b9ba05b3fede216767de580a"
      }
    ],
    "stats": {
      "total": 213,
      "additions": 127,
      "deletions": 86
    },
    "files": [
      {
        "sha": "26d8c5f9eda629402579fd23487ce7a7bd3b44eb",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -275,9 +275,9 @@ class CBitcoinAddress : public CBase58Data\n         return true;\n     }\n \n-    void SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+    void SetPubKey(const CPubKey& vchPubKey)\n     {\n-        SetHash160(Hash160(vchPubKey));\n+        SetHash160(vchPubKey.GetID());\n     }\n \n     bool SetScriptHash160(const uint160& hash160)\n@@ -333,7 +333,7 @@ class CBitcoinAddress : public CBase58Data\n         SetHash160(hash160In);\n     }\n \n-    CBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n+    CBitcoinAddress(const CPubKey& vchPubKey)\n     {\n         SetPubKey(vchPubKey);\n     }"
      },
      {
        "sha": "f227e363c31113e64cdfd7ff2e18840089ef4760",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -590,7 +590,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n         pwalletMain->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n-    std::vector<unsigned char> newKey;\n+    CPubKey newKey;\n     if (!pwalletMain->GetKeyFromPool(newKey, false))\n         throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CBitcoinAddress address(newKey);\n@@ -611,12 +611,12 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     bool bKeyUsed = false;\n \n     // Check if the current key has been used\n-    if (!account.vchPubKey.empty())\n+    if (account.vchPubKey.IsValid())\n     {\n         CScript scriptPubKey;\n         scriptPubKey.SetBitcoinAddress(account.vchPubKey);\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n-             it != pwalletMain->mapWallet.end() && !account.vchPubKey.empty();\n+             it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n@@ -627,7 +627,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     }\n \n     // Generate a new key\n-    if (account.vchPubKey.empty() || bForceNew || bKeyUsed)\n+    if (!account.vchPubKey.IsValid() || bForceNew || bKeyUsed)\n     {\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n             throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n@@ -1203,19 +1203,19 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n             if (address.IsScript())\n                 throw runtime_error(\n                     strprintf(\"%s is a pay-to-script address\",ks.c_str()));\n-            std::vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             if (!pwalletMain->GetPubKey(address, vchPubKey))\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks.c_str()));\n-            if (vchPubKey.empty() || !pubkeys[i].SetPubKey(vchPubKey))\n+            if (!vchPubKey.IsValid() || !pubkeys[i].SetPubKey(vchPubKey))\n                 throw runtime_error(\" Invalid public key: \"+ks);\n         }\n \n         // Case 2: hex public key\n         else if (IsHex(ks))\n         {\n-            vector<unsigned char> vchPubKey = ParseHex(ks);\n-            if (vchPubKey.empty() || !pubkeys[i].SetPubKey(vchPubKey))\n+            CPubKey vchPubKey(ParseHex(ks));\n+            if (!vchPubKey.IsValid() || !pubkeys[i].SetPubKey(vchPubKey))\n                 throw runtime_error(\" Invalid public key: \"+ks);\n         }\n         else\n@@ -1954,9 +1954,9 @@ Value validateaddress(const Array& params, bool fHelp)\n         if (pwalletMain->HaveKey(address))\n         {\n             ret.push_back(Pair(\"ismine\", true));\n-            std::vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             pwalletMain->GetPubKey(address, vchPubKey);\n-            ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n+            ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey.Raw())));\n             CKey key;\n             key.SetPubKey(vchPubKey);\n             ret.push_back(Pair(\"iscompressed\", key.IsCompressed()));"
      },
      {
        "sha": "8295534e6224e23fce732acaa1fc22e28edd83d5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -604,7 +604,7 @@ bool AppInit2()\n         // Create new keyUser and set as default key\n         RandAddSeedPerfmon();\n \n-        std::vector<unsigned char> newDefaultKey;\n+        CPubKey newDefaultKey;\n         if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))\n             strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n         pwalletMain->SetDefaultKey(newDefaultKey);"
      },
      {
        "sha": "57ab842bc4392f87118ae99c241072b091aa2c72",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -239,18 +239,18 @@ CPrivKey CKey::GetPrivKey() const\n     return vchPrivKey;\n }\n \n-bool CKey::SetPubKey(const std::vector<unsigned char>& vchPubKey)\n+bool CKey::SetPubKey(const CPubKey& vchPubKey)\n {\n-    const unsigned char* pbegin = &vchPubKey[0];\n-    if (!o2i_ECPublicKey(&pkey, &pbegin, vchPubKey.size()))\n+    const unsigned char* pbegin = &vchPubKey.vchPubKey[0];\n+    if (!o2i_ECPublicKey(&pkey, &pbegin, vchPubKey.vchPubKey.size()))\n         return false;\n     fSet = true;\n-    if (vchPubKey.size() == 33)\n+    if (vchPubKey.vchPubKey.size() == 33)\n         SetCompressedPubKey();\n     return true;\n }\n \n-std::vector<unsigned char> CKey::GetPubKey() const\n+CPubKey CKey::GetPubKey() const\n {\n     int nSize = i2o_ECPublicKey(pkey, NULL);\n     if (!nSize)\n@@ -259,7 +259,7 @@ std::vector<unsigned char> CKey::GetPubKey() const\n     unsigned char* pbegin = &vchPubKey[0];\n     if (i2o_ECPublicKey(pkey, &pbegin) != nSize)\n         throw key_error(\"CKey::GetPubKey() : i2o_ECPublicKey returned unexpected size\");\n-    return vchPubKey;\n+    return CPubKey(vchPubKey);\n }\n \n bool CKey::Sign(uint256 hash, std::vector<unsigned char>& vchSig)"
      },
      {
        "sha": "7c3e9d4421052a7241d21900bad7111ae8581125",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -9,7 +9,9 @@\n #include <vector>\n \n #include \"allocators.h\"\n+#include \"serialize.h\"\n #include \"uint256.h\"\n+#include \"util.h\"\n \n #include <openssl/ec.h> // for EC_KEY definition\n \n@@ -42,6 +44,39 @@ class key_error : public std::runtime_error\n     explicit key_error(const std::string& str) : std::runtime_error(str) {}\n };\n \n+class CPubKey {\n+private:\n+    std::vector<unsigned char> vchPubKey;\n+    friend class CKey;\n+\n+public:\n+    CPubKey() { }\n+    CPubKey(const std::vector<unsigned char> &vchPubKeyIn) : vchPubKey(vchPubKeyIn) { }\n+    friend bool operator==(const CPubKey &a, const CPubKey &b) { return a.vchPubKey == b.vchPubKey; }\n+    friend bool operator!=(const CPubKey &a, const CPubKey &b) { return a.vchPubKey != b.vchPubKey; }\n+    friend bool operator<(const CPubKey &a, const CPubKey &b) { return a.vchPubKey < b.vchPubKey; }\n+\n+    IMPLEMENT_SERIALIZE(\n+        READWRITE(vchPubKey);\n+    )\n+\n+    uint160 GetID() const {\n+        return Hash160(vchPubKey);\n+    }\n+\n+    uint256 GetHash() const {\n+        return Hash(vchPubKey.begin(), vchPubKey.end());\n+    }\n+\n+    bool IsValid() const {\n+        return vchPubKey.size() == 33 || vchPubKey.size() == 65;\n+    }\n+\n+    std::vector<unsigned char> Raw() const {\n+        return vchPubKey;\n+    }\n+};\n+\n \n // secure_allocator is defined in serialize.h\n // CPrivKey is a serialized private key, with all parameters included (279 bytes)\n@@ -78,8 +113,8 @@ class CKey\n     bool SetSecret(const CSecret& vchSecret, bool fCompressed = false);\n     CSecret GetSecret(bool &fCompressed) const;\n     CPrivKey GetPrivKey() const;\n-    bool SetPubKey(const std::vector<unsigned char>& vchPubKey);\n-    std::vector<unsigned char> GetPubKey() const;\n+    bool SetPubKey(const CPubKey& vchPubKey);\n+    CPubKey GetPubKey() const;\n \n     bool Sign(uint256 hash, std::vector<unsigned char>& vchSig);\n "
      },
      {
        "sha": "12ed3027ca13df029681511919d80f303824707d",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -6,7 +6,7 @@\n #include \"keystore.h\"\n #include \"script.h\"\n \n-bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n+bool CKeyStore::GetPubKey(const CBitcoinAddress &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key))\n@@ -97,10 +97,10 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.begin();\n         for (; mi != mapCryptedKeys.end(); ++mi)\n         {\n-            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n-            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n+            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n                 return false;\n             if (vchSecret.size() != 32)\n                 return false;\n@@ -128,9 +128,9 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n             return false;\n \n         std::vector<unsigned char> vchCryptedSecret;\n-        std::vector<unsigned char> vchPubKey = key.GetPubKey();\n+        CPubKey vchPubKey = key.GetPubKey();\n         bool fCompressed;\n-        if (!EncryptSecret(vMasterKey, key.GetSecret(fCompressed), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n+        if (!EncryptSecret(vMasterKey, key.GetSecret(fCompressed), vchPubKey.GetHash(), vchCryptedSecret))\n             return false;\n \n         if (!AddCryptedKey(key.GetPubKey(), vchCryptedSecret))\n@@ -140,7 +140,7 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n }\n \n \n-bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n+bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -162,10 +162,10 @@ bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n-            const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n+            const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n             CSecret vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n+            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n                 return false;\n             if (vchSecret.size() != 32)\n                 return false;\n@@ -177,7 +177,7 @@ bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n     return false;\n }\n \n-bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const\n+bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -207,10 +207,10 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             CKey key;\n             if (!key.SetSecret(mKey.second.first, mKey.second.second))\n                 return false;\n-            const std::vector<unsigned char> vchPubKey = key.GetPubKey();\n+            const CPubKey vchPubKey = key.GetPubKey();\n             std::vector<unsigned char> vchCryptedSecret;\n             bool fCompressed;\n-            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(fCompressed), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n+            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(fCompressed), vchPubKey.GetHash(), vchCryptedSecret))\n                 return false;\n             if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n                 return false;"
      },
      {
        "sha": "cd72606d44e84dedb6d3fdee94624fe5a0e7aad5",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -28,7 +28,7 @@ class CKeyStore\n     virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n     virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CBitcoinAddress> &setAddress) const =0;\n-    virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n+    virtual bool GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const;\n \n     // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n@@ -98,7 +98,7 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const;\n };\n \n-typedef std::map<CBitcoinAddress, std::pair<std::vector<unsigned char>, std::vector<unsigned char> > > CryptedKeyMap;\n+typedef std::map<CBitcoinAddress, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n \n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n@@ -146,7 +146,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n \n     bool Lock();\n \n-    virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);\n     bool HaveKey(const CBitcoinAddress &address) const\n     {\n@@ -159,7 +159,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         return false;\n     }\n     bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n-    bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n+    bool GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const;\n     void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n     {\n         if (!IsCrypted())"
      },
      {
        "sha": "9913ae3341c0902d5f2106dd0621d646436890db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -2304,7 +2304,7 @@ unsigned char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };\n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n {\n-    static map<CService, vector<unsigned char> > mapReuseKey;\n+    static map<CService, CPubKey> mapReuseKey;\n     RandAddSeedPerfmon();\n     if (fDebug)\n         printf(\"received: %s (%d bytes)\\n\", strCommand.c_str(), vRecv.size());"
      },
      {
        "sha": "11dfc3e03d7946d489f90bc586b9d85f282b1c5b",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -331,7 +331,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n             editStatus = WALLET_UNLOCK_FAILURE;\n             return QString();\n         }\n-        std::vector<unsigned char> newKey;\n+        CPubKey newKey;\n         if(!wallet->GetKeyFromPool(newKey, true))\n         {\n             editStatus = KEY_GENERATION_FAILURE;"
      },
      {
        "sha": "20013af1b6446d775e26f4b55a3f40672b533c7b",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -1374,7 +1374,7 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n             return false;\n         else\n         {\n-            valtype vch;\n+            CPubKey vch;\n             keystore.GetPubKey(address, vch);\n             scriptSigRet << vch;\n         }"
      },
      {
        "sha": "163ce057d6722bbf2c3e2fbd79039142fb0f82aa",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -320,6 +320,12 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n+    CScript& operator<<(const CPubKey& key)\n+    {\n+        std::vector<unsigned char> vchKey = key.Raw();\n+        return (*this) << vchKey;\n+    }\n+\n     CScript& operator<<(const CBigNum& b)\n     {\n         *this << b.getvch();"
      },
      {
        "sha": "aa0050ca02f83d959213091483d8005d026e1e2d",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -201,7 +201,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey().Raw()) << OP_EQUALVERIFY << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n         CBitcoinAddress addr;\n@@ -214,7 +214,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4);\n         CBitcoinAddress addr;\n@@ -227,7 +227,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_1 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4);\n         vector<CBitcoinAddress> addrs;\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+        s << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << key[2].GetPubKey().Raw() << OP_3 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 5);\n     }\n@@ -262,13 +262,13 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     }\n \n     CScript a_and_b;\n-    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_and_b << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n \n     CScript a_or_b;\n-    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n+    a_or_b  << OP_1 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n \n     CScript escrow;\n-    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n+    escrow << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << key[2].GetPubKey().Raw() << OP_3 << OP_CHECKMULTISIG;\n \n     CTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);"
      },
      {
        "sha": "2f8d7c05ab04dd888b94838442f33861af0e6247",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n // mapWallet\n //\n \n-std::vector<unsigned char> CWallet::GenerateNewKey()\n+CPubKey CWallet::GenerateNewKey()\n {\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n@@ -44,7 +44,7 @@ bool CWallet::AddKey(const CKey& key)\n     return true;\n }\n \n-bool CWallet::AddCryptedKey(const vector<unsigned char> &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n+bool CWallet::AddCryptedKey(const CPubKey &vchPubKey, const vector<unsigned char> &vchCryptedSecret)\n {\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n         return false;\n@@ -366,7 +366,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n             {\n-                std::vector<unsigned char> newDefaultKey;\n+                CPubKey newDefaultKey;\n                 if (GetKeyFromPool(newDefaultKey, false))\n                 {\n                     SetDefaultKey(newDefaultKey);\n@@ -1095,7 +1095,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     //  post-backup change.\n \n                     // Reserve a new key pair from key pool\n-                    vector<unsigned char> vchPubKey = reservekey.GetReservedKey();\n+                    CPubKey vchPubKey = reservekey.GetReservedKey();\n                     // assert(mapKeys.count(vchPubKey));\n \n                     // Fill a vout to ourself\n@@ -1278,7 +1278,7 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n \n     if (nLoadWalletRet != DB_LOAD_OK)\n         return nLoadWalletRet;\n-    fFirstRunRet = vchDefaultKey.empty();\n+    fFirstRunRet = !vchDefaultKey.IsValid();\n \n     CreateThread(ThreadFlushWalletDB, &strWalletFile);\n     return DB_LOAD_OK;\n@@ -1332,7 +1332,7 @@ bool CWallet::GetTransaction(const uint256 &hashTx, CWalletTx& wtx)\n     return false;\n }\n \n-bool CWallet::SetDefaultKey(const std::vector<unsigned char> &vchPubKey)\n+bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n {\n     if (fFileBacked)\n     {\n@@ -1408,7 +1408,7 @@ bool CWallet::TopUpKeyPool()\n void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n {\n     nIndex = -1;\n-    keypool.vchPubKey.clear();\n+    keypool.vchPubKey = CPubKey();\n     {\n         LOCK(cs_wallet);\n \n@@ -1425,9 +1425,9 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n-        if (!HaveKey(Hash160(keypool.vchPubKey)))\n+        if (!HaveKey(keypool.vchPubKey.GetID()))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n-        assert(!keypool.vchPubKey.empty());\n+        assert(keypool.vchPubKey.IsValid());\n         printf(\"keypool reserve %\"PRI64d\"\\n\", nIndex);\n     }\n }\n@@ -1468,7 +1468,7 @@ void CWallet::ReturnKey(int64 nIndex)\n     printf(\"keypool return %\"PRI64d\"\\n\", nIndex);\n }\n \n-bool CWallet::GetKeyFromPool(vector<unsigned char>& result, bool fAllowReuse)\n+bool CWallet::GetKeyFromPool(CPubKey& result, bool fAllowReuse)\n {\n     int64 nIndex = 0;\n     CKeyPool keypool;\n@@ -1477,7 +1477,7 @@ bool CWallet::GetKeyFromPool(vector<unsigned char>& result, bool fAllowReuse)\n         ReserveKeyFromKeyPool(nIndex, keypool);\n         if (nIndex == -1)\n         {\n-            if (fAllowReuse && !vchDefaultKey.empty())\n+            if (fAllowReuse && vchDefaultKey.IsValid())\n             {\n                 result = vchDefaultKey;\n                 return true;\n@@ -1503,7 +1503,7 @@ int64 CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-vector<unsigned char> CReserveKey::GetReservedKey()\n+CPubKey CReserveKey::GetReservedKey()\n {\n     if (nIndex == -1)\n     {\n@@ -1517,7 +1517,7 @@ vector<unsigned char> CReserveKey::GetReservedKey()\n             vchPubKey = pwallet->vchDefaultKey;\n         }\n     }\n-    assert(!vchPubKey.empty());\n+    assert(vchPubKey.IsValid());\n     return vchPubKey;\n }\n \n@@ -1526,15 +1526,15 @@ void CReserveKey::KeepKey()\n     if (nIndex != -1)\n         pwallet->KeepKey(nIndex);\n     nIndex = -1;\n-    vchPubKey.clear();\n+    vchPubKey = CPubKey();\n }\n \n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1)\n         pwallet->ReturnKey(nIndex);\n     nIndex = -1;\n-    vchPubKey.clear();\n+    vchPubKey = CPubKey();\n }\n \n void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n@@ -1550,7 +1550,7 @@ void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n         if (!walletdb.ReadPool(id, keypool))\n             throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n         CBitcoinAddress address(keypool.vchPubKey);\n-        assert(!keypool.vchPubKey.empty());\n+        assert(keypool.vchPubKey.IsValid());\n         if (!HaveKey(address))\n             throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n         setAddress.insert(address);"
      },
      {
        "sha": "6c99b3c4b831360bb4f09818c1715a8f3fb96f3c",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -32,14 +32,14 @@ class CKeyPool\n {\n public:\n     int64 nTime;\n-    std::vector<unsigned char> vchPubKey;\n+    CPubKey vchPubKey;\n \n     CKeyPool()\n     {\n         nTime = GetTime();\n     }\n \n-    CKeyPool(const std::vector<unsigned char>& vchPubKeyIn)\n+    CKeyPool(const CPubKey& vchPubKeyIn)\n     {\n         nTime = GetTime();\n         vchPubKey = vchPubKeyIn;\n@@ -107,14 +107,14 @@ class CWallet : public CCryptoKeyStore\n \n     std::map<CBitcoinAddress, std::string> mapAddressBook;\n \n-    std::vector<unsigned char> vchDefaultKey;\n+    CPubKey vchDefaultKey;\n \n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n \n     // keystore implementation\n     // Generate a new key\n-    std::vector<unsigned char> GenerateNewKey();\n+    CPubKey GenerateNewKey();\n     // Adds a key to the store, and saves it to disk.\n     bool AddKey(const CKey& key);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n@@ -123,9 +123,9 @@ class CWallet : public CCryptoKeyStore\n     bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     // Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n-    bool LoadCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { SetMinVersion(FEATURE_WALLETCRYPT); return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n+    bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) { SetMinVersion(FEATURE_WALLETCRYPT); return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret); }\n     bool AddCScript(const CScript& redeemScript);\n     bool LoadCScript(const CScript& redeemScript) { return CCryptoKeyStore::AddCScript(redeemScript); }\n \n@@ -156,7 +156,7 @@ class CWallet : public CCryptoKeyStore\n     void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n     void KeepKey(int64 nIndex);\n     void ReturnKey(int64 nIndex);\n-    bool GetKeyFromPool(std::vector<unsigned char> &key, bool fAllowReuse=true);\n+    bool GetKeyFromPool(CPubKey &key, bool fAllowReuse=true);\n     int64 GetOldestKeyPoolTime();\n     void GetAllReserveAddresses(std::set<CBitcoinAddress>& setAddress);\n \n@@ -252,7 +252,7 @@ class CWallet : public CCryptoKeyStore\n \n     bool GetTransaction(const uint256 &hashTx, CWalletTx& wtx);\n \n-    bool SetDefaultKey(const std::vector<unsigned char> &vchPubKey);\n+    bool SetDefaultKey(const CPubKey &vchPubKey);\n \n     // signify that a particular wallet feature is now used. this may change nWalletVersion and nWalletMaxVersion if those are lower\n     bool SetMinVersion(enum WalletFeature, CWalletDB* pwalletdbIn = NULL, bool fExplicit = false);\n@@ -280,7 +280,7 @@ class CReserveKey\n protected:\n     CWallet* pwallet;\n     int64 nIndex;\n-    std::vector<unsigned char> vchPubKey;\n+    CPubKey vchPubKey;\n public:\n     CReserveKey(CWallet* pwalletIn)\n     {\n@@ -295,7 +295,7 @@ class CReserveKey\n     }\n \n     void ReturnKey();\n-    std::vector<unsigned char> GetReservedKey();\n+    CPubKey GetReservedKey();\n     void KeepKey();\n };\n \n@@ -640,7 +640,7 @@ class CWalletKey\n class CAccount\n {\n public:\n-    std::vector<unsigned char> vchPubKey;\n+    CPubKey vchPubKey;\n \n     CAccount()\n     {\n@@ -649,7 +649,7 @@ class CAccount\n \n     void SetNull()\n     {\n-        vchPubKey.clear();\n+        vchPubKey = CPubKey();\n     }\n \n     IMPLEMENT_SERIALIZE"
      },
      {
        "sha": "34e0b805124848576c92930395927f73f4b41060",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -104,7 +104,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n int CWalletDB::LoadWallet(CWallet* pwallet)\n {\n-    pwallet->vchDefaultKey.clear();\n+    pwallet->vchDefaultKey = CPubKey();\n     int nFileVersion = 0;\n     vector<uint256> vWalletUpgrade;\n     bool fIsEncrypted = false;"
      },
      {
        "sha": "de2b7f3aae523a6c8257c22b82e82dd814a674a8",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd61d6f5068cf92d34569862b4225f177049a4f0/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd61d6f5068cf92d34569862b4225f177049a4f0/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=fd61d6f5068cf92d34569862b4225f177049a4f0",
        "patch": "@@ -59,27 +59,27 @@ class CWalletDB : public CDB\n         return Erase(std::make_pair(std::string(\"tx\"), hash));\n     }\n \n-    bool ReadKey(const std::vector<unsigned char>& vchPubKey, CPrivKey& vchPrivKey)\n+    bool ReadKey(const CPubKey& vchPubKey, CPrivKey& vchPrivKey)\n     {\n         vchPrivKey.clear();\n-        return Read(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey);\n+        return Read(std::make_pair(std::string(\"key\"), vchPubKey.Raw()), vchPrivKey);\n     }\n \n-    bool WriteKey(const std::vector<unsigned char>& vchPubKey, const CPrivKey& vchPrivKey)\n+    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey)\n     {\n         nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n+        return Write(std::make_pair(std::string(\"key\"), vchPubKey.Raw()), vchPrivKey, false);\n     }\n \n-    bool WriteCryptedKey(const std::vector<unsigned char>& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n+    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, bool fEraseUnencryptedKey = true)\n     {\n         nWalletDBUpdated++;\n-        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey.Raw()), vchCryptedSecret, false))\n             return false;\n         if (fEraseUnencryptedKey)\n         {\n-            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+            Erase(std::make_pair(std::string(\"key\"), vchPubKey.Raw()));\n+            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey.Raw()));\n         }\n         return true;\n     }\n@@ -120,10 +120,10 @@ class CWalletDB : public CDB\n         return Read(std::string(\"defaultkey\"), vchPubKey);\n     }\n \n-    bool WriteDefaultKey(const std::vector<unsigned char>& vchPubKey)\n+    bool WriteDefaultKey(const CPubKey& vchPubKey)\n     {\n         nWalletDBUpdated++;\n-        return Write(std::string(\"defaultkey\"), vchPubKey);\n+        return Write(std::string(\"defaultkey\"), vchPubKey.Raw());\n     }\n \n     bool ReadPool(int64 nPool, CKeyPool& keypool)"
      }
    ]
  },
  {
    "sha": "1025440184ef100a22d07c7bb543ee45cf169d64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDI1NDQwMTg0ZWYxMDBhMjJkMDdjN2JiNTQzZWU0NWNmMTY5ZDY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-14T21:44:52Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-05-24T18:26:19Z"
      },
      "message": "Refactor: split CKeyID/CScriptID/CTxDestination from CBitcoinAddress\n\nThis introduces internal types:\n* CKeyID: reference (hash160) of a key\n* CScriptID: reference (hash160) of a script\n* CTxDestination: a boost::variant of the former two\n\nCBitcoinAddress is retrofitted to be a Base58 encoding of a\nCTxDestination. This allows all internal code to only use the\ninternal types, and only have RPC and GUI depend on the base58 code.\n\nFurthermore, the header dependencies are a lot saner now. base58.h is\nat the top (right below rpc and gui) instead of at the bottom. For the\nrest: wallet -> script -> keystore -> key. Only keystore still requires\na forward declaration of CScript. Solving that would require splitting\nscript into two layers.",
      "tree": {
        "sha": "cd85ae7d981820189e506167e518adaf820aa638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd85ae7d981820189e506167e518adaf820aa638"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1025440184ef100a22d07c7bb543ee45cf169d64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1025440184ef100a22d07c7bb543ee45cf169d64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1025440184ef100a22d07c7bb543ee45cf169d64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1025440184ef100a22d07c7bb543ee45cf169d64/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd61d6f5068cf92d34569862b4225f177049a4f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd61d6f5068cf92d34569862b4225f177049a4f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd61d6f5068cf92d34569862b4225f177049a4f0"
      }
    ],
    "stats": {
      "total": 816,
      "additions": 477,
      "deletions": 339
    },
    "files": [
      {
        "sha": "b492cd683c0a8e2fa99fbe295252a4009c378c0d",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 71,
        "deletions": 30,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -19,6 +19,7 @@\n #include <vector>\n #include \"bignum.h\"\n #include \"key.h\"\n+#include \"script.h\"\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n@@ -258,6 +259,18 @@ class CBase58Data\n  * Script-hash-addresses have version 5 (or 196 testnet).\n  * The data vector contains RIPEMD160(SHA256(cscript)), where cscript is the serialized redemption script.\n  */\n+class CBitcoinAddress;\n+class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CBitcoinAddress *addr;\n+public:\n+    CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }\n+    bool operator()(const CKeyID &id) const;\n+    bool operator()(const CScriptID &id) const;\n+    bool operator()(const CNoDestination &no) const;\n+};\n+\n class CBitcoinAddress : public CBase58Data\n {\n public:\n@@ -269,21 +282,19 @@ class CBitcoinAddress : public CBase58Data\n         SCRIPT_ADDRESS_TEST = 196,\n     };\n \n-    bool SetHash160(const uint160& hash160)\n-    {\n-        SetData(fTestNet ? PUBKEY_ADDRESS_TEST : PUBKEY_ADDRESS, &hash160, 20);\n+    bool Set(const CKeyID &id) {\n+        SetData(fTestNet ? PUBKEY_ADDRESS_TEST : PUBKEY_ADDRESS, &id, 20);\n         return true;\n     }\n \n-    void SetPubKey(const CPubKey& vchPubKey)\n-    {\n-        SetHash160(vchPubKey.GetID());\n+    bool Set(const CScriptID &id) {\n+        SetData(fTestNet ? SCRIPT_ADDRESS_TEST : SCRIPT_ADDRESS, &id, 20);\n+        return true;\n     }\n \n-    bool SetScriptHash160(const uint160& hash160)\n+    bool Set(const CTxDestination &dest)\n     {\n-        SetData(fTestNet ? SCRIPT_ADDRESS_TEST : SCRIPT_ADDRESS, &hash160, 20);\n-        return true;\n+        return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n     }\n \n     bool IsValid() const\n@@ -315,27 +326,14 @@ class CBitcoinAddress : public CBase58Data\n         }\n         return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n     }\n-    bool IsScript() const\n-    {\n-        if (!IsValid())\n-            return false;\n-        if (fTestNet)\n-            return nVersion == SCRIPT_ADDRESS_TEST;\n-        return nVersion == SCRIPT_ADDRESS;\n-    }\n \n     CBitcoinAddress()\n     {\n     }\n \n-    CBitcoinAddress(uint160 hash160In)\n-    {\n-        SetHash160(hash160In);\n-    }\n-\n-    CBitcoinAddress(const CPubKey& vchPubKey)\n+    CBitcoinAddress(const CTxDestination &dest)\n     {\n-        SetPubKey(vchPubKey);\n+        Set(dest);\n     }\n \n     CBitcoinAddress(const std::string& strAddress)\n@@ -348,15 +346,58 @@ class CBitcoinAddress : public CBase58Data\n         SetString(pszAddress);\n     }\n \n-    uint160 GetHash160() const\n-    {\n-        assert(vchData.size() == 20);\n-        uint160 hash160;\n-        memcpy(&hash160, &vchData[0], 20);\n-        return hash160;\n+    CTxDestination Get() const {\n+        if (!IsValid())\n+            return CNoDestination();\n+        switch (nVersion) {\n+        case PUBKEY_ADDRESS:\n+        case PUBKEY_ADDRESS_TEST: {\n+            uint160 id;\n+            memcpy(&id, &vchData[0], 20);\n+            return CKeyID(id);\n+        }\n+        case SCRIPT_ADDRESS:\n+        case SCRIPT_ADDRESS_TEST: {\n+            uint160 id;\n+            memcpy(&id, &vchData[0], 20);\n+            return CScriptID(id);\n+        }\n+        }\n+        return CNoDestination();\n+    }\n+\n+    bool GetKeyID(CKeyID &keyID) const {\n+        if (!IsValid())\n+            return false;\n+        switch (nVersion) {\n+        case PUBKEY_ADDRESS:\n+        case PUBKEY_ADDRESS_TEST: {\n+            uint160 id;\n+            memcpy(&id, &vchData[0], 20);\n+            keyID = CKeyID(id);\n+            return true;\n+        }\n+        default: return false;\n+        }\n+    }\n+\n+    bool IsScript() const {\n+        if (!IsValid())\n+            return false;\n+        switch (nVersion) {\n+        case SCRIPT_ADDRESS:\n+        case SCRIPT_ADDRESS_TEST: {\n+            return true;\n+        }\n+        default: return false;\n+        }\n     }\n };\n \n+bool inline CBitcoinAddressVisitor::operator()(const CKeyID &id) const         { return addr->Set(id); }\n+bool inline CBitcoinAddressVisitor::operator()(const CScriptID &id) const      { return addr->Set(id); }\n+bool inline CBitcoinAddressVisitor::operator()(const CNoDestination &id) const { return false; }\n+\n /** A base58-encoded secret key */\n class CBitcoinSecret : public CBase58Data\n {"
      },
      {
        "sha": "75e3fd6e925e2c96ae8ba2ca91355b561c7c8a80",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 106,
        "deletions": 93,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -10,6 +10,7 @@\n #include \"net.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n+#include \"base58.h\"\n #include \"bitcoinrpc.h\"\n \n #undef printf\n@@ -184,10 +185,10 @@ ScriptSigToJSON(const CTxIn& txin, Object& out)\n         return;\n \n     txnouttype type;\n-    vector<CBitcoinAddress> addresses;\n+    vector<CTxDestination> addresses;\n     int nRequired;\n \n-    if (!ExtractAddresses(txprev.vout[txin.prevout.n].scriptPubKey, type,\n+    if (!ExtractDestinations(txprev.vout[txin.prevout.n].scriptPubKey, type,\n                           addresses, nRequired))\n     {\n         out.push_back(Pair(\"type\", GetTxnOutputType(TX_NONSTANDARD)));\n@@ -202,22 +203,22 @@ ScriptSigToJSON(const CTxIn& txin, Object& out)\n     }\n \n     Array a;\n-    BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n-        a.push_back(addr.ToString());\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n }\n \n void\n ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n {\n     txnouttype type;\n-    vector<CBitcoinAddress> addresses;\n+    vector<CTxDestination> addresses;\n     int nRequired;\n \n     out.push_back(Pair(\"asm\", scriptPubKey.ToString()));\n     out.push_back(Pair(\"hex\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n-    if (!ExtractAddresses(scriptPubKey, type, addresses, nRequired))\n+    if (!ExtractDestinations(scriptPubKey, type, addresses, nRequired))\n     {\n         out.push_back(Pair(\"type\", GetTxnOutputType(TX_NONSTANDARD)));\n         return;\n@@ -227,8 +228,8 @@ ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out)\n     out.push_back(Pair(\"type\", GetTxnOutputType(type)));\n \n     Array a;\n-    BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n-        a.push_back(addr.ToString());\n+    BOOST_FOREACH(const CTxDestination& addr, addresses)\n+        a.push_back(CBitcoinAddress(addr).ToString());\n     out.push_back(Pair(\"addresses\", a));\n }\n \n@@ -593,11 +594,11 @@ Value getnewaddress(const Array& params, bool fHelp)\n     CPubKey newKey;\n     if (!pwalletMain->GetKeyFromPool(newKey, false))\n         throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n-    CBitcoinAddress address(newKey);\n+    CKeyID keyID = newKey.GetID();\n \n-    pwalletMain->SetAddressBookName(address, strAccount);\n+    pwalletMain->SetAddressBookName(keyID, strAccount);\n \n-    return address.ToString();\n+    return CBitcoinAddress(keyID).ToString();\n }\n \n \n@@ -614,7 +615,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     if (account.vchPubKey.IsValid())\n     {\n         CScript scriptPubKey;\n-        scriptPubKey.SetBitcoinAddress(account.vchPubKey);\n+        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n              it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n@@ -632,11 +633,11 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n         if (!pwalletMain->GetKeyFromPool(account.vchPubKey, false))\n             throw JSONRPCError(-12, \"Error: Keypool ran out, please call keypoolrefill first\");\n \n-        pwalletMain->SetAddressBookName(CBitcoinAddress(account.vchPubKey), strAccount);\n+        pwalletMain->SetAddressBookName(account.vchPubKey.GetID(), strAccount);\n         walletdb.WriteAccount(strAccount, account);\n     }\n \n-    return CBitcoinAddress(account.vchPubKey);\n+    return CBitcoinAddress(account.vchPubKey.GetID());\n }\n \n Value getaccountaddress(const Array& params, bool fHelp)\n@@ -675,14 +676,14 @@ Value setaccount(const Array& params, bool fHelp)\n         strAccount = AccountFromValue(params[1]);\n \n     // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address))\n+    if (pwalletMain->mapAddressBook.count(address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address];\n+        string strOldAccount = pwalletMain->mapAddressBook[address.Get()];\n         if (address == GetAccountAddress(strOldAccount))\n             GetAccountAddress(strOldAccount, true);\n     }\n \n-    pwalletMain->SetAddressBookName(address, strAccount);\n+    pwalletMain->SetAddressBookName(address.Get(), strAccount);\n \n     return Value::null;\n }\n@@ -700,7 +701,7 @@ Value getaccount(const Array& params, bool fHelp)\n         throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    map<CBitcoinAddress, string>::iterator mi = pwalletMain->mapAddressBook.find(address);\n+    map<CTxDestination, string>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n     if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.empty())\n         strAccount = (*mi).second;\n     return strAccount;\n@@ -769,7 +770,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -792,8 +793,12 @@ Value signmessage(const Array& params, bool fHelp)\n     if (!addr.IsValid())\n         throw JSONRPCError(-3, \"Invalid address\");\n \n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+        throw JSONRPCError(-3, \"Address does not refer to key\");\n+\n     CKey key;\n-    if (!pwalletMain->GetKey(addr, key))\n+    if (!pwalletMain->GetKey(keyID, key))\n         throw JSONRPCError(-4, \"Private key not available\");\n \n     CDataStream ss(SER_GETHASH, 0);\n@@ -822,6 +827,10 @@ Value verifymessage(const Array& params, bool fHelp)\n     if (!addr.IsValid())\n         throw JSONRPCError(-3, \"Invalid address\");\n \n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+        throw JSONRPCError(-3, \"Address does not refer to key\");\n+\n     bool fInvalid = false;\n     vector<unsigned char> vchSig = DecodeBase64(strSign.c_str(), &fInvalid);\n \n@@ -836,7 +845,7 @@ Value verifymessage(const Array& params, bool fHelp)\n     if (!key.SetCompactSignature(Hash(ss.begin(), ss.end()), vchSig))\n         return false;\n \n-    return (CBitcoinAddress(key.GetPubKey()) == addr);\n+    return (key.GetPubKey().GetID() == keyID);\n }\n \n \n@@ -852,7 +861,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n     CScript scriptPubKey;\n     if (!address.IsValid())\n         throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n-    scriptPubKey.SetBitcoinAddress(address);\n+    scriptPubKey.SetDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -879,18 +888,17 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n }\n \n \n-void GetAccountAddresses(string strAccount, set<CBitcoinAddress>& setAddress)\n+void GetAccountAddresses(string strAccount, set<CTxDestination>& setAddress)\n {\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& item, pwalletMain->mapAddressBook)\n     {\n-        const CBitcoinAddress& address = item.first;\n+        const CTxDestination& address = item.first;\n         const string& strName = item.second;\n         if (strName == strAccount)\n             setAddress.insert(address);\n     }\n }\n \n-\n Value getreceivedbyaccount(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -905,7 +913,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(params[0]);\n-    set<CBitcoinAddress> setAddress;\n+    set<CTxDestination> setAddress;\n     GetAccountAddresses(strAccount, setAddress);\n \n     // Tally\n@@ -918,8 +926,8 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n-            CBitcoinAddress address;\n-            if (ExtractAddress(txout.scriptPubKey, address) && pwalletMain->HaveKey(address) && setAddress.count(address))\n+            CTxDestination address;\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -990,15 +998,15 @@ Value getbalance(const Array& params, bool fHelp)\n             int64 allGeneratedImmature, allGeneratedMature, allFee;\n             allGeneratedImmature = allGeneratedMature = allFee = 0;\n             string strSentAccount;\n-            list<pair<CBitcoinAddress, int64> > listReceived;\n-            list<pair<CBitcoinAddress, int64> > listSent;\n+            list<pair<CTxDestination, int64> > listReceived;\n+            list<pair<CTxDestination, int64> > listSent;\n             wtx.GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n                     nBalance += r.second;\n             }\n-            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n             nBalance += allGeneratedMature;\n@@ -1094,7 +1102,7 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(-6, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToBitcoinAddress(address, nAmount, wtx);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(-4, strError);\n \n@@ -1136,7 +1144,7 @@ Value sendmany(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey;\n-        scriptPubKey.SetBitcoinAddress(address);\n+        scriptPubKey.SetDestination(address.Get());\n         int64 nAmount = AmountFromValue(s.value_); \n         totalAmount += nAmount;\n \n@@ -1200,11 +1208,12 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n         CBitcoinAddress address(ks);\n         if (address.IsValid())\n         {\n-            if (address.IsScript())\n+            CKeyID keyID;\n+            if (!address.GetKeyID(keyID))\n                 throw runtime_error(\n-                    strprintf(\"%s is a pay-to-script address\",ks.c_str()));\n+                    strprintf(\"%s does not refer to a key\",ks.c_str()));\n             CPubKey vchPubKey;\n-            if (!pwalletMain->GetPubKey(address, vchPubKey))\n+            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks.c_str()));\n             if (!vchPubKey.IsValid() || !pubkeys[i].SetPubKey(vchPubKey))\n@@ -1227,16 +1236,11 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n     // Construct using pay-to-script-hash:\n     CScript inner;\n     inner.SetMultisig(nRequired, pubkeys);\n-\n-    uint160 scriptHash = Hash160(inner);\n-    CScript scriptPubKey;\n-    scriptPubKey.SetPayToScriptHash(inner);\n+    CScriptID innerID = inner.GetID();\n     pwalletMain->AddCScript(inner);\n-    CBitcoinAddress address;\n-    address.SetScriptHash160(scriptHash);\n \n-    pwalletMain->SetAddressBookName(address, strAccount);\n-    return address.ToString();\n+    pwalletMain->SetAddressBookName(innerID, strAccount);\n+    return CBitcoinAddress(innerID).ToString();\n }\n \n \n@@ -1278,8 +1282,8 @@ Value ListReceived(const Array& params, bool fByAccounts)\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n-            CBitcoinAddress address;\n-            if (!ExtractAddress(txout.scriptPubKey, address) || !pwalletMain->HaveKey(address) || !address.IsValid())\n+            CTxDestination address;\n+            if (!ExtractDestination(txout.scriptPubKey, address) || !IsMine(*pwalletMain, address))\n                 continue;\n \n             tallyitem& item = mapTally[address];\n@@ -1376,8 +1380,8 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n {\n     int64 nGeneratedImmature, nGeneratedMature, nFee;\n     string strSentAccount;\n-    list<pair<CBitcoinAddress, int64> > listReceived;\n-    list<pair<CBitcoinAddress, int64> > listSent;\n+    list<pair<CTxDestination, int64> > listReceived;\n+    list<pair<CTxDestination, int64> > listSent;\n \n     wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n \n@@ -1406,11 +1410,11 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n-            entry.push_back(Pair(\"address\", s.first.ToString()));\n+            entry.push_back(Pair(\"address\", CBitcoinAddress(s.first).ToString()));\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.second)));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n@@ -1423,7 +1427,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1432,7 +1436,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n             {\n                 Object entry;\n                 entry.push_back(Pair(\"account\", account));\n-                entry.push_back(Pair(\"address\", r.first.ToString()));\n+                entry.push_back(Pair(\"address\", CBitcoinAddress(r.first).ToString()));\n                 entry.push_back(Pair(\"category\", \"receive\"));\n                 entry.push_back(Pair(\"amount\", ValueFromAmount(r.second)));\n                 if (fLong)\n@@ -1547,8 +1551,8 @@ Value listaccounts(const Array& params, bool fHelp)\n         nMinDepth = params[0].get_int();\n \n     map<string, int64> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, string)& entry, pwalletMain->mapAddressBook) {\n-        if (pwalletMain->HaveKey(entry.first)) // This address belongs to me\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, string)& entry, pwalletMain->mapAddressBook) {\n+        if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second] = 0;\n     }\n \n@@ -1557,16 +1561,16 @@ Value listaccounts(const Array& params, bool fHelp)\n         const CWalletTx& wtx = (*it).second;\n         int64 nGeneratedImmature, nGeneratedMature, nFee;\n         string strSentAccount;\n-        list<pair<CBitcoinAddress, int64> > listReceived;\n-        list<pair<CBitcoinAddress, int64> > listSent;\n+        list<pair<CTxDestination, int64> > listReceived;\n+        list<pair<CTxDestination, int64> > listSent;\n         wtx.GetAmounts(nGeneratedImmature, nGeneratedMature, listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n             mapAccountBalances[\"\"] += nGeneratedMature;\n-            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first]] += r.second;\n                 else\n@@ -1932,6 +1936,40 @@ Value encryptwallet(const Array& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n+class DescribeAddressVisitor : public boost::static_visitor<Object>\n+{\n+public:\n+    Object operator()(const CNoDestination &dest) const { return Object(); }\n+\n+    Object operator()(const CKeyID &keyID) const {\n+        Object obj;\n+        CPubKey vchPubKey;\n+        pwalletMain->GetPubKey(keyID, vchPubKey);\n+        obj.push_back(Pair(\"isscript\", false));\n+        obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey.Raw())));\n+        obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n+        return obj;\n+    }\n+\n+    Object operator()(const CScriptID &scriptID) const {\n+        Object obj;\n+        obj.push_back(Pair(\"isscript\", true));\n+        CScript subscript;\n+        pwalletMain->GetCScript(scriptID, subscript);\n+        std::vector<CTxDestination> addresses;\n+        txnouttype whichType;\n+        int nRequired;\n+        ExtractDestinations(subscript, whichType, addresses, nRequired);\n+        obj.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n+        Array a;\n+        BOOST_FOREACH(const CTxDestination& addr, addresses)\n+            a.push_back(CBitcoinAddress(addr).ToString());\n+        obj.push_back(Pair(\"addresses\", a));\n+        if (whichType == TX_MULTISIG)\n+            obj.push_back(Pair(\"sigsrequired\", nRequired));\n+        return obj;\n+    }\n+};\n \n Value validateaddress(const Array& params, bool fHelp)\n {\n@@ -1947,42 +1985,17 @@ Value validateaddress(const Array& params, bool fHelp)\n     ret.push_back(Pair(\"isvalid\", isValid));\n     if (isValid)\n     {\n-        // Call Hash160ToAddress() so we always return current ADDRESSVERSION\n-        // version of the address:\n+        CTxDestination dest = address.Get();\n         string currentAddress = address.ToString();\n         ret.push_back(Pair(\"address\", currentAddress));\n-        if (pwalletMain->HaveKey(address))\n-        {\n-            ret.push_back(Pair(\"ismine\", true));\n-            CPubKey vchPubKey;\n-            pwalletMain->GetPubKey(address, vchPubKey);\n-            ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey.Raw())));\n-            CKey key;\n-            key.SetPubKey(vchPubKey);\n-            ret.push_back(Pair(\"iscompressed\", key.IsCompressed()));\n-        }\n-        else if (pwalletMain->HaveCScript(address.GetHash160()))\n-        {\n-            ret.push_back(Pair(\"isscript\", true));\n-            CScript subscript;\n-            pwalletMain->GetCScript(address.GetHash160(), subscript);\n-            ret.push_back(Pair(\"ismine\", ::IsMine(*pwalletMain, subscript)));\n-            std::vector<CBitcoinAddress> addresses;\n-            txnouttype whichType;\n-            int nRequired;\n-            ExtractAddresses(subscript, whichType, addresses, nRequired);\n-            ret.push_back(Pair(\"script\", GetTxnOutputType(whichType)));\n-            Array a;\n-            BOOST_FOREACH(const CBitcoinAddress& addr, addresses)\n-                a.push_back(addr.ToString());\n-            ret.push_back(Pair(\"addresses\", a));\n-            if (whichType == TX_MULTISIG)\n-                ret.push_back(Pair(\"sigsrequired\", nRequired));\n+        bool fMine = IsMine(*pwalletMain, dest);\n+        ret.push_back(Pair(\"ismine\", fMine));\n+        if (fMine) {\n+            Object detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+            ret.insert(ret.end(), detail.begin(), detail.end());\n         }\n-        else\n-            ret.push_back(Pair(\"ismine\", false));\n-        if (pwalletMain->mapAddressBook.count(address))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address]));\n+        if (pwalletMain->mapAddressBook.count(dest))\n+            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest]));\n     }\n     return ret;\n }"
      },
      {
        "sha": "2a87311056c2bc15e63fc4376214fe7d0ba02332",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -608,7 +608,7 @@ bool AppInit2()\n         if (!pwalletMain->GetKeyFromPool(newDefaultKey, false))\n             strErrors << _(\"Cannot initialize keypool\") << \"\\n\";\n         pwalletMain->SetDefaultKey(newDefaultKey);\n-        if (!pwalletMain->SetAddressBookName(CBitcoinAddress(pwalletMain->vchDefaultKey), \"\"))\n+        if (!pwalletMain->SetAddressBookName(pwalletMain->vchDefaultKey.GetID(), \"\"))\n             strErrors << _(\"Cannot write default address\") << \"\\n\";\n     }\n "
      },
      {
        "sha": "945c49989b95209630d1b0ec9f44e997e7e39677",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -44,6 +44,23 @@ class key_error : public std::runtime_error\n     explicit key_error(const std::string& str) : std::runtime_error(str) {}\n };\n \n+/** A reference to a CKey: the Hash160 of its serialized public key */\n+class CKeyID : public uint160\n+{\n+public:\n+    CKeyID() : uint160(0) { }\n+    CKeyID(const uint160 &in) : uint160(in) { }\n+};\n+\n+/** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n+class CScriptID : public uint160\n+{\n+public:\n+    CScriptID() : uint160(0) { }\n+    CScriptID(const uint160 &in) : uint160(in) { }\n+};\n+\n+/** An encapsulated public key. */\n class CPubKey {\n private:\n     std::vector<unsigned char> vchPubKey;\n@@ -60,8 +77,8 @@ class CPubKey {\n         READWRITE(vchPubKey);\n     )\n \n-    uint160 GetID() const {\n-        return Hash160(vchPubKey);\n+    CKeyID GetID() const {\n+        return CKeyID(Hash160(vchPubKey));\n     }\n \n     uint256 GetHash() const {\n@@ -72,6 +89,10 @@ class CPubKey {\n         return vchPubKey.size() == 33 || vchPubKey.size() == 65;\n     }\n \n+    bool IsCompressed() const {\n+        return vchPubKey.size() == 33;\n+    }\n+\n     std::vector<unsigned char> Raw() const {\n         return vchPubKey;\n     }"
      },
      {
        "sha": "e0cf805a19ea3e492c3e6070971ddfd4425bd701",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -6,7 +6,7 @@\n #include \"keystore.h\"\n #include \"script.h\"\n \n-bool CKeyStore::GetPubKey(const CBitcoinAddress &address, CPubKey &vchPubKeyOut) const\n+bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;\n     if (!GetKey(address, key))\n@@ -21,7 +21,7 @@ bool CBasicKeyStore::AddKey(const CKey& key)\n     CSecret secret = key.GetSecret(fCompressed);\n     {\n         LOCK(cs_KeyStore);\n-        mapKeys[CBitcoinAddress(key.GetPubKey())] = make_pair(secret, fCompressed);\n+        mapKeys[key.GetPubKey().GetID()] = make_pair(secret, fCompressed);\n     }\n     return true;\n }\n@@ -30,12 +30,12 @@ bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     {\n         LOCK(cs_KeyStore);\n-        mapScripts[Hash160(redeemScript)] = redeemScript;\n+        mapScripts[redeemScript.GetID()] = redeemScript;\n     }\n     return true;\n }\n \n-bool CBasicKeyStore::HaveCScript(const uint160& hash) const\n+bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const\n {\n     bool result;\n     {\n@@ -46,7 +46,7 @@ bool CBasicKeyStore::HaveCScript(const uint160& hash) const\n }\n \n \n-bool CBasicKeyStore::GetCScript(const uint160 &hash, CScript& redeemScriptOut) const\n+bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -147,12 +147,12 @@ bool CCryptoKeyStore::AddCryptedKey(const CPubKey &vchPubKey, const std::vector<\n         if (!SetCrypted())\n             return false;\n \n-        mapCryptedKeys[CBitcoinAddress(vchPubKey)] = make_pair(vchPubKey, vchCryptedSecret);\n+        mapCryptedKeys[vchPubKey.GetID()] = make_pair(vchPubKey, vchCryptedSecret);\n     }\n     return true;\n }\n \n-bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n+bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n {\n     {\n         LOCK(cs_KeyStore);\n@@ -177,7 +177,7 @@ bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n     return false;\n }\n \n-bool CCryptoKeyStore::GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const\n+bool CCryptoKeyStore::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n {\n     {\n         LOCK(cs_KeyStore);"
      },
      {
        "sha": "ab369bbf47347959e89e46ec96c94b8f5fa3a15d",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -7,7 +7,6 @@\n \n #include \"crypter.h\"\n #include \"sync.h\"\n-#include \"base58.h\"\n #include <boost/signals2/signal.hpp>\n \n class CScript;\n@@ -25,17 +24,17 @@ class CKeyStore\n     virtual bool AddKey(const CKey& key) =0;\n \n     // Check whether a key corresponding to a given address is present in the store.\n-    virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n-    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n-    virtual void GetKeys(std::set<CBitcoinAddress> &setAddress) const =0;\n-    virtual bool GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const;\n+    virtual bool HaveKey(const CKeyID &address) const =0;\n+    virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n+    virtual void GetKeys(std::set<CKeyID> &setAddress) const =0;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n \n     // Support for BIP 0013 : see https://en.bitcoin.it/wiki/BIP_0013\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n-    virtual bool HaveCScript(const uint160 &hash) const =0;\n-    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const =0;\n+    virtual bool HaveCScript(const CScriptID &hash) const =0;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n \n-    virtual bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret, bool &fCompressed) const\n+    virtual bool GetSecret(const CKeyID &address, CSecret& vchSecret, bool &fCompressed) const\n     {\n         CKey key;\n         if (!GetKey(address, key))\n@@ -45,8 +44,8 @@ class CKeyStore\n     }\n };\n \n-typedef std::map<CBitcoinAddress, std::pair<CSecret, bool> > KeyMap;\n-typedef std::map<uint160, CScript > ScriptMap;\n+typedef std::map<CKeyID, std::pair<CSecret, bool> > KeyMap;\n+typedef std::map<CScriptID, CScript > ScriptMap;\n \n /** Basic key store, that keeps keys in an address->secret map */\n class CBasicKeyStore : public CKeyStore\n@@ -57,7 +56,7 @@ class CBasicKeyStore : public CKeyStore\n \n public:\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const CBitcoinAddress &address) const\n+    bool HaveKey(const CKeyID &address) const\n     {\n         bool result;\n         {\n@@ -66,7 +65,7 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return result;\n     }\n-    void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n+    void GetKeys(std::set<CKeyID> &setAddress) const\n     {\n         setAddress.clear();\n         {\n@@ -79,7 +78,7 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetKey(const CBitcoinAddress &address, CKey &keyOut) const\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -94,11 +93,11 @@ class CBasicKeyStore : public CKeyStore\n         return false;\n     }\n     virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const uint160 &hash) const;\n-    virtual bool GetCScript(const uint160 &hash, CScript& redeemScriptOut) const;\n+    virtual bool HaveCScript(const CScriptID &hash) const;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n };\n \n-typedef std::map<CBitcoinAddress, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n+typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n \n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n@@ -148,7 +147,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);\n-    bool HaveKey(const CBitcoinAddress &address) const\n+    bool HaveKey(const CKeyID &address) const\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -158,9 +157,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n-    bool GetPubKey(const CBitcoinAddress &address, CPubKey& vchPubKeyOut) const;\n-    void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n+    void GetKeys(std::set<CKeyID> &setAddress) const\n     {\n         if (!IsCrypted())\n         {"
      },
      {
        "sha": "e65d3915ecbbb6d24471aeaeb3448680fd7c0c8d",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -3,6 +3,7 @@\n #include \"walletmodel.h\"\n \n #include \"wallet.h\"\n+#include \"base58.h\"\n \n #include <QFont>\n #include <QColor>\n@@ -58,11 +59,11 @@ class AddressTablePriv\n         cachedAddressTable.clear();\n         {\n             LOCK(wallet->cs_wallet);\n-            BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, std::string)& item, wallet->mapAddressBook)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination, std::string)& item, wallet->mapAddressBook)\n             {\n                 const CBitcoinAddress& address = item.first;\n                 const std::string& strName = item.second;\n-                bool fMine = wallet->HaveKey(address);\n+                bool fMine = IsMine(*wallet, address.Get());\n                 cachedAddressTable.append(AddressTableEntry(fMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending,\n                                   QString::fromStdString(strName),\n                                   QString::fromStdString(address.ToString())));\n@@ -220,7 +221,8 @@ bool AddressTableModel::setData(const QModelIndex & index, const QVariant & valu\n         switch(index.column())\n         {\n         case Label:\n-            wallet->SetAddressBookName(rec->address.toStdString(), value.toString().toStdString());\n+            wallet->SetAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get(), value.toString().toStdString());\n+            rec->label = value.toString();\n             break;\n         case Address:\n             // Refuse to set invalid address, set error status and return false\n@@ -235,9 +237,9 @@ bool AddressTableModel::setData(const QModelIndex & index, const QVariant & valu\n                 {\n                     LOCK(wallet->cs_wallet);\n                     // Remove old entry\n-                    wallet->DelAddressBookName(rec->address.toStdString());\n+                    wallet->DelAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get());\n                     // Add new entry with new address\n-                    wallet->SetAddressBookName(value.toString().toStdString(), rec->label.toStdString());\n+                    wallet->SetAddressBookName(CBitcoinAddress(value.toString().toStdString()).Get(), rec->label.toStdString());\n                 }\n             }\n             break;\n@@ -314,7 +316,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n         // Check for duplicate addresses\n         {\n             LOCK(wallet->cs_wallet);\n-            if(wallet->mapAddressBook.count(strAddress))\n+            if(wallet->mapAddressBook.count(CBitcoinAddress(strAddress).Get()))\n             {\n                 editStatus = DUPLICATE_ADDRESS;\n                 return QString();\n@@ -337,7 +339,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n             editStatus = KEY_GENERATION_FAILURE;\n             return QString();\n         }\n-        strAddress = CBitcoinAddress(newKey).ToString();\n+        strAddress = CBitcoinAddress(newKey.GetID()).ToString();\n     }\n     else\n     {\n@@ -346,7 +348,7 @@ QString AddressTableModel::addRow(const QString &type, const QString &label, con\n     // Add entry\n     {\n         LOCK(wallet->cs_wallet);\n-        wallet->SetAddressBookName(strAddress, strLabel);\n+        wallet->SetAddressBookName(CBitcoinAddress(strAddress).Get(), strLabel);\n     }\n     return QString::fromStdString(strAddress);\n }\n@@ -363,7 +365,7 @@ bool AddressTableModel::removeRows(int row, int count, const QModelIndex & paren\n     }\n     {\n         LOCK(wallet->cs_wallet);\n-        wallet->DelAddressBookName(rec->address.toStdString());\n+        wallet->DelAddressBookName(CBitcoinAddress(rec->address.toStdString()).Get());\n     }\n     return true;\n }\n@@ -375,7 +377,7 @@ QString AddressTableModel::labelForAddress(const QString &address) const\n     {\n         LOCK(wallet->cs_wallet);\n         CBitcoinAddress address_parsed(address.toStdString());\n-        std::map<CBitcoinAddress, std::string>::iterator mi = wallet->mapAddressBook.find(address_parsed);\n+        std::map<CTxDestination, std::string>::iterator mi = wallet->mapAddressBook.find(address_parsed.Get());\n         if (mi != wallet->mapAddressBook.end())\n         {\n             return QString::fromStdString(mi->second);"
      },
      {
        "sha": "ab3ea5a0c5585d3ecdf1e2f23e534e4e5a13021e",
        "filename": "src/qt/messagepage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/messagepage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/messagepage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/messagepage.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -10,6 +10,7 @@\n #include \"main.h\"\n #include \"wallet.h\"\n #include \"init.h\"\n+#include \"base58.h\"\n \n #include \"messagepage.h\"\n #include \"ui_messagepage.h\"\n@@ -83,6 +84,13 @@ void MessagePage::on_signMessage_clicked()\n                               QMessageBox::Abort, QMessageBox::Abort);\n         return;\n     }\n+    CKeyID keyID;\n+    if (!addr.GetKeyID(keyID))\n+    {\n+        QMessageBox::critical(this, tr(\"Error signing\"), tr(\"%1 does not refer to a key.\").arg(address),\n+                              QMessageBox::Abort, QMessageBox::Abort);\n+        return;\n+    }\n \n     WalletModel::UnlockContext ctx(model->requestUnlock());\n     if(!ctx.isValid())\n@@ -92,7 +100,7 @@ void MessagePage::on_signMessage_clicked()\n     }\n \n     CKey key;\n-    if (!pwalletMain->GetKey(addr, key))\n+    if (!pwalletMain->GetKey(keyID, key))\n     {\n         QMessageBox::critical(this, tr(\"Error signing\"), tr(\"Private key for %1 is not available.\").arg(address),\n                               QMessageBox::Abort, QMessageBox::Abort);"
      },
      {
        "sha": "10bcef0d90c545e66854d51217183e541f74e18d",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -7,6 +7,7 @@\n #include \"wallet.h\"\n #include \"db.h\"\n #include \"ui_interface.h\"\n+#include \"base58.h\"\n \n #include <QString>\n \n@@ -85,14 +86,14 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                 {\n                     if (wallet->IsMine(txout))\n                     {\n-                        CBitcoinAddress address;\n-                        if (ExtractAddress(txout.scriptPubKey, address) && wallet->HaveKey(address))\n+                        CTxDestination address;\n+                        if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                         {\n                             if (wallet->mapAddressBook.count(address))\n                             {\n                                 strHTML += tr(\"<b>From:</b> \") + tr(\"unknown\") + \"<br>\";\n                                 strHTML += tr(\"<b>To:</b> \");\n-                                strHTML += GUIUtil::HtmlEscape(address.ToString());\n+                                strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                                 if (!wallet->mapAddressBook[address].empty())\n                                     strHTML += tr(\" (yours, label: \") + GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \")\";\n                                 else\n@@ -115,8 +116,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n             // Online transaction\n             strAddress = wtx.mapValue[\"to\"];\n             strHTML += tr(\"<b>To:</b> \");\n-            if (wallet->mapAddressBook.count(strAddress) && !wallet->mapAddressBook[strAddress].empty())\n-                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[strAddress]) + \" \";\n+            CTxDestination dest = CBitcoinAddress(strAddress).Get();\n+            if (wallet->mapAddressBook.count(dest) && !wallet->mapAddressBook[dest].empty())\n+                strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[dest]) + \" \";\n             strHTML += GUIUtil::HtmlEscape(strAddress) + \"<br>\";\n         }\n \n@@ -170,13 +172,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                     if (wtx.mapValue[\"to\"].empty())\n                     {\n                         // Offline transaction\n-                        CBitcoinAddress address;\n-                        if (ExtractAddress(txout.scriptPubKey, address))\n+                        CTxDestination address;\n+                        if (ExtractDestination(txout.scriptPubKey, address))\n                         {\n                             strHTML += tr(\"<b>To:</b> \");\n                             if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].empty())\n                                 strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n-                            strHTML += GUIUtil::HtmlEscape(address.ToString());\n+                            strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n                             strHTML += \"<br>\";\n                         }\n                     }\n@@ -260,12 +262,12 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx)\n                         {\n                             strHTML += \"<li>\";\n                             const CTxOut &vout = prev.vout[prevout.n];\n-                            CBitcoinAddress address;\n-                            if (ExtractAddress(vout.scriptPubKey, address))\n+                            CTxDestination address;\n+                            if (ExtractDestination(vout.scriptPubKey, address))\n                             {\n                                 if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].empty())\n                                     strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address]) + \" \";\n-                                strHTML += QString::fromStdString(address.ToString());\n+                                strHTML += QString::fromStdString(CBitcoinAddress(address).ToString());\n                             }\n                             strHTML = strHTML + \" Amount=\" + BitcoinUnits::formatWithUnit(BitcoinUnits::BTC,vout.nValue);\n                             strHTML = strHTML + \" IsMine=\" + (wallet->IsMine(vout) ? \"true\" : \"false\") + \"</li>\";"
      },
      {
        "sha": "160973638d481063ddda49d0fb66b8487a51e270",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -1,6 +1,7 @@\n #include \"transactionrecord.h\"\n \n #include \"wallet.h\"\n+#include \"base58.h\"\n \n /* Return positive answer if transaction should be shown in list.\n  */\n@@ -50,19 +51,19 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             if(wallet->IsMine(txout))\n             {\n                 TransactionRecord sub(hash, nTime);\n-                CBitcoinAddress address;\n+                CTxDestination address;\n                 sub.idx = parts.size(); // sequence number\n                 sub.credit = txout.nValue;\n                 if (wtx.IsCoinBase())\n                 {\n                     // Generated\n                     sub.type = TransactionRecord::Generated;\n                 }\n-                else if (ExtractAddress(txout.scriptPubKey, address) && wallet->HaveKey(address))\n+                else if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*wallet, address))\n                 {\n                     // Received by Bitcoin Address\n                     sub.type = TransactionRecord::RecvWithAddress;\n-                    sub.address = address.ToString();\n+                    sub.address = CBitcoinAddress(address).ToString();\n                 }\n                 else\n                 {\n@@ -113,12 +114,12 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     continue;\n                 }\n \n-                CBitcoinAddress address;\n-                if (ExtractAddress(txout.scriptPubKey, address))\n+                CTxDestination address;\n+                if (ExtractDestination(txout.scriptPubKey, address))\n                 {\n                     // Sent to Bitcoin Address\n                     sub.type = TransactionRecord::SendToAddress;\n-                    sub.address = address.ToString();\n+                    sub.address = CBitcoinAddress(address).ToString();\n                 }\n                 else\n                 {"
      },
      {
        "sha": "d71568d2e99ec6817784e81b57dc56468744ef81",
        "filename": "src/qt/verifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/verifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/verifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/verifymessagedialog.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -14,6 +14,7 @@\n #include \"walletmodel.h\"\n #include \"addresstablemodel.h\"\n #include \"guiutil.h\"\n+#include \"base58.h\"\n \n VerifyMessageDialog::VerifyMessageDialog(AddressTableModel *addressModel, QWidget *parent) :\n     QDialog(parent),\n@@ -62,7 +63,7 @@ bool VerifyMessageDialog::checkAddress()\n         return false;\n     }\n \n-    CBitcoinAddress address(key.GetPubKey());\n+    CBitcoinAddress address(key.GetPubKey().GetID());\n     QString qStringAddress = QString::fromStdString(address.ToString());\n     ui->lnAddress->setText(qStringAddress);\n     ui->copyToClipboard->setEnabled(true);"
      },
      {
        "sha": "033df98082ddfef92509ccb55845757f9668ff30",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -7,6 +7,7 @@\n #include \"ui_interface.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\" // for BackupWallet\n+#include \"base58.h\"\n \n #include <QSet>\n \n@@ -137,7 +138,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n         foreach(const SendCoinsRecipient &rcp, recipients)\n         {\n             CScript scriptPubKey;\n-            scriptPubKey.SetBitcoinAddress(rcp.address.toStdString());\n+            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n             vecSend.push_back(make_pair(scriptPubKey, rcp.amount));\n         }\n \n@@ -169,16 +170,17 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         std::string strAddress = rcp.address.toStdString();\n+        CTxDestination dest = CBitcoinAddress(strAddress).Get();\n         std::string strLabel = rcp.label.toStdString();\n         {\n             LOCK(wallet->cs_wallet);\n \n-            std::map<CBitcoinAddress, std::string>::iterator mi = wallet->mapAddressBook.find(strAddress);\n+            std::map<CTxDestination, std::string>::iterator mi = wallet->mapAddressBook.find(dest);\n \n             // Check if we have a new address or an updated label\n             if (mi == wallet->mapAddressBook.end() || mi->second != strLabel)\n             {\n-                wallet->SetAddressBookName(strAddress, strLabel);\n+                wallet->SetAddressBookName(dest, strLabel);\n             }\n         }\n     }\n@@ -268,11 +270,11 @@ static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStor\n     QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n }\n \n-static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const std::string &address, const std::string &label, bool isMine, ChangeType status)\n+static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i status=%i\\n\", address.c_str(), label.c_str(), isMine, status);\n+    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i status=%i\\n\", CBitcoinAddress(address).ToString().c_str(), label.c_str(), isMine, status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n-                              Q_ARG(QString, QString::fromStdString(address)),\n+                              Q_ARG(QString, QString::fromStdString(CBitcoinAddress(address).ToString())),\n                               Q_ARG(QString, QString::fromStdString(label)),\n                               Q_ARG(bool, isMine),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "30e504a095409ea77b85c3cf746f2d59e94ce5d0",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -5,6 +5,7 @@\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\"\n+#include \"base58.h\"\n \n #include <boost/lexical_cast.hpp>\n \n@@ -51,8 +52,7 @@ Value importprivkey(const Array& params, bool fHelp)\n     bool fCompressed;\n     CSecret secret = vchSecret.GetSecret(fCompressed);\n     key.SetSecret(secret, fCompressed);\n-    CBitcoinAddress vchAddress = CBitcoinAddress(key.GetPubKey());\n-\n+    CKeyID vchAddress = key.GetPubKey().GetID();\n     {\n         LOCK2(cs_main, pwalletMain->cs_wallet);\n \n@@ -80,9 +80,12 @@ Value dumpprivkey(const Array& params, bool fHelp)\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n         throw JSONRPCError(-5, \"Invalid Bitcoin address\");\n+    CKeyID keyID;\n+    if (!address.GetKeyID(keyID))\n+        throw JSONRPCError(-3, \"Address does not refer to a key\");\n     CSecret vchSecret;\n     bool fCompressed;\n-    if (!pwalletMain->GetSecret(address, vchSecret, fCompressed))\n+    if (!pwalletMain->GetSecret(keyID, vchSecret, fCompressed))\n         throw JSONRPCError(-4,\"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret, fCompressed).ToString();\n }"
      },
      {
        "sha": "2e1e1ad7de92e1f35fb9ac3fc3bf41bb3acbe541",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 70,
        "deletions": 47,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -1312,7 +1312,7 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n }\n \n \n-bool Sign1(const CBitcoinAddress& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n+bool Sign1(const CKeyID& address, const CKeyStore& keystore, uint256 hash, int nHashType, CScript& scriptSigRet)\n {\n     CKey key;\n     if (!keystore.GetKey(address, key))\n@@ -1334,9 +1334,8 @@ bool SignN(const vector<valtype>& multisigdata, const CKeyStore& keystore, uint2\n     for (vector<valtype>::const_iterator it = multisigdata.begin()+1; it != multisigdata.begin()+multisigdata.size()-1; it++)\n     {\n         const valtype& pubkey = *it;\n-        CBitcoinAddress address;\n-        address.SetPubKey(pubkey);\n-        if (Sign1(address, keystore, hash, nHashType, scriptSigRet))\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n         {\n             ++nSigned;\n             if (nSigned == nRequired) break;\n@@ -1360,22 +1359,22 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     if (!Solver(scriptPubKey, whichTypeRet, vSolutions))\n         return false;\n \n-    CBitcoinAddress address;\n+    CKeyID keyID;\n     switch (whichTypeRet)\n     {\n     case TX_NONSTANDARD:\n         return false;\n     case TX_PUBKEY:\n-        address.SetPubKey(vSolutions[0]);\n-        return Sign1(address, keystore, hash, nHashType, scriptSigRet);\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        return Sign1(keyID, keystore, hash, nHashType, scriptSigRet);\n     case TX_PUBKEYHASH:\n-        address.SetHash160(uint160(vSolutions[0]));\n-        if (!Sign1(address, keystore, hash, nHashType, scriptSigRet))\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        if (!Sign1(keyID, keystore, hash, nHashType, scriptSigRet))\n             return false;\n         else\n         {\n             CPubKey vch;\n-            keystore.GetPubKey(address, vch);\n+            keystore.GetPubKey(keyID, vch);\n             scriptSigRet << vch;\n         }\n         return true;\n@@ -1436,36 +1435,52 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n     unsigned int nResult = 0;\n     BOOST_FOREACH(const valtype& pubkey, pubkeys)\n     {\n-        CBitcoinAddress address;\n-        address.SetPubKey(pubkey);\n-        if (keystore.HaveKey(address))\n+        CKeyID keyID = CPubKey(pubkey).GetID();\n+        if (keystore.HaveKey(keyID))\n             ++nResult;\n     }\n     return nResult;\n }\n \n+\n+class CKeyStoreIsMineVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    const CKeyStore *keystore;\n+public:\n+    CKeyStoreIsMineVisitor(const CKeyStore *keystoreIn) : keystore(keystoreIn) { }\n+    bool operator()(const CNoDestination &dest) const { return false; }\n+    bool operator()(const CKeyID &keyID) const { return keystore->HaveKey(keyID); }\n+    bool operator()(const CScriptID &scriptID) const { return keystore->HaveCScript(scriptID); }\n+};\n+\n+bool IsMine(const CKeyStore &keystore, const CTxDestination &dest)\n+{\n+    return boost::apply_visitor(CKeyStoreIsMineVisitor(&keystore), dest);\n+}\n+\n bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions))\n         return false;\n \n-    CBitcoinAddress address;\n+    CKeyID keyID;\n     switch (whichType)\n     {\n     case TX_NONSTANDARD:\n         return false;\n     case TX_PUBKEY:\n-        address.SetPubKey(vSolutions[0]);\n-        return keystore.HaveKey(address);\n+        keyID = CPubKey(vSolutions[0]).GetID();\n+        return keystore.HaveKey(keyID);\n     case TX_PUBKEYHASH:\n-        address.SetHash160(uint160(vSolutions[0]));\n-        return keystore.HaveKey(address);\n+        keyID = CKeyID(uint160(vSolutions[0]));\n+        return keystore.HaveKey(keyID);\n     case TX_SCRIPTHASH:\n     {\n         CScript subscript;\n-        if (!keystore.GetCScript(uint160(vSolutions[0]), subscript))\n+        if (!keystore.GetCScript(CScriptID(uint160(vSolutions[0])), subscript))\n             return false;\n         return IsMine(keystore, subscript);\n     }\n@@ -1483,7 +1498,7 @@ bool IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n     return false;\n }\n \n-bool ExtractAddress(const CScript& scriptPubKey, CBitcoinAddress& addressRet)\n+bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n@@ -1492,24 +1507,24 @@ bool ExtractAddress(const CScript& scriptPubKey, CBitcoinAddress& addressRet)\n \n     if (whichType == TX_PUBKEY)\n     {\n-        addressRet.SetPubKey(vSolutions[0]);\n+        addressRet = CPubKey(vSolutions[0]).GetID();\n         return true;\n     }\n     else if (whichType == TX_PUBKEYHASH)\n     {\n-        addressRet.SetHash160(uint160(vSolutions[0]));\n+        addressRet = CKeyID(uint160(vSolutions[0]));\n         return true;\n     }\n     else if (whichType == TX_SCRIPTHASH)\n     {\n-        addressRet.SetScriptHash160(uint160(vSolutions[0]));\n+        addressRet = CScriptID(uint160(vSolutions[0]));\n         return true;\n     }\n     // Multisig txns have more than one address...\n     return false;\n }\n \n-bool ExtractAddresses(const CScript& scriptPubKey, txnouttype& typeRet, vector<CBitcoinAddress>& addressRet, int& nRequiredRet)\n+bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vector<CTxDestination>& addressRet, int& nRequiredRet)\n {\n     addressRet.clear();\n     typeRet = TX_NONSTANDARD;\n@@ -1522,21 +1537,16 @@ bool ExtractAddresses(const CScript& scriptPubKey, txnouttype& typeRet, vector<C\n         nRequiredRet = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n         {\n-            CBitcoinAddress address;\n-            address.SetPubKey(vSolutions[i]);\n+            CTxDestination address = CPubKey(vSolutions[i]).GetID();\n             addressRet.push_back(address);\n         }\n     }\n     else\n     {\n         nRequiredRet = 1;\n-        CBitcoinAddress address;\n-        if (typeRet == TX_PUBKEYHASH)\n-            address.SetHash160(uint160(vSolutions.front()));\n-        else if (typeRet == TX_SCRIPTHASH)\n-            address.SetScriptHash160(uint160(vSolutions.front()));\n-        else if (typeRet == TX_PUBKEY)\n-            address.SetPubKey(vSolutions.front());\n+        CTxDestination address;\n+        if (!ExtractDestination(scriptPubKey, address))\n+           return false;\n         addressRet.push_back(address);\n     }\n \n@@ -1694,13 +1704,34 @@ bool CScript::IsPayToScriptHash() const\n             this->at(22) == OP_EQUAL);\n }\n \n-void CScript::SetBitcoinAddress(const CBitcoinAddress& address)\n+class CScriptVisitor : public boost::static_visitor<bool>\n {\n-    this->clear();\n-    if (address.IsScript())\n-        *this << OP_HASH160 << address.GetHash160() << OP_EQUAL;\n-    else\n-        *this << OP_DUP << OP_HASH160 << address.GetHash160() << OP_EQUALVERIFY << OP_CHECKSIG;\n+private:\n+    CScript *script;\n+public:\n+    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+\n+    bool operator()(const CNoDestination &dest) const {\n+        script->clear();\n+        return false;\n+    }\n+\n+    bool operator()(const CKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        return true;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        return true;\n+    }\n+};\n+\n+void CScript::SetDestination(const CTxDestination& dest)\n+{\n+    boost::apply_visitor(CScriptVisitor(this), dest);\n }\n \n void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)\n@@ -1712,11 +1743,3 @@ void CScript::SetMultisig(int nRequired, const std::vector<CKey>& keys)\n         *this << key.GetPubKey();\n     *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n }\n-\n-void CScript::SetPayToScriptHash(const CScript& subscript)\n-{\n-    assert(!subscript.empty());\n-    uint160 subscriptHash = Hash160(subscript);\n-    this->clear();\n-    *this << OP_HASH160 << subscriptHash << OP_EQUAL;\n-}"
      },
      {
        "sha": "d490cd1824a93ca4e94c6f727d59139b4b6b5011",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 27,
        "deletions": 11,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -5,15 +5,16 @@\n #ifndef H_BITCOIN_SCRIPT\n #define H_BITCOIN_SCRIPT\n \n-#include \"base58.h\"\n-\n #include <string>\n #include <vector>\n \n #include <boost/foreach.hpp>\n+#include <boost/variant.hpp>\n+\n+#include \"keystore.h\"\n+#include \"bignum.h\"\n \n class CTransaction;\n-class CKeyStore;\n \n /** Signature hash types/flags */\n enum\n@@ -35,6 +36,20 @@ enum txnouttype\n     TX_MULTISIG,\n };\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n const char* GetTxnOutputType(txnouttype t);\n \n /** Script opcodes */\n@@ -521,13 +536,8 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    void SetBitcoinAddress(const CBitcoinAddress& address);\n-    void SetBitcoinAddress(const std::vector<unsigned char>& vchPubKey)\n-    {\n-        SetBitcoinAddress(CBitcoinAddress(vchPubKey));\n-    }\n+    void SetDestination(const CTxDestination& address);\n     void SetMultisig(int nRequired, const std::vector<CKey>& keys);\n-    void SetPayToScriptHash(const CScript& subscript);\n \n \n     void PrintHex() const\n@@ -562,6 +572,11 @@ class CScript : public std::vector<unsigned char>\n     {\n         printf(\"%s\\n\", ToString().c_str());\n     }\n+\n+    CScriptID GetID() const\n+    {\n+        return CScriptID(Hash160(*this));\n+    }\n };\n \n \n@@ -573,8 +588,9 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::v\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-bool ExtractAddress(const CScript& scriptPubKey, CBitcoinAddress& addressRet);\n-bool ExtractAddresses(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CBitcoinAddress>& addressRet, int& nRequiredRet);\n+bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n+bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, int nHashType);\n "
      },
      {
        "sha": "4a185b3cc5c82a00e1d6f83d691e46e9ea1c3565",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -161,7 +161,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n         CDataStream ds(SER_DISK, CLIENT_VERSION);\n         ds << tx;\n@@ -179,7 +179,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].prevout.hash = txPrev.GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n         CDataStream ds(SER_DISK, CLIENT_VERSION);\n@@ -195,7 +195,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n         tx.vin.resize(500);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n \n         CDataStream ds(SER_DISK, CLIENT_VERSION);\n         ds << tx;\n@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     CTransaction tx;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 1*CENT;\n-    tx.vout[0].scriptPubKey.SetBitcoinAddress(key.GetPubKey());\n+    tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n     tx.vin.resize(NPREV);\n     for (unsigned int j = 0; j < tx.vin.size(); j++)\n     {"
      },
      {
        "sha": "3f265f1fe35d7f59a4ab894bf939a5e4d1149aef",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -1,8 +1,6 @@\n #include <boost/test/unit_test.hpp>\n \n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"util.h\"\n+#include \"base58.h\"\n \n BOOST_AUTO_TEST_SUITE(base58_tests)\n "
      },
      {
        "sha": "0a6df88feff5cee39af9841fdfdb8c2d3f357784",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -10,11 +10,18 @@\n \n using namespace std;\n \n-static const string strSecret1 (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");\n-static const string strSecret2 (\"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3\");\n-static const string strSecret1C(\"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw\");\n-static const string strSecret2C(\"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g\");\n-static const string strAddress1(\"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\");\n+static const string strSecret1     (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");\n+static const string strSecret2     (\"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3\");\n+static const string strSecret1C    (\"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw\");\n+static const string strSecret2C    (\"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g\");\n+static const CBitcoinAddress addr1 (\"1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ\");\n+static const CBitcoinAddress addr2 (\"1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ\");\n+static const CBitcoinAddress addr1C(\"1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs\");\n+static const CBitcoinAddress addr2C(\"1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs\");\n+\n+\n+static const string strAddressBad(\"1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF\");\n+\n \n #ifdef KEY_TESTS_DUMPINFO\n void dumpKeyInfo(uint256 privkey)\n@@ -53,7 +60,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK( bsecret2.SetString (strSecret2));\n     BOOST_CHECK( bsecret1C.SetString(strSecret1C));\n     BOOST_CHECK( bsecret2C.SetString(strSecret2C));\n-    BOOST_CHECK(!baddress1.SetString(strAddress1));\n+    BOOST_CHECK(!baddress1.SetString(strAddressBad));\n \n     bool fCompressed;\n     CSecret secret1  = bsecret1.GetSecret (fCompressed);\n@@ -74,10 +81,10 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     key1C.SetSecret(secret1, true);\n     key2C.SetSecret(secret2, true);\n \n-    BOOST_CHECK(CBitcoinAddress(key1.GetPubKey ()).ToString() == \"1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ\");\n-    BOOST_CHECK(CBitcoinAddress(key2.GetPubKey ()).ToString() == \"1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ\");\n-    BOOST_CHECK(CBitcoinAddress(key1C.GetPubKey()).ToString() == \"1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs\");\n-    BOOST_CHECK(CBitcoinAddress(key2C.GetPubKey()).ToString() == \"1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs\");\n+    BOOST_CHECK(addr1.Get()  == CTxDestination(key1.GetPubKey().GetID()));\n+    BOOST_CHECK(addr2.Get()  == CTxDestination(key2.GetPubKey().GetID()));\n+    BOOST_CHECK(addr1C.Get() == CTxDestination(key1C.GetPubKey().GetID()));\n+    BOOST_CHECK(addr2C.Get() == CTxDestination(key2C.GetPubKey().GetID()));\n \n     for (int n=0; n<16; n++)\n     {"
      },
      {
        "sha": "9cb0efecfd0f1dcbdec4902b8fffe43d72201799",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -175,12 +175,12 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n     //\n     CBasicKeyStore keystore, emptykeystore, partialkeystore;\n     CKey key[3];\n-    CBitcoinAddress keyaddr[3];\n+    CTxDestination keyaddr[3];\n     for (int i = 0; i < 3; i++)\n     {\n         key[i].MakeNewKey(true);\n         keystore.AddKey(key[i]);\n-        keyaddr[i].SetPubKey(key[i].GetPubKey());\n+        keyaddr[i] = key[i].GetPubKey().GetID();\n     }\n     partialkeystore.AddKey(key[0]);\n \n@@ -191,8 +191,8 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         s << key[0].GetPubKey() << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n-        CBitcoinAddress addr;\n-        BOOST_CHECK(ExtractAddress(s, addr));\n+        CTxDestination addr;\n+        BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n@@ -201,11 +201,11 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_DUP << OP_HASH160 << Hash160(key[0].GetPubKey().Raw()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+        s << OP_DUP << OP_HASH160 << key[0].GetPubKey().GetID() << OP_EQUALVERIFY << OP_CHECKSIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 1);\n-        CBitcoinAddress addr;\n-        BOOST_CHECK(ExtractAddress(s, addr));\n+        CTxDestination addr;\n+        BOOST_CHECK(ExtractDestination(s, addr));\n         BOOST_CHECK(addr == keyaddr[0]);\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n@@ -214,11 +214,11 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4);\n-        CBitcoinAddress addr;\n-        BOOST_CHECK(!ExtractAddress(s, addr));\n+        CTxDestination addr;\n+        BOOST_CHECK(!ExtractDestination(s, addr));\n         BOOST_CHECK(IsMine(keystore, s));\n         BOOST_CHECK(!IsMine(emptykeystore, s));\n         BOOST_CHECK(!IsMine(partialkeystore, s));\n@@ -227,12 +227,12 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_1 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n+        s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK_EQUAL(solutions.size(), 4);\n-        vector<CBitcoinAddress> addrs;\n+        vector<CTxDestination> addrs;\n         int nRequired;\n-        BOOST_CHECK(ExtractAddresses(s, whichType, addrs, nRequired));\n+        BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));\n         BOOST_CHECK(addrs[0] == keyaddr[0]);\n         BOOST_CHECK(addrs[1] == keyaddr[1]);\n         BOOST_CHECK(nRequired = 1);\n@@ -244,7 +244,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         vector<valtype> solutions;\n         txnouttype whichType;\n         CScript s;\n-        s << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << key[2].GetPubKey().Raw() << OP_3 << OP_CHECKMULTISIG;\n+        s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n         BOOST_CHECK(solutions.size() == 5);\n     }\n@@ -262,13 +262,13 @@ BOOST_AUTO_TEST_CASE(multisig_Sign)\n     }\n \n     CScript a_and_b;\n-    a_and_b << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n+    a_and_b << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n     CScript a_or_b;\n-    a_or_b  << OP_1 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << OP_2 << OP_CHECKMULTISIG;\n+    a_or_b  << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n     CScript escrow;\n-    escrow << OP_2 << key[0].GetPubKey().Raw() << key[1].GetPubKey().Raw() << key[2].GetPubKey().Raw() << OP_3 << OP_CHECKMULTISIG;\n+    escrow << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << key[2].GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n     CTransaction txFrom;  // Funding transaction\n     txFrom.vout.resize(3);"
      },
      {
        "sha": "f7bf5dfbf1ba5efefb1b1e945464df4745ac3bc4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -65,14 +65,14 @@ BOOST_AUTO_TEST_CASE(sign)\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n     standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[1].SetBitcoinAddress(key[1].GetPubKey());\n+    standardScripts[1].SetDestination(key[1].GetPubKey().GetID());\n     standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[3].SetBitcoinAddress(key[2].GetPubKey());\n+    standardScripts[3].SetDestination(key[2].GetPubKey().GetID());\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n         keystore.AddCScript(standardScripts[i]);\n-        evalScripts[i].SetPayToScriptHash(standardScripts[i]);\n+        evalScripts[i].SetDestination(standardScripts[i].GetID());\n     }\n \n     CTransaction txFrom;  // Funding transaction:\n@@ -122,7 +122,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n     CScript p2sh;\n-    p2sh.SetPayToScriptHash(invalidAsScript);\n+    p2sh.SetDestination(invalidAsScript.GetID());\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -133,7 +133,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     // Try to recurse, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n     CScript p2sh2;\n-    p2sh2.SetPayToScriptHash(p2sh);\n+    p2sh2.SetDestination(p2sh.GetID());\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -154,15 +154,15 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CScript inner[4];\n-    inner[0].SetBitcoinAddress(key[0].GetPubKey());\n+    inner[0].SetDestination(key[0].GetPubKey().GetID());\n     inner[1].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+2));\n     inner[2].SetMultisig(1, std::vector<CKey>(keys.begin(), keys.begin()+2));\n     inner[3].SetMultisig(2, std::vector<CKey>(keys.begin(), keys.begin()+3));\n \n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i].SetPayToScriptHash(inner[i]);\n+        outer[i].SetDestination(inner[i].GetID());\n         keystore.AddCScript(inner[i]);\n     }\n \n@@ -232,7 +232,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     scriptSig << Serialize(notValid);\n \n     CScript fund;\n-    fund.SetPayToScriptHash(notValid);\n+    fund.SetDestination(notValid.GetID());\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -258,9 +258,9 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout.resize(6);\n \n     // First three are standard:\n-    CScript pay1; pay1.SetBitcoinAddress(key[0].GetPubKey());\n+    CScript pay1; pay1.SetDestination(key[0].GetPubKey().GetID());\n     keystore.AddCScript(pay1);\n-    CScript payScriptHash1; payScriptHash1.SetPayToScriptHash(pay1);\n+    CScript payScriptHash1; payScriptHash1.SetDestination(pay1.GetID());\n     CScript pay1of3; pay1of3.SetMultisig(1, keys);\n \n     txFrom.vout[0].scriptPubKey = payScriptHash1;\n@@ -278,13 +278,13 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     for (int i = 0; i < 11; i++)\n         oneOfEleven << key[0].GetPubKey();\n     oneOfEleven << OP_11 << OP_CHECKMULTISIG;\n-    txFrom.vout[5].scriptPubKey.SetPayToScriptHash(oneOfEleven);\n+    txFrom.vout[5].scriptPubKey.SetDestination(oneOfEleven.GetID());\n \n     mapInputs[txFrom.GetHash()] = make_pair(CTxIndex(), txFrom);\n \n     CTransaction txTo;\n     txTo.vout.resize(1);\n-    txTo.vout[0].scriptPubKey.SetBitcoinAddress(key[1].GetPubKey());\n+    txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n \n     txTo.vin.resize(3);\n     txTo.vin[0].prevout.n = 0;\n@@ -311,7 +311,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CTransaction txToNonStd;\n     txToNonStd.vout.resize(1);\n-    txToNonStd.vout[0].scriptPubKey.SetBitcoinAddress(key[1].GetPubKey());\n+    txToNonStd.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n     txToNonStd.vin.resize(2);\n     txToNonStd.vin[0].prevout.n = 4;\n     txToNonStd.vin[0].prevout.hash = txFrom.GetHash();"
      },
      {
        "sha": "59673f9b3d6fa034c2f2b0ee199976f28a0400f3",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -32,7 +32,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21);\n \n     CScript p2sh;\n-    p2sh.SetPayToScriptHash(s1);\n+    p2sh.SetDestination(s1.GetID());\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3);\n@@ -49,7 +49,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20);\n \n-    p2sh.SetPayToScriptHash(s2);\n+    p2sh.SetDestination(s2.GetID());\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0);\n     CScript scriptSig2;"
      },
      {
        "sha": "be0d976d51a1677e36a66e338777293924d7c7c7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -52,9 +52,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, MapPrevTx& inputsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey.SetBitcoinAddress(key[2].GetPubKey());\n+    dummyTransactions[1].vout[0].scriptPubKey.SetDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey.SetBitcoinAddress(key[3].GetPubKey());\n+    dummyTransactions[1].vout[1].scriptPubKey.SetDestination(key[3].GetPubKey().GetID());\n     inputsRet[dummyTransactions[1].GetHash()] = make_pair(CTxIndex(), dummyTransactions[1]);\n \n     return dummyTransactions;"
      },
      {
        "sha": "3c4aeb4eafacb37a2099443d7d899795ba287b30",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -7,6 +7,7 @@\n #include \"walletdb.h\"\n #include \"crypter.h\"\n #include \"ui_interface.h\"\n+#include \"base58.h\"\n \n using namespace std;\n \n@@ -361,7 +362,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n #ifndef QT_GUI\n         // If default receiving address gets used, replace it with a new one\n         CScript scriptDefaultKey;\n-        scriptDefaultKey.SetBitcoinAddress(vchDefaultKey);\n+        scriptDefaultKey.SetDestination(vchDefaultKey.GetID());\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n             if (txout.scriptPubKey == scriptDefaultKey)\n@@ -370,7 +371,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                 if (GetKeyFromPool(newDefaultKey, false))\n                 {\n                     SetDefaultKey(newDefaultKey);\n-                    SetAddressBookName(CBitcoinAddress(vchDefaultKey), \"\");\n+                    SetAddressBookName(vchDefaultKey.GetID(), \"\");\n                 }\n             }\n         }\n@@ -455,7 +456,7 @@ int64 CWallet::GetDebit(const CTxIn &txin) const\n \n bool CWallet::IsChange(const CTxOut& txout) const\n {\n-    CBitcoinAddress address;\n+    CTxDestination address;\n \n     // TODO: fix handling of 'change' outputs. The assumption is that any\n     // payment to a TX_PUBKEYHASH that is mine but isn't in the address book\n@@ -464,7 +465,7 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     // a better way of identifying which outputs are 'the send' and which are\n     // 'the change' will need to be implemented (maybe extend CWalletTx to remember\n     // which output, if any, was change).\n-    if (ExtractAddress(txout.scriptPubKey, address) && HaveKey(address))\n+    if (ExtractDestination(txout.scriptPubKey, address) && ::IsMine(*this, address))\n     {\n         LOCK(cs_wallet);\n         if (!mapAddressBook.count(address))\n@@ -517,8 +518,8 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CBitcoinAddress, int64> >& listReceived,\n-                           list<pair<CBitcoinAddress, int64> >& listSent, int64& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, list<pair<CTxDestination, int64> >& listReceived,\n+                           list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const\n {\n     nGeneratedImmature = nGeneratedMature = nFee = 0;\n     listReceived.clear();\n@@ -545,13 +546,12 @@ void CWalletTx::GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, l\n     // Sent/received.\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n-        CBitcoinAddress address;\n+        CTxDestination address;\n         vector<unsigned char> vchPubKey;\n-        if (!ExtractAddress(txout.scriptPubKey, address))\n+        if (!ExtractDestination(txout.scriptPubKey, address))\n         {\n             printf(\"CWalletTx::GetAmounts: Unknown transaction type found, txid %s\\n\",\n                    this->GetHash().ToString().c_str());\n-            address = \" unknown \";\n         }\n \n         // Don't report 'change' txouts\n@@ -575,25 +575,25 @@ void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nGenerated, i\n     int64 allGeneratedImmature, allGeneratedMature, allFee;\n     allGeneratedImmature = allGeneratedMature = allFee = 0;\n     string strSentAccount;\n-    list<pair<CBitcoinAddress, int64> > listReceived;\n-    list<pair<CBitcoinAddress, int64> > listSent;\n+    list<pair<CTxDestination, int64> > listReceived;\n+    list<pair<CTxDestination, int64> > listSent;\n     GetAmounts(allGeneratedImmature, allGeneratedMature, listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == \"\")\n         nGenerated = allGeneratedMature;\n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n-                map<CBitcoinAddress, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n+                map<CTxDestination, string>::const_iterator mi = pwallet->mapAddressBook.find(r.first);\n                 if (mi != pwallet->mapAddressBook.end() && (*mi).second == strAccount)\n                     nReceived += r.second;\n             }\n@@ -1102,7 +1102,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend, CW\n                     // TODO: pass in scriptChange instead of reservekey so\n                     // change transaction isn't always pay-to-bitcoin-address\n                     CScript scriptChange;\n-                    scriptChange.SetBitcoinAddress(vchPubKey);\n+                    scriptChange.SetDestination(vchPubKey.GetID());\n \n                     // Insert change txn at random position:\n                     vector<CTxOut>::iterator position = wtxNew.vout.begin()+GetRandInt(wtxNew.vout.size());\n@@ -1240,7 +1240,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1250,7 +1250,7 @@ string CWallet::SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64\n \n     // Parse Bitcoin address\n     CScript scriptPubKey;\n-    scriptPubKey.SetBitcoinAddress(address);\n+    scriptPubKey.SetDestination(address);\n \n     return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n }\n@@ -1285,23 +1285,23 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n }\n \n \n-bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)\n+bool CWallet::SetAddressBookName(const CTxDestination& address, const string& strName)\n {\n-    std::map<CBitcoinAddress, std::string>::iterator mi = mapAddressBook.find(address);\n+    std::map<CTxDestination, std::string>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address] = strName;\n-    NotifyAddressBookChanged(this, address.ToString(), strName, HaveKey(address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n+    NotifyAddressBookChanged(this, address, strName, ::IsMine(*this, address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n+    return CWalletDB(strWalletFile).WriteName(CBitcoinAddress(address).ToString(), strName);\n }\n \n-bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n+bool CWallet::DelAddressBookName(const CTxDestination& address)\n {\n     mapAddressBook.erase(address);\n-    NotifyAddressBookChanged(this, address.ToString(), \"\", HaveKey(address), CT_DELETED);\n+    NotifyAddressBookChanged(this, address, \"\", ::IsMine(*this, address), CT_DELETED);\n     if (!fFileBacked)\n         return false;\n-    return CWalletDB(strWalletFile).EraseName(address.ToString());\n+    return CWalletDB(strWalletFile).EraseName(CBitcoinAddress(address).ToString());\n }\n \n \n@@ -1537,7 +1537,7 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n+void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress)\n {\n     setAddress.clear();\n \n@@ -1549,11 +1549,11 @@ void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n             throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n-        CBitcoinAddress address(keypool.vchPubKey);\n         assert(keypool.vchPubKey.IsValid());\n-        if (!HaveKey(address))\n+        CKeyID keyID = keypool.vchPubKey.GetID();\n+        if (!HaveKey(keyID))\n             throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n-        setAddress.insert(address);\n+        setAddress.insert(keyID);\n     }\n }\n "
      },
      {
        "sha": "618a00623a9607c146ff7ff6d7b786a2aff2a8e1",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -105,7 +105,7 @@ class CWallet : public CCryptoKeyStore\n     std::map<uint256, CWalletTx> mapWallet;\n     std::map<uint256, int> mapRequestCount;\n \n-    std::map<CBitcoinAddress, std::string> mapAddressBook;\n+    std::map<CTxDestination, std::string> mapAddressBook;\n \n     CPubKey vchDefaultKey;\n \n@@ -148,7 +148,7 @@ class CWallet : public CCryptoKeyStore\n     bool CreateTransaction(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n     std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToBitcoinAddress(const CBitcoinAddress& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool();\n@@ -158,7 +158,7 @@ class CWallet : public CCryptoKeyStore\n     void ReturnKey(int64 nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool fAllowReuse=true);\n     int64 GetOldestKeyPoolTime();\n-    void GetAllReserveAddresses(std::set<CBitcoinAddress>& setAddress);\n+    void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n \n     bool IsMine(const CTxIn& txin) const;\n     int64 GetDebit(const CTxIn& txin) const;\n@@ -227,9 +227,9 @@ class CWallet : public CCryptoKeyStore\n \n     int LoadWallet(bool& fFirstRunRet);\n \n-    bool SetAddressBookName(const CBitcoinAddress& address, const std::string& strName);\n+    bool SetAddressBookName(const CTxDestination& address, const std::string& strName);\n \n-    bool DelAddressBookName(const CBitcoinAddress& address);\n+    bool DelAddressBookName(const CTxDestination& address);\n \n     void UpdatedTransaction(const uint256 &hashTx);\n \n@@ -266,7 +266,7 @@ class CWallet : public CCryptoKeyStore\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const std::string &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;\n+    boost::signals2::signal<void (CWallet *wallet, const CTxDestination &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;\n \n     /** Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held.\n@@ -532,8 +532,8 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CBitcoinAddress, int64> >& listReceived,\n-                    std::list<std::pair<CBitcoinAddress, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(int64& nGeneratedImmature, int64& nGeneratedMature, std::list<std::pair<CTxDestination, int64> >& listReceived,\n+                    std::list<std::pair<CTxDestination, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n \n     void GetAccountAmounts(const std::string& strAccount, int64& nGenerated, int64& nReceived, \n                            int64& nSent, int64& nFee) const;"
      },
      {
        "sha": "2c4d4c0ef0f6f267aba5a3f548ed927b219baed1",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -151,7 +151,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 string strAddress;\n                 ssKey >> strAddress;\n-                ssValue >> pwallet->mapAddressBook[strAddress];\n+                ssValue >> pwallet->mapAddressBook[CBitcoinAddress(strAddress).Get()];\n             }\n             else if (strType == \"tx\")\n             {"
      },
      {
        "sha": "39182279d5591ba5177eb28650b1fd1f8d85ca84",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1025440184ef100a22d07c7bb543ee45cf169d64/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1025440184ef100a22d07c7bb543ee45cf169d64/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=1025440184ef100a22d07c7bb543ee45cf169d64",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLETDB_H\n \n #include \"db.h\"\n+#include \"base58.h\"\n \n class CKeyPool;\n class CAccount;"
      }
    ]
  }
]