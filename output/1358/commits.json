[
  {
    "sha": "29875dcb4bc2a1da39caa2cda8735aae391c8c5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTg3NWRjYjRiYzJhMWRhMzljYWEyY2RhODczNWFhZTM5MWM4YzVk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-18T23:07:58Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-05-18T23:13:21Z"
      },
      "message": "Shared code for wallet lock help and check",
      "tree": {
        "sha": "e43a3b298b56e7e6f77f121e6ea182b4e94425fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e43a3b298b56e7e6f77f121e6ea182b4e94425fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29875dcb4bc2a1da39caa2cda8735aae391c8c5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29875dcb4bc2a1da39caa2cda8735aae391c8c5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29875dcb4bc2a1da39caa2cda8735aae391c8c5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29875dcb4bc2a1da39caa2cda8735aae391c8c5d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6615a54c6146728717ad0f8819f32f002613f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6615a54c6146728717ad0f8819f32f002613f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6615a54c6146728717ad0f8819f32f002613f5c"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 31,
      "deletions": 35
    },
    "files": [
      {
        "sha": "ab27defb7b544751c6f63eff38ff5186417e5ffc",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 35,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29875dcb4bc2a1da39caa2cda8735aae391c8c5d/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29875dcb4bc2a1da39caa2cda8735aae391c8c5d/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=29875dcb4bc2a1da39caa2cda8735aae391c8c5d",
        "patch": "@@ -115,6 +115,21 @@ HexBits(unsigned int nBits)\n     return HexStr(BEGIN(uBits.cBits), END(uBits.cBits));\n }\n \n+static std::string\n+HelpRequiringPassphrase()\n+{\n+    return pwalletMain->IsCrypted()\n+        ? \"\\nrequires wallet passphrase to be set with walletpassphrase first\"\n+        : \"\";\n+}\n+\n+static inline void\n+EnsureWalletIsUnlocked()\n+{\n+    if (pwalletMain->IsLocked())\n+        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+}\n+\n enum DecomposeMode {\n     DM_NONE = 0,\n     DM_HASH,\n@@ -731,15 +746,11 @@ Value settxfee(const Array& params, bool fHelp)\n \n Value sendtoaddress(const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n-        throw runtime_error(\n-            \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n-            \"requires wallet passphrase to be set with walletpassphrase first\");\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n+    if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendtoaddress <bitcoinaddress> <amount> [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\");\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\"\n+            + HelpRequiringPassphrase());\n \n     CBitcoinAddress address(params[0].get_str());\n     if (!address.IsValid())\n@@ -772,8 +783,7 @@ Value signmessage(const Array& params, bool fHelp)\n             \"signmessage <bitcoinaddress> <message>\\n\"\n             \"Sign a message with the private key of an address\");\n \n-    if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    EnsureWalletIsUnlocked();\n \n     string strAddress = params[0].get_str();\n     string strMessage = params[1].get_str();\n@@ -1054,15 +1064,11 @@ Value movecmd(const Array& params, bool fHelp)\n \n Value sendfrom(const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 3 || params.size() > 6))\n+    if (fHelp || params.size() < 3 || params.size() > 6)\n         throw runtime_error(\n             \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\\n\"\n-            \"requires wallet passphrase to be set with walletpassphrase first\");\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 3 || params.size() > 6))\n-        throw runtime_error(\n-            \"sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to]\\n\"\n-            \"<amount> is a real and is rounded to the nearest 0.00000001\");\n+            \"<amount> is a real and is rounded to the nearest 0.00000001\"\n+            + HelpRequiringPassphrase());\n \n     string strAccount = AccountFromValue(params[0]);\n     CBitcoinAddress address(params[1].get_str());\n@@ -1080,8 +1086,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     if (params.size() > 5 && params[5].type() != null_type && !params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = params[5].get_str();\n \n-    if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    EnsureWalletIsUnlocked();\n \n     // Check funds\n     int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n@@ -1099,15 +1104,11 @@ Value sendfrom(const Array& params, bool fHelp)\n \n Value sendmany(const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n-        throw runtime_error(\n-            \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n-            \"amounts are double-precision floating point numbers\\n\"\n-            \"requires wallet passphrase to be set with walletpassphrase first\");\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() < 2 || params.size() > 4))\n+    if (fHelp || params.size() < 2 || params.size() > 4)\n         throw runtime_error(\n             \"sendmany <fromaccount> {address:amount,...} [minconf=1] [comment]\\n\"\n-            \"amounts are double-precision floating point numbers\");\n+            \"amounts are double-precision floating point numbers\"\n+            + HelpRequiringPassphrase());\n \n     string strAccount = AccountFromValue(params[0]);\n     Object sendTo = params[1].get_obj();\n@@ -1142,8 +1143,7 @@ Value sendmany(const Array& params, bool fHelp)\n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n     }\n \n-    if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    EnsureWalletIsUnlocked();\n \n     // Check funds\n     int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n@@ -1742,17 +1742,13 @@ Value backupwallet(const Array& params, bool fHelp)\n \n Value keypoolrefill(const Array& params, bool fHelp)\n {\n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() > 0))\n-        throw runtime_error(\n-            \"keypoolrefill\\n\"\n-            \"Fills the keypool, requires wallet passphrase to be set.\");\n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() > 0))\n+    if (fHelp || params.size() > 0)\n         throw runtime_error(\n             \"keypoolrefill\\n\"\n-            \"Fills the keypool.\");\n+            \"Fills the keypool.\"\n+            + HelpRequiringPassphrase());\n \n-    if (pwalletMain->IsLocked())\n-        throw JSONRPCError(-13, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    EnsureWalletIsUnlocked();\n \n     pwalletMain->TopUpKeyPool();\n "
      }
    ]
  }
]