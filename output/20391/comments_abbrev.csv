jonatack,2020-11-14 22:24:00,Thanks to @Xekyo for suggesting this in https://github.com/bitcoin/bitcoin/pull/20305#discussion_r520234818.,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-727273591,727273591,
DrahtBot,2020-11-15 00:07:37,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20874 (test: Run mempool_limit.py even with wallet disabled by stackman27)\n* #20546 (wallet: check for non-representable",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-727284177,727284177,
prayank23,2020-11-15 03:28:42,In the 'Successful responses' and 'Error responses' above shouldn't it be `sat/vB` instead of `sat/B`?,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-727363191,727363191,
jonatack,2020-11-15 07:21:46,"@prayank23 thanks for looking. Those will be automatically updated from sat/B to sat/vB by #20305, which updates the ToString() helper in `CFeeRate`. I updated the PR descpription to clarify that (thanks!)",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-727527712,727527712,
jonatack,2020-11-27 17:36:15,Rebased and updated per the plan outlined in https://github.com/bitcoin/bitcoin/pull/20484#issuecomment-734786305.,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-734933069,734933069,
jonatack,2020-11-30 10:22:21,Added more unit test coverage per `git diff 14c5e50 2176a3`.,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-735695224,735695224,
jonatack,2020-11-30 23:43:35,"Thanks for the review @MarcoFalke. Dropped the policy/feerate refactoring commit and the FeeModeToBytes commit, changed the new CFeeRate delegating constructor to named constructors, dropped SatsToString in favor of making the existing ToString more flexible, and made ValueFromFeeRate able to work with both sat/b and btc/kb.",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-736122119,736122119,
jonatack,2020-12-04 19:39:26,"Thanks @promag and @MarcoFalke for the review feedback. Updates in latest push:\n\n- Check for and raise ""Invalid amount"" if the passed value is non-representable by CFeeRate (lesson learned from #20546)\n\n- Fix the error messages if the current value is unset, to indicate a current value of ""0 (unset)"" instead of ""0.000 sat/vB""\n\n- Make sure the tests check passing amounts with a string a",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-738978601,738978601,
jonatack,2020-12-04 19:40:48,I'll re-push with a release note in f4195d2a94b,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-738979284,738979284,
jonatack,2021-01-04 10:37:16,"> Code review ACK [73a0f02](https://github.com/bitcoin/bitcoin/commit/73a0f0276392e4432774807f2e4b8a3f4dfc69ab), needs to squash some commits. Also add release notes?\n\nRebased, updated settxfee help with @jonasschnelli's suggestion, added release notes per @promag's suggestion. Sorry for the delay in updating, this was waiting since a month on the improvements and fixes in #20546 but I've had ",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-753897808,753897808,
S3RK,2021-02-11 20:16:05,I start reviewing this one.,https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-777761310,777761310,
jonatack,2021-02-12 16:04:32,"Thank you @S3RK for your feedback, much appreciated. I'll reply soon.",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-778283513,778283513,
DrahtBot,2021-03-03 19:25:01,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-789994671,789994671,
jonatack,2021-07-13 18:08:14,"Thanks! Huge apologies, since the merge of https://github.com/bitcoin/bitcoin/pull/21786 that resolved some of these things differently (at a lower level), the approach of the initial refactoring commits is obsolete and being changed. I need to push an update and have been intending to do so for some time. üôè",https://github.com/bitcoin/bitcoin/pull/20391#issuecomment-879294418,879294418,
luke-jr,2020-11-25 00:48:04,IMO we should add a `ValueFromFeeRate`,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r530037069,530037069,src/wallet/rpcwallet.cpp
luke-jr,2020-11-25 01:13:14,Maybe rebase this on top of 8798383475f4e1db44f734cdd94885e5527761fe,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r530044646,530044646,src/wallet/rpcwallet.cpp
jonatack,2020-11-27 17:27:50,"> Maybe rebase this on top of [8798383](https://github.com/bitcoin/bitcoin/commit/8798383475f4e1db44f734cdd94885e5527761fe)\n\nPulled 8798383 in as commit 0e2c3ace86b8aa",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r531709471,531709471,src/wallet/rpcwallet.cpp
MarcoFalke,2020-11-28 09:25:34,style-nit: might use f-string? ,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532010092,532010092,test/functional/rpc_getblockstats.py
MarcoFalke,2020-11-28 09:28:51,"The second argument of the cfeerate constructor is size_t (number of bytes), not CAmount (number of satoshis). Instead of adding more calls to the confusing constructor, I'd prefer to add a new constructor that takes in a univalue feerate as sat/b. I think this has also been provided as feedback when this code template was initially introduced.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532010352,532010352,src/wallet/rpcwallet.cpp
jonatack,2020-11-28 19:01:03,good idea; done,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532094624,532094624,test/functional/rpc_getblockstats.py
jonatack,2020-11-28 19:03:44,"Good idea, done in 9c479bfc293fec906 and proposed a refactoring in 392495bc4d9648fe0c28d that can be dropped",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532094834,532094834,src/wallet/rpcwallet.cpp
jonatack,2020-11-28 19:52:48,"Hm, bringing the RPC utilities and UniValue into CFeeRate seems like a layer violation (and caused a circular dependency). Maybe a CFeeRate ctor that takes a CAmount + FeeEstimateMode instead of UniValue.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532099670,532099670,src/wallet/rpcwallet.cpp
jonatack,2020-11-29 20:40:06,"Updated the new CFeeRate ctor to take `(CAmount fee_rate, FeeEstimateMode mode)` and added unit tests.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532263170,532263170,src/wallet/rpcwallet.cpp
MarcoFalke,2020-11-30 11:06:38,"style nit d6643ef609bf442fe38dd8a1335dd7c580f1fdd7:\n\ncould clang-format?",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532515768,532515768,src/policy/feerate.cpp
MarcoFalke,2020-11-30 11:15:14,"style nit in 4cccf2d88377a9f813ab6d63889cbb5136c31aad\n\nMight be good to make this impossible to compile instead of a runtime-just-return-0. Can be achieved via `constexpr if` (and some template magic) or by having a `CFeeRate::FromSatB(amount)` and `FromBtcKb(amount)` helper.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532520613,532520613,src/test/amount_tests.cpp
MarcoFalke,2020-11-30 11:45:57,"in commit 3c92185b95764f5c3536637e5923316cd9c2d8b0:\n\nMight be good if the method name included the unit (sat/b) to avoid calling this in a btc/kb context",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532537444,532537444,src/core_io.h
MarcoFalke,2020-11-30 11:50:21,"why are the refactors in 7289e559eb720d972e3e31c0ca81dd8091775b07 needed? They break asan, it seems.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532539956,532539956,src/policy/feerate.cpp
jonatack,2020-11-30 15:28:00,The CI was green with the refactors yesterday; the change was the added unit tests. It may be better to propose the refactors in their own PR. I'll drop the refactoring commit to test what the CI says.,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532681447,532681447,src/policy/feerate.cpp
jonatack,2020-11-30 15:54:04,"Oh oops hm, these lines 113-115 aren't testing the new constructor, but the `CFeeRate(CAmount, size_t)` one, so it was mistake to add them here. Will move them into the tests for that constructor and see if anything needs to be done there; normally the ctor should just set `nSatoshisPerK` to 0 in that case.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532701499,532701499,src/test/amount_tests.cpp
MarcoFalke,2020-11-30 15:58:16,"(my comment should be on the `BOOST_CHECK(CFeeRate(CAmount{123}, FeeEstimateMode::UNSET) == CFeeRate{0})` line)",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532704803,532704803,src/test/amount_tests.cpp
jonatack,2020-11-30 22:37:20,"Good idea, much better...switching to named constructors.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532948939,532948939,src/test/amount_tests.cpp
jonatack,2020-11-30 23:35:15,no longer adding this `SatsToString()` function in favor of making the existing `ToString()` more flexible,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532973483,532973483,src/policy/feerate.cpp
jonatack,2020-11-30 23:35:32,"done, and a leaner implementation, thanks",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532973622,532973622,src/test/amount_tests.cpp
jonatack,2020-11-30 23:35:38,Updated to allow passing in the fee mode to work with both sat/vB and BTC/kvB,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r532973650,532973650,src/core_io.h
promag,2020-12-03 12:17:56,"c6e9bfd1bd9d6a65673fbe1c278a7c7ada35273d\n\nWorth noting that the new settings is not persisted?",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r535180868,535180868,src/wallet/rpcwallet.cpp
promag,2020-12-03 12:19:10,"c6e9bfd1bd9d6a65673fbe1c278a7c7ada35273d\n\nWhy return wallet name? What about returning previous effective value?",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r535181606,535181606,src/wallet/rpcwallet.cpp
MarcoFalke,2020-12-03 12:45:12,"why would the user care about the previous value? If they did, they could call getwalletinfo",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r535197819,535197819,src/wallet/rpcwallet.cpp
promag,2020-12-03 12:52:11,"Right, the same goes for the wallet name.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r535202326,535202326,src/wallet/rpcwallet.cpp
jonatack,2020-12-04 19:01:45,"Thanks, added to settxfee and setfeerate helps",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r536313815,536313815,src/wallet/rpcwallet.cpp
jonatack,2020-12-04 19:23:23,I'd prefer to keep wallet name.,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r536327333,536327333,src/wallet/rpcwallet.cpp
MarcoFalke,2020-12-05 05:42:49,This should be thrown in the amountfromvalue function. Doing it here with the zero-not-zero hack smells a bit like a layer violation,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r536520301,536520301,src/wallet/rpcwallet.cpp
jonasschnelli,2020-12-07 08:38:23,"Wouldn't `deprecated` instead of `superseded` be more consistent with previous RPC API ""changes""?",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537320950,537320950,src/wallet/rpcwallet.cpp
jonasschnelli,2020-12-07 08:40:24,No strong opinion about the wallet name in the response. I think it does not hurt and in asynchronous environments it might simplify the client code.,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537322225,537322225,src/wallet/rpcwallet.cpp
MarcoFalke,2020-12-07 08:55:30,"I think we should establish a guideline first on what input parameters to return. I don't think we've done this in the past and this could lead to user confusion: ""What am I supposed to do with the return parameter that is equal to the input parameter? Assert that they are the same? Ignore?""\n\nIf this is something useful to return for every wallet RPC, then all wallet RPCs should be updated.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537331663,537331663,src/wallet/rpcwallet.cpp
jonatack,2020-12-07 12:12:50,"After #20546 this will go away:\n```diff\n-            const CFeeRate amount{CFeeRate::FromSatB(AmountFromValue(request.params[0]))};\n+            const CFeeRate amount{FeeRateFromValueInSatB(request.params[0])};\n@@ -2399,7 +2399,6 @@ static RPCHelpMan setfeerate()\n \n             if (amount == zero) {\n-                if (request.params[0].get_real() != 0) throw JSONRPCError(RPC_TYPE_E",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537459363,537459363,src/wallet/rpcwallet.cpp
jonatack,2020-12-07 12:14:20,"Thanks, will do on next update.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537460090,537460090,src/wallet/rpcwallet.cpp
jonatack,2020-12-07 12:25:38,"I see it as good for rpcs that make per-wallet changes, like here and upgradewallet as a recent example (see upgradewallet help). It would also be good in rpc/cli options that return info on a per-wallet basis, like getwalletinfo but also -rpcwallet= -getinfo, for example.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r537466440,537466440,src/wallet/rpcwallet.cpp
jonatack,2021-01-03 18:09:14,"This PR has been gated since a month on the changes in #20546 to handle this properly, but that PR didn't go anywhere, so I'll drop this check for now.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r551037047,551037047,src/wallet/rpcwallet.cpp
jonatack,2021-01-03 23:24:12,"Hm, realized I need to leave this check or else will have to drop a bunch of tests, which would be a shame and a regression. A lot of work went into this and it was waiting for #20546. I guess  leaving it as-is for now.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r551067979,551067979,src/wallet/rpcwallet.cpp
jonatack,2021-01-04 10:29:50,done,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r551233059,551233059,src/wallet/rpcwallet.cpp
S3RK,2021-02-11 20:51:59,"On line 47 I believe it should be `(nFeePaid * 1e3 / 1e8) == (nFeePaid / 1e5)`\nand not `(nFeePaid * 1e8 / 1e3) == (nFeePaid / 1e5)`",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r574818565,574818565,src/policy/feerate.h
S3RK,2021-02-11 20:58:09,Do we want to assert some other `FeeEstimateMode` isn't passed by mistake?,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r574822083,574822083,src/policy/feerate.cpp
S3RK,2021-02-11 21:11:24,what happens if we pass an absurdly big number?,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r574829284,574829284,src/test/amount_tests.cpp
S3RK,2021-02-12 08:23:35,Aren't `CFeeRate` various constructors and `ToString()` already covered by other unit tests? Unit tests have a non-zero maintenance cost and I'm missing the point of such duplication.  The `ValueFromFeeRate` fn is pretty trivial and I believe the test should be trivial as well.,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575054081,575054081,src/test/rpc_tests.cpp
S3RK,2021-02-12 08:31:20,"I'm confused why do we put fee estimate mode and fee units, which are different things, into the same enum. I understand this is a bit out of scope for this PR, but I'd appreciate if you could provide some historical context for educational purposes.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575057976,575057976,src/policy/feerate.cpp
S3RK,2021-02-12 08:51:41,Do we need `GetFeePerK()` call here and below?,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575068701,575068701,src/wallet/rpcwallet.cpp
S3RK,2021-02-12 09:18:23,what happens if we pass an absurdly big number?,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575083741,575083741,src/test/amount_tests.cpp
jonatack,2021-02-12 15:59:32,"IIRC that was done in https://github.com/bitcoin/bitcoin/pull/11413, but good point. I'll look at fixing that.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575326397,575326397,src/policy/feerate.cpp
jonatack,2021-02-12 16:02:15,"Ah, just remembered that I wrote a patch in November 2020 that does that but I have not opened it yet to not have too many PRs open.",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r575328223,575328223,src/policy/feerate.cpp
S3RK,2021-02-17 08:48:34,This is already defined earlier,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r577425133,577425133,test/functional/rpc_fundrawtransaction.py
S3RK,2021-02-17 09:00:13,"```suggestion\n        fee_sat_per_byte = 100\n        self.nodes[2].setfeerate(fee_sat_per_byte)\n````",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r577433229,577433229,test/functional/wallet_basic.py
S3RK,2021-02-17 09:04:19,"```suggestion\n        result = node.fundrawtransaction(rawtx)  # uses self.min_relay_tx_fee (set by setfeerate)\n```",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r577435827,577435827,test/functional/rpc_fundrawtransaction.py
S3RK,2021-02-17 09:05:07,There are couple more comments to fix below,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r577436322,577436322,test/functional/rpc_fundrawtransaction.py
S3RK,2021-02-18 08:20:05,Why this specific value of `0.01`? In the test case with `settxfee` we have a different value of `0.00001000`. Should we have a testcase-wise constant?,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578214456,578214456,test/functional/wallet_bumpfee.py
S3RK,2021-02-18 08:22:54,This test has nothing to do with `bumpfee` RPC. I believe it's better to have it in a separate test. `wallet_bumpfee.py` is already huge,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578216166,578216166,test/functional/wallet_bumpfee.py
S3RK,2021-02-18 08:24:51,"Same as above. This belongs to `setfeerate` test, not `bumpfee` test",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578217369,578217369,test/functional/wallet_bumpfee.py
S3RK,2021-02-18 08:55:35,"While I think it's a great idea to have this function, I'm a bit concerned that it'll be not used and forgotten. Do you have plans to do a follow up and put it to use by replacing `ValuefromAmount`  in appropriate places ?",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578237490,578237490,src/core_write.cpp
S3RK,2021-02-18 09:10:49,I love the idea of named constructors. Should we strive for consistency and use them in more places? ,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578247858,578247858,src/wallet/rpcwallet.cpp
S3RK,2021-02-18 09:12:13,Again I believe those check would be better places in a separate `setfeerate` test,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r578248762,578248762,test/functional/wallet_create_tx.py
luke-jr,2021-06-30 01:33:18,"Even 0.01 is too small for this. Signatures can be 71-73 bytes long, but even 72 bytes throws this off.\n\n```suggestion\n    bumped_txdetails = rbf_node.getrawtransaction(bumped_tx[""txid""], True)\n    allow_for_bytes_offset = len(bumped_txdetails['vout']) * 2  # potentially up to 2 bytes per output\n    actual_fee = bumped_tx[""fee""] * COIN\n    assert_approx(actual_fee, fee_rate * bumped_tx",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r661067971,661067971,test/functional/wallet_bumpfee.py
ryanofsky,2021-07-13 17:59:11,"In commit ""wallet: update rpcwallet to CFeeRate named constructors"" (c72083c2d56237f8fbd3a82e3ff395f0cdb8fd57)\n\nWow wow. I see that this is doing the right thing, but these constructor names seem absurdly misleading! The `AmountFromValue` function converts a floating point number to a fixed-point representation of that number multiplied by `10e8`. So even though the `fee_rate` univalue argumen",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r668992659,668992659,src/wallet/rpcwallet.cpp
MarcoFalke,2021-09-28 09:15:27,"> Wow wow. I see that this is doing the right thing, but these constructor names seem absurdly misleading!\n\nThe current code in master isn't exactly clear right now either:\n\n```cpp\n    /** Constructor for a fee rate in satoshis per kvB (sat/kvB).\n     *\n     *  Passing a num_bytes value of COIN (1e8) returns a fee rate in satoshis per vB (sat/vB),\n     *  e.g. (nFeePaid * 1e8 / 1e3",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r717384933,717384933,src/wallet/rpcwallet.cpp
MarcoFalke,2021-09-28 09:17:48,Original discussion for reference: https://github.com/bitcoin/bitcoin/pull/20305#discussion_r522371491,https://github.com/bitcoin/bitcoin/pull/20391#discussion_r717386735,717386735,src/wallet/rpcwallet.cpp
jonatack,2021-09-29 12:04:49,"> > Wow wow. I see that this is doing the right thing, but these constructor names seem absurdly misleading!\n> \n> The current code in master isn't exactly clear right now either:\n> \n> ```c++\n>     /** Constructor for a fee rate in satoshis per kvB (sat/kvB).\n>      *\n>      *  Passing a num_bytes value of COIN (1e8) returns a fee rate in satoshis per vB (sat/vB),\n>      *  e.g. (nF",https://github.com/bitcoin/bitcoin/pull/20391#discussion_r718439850,718439850,src/wallet/rpcwallet.cpp
