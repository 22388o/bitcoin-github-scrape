[
  {
    "sha": "d9a77da7fb05c4366473f160e6529d5e76f5ba6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWE3N2RhN2ZiMDVjNDM2NjQ3M2YxNjBlNjUyOWQ1ZTc2ZjViYTZl",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-11-11T06:36:02Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-11-11T06:41:23Z"
      },
      "message": "One fDisconnect to rule them all",
      "tree": {
        "sha": "14be97ff02bdf2f935ba1fce38848f907e8879ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14be97ff02bdf2f935ba1fce38848f907e8879ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9a77da7fb05c4366473f160e6529d5e76f5ba6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a77da7fb05c4366473f160e6529d5e76f5ba6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9a77da7fb05c4366473f160e6529d5e76f5ba6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9a77da7fb05c4366473f160e6529d5e76f5ba6e/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71bc39eb74839c7916d2e04c207853d44d0f6c24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71bc39eb74839c7916d2e04c207853d44d0f6c24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71bc39eb74839c7916d2e04c207853d44d0f6c24"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2f4bf25eb68673bf95cd441c64a9864045170328",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9a77da7fb05c4366473f160e6529d5e76f5ba6e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9a77da7fb05c4366473f160e6529d5e76f5ba6e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9a77da7fb05c4366473f160e6529d5e76f5ba6e",
        "patch": "@@ -6502,7 +6502,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n         // Don't send anything until we get its version message\n-        if (pto->nVersion == 0)\n+        if (pto->nVersion == 0 || pto->fDisconnect)\n             return true;\n \n         //\n@@ -6517,7 +6517,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // Ping automatically sent as a latency probe & keepalive.\n             pingSend = true;\n         }\n-        if (pingSend && !pto->fDisconnect) {\n+        if (pingSend) {\n             uint64_t nonce = 0;\n             while (nonce == 0) {\n                 GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n@@ -6598,7 +6598,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         if (pindexBestHeader == NULL)\n             pindexBestHeader = chainActive.Tip();\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n-        if (!state.fSyncStarted && !pto->fClient && !pto->fDisconnect && !fImporting && !fReindex) {\n+        if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n@@ -6885,7 +6885,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n \n         // Detect whether we're stalling\n         nNow = GetTimeMicros();\n-        if (!pto->fDisconnect && state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n+        if (state.nStallingSince && state.nStallingSince < nNow - 1000000 * BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection\n             // should only happen during initial block download.\n@@ -6897,7 +6897,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         // We compensate for other peers to prevent killing off peers due to our own downstream link\n         // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n-        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0) {\n+        if (state.vBlocksInFlight.size() > 0) {\n             QueuedBlock &queuedBlock = state.vBlocksInFlight.front();\n             int nOtherPeersWithValidatedDownloads = nPeersWithValidatedDownloads - (state.nBlocksInFlightValidHeaders > 0);\n             if (nNow > state.nDownloadingSince + consensusParams.nPowTargetSpacing * (BLOCK_DOWNLOAD_TIMEOUT_BASE + BLOCK_DOWNLOAD_TIMEOUT_PER_PEER * nOtherPeersWithValidatedDownloads)) {\n@@ -6910,7 +6910,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        if (!pto->fDisconnect && !pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller, consensusParams);\n@@ -6932,7 +6932,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         //\n         // Message: getdata (non-blocks)\n         //\n-        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+        while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))"
      }
    ]
  }
]