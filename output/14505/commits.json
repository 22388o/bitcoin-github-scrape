[
  {
    "sha": "c4606b84329d760d7cee144bebe05807857edaae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDYwNmI4NDMyOWQ3NjBkN2NlZTE0NGJlYmUwNTgwNzg1N2VkYWFl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-12-14T13:50:21Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-06-26T14:57:14Z"
      },
      "message": "Add Travis check for single parameter constructors not marked \"explicit\"",
      "tree": {
        "sha": "b8abcff8c3b042e2782fc4b0bd6d2f3c68385a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8abcff8c3b042e2782fc4b0bd6d2f3c68385a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4606b84329d760d7cee144bebe05807857edaae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4606b84329d760d7cee144bebe05807857edaae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4606b84329d760d7cee144bebe05807857edaae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4606b84329d760d7cee144bebe05807857edaae/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "332c6134bb15384e5b91c631e821fe52a591d3bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/332c6134bb15384e5b91c631e821fe52a591d3bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/332c6134bb15384e5b91c631e821fe52a591d3bc"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 145,
      "deletions": 4
    },
    "files": [
      {
        "sha": "fc6a94b02eded439f293f36ded891bb5ebef69e9",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -37,6 +37,7 @@ cache:\n stages:\n   - lint\n   - test\n+  - extended-lint\n env:\n   global:\n     - MAKEJOBS=-j3\n@@ -85,6 +86,19 @@ jobs:\n       script:\n         - set -o errexit; source .travis/lint_06_script.sh\n \n+    - stage: extended-lint\n+      name: 'extended lint [runtime >= 60 seconds]'\n+      env:\n+      cache: false\n+      language: python\n+      python: '3.5'\n+      install:\n+        - set -o errexit; source .travis/extended_lint_04_install.sh\n+      before_script:\n+        - set -o errexit; source .travis/lint_05_before_script.sh\n+      script:\n+        - set -o errexit; source .travis/extended_lint_06_script.sh\n+\n     - stage: test\n       name: 'ARM  [GOAL: install]  [no unit or functional tests]'\n       env: >-"
      },
      {
        "sha": "123d874a84da4b8531edf5e51052b581688cef27",
        "filename": ".travis/extended_lint_04_install.sh",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/.travis/extended_lint_04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/.travis/extended_lint_04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/extended_lint_04_install.sh?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+CPPCHECK_VERSION=1.86\n+curl -s https://codeload.github.com/danmar/cppcheck/tar.gz/${CPPCHECK_VERSION} | tar -zxf - --directory /tmp/\n+(cd /tmp/cppcheck-${CPPCHECK_VERSION}/ && make CFGDIR=/tmp/cppcheck-${CPPCHECK_VERSION}/cfg/ > /dev/null)\n+export PATH=\"$PATH:/tmp/cppcheck-${CPPCHECK_VERSION}/\""
      },
      {
        "sha": "e8228c9c4d912c81e16b772e79e85231a2b6c1b9",
        "filename": ".travis/extended_lint_06_script.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/.travis/extended_lint_06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/.travis/extended_lint_06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis/extended_lint_06_script.sh?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+test/lint/extended-lint-all.sh"
      },
      {
        "sha": "c3ce8d7af0d3dbbfe13ea2f602e279fe90d12b5a",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -53,7 +53,7 @@ struct DBHeightKey {\n     int height;\n \n     DBHeightKey() : height(0) {}\n-    DBHeightKey(int height_in) : height(height_in) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n \n     template<typename Stream>\n     void Serialize(Stream& s) const\n@@ -76,7 +76,7 @@ struct DBHeightKey {\n struct DBHashKey {\n     uint256 hash;\n \n-    DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+    explicit DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n \n     ADD_SERIALIZE_METHODS;\n "
      },
      {
        "sha": "02f39cef8ef95f8e3cdf98d448d1b11c0de3902e",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -205,7 +205,7 @@ class NotificationsHandlerImpl : public Handler, CValidationInterface\n class RpcHandlerImpl : public Handler\n {\n public:\n-    RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n+    explicit RpcHandlerImpl(const CRPCCommand& command) : m_command(command), m_wrapped_command(&command)\n     {\n         m_command.actor = [this](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n             if (!m_wrapped_command) return false;"
      },
      {
        "sha": "457c3a2e8fd930c284dd337c8f8f98c1d22fb7a5",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -221,7 +221,7 @@ struct RPCResults {\n \n struct RPCExamples {\n     const std::string m_examples;\n-    RPCExamples(\n+    explicit RPCExamples(\n         std::string examples)\n         : m_examples(std::move(examples))\n     {"
      },
      {
        "sha": "65c51e02f580016b32fa955f6305512b3cf3715c",
        "filename": "test/lint/extended-lint-all.sh",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/test/lint/extended-lint-all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/test/lint/extended-lint-all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-all.sh?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -0,0 +1,26 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# This script runs all contrib/devtools/extended-lint-*.sh files, and fails if\n+# any exit with a non-zero status code.\n+\n+# This script is intentionally locale dependent by not setting \"export LC_ALL=C\"\n+# in order to allow for the executed lint scripts to opt in or opt out of locale\n+# dependence themselves.\n+\n+set -u\n+\n+SCRIPTDIR=$(dirname \"${BASH_SOURCE[0]}\")\n+LINTALL=$(basename \"${BASH_SOURCE[0]}\")\n+\n+for f in \"${SCRIPTDIR}\"/extended-lint-*.sh; do\n+  if [ \"$(basename \"$f\")\" != \"$LINTALL\" ]; then\n+    if ! \"$f\"; then\n+      echo \"^---- failure generated from $f\"\n+      exit 1\n+    fi\n+  fi\n+done"
      },
      {
        "sha": "47df25ba6bbc87067138774d2c5c3033a781a9cb",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4606b84329d760d7cee144bebe05807857edaae/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4606b84329d760d7cee144bebe05807857edaae/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=c4606b84329d760d7cee144bebe05807857edaae",
        "patch": "@@ -0,0 +1,80 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+export LC_ALL=C\n+\n+ENABLED_CHECKS=(\n+    \"Class '.*' has a constructor with 1 argument that is not explicit.\"\n+    \"Struct '.*' has a constructor with 1 argument that is not explicit.\"\n+)\n+\n+IGNORED_WARNINGS=(\n+    \"src/arith_uint256.h:.* Class 'arith_uint256' has a constructor with 1 argument that is not explicit.\"\n+    \"src/arith_uint256.h:.* Class 'base_uint < 256 >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/arith_uint256.h:.* Class 'base_uint' has a constructor with 1 argument that is not explicit.\"\n+    \"src/coins.h:.* Class 'CCoinsViewBacked' has a constructor with 1 argument that is not explicit.\"\n+    \"src/coins.h:.* Class 'CCoinsViewCache' has a constructor with 1 argument that is not explicit.\"\n+    \"src/coins.h:.* Class 'CCoinsViewCursor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/net.h:.* Class 'CNetMessage' has a constructor with 1 argument that is not explicit.\"\n+    \"src/policy/feerate.h:.* Class 'CFeeRate' has a constructor with 1 argument that is not explicit.\"\n+    \"src/prevector.h:.* Class 'const_iterator' has a constructor with 1 argument that is not explicit.\"\n+    \"src/prevector.h:.* Class 'const_reverse_iterator' has a constructor with 1 argument that is not explicit.\"\n+    \"src/prevector.h:.* Class 'iterator' has a constructor with 1 argument that is not explicit.\"\n+    \"src/prevector.h:.* Class 'reverse_iterator' has a constructor with 1 argument that is not explicit.\"\n+    \"src/primitives/block.h:.* Class 'CBlock' has a constructor with 1 argument that is not explicit.\"\n+    \"src/primitives/transaction.h:.* Class 'CTransaction' has a constructor with 1 argument that is not explicit.\"\n+    \"src/protocol.h:.* Class 'CMessageHeader' has a constructor with 1 argument that is not explicit.\"\n+    \"src/qt/guiutil.h:.* Class 'ItemDelegate' has a constructor with 1 argument that is not explicit.\"\n+    \"src/rpc/util.h:.* Struct 'RPCResults' has a constructor with 1 argument that is not explicit.\"\n+    \"src/rpc/util.h:.* style: Struct 'UniValueType' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'AddressDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'ComboDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'ConstPubkeyProvider' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'PKDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'PKHDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'RawDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'SHDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'WPKHDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/descriptor.cpp:.* Class 'WSHDescriptor' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/script.h:.* Class 'CScript' has a constructor with 1 argument that is not explicit.\"\n+    \"src/script/standard.h:.* Class 'CScriptID' has a constructor with 1 argument that is not explicit.\"\n+    \"src/support/allocators/secure.h:.* Struct 'secure_allocator < char >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/support/allocators/secure.h:.* Struct 'secure_allocator < RNGState >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/support/allocators/secure.h:.* Struct 'secure_allocator < unsigned char >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/support/allocators/zeroafterfree.h:.* Struct 'zero_after_free_allocator < char >' has a constructor with 1 argument that is not explicit.\"\n+    \"src/test/checkqueue_tests.cpp:.* Struct 'FailingCheck' has a constructor with 1 argument that is not explicit.\"\n+    \"src/test/checkqueue_tests.cpp:.* Struct 'MemoryCheck' has a constructor with 1 argument that is not explicit.\"\n+    \"src/test/checkqueue_tests.cpp:.* Struct 'UniqueCheck' has a constructor with 1 argument that is not explicit.\"\n+    \"src/wallet/db.h:.* Class 'BerkeleyEnvironment' has a constructor with 1 argument that is not explicit.\"\n+)\n+\n+if ! command -v cppcheck > /dev/null; then\n+    echo \"Skipping cppcheck linting since cppcheck is not installed. Install by running \\\"apt install cppcheck\\\"\"\n+    exit 0\n+fi\n+\n+function join_array {\n+    local IFS=\"$1\"\n+    shift\n+    echo \"$*\"\n+}\n+\n+ENABLED_CHECKS_REGEXP=$(join_array \"|\" \"${ENABLED_CHECKS[@]}\")\n+IGNORED_WARNINGS_REGEXP=$(join_array \"|\" \"${IGNORED_WARNINGS[@]}\")\n+WARNINGS=$(git ls-files -- \"*.cpp\" \"*.h\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" | \\\n+    xargs cppcheck --enable=all -j \"$(getconf _NPROCESSORS_ONLN)\" --language=c++ --std=c++11 --template=gcc -D__cplusplus -DCLIENT_VERSION_BUILD -DCLIENT_VERSION_IS_RELEASE -DCLIENT_VERSION_MAJOR -DCLIENT_VERSION_MINOR -DCLIENT_VERSION_REVISION -DCOPYRIGHT_YEAR -DDEBUG -DHAVE_WORKING_BOOST_SLEEP_FOR -I src/ -q 2>&1 | sort -u | \\\n+    grep -E \"${ENABLED_CHECKS_REGEXP}\" | \\\n+    grep -vE \"${IGNORED_WARNINGS_REGEXP}\")\n+if [[ ${WARNINGS} != \"\" ]]; then\n+    echo \"${WARNINGS}\"\n+    echo\n+    echo \"Advice not applicable in this specific case? Add an exception by updating\"\n+    echo \"IGNORED_WARNINGS in $0\"\n+    # Uncomment to enforce the developer note policy \"By default, declare single-argument constructors `explicit`\"\n+    # exit 1\n+fi\n+exit 0"
      }
    ]
  }
]