[
  {
    "sha": "820a562568cfe707dc66e2549b85e393c5669da1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjBhNTYyNTY4Y2ZlNzA3ZGM2NmUyNTQ5Yjg1ZTM5M2M1NjY5ZGEx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-05T22:22:11Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-02-08T09:36:04Z"
      },
      "message": "[feebumper] Replace unreachable error handling with assertions",
      "tree": {
        "sha": "ad832628c10f54edd96ea0e8430a9d679b35fe63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad832628c10f54edd96ea0e8430a9d679b35fe63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/820a562568cfe707dc66e2549b85e393c5669da1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/820a562568cfe707dc66e2549b85e393c5669da1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/820a562568cfe707dc66e2549b85e393c5669da1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/820a562568cfe707dc66e2549b85e393c5669da1/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a30e67d20f76bbcd9a7d445f616f005316e0a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a30e67d20f76bbcd9a7d445f616f005316e0a1a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 6,
      "deletions": 14
    },
    "files": [
      {
        "sha": "642451f7be31958e84a717147ce63c085d75013e",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 14,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/820a562568cfe707dc66e2549b85e393c5669da1/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/820a562568cfe707dc66e2549b85e393c5669da1/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=820a562568cfe707dc66e2549b85e393c5669da1",
        "patch": "@@ -35,11 +35,8 @@ static int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWalle\n         assert(mi != wallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n         vCoins.emplace_back(CInputCoin(&(mi->second), input.prevout.n));\n     }\n-    if (!wallet->DummySignTx(txNew, vCoins)) {\n-        // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n-        // implies that we can sign for every input.\n-        return -1;\n-    }\n+    // IsAllFromMe(ISMINE_SPENDABLE) implies that we can sign for every input.\n+    assert(wallet->DummySignTx(txNew, vCoins));\n     return GetVirtualTransactionSize(txNew);\n }\n \n@@ -131,10 +128,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n-    if (maxNewTxSize < 0) {\n-        errors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        return Result::INVALID_ADDRESS_OR_KEY;\n-    }\n+    assert(maxNewTxSize >= 0);\n \n     // calculate the old fee and fee-rate\n     old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n@@ -265,11 +259,9 @@ Result CommitTransaction(CWallet* wallet, const uint256& txid, CMutableTransacti\n     wtxBumped.fTimeReceivedIsTxTime = true;\n     wtxBumped.fFromMe = true;\n     CValidationState state;\n-    if (!wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n-        // NOTE: CommitTransaction never returns false, so this should never happen.\n-        errors.push_back(strprintf(\"The transaction was rejected: %s\", state.GetRejectReason()));\n-        return Result::WALLET_ERROR;\n-    }\n+    bool result = wallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state));\n+    // NOTE: CommitTransaction never returns false.\n+    assert(result);\n \n     bumped_txid = wtxBumped.GetHash();\n     if (state.IsInvalid()) {"
      }
    ]
  }
]