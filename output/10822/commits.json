[
  {
    "sha": "efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmI4YjcxYzNiMGQ0ODVmOTY3OTRkYzc4YjYxM2ZmMDdkZGQ5M2Yy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-07-16T09:00:13Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-07-16T09:22:07Z"
      },
      "message": "RPC: Also serve txo from gettxout (not just utxo and mempool)",
      "tree": {
        "sha": "93c248bed864ef4f02e7c2a946baf50118a016fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93c248bed864ef4f02e7c2a946baf50118a016fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJZazA/AAoJEKT10UHAGgOHN+UP/AhYqTIg5whsYWHj5dSh1s5y\nLLXAU6+LbeXDa5JSnqLIhEE2/2wMJUpAiZggdlEC196wbtJh5DNljPJDvh4MN1nI\noGqx71ahgb3k4Fi5ZlsJyptOacYqbdaXvs0Bo5M5BjVXH3hXHCvmfu3YHiBYzOWx\n2qt61DNIUw9XzjzrDJlG8fRvLV9mPB8sy4Hhk0xQhNegL5arGQMDGHJIBzIn77dE\nRYqi2Mz4+L8o1c6ixbV0QZtzgd5V4GKHc1ZNKLFiqslm+jIMkUuJXQYHkRGyz+MG\nNafiXMf9wXxpcWfuBTu8DIOR9WgrqNzeCTx5ncV4+mH/2U5rcBSNPhbpOz80y2ei\nhod2YlcKWjPhmbxqks5hze8UTAo7PB9eFVydsaJGo/y9xeruBq5FgnfCjd9t4+9i\nbww9as/qVnqX3ktJ8hLk4LKvBS8ZBxJmQsnG97ipqtFXDKrOh6EWnxp8Z5fIH3rV\nAYIyCxuxgHHcoEFHoX2AFQXdvBUBuxXU4McfGaDwZ6N7RRGV4U57YJB6gWnLGA/S\nEkkDkYhjC5NawUc2r5L/1FwSc9X15fhls4qtUM8aIcH8z5oaFKlSL/s6Xc2sVLQe\nKGQ1+BM0niGihntYcZFsAKn4xYhX8/qUYi2dSiGLsrLyO4Z1Pcjj/GaCTnauJrgv\nBk7yMIHm6/gvHX6b2pM8\n=7A1N\n-----END PGP SIGNATURE-----",
        "payload": "tree 93c248bed864ef4f02e7c2a946baf50118a016fd\nparent 5af6572534986bf85f6806e2cc66c1f1f8e3c56c\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1500195613 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1500196927 +0200\n\nRPC: Also serve txo from gettxout (not just utxo and mempool)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af6572534986bf85f6806e2cc66c1f1f8e3c56c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af6572534986bf85f6806e2cc66c1f1f8e3c56c"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 82,
      "deletions": 14
    },
    "files": [
      {
        "sha": "2e2e8d20c8792160cf2d99fbfe028f0d72dfd2c2",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 6,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
        "patch": "@@ -46,6 +46,33 @@ static CUpdatedBlock latestblock;\n \n extern void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry);\n \n+static bool ReadTxoFromOutpoint(Coin& coin, bool& is_spent, const CBlockIndex* pindex, const COutPoint& out, bool include_spent)\n+{\n+    is_spent = false;\n+    if (pcoinsTip->GetCoin(out, coin)) {\n+        return true;\n+    } else if (!include_spent) {\n+        return false;\n+    }\n+    is_spent = true;\n+\n+    uint256 hashblock;\n+    CTransactionRef tx_ref;\n+    if (!GetBlockchainTx(out.hash, tx_ref, Params().GetConsensus(), hashblock, true)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(fTxIndex ? \"No such blockchain transaction\"\n+            : \"No such utxo blockchain transaction. Use -txindex to enable spent output queries\"));\n+    }\n+    if (out.n >= tx_ref->vout.size()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, std::string(strprintf(\"No output %d for tx %s\", out.n, out.hash.GetHex())));\n+    }\n+    const CTxOut& prevoutput = tx_ref->vout[out.n];\n+    coin.out = prevoutput;\n+    coin.fCoinBase = tx_ref->IsCoinBase();\n+    coin.nHeight = mapBlockIndex[hashblock]->nHeight;\n+\n+    return true;\n+}\n+\n double GetDifficulty(const CBlockIndex* blockindex)\n {\n     if (blockindex == NULL)\n@@ -939,14 +966,15 @@ UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n \n UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n         throw std::runtime_error(\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n-            \"\\nReturns details about an unspent transaction output.\\n\"\n+            \"\\nReturns details about a transaction output.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n-            \"2. n              (numeric, required) vout number\\n\"\n-            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n+            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n+            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n+            \"3. \\\"include_mempool\\\"  (boolean, optional) Only search in the mempool. Default: true\\n\"\n+            \"4. \\\"include_spent\\\"    (boolean, optional) Whether to include spent outputs. Default: false\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\"\n@@ -964,6 +992,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"  },\\n\"\n             \"  \\\"version\\\" : n,            (numeric) The version\\n\"\n             \"  \\\"coinbase\\\" : true|false   (boolean) Coinbase or not\\n\"\n+            \"  \\\"spent\\\" : true|false      (boolean) Is the output spent with the current tip or not\\n\"\n             \"}\\n\"\n \n             \"\\nExamples:\\n\"\n@@ -987,6 +1016,12 @@ UniValue gettxout(const JSONRPCRequest& request)\n     if (request.params.size() > 2)\n         fMempool = request.params[2].get_bool();\n \n+    bool include_spent = false;\n+    if (request.params.size() > 3) {\n+        include_spent = request.params[3].get_bool();\n+    }\n+\n+    bool is_spent = false;\n     Coin coin;\n     if (fMempool) {\n         LOCK(mempool.cs);\n@@ -995,7 +1030,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             return NullUniValue;\n         }\n     } else {\n-        if (!pcoinsTip->GetCoin(out, coin)) {\n+        if (!ReadTxoFromOutpoint(coin, is_spent, chainActive.Tip(), out, include_spent)) {\n             return NullUniValue;\n         }\n     }\n@@ -1013,6 +1048,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     ScriptPubKeyToUniv(coin.out.scriptPubKey, o, true);\n     ret.push_back(Pair(\"scriptPubKey\", o));\n     ret.push_back(Pair(\"coinbase\", (bool)coin.fCoinBase));\n+    ret.push_back(Pair(\"spent\", (bool)is_spent));\n \n     return ret;\n }"
      },
      {
        "sha": "d0da590085b6b2d3bb826260d25a397c34cf57fc",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
        "patch": "@@ -93,6 +93,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"fundrawtransaction\", 1, \"options\" },\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n+    { \"gettxout\", 3, \"include_spent\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },"
      },
      {
        "sha": "58d8a871ff7cc42bb1de6f4eaf3764ad73791a60",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
        "patch": "@@ -900,19 +900,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n }\n \n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n-bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+bool GetBlockchainTx(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n     CBlockIndex *pindexSlow = NULL;\n \n     LOCK(cs_main);\n \n-    CTransactionRef ptx = mempool.get(hash);\n-    if (ptx)\n-    {\n-        txOut = ptx;\n-        return true;\n-    }\n-\n     if (fTxIndex) {\n         CDiskTxPos postx;\n         if (pblocktree->ReadTxIndex(hash, postx)) {\n@@ -955,6 +948,23 @@ bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus\n     return false;\n }\n \n+/**\n+ * Return transaction in txOut, and if it was found inside a block,\n+ * its hash is placed in hashBlock. Look in the mempool first.\n+*/\n+bool GetTransaction(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n+{\n+    LOCK(cs_main);\n+\n+    CTransactionRef ptx = mempool.get(hash);\n+    if (ptx)\n+    {\n+        txOut = ptx;\n+        return true;\n+    }\n+    return GetBlockchainTx(hash, txOut, consensusParams, hashBlock, fAllowSlow);\n+}\n+\n \n \n "
      },
      {
        "sha": "baba5cda380edc6adbb2397d2a0fff0e7091de99",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
        "patch": "@@ -276,6 +276,8 @@ bool IsInitialBlockDownload();\n  * This function only returns the highest priority warning of the set selected by strFor.\n  */\n std::string GetWarnings(const std::string& strFor);\n+/** Retrieve a transaction (from disk (not mempool), if possible) */\n+bool GetBlockchainTx(const uint256 &hash, CTransactionRef &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransactionRef &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */"
      },
      {
        "sha": "3a20abe80c565a2b2b52bd854e9c8314295be8f7",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb8b71c3b0d485f96794dc78b613ff07ddd93f2/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=efb8b71c3b0d485f96794dc78b613ff07ddd93f2",
        "patch": "@@ -19,6 +19,7 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n+        self.extra_args[0].append('-txindex')\n \n     def setup_network(self):\n         self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n@@ -71,6 +72,8 @@ def run_test(self):\n         confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n         assert_equal(txout['value'], 50)\n+        assert_equal(txout['confirmations'], 102)\n+        assert_equal(txout['spent'], False)\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True)\n         assert txout is None\n         # new utxo from mempool should be invisible if you exclude mempool\n@@ -83,13 +86,29 @@ def run_test(self):\n         # but 10 will go to node2 and the rest will go to node0\n         balance = self.nodes[0].getbalance()\n         assert_equal(set([txout1['value'], txout2['value']]), set([10, balance]))\n+        assert_equal(txout1['spent'], False)\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n+        assert_raises_jsonrpc(-5, 'No such blockchain transaction', self.nodes[0].gettxout, mempool_txid, 0, False, True)\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n+        # Now the txo should be visible only if you include spent outputs\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False, False)\n+        assert txout is None\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True, False)\n+        assert txout is None\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True, True)\n+        assert txout is None\n+        txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False, True)\n+        assert_equal(txout['value'], 50)\n+        assert_equal(txout['confirmations'], 103)\n+        assert_equal(txout['spent'], True)\n+        assert_raises_jsonrpc(-5, 'No output %d for tx %s' % (100, confirmed_txid), self.nodes[0].gettxout, confirmed_txid, 100, False, True)\n+        assert_raises_jsonrpc(-5, 'No such utxo blockchain transaction. Use -txindex to enable spent output queries', self.nodes[1].gettxout, confirmed_txid, confirmed_index, False, True)\n+        \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}"
      }
    ]
  }
]