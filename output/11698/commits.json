[
  {
    "sha": "c3055bbea1255cd791564b855b6951a9f4c510f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzA1NWJiZWExMjU1Y2Q3OTE1NjRiODU1YjY5NTFhOWY0YzUxMGY5",
    "commit": {
      "author": {
        "name": "Luke Mlsna",
        "email": "luke@mlsna.net",
        "date": "2017-11-18T04:43:17Z"
      },
      "committer": {
        "name": "Luke Mlsna",
        "email": "luke@mlsna.net",
        "date": "2017-11-18T05:28:11Z"
      },
      "message": "Add help-console command to Qt debug console\n\n     - Added `help-console` to the list of autocompletion strings\n     - Implemented requested changes to help message:\n       - Added an example that uses access-by-index `getblock(getblockhash(0) true)[tx][0]`\n       - Replace \"bracketed syntax\" to \"parenthesized syntax\" where applicable\n       - Replace \"separate\" with \"delimit\"\n       - Removed `<br>` and `<b>help/help-console</b>` from translation strings, since these parts don't change between languages\n       - Changed examples to be based off `getblock 0` so they will work even with pruned/no blockchain and `disablewallet` if copied and pasted\n       - Clarified syntax for queries of named/unnamed result objects.",
      "tree": {
        "sha": "aa4995fdfc39f8ab6d04c291740236d0311e6c64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4995fdfc39f8ab6d04c291740236d0311e6c64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3055bbea1255cd791564b855b6951a9f4c510f9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJaD8TzAAoJENFt8wBGbgziqfoP/1Y86rtS1jzq5wUCSHC9vM3a\n+DY7e8XOEfxBGCXqDxCwUUkInjVAp5twQarJguQZ8n15aAclEy2sw0WaZdR/IF/b\nEOo6PGdCaMT7gqNBdjYs9+C+dIw8dMw4wpiItlBwSgFb2okzX9YhfQuH0+jvZoyu\nQIq6d+wWc3sRbIZoNffxzRFXk6BPBLjQnN85f7Pmo1026w8JO8rUSa9VZ1p0QCGw\nbriZbIJv/8iGme9n6LjiDAY4OyP1+C4F8YfPD5/0d3IeIdZOSAp5AXDo/9vaqdeG\nyv53IYEHJ2+hys85i+xyjgHudSMHuUqaIGcXOAIOqJwlQZ8iIInAZmuPva7uiqBl\ncnJNLDyWoBzjDCCYk6rmaDiFCT3Ap5yv6G4ttxY3iSrrtVemOnCt8pfGzYycwHAh\nT5TpjP5Y9bzChelFIrvB0L+TEH4NjWdEiuK6f1utHGLfFo/W5gRtW1Vuq+Ybq+3a\nH/UAk9a51pWX2x8G233xgu20KxOnTIypCEhbdF4bnJRK0TtDVZ+FqTJm1f9XDixP\nwzb397CZ9Njg37mMJUgZEi0miZxDKRYXnyJa7KuqiaHZIC+VQaSM9jgf8I2HpAIA\nAlA9AqICsDhq+ENJ8+qY+1RfRIR7b2nX8Fw3uXRr18SWZVMq/SHXafOdocTE0gRL\nw0Q0hWMkKvNYKNgtv3ed\n=eA1U\n-----END PGP SIGNATURE-----",
        "payload": "tree aa4995fdfc39f8ab6d04c291740236d0311e6c64\nparent f0c1f8abb0182da557d07372b938f3a0a4bb906f\nauthor Luke Mlsna <luke@mlsna.net> 1510980197 -0600\ncommitter Luke Mlsna <luke@mlsna.net> 1510982891 -0600\n\nAdd help-console command to Qt debug console\n\n     - Added `help-console` to the list of autocompletion strings\n     - Implemented requested changes to help message:\n       - Added an example that uses access-by-index `getblock(getblockhash(0) true)[tx][0]`\n       - Replace \"bracketed syntax\" to \"parenthesized syntax\" where applicable\n       - Replace \"separate\" with \"delimit\"\n       - Removed `<br>` and `<b>help/help-console</b>` from translation strings, since these parts don't change between languages\n       - Changed examples to be based off `getblock 0` so they will work even with pruned/no blockchain and `disablewallet` if copied and pasted\n       - Clarified syntax for queries of named/unnamed result objects.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3055bbea1255cd791564b855b6951a9f4c510f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3055bbea1255cd791564b855b6951a9f4c510f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3055bbea1255cd791564b855b6951a9f4c510f9/comments",
    "author": {
      "login": "lmlsna",
      "id": 30895125,
      "node_id": "MDQ6VXNlcjMwODk1MTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/30895125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmlsna",
      "html_url": "https://github.com/lmlsna",
      "followers_url": "https://api.github.com/users/lmlsna/followers",
      "following_url": "https://api.github.com/users/lmlsna/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmlsna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmlsna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmlsna/subscriptions",
      "organizations_url": "https://api.github.com/users/lmlsna/orgs",
      "repos_url": "https://api.github.com/users/lmlsna/repos",
      "events_url": "https://api.github.com/users/lmlsna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmlsna/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lmlsna",
      "id": 30895125,
      "node_id": "MDQ6VXNlcjMwODk1MTI1",
      "avatar_url": "https://avatars.githubusercontent.com/u/30895125?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmlsna",
      "html_url": "https://github.com/lmlsna",
      "followers_url": "https://api.github.com/users/lmlsna/followers",
      "following_url": "https://api.github.com/users/lmlsna/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmlsna/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmlsna/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmlsna/subscriptions",
      "organizations_url": "https://api.github.com/users/lmlsna/orgs",
      "repos_url": "https://api.github.com/users/lmlsna/repos",
      "events_url": "https://api.github.com/users/lmlsna/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmlsna/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0c1f8abb0182da557d07372b938f3a0a4bb906f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0c1f8abb0182da557d07372b938f3a0a4bb906f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 31,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5ac29b137693a650711e1e3bf57fe6dafe354c20",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3055bbea1255cd791564b855b6951a9f4c510f9/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3055bbea1255cd791564b855b6951a9f4c510f9/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c3055bbea1255cd791564b855b6951a9f4c510f9",
        "patch": "@@ -392,11 +392,37 @@ void RPCExecutor::request(const QString &command)\n     {\n         std::string result;\n         std::string executableCommand = command.toStdString() + \"\\n\";\n+\n+        // Catch the console-only-help command before RPC call is executed and reply with help text as-if a RPC reply.\n+        if(executableCommand == \"help-console\\n\")\n+        {\n+            Q_EMIT reply(RPCConsole::CMD_REPLY, QString((\"\\n\"\n+                \"This console accepts RPC commands using the standard syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\\n\"\n+\n+                \"This console can also accept RPC commands using parenthesized syntax.\\n\"\n+                \"   example:    getblockhash(0)\\n\\n\"\n+\n+                \"Commands may be nested when specified with the parenthesized syntax.\\n\"\n+                \"   example:    getblock(getblockhash(0) 1)\\n\\n\"\n+\n+                \"A space or a comma can be used to delimit arguments for either syntax.\\n\"\n+                \"   example:    getblockhash 0\\n\"\n+                \"               getblockhash,0\\n\\n\"\n+\n+                \"Named results can be queried with a non-quoted key string in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0) true)[tx]\\n\\n\"\n+\n+                \"Results without keys can be queried using an integer in brackets.\\n\"\n+                \"   example:    getblock(getblockhash(0),true)[tx][0]\\n\\n\")));\n+            return;\n+        }\n         if(!RPCConsole::RPCExecuteCommandLine(result, executableCommand))\n         {\n             Q_EMIT reply(RPCConsole::CMD_ERROR, QString(\"Parse error: unbalanced ' or \\\"\"));\n             return;\n         }\n+\n         Q_EMIT reply(RPCConsole::CMD_REPLY, QString::fromStdString(result));\n     }\n     catch (UniValue& objError)\n@@ -645,6 +671,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n             wordList << (\"help \" + commandList[i]).c_str();\n         }\n \n+        wordList << \"help-console\";\n         wordList.sort();\n         autoCompleter = new QCompleter(wordList, this);\n         autoCompleter->setModelSorting(QCompleter::CaseSensitivelySortedModel);\n@@ -750,10 +777,11 @@ void RPCConsole::clear(bool clearHistory)\n \t \n     message(CMD_REPLY, (tr(\"Welcome to the %1 RPC console.\").arg(tr(PACKAGE_NAME)) + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and %1 to clear screen.\").arg(\"<b>\"+clsKey+\"</b>\") + \"<br>\" +\n-                        tr(\"Type <b>help</b> for an overview of available commands.\")) +\n-                        \"<br><span class=\\\"secwarning\\\">\" +\n+                        tr(\"Type %1 for an overview of available commands.\").arg(\"<b>help</b>\") + \"<br>\" +\n+                        tr(\"For more information on using this console type %1.\").arg(\"<b>help-console</b>\") +\n+                        \"<br><span class=\\\"secwarning\\\"><br>\" +\n                         tr(\"WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramifications of a command.\") +\n-                        \"</span>\",\n+                        \"</span>\"),\n                         true);\n }\n "
      }
    ]
  }
]