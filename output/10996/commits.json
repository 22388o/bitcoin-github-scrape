[
  {
    "sha": "e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWNjMWMwZTVhOWZmZjk1Y2NmMmM3ZTg5Nzg0N2NkYzUwN2VjYjUz",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-10T05:18:16Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-12-05T07:05:54Z"
      },
      "message": "Add per-network config file network.conf",
      "tree": {
        "sha": "cae3e8b1157ee06d0a4f915af78ae0e669e1fd46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cae3e8b1157ee06d0a4f915af78ae0e669e1fd46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c17f11f7b43ad3bd9e242c67db1f3679558a0581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c17f11f7b43ad3bd9e242c67db1f3679558a0581"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 119,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1564c5a9623636cd6cc1d8ecc8aa50855ece4067",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -36,6 +36,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageGroup(_(\"Options:\"));\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-netconf=<file>\", strprintf(_(\"Specify network-specific configuration file (default: %s)\"), BITCOIN_NETCONF_FILENAME));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-getinfo\", _(\"Get general information from the remote server. Note that unlike server-side RPC calls, the results of -getinfo is the result of multiple non-atomic requests. Some entries in the result may represent results from different states (e.g. wallet balance may be as of a different block from the chain state reported)\"));\n     AppendParamsHelpMessages(strUsage);\n@@ -118,6 +119,14 @@ static int AppInitRPC(int argc, char* argv[])\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return EXIT_FAILURE;\n     }\n+\n+    try {\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-netconf\", BITCOIN_NETCONF_FILENAME), true);\n+    } catch (const std::exception& e) {\n+        fprintf(stderr, \"Error reading network configuration file: %s\\n\", e.what());\n+        return EXIT_FAILURE;\n+    }\n+\n     if (gArgs.GetBoolArg(\"-rpcssl\", false))\n     {\n         fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");"
      },
      {
        "sha": "b16314f7268726abef8b2335850026ba78e23db0",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -116,6 +116,13 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n \n+        try {\n+            gArgs.ReadConfigFile(gArgs.GetArg(\"-netconf\", BITCOIN_NETCONF_FILENAME), true);\n+        } catch (const std::exception& e) {\n+            fprintf(stderr, \"Error reading network configuration file: %s\\n\", e.what());\n+            return false;\n+        }\n+\n         // Error out when loose non-argument tokens are encountered on command line\n         for (int i = 1; i < argc; i++) {\n             if (!IsSwitchChar(argv[i][0])) {"
      },
      {
        "sha": "858dbb7a1eabf4533f000ea17d1fadb8e4fc9244",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -328,6 +328,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-blocksonly\", strprintf(_(\"Whether to operate in a blocks only mode (default: %u)\"), DEFAULT_BLOCKSONLY));\n     strUsage +=HelpMessageOpt(\"-assumevalid=<hex>\", strprintf(_(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\"), defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), BITCOIN_CONF_FILENAME));\n+    strUsage += HelpMessageOpt(\"-netconf=<file>\", strprintf(_(\"Specify network-specific configuration file (default: %s)\"), BITCOIN_NETCONF_FILENAME));\n     if (mode == HMM_BITCOIND)\n     {\n #if HAVE_DECL_DAEMON\n@@ -1221,6 +1222,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Using network config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-netconf\", BITCOIN_NETCONF_FILENAME), true).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     InitSignatureCache();"
      },
      {
        "sha": "38f99930b419a52d7dc04bb6186fc87950205712",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -659,6 +659,14 @@ int main(int argc, char *argv[])\n     // Re-initialize translations after changing application name (language in network-specific settings can be different)\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n+    try {\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-netconf\", BITCOIN_NETCONF_FILENAME), true);\n+    } catch (const std::exception& e) {\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n+            QObject::tr(\"Error: Cannot parse network configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n+        return EXIT_FAILURE;\n+    }\n+\n #ifdef ENABLE_WALLET\n     /// 8. URI IPC sending\n     // - Do this early as we don't want to bother initializing if we are just calling IPC"
      },
      {
        "sha": "1ade5c14565dca8dd22e6a3880e9fb6acc177961",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -88,6 +88,7 @@\n const int64_t nStartupTime = GetTime();\n \n const char * const BITCOIN_CONF_FILENAME = \"bitcoin.conf\";\n+const char * const BITCOIN_NETCONF_FILENAME = \"network.conf\";\n const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n@@ -606,18 +607,18 @@ void ClearDatadirCache()\n     pathCachedNetSpecific = fs::path();\n }\n \n-fs::path GetConfigFile(const std::string& confPath)\n+fs::path GetConfigFile(const std::string& confPath, bool fNetSpecific)\n {\n     fs::path pathConfigFile(confPath);\n     if (!pathConfigFile.is_complete())\n-        pathConfigFile = GetDataDir(false) / pathConfigFile;\n+        pathConfigFile = GetDataDir(fNetSpecific) / pathConfigFile;\n \n     return pathConfigFile;\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigFile(const std::string& confPath, bool fNetSpecific)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n+    fs::ifstream streamConfig(GetConfigFile(confPath, fNetSpecific));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n "
      },
      {
        "sha": "0ac9241ef9418bf2345797cc5bbc2f5b968a59eb",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -56,6 +56,7 @@ extern std::atomic<bool> fReopenDebugLog;\n extern CTranslationInterface translationInterface;\n \n extern const char * const BITCOIN_CONF_FILENAME;\n+extern const char * const BITCOIN_NETCONF_FILENAME;\n extern const char * const BITCOIN_PID_FILENAME;\n \n extern std::atomic<uint32_t> logCategories;\n@@ -173,7 +174,7 @@ bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-fs::path GetConfigFile(const std::string& confPath);\n+fs::path GetConfigFile(const std::string& confPath, bool fNetSpecific = false);\n #ifndef WIN32\n fs::path GetPidFile();\n void CreatePidFile(const fs::path &path, pid_t pid);\n@@ -203,7 +204,7 @@ class ArgsManager\n     std::map<std::string, std::vector<std::string>> mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n-    void ReadConfigFile(const std::string& confPath);\n+    void ReadConfigFile(const std::string& confPath, bool fNetSpecific = false);\n \n     /**\n      * Return a vector of strings of the given argument"
      },
      {
        "sha": "b791eaa5c55dbd4248283bda41e1ab6228a40783",
        "filename": "test/functional/feature_netconf.py",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/test/functional/feature_netconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/test/functional/feature_netconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_netconf.py?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests the network-specific config file.\"\"\"\n+\n+import os\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+class NetConfTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        super().setup_chain()\n+\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"network.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=net\\n\")\n+            f.write(\"maxmempool=111\\n\")\n+\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"alt-network.conf\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(\"uacomment=altnet\\n\")\n+            f.write(\"uacomment=extra\\n\")\n+            f.write(\"maxmempool=222\\n\")\n+\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin-altnet.conf\"), 'a', encoding='utf8') as f:\n+            for l in open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin.conf\")):\n+                f.write(l)\n+            f.write(\"uacomment=mainalt\\n\")\n+            f.write(\"netconf=alt-network.conf\\n\")\n+            f.write(\"maxmempool=333\\n\")\n+\n+        with open(os.path.join(self.options.tmpdir, \"node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"uacomment=main\\n\")\n+\n+    def set_test_params(self):\n+         self.setup_clean_chain = False\n+         self.num_nodes = 1\n+\n+    def check_maxmempool(self, expected):\n+        mpinfo = self.nodes[0].getmempoolinfo()\n+        maxmem = mpinfo[\"maxmempool\"]\n+        assert maxmem == expected*1000000, \"Max mempool is %s M not %s M\" % (maxmem/1000000, expected)\n+\n+    def check_subversion(self, *expected):\n+        nwinfo = self.nodes[0].getnetworkinfo()\n+        subversion = nwinfo[\"subversion\"]\n+        want = \"(testnode0; \" + \"; \".join(expected) + \")/\"\n+        assert subversion.endswith(want), \"Subversion %s does not end with %s\" % (subversion, want)\n+\n+    def run_test(self):\n+        # expected behaviour:\n+        #   single option arguments should adopt the first seen value,\n+        #   in order of command line, bitcoin.conf, network.conf.\n+        #   tested using maxmempool setting.\n+        #\n+        #   multi option arguments should see all values, in the same\n+        #   order (command line, bitcoin.conf, network.conf). tested\n+        #   using uacomment sub-version.\n+\n+        # by default, loads bitcoin.conf and network.conf\n+        self.check_subversion(\"main\", \"net\")\n+        self.check_maxmempool(111)\n+\n+        # if bitcoin.conf specifies a network conf, that gets loaded\n+        self.restart_node(0, [\"-conf=bitcoin-altnet.conf\"])\n+        self.check_subversion(\"mainalt\", \"altnet\", \"extra\")\n+        self.check_maxmempool(333)\n+\n+        # netconf on command line works\n+        self.restart_node(0, [\"-netconf=alt-network.conf\"])\n+        self.check_subversion(\"main\", \"altnet\", \"extra\")\n+        self.check_maxmempool(222)\n+\n+        # netconf on command line overrides specification in bitcoin.conf\n+        self.restart_node(0, [\"-conf=bitcoin-altnet.conf\", \"-netconf=network.conf\"])\n+        self.check_subversion(\"mainalt\", \"net\")\n+        self.check_maxmempool(333)\n+\n+        # if file doesn't exist, everything is fine\n+        self.restart_node(0, [\"-netconf=no-network.conf\"])\n+        self.check_subversion(\"main\")\n+        self.check_maxmempool(300)\n+\n+if __name__ == '__main__':\n+    NetConfTest().main()\n+"
      },
      {
        "sha": "b011a56bd6adb904b81a13bd14395f76a695ed9f",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "patch": "@@ -128,6 +128,7 @@\n     'uacomment.py',\n     'p2p-acceptblock.py',\n     'feature_logging.py',\n+    'feature_netconf.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "5a63c5ce366b673ea454de9379a4eac122024fdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTYzYzVjZTM2NmI2NzNlYTQ1NGRlOTM3OWE0ZWFjMTIyMDI0ZmRm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-10-10T05:18:32Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2017-12-05T07:05:55Z"
      },
      "message": "Be explicit whether config file is net specific\n\nRemove the default for whether GetConfigFile and ReadConfigFile\nexpects the file to be network specific or not, requiring true\nor false to be passed in for fNetworkSpecific on any call.",
      "tree": {
        "sha": "9e127b5e550200582a53807be51a98f2c9271432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e127b5e550200582a53807be51a98f2c9271432"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a63c5ce366b673ea454de9379a4eac122024fdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a63c5ce366b673ea454de9379a4eac122024fdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a63c5ce366b673ea454de9379a4eac122024fdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a63c5ce366b673ea454de9379a4eac122024fdf/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9cc1c0e5a9fff95ccf2c7e897847cdc507ecb53"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "968d86dad55aa1ac3c06cd11003ab770a963b6a1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -107,7 +107,7 @@ static int AppInitRPC(int argc, char* argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME), false);\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return EXIT_FAILURE;\n@@ -326,8 +326,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw std::runtime_error(strprintf(\n                 _(\"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\"),\n-                    GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n-\n+                    GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME), false).string().c_str()));\n         }\n     } else {\n         strRPCUserColonPass = gArgs.GetArg(\"-rpcuser\", \"\") + \":\" + gArgs.GetArg(\"-rpcpassword\", \"\");"
      },
      {
        "sha": "d0ec2b077e6035780d5987033a93c9d0435610c0",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -103,7 +103,7 @@ bool AppInit(int argc, char* argv[])\n         }\n         try\n         {\n-            gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+            gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME), false);\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "362d3f76eb76856e1280e2e381c26baf7a1b4942",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -1221,7 +1221,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME), false).string());\n     LogPrintf(\"Using network config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-netconf\", BITCOIN_NETCONF_FILENAME), true).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "9d45447be4648a3f275fe159f6c91b5acfef5dd1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -627,7 +627,7 @@ int main(int argc, char *argv[])\n         return EXIT_FAILURE;\n     }\n     try {\n-        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+        gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME), false);\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));"
      },
      {
        "sha": "69a3b8f6a1012517a8ec3bcc925ed0f40901747c",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -418,7 +418,7 @@ void openDebugLogfile()\n \n bool openBitcoinConf()\n {\n-    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME);\n+    boost::filesystem::path pathConfig = GetConfigFile(BITCOIN_CONF_FILENAME, false);\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);"
      },
      {
        "sha": "c847e72c2b4d659d18768b5423b7c51f36f392d1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a63c5ce366b673ea454de9379a4eac122024fdf/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a63c5ce366b673ea454de9379a4eac122024fdf/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=5a63c5ce366b673ea454de9379a4eac122024fdf",
        "patch": "@@ -174,7 +174,7 @@ bool TryCreateDirectories(const fs::path& p);\n fs::path GetDefaultDataDir();\n const fs::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-fs::path GetConfigFile(const std::string& confPath, bool fNetSpecific = false);\n+fs::path GetConfigFile(const std::string& confPath, bool fNetSpecific);\n #ifndef WIN32\n fs::path GetPidFile();\n void CreatePidFile(const fs::path &path, pid_t pid);\n@@ -204,7 +204,7 @@ class ArgsManager\n     std::map<std::string, std::vector<std::string>> mapMultiArgs;\n public:\n     void ParseParameters(int argc, const char*const argv[]);\n-    void ReadConfigFile(const std::string& confPath, bool fNetSpecific = false);\n+    void ReadConfigFile(const std::string& confPath, bool fNetSpecific);\n \n     /**\n      * Return a vector of strings of the given argument"
      }
    ]
  }
]