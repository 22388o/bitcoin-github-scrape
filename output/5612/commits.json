[
  {
    "sha": "84d919974bfa22c9332faa36768d52cbbcc594f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGQ5MTk5NzRiZmEyMmM5MzMyZmFhMzY3NjhkNTJjYmJjYzU5NGY1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-07T10:21:53Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-01-07T15:41:12Z"
      },
      "message": "[QA] fix zapwallettxes test\n\n- remove shell test script and add a python equivalent",
      "tree": {
        "sha": "60c4684f334c1c6daf202a82e52e936fe15a7fcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60c4684f334c1c6daf202a82e52e936fe15a7fcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84d919974bfa22c9332faa36768d52cbbcc594f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d919974bfa22c9332faa36768d52cbbcc594f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84d919974bfa22c9332faa36768d52cbbcc594f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84d919974bfa22c9332faa36768d52cbbcc594f5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "729ba317498bf644c62975dbde07da5ab9ef0043",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729ba317498bf644c62975dbde07da5ab9ef0043",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/729ba317498bf644c62975dbde07da5ab9ef0043"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 84,
      "deletions": 166
    },
    "files": [
      {
        "sha": "efeee4553065bbd60b42e274111853d0441a3698",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=84d919974bfa22c9332faa36768d52cbbcc594f5",
        "patch": "@@ -26,14 +26,15 @@ testScripts=(\n     'mempool_spendcoinbase.py'\n     'mempool_coinbase_spends.py'\n     'httpbasics.py'\n+    'zapwallettxes.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n     for (( i = 0; i < ${#testScripts[@]}; i++ ))\n     do\n         if [ -z \"$1\" ] || [ \"$1\" == \"${testScripts[$i]}\" ] || [ \"$1.py\" == \"${testScripts[$i]}\" ]\n         then\n-            echo -e \"running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n+            echo -e \"Running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n             ${BUILDDIR}/qa/rpc-tests/${testScripts[$i]} --srcdir \"${BUILDDIR}/src\"\n         fi\n     done"
      },
      {
        "sha": "a773575906fb103900c2bb732c4762062c347cbc",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "added",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84d919974bfa22c9332faa36768d52cbbcc594f5/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=84d919974bfa22c9332faa36768d52cbbcc594f5",
        "patch": "@@ -0,0 +1,82 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework import BitcoinTestFramework\n+from util import *\n+\n+\n+class ZapWalletTXesTest (BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.is_network_split=False\n+        self.sync_all()\n+\n+    def run_test (self):\n+        print \"Mining blocks...\"\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        self.nodes[1].setgenerate(True, 101)\n+        self.sync_all()\n+        \n+        assert_equal(self.nodes[0].getbalance(), 50)\n+        \n+        txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        self.sync_all()\n+        self.nodes[0].setgenerate(True, 1)\n+        self.sync_all()\n+        \n+        txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n+        txid3 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n+        \n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 must be available (confirmed)\n+        \n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        assert_equal(tx1['txid'], txid1) #tx1 must be available (confirmed)\n+        \n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        assert_equal(tx2['txid'], txid2) #tx2 must be available (unconfirmed)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n+        \n+        #restart bitcoind\n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0,self.options.tmpdir)\n+        \n+        tx3 = self.nodes[0].gettransaction(txid3)\n+        assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n+        \n+        self.nodes[0].stop()\n+        bitcoind_processes[0].wait()\n+        \n+        #restart bitcoind with zapwallettxes\n+        self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        \n+        aException = False\n+        try:\n+            tx3 = self.nodes[0].gettransaction(txid3)\n+        except JSONRPCException,e:\n+            print e\n+            aException = True\n+        \n+        assert_equal(aException, True) #there must be a expection because the unconfirmed wallettx0 must be gone by now\n+\n+        tx0 = self.nodes[0].gettransaction(txid0)\n+        assert_equal(tx0['txid'], txid0) #tx0 (confirmed) must still be available because it was confirmed\n+\n+\n+if __name__ == '__main__':\n+    ZapWalletTXesTest ().main ()"
      },
      {
        "sha": "4312d84e944623fa54af1e48824c808f51b1b2ae",
        "filename": "qa/rpc-tests/zapwallettxes.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 165,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729ba317498bf644c62975dbde07da5ab9ef0043/qa/rpc-tests/zapwallettxes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729ba317498bf644c62975dbde07da5ab9ef0043/qa/rpc-tests/zapwallettxes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.sh?ref=729ba317498bf644c62975dbde07da5ab9ef0043",
        "patch": "@@ -1,165 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test -zapwallettxes=<mode>\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-D1=${D}/node1\n-CreateDataDir \"$D1\" port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir \"$D2\" port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-function CleanUp {\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-rm -rf $D\n-}\n-\n-# 110 blocks, 10 mature == 500 XBT\n-$CLI $B1ARGS setgenerate true 110\n-$CLI $B2ARGS setgenerate true 110\n-\n-CheckBalance \"$B1ARGS\" 500\n-CheckBalance \"$B2ARGS\" 500\n-\n-# Send 10 XBT\n-TXID1_DEFAULT=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-TXID2_DEFAULT=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 10)\n-\n-CheckBalance $B1ARGS 490\n-CheckBalance $B2ARGS 490\n-\n-# Move 10 XBT to testaccount\n-TMP=$($CLI $B1ARGS move \"\" \"testaccount\" 10)\n-TMP=$($CLI $B2ARGS move \"\" \"testaccount\" 10)\n-\n-CheckBalance $B1ARGS 10 \"testaccount\"\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-# Send 1 XBT from testaccount\n-TXID1_TESTACCOUNT=$($CLI $B1ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_TESTACCOUNT=$($CLI $B2ARGS sendfrom \"testaccount\" \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-CheckBalance $B2ARGS 9 \"testaccount\"\n-\n-CheckBalance $B1ARGS 489\n-CheckBalance $B2ARGS 489\n-\n-# Confirm transactions\n-$CLI $B1ARGS setgenerate true 1\n-$CLI $B2ARGS setgenerate true 1\n-\n-# Create unconfirmed transaction\n-TXID1_UNCONFIRMED=$($CLI $B1ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-TXID2_UNCONFIRMED=$($CLI $B2ARGS sendtoaddress \"mrhz5ZgSF3C1BSdyCKt3gEdhKoRL5BNfJV\" 1)\n-\n-# check balance (we created another 50 and spent 1 in the meantime)\n-CheckBalance $B1ARGS 538\n-CheckBalance $B2ARGS 538\n-\n-# Safety check, if unconfirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction1_1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"gettransaction2_1: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# stop nodes\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-# restart nodes with -zapwallettxes\n-$BITCOIND -zapwallettxes=1 $B1ARGS &\n-B1PID=$!\n-$BITCOIND -zapwallettxes=2 $B2ARGS &\n-B2PID=$!\n-\n-# check if confirmed transactions are there\n-$CLI $B1ARGS gettransaction $TXID1_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 1: $TXID1_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_DEFAULT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 2: $TXID2_DEFAULT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B1ARGS gettransaction $TXID1_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 3: $TXID1_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_TESTACCOUNT > /dev/null 2>&1\n-if [[ $? -ne 0 ]] ; then\n-    echoerr \"check confirmed transaction 4: $TXID2_TESTACCOUNT failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check if unconfirmed transaction is gone\n-$CLI $B1ARGS gettransaction $TXID1_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 1: $TXID1_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-$CLI $B2ARGS gettransaction $TXID2_UNCONFIRMED > /dev/null 2>&1\n-if [[ $? -eq 0 ]] ; then\n-    echoerr \"check unconfirmed transaction 2: $TXID2_UNCONFIRMED failed\"\n-    CleanUp\n-    exit 1\n-fi\n-\n-# check zapwallet mode 1, testaccount balance must be 9 (keeping transaction metadata)\n-CheckBalance $B1ARGS 9 \"testaccount\"\n-\n-# check zapwallet mode 2, testaccount balance must be 10 (dropping transaction metadata)\n-CheckBalance $B2ARGS 10 \"testaccount\"\n-\n-echo \"Tests successful, cleaning up\"\n-CleanUp\n-exit 0"
      }
    ]
  }
]