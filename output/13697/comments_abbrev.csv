sipa,2018-07-18T19:31:46Z,"Rebased, removed future ""key origin"" support (not needed right now, ignore).\n\nAlso, I'd like people to first review the descriptor language itself (a very short summary is in the RPC help, more of a reference in script/descriptor.h, and a design document in https://gist.github.com/sipa/e3d23d498c430bb601c5bca83523fa82). In particular, I'm not convinced about the ""old"" function (which maps pubk",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-406047815,406047815,
promag,2018-07-18T20:56:27Z,"Regarding the ""old"" function, I think it could receive the version, for instance `default(args..., version)` — it should validate if args are compatible with the version specified (at the moment args should be only a pubkey).",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-406071681,406071681,
sipa,2018-07-18T21:06:36Z,"@promag There is no intention of ever adding another of those ""defaults"". Future versions should work with specific derivations (only P2WSH directly for example, rather than a collection). It's only for compatibility with the backward way we used to derive what scriptPubKeys are ours that such a default is useful.",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-406074546,406074546,
DrahtBot,2018-07-22T13:27:28Z,<!--e57a25ab6845829454e8d69fc972939a-->No more conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-406866602,406866602,
flack,2018-07-25T13:30:03Z,"@sipa since you write that `old` is a ""combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P."", you could call it `combo` instead. Or `ck` if you want it to look more like the other things that use `P`. And potentially prepend `bc` to indicate it's for backwards compatibility (but in that case someone should check urban dictionary to make sure `bcck` isn't some newfangled swear word",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-407754444,407754444,
sipa,2018-07-26T19:11:02Z,"@flack Oh, I like that. Changed to ""combo"".",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408204024,408204024,
MarcoFalke,2018-07-26T20:08:16Z,"Travis failure:\n\n```\ntest_framework.authproxy.JSONRPCException: Invalid descriptor 'old(03abcaca414970a8d36624011628045855cb01cded780445a33688a0b905a47224)' (-5)",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408219631,408219631,
jonasschnelli,2018-07-27T08:47:42Z,"First two findings:\n\n* I think supporting `h` as equivalent to `'` in extended key derivation range would be great (JSON / shell / GUI). I suggest pulling in https://github.com/bitcoin/bitcoin/commit/203b4c94ce83981b0d76dd2adb778719ba868db1.\n\n* I think the `IsHardened()` function is not correct. Using `0'/0'/*` will derive all hardened keys at the * level (same as `0'/0'/*'`). Seems to be ",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408354687,408354687,
jonasschnelli,2018-07-27T09:14:02Z,Additional xpub range tests can be pulled from here: https://github.com/bitcoin/bitcoin/commit/cc1ffb324b53855f7eae81a6b0df10bd677ca1a5,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408361519,408361519,
Sjors,2018-07-27T09:24:23Z,"+1 on `h` alias\n\nI only tested unhardened derivation (`xpub/0/*`) because most wallets only export account level xpubs. @jonasschnelli maybe add a test for the `'/*)` pattern to cc1ffb3? It currently only checks `'/*')`",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408364209,408364209,
jonasschnelli,2018-07-27T09:54:46Z,"@Sjors: A test for `'/*` would currently fail,... but it's simple to add (keys are already prepared in \nhttps://github.com/bitcoin/bitcoin/commit/cc1ffb324b53855f7eae81a6b0df10bd677ca1a5), just waiting for a fix for the hardened/non-hardened mix.",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408371614,408371614,
jonasschnelli,2018-07-27T09:58:36Z,Suggest pulling in the experimental warning for scantxoutset here: https://github.com/bitcoin/bitcoin/commit/3ec0958ea746d0db5edefff9f423cd2caab32857,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408372532,408372532,
sipa,2018-07-27T18:09:31Z,"@jonasschnelli Good catch; the derivation for ""/*"" with a parent hardened step is incorrect. Fixing.",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408497118,408497118,
sipa,2018-07-27T18:53:51Z,"@jonasschnelli Ok, fixed the derivation, changed the range to be max index rather than count, included your tests and experimental warning, and added a number of tests myself (generated with an independent BIP32 implementation).",https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408508731,408508731,
sipa,2018-07-27T19:23:00Z,@jonasschnelli Added support for h instead of ' in hardened descriptor paths as well (plus some tests for it). Serializing a descriptor will always use '.,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-408515755,408515755,
MarcoFalke,2018-08-01T15:52:39Z,Concept ACK f6b7fc3,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-409622920,409622920,
laanwj,2018-08-01T16:51:07Z,utACK f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f,https://github.com/bitcoin/bitcoin/pull/13697#issuecomment-409643713,409643713,
Empact,2018-07-18T03:26:51Z,~Missing copyright block~,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203241841,203241841,src/script/descriptor.cpp
sipa,2018-07-18T03:30:30Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203242258,203242258,src/script/descriptor.cpp
promag,2018-07-18T13:17:58Z,"nit, remove empty line.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203374074,203374074,src/script/sign.h
promag,2018-07-18T13:22:42Z,"At the moment this is only used in tests, move there?",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203375847,203375847,src/script/sign.h
promag,2018-07-18T13:33:16Z,"nit, add `// KEY_ORIGIN_SUPPORT`.\n",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203379602,203379602,src/script/descriptor.cpp
promag,2018-07-18T13:34:13Z,"nit, `{` in new line.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203379927,203379927,src/script/descriptor.cpp
promag,2018-07-18T13:34:31Z,"nit, `= default`?",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203380024,203380024,src/script/descriptor.cpp
promag,2018-07-18T15:34:18Z,"Add\n```cpp\nif (it == sp.end()) return ret;\n```\nfor when string is empty.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203426710,203426710,src/script/descriptor.cpp
promag,2018-07-18T16:01:21Z,"Compiler warning:\n```\nscript/descriptor.cpp:617:39: warning: moving a local object in a return statement prevents copy elision [-Wpessimizing-move]\n    if (sp.size() == 0 && ret) return std::move(ret);\n                                      ^\nscript/descriptor.cpp:617:39: note: remove std::move call here\n    if (sp.size() == 0 && ret) return std::move(ret);\n                           ",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203436690,203436690,src/script/descriptor.cpp
promag,2018-07-18T16:20:05Z,"Why give both options? `[{ ""desc"": ""..."", ...}, ...]` is enough?",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203443145,203443145,src/rpc/blockchain.cpp
promag,2018-07-18T16:20:57Z,Could have a test.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203443457,203443457,src/rpc/blockchain.cpp
promag,2018-07-18T16:21:01Z,Could have a test.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203443476,203443476,src/rpc/blockchain.cpp
promag,2018-07-18T16:31:47Z,Why not return `nullptr` in these cases?,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203446922,203446922,src/script/descriptor.cpp
promag,2018-07-18T16:32:36Z,"```\n#endif // BITCOIN_SCRIPT_DESCRIPTOR_H\n```",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203447244,203447244,src/script/descriptor.h
achow101,2018-07-18T19:11:07Z,Can the path writing be separated out into another function to avoid code duplication and so that we can use it elsewhere?,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203496728,203496728,src/script/descriptor.cpp
sipa,2018-07-18T19:26:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500757,203500757,src/script/sign.h
sipa,2018-07-18T19:26:21Z,I'd rather not. I think more things will be able to use this.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500825,203500825,src/script/sign.h
sipa,2018-07-18T19:26:28Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500850,203500850,src/script/descriptor.cpp
sipa,2018-07-18T19:26:35Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500890,203500890,src/script/descriptor.cpp
sipa,2018-07-18T19:26:47Z,"Done, here and elsewhere.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500938,203500938,src/script/descriptor.cpp
sipa,2018-07-18T19:26:53Z,Why?,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203500981,203500981,src/script/descriptor.cpp
sipa,2018-07-18T19:27:01Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203501008,203501008,src/script/descriptor.cpp
sipa,2018-07-18T19:27:27Z,"It's pretty verbose to use the long form, and probably not all that often needed.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203501110,203501110,src/rpc/blockchain.cpp
sipa,2018-07-18T19:27:46Z,"Yes, will add when there's sufficient agreement about RPC.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203501180,203501180,src/rpc/blockchain.cpp
sipa,2018-07-18T19:28:10Z,"Done,  here and elsewhere.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203501298,203501298,src/script/descriptor.cpp
sipa,2018-07-18T19:28:18Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203501337,203501337,src/script/descriptor.h
promag,2018-07-18T20:25:19Z,"The statement `ret.emplace_back(start, it);` below should not be executed if `sp` is empty.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203517259,203517259,src/script/descriptor.cpp
promag,2018-07-18T20:25:53Z,"I mean, should `Split("""", sep)` equal `[]`?",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203517440,203517440,src/script/descriptor.cpp
sipa,2018-07-18T20:30:05Z,"No, it should be `[""""]`. Callers can rely on there always being at least one argument in the result.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203518803,203518803,src/script/descriptor.cpp
promag,2018-07-18T20:35:48Z,In that case 👍 ,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203520519,203520519,src/script/descriptor.cpp
promag,2018-07-18T20:41:04Z,"> It's pretty verbose\n\nOn the client side I think it doesn't matter (unless it's a human making the call).",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203522024,203522024,src/rpc/blockchain.cpp
sipa,2018-07-18T22:33:41Z,"Yes, the reason to support the short notation is to simplify things for humans.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203551841,203551841,src/rpc/blockchain.cpp
sipa,2018-07-18T22:41:00Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r203553644,203553644,src/script/descriptor.cpp
Sjors,2018-07-21T18:01:04Z,"Don't forget to add a command-line example here, it look me a while to figure out the syntax from reading the above.\n\nI suggest an example with a typical BIP44 (legacy) xpub + BIP49 xpub:\n```\n[""pkh(legacy_xpub/0/*)"", ""pkh(legacy_xpub/1/*)"", ""sh(wpkh(segwit_xpub/0/*)"", ""sh(wpkh(segwit_xpub/1/*)""]\n```\n\nA second example could show the root master xpriv and then do hardened derivation of",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r204217254,204217254,src/rpc/blockchain.cpp
Sjors,2018-07-21T18:02:28Z,"`sh(wpkh())` is probably quite common, so maybe add that here?",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r204217288,204217288,src/rpc/blockchain.cpp
sipa,2018-07-21T20:02:08Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r204220348,204220348,src/rpc/blockchain.cpp
sipa,2018-07-21T20:02:15Z,Done.,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r204220350,204220350,src/rpc/blockchain.cpp
jonasschnelli,2018-07-27T09:13:18Z,"Seems like that results in an off-by-one issue (misses last key):\nSuggest pulling fix: https://github.com/bitcoin/bitcoin/commit/875431149745cc517350c0620baa887c748d0b35",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r205713656,205713656,src/rpc/blockchain.cpp
sipa,2018-07-27T18:02:39Z,"BIP32 indexes are 0-based, so I think the current code is correct. If you expand 1000 keys, those will be indices 0 through 999.",https://github.com/bitcoin/bitcoin/pull/13697#discussion_r205854812,205854812,src/rpc/blockchain.cpp
Sjors,2018-08-02T11:52:11Z,Maybe use `range: 1` and `range: 2` everywhere to speed up these tests?,https://github.com/bitcoin/bitcoin/pull/13697#discussion_r207197458,207197458,test/functional/rpc_scantxoutset.py
