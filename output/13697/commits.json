[
  {
    "sha": "29943a904a11607787d28b1f4288f500bd076dde",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTk0M2E5MDRhMTE2MDc3ODdkMjhiMWY0Mjg4ZjUwMGJkMDc2ZGRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-23T19:17:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:18Z"
      },
      "message": "Add more methods to Span class\n\nThis introduces a rudimentary begin(), end(), operator[], and subspan to Span.",
      "tree": {
        "sha": "39f940fedeec32af5661b7ed4b453d9bb4b96aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39f940fedeec32af5661b7ed4b453d9bb4b96aa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29943a904a11607787d28b1f4288f500bd076dde",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29943a904a11607787d28b1f4288f500bd076dde",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29943a904a11607787d28b1f4288f500bd076dde",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29943a904a11607787d28b1f4288f500bd076dde/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "365384fd9f3145e604167fcb0b7358f2c67b26f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/365384fd9f3145e604167fcb0b7358f2c67b26f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/365384fd9f3145e604167fcb0b7358f2c67b26f6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "77de059fa634001b0f65d373d295bed2302c6952",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29943a904a11607787d28b1f4288f500bd076dde/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29943a904a11607787d28b1f4288f500bd076dde/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=29943a904a11607787d28b1f4288f500bd076dde",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <type_traits>\n #include <cstddef>\n+#include <algorithm>\n \n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n@@ -21,9 +22,25 @@ class Span\n public:\n     constexpr Span() noexcept : m_data(nullptr), m_size(0) {}\n     constexpr Span(C* data, std::ptrdiff_t size) noexcept : m_data(data), m_size(size) {}\n+    constexpr Span(C* data, C* end) noexcept : m_data(data), m_size(end - data) {}\n \n     constexpr C* data() const noexcept { return m_data; }\n+    constexpr C* begin() const noexcept { return m_data; }\n+    constexpr C* end() const noexcept { return m_data + m_size; }\n     constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n+    constexpr C& operator[](std::ptrdiff_t pos) const noexcept { return m_data[pos]; }\n+\n+    constexpr Span<C> subspan(std::ptrdiff_t offset) const noexcept { return Span<C>(m_data + offset, m_size - offset); }\n+    constexpr Span<C> subspan(std::ptrdiff_t offset, std::ptrdiff_t count) const noexcept { return Span<C>(m_data + offset, count); }\n+    constexpr Span<C> first(std::ptrdiff_t count) const noexcept { return Span<C>(m_data, count); }\n+    constexpr Span<C> last(std::ptrdiff_t count) const noexcept { return Span<C>(m_data + m_size - count, count); }\n+\n+    friend constexpr bool operator==(const Span& a, const Span& b) noexcept { return a.size() == b.size() && std::equal(a.begin(), a.end(), b.begin()); }\n+    friend constexpr bool operator!=(const Span& a, const Span& b) noexcept { return !(a == b); }\n+    friend constexpr bool operator<(const Span& a, const Span& b) noexcept { return std::lexicographical_compare(a.begin(), a.end(), b.begin(), b.end()); }\n+    friend constexpr bool operator<=(const Span& a, const Span& b) noexcept { return !(b < a); }\n+    friend constexpr bool operator>(const Span& a, const Span& b) noexcept { return (b < a); }\n+    friend constexpr bool operator>=(const Span& a, const Span& b) noexcept { return !(a < b); }\n };\n \n /** Create a span to a container exposing data() and size().\n@@ -34,6 +51,9 @@ class Span\n  *\n  * std::span will have a constructor that implements this functionality directly.\n  */\n+template<typename A, int N>\n+constexpr Span<A> MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n+\n template<typename V>\n constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n "
      }
    ]
  },
  {
    "sha": "e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTRkNzYwNDRiM2EyYzYyNWU1M2YyMTE2YzVmNmE3YzQwMTA1ZDVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-12T22:03:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:18Z"
      },
      "message": "Add simple FlatSigningProvider",
      "tree": {
        "sha": "cc37fd50595bebfdbfd4383b356e37cd115a3381",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc37fd50595bebfdbfd4383b356e37cd115a3381"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54d76044b3a2c625e53f2116c5f6a7c40105d5d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29943a904a11607787d28b1f4288f500bd076dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29943a904a11607787d28b1f4288f500bd076dde",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29943a904a11607787d28b1f4288f500bd076dde"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 41,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fa09adbaf8843f4a8425c8a29128ff9540d1fae6",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54d76044b3a2c625e53f2116c5f6a7c40105d5d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54d76044b3a2c625e53f2116c5f6a7c40105d5d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
        "patch": "@@ -11,7 +11,6 @@\n #include <script/standard.h>\n #include <uint256.h>\n \n-\n typedef std::vector<unsigned char> valtype;\n \n MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n@@ -437,6 +436,18 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n         return true;\n     }\n };\n+\n+template<typename M, typename K, typename V>\n+bool LookupHelper(const M& map, const K& key, V& value)\n+{\n+    auto it = map.find(key);\n+    if (it != map.end()) {\n+        value = it->second;\n+        return true;\n+    }\n+    return false;\n+}\n+\n }\n \n const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator();\n@@ -460,7 +471,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-\n bool PartiallySignedTransaction::IsNull() const\n {\n     return !tx && inputs.empty() && outputs.empty() && unknown.empty();\n@@ -618,3 +628,19 @@ bool PublicOnlySigningProvider::GetPubKey(const CKeyID &address, CPubKey& pubkey\n {\n     return m_provider->GetPubKey(address, pubkey);\n }\n+\n+bool FlatSigningProvider::GetCScript(const CScriptID& scriptid, CScript& script) const { return LookupHelper(scripts, scriptid, script); }\n+bool FlatSigningProvider::GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const { return LookupHelper(pubkeys, keyid, pubkey); }\n+bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b)\n+{\n+    FlatSigningProvider ret;\n+    ret.scripts = a.scripts;\n+    ret.scripts.insert(b.scripts.begin(), b.scripts.end());\n+    ret.pubkeys = a.pubkeys;\n+    ret.pubkeys.insert(b.pubkeys.begin(), b.pubkeys.end());\n+    ret.keys = a.keys;\n+    ret.keys.insert(b.keys.begin(), b.keys.end());\n+    return ret;\n+}"
      },
      {
        "sha": "96ef59fbe863da17afb9d31f1b4fa3e58e87604d",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e54d76044b3a2c625e53f2116c5f6a7c40105d5d/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e54d76044b3a2c625e53f2116c5f6a7c40105d5d/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
        "patch": "@@ -43,6 +43,19 @@ class PublicOnlySigningProvider : public SigningProvider\n     bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const;\n };\n \n+struct FlatSigningProvider final : public SigningProvider\n+{\n+    std::map<CScriptID, CScript> scripts;\n+    std::map<CKeyID, CPubKey> pubkeys;\n+    std::map<CKeyID, CKey> keys;\n+\n+    bool GetCScript(const CScriptID& scriptid, CScript& script) const override;\n+    bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n+    bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+};\n+\n+FlatSigningProvider Merge(const FlatSigningProvider& a, const FlatSigningProvider& b);\n+\n /** Interface for signature creators. */\n class BaseSignatureCreator {\n public:"
      }
    ]
  },
  {
    "sha": "fe8a7dcd78cfeedc9a7c705e91384f793822912b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZThhN2RjZDc4Y2ZlZWRjOWE3YzcwNWU5MTM4NGY3OTM4MjI5MTJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-05T01:08:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "Output descriptors module",
      "tree": {
        "sha": "28171ebfe07e5bc5b732d2866e6c732ed2bb37b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28171ebfe07e5bc5b732d2866e6c732ed2bb37b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe8a7dcd78cfeedc9a7c705e91384f793822912b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8a7dcd78cfeedc9a7c705e91384f793822912b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe8a7dcd78cfeedc9a7c705e91384f793822912b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8a7dcd78cfeedc9a7c705e91384f793822912b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54d76044b3a2c625e53f2116c5f6a7c40105d5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54d76044b3a2c625e53f2116c5f6a7c40105d5d"
      }
    ],
    "stats": {
      "total": 669,
      "additions": 669,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d1693fa85ccabc1e9b2f8716c361b6089296f150",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fe8a7dcd78cfeedc9a7c705e91384f793822912b",
        "patch": "@@ -158,6 +158,7 @@ BITCOIN_CORE_H = \\\n   rpc/register.h \\\n   rpc/util.h \\\n   scheduler.h \\\n+  script/descriptor.h \\\n   script/ismine.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n@@ -387,6 +388,7 @@ libbitcoin_common_a_SOURCES = \\\n   policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n+  script/descriptor.cpp \\\n   script/ismine.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\"
      },
      {
        "sha": "bbeabab3728e5c3666d8346f9c4b38dbf7ee5f54",
        "filename": "src/script/descriptor.cpp",
        "status": "added",
        "additions": 566,
        "deletions": 0,
        "changes": 566,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=fe8a7dcd78cfeedc9a7c705e91384f793822912b",
        "patch": "@@ -0,0 +1,566 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/descriptor.h>\n+\n+#include <key_io.h>\n+#include <pubkey.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+\n+#include <span.h>\n+#include <util.h>\n+#include <utilstrencodings.h>\n+\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Internal representation                                                //\n+////////////////////////////////////////////////////////////////////////////\n+\n+typedef std::vector<uint32_t> KeyPath;\n+\n+std::string FormatKeyPath(const KeyPath& path)\n+{\n+    std::string ret;\n+    for (auto i : path) {\n+        ret += strprintf(\"/%i\", (i << 1) >> 1);\n+        if (i >> 31) ret += '\\'';\n+    }\n+    return ret;\n+}\n+\n+/** Interface for public key objects in descriptors. */\n+struct PubkeyProvider\n+{\n+    virtual ~PubkeyProvider() = default;\n+\n+    /** Derive a public key. */\n+    virtual bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const = 0;\n+\n+    /** Whether this represent multiple public keys at different positions. */\n+    virtual bool IsRange() const = 0;\n+\n+    /** Get the size of the generated public key(s) in bytes (33 or 65). */\n+    virtual size_t GetSize() const = 0;\n+\n+    /** Get the descriptor string form. */\n+    virtual std::string ToString() const = 0;\n+\n+    /** Get the descriptor string form including private data (if available in arg). */\n+    virtual bool ToPrivateString(const SigningProvider& arg, std::string& out) const = 0;\n+};\n+\n+/** An object representing a parsed constant public key in a descriptor. */\n+class ConstPubkeyProvider final : public PubkeyProvider\n+{\n+    CPubKey m_pubkey;\n+\n+public:\n+    ConstPubkeyProvider(const CPubKey& pubkey) : m_pubkey(pubkey) {}\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const override\n+    {\n+        out = m_pubkey;\n+        return true;\n+    }\n+    bool IsRange() const override { return false; }\n+    size_t GetSize() const override { return m_pubkey.size(); }\n+    std::string ToString() const override { return HexStr(m_pubkey.begin(), m_pubkey.end()); }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& ret) const override\n+    {\n+        CKey key;\n+        if (!arg.GetKey(m_pubkey.GetID(), key)) return false;\n+        ret = EncodeSecret(key);\n+        return true;\n+    }\n+};\n+\n+enum class DeriveType {\n+    NO,\n+    UNHARDENED,\n+    HARDENED,\n+};\n+\n+/** An object representing a parsed extended public key in a descriptor. */\n+class BIP32PubkeyProvider final : public PubkeyProvider\n+{\n+    CExtPubKey m_extkey;\n+    KeyPath m_path;\n+    DeriveType m_derive;\n+\n+    bool GetExtKey(const SigningProvider& arg, CExtKey& ret) const\n+    {\n+        CKey key;\n+        if (!arg.GetKey(m_extkey.pubkey.GetID(), key)) return false;\n+        ret.nDepth = m_extkey.nDepth;\n+        std::copy(m_extkey.vchFingerprint, m_extkey.vchFingerprint + 4, ret.vchFingerprint);\n+        ret.nChild = m_extkey.nChild;\n+        ret.chaincode = m_extkey.chaincode;\n+        ret.key = key;\n+        return true;\n+    }\n+\n+    bool IsHardened() const\n+    {\n+        if (m_derive == DeriveType::HARDENED) return true;\n+        for (auto entry : m_path) {\n+            if (entry >> 31) return true;\n+        }\n+        return false;\n+    }\n+\n+public:\n+    BIP32PubkeyProvider(const CExtPubKey& extkey, KeyPath path, DeriveType derive) : m_extkey(extkey), m_path(std::move(path)), m_derive(derive) {}\n+    bool IsRange() const override { return m_derive != DeriveType::NO; }\n+    size_t GetSize() const override { return 33; }\n+    bool GetPubKey(int pos, const SigningProvider& arg, CPubKey& out) const override\n+    {\n+        if (IsHardened()) {\n+            CExtKey key;\n+            if (!GetExtKey(arg, key)) return false;\n+            for (auto entry : m_path) {\n+                key.Derive(key, entry);\n+            }\n+            if (m_derive == DeriveType::UNHARDENED) key.Derive(key, pos);\n+            if (m_derive == DeriveType::HARDENED) key.Derive(key, pos | 0x80000000UL);\n+            out = key.Neuter().pubkey;\n+        } else {\n+            // TODO: optimize by caching\n+            CExtPubKey key = m_extkey;\n+            for (auto entry : m_path) {\n+                key.Derive(key, entry);\n+            }\n+            if (m_derive == DeriveType::UNHARDENED) key.Derive(key, pos);\n+            assert(m_derive != DeriveType::HARDENED);\n+            out = key.pubkey;\n+        }\n+        return true;\n+    }\n+    std::string ToString() const override\n+    {\n+        std::string ret = EncodeExtPubKey(m_extkey) + FormatKeyPath(m_path);\n+        if (IsRange()) {\n+            ret += \"/*\";\n+            if (m_derive == DeriveType::HARDENED) ret += '\\'';\n+        }\n+        return ret;\n+    }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        CExtKey key;\n+        if (!GetExtKey(arg, key)) return false;\n+        out = EncodeExtKey(key) + FormatKeyPath(m_path);\n+        if (IsRange()) {\n+            out += \"/*\";\n+            if (m_derive == DeriveType::HARDENED) out += '\\'';\n+        }\n+        return true;\n+    }\n+};\n+\n+/** A parsed addr(A) descriptor. */\n+class AddressDescriptor final : public Descriptor\n+{\n+    CTxDestination m_destination;\n+\n+public:\n+    AddressDescriptor(CTxDestination destination) : m_destination(std::move(destination)) {}\n+\n+    bool IsRange() const override { return false; }\n+    std::string ToString() const override { return \"addr(\" + EncodeDestination(m_destination) + \")\"; }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override { out = ToString(); return true; }\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        output_scripts = std::vector<CScript>{GetScriptForDestination(m_destination)};\n+        return true;\n+    }\n+};\n+\n+/** A parsed raw(H) descriptor. */\n+class RawDescriptor final : public Descriptor\n+{\n+    CScript m_script;\n+\n+public:\n+    RawDescriptor(CScript script) : m_script(std::move(script)) {}\n+\n+    bool IsRange() const override { return false; }\n+    std::string ToString() const override { return \"raw(\" + HexStr(m_script.begin(), m_script.end()) + \")\"; }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override { out = ToString(); return true; }\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        output_scripts = std::vector<CScript>{m_script};\n+        return true;\n+    }\n+};\n+\n+/** A parsed pk(P), pkh(P), or wpkh(P) descriptor. */\n+class SingleKeyDescriptor final : public Descriptor\n+{\n+    const std::function<CScript(const CPubKey&)> m_script_fn;\n+    const std::string m_fn_name;\n+    std::unique_ptr<PubkeyProvider> m_provider;\n+\n+public:\n+    SingleKeyDescriptor(std::unique_ptr<PubkeyProvider> prov, const std::function<CScript(const CPubKey&)>& fn, const std::string& name) : m_script_fn(fn), m_fn_name(name), m_provider(std::move(prov)) {}\n+\n+    bool IsRange() const override { return m_provider->IsRange(); }\n+    std::string ToString() const override { return m_fn_name + \"(\" + m_provider->ToString() + \")\"; }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        std::string ret;\n+        if (!m_provider->ToPrivateString(arg, ret)) return false;\n+        out = m_fn_name + \"(\" + std::move(ret) + \")\";\n+        return true;\n+    }\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        CPubKey key;\n+        if (!m_provider->GetPubKey(pos, arg, key)) return false;\n+        output_scripts = std::vector<CScript>{m_script_fn(key)};\n+        out.pubkeys.emplace(key.GetID(), std::move(key));\n+        return true;\n+    }\n+};\n+\n+CScript P2PKHGetScript(const CPubKey& pubkey) { return GetScriptForDestination(pubkey.GetID()); }\n+CScript P2PKGetScript(const CPubKey& pubkey) { return GetScriptForRawPubKey(pubkey); }\n+CScript P2WPKHGetScript(const CPubKey& pubkey) { return GetScriptForDestination(WitnessV0KeyHash(pubkey.GetID())); }\n+\n+/** A parsed multi(...) descriptor. */\n+class MultisigDescriptor : public Descriptor\n+{\n+    int m_threshold;\n+    std::vector<std::unique_ptr<PubkeyProvider>> m_providers;\n+\n+public:\n+    MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers) : m_threshold(threshold), m_providers(std::move(providers)) {}\n+\n+    bool IsRange() const override\n+    {\n+        for (const auto& p : m_providers) {\n+            if (p->IsRange()) return true;\n+        }\n+        return false;\n+    }\n+\n+    std::string ToString() const override\n+    {\n+        std::string ret = strprintf(\"multi(%i\", m_threshold);\n+        for (const auto& p : m_providers) {\n+            ret += \",\" + p->ToString();\n+        }\n+        return std::move(ret) + \")\";\n+    }\n+\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        std::string ret = strprintf(\"multi(%i\", m_threshold);\n+        for (const auto& p : m_providers) {\n+            std::string sub;\n+            if (!p->ToPrivateString(arg, sub)) return false;\n+            ret += \",\" + std::move(sub);\n+        }\n+        out = std::move(ret) + \")\";\n+        return true;\n+    }\n+\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        std::vector<CPubKey> pubkeys;\n+        pubkeys.reserve(m_providers.size());\n+        for (const auto& p : m_providers) {\n+            CPubKey key;\n+            if (!p->GetPubKey(pos, arg, key)) return false;\n+            pubkeys.push_back(key);\n+        }\n+        for (const CPubKey& key : pubkeys) {\n+            out.pubkeys.emplace(key.GetID(), std::move(key));\n+        }\n+        output_scripts = std::vector<CScript>{GetScriptForMultisig(m_threshold, pubkeys)};\n+        return true;\n+    }\n+};\n+\n+/** A parsed sh(S) or wsh(S) descriptor. */\n+class ConvertorDescriptor : public Descriptor\n+{\n+    const std::function<CScript(const CScript&)> m_convert_fn;\n+    const std::string m_fn_name;\n+    std::unique_ptr<Descriptor> m_descriptor;\n+\n+public:\n+    ConvertorDescriptor(std::unique_ptr<Descriptor> descriptor, const std::function<CScript(const CScript&)>& fn, const std::string& name) : m_convert_fn(fn), m_fn_name(name), m_descriptor(std::move(descriptor)) {}\n+\n+    bool IsRange() const override { return m_descriptor->IsRange(); }\n+    std::string ToString() const override { return m_fn_name + \"(\" + m_descriptor->ToString() + \")\"; }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        std::string ret;\n+        if (!m_descriptor->ToPrivateString(arg, ret)) return false;\n+        out = m_fn_name + \"(\" + std::move(ret) + \")\";\n+        return true;\n+    }\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        std::vector<CScript> sub;\n+        if (!m_descriptor->Expand(pos, arg, sub, out)) return false;\n+        output_scripts.clear();\n+        for (const auto& script : sub) {\n+            CScriptID id(script);\n+            out.scripts.emplace(CScriptID(script), script);\n+            output_scripts.push_back(m_convert_fn(script));\n+        }\n+        return true;\n+    }\n+};\n+\n+CScript ConvertP2SH(const CScript& script) { return GetScriptForDestination(CScriptID(script)); }\n+CScript ConvertP2WSH(const CScript& script) { return GetScriptForDestination(WitnessV0ScriptHash(script)); }\n+\n+/** A parsed combo(P) descriptor. */\n+class ComboDescriptor final : public Descriptor\n+{\n+    std::unique_ptr<PubkeyProvider> m_provider;\n+\n+public:\n+    ComboDescriptor(std::unique_ptr<PubkeyProvider> provider) : m_provider(std::move(provider)) {}\n+\n+    bool IsRange() const override { return m_provider->IsRange(); }\n+    std::string ToString() const override { return \"combo(\" + m_provider->ToString() + \")\"; }\n+    bool ToPrivateString(const SigningProvider& arg, std::string& out) const override\n+    {\n+        std::string ret;\n+        if (!m_provider->ToPrivateString(arg, ret)) return false;\n+        out = \"combo(\" + std::move(ret) + \")\";\n+        return true;\n+    }\n+    bool Expand(int pos, const SigningProvider& arg, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const override\n+    {\n+        CPubKey key;\n+        if (!m_provider->GetPubKey(pos, arg, key)) return false;\n+        CKeyID keyid = key.GetID();\n+        {\n+            CScript p2pk = GetScriptForRawPubKey(key);\n+            CScript p2pkh = GetScriptForDestination(keyid);\n+            output_scripts = std::vector<CScript>{std::move(p2pk), std::move(p2pkh)};\n+            out.pubkeys.emplace(keyid, key);\n+        }\n+        if (key.IsCompressed()) {\n+            CScript p2wpkh = GetScriptForDestination(WitnessV0KeyHash(keyid));\n+            CScriptID p2wpkh_id(p2wpkh);\n+            CScript p2sh_p2wpkh = GetScriptForDestination(p2wpkh_id);\n+            out.scripts.emplace(p2wpkh_id, p2wpkh);\n+            output_scripts.push_back(std::move(p2wpkh));\n+            output_scripts.push_back(std::move(p2sh_p2wpkh));\n+        }\n+        return true;\n+    }\n+};\n+\n+////////////////////////////////////////////////////////////////////////////\n+// Parser                                                                 //\n+////////////////////////////////////////////////////////////////////////////\n+\n+enum class ParseScriptContext {\n+    TOP,\n+    P2SH,\n+    P2WSH,\n+};\n+\n+/** Parse a constant. If succesful, sp is updated to skip the constant and return true. */\n+bool Const(const std::string& str, Span<const char>& sp)\n+{\n+    if ((size_t)sp.size() >= str.size() && std::equal(str.begin(), str.end(), sp.begin())) {\n+        sp = sp.subspan(str.size());\n+        return true;\n+    }\n+    return false;\n+}\n+\n+/** Parse a function call. If succesful, sp is updated to be the function's argument(s). */\n+bool Func(const std::string& str, Span<const char>& sp)\n+{\n+    if ((size_t)sp.size() >= str.size() + 2 && sp[str.size()] == '(' && sp[sp.size() - 1] == ')' && std::equal(str.begin(), str.end(), sp.begin())) {\n+        sp = sp.subspan(str.size() + 1, sp.size() - str.size() - 2);\n+        return true;\n+    }\n+    return false;\n+}\n+\n+/** Return the expression that sp begins with, and update sp to skip it. */\n+Span<const char> Expr(Span<const char>& sp)\n+{\n+    int level = 0;\n+    auto it = sp.begin();\n+    while (it != sp.end()) {\n+        if (*it == '(') {\n+            ++level;\n+        } else if (level && *it == ')') {\n+            --level;\n+        } else if (level == 0 && (*it == ')' || *it == ',')) {\n+            break;\n+        }\n+        ++it;\n+    }\n+    Span<const char> ret = sp.first(it - sp.begin());\n+    sp = sp.subspan(it - sp.begin());\n+    return ret;\n+}\n+\n+/** Split a string on every instance of sep, returning a vector. */\n+std::vector<Span<const char>> Split(const Span<const char>& sp, char sep)\n+{\n+    std::vector<Span<const char>> ret;\n+    auto it = sp.begin();\n+    auto start = it;\n+    while (it != sp.end()) {\n+        if (*it == sep) {\n+            ret.emplace_back(start, it);\n+            start = it + 1;\n+        }\n+        ++it;\n+    }\n+    ret.emplace_back(start, it);\n+    return ret;\n+}\n+\n+/** Parse a key path, being passed a split list of elements (the first element is ignored). */\n+bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n+{\n+    for (size_t i = 1; i < split.size(); ++i) {\n+        Span<const char> elem = split[i];\n+        bool hardened = false;\n+        if (elem.size() > 0 && elem[elem.size() - 1] == '\\'') {\n+            elem = elem.first(elem.size() - 1);\n+            hardened = true;\n+        }\n+        uint32_t p;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        out.push_back(p | (((uint32_t)hardened) << 31));\n+    }\n+    return true;\n+}\n+\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+{\n+    auto split = Split(sp, '/');\n+    std::string str(split[0].begin(), split[0].end());\n+    if (split.size() == 1) {\n+        if (IsHex(str)) {\n+            std::vector<unsigned char> data = ParseHex(str);\n+            CPubKey pubkey(data);\n+            if (pubkey.IsFullyValid() && (permit_uncompressed || pubkey.IsCompressed())) return MakeUnique<ConstPubkeyProvider>(pubkey);\n+        }\n+        CKey key = DecodeSecret(str);\n+        if (key.IsValid() && (permit_uncompressed || key.IsCompressed())) {\n+            CPubKey pubkey = key.GetPubKey();\n+            out.keys.emplace(pubkey.GetID(), key);\n+            return MakeUnique<ConstPubkeyProvider>(pubkey);\n+        }\n+    }\n+    CExtKey extkey = DecodeExtKey(str);\n+    CExtPubKey extpubkey = DecodeExtPubKey(str);\n+    if (!extkey.key.IsValid() && !extpubkey.pubkey.IsValid()) return nullptr;\n+    KeyPath path;\n+    DeriveType type = DeriveType::NO;\n+    if (split.back() == MakeSpan(\"*\").first(1)) {\n+        split.pop_back();\n+        type = DeriveType::UNHARDENED;\n+    } else if (split.back() == MakeSpan(\"*'\").first(2)) {\n+        split.pop_back();\n+        type = DeriveType::HARDENED;\n+    }\n+    if (!ParseKeyPath(split, path)) return nullptr;\n+    if (extkey.key.IsValid()) {\n+        extpubkey = extkey.Neuter();\n+        out.keys.emplace(extpubkey.pubkey.GetID(), extkey.key);\n+    }\n+    return MakeUnique<BIP32PubkeyProvider>(extpubkey, std::move(path), type);\n+}\n+\n+/** Parse a script in a particular context. */\n+std::unique_ptr<Descriptor> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+{\n+    auto expr = Expr(sp);\n+    if (Func(\"pk\", expr)) {\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        if (!pubkey) return nullptr;\n+        return MakeUnique<SingleKeyDescriptor>(std::move(pubkey), P2PKGetScript, \"pk\");\n+    }\n+    if (Func(\"pkh\", expr)) {\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        if (!pubkey) return nullptr;\n+        return MakeUnique<SingleKeyDescriptor>(std::move(pubkey), P2PKHGetScript, \"pkh\");\n+    }\n+    if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        auto pubkey = ParsePubkey(expr, true, out);\n+        if (!pubkey) return nullptr;\n+        return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    }\n+    if (Func(\"multi\", expr)) {\n+        auto threshold = Expr(expr);\n+        uint32_t thres;\n+        std::vector<std::unique_ptr<PubkeyProvider>> providers;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        size_t script_size = 0;\n+        while (expr.size()) {\n+            if (!Const(\",\", expr)) return nullptr;\n+            auto arg = Expr(expr);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            if (!pk) return nullptr;\n+            script_size += pk->GetSize() + 1;\n+            providers.emplace_back(std::move(pk));\n+        }\n+        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (ctx == ParseScriptContext::TOP) {\n+            if (providers.size() > 3) return nullptr; // Not more than 3 pubkeys for raw multisig\n+        }\n+        if (ctx == ParseScriptContext::P2SH) {\n+            if (script_size + 3 > 520) return nullptr; // Enforce P2SH script size limit\n+        }\n+        return MakeUnique<MultisigDescriptor>(thres, std::move(providers));\n+    }\n+    if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n+        auto pubkey = ParsePubkey(expr, false, out);\n+        if (!pubkey) return nullptr;\n+        return MakeUnique<SingleKeyDescriptor>(std::move(pubkey), P2WPKHGetScript, \"wpkh\");\n+    }\n+    if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n+        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out);\n+        if (!desc || expr.size()) return nullptr;\n+        return MakeUnique<ConvertorDescriptor>(std::move(desc), ConvertP2SH, \"sh\");\n+    }\n+    if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n+        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out);\n+        if (!desc || expr.size()) return nullptr;\n+        return MakeUnique<ConvertorDescriptor>(std::move(desc), ConvertP2WSH, \"wsh\");\n+    }\n+    if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n+        CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n+        if (!IsValidDestination(dest)) return nullptr;\n+        return MakeUnique<AddressDescriptor>(std::move(dest));\n+    }\n+    if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n+        std::string str(expr.begin(), expr.end());\n+        if (!IsHex(str)) return nullptr;\n+        auto bytes = ParseHex(str);\n+        return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n+    }\n+    return nullptr;\n+}\n+\n+} // namespace\n+\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out)\n+{\n+    Span<const char> sp(descriptor.data(), descriptor.size());\n+    auto ret = ParseScript(sp, ParseScriptContext::TOP, out);\n+    if (sp.size() == 0 && ret) return ret;\n+    return nullptr;\n+}"
      },
      {
        "sha": "d7c7ccbfb6647286e381ba6d89311bc86b5d0515",
        "filename": "src/script/descriptor.h",
        "status": "added",
        "additions": 101,
        "deletions": 0,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe8a7dcd78cfeedc9a7c705e91384f793822912b/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=fe8a7dcd78cfeedc9a7c705e91384f793822912b",
        "patch": "@@ -0,0 +1,101 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_DESCRIPTOR_H\n+#define BITCOIN_SCRIPT_DESCRIPTOR_H\n+\n+#include <script/script.h>\n+#include <script/sign.h>\n+\n+#include <vector>\n+\n+// Descriptors are strings that describe a set of scriptPubKeys, together with\n+// all information necessary to solve them. By combining all information into\n+// one, they avoid the need to separately import keys and scripts.\n+//\n+// Descriptors may be ranged, which occurs when the public keys inside are\n+// specified in the form of HD chains (xpubs).\n+//\n+// Descriptors always represent public information - public keys and scripts -\n+// but in cases where private keys need to be conveyed along with a descriptor,\n+// they can be included inside by changing public keys to private keys (WIF\n+// format), and changing xpubs by xprvs.\n+//\n+// 1. Examples\n+//\n+// A P2PK descriptor with a fixed public key:\n+// - pk(0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798)\n+//\n+// A P2SH-P2WSH-P2PKH descriptor with a fixed public key:\n+// - sh(wsh(pkh(02e493dbf1c10d80f3581e4904930b1404cc6c13900ee0758474fa94abe8c4cd13)))\n+//\n+// A bare 1-of-2 multisig descriptor:\n+// - multi(1,022f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4,025cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc)\n+//\n+// A chain of P2PKH outputs (this needs the corresponding private key to derive):\n+// - pkh(xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/1'/2/*)\n+//\n+// 2. Grammar description:\n+//\n+// X: xpub or xprv encoded extended key\n+// I: decimal encoded integer\n+// H: Hex encoded byte array\n+// A: Address in P2PKH, P2SH, or Bech32 encoding\n+//\n+// S (Scripts):\n+// * pk(P): Pay-to-pubkey (P2PK) output for public key P.\n+// * pkh(P): Pay-to-pubkey-hash (P2PKH) output for public key P.\n+// * wpkh(P): Pay-to-witness-pubkey-hash (P2WPKH) output for public key P.\n+// * sh(S): Pay-to-script-hash (P2SH) output for script S\n+// * wsh(S): Pay-to-witness-script-hash (P2WSH) output for script S\n+// * combo(P): combination of P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH for public key P.\n+// * multi(I,L): k-of-n multisig for given public keys\n+// * addr(A): Output to address\n+// * raw(H): scriptPubKey with raw bytes\n+//\n+// P (Public keys):\n+// * H: fixed public key (or WIF-encoded private key)\n+// * E: extended public key\n+// * E/*: (ranged) all unhardened direct children of an extended public key\n+// * E/*': (ranged) all hardened direct children of an extended public key\n+//\n+// L (Comma-separated lists of public keys):\n+// * P\n+// * L,P\n+//\n+// E (Extended public keys):\n+// * X\n+// * E/I: unhardened child\n+// * E/I': hardened child\n+//\n+// The top level is S.\n+\n+/** Interface for parsed descriptor objects. */\n+struct Descriptor {\n+    virtual ~Descriptor() = default;\n+\n+    /** Whether the expansion of this descriptor depends on the position. */\n+    virtual bool IsRange() const = 0;\n+\n+    /** Convert the descriptor back to a string, undoing parsing. */\n+    virtual std::string ToString() const = 0;\n+\n+    /** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */\n+    virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n+\n+    /** Expand a descriptor at a specified position.\n+     *\n+     * pos: the position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * provider: the provider to query for private keys in case of hardened derivation.\n+     * output_script: the expanded scriptPubKeys will be put here.\n+     * out: scripts and public keys necessary for solving the expanded scriptPubKeys will be put here (may be equal to provider).\n+     */\n+    virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n+};\n+\n+/** Parse a descriptor string. Included private keys are put in out. Returns nullptr if parsing fails. */\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out);\n+\n+#endif // BITCOIN_SCRIPT_DESCRIPTOR_H\n+"
      }
    ]
  },
  {
    "sha": "0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjUyYzMyODRmZTEyOTQxYjI4NjI0ZGJiZjVlMDg2MmM1ZDBkYmMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-16T02:32:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "Descriptor tests",
      "tree": {
        "sha": "888043f899172c9cc70fc9adc77e4e033b88e4a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/888043f899172c9cc70fc9adc77e4e033b88e4a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0652c3284fe12941b28624dbbf5e0862c5d0dbc3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe8a7dcd78cfeedc9a7c705e91384f793822912b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe8a7dcd78cfeedc9a7c705e91384f793822912b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe8a7dcd78cfeedc9a7c705e91384f793822912b"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f401636f525ff7bb4e67a2d6f38230b6721ce17",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0652c3284fe12941b28624dbbf5e0862c5d0dbc3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0652c3284fe12941b28624dbbf5e0862c5d0dbc3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
        "patch": "@@ -47,6 +47,7 @@ BITCOIN_TESTS =\\\n   test/crypto_tests.cpp \\\n   test/cuckoocache_tests.cpp \\\n   test/denialofservice_tests.cpp \\\n+  test/descriptor_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n   test/key_io_tests.cpp \\"
      },
      {
        "sha": "6d0492e050e8cc4b68305c24a7e50ab7f5702f25",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "added",
        "additions": 148,
        "deletions": 0,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0652c3284fe12941b28624dbbf5e0862c5d0dbc3/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0652c3284fe12941b28624dbbf5e0862c5d0dbc3/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
        "patch": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <vector>\n+#include <string>\n+#include <script/sign.h>\n+#include <script/standard.h>\n+#include <test/test_bitcoin.h>\n+#include <boost/test/unit_test.hpp>\n+#include <script/descriptor.h>\n+#include <utilstrencodings.h>\n+\n+namespace {\n+\n+void CheckUnparsable(const std::string& prv, const std::string& pub)\n+{\n+    FlatSigningProvider keys_priv, keys_pub;\n+    auto parse_priv = Parse(prv, keys_priv);\n+    auto parse_pub = Parse(pub, keys_pub);\n+    BOOST_CHECK(!parse_priv);\n+    BOOST_CHECK(!parse_pub);\n+}\n+\n+constexpr int DEFAULT = 0;\n+constexpr int RANGE = 1; // Expected to be ranged descriptor\n+constexpr int HARDENED = 2; // Derivation needs access to private keys\n+constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n+constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n+\n+void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts)\n+{\n+    FlatSigningProvider keys_priv, keys_pub;\n+\n+    // Check that parsing succeeds.\n+    auto parse_priv = Parse(prv, keys_priv);\n+    auto parse_pub = Parse(pub, keys_pub);\n+    BOOST_CHECK(parse_priv);\n+    BOOST_CHECK(parse_pub);\n+\n+    // Check private keys are extracted from the private version but not the public one.\n+    BOOST_CHECK(keys_priv.keys.size());\n+    BOOST_CHECK(!keys_pub.keys.size());\n+\n+    // Check that both versions serialize back to the public version.\n+    std::string pub1 = parse_priv->ToString();\n+    std::string pub2 = parse_priv->ToString();\n+    BOOST_CHECK_EQUAL(pub, pub1);\n+    BOOST_CHECK_EQUAL(pub, pub2);\n+\n+    // Check that both can be serialized with private key back to the private version, but not without private key.\n+    std::string prv1, prv2;\n+    BOOST_CHECK(parse_priv->ToPrivateString(keys_priv, prv1));\n+    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(!parse_priv->ToPrivateString(keys_pub, prv1));\n+    BOOST_CHECK(parse_pub->ToPrivateString(keys_priv, prv1));\n+    BOOST_CHECK_EQUAL(prv, prv1);\n+    BOOST_CHECK(!parse_pub->ToPrivateString(keys_pub, prv1));\n+\n+    // Check whether IsRange on both returns the expected result\n+    BOOST_CHECK_EQUAL(parse_pub->IsRange(), (flags & RANGE) != 0);\n+    BOOST_CHECK_EQUAL(parse_priv->IsRange(), (flags & RANGE) != 0);\n+\n+\n+    // Is not ranged descriptor, only a single result is expected.\n+    if (!(flags & RANGE)) assert(scripts.size() == 1);\n+\n+    size_t max = (flags & RANGE) ? scripts.size() : 3;\n+    for (size_t i = 0; i < max; ++i) {\n+        const auto& ref = scripts[(flags & RANGE) ? i : 0];\n+        for (int t = 0; t < 2; ++t) {\n+            FlatSigningProvider key_provider = (flags & HARDENED) ? keys_priv : keys_pub;\n+            FlatSigningProvider script_provider;\n+            std::vector<CScript> spks;\n+            BOOST_CHECK((t ? parse_priv : parse_pub)->Expand(i, key_provider, spks, script_provider));\n+            BOOST_CHECK_EQUAL(spks.size(), ref.size());\n+            for (size_t n = 0; n < spks.size(); ++n) {\n+                BOOST_CHECK_EQUAL(ref[n], HexStr(spks[n].begin(), spks[n].end()));\n+                BOOST_CHECK_EQUAL(IsSolvable(Merge(key_provider, script_provider), spks[n]), (flags & UNSOLVABLE) == 0);\n+\n+                if (flags & SIGNABLE) {\n+                    CMutableTransaction spend;\n+                    spend.vin.resize(1);\n+                    spend.vout.resize(1);\n+                    BOOST_CHECK_MESSAGE(SignSignature(Merge(keys_priv, script_provider), spks[n], spend, 0, 1, SIGHASH_ALL), prv);\n+                }\n+            }\n+\n+        }\n+    }\n+}\n+\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(descriptor_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(descriptor_test)\n+{\n+    // Basic single-key compressed\n+    Check(\"combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\",\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\",\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\",\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+    Check(\"pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"2103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bdac\"}});\n+    Check(\"pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"76a9149a1c78a507689f6f54b847ad1cef1e614ee23f1e88ac\"}});\n+    Check(\"wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\", SIGNABLE, {{\"00149a1c78a507689f6f54b847ad1cef1e614ee23f1e\"}});\n+    Check(\"sh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a91484ab21b1b2fd065d4504ff693d832434b6108d7b87\"}});\n+\n+    // Basic single-key uncompressed\n+    Check(\"combo(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"combo(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\",\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n+    Check(\"pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235ac\"}});\n+    Check(\"pkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"pkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"76a914b5bd079c4d57cc7fc28ecf8213a6b791625b818388ac\"}});\n+    CheckUnparsable(\"wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\"); // No uncompressed keys in witness\n+    CheckUnparsable(\"wsh(pk(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"wsh(pk(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n+    CheckUnparsable(\"sh(wpkh(5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss))\", \"sh(wpkh(04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235))\"); // No uncompressed keys in witness\n+\n+    // Some unconventional single-key constructions\n+    Check(\"sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141857af51a5e516552b3086430fd8ce55f7c1a52487\"}});\n+    Check(\"sh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"a9141a31ad23bf49c247dd531a623c2ef57da3c400c587\"}});\n+    Check(\"wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"00202e271faa2325c199d25d22e1ead982e45b64eeb4f31e73dbdf41bd4b5fec23fa\"}});\n+    Check(\"wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\", SIGNABLE, {{\"0020338e023079b91c58571b20e602d7805fb808c22473cbc391a41b1bd3a192e75b\"}});\n+    Check(\"sh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a91472d0c5a3bfad8c3e7bd5303a72b94240e80b6f1787\"}});\n+    Check(\"sh(wsh(pkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(wsh(pkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\", SIGNABLE, {{\"a914b61b92e2ca21bac1e72a3ab859a742982bea960a87\"}});\n+\n+    // Versions with BIP32 derivations\n+    Check(\"combo(xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc)\", \"combo(xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL)\", SIGNABLE, {{\"2102d2b36900396c9282fa14628566582f206a5dd0bcc8d5e892611806cafb0301f0ac\",\"76a91431a507b815593dfc51ffc7245ae7e5aee304246e88ac\",\"001431a507b815593dfc51ffc7245ae7e5aee304246e\",\"a9142aafb926eb247cb18240a7f4c07983ad1f37922687\"}});\n+    Check(\"pk(xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0)\", \"pk(xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0)\", DEFAULT, {{\"210379e45b3cf75f9c5f9befd8e9506fb962f6a9d185ac87001ec44a8d3df8d4a9e3ac\"}});\n+    Check(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0)\", HARDENED, {{\"76a914ebdc90806a9c4356c1c88e42216611e1cb4c1c1788ac\"}});\n+    Check(\"wpkh(xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*)\", \"wpkh(xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*)\", RANGE, {{\"0014326b2249e3a25d5dc60935f044ee835d090ba859\"},{\"0014af0bd98abc2f2cae66e36896a39ffe2d32984fb7\"},{\"00141fa798efd1cbf95cebf912c031b8a4a6e9fb9f27\"}});\n+    Check(\"sh(wpkh(xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"sh(wpkh(xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", RANGE | HARDENED, {{\"a9149a4d9901d6af519b2a23d4a2f51650fcba87ce7b87\"},{\"a914bed59fc0024fae941d6e20a3b44a109ae740129287\"},{\"a9148483aa1116eb9c05c482a72bada4b1db24af654387\"}});\n+    Check(\"combo(xprvA2JDeKCSNNZky6uBCviVfJSKyQ1mDYahRjijr5idH2WwLsEd4Hsb2Tyh8RfQMuPh7f7RtyzTtdrbdqqsunu5Mm3wDvUAKRHSC34sJ7in334/*)\", \"combo(xpub6FHa3pjLCk84BayeJxFW2SP4XRrFd1JYnxeLeU8EqN3vDfZmbqBqaGJAyiLjTAwm6ZLRQUMv1ZACTj37sR62cfN7fe5JnJ7dh8zL4fiyLHV/*)\", RANGE, {{\"2102df12b7035bdac8e3bab862a3a83d06ea6b17b6753d52edecba9be46f5d09e076ac\",\"76a914f90e3178ca25f2c808dc76624032d352fdbdfaf288ac\",\"0014f90e3178ca25f2c808dc76624032d352fdbdfaf2\",\"a91408f3ea8c68d4a7585bf9e8bda226723f70e445f087\"},{\"21032869a233c9adff9a994e4966e5b821fd5bac066da6c3112488dc52383b4a98ecac\",\"76a914a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b788ac\",\"0014a8409d1b6dfb1ed2a3e8aa5e0ef2ff26b15b75b7\",\"a91473e39884cb71ae4e5ac9739e9225026c99763e6687\"}});\n+    CheckUnparsable(\"pkh(xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483648)\", \"pkh(xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483648)\"); // BIP 32 path element overflow\n+\n+    // Multisig constructions\n+    Check(\"multi(1,L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1,5KYZdUEo39z3FPrtuX2QbbwGnNP5zTd7yyr2SC1j299sBCnWjss)\", \"multi(1,03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd,04a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea235)\", SIGNABLE, {{\"512103a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd4104a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd5b8dec5235a0fa8722476c7709c02559e3aa73aa03918ba2d492eea75abea23552ae\"}});\n+    Check(\"sh(multi(2,xprvA1RpRA33e1JQ7ifknakTFpgNXPmW2YvmhqLQYMmrj4xJXXWYpDPS3xz7iAxn8L39njGVyuoseXzU6rcxFLJ8HFsTjSyQbLYnMpCqE2VbFWc,xprv9uPDJpEQgRQfDcW7BkF7eTya6RPxXeJCqCJGHuCJ4GiRVLzkTXBAJMu2qaMWPrS7AANYqdq6vcBcBUdJCVVFceUvJFjaPdGZ2y9WACViL4L/0))\", \"sh(multi(2,xpub6ERApfZwUNrhLCkDtcHTcxd75RbzS1ed54G1LkBUHQVHQKqhMkhgbmJbZRkrgZw4koxb5JaHWkY4ALHY2grBGRjaDMzQLcgJvLJuZZvRcEL,xpub68NZiKmJWnxxS6aaHmn81bvJeTESw724CRDs6HbuccFQN9Ku14VQrADWgqbhhTHBaohPX4CjNLf9fq9MYo6oDaPPLPxSb7gwQN3ih19Zm4Y/0))\", DEFAULT, {{\"a91445a9a622a8b0a1269944be477640eedc447bbd8487\"}});\n+    Check(\"wsh(multi(2,xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U/2147483647'/0,xprv9vHkqa6EV4sPZHYqZznhT2NPtPCjKuDKGY38FBWLvgaDx45zo9WQRUT3dKYnjwih2yJD9mkrocEZXo1ex8G81dwSM1fwqWpWkeS3v86pgKt/1/2/*,xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi/10/20/30/40/*'))\", \"wsh(multi(2,xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB/2147483647'/0,xpub69H7F5d8KSRgmmdJg2KhpAK8SR3DjMwAdkxj3ZuxV27CprR9LgpeyGmXUbC6wb7ERfvrnKZjXoUmmDznezpbZb7ap6r1D3tgFxHmwMkQTPH/1/2/*,xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8/10/20/30/40/*'))\", HARDENED | RANGE, {{\"0020b92623201f3bb7c3771d45b2ad1d0351ea8fbf8cfe0a0e570264e1075fa1948f\"},{\"002036a08bbe4923af41cf4316817c93b8d37e2f635dd25cfff06bd50df6ae7ea203\"},{\"0020a96e7ab4607ca6b261bfe3245ffda9c746b28d3f59e83d34820ec0e2b36c139c\"}});\n+    Check(\"sh(wsh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9)))\",\"sh(wsh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232)))\", SIGNABLE, {{\"a9147fc63e13dc25e8a95a3cee3d9a714ac3afd96f1e87\"}});\n+    CheckUnparsable(\"sh(multi(16,KzoAz5CanayRKex3fSLQ2BwJpN7U52gZvxMyk78nDMHuqrUxuSJy,KwGNz6YCCQtYvFzMtrC6D3tKTKdBBboMrLTsjr2NYVBwapCkn7Mr,KxogYhiNfwxuswvXV66eFyKcCpm7dZ7TqHVqujHAVUjJxyivxQ9X,L2BUNduTSyZwZjwNHynQTF14mv2uz2NRq5n5sYWTb4FkkmqgEE9f,L1okJGHGn1kFjdXHKxXjwVVtmCMR2JA5QsbKCSpSb7ReQjezKeoD,KxDCNSST75HFPaW5QKpzHtAyaCQC7p9Vo3FYfi2u4dXD1vgMiboK,L5edQjFtnkcf5UWURn6UuuoFrabgDQUHdheKCziwN42aLwS3KizU,KzF8UWFcEC7BYTq8Go1xVimMkDmyNYVmXV5PV7RuDicvAocoPB8i,L3nHUboKG2w4VSJ5jYZ5CBM97oeK6YuKvfZxrefdShECcjEYKMWZ,KyjHo36dWkYhimKmVVmQTq3gERv3pnqA4xFCpvUgbGDJad7eS8WE,KwsfyHKRUTZPQtysN7M3tZ4GXTnuov5XRgjdF2XCG8faAPmFruRF,KzCUbGhN9LJhdeFfL9zQgTJMjqxdBKEekRGZX24hXdgCNCijkkap,KzgpMBwwsDLwkaC5UrmBgCYaBD2WgZ7PBoGYXR8KT7gCA9UTN5a3,KyBXTPy4T7YG4q9tcAM3LkvfRpD1ybHMvcJ2ehaWXaSqeGUxEdkP,KzJDe9iwJRPtKP2F2AoN6zBgzS7uiuAwhWCfGdNeYJ3PC1HNJ8M8,L1xbHrxynrqLKkoYc4qtoQPx6uy5qYXR5ZDYVYBSRmCV5piU3JG9))\",\"sh(multi(16,03669b8afcec803a0d323e9a17f3ea8e68e8abe5a278020a929adbec52421adbd0,0260b2003c386519fc9eadf2b5cf124dd8eea4c4e68d5e154050a9346ea98ce600,0362a74e399c39ed5593852a30147f2959b56bb827dfa3e60e464b02ccf87dc5e8,0261345b53de74a4d721ef877c255429961b7e43714171ac06168d7e08c542a8b8,02da72e8b46901a65d4374fe6315538d8f368557dda3a1dcf9ea903f3afe7314c8,0318c82dd0b53fd3a932d16e0ba9e278fcc937c582d5781be626ff16e201f72286,0297ccef1ef99f9d73dec9ad37476ddb232f1238aff877af19e72ba04493361009,02e502cfd5c3f972fe9a3e2a18827820638f96b6f347e54d63deb839011fd5765d,03e687710f0e3ebe81c1037074da939d409c0025f17eb86adb9427d28f0f7ae0e9,02c04d3a5274952acdbc76987f3184b346a483d43be40874624b29e3692c1df5af,02ed06e0f418b5b43a7ec01d1d7d27290fa15f75771cb69b642a51471c29c84acd,036d46073cbb9ffee90473f3da429abc8de7f8751199da44485682a989a4bebb24,02f5d1ff7c9029a80a4e36b9a5497027ef7f3e73384a4a94fbfe7c4e9164eec8bc,02e41deffd1b7cce11cde209a781adcffdabd1b91c0ba0375857a2bfd9302419f3,02d76625f7956a7fc505ab02556c23ee72d832f1bac391bcd2d3abce5710a13d06,0399eb0a5487515802dc14544cf10b3666623762fbed2ec38a3975716e2c29c232))\"); // P2SH does not fit 16 compressed pubkeys in a redeemscript\n+\n+    // Check for invalid nesting of structures\n+    CheckUnparsable(\"sh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"sh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\"); // P2SH needs a script, not a key\n+    CheckUnparsable(\"sh(combo(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"sh(combo(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\"); // Old must be top level\n+    CheckUnparsable(\"wsh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)\", \"wsh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)\"); // P2WSH needs a script, not a key\n+    CheckUnparsable(\"wsh(wpkh(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1))\", \"wsh(wpkh(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd))\"); // Cannot embed witness inside witness\n+    CheckUnparsable(\"wsh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2WSH\n+    CheckUnparsable(\"sh(sh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"sh(sh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2SH inside P2SH\n+    CheckUnparsable(\"wsh(wsh(pk(L4rK1yDtCWekvXuE6oXD9jCYfFNV2cWRpVuPLBcCU2z8TrisoyY1)))\", \"wsh(wsh(pk(03a34b99f22c790c4e36b2b3c2c35a36db06226e41c692fc82b8b56ac1c540c5bd)))\"); // Cannot embed P2WSH inside P2WSH\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "151600bb4972f7bab4ed4a03d1f67c38e081fefe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTE2MDBiYjQ5NzJmN2JhYjRlZDRhMDNkMWY2N2MzOGUwODFmZWZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-17T20:41:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "Swap in descriptors support into scantxoutset",
      "tree": {
        "sha": "84cab52caefb1e4c965f9833dbfb3f86f81cde67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84cab52caefb1e4c965f9833dbfb3f86f81cde67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/151600bb4972f7bab4ed4a03d1f67c38e081fefe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151600bb4972f7bab4ed4a03d1f67c38e081fefe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/151600bb4972f7bab4ed4a03d1f67c38e081fefe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151600bb4972f7bab4ed4a03d1f67c38e081fefe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0652c3284fe12941b28624dbbf5e0862c5d0dbc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0652c3284fe12941b28624dbbf5e0862c5d0dbc3"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 49,
      "deletions": 125
    },
    "files": [
      {
        "sha": "50f0bf522181393655cedb0e590160334c44a51a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 120,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/151600bb4972f7bab4ed4a03d1f67c38e081fefe/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/151600bb4972f7bab4ed4a03d1f67c38e081fefe/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=151600bb4972f7bab4ed4a03d1f67c38e081fefe",
        "patch": "@@ -20,6 +20,7 @@\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n+#include <script/descriptor.h>\n #include <streams.h>\n #include <sync.h>\n #include <txdb.h>\n@@ -1984,67 +1985,36 @@ class CoinsViewScanReserver\n     }\n };\n \n-static const char *g_default_scantxoutset_script_types[] = { \"P2PKH\", \"P2SH_P2WPKH\", \"P2WPKH\" };\n-\n-enum class OutputScriptType {\n-    UNKNOWN,\n-    P2PK,\n-    P2PKH,\n-    P2SH_P2WPKH,\n-    P2WPKH\n-};\n-\n-static inline OutputScriptType GetOutputScriptTypeFromString(const std::string& outputtype)\n-{\n-    if (outputtype == \"P2PK\") return OutputScriptType::P2PK;\n-    else if (outputtype == \"P2PKH\") return OutputScriptType::P2PKH;\n-    else if (outputtype == \"P2SH_P2WPKH\") return OutputScriptType::P2SH_P2WPKH;\n-    else if (outputtype == \"P2WPKH\") return OutputScriptType::P2WPKH;\n-    else return OutputScriptType::UNKNOWN;\n-}\n-\n-CTxDestination GetDestinationForKey(const CPubKey& key, OutputScriptType type)\n-{\n-    switch (type) {\n-    case OutputScriptType::P2PKH: return key.GetID();\n-    case OutputScriptType::P2SH_P2WPKH:\n-    case OutputScriptType::P2WPKH: {\n-        if (!key.IsCompressed()) return key.GetID();\n-        CTxDestination witdest = WitnessV0KeyHash(key.GetID());\n-        if (type == OutputScriptType::P2SH_P2WPKH) {\n-            CScript witprog = GetScriptForDestination(witdest);\n-            return CScriptID(witprog);\n-        } else {\n-            return witdest;\n-        }\n-    }\n-    default: assert(false);\n-    }\n-}\n-\n UniValue scantxoutset(const JSONRPCRequest& request)\n {\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"scantxoutset <action> ( <scanobjects> )\\n\"\n-            \"\\nScans the unspent transaction output set for possible entries that matches common scripts of given public keys.\\n\"\n-            \"Using addresses as scanobjects will _not_ detect unspent P2PK txouts\\n\"\n+            \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n+            \"Examples of output descriptors are:\\n\"\n+            \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\"\n+            \"    raw(<hex script>)                    Outputs whose scriptPubKey equals the specified hex scripts\\n\"\n+            \"    combo(<pubkey>)                      P2PK, P2PKH, P2WPKH, and P2SH-P2WPKH outputs for the given pubkey\\n\"\n+            \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n+            \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n+            \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n+            \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" or \\\"/*'\\\" to specify all unhardened or hardened child keys.\\n\"\n+            \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n+            \"For more information on output descriptors, see the documentation at TODO\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"action\\\"                       (string, required) The action to execute\\n\"\n             \"                                      \\\"start\\\" for starting a scan\\n\"\n             \"                                      \\\"abort\\\" for aborting the current scan (returns true when abort was successful)\\n\"\n             \"                                      \\\"status\\\" for progress report (in %) of the current scan\\n\"\n-            \"2. \\\"scanobjects\\\"                  (array, optional) Array of scan objects (only one object type per scan object allowed)\\n\"\n-            \"      [\\n\"\n-            \"        { \\\"address\\\" : \\\"<address>\\\" },       (string, optional) Bitcoin address\\n\"\n-            \"        { \\\"script\\\"  : \\\"<scriptPubKey>\\\" },  (string, optional) HEX encoded script (scriptPubKey)\\n\"\n-            \"        { \\\"pubkey\\\"  :                      (object, optional) Public key\\n\"\n-            \"          {\\n\"\n-            \"            \\\"pubkey\\\" : \\\"<pubkey\\\">,         (string, required) HEX encoded public key\\n\"\n-            \"            \\\"script_types\\\" : [ ... ],      (array, optional) Array of script-types to derive from the pubkey (possible values: \\\"P2PK\\\", \\\"P2PKH\\\", \\\"P2SH-P2WPKH\\\", \\\"P2WPKH\\\")\\n\"\n-            \"          }\\n\"\n+            \"2. \\\"scanobjects\\\"                  (array, required) Array of scan objects\\n\"\n+            \"    [                             Every scan object is either a string descriptor or an object:\\n\"\n+            \"        \\\"descriptor\\\",             (string, optional) An output descriptor\\n\"\n+            \"        {                         (object, optional) An object with output descriptor and metadata\\n\"\n+            \"          \\\"desc\\\": \\\"descriptor\\\",   (string, required) An output descriptor\\n\"\n+            \"          \\\"range\\\": n,             (numeric, optional) Up to what child index HD chains should be explored (default: 1000)\\n\"\n             \"        },\\n\"\n-            \"      ]\\n\"\n+            \"        ...\\n\"\n+            \"    ]\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"unspents\\\": [\\n\"\n@@ -2090,79 +2060,35 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n \n         // loop through the scan objects\n         for (const UniValue& scanobject : request.params[1].get_array().getValues()) {\n-            if (!scanobject.isObject()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scan object\");\n-            }\n-            UniValue address_uni = find_value(scanobject, \"address\");\n-            UniValue pubkey_uni  = find_value(scanobject, \"pubkey\");\n-            UniValue script_uni  = find_value(scanobject, \"script\");\n-\n-            // make sure only one object type is present\n-            if (1 != !address_uni.isNull() + !pubkey_uni.isNull() + !script_uni.isNull()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Only one object type is allowed per scan object\");\n-            } else if (!address_uni.isNull() && !address_uni.isStr()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"address\\\" must contain a single string as value\");\n-            } else if (!pubkey_uni.isNull() && !pubkey_uni.isObject()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"pubkey\\\" must contain an object as value\");\n-            } else if (!script_uni.isNull() && !script_uni.isStr()) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scanobject \\\"script\\\" must contain a single string as value\");\n-            } else if (address_uni.isStr()) {\n-                // type: address\n-                // decode destination and derive the scriptPubKey\n-                // add the script to the scan containers\n-                CTxDestination dest = DecodeDestination(address_uni.get_str());\n-                if (!IsValidDestination(dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n-                }\n-                CScript script = GetScriptForDestination(dest);\n-                assert(!script.empty());\n-                needles.insert(script);\n-            } else if (pubkey_uni.isObject()) {\n-                // type: pubkey\n-                // derive script(s) according to the script_type parameter\n-                UniValue script_types_uni = find_value(pubkey_uni, \"script_types\");\n-                UniValue pubkeydata_uni = find_value(pubkey_uni, \"pubkey\");\n-\n-                // check the script types and use the default if not provided\n-                if (!script_types_uni.isNull() && !script_types_uni.isArray()) {\n-                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"script_types must be an array\");\n-                } else if (script_types_uni.isNull()) {\n-                    // use the default script types\n-                    script_types_uni = UniValue(UniValue::VARR);\n-                    for (const char *t : g_default_scantxoutset_script_types) {\n-                        script_types_uni.push_back(t);\n-                    }\n-                }\n-\n-                // check the acctual pubkey\n-                if (!pubkeydata_uni.isStr() || !IsHex(pubkeydata_uni.get_str())) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Public key must be hex encoded\");\n-                }\n-                CPubKey pubkey(ParseHexV(pubkeydata_uni, \"pubkey\"));\n-                if (!pubkey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid public key\");\n+            std::string desc_str;\n+            int range = 1000;\n+            if (scanobject.isStr()) {\n+                desc_str = scanobject.get_str();\n+            } else if (scanobject.isObject()) {\n+                UniValue desc_uni = find_value(scanobject, \"desc\");\n+                if (desc_uni.isNull()) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor needs to be provided in scan object\");\n+                desc_str = desc_uni.get_str();\n+                UniValue range_uni = find_value(scanobject, \"range\");\n+                if (!range_uni.isNull()) {\n+                    range = range_uni.get_int();\n+                    if (range < 0 || range > 1000000) throw JSONRPCError(RPC_INVALID_PARAMETER, \"range out of range\");\n                 }\n+            } else {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scan object needs to be either a string or an object\");\n+            }\n \n-                // loop through the script types and derive the script\n-                for (const UniValue& script_type_uni : script_types_uni.get_array().getValues()) {\n-                    OutputScriptType script_type = GetOutputScriptTypeFromString(script_type_uni.get_str());\n-                    if (script_type == OutputScriptType::UNKNOWN) throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid script type\");\n-                    CScript script;\n-                    if (script_type == OutputScriptType::P2PK) {\n-                        // support legacy P2PK scripts\n-                        script << ToByteVector(pubkey) << OP_CHECKSIG;\n-                    } else {\n-                        script = GetScriptForDestination(GetDestinationForKey(pubkey, script_type));\n-                    }\n-                    assert(!script.empty());\n-                    needles.insert(script);\n+            FlatSigningProvider provider;\n+            auto desc = Parse(desc_str, provider);\n+            if (!desc) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Invalid descriptor '%s'\", desc_str));\n+            }\n+            if (!desc->IsRange()) range = 0;\n+            for (int i = 0; i <= range; ++i) {\n+                std::vector<CScript> scripts;\n+                if (!desc->Expand(i, provider, scripts, provider)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Cannot derive script without private keys: '%s'\", desc_str));\n                 }\n-            } else if (script_uni.isStr()) {\n-                // type: script\n-                // check and add the script to the scan containers (needles array)\n-                CScript script(ParseHexV(script_uni, \"script\"));\n-                // TODO: check script: max length, has OP, is unspenable etc.\n-                needles.insert(script);\n+                needles.insert(scripts.begin(), scripts.end());\n             }\n         }\n "
      },
      {
        "sha": "7294be84bfab873398bf62e29d8882fbcaad1bfa",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/151600bb4972f7bab4ed4a03d1f67c38e081fefe/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/151600bb4972f7bab4ed4a03d1f67c38e081fefe/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=151600bb4972f7bab4ed4a03d1f67c38e081fefe",
        "patch": "@@ -36,13 +36,11 @@ def run_test(self):\n \n         self.restart_node(0, ['-nowallet'])\n         self.log.info(\"Test if we have found the non HD unspent outputs.\")\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"pubkey\": {\"pubkey\": pubk1}}, {\"pubkey\": {\"pubkey\": pubk2}}, {\"pubkey\": {\"pubkey\": pubk3}}])['total_amount'], 6)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"address\": addr_P2SH_SEGWIT}, {\"address\": addr_LEGACY}, {\"address\": addr_BECH32}])['total_amount'], 6)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"address\": addr_P2SH_SEGWIT}, {\"address\": addr_LEGACY}, {\"pubkey\": {\"pubkey\": pubk3}} ])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(\" + pubk1 + \")\", \"combo(\" + pubk2 + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"addr(\" + addr_BECH32 + \")\"])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], 6)\n \n         self.log.info(\"Test invalid parameters.\")\n-        assert_raises_rpc_error(-8, 'Scanobject \"pubkey\" must contain an object as value', self.nodes[0].scantxoutset, \"start\", [ {\"pubkey\": pubk1}]) #missing pubkey object\n-        assert_raises_rpc_error(-8, 'Scanobject \"address\" must contain a single string as value', self.nodes[0].scantxoutset, \"start\", [ {\"address\": {\"address\": addr_P2SH_SEGWIT}}]) #invalid object for address object\n \n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      }
    ]
  },
  {
    "sha": "1af237faefc316bd708e25d6901ee6f17b706e57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWYyMzdmYWVmYzMxNmJkNzA4ZTI1ZDY5MDFlZTZmMTdiNzA2ZTU3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-27T09:11:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "[QA] Add xpub range tests in scantxoutset tests",
      "tree": {
        "sha": "56a59abb5f7fc579f7df74570d96b65f1541f9e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56a59abb5f7fc579f7df74570d96b65f1541f9e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1af237faefc316bd708e25d6901ee6f17b706e57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1af237faefc316bd708e25d6901ee6f17b706e57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1af237faefc316bd708e25d6901ee6f17b706e57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1af237faefc316bd708e25d6901ee6f17b706e57/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "151600bb4972f7bab4ed4a03d1f67c38e081fefe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/151600bb4972f7bab4ed4a03d1f67c38e081fefe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/151600bb4972f7bab4ed4a03d1f67c38e081fefe"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0a80051a758596be9977f12109df48fa45d72752",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1af237faefc316bd708e25d6901ee6f17b706e57/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1af237faefc316bd708e25d6901ee6f17b706e57/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=1af237faefc316bd708e25d6901ee6f17b706e57",
        "patch": "@@ -26,6 +26,15 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(addr_P2SH_SEGWIT, 1)\n         self.nodes[0].sendtoaddress(addr_LEGACY, 2)\n         self.nodes[0].sendtoaddress(addr_BECH32, 3)\n+\n+        #send to child keys of tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK\n+        self.nodes[0].sendtoaddress(\"mkHV1C6JLheLoUSSZYk7x3FH5tnx9bu7yc\", 1) # (m/0'/0'/0')\n+        self.nodes[0].sendtoaddress(\"mipUSRmJAj2KrjSvsPQtnP8ynUon7FhpCR\", 2) # (m/0'/0'/1')\n+        self.nodes[0].sendtoaddress(\"n37dAGe6Mq1HGM9t4b6rFEEsDGq7Fcgfqg\", 3) # (m/0'/0'/1500')\n+        self.nodes[0].sendtoaddress(\"mqS9Rpg8nNLAzxFExsgFLCnzHBsoQ3PRM6\", 4) # (m/0'/0'/0)\n+        self.nodes[0].sendtoaddress(\"mnTg5gVWr3rbhHaKjJv7EEEc76ZqHgSj4S\", 5) # (m/0'/0'/1)\n+        self.nodes[0].sendtoaddress(\"mketCd6B9U9Uee1iCsppDJJBHfvi6U6ukC\", 6) # (m/0'/0'/1500)\n+\n         self.nodes[0].generate(1)\n \n         self.log.info(\"Stop node, remove wallet, mine again some blocks...\")\n@@ -40,7 +49,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"addr(\" + addr_BECH32 + \")\"])['total_amount'], 6)\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], 6)\n \n-        self.log.info(\"Test invalid parameters.\")\n+        self.log.info(\"Test extended key derivation.\")\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0')\"])['total_amount'], 1)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1')\"])['total_amount'], 2)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\"])['total_amount'], 3)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0)\"])['total_amount'], 4)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1)\"])['total_amount'], 5)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1501}])['total_amount'], 6)\n \n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      }
    ]
  },
  {
    "sha": "6495849bfd362d6a2f128bac5982fa9e3e2e3396",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDk1ODQ5YmZkMzYyZDZhMmYxMjhiYWM1OTgyZmE5ZTNlMmUzMzk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:49:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "[QA] Extend tests to more combinations",
      "tree": {
        "sha": "08748535b6c1ff2667de56cca29d47bb19dd4197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08748535b6c1ff2667de56cca29d47bb19dd4197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6495849bfd362d6a2f128bac5982fa9e3e2e3396",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6495849bfd362d6a2f128bac5982fa9e3e2e3396",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6495849bfd362d6a2f128bac5982fa9e3e2e3396",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6495849bfd362d6a2f128bac5982fa9e3e2e3396/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1af237faefc316bd708e25d6901ee6f17b706e57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1af237faefc316bd708e25d6901ee6f17b706e57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1af237faefc316bd708e25d6901ee6f17b706e57"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 47,
      "deletions": 18
    },
    "files": [
      {
        "sha": "713946f09bc345236a1678a23209b28ec8eaf004",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 47,
        "deletions": 18,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6495849bfd362d6a2f128bac5982fa9e3e2e3396/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6495849bfd362d6a2f128bac5982fa9e3e2e3396/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=6495849bfd362d6a2f128bac5982fa9e3e2e3396",
        "patch": "@@ -23,17 +23,24 @@ def run_test(self):\n         pubk2 = self.nodes[0].getaddressinfo(addr_LEGACY)['pubkey']\n         addr_BECH32 = self.nodes[0].getnewaddress(\"\", \"bech32\")\n         pubk3 = self.nodes[0].getaddressinfo(addr_BECH32)['pubkey']\n-        self.nodes[0].sendtoaddress(addr_P2SH_SEGWIT, 1)\n-        self.nodes[0].sendtoaddress(addr_LEGACY, 2)\n-        self.nodes[0].sendtoaddress(addr_BECH32, 3)\n+        self.nodes[0].sendtoaddress(addr_P2SH_SEGWIT, 0.001)\n+        self.nodes[0].sendtoaddress(addr_LEGACY, 0.002)\n+        self.nodes[0].sendtoaddress(addr_BECH32, 0.004)\n \n         #send to child keys of tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK\n-        self.nodes[0].sendtoaddress(\"mkHV1C6JLheLoUSSZYk7x3FH5tnx9bu7yc\", 1) # (m/0'/0'/0')\n-        self.nodes[0].sendtoaddress(\"mipUSRmJAj2KrjSvsPQtnP8ynUon7FhpCR\", 2) # (m/0'/0'/1')\n-        self.nodes[0].sendtoaddress(\"n37dAGe6Mq1HGM9t4b6rFEEsDGq7Fcgfqg\", 3) # (m/0'/0'/1500')\n-        self.nodes[0].sendtoaddress(\"mqS9Rpg8nNLAzxFExsgFLCnzHBsoQ3PRM6\", 4) # (m/0'/0'/0)\n-        self.nodes[0].sendtoaddress(\"mnTg5gVWr3rbhHaKjJv7EEEc76ZqHgSj4S\", 5) # (m/0'/0'/1)\n-        self.nodes[0].sendtoaddress(\"mketCd6B9U9Uee1iCsppDJJBHfvi6U6ukC\", 6) # (m/0'/0'/1500)\n+        self.nodes[0].sendtoaddress(\"mkHV1C6JLheLoUSSZYk7x3FH5tnx9bu7yc\", 0.008) # (m/0'/0'/0')\n+        self.nodes[0].sendtoaddress(\"mipUSRmJAj2KrjSvsPQtnP8ynUon7FhpCR\", 0.016) # (m/0'/0'/1')\n+        self.nodes[0].sendtoaddress(\"n37dAGe6Mq1HGM9t4b6rFEEsDGq7Fcgfqg\", 0.032) # (m/0'/0'/1500')\n+        self.nodes[0].sendtoaddress(\"mqS9Rpg8nNLAzxFExsgFLCnzHBsoQ3PRM6\", 0.064) # (m/0'/0'/0)\n+        self.nodes[0].sendtoaddress(\"mnTg5gVWr3rbhHaKjJv7EEEc76ZqHgSj4S\", 0.128) # (m/0'/0'/1)\n+        self.nodes[0].sendtoaddress(\"mketCd6B9U9Uee1iCsppDJJBHfvi6U6ukC\", 0.256) # (m/0'/0'/1500)\n+        self.nodes[0].sendtoaddress(\"mj8zFzrbBcdaWXowCQ1oPZ4qioBVzLzAp7\", 0.512) # (m/1/1/0')\n+        self.nodes[0].sendtoaddress(\"mfnKpKQEftniaoE1iXuMMePQU3PUpcNisA\", 1.024) # (m/1/1/1')\n+        self.nodes[0].sendtoaddress(\"mou6cB1kaP1nNJM1sryW6YRwnd4shTbXYQ\", 2.048) # (m/1/1/1500')\n+        self.nodes[0].sendtoaddress(\"mtfUoUax9L4tzXARpw1oTGxWyoogp52KhJ\", 4.096) # (m/1/1/0)\n+        self.nodes[0].sendtoaddress(\"mxp7w7j8S1Aq6L8StS2PqVvtt4HGxXEvdy\", 8.192) # (m/1/1/1)\n+        self.nodes[0].sendtoaddress(\"mpQ8rokAhp1TAtJQR6F6TaUmjAWkAWYYBq\", 16.384) # (m/1/1/1500)\n+\n \n         self.nodes[0].generate(1)\n \n@@ -45,17 +52,39 @@ def run_test(self):\n \n         self.restart_node(0, ['-nowallet'])\n         self.log.info(\"Test if we have found the non HD unspent outputs.\")\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(\" + pubk1 + \")\", \"combo(\" + pubk2 + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], 6)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"addr(\" + addr_BECH32 + \")\"])['total_amount'], 6)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"pkh(\" + pubk1 + \")\", \"pkh(\" + pubk2 + \")\", \"pkh(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.002\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"wpkh(\" + pubk1 + \")\", \"wpkh(\" + pubk2 + \")\", \"wpkh(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.004\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"sh(wpkh(\" + pubk1 + \"))\", \"sh(wpkh(\" + pubk2 + \"))\", \"sh(wpkh(\" + pubk3 + \"))\"])['total_amount'], Decimal(\"0.001\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(\" + pubk1 + \")\", \"combo(\" + pubk2 + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.007\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"addr(\" + addr_BECH32 + \")\"])['total_amount'], Decimal(\"0.007\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.007\"))\n \n         self.log.info(\"Test extended key derivation.\")\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0')\"])['total_amount'], 1)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1')\"])['total_amount'], 2)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\"])['total_amount'], 3)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0)\"])['total_amount'], 4)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1)\"])['total_amount'], 5)\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1501}])['total_amount'], 6)\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0')\"])['total_amount'], Decimal(\"0.008\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1')\"])['total_amount'], Decimal(\"0.016\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1500')\"])['total_amount'], Decimal(\"0.032\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0)\"])['total_amount'], Decimal(\"0.064\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1)\"])['total_amount'], Decimal(\"0.128\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1500)\"])['total_amount'], Decimal(\"0.256\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1499}])['total_amount'], Decimal(\"0.024\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1500}])['total_amount'], Decimal(\"0.056\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*)\", \"range\": 1499}])['total_amount'], Decimal(\"0.192\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*)\", \"range\": 1500}])['total_amount'], Decimal(\"0.448\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0')\"])['total_amount'], Decimal(\"0.512\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1')\"])['total_amount'], Decimal(\"1.024\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500')\"])['total_amount'], Decimal(\"2.048\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])['total_amount'], Decimal(\"4.096\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500)\"])['total_amount'], Decimal(\"16.384\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/0)\"])['total_amount'], Decimal(\"4.096\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/1500)\"])['total_amount'], Decimal(\"16.384\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*')\", \"range\": 1499}])['total_amount'], Decimal(\"1.536\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*')\", \"range\": 1500}])['total_amount'], Decimal(\"3.584\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", \"range\": 1499}])['total_amount'], Decimal(\"12.288\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1499}])['total_amount'], Decimal(\"12.288\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/1/*)\", \"range\": 1500}])['total_amount'], Decimal(\"28.672\"))\n \n if __name__ == '__main__':\n     ScantxoutsetTest().main()"
      }
    ]
  },
  {
    "sha": "fddea672eb8f63012f2e9ce04fa477e5d4140750",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGRlYTY3MmViOGY2MzAxMmYyZTljZTA0ZmE0NzdlNWQ0MTQwNzUw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-07-27T09:57:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T18:52:45Z"
      },
      "message": "Add experimental warning to scantxoutset",
      "tree": {
        "sha": "2ce8fcd17f8fd60a0c946c4ce973e1bb5d38621f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ce8fcd17f8fd60a0c946c4ce973e1bb5d38621f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fddea672eb8f63012f2e9ce04fa477e5d4140750",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddea672eb8f63012f2e9ce04fa477e5d4140750",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fddea672eb8f63012f2e9ce04fa477e5d4140750",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddea672eb8f63012f2e9ce04fa477e5d4140750/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6495849bfd362d6a2f128bac5982fa9e3e2e3396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6495849bfd362d6a2f128bac5982fa9e3e2e3396",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6495849bfd362d6a2f128bac5982fa9e3e2e3396"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "307af61917dc312dde36e35b2869cba6aba4f98c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fddea672eb8f63012f2e9ce04fa477e5d4140750/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fddea672eb8f63012f2e9ce04fa477e5d4140750/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fddea672eb8f63012f2e9ce04fa477e5d4140750",
        "patch": "@@ -1990,6 +1990,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"scantxoutset <action> ( <scanobjects> )\\n\"\n+            \"\\nEXPERIMENTAL warning: this call may be removed or changed in future releases.\\n\"\n             \"\\nScans the unspent transaction output set for entries that match certain output descriptors.\\n\"\n             \"Examples of output descriptors are:\\n\"\n             \"    addr(<address>)                      Outputs whose scriptPubKey corresponds to the specified address (does not include P2PK)\\n\""
      }
    ]
  },
  {
    "sha": "f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmI3ZmMzNDljY2Y5Y2ZiZWI3ZTkxZTE5YzIwZTJhMmZjYzkwMjZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T19:21:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-07-27T19:21:12Z"
      },
      "message": "Support h instead of ' in hardened descriptor paths",
      "tree": {
        "sha": "4f5e3cb6933ef7399fb69d47b935b3ab24467c23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f5e3cb6933ef7399fb69d47b935b3ab24467c23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fddea672eb8f63012f2e9ce04fa477e5d4140750",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fddea672eb8f63012f2e9ce04fa477e5d4140750",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fddea672eb8f63012f2e9ce04fa477e5d4140750"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 33,
      "deletions": 16
    },
    "files": [
      {
        "sha": "46dec4ca6e6fecba05c6c0337967ff35ad5c7dde",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
        "patch": "@@ -1999,7 +1999,8 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n             \"    sh(multi(<n>,<pubkey>,<pubkey>,...)) P2SH-multisig outputs for the given threshold and pubkeys\\n\"\n             \"\\nIn the above, <pubkey> either refers to a fixed public key in hexadecimal notation, or to an xpub/xprv optionally followed by one\\n\"\n-            \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" or \\\"/*'\\\" to specify all unhardened or hardened child keys.\\n\"\n+            \"or more path elements separated by \\\"/\\\", and optionally ending in \\\"/*\\\" (unhardened), or \\\"/*'\\\" or \\\"/*h\\\" (hardened) to specify all\\n\"\n+            \"unhardened or hardened child keys.\\n\"\n             \"In the latter case, a range needs to be specified by below if different from 1000.\\n\"\n             \"For more information on output descriptors, see the documentation at TODO\\n\"\n             \"\\nArguments:\\n\""
      },
      {
        "sha": "f366b99ec3495ccb431b634aca7ad5ed1d542eae",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
        "patch": "@@ -436,7 +436,7 @@ bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out)\n     for (size_t i = 1; i < split.size(); ++i) {\n         Span<const char> elem = split[i];\n         bool hardened = false;\n-        if (elem.size() > 0 && elem[elem.size() - 1] == '\\'') {\n+        if (elem.size() > 0 && (elem[elem.size() - 1] == '\\'' || elem[elem.size() - 1] == 'h')) {\n             elem = elem.first(elem.size() - 1);\n             hardened = true;\n         }\n@@ -472,7 +472,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     if (split.back() == MakeSpan(\"*\").first(1)) {\n         split.pop_back();\n         type = DeriveType::UNHARDENED;\n-    } else if (split.back() == MakeSpan(\"*'\").first(2)) {\n+    } else if (split.back() == MakeSpan(\"*'\").first(2) || split.back() == MakeSpan(\"*h\").first(2)) {\n         split.pop_back();\n         type = DeriveType::HARDENED;\n     }"
      },
      {
        "sha": "e079c72e921244a6e5f1078be336aafccfe3b467",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
        "patch": "@@ -68,6 +68,7 @@\n // * X\n // * E/I: unhardened child\n // * E/I': hardened child\n+// * E/Ih: hardened child (alternative notation)\n //\n // The top level is S.\n "
      },
      {
        "sha": "f189222be878b8e767d01df93f347b9013379bd4",
        "filename": "src/test/descriptor_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/test/descriptor_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/src/test/descriptor_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/descriptor_tests.cpp?ref=f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
        "patch": "@@ -28,13 +28,28 @@ constexpr int HARDENED = 2; // Derivation needs access to private keys\n constexpr int UNSOLVABLE = 4; // This descriptor is not expected to be solvable\n constexpr int SIGNABLE = 8; // We can sign with this descriptor (this is not true when actual BIP32 derivation is used, as that's not integrated in our signing code)\n \n+std::string MaybeUseHInsteadOfApostrophy(std::string ret)\n+{\n+    if (InsecureRandBool()) {\n+        while (true) {\n+            auto it = ret.find(\"'\");\n+            if (it != std::string::npos) {\n+                ret[it] = 'h';\n+            } else {\n+                break;\n+            }\n+        }\n+    }\n+    return ret;\n+}\n+\n void Check(const std::string& prv, const std::string& pub, int flags, const std::vector<std::vector<std::string>>& scripts)\n {\n     FlatSigningProvider keys_priv, keys_pub;\n \n     // Check that parsing succeeds.\n-    auto parse_priv = Parse(prv, keys_priv);\n-    auto parse_pub = Parse(pub, keys_pub);\n+    auto parse_priv = Parse(MaybeUseHInsteadOfApostrophy(prv), keys_priv);\n+    auto parse_pub = Parse(MaybeUseHInsteadOfApostrophy(pub), keys_pub);\n     BOOST_CHECK(parse_priv);\n     BOOST_CHECK(parse_pub);\n "
      },
      {
        "sha": "11c35b9f085a1cb415b3526dec230ea57d5e52d9",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=f6b7fc349ccf9cfbeb7e91e19c20e2a2fcc9026f",
        "patch": "@@ -60,19 +60,19 @@ def run_test(self):\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"addr(\" + addr_P2SH_SEGWIT + \")\", \"addr(\" + addr_LEGACY + \")\", \"combo(\" + pubk3 + \")\"])['total_amount'], Decimal(\"0.007\"))\n \n         self.log.info(\"Test extended key derivation.\")\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0')\"])['total_amount'], Decimal(\"0.008\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1')\"])['total_amount'], Decimal(\"0.016\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1500')\"])['total_amount'], Decimal(\"0.032\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/0)\"])['total_amount'], Decimal(\"0.064\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1)\"])['total_amount'], Decimal(\"0.128\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1500)\"])['total_amount'], Decimal(\"0.256\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1499}])['total_amount'], Decimal(\"0.024\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*')\", \"range\": 1500}])['total_amount'], Decimal(\"0.056\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*)\", \"range\": 1499}])['total_amount'], Decimal(\"0.192\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*)\", \"range\": 1500}])['total_amount'], Decimal(\"0.448\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0h/0h)\"])['total_amount'], Decimal(\"0.008\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/1h)\"])['total_amount'], Decimal(\"0.016\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/1500')\"])['total_amount'], Decimal(\"0.032\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0h/0)\"])['total_amount'], Decimal(\"0.064\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0h/1)\"])['total_amount'], Decimal(\"0.128\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/1500)\"])['total_amount'], Decimal(\"0.256\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0h/*h)\", \"range\": 1499}])['total_amount'], Decimal(\"0.024\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0'/*h)\", \"range\": 1500}])['total_amount'], Decimal(\"0.056\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/0'/*)\", \"range\": 1499}])['total_amount'], Decimal(\"0.192\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ {\"desc\": \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0'/0h/*)\", \"range\": 1500}])['total_amount'], Decimal(\"0.448\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0')\"])['total_amount'], Decimal(\"0.512\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1')\"])['total_amount'], Decimal(\"1.024\"))\n-        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500')\"])['total_amount'], Decimal(\"2.048\"))\n+        assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500h)\"])['total_amount'], Decimal(\"2.048\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/0)\"])['total_amount'], Decimal(\"4.096\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1)\"])['total_amount'], Decimal(\"8.192\"))\n         assert_equal(self.nodes[0].scantxoutset(\"start\", [ \"combo(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/1/1500)\"])['total_amount'], Decimal(\"16.384\"))"
      }
    ]
  }
]