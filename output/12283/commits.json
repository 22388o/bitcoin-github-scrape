[
  {
    "sha": "1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzQwZWRhM2I3YjZjYTI3ODlkNmVjNjVkYWQ3MmVlNGMzODQ0NjYx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-28T12:14:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-01-28T12:21:25Z"
      },
      "message": "Fix typos",
      "tree": {
        "sha": "8e1ef2755ead1bd1de86ccc28387767326d381e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e1ef2755ead1bd1de86ccc28387767326d381e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9cf6393a4f82b9c81d3b4b468a17a89db10531a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9cf6393a4f82b9c81d3b4b468a17a89db10531a2"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5430dd8851347c0f17473a19785b517ac0575773",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -931,8 +931,8 @@ if test x$use_pkgconfig = xyes; then\n   m4_ifdef(\n     [PKG_CHECK_MODULES],\n     [\n-      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl  not found.)])\n-      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto  not found.)])\n+      PKG_CHECK_MODULES([SSL], [libssl],, [AC_MSG_ERROR(openssl not found.)])\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n       BITCOIN_QT_CHECK([PKG_CHECK_MODULES([PROTOBUF], [protobuf], [have_protobuf=yes], [BITCOIN_QT_FAIL(libprotobuf not found)])])\n       if test x$use_qr != xno; then\n         BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])"
      },
      {
        "sha": "219bb18600b7ddab63dd77d10d589e85461fe404",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -13,7 +13,7 @@ Before every minor and major release:\n * Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_IS_RELEASE` to `true`)\n * Write release notes (see below)\n * Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid  with information from the getblockhash rpc.\n+* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n   - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n   - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n   - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect"
      },
      {
        "sha": "6eb223171f9bb76f7ca864e480fe1346ecd340b4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -126,7 +126,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those which support the service bits prefix, most only support a subset of\n         // possible options.\n-        // This is fine at runtime as we'll fall back to using them as a oneshot if they dont support the\n+        // This is fine at runtime as we'll fall back to using them as a oneshot if they don't support the\n         // service bits we want, but we should get them updated to support all service bits wanted by any\n         // release ASAP to avoid it where possible.\n         vSeeds.emplace_back(\"seed.bitcoin.sipa.be\"); // Pieter Wuille, only supports x1, x5, x9, and xd"
      },
      {
        "sha": "aaeb90eee212245e38b32b3286a6db238984b938",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -294,7 +294,7 @@ enum ServiceFlags : uint64_t {\n  * Thus, generally, avoid calling with peerServices == NODE_NONE, unless\n  * state-specific flags must absolutely be avoided. When called with\n  * peerServices == NODE_NONE, the returned desirable service flags are\n- * guaranteed to not change dependant on state - ie they are suitable for\n+ * guaranteed to not change dependent on state - ie they are suitable for\n  * use when describing peers which we know to be desirable, but for which\n  * we do not have a confirmed set of service flags.\n  *"
      },
      {
        "sha": "9f86c4a163267daa79bd7581df61cae794ce4b9a",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -82,7 +82,7 @@ class CVectorWriter\n  * @param[in]  nVersionIn Serialization Version (including any flags)\n  * @param[in]  vchDataIn  Referenced byte vector to overwrite/append\n  * @param[in]  nPosIn Starting position. Vector index where writes should start. The vector will initially\n- *                    grow as necessary to  max(nPosIn, vec.size()). So to append, use vec.size().\n+ *                    grow as necessary to max(nPosIn, vec.size()). So to append, use vec.size().\n */\n     CVectorWriter(int nTypeIn, int nVersionIn, std::vector<unsigned char>& vchDataIn, size_t nPosIn) : nType(nTypeIn), nVersion(nVersionIn), vchData(vchDataIn), nPos(nPosIn)\n     {"
      },
      {
        "sha": "bf3d131e4edcbc01e4d1ac2b00315e728fd7ad40",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -25,8 +25,8 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n //\n // Early deadlock detection.\n // Problem being solved:\n-//    Thread 1 locks  A, then B, then C\n-//    Thread 2 locks  D, then C, then A\n+//    Thread 1 locks A, then B, then C\n+//    Thread 2 locks D, then C, then A\n //     --> may result in deadlock between the two threads, depending on when they run.\n // Solution implemented here:\n // Keep track of pairs of locks: (A before B), (A before C), etc."
      },
      {
        "sha": "698ef9181d39bb8ea23190a1b26ec5b5555d42a8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -2577,7 +2577,7 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n         if (GetMainSignals().CallbacksPending() > 10) {\n             // Block until the validation queue drains. This should largely\n             // never happen in normal operation, however may happen during\n-            // reindex, causing memory blowup  if we run too far ahead.\n+            // reindex, causing memory blowup if we run too far ahead.\n             SyncWithValidationInterfaceQueue();\n         }\n "
      },
      {
        "sha": "f39471b8717c21e18d181c5e20f69ec19e1bc967",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -103,7 +103,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // we can't make 3 cents of mature coins\n         BOOST_CHECK(!testWallet.SelectCoinsMinConf( 3 * CENT, 1, 6, 0, vCoins, setCoinsRet, nValueRet));\n \n-        // we can make 3 cents of new  coins\n+        // we can make 3 cents of new coins\n         BOOST_CHECK( testWallet.SelectCoinsMinConf( 3 * CENT, 1, 1, 0, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 3 * CENT);\n "
      },
      {
        "sha": "4d9661de379b68bc7b18035f74e1d8e93eaa61b4",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1340eda3b7b6ca2789d6ec65dad72ee4c3844661/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=1340eda3b7b6ca2789d6ec65dad72ee4c3844661",
        "patch": "@@ -6,7 +6,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin P2P network half-a-node.\n \n-This python code was modified from ArtForz' public domain  half-a-node, as\n+This python code was modified from ArtForz' public domain half-a-node, as\n found in the mini-node branch of http://github.com/jgarzik/pynode.\n \n P2PConnection: A low-level connection object to a node's P2P interface"
      }
    ]
  }
]