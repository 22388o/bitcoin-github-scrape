MarcoFalke,2020-08-27 09:31:56,"According to https://en.bitcoin.it/wiki/Protocol_documentation#Inventory_Vectors (section written in 2010 by ""MagicalTux"") this is unsigned. Though, our python tests also treat this as signed. https://btcinformation.org/en/developer-reference#inv doesn't say anything about signedness.\n\nWould be good to at least update the python test framework and also add a p2p test.",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-681837009,681837009,
jonatack,2020-08-27 14:13:47,"> Would be good to at least update the python test framework and also add a p2p test.\n\nUpdated the python test framework and added test coverage.",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-681975627,681975627,
practicalswift,2020-08-27 18:18:06,"Concept ACK\n\nThanks for fixing UBSan fuzzing finds!",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-682112273,682112273,
practicalswift,2020-08-28 05:48:13,"@jonatack Just to confirm: if the test changes we're dropped in this change set (keeping only the changes to `src/protocol.{cpp,h}`) then all functional tests would still pass, right?",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-682338614,682338614,
jonatack,2020-08-28 07:53:07,"> @jonasnick Just to confirm: if the test changes we're dropped in this change set (keeping only the changes to `src/protocol.{cpp,h}`) then all functional tests would still pass, right?\n\nRight. I pushed the changes to `src/protocol.{h/cpp}` several times in other PR changesets (#19610, #19611) before dropping them, and the CI passes.",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-682384295,682384295,
jnewbery,2020-08-28 11:38:37,"> According to https://en.bitcoin.it/wiki/Protocol_documentation#Inventory_Vectors (section written in 2010 by ""MagicalTux"") this is unsigned. Though, our python tests also treat this as signed. https://btcinformation.org/en/developer-reference#inv doesn't say anything about signedness.\n\nbtcinformation.org does show this as uint32_t: https://btcinformation.org/en/developer-reference#data-messa",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-682478111,682478111,
jonatack,2020-08-28 11:54:28,"Great links @jnewbery, thanks.\n\n> Note that even though comparing an int to a uint32_t causes a UBSan warning, it's not actually undefined behaviour: [clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#:~:text=%2Dfsanitize%3Dimplicit%2Dinteger%2D,the%20new%20value%20is%20negative](https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#:~:text=%2Dfsanitize%3Dimplicit%2Dinteger%2D,the%20ne",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-682484118,682484118,
jonatack,2020-08-28 18:19:42,"Thanks everyone for your feedback. I wrote a [few tests](https://github.com/bitcoin/bitcoin/commit/6c0f4aefe373bb89188e91464326dabf0f9f3397) but they all covered the change to the CInv class in the test framework, not the CInv change in `protocol.{h,cpp}`, so I've simplified and removed them in the latest push.",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-683032897,683032897,
laanwj,2020-08-29 12:51:55,"Thanks for addressing the comments, the code changes look good to me now.",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-683286347,683286347,
laanwj,2020-09-02 14:17:07,"> All the values we ever assign to CInv::type are non-negative within the reach of a signed 32 bit integer. GetDataMsg is uint32_t and in some places we |= a variable of type uint32_t into CInv::type\n\nBitwise arithmetic should definitely use unsigned integers, good point.\n\n> Actually serializing a signed integer in the way we do it is not portable, it just works because all platforms use t",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-685766893,685766893,
laanwj,2020-09-03 11:29:58,ACK 7984c39be11ca04460883365e1ae2a496aaa6c0e,https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-686426437,686426437,
MarcoFalke,2020-09-03 14:42:06,"ACK 7984c39be11ca04460883365e1ae2a496aaa6c0e ðŸŒ»\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 7984c39be11ca04460883365e1ae2a496aaa6c0e ðŸŒ»\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjtLAwAtfwkLzUyVHkPG+CsHcnD4C7PQgsfTFBMxOM9trXOHY299iYHJe",https://github.com/bitcoin/bitcoin/pull/19818#issuecomment-686540138,686540138,
laanwj,2020-08-27 09:17:22,"ACK on using a sized type here.\nHowever, changing from signed to unsigned is, in principle, a P2P protocol change.\nThis needs to be carefully reviewed for potential unexpected by-effects.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478276038,478276038,src/protocol.h
MarcoFalke,2020-08-27 14:29:58,"We generally don't test the test framework. Sending an uint32_t{-1} and observing the node doesn't crash with sanitizers enabled should be a sufficient smoke test. Maybe add an assert_debug_log to observe how the inv will be formatted.\n\n```\n            LogPrint(BCLog::NET, ""got inv: %s  %s peer=%d\n"", inv.ToString(), fAlreadyHave ? ""have"" : ""new"", pfrom.GetId());\n",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478463149,478463149,test/functional/p2p_invalid_messages.py
jonatack,2020-08-27 17:54:49,Thanks Marco. Trying some stuff to see how the CI reacts to it.,https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478596148,478596148,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-08-27 17:59:40,"```suggestion\n        inv_with_signed_type = msg_inv([CInv(t=0xffffffff, h=1)])\n```\n\nSerialized -1 as signed integer is identical to 0xffffffff serialized as unsigned integer, so might as well use the latter",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478598930,478598930,test/functional/p2p_invalid_messages.py
jonatack,2020-08-27 18:14:26,"That was breaking this method in `messages.py::CInv` with `KeyError: 4294967295` from calling `CInv::typemap[4294967295]`\n```python\n    def __repr__(self):\n        return ""CInv(type=%s hash=%064x)"" \\n            % (self.typemap[abs(self.type)], self.hash)\n```",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478607004,478607004,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-08-27 18:22:06,"Even when adding type `0xffffffff: ""Error""`?",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478611091,478611091,test/functional/p2p_invalid_messages.py
jonatack,2020-08-27 19:07:05,"Done, simplified, good idea. LMK if we should drop the first test.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478635081,478635081,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-08-28 05:50:37,imo could drop the test framework self-test,https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478844800,478844800,test/functional/p2p_invalid_messages.py
jonatack,2020-08-28 08:15:18,"Done, but I think both of these tests only tested the framework change anyway.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r478926070,478926070,test/functional/p2p_invalid_messages.py
laanwj,2020-08-28 12:36:37,"I don't think this `abs(â€¦)` is correct. There should be no reason to take an absolute value here, convert, say, `-1` to `1`.\n\nmaybe\n```\nself.typemap.get(self.type, ""Error"")\n```\n",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479241586,479241586,test/functional/test_framework/messages.py
laanwj,2020-08-28 12:37:16,"I'd prefer to report anything that is unkonwn as ""Error"" instead of specifically adding `0xffffffff`  here.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479242384,479242384,test/functional/test_framework/messages.py
jonatack,2020-08-28 13:36:48,"Thanks for reviewing. The thought was to not allow shallow errors of type `KeyError` to hide deeper issues, like argument out of datatype range.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479297020,479297020,test/functional/test_framework/messages.py
jonatack,2020-08-28 13:44:42,"I'm not sure what to do here. This was only needed for the test. I tried a few [different tests](https://github.com/bitcoin/bitcoin/commit/6c0f4aefe373bb89188e91464326dabf0f9f3397); the first one doesn't require adding entries to `typemap`. I don't think any of the tests cover the `protocol.{h,cpp} CInv::type` type change, only the test framework change.",https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479304476,479304476,test/functional/test_framework/messages.py
jonatack,2020-08-28 18:14:29,Dropped this line.,https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479462943,479462943,test/functional/test_framework/messages.py
jonatack,2020-08-28 18:14:56,Dropped this line.,https://github.com/bitcoin/bitcoin/pull/19818#discussion_r479463133,479463133,test/functional/test_framework/messages.py
