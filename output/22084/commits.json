[
  {
    "sha": "6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzVmMTlkOWM0ZDI2N2M1NGY0ZGJjNGY5ZDY1MzcwZmYxZTA2MjVi",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-26T17:08:55Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T08:40:39Z"
      },
      "message": "[package] static_assert max package size >= max tx size",
      "tree": {
        "sha": "9c7ec09b571939a750a1ca543dbbf90bec9f8504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c7ec09b571939a750a1ca543dbbf90bec9f8504"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8115c2ad7dc87cc37662421875b728ffc29aaffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8115c2ad7dc87cc37662421875b728ffc29aaffd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8115c2ad7dc87cc37662421875b728ffc29aaffd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aef40660235fb8ba2d2b135f2fae102379855f79",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_POLICY_PACKAGES_H\n \n #include <consensus/validation.h>\n+#include <policy/policy.h>\n #include <primitives/transaction.h>\n \n #include <vector>\n@@ -14,6 +15,7 @@\n static constexpr uint32_t MAX_PACKAGE_COUNT{25};\n /** Default maximum total virtual size of transactions in a package in KvB. */\n static constexpr uint32_t MAX_PACKAGE_SIZE{101};\n+static_assert(MAX_PACKAGE_SIZE * WITNESS_SCALE_FACTOR * 1000 >= MAX_STANDARD_TX_WEIGHT);\n \n /** A \"reason\" why a package was invalid. It may be that one or more of the included\n  * transactions is invalid or the package itself violates our rules."
      }
    ]
  },
  {
    "sha": "7d91442461776e2ef240d7885f768b624de341a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDkxNDQyNDYxNzc2ZTJlZjI0MGQ3ODg1Zjc2OGI2MjRkZTM0MWE3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-26T17:12:06Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T08:40:39Z"
      },
      "message": "[rpc] reserve space in txns",
      "tree": {
        "sha": "c4311c25f8f9e07fd8f3a9c894a01c0276c57a68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4311c25f8f9e07fd8f3a9c894a01c0276c57a68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d91442461776e2ef240d7885f768b624de341a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d91442461776e2ef240d7885f768b624de341a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d91442461776e2ef240d7885f768b624de341a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d91442461776e2ef240d7885f768b624de341a7/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5f19d9c4d267c54f4dbc4f9d65370ff1e0625b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "526d262dce7b593fab8483806b722e81f9c4be91",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d91442461776e2ef240d7885f768b624de341a7/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d91442461776e2ef240d7885f768b624de341a7/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=7d91442461776e2ef240d7885f768b624de341a7",
        "patch": "@@ -951,6 +951,7 @@ static RPCHelpMan testmempoolaccept()\n                                              CFeeRate(AmountFromValue(request.params[1]));\n \n     std::vector<CTransactionRef> txns;\n+    txns.reserve(raw_transactions.size());\n     for (const auto& rawtx : raw_transactions.getValues()) {\n         CMutableTransaction mtx;\n         if (!DecodeHexTx(mtx, rawtx.get_str())) {"
      }
    ]
  },
  {
    "sha": "e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGVjYzYyMWJlNmFmZDMyNTJjMGY4MTQ3ZTQyYzNiNDkxOGY3ZjQ2",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-27T07:39:59Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T08:40:40Z"
      },
      "message": "[refactor] comment/naming improvements",
      "tree": {
        "sha": "aebff551b5491b48bc3a462cccf9b303dd2d0cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aebff551b5491b48bc3a462cccf9b303dd2d0cea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d91442461776e2ef240d7885f768b624de341a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d91442461776e2ef240d7885f768b624de341a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d91442461776e2ef240d7885f768b624de341a7"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 27,
      "deletions": 22
    },
    "files": [
      {
        "sha": "414c6637a52bb96782a834b1ef801297cdad8af3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -889,7 +889,7 @@ static RPCHelpMan testmempoolaccept()\n                 \"\\nReturns result of mempool acceptance tests indicating if raw transaction(s) (serialized, hex-encoded) would be accepted by mempool.\\n\"\n                 \"\\nIf multiple transactions are passed in, parents must come before children and package policies apply: the transactions cannot conflict with any mempool transactions or each other.\\n\"\n                 \"\\nIf one transaction fails, other transactions may not be fully validated (the 'allowed' key will be blank).\\n\"\n-                \"\\nThe maximum number of transactions allowed is 25 (MAX_PACKAGE_COUNT)\\n\"\n+                \"\\nThe maximum number of transactions allowed is \" + ToString(MAX_PACKAGE_COUNT) + \".\\n\"\n                 \"\\nThis checks if transactions violate the consensus or policy rules.\\n\"\n                 \"\\nSee sendrawtransaction call.\\n\",\n                 {\n@@ -905,7 +905,7 @@ static RPCHelpMan testmempoolaccept()\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n                         \"Returns results for each transaction in the same order they were passed in.\\n\"\n-                        \"It is possible for transactions to not be fully validated ('allowed' unset) if an earlier transaction failed.\\n\",\n+                        \"It is possible for transactions to not be fully validated ('allowed' unset) if another transaction failed.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {\n@@ -939,7 +939,6 @@ static RPCHelpMan testmempoolaccept()\n         UniValue::VARR,\n         UniValueType(), // VNUM or VSTR, checked inside AmountFromValue()\n     });\n-\n     const UniValue raw_transactions = request.params[0].get_array();\n     if (raw_transactions.size() < 1 || raw_transactions.size() > MAX_PACKAGE_COUNT) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER,\n@@ -972,8 +971,8 @@ static RPCHelpMan testmempoolaccept()\n     }();\n \n     UniValue rpc_result(UniValue::VARR);\n-    // We will check transaction fees we iterate through txns in order. If any transaction fee\n-    // exceeds maxfeerate, we will keave the rest of the validation results blank, because it\n+    // We will check transaction fees while we iterate through txns in order. If any transaction fee\n+    // exceeds maxfeerate, we will leave the rest of the validation results blank, because it\n     // doesn't make sense to return a validation result for a transaction if its ancestor(s) would\n     // not be submitted.\n     bool exit_early{false};"
      },
      {
        "sha": "e54948a8407945158aa8ed41e476326beaa5678a",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -28,8 +28,8 @@ struct MinerTestingSetup : public TestingSetup {\n     void TestPackageSelection(const CChainParams& chainparams, const CScript& scriptPubKey, const std::vector<CTransactionRef>& txFirst) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs);\n     bool TestSequenceLocks(const CTransaction& tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(::cs_main, m_node.mempool->cs)\n     {\n-        CCoinsViewMemPool viewMempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);\n-        return CheckSequenceLocks(m_node.chainman->ActiveChain().Tip(), viewMempool, tx, flags);\n+        CCoinsViewMemPool view_mempool(&m_node.chainman->ActiveChainstate().CoinsTip(), *m_node.mempool);\n+        return CheckSequenceLocks(m_node.chainman->ActiveChain().Tip(), view_mempool, tx, flags);\n     }\n     BlockAssembler AssemblerForTest(const CChainParams& params);\n };"
      },
      {
        "sha": "7c73a2d78d2b1a27d9a65ac1e5882f7af328060b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -515,9 +515,9 @@ void CTxMemPool::removeForReorg(CChainState& active_chainstate, int flags)\n         LockPoints lp = it->GetLockPoints();\n         assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n         bool validLP =  TestLockPointValidity(active_chainstate.m_chain, &lp);\n-        CCoinsViewMemPool viewMempool(&active_chainstate.CoinsTip(), *this);\n+        CCoinsViewMemPool view_mempool(&active_chainstate.CoinsTip(), *this);\n         if (!CheckFinalTx(active_chainstate.m_chain.Tip(), tx, flags)\n-            || !CheckSequenceLocks(active_chainstate.m_chain.Tip(), viewMempool, tx, flags, &lp, validLP)) {\n+            || !CheckSequenceLocks(active_chainstate.m_chain.Tip(), view_mempool, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             txToRemove.insert(it);"
      },
      {
        "sha": "ae4b16d3779196e83e2345cab2bd496c89117398",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -874,7 +874,8 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n public:\n     CCoinsViewMemPool(CCoinsView* baseIn, const CTxMemPool& mempoolIn);\n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n-    /** Add the coins created by this transaction. */\n+    /** Add the coins created by this transaction. These coins are only temporarily stored in\n+     * m_temp_added and cannot be flushed to the back end. Only used for package validation. */\n     void PackageAddTransaction(const CTransactionRef& tx);\n };\n "
      },
      {
        "sha": "6155006ee18f690c7be3f38b0bd109d191f88e2d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -482,7 +482,7 @@ class MemPoolAccept\n     /**\n     * Multiple transaction acceptance. Transactions may or may not be interdependent,\n     * but must not conflict with each other. Parents must come before children if any\n-    * dependencies exist, otherwise a TX_MISSING_INPUTS error will be returned.\n+    * dependencies exist.\n     */\n     PackageMempoolAcceptResult AcceptMultipleTransactions(const std::vector<CTransactionRef>& txns, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -1148,9 +1148,9 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n             return PackageMempoolAcceptResult(package_state, std::move(results));\n         }\n         // Make the coins created by this transaction available for subsequent transactions in the\n-        // package to spend. Since we already checked conflicts in the package and RBFs are\n-        // impossible, we don't need to track the coins spent. Note that this logic will need to be\n-        // updated if RBFs in packages are allowed in the future.\n+        // package to spend. Since we already checked conflicts in the package and we don't allow\n+        // replacements, we don't need to track the coins spent. Note that this logic will need to be\n+        // updated if package replace-by-fee is allowed in the future.\n         assert(args.disallow_mempool_conflicts);\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n@@ -1227,7 +1227,6 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n     const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n \n     // Uncache coins pertaining to transactions that were not submitted to the mempool.\n-    // Ensure the cache is still within its size limits.\n     for (const COutPoint& hashTx : coins_to_uncache) {\n         active_chainstate.CoinsTip().Uncache(hashTx);\n     }"
      },
      {
        "sha": "ec194d990c8ba2113636789a433288bad110d3d5",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ecc621be6afd3252c0f8147e42c3b4918f7f46/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "patch": "@@ -234,11 +234,13 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n                                        bool bypass_limits, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n-* Atomically test acceptance of a package. If the package only contains one tx, package rules still apply.\n+* Atomically test acceptance of a package. If the package only contains one tx, package rules still\n+* apply. Package validation does not allow BIP125 replacements, so the transaction(s) cannot spend\n+* the same inputs as any transaction in the mempool.\n * @param[in]    txns                Group of transactions which may be independent or contain\n-*                                   parent-child dependencies. The transactions must not conflict, i.e.\n-*                                   must not spend the same inputs, even if it would be a valid BIP125\n-*                                   replace-by-fee. Parents must appear before children.\n+*                                   parent-child dependencies. The transactions must not conflict\n+*                                   with each other, i.e., must not spend the same inputs. If any\n+*                                   dependencies exist, parents must appear before children.\n * @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n * If a transaction fails, validation will exit early and some results may be missing.\n */\n@@ -269,9 +271,13 @@ bool TestLockPointValidity(CChain& active_chain, const LockPoints* lp) EXCLUSIVE\n  * Check if transaction will be BIP68 final in the next block to be created on top of tip.\n  * @param[in]   tip             Chain tip to check tx sequence locks against. For example,\n  *                              the tip of the current active chain.\n- * @param[in]   coins_view      Any CCoinsView that provides access to the relevant coins\n- *                              for checking sequence locks. Any CCoinsView can be passed in;\n- *                              it is assumed to be consistent with the tip.\n+ * @param[in]   coins_view      Any CCoinsView that provides access to the relevant coins for\n+ *                              checking sequence locks. For example, it can be a CCoinsViewCache\n+ *                              that isn't connected to anything but contains all the relevant\n+ *                              coins, or a CCoinsViewMemPool that is connected to the\n+ *                              mempool and chainstate UTXO set. In the latter case, the caller is\n+ *                              responsible for holding the appropriate locks to ensure that\n+ *                              calls to GetCoin() return correct coins.\n  * Simulates calling SequenceLocks() with data from the tip passed in.\n  * Optionally stores in LockPoints the resulting height and time calculated and the hash\n  * of the block needed for calculation or skips the calculation and uses the LockPoints"
      }
    ]
  },
  {
    "sha": "5cac95cd15da04b83afa1d31a43be9f5b30a1827",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2FjOTVjZDE1ZGEwNGI4M2FmYTFkMzFhNDNiZTlmNWIzMGExODI3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-05-26T17:02:00Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T08:52:50Z"
      },
      "message": "disallow_mempool_conflicts -> allow_bip125_replacement and check earlier",
      "tree": {
        "sha": "61241126ddc4a786d303a45a56aaac921c59f7b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61241126ddc4a786d303a45a56aaac921c59f7b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cac95cd15da04b83afa1d31a43be9f5b30a1827",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cac95cd15da04b83afa1d31a43be9f5b30a1827",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cac95cd15da04b83afa1d31a43be9f5b30a1827",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cac95cd15da04b83afa1d31a43be9f5b30a1827/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ecc621be6afd3252c0f8147e42c3b4918f7f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ecc621be6afd3252c0f8147e42c3b4918f7f46"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "66756738c6dbb77c408a8877d13569b8c82197bc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cac95cd15da04b83afa1d31a43be9f5b30a1827/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cac95cd15da04b83afa1d31a43be9f5b30a1827/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5cac95cd15da04b83afa1d31a43be9f5b30a1827",
        "patch": "@@ -472,8 +472,10 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n-        /** Disable BIP125 RBFing; disallow all conflicts with mempool transactions. */\n-        const bool disallow_mempool_conflicts;\n+        /** Whether we allow transactions to replace mempool transactions by BIP125 rules. If false,\n+         * any transaction spending the same inputs as a transaction in the mempool is considered\n+         * a conflict. */\n+        const bool m_allow_bip125_replacement{true};\n     };\n \n     // Single transaction acceptance\n@@ -619,6 +621,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     {\n         const CTransaction* ptxConflicting = m_pool.GetConflictTx(txin.prevout);\n         if (ptxConflicting) {\n+            if (!args.m_allow_bip125_replacement) {\n+                // Transaction conflicts with a mempool tx, but we're not allowing replacements.\n+                return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"bip125-replacement-disallowed\");\n+            }\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n                 // Allow opt-out of transaction replacement by setting\n@@ -642,7 +648,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n                         break;\n                     }\n                 }\n-                if (fReplacementOptOut || args.disallow_mempool_conflicts) {\n+                if (fReplacementOptOut) {\n                     return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"txn-mempool-conflict\");\n                 }\n \n@@ -1151,7 +1157,7 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         // package to spend. Since we already checked conflicts in the package and we don't allow\n         // replacements, we don't need to track the coins spent. Note that this logic will need to be\n         // updated if package replace-by-fee is allowed in the future.\n-        assert(args.disallow_mempool_conflicts);\n+        assert(!args.m_allow_bip125_replacement);\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n@@ -1185,7 +1191,7 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n {\n     std::vector<COutPoint> coins_to_uncache;\n     MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache,\n-                                   test_accept, /* disallow_mempool_conflicts */ false };\n+                                   test_accept, /* m_allow_bip125_replacement */ true };\n \n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n@@ -1222,7 +1228,7 @@ PackageMempoolAcceptResult ProcessNewPackage(CChainState& active_chainstate, CTx\n     std::vector<COutPoint> coins_to_uncache;\n     const CChainParams& chainparams = Params();\n     MemPoolAccept::ATMPArgs args { chainparams, GetTime(), /* bypass_limits */ false, coins_to_uncache,\n-                                   test_accept, /* disallow_mempool_conflicts */ true };\n+                                   test_accept, /* m_allow_bip125_replacement */ false };\n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const PackageMempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptMultipleTransactions(package, args);\n "
      },
      {
        "sha": "d0848d9bd6698ccea54bd4712c6bad1e028ccecc",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cac95cd15da04b83afa1d31a43be9f5b30a1827/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cac95cd15da04b83afa1d31a43be9f5b30a1827/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=5cac95cd15da04b83afa1d31a43be9f5b30a1827",
        "patch": "@@ -354,7 +354,8 @@ def test_rbf(self):\n         # This transaction is a valid BIP125 replace-by-fee\n         assert testres_rbf_single[0][\"allowed\"]\n         testres_rbf_package = self.independent_txns_testres_blank + [{\n-            \"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"allowed\": False, \"reject-reason\": \"txn-mempool-conflict\"\n+            \"txid\": replacement_tx.rehash(), \"wtxid\": replacement_tx.getwtxid(), \"allowed\": False,\n+            \"reject-reason\": \"bip125-replacement-disallowed\"\n         }]\n         self.assert_testres_equal(self.independent_txns_hex + [signed_replacement_tx[\"hex\"]], testres_rbf_package)\n "
      }
    ]
  },
  {
    "sha": "ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTg2MmQ2ZWZiNGMzYzAxZTU1ZjBkNWQ3YTgyY2NlNzUzMjNjZjQw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T15:19:29Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-06-02T16:26:44Z"
      },
      "message": "MOVEONLY: context-free package policies\n\nCo-authored-by: ariard <antoine.riard@gmail.com>",
      "tree": {
        "sha": "65d9325705de6dd20170cb36e778cf66716200e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65d9325705de6dd20170cb36e778cf66716200e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cac95cd15da04b83afa1d31a43be9f5b30a1827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cac95cd15da04b83afa1d31a43be9f5b30a1827",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cac95cd15da04b83afa1d31a43be9f5b30a1827"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 76,
      "deletions": 55
    },
    "files": [
      {
        "sha": "7f872e2985c72a0b76daabed3993bab6fd0b4337",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
        "patch": "@@ -348,6 +348,7 @@ libbitcoin_server_a_SOURCES = \\\n   node/ui_interface.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/packages.cpp \\\n   policy/rbf.cpp \\\n   policy/settings.cpp \\\n   pow.cpp \\"
      },
      {
        "sha": "cfd05399655d07f93494b959463d83f7d471df0d",
        "filename": "src/policy/packages.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/policy/packages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/policy/packages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.cpp?ref=ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/validation.h>\n+#include <policy/packages.h>\n+#include <primitives/transaction.h>\n+#include <uint256.h>\n+#include <util/hasher.h>\n+\n+#include <numeric>\n+#include <unordered_set>\n+\n+bool CheckPackage(const Package& txns, PackageValidationState& state)\n+{\n+    const unsigned int package_count = txns.size();\n+\n+    if (package_count > MAX_PACKAGE_COUNT) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n+    }\n+\n+    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n+                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n+    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n+    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n+        return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n+    }\n+\n+    // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n+    // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n+    // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n+    // spend nonexistent coins).\n+    std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n+    std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n+                   [](const auto& tx) { return tx->GetHash(); });\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n+                // The parent is a subsequent transaction in the package.\n+                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n+            }\n+        }\n+        later_txids.erase(tx->GetHash());\n+    }\n+\n+    // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n+    std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n+    for (const auto& tx : txns) {\n+        for (const auto& input : tx->vin) {\n+            if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n+                // This input is also present in another tx in the package.\n+                return state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n+            }\n+        }\n+        // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n+        // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n+        // and we want to report that from CheckTransaction instead.\n+        std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n+                       [](const auto& input) { return input.prevout; });\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "6b7ac3e450ebcfe58d18c0bf070e061030ad8199",
        "filename": "src/policy/packages.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/policy/packages.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/policy/packages.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/packages.h?ref=ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
        "patch": "@@ -33,4 +33,12 @@ using Package = std::vector<CTransactionRef>;\n \n class PackageValidationState : public ValidationState<PackageValidationResult> {};\n \n+/** Context-free package policy checks:\n+ * 1. The number of transactions cannot exceed MAX_PACKAGE_COUNT.\n+ * 2. The total virtual size cannot exceed MAX_PACKAGE_SIZE.\n+ * 3. If any dependencies exist between transactions, parents must appear before children.\n+ * 4. Transactions cannot conflict, i.e., spend the same inputs.\n+ */\n+bool CheckPackage(const Package& txns, PackageValidationState& state);\n+\n #endif // BITCOIN_POLICY_PACKAGES_H"
      },
      {
        "sha": "12557326cc59ba8fb0834801daf2b428e5fab9fb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 55,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee862d6efb4c3c01e55f0d5d7a82cce75323cf40/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ee862d6efb4c3c01e55f0d5d7a82cce75323cf40",
        "patch": "@@ -1083,65 +1083,15 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n {\n     AssertLockHeld(cs_main);\n \n+    // These context-free package limits can be done before taking the mempool lock.\n     PackageValidationState package_state;\n-    const unsigned int package_count = txns.size();\n+    if (!CheckPackage(txns, package_state)) return PackageMempoolAcceptResult(package_state, {});\n \n-    // These context-free package limits can be checked before taking the mempool lock.\n-    if (package_count > MAX_PACKAGE_COUNT) {\n-        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-many-transactions\");\n-        return PackageMempoolAcceptResult(package_state, {});\n-    }\n-\n-    const int64_t total_size = std::accumulate(txns.cbegin(), txns.cend(), 0,\n-                               [](int64_t sum, const auto& tx) { return sum + GetVirtualTransactionSize(*tx); });\n-    // If the package only contains 1 tx, it's better to report the policy violation on individual tx size.\n-    if (package_count > 1 && total_size > MAX_PACKAGE_SIZE * 1000) {\n-        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-too-large\");\n-        return PackageMempoolAcceptResult(package_state, {});\n-    }\n-\n-    // Construct workspaces and check package policies.\n     std::vector<Workspace> workspaces{};\n-    workspaces.reserve(package_count);\n-    {\n-        std::unordered_set<uint256, SaltedTxidHasher> later_txids;\n-        std::transform(txns.cbegin(), txns.cend(), std::inserter(later_txids, later_txids.end()),\n-                       [](const auto& tx) { return tx->GetHash(); });\n-        // Require the package to be sorted in order of dependency, i.e. parents appear before children.\n-        // An unsorted package will fail anyway on missing-inputs, but it's better to quit earlier and\n-        // fail on something less ambiguous (missing-inputs could also be an orphan or trying to\n-        // spend nonexistent coins).\n-        for (const auto& tx : txns) {\n-            for (const auto& input : tx->vin) {\n-                if (later_txids.find(input.prevout.hash) != later_txids.end()) {\n-                    // The parent is a subsequent transaction in the package.\n-                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-not-sorted\");\n-                    return PackageMempoolAcceptResult(package_state, {});\n-                }\n-            }\n-            later_txids.erase(tx->GetHash());\n-            workspaces.emplace_back(Workspace(tx));\n-        }\n-    }\n+    workspaces.reserve(txns.size());\n+    std::transform(txns.cbegin(), txns.cend(), std::back_inserter(workspaces),\n+                   [](const auto& tx) { return Workspace(tx); });\n     std::map<const uint256, const MempoolAcceptResult> results;\n-    {\n-        // Don't allow any conflicting transactions, i.e. spending the same inputs, in a package.\n-        std::unordered_set<COutPoint, SaltedOutpointHasher> inputs_seen;\n-        for (const auto& tx : txns) {\n-            for (const auto& input : tx->vin) {\n-                if (inputs_seen.find(input.prevout) != inputs_seen.end()) {\n-                    // This input is also present in another tx in the package.\n-                    package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"conflict-in-package\");\n-                    return PackageMempoolAcceptResult(package_state, {});\n-                }\n-            }\n-            // Batch-add all the inputs for a tx at a time. If we added them 1 at a time, we could\n-            // catch duplicate inputs within a single tx.  This is a more severe, consensus error,\n-            // and we want to report that from CheckTransaction instead.\n-            std::transform(tx->vin.cbegin(), tx->vin.cend(), std::inserter(inputs_seen, inputs_seen.end()),\n-                           [](const auto& input) { return input.prevout; });\n-        }\n-    }\n \n     LOCK(m_pool.cs);\n "
      }
    ]
  }
]