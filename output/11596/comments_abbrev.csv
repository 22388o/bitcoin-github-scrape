practicalswift,2017-11-02T21:10:40Z,@sdaftuar @morcos Thanks for reviewing. Suggested changes incorporated! :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-341559204,341559204,
promag,2017-11-06T16:19:32Z,"@practicalswift following https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149104246, I believe a7eb21a is the fix.",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342200591,342200591,
practicalswift,2017-11-06T16:38:35Z,"@promag What is the reasoning behind the patch (a7eb21a6f64cc042e695f9f483e49a5adaed7c4e) – what are the underlying locking requirements (exact variables being guarded)? Your patch is likely correct, but I'm trying to understand exactly why :-)",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342206935,342206935,
practicalswift,2017-11-06T20:48:40Z,@TheBlueMatt Thanks for reviewing. Feedback addressed.,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342281492,342281492,
practicalswift,2017-11-07T18:09:31Z,Reverting the patch suggested by @promag. The locking is now made down in `CreateTransaction` as suggested by @TheBlueMatt.,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342571214,342571214,
TheBlueMatt,2017-11-07T18:25:20Z,"utACK 2e441c91e7806e6ae781ae0b0aefea958079d15b\nThanks!",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-342575790,342575790,
practicalswift,2017-11-10T19:05:55Z,"Added commit 9b3d094894350933342b5e352785cfdd9f2d03fe addressing @luke-jr:s feedback.\n\nPlease re-review :-)",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343558962,343558962,
TheBlueMatt,2017-11-10T21:10:40Z,@practicalswift why did you rebase this? It makes reviewing something that was previously reviewed much more difficult. Mind squashing the two commits? There seems to be no reason to have them separate.,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343587133,343587133,
practicalswift,2017-11-12T15:44:22Z,"Now squashed into one commit. Please re-review! :-)\n\n@TheBlueMatt The reason for the rebase was that I wanted to get rebased on top of 76ea17c7964c15dd90e10c2c257cdeb5847b3d69 (IIRC) in order to get the build to pass – I always compile with `-Werror=thread-safety-analysis` :-)\n\nThe reason for the two commits was to allow separate review for the latter commit in the case that I had misunder",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-343745987,343745987,
practicalswift,2017-11-23T12:24:15Z,"Updated:\n* Added a few more missing `cs_main` locks.\n* Added a commit with the Clang thread safety analysis annotation `chainActive GUARDED_BY(cs_main)` and the corresponding `EXCLUSIVE_LOCKS_REQUIRED(…)` annotations that follow from that.\n\nPlease review :-)",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-346604992,346604992,
TheBlueMatt,2017-11-25T14:49:49Z,"The addition of annotations here isn't complete - do you not need to add a EXCLUSIVE_LOCKS_REQUIRED annotation to the declarations, not the definitions of functions?\n\nOn November 23, 2017 4:24:23 AM PST, practicalswift <notifications@github.com> wrote:\n>Updated:\n>* Added a few more missing `cs_main` locks.\n>* Added a commit with the Clang thread safety analysis annotations\n>`chainActive GUAR",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-346944937,346944937,
practicalswift,2017-11-29T22:10:34Z,"I've now pushed an updated version adding [a missing `OpenWallets()` lock](https://github.com/bitcoin/bitcoin/pull/11596/files#diff-c865a8939105e6350a50af02766291b7R1575) and some additional annotations.\n\n@TheBlueMatt - to make the annotations 100 % complete and moved to the declarations we'll have to handle some header files for which the existence of `cs_main` is currently not known. More sp",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-348013696,348013696,
TheBlueMatt,2017-12-04T17:52:05Z,"@practicalswift No, we aren't adding the annotations just to add the annotations. In order for them to be really effective and provide the kind of guarantees we want they need to be listed everywhere the function which needs the annotation is declared, not just ate the definition. I'd rather we leave them out than add them just to function declarations. The annotations are going to be highly infec",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349045570,349045570,
practicalswift,2017-12-04T19:14:37Z,@TheBlueMatt Is that an utACK for this PR as-is? :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349073442,349073442,
TheBlueMatt,2017-12-04T19:15:37Z,"If you remove the annotation commit to revert to where people had previously reviewed this, I'm happy to review again.",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349073739,349073739,
practicalswift,2017-12-04T19:21:01Z,@TheBlueMatt Reverted and pushed. Now only keeping the lock addition (removed adding annotations). Looks good? :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-349075417,349075417,
practicalswift,2018-02-22T20:52:49Z,@TheBlueMatt Thanks for reviewing! Feedback address. Would you mind re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-367818128,367818128,
practicalswift,2018-03-02T07:24:48Z,@luke-jr Good point! Comment updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-369843629,369843629,
MarcoFalke,2018-03-02T17:22:32Z,"Since https://github.com/bitcoin/bitcoin/pull/11226/files#diff-349fbb003d5ae550a2e8fa658e475880R447 is closed, could you amend the second commit to include the clang annotation?",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-369989865,369989865,
practicalswift,2018-03-12T20:12:04Z,@MarcoFalke Good idea! Annotations added. Please review :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372446760,372446760,
luke-jr,2018-03-13T21:06:35Z,"Why did you un-remove the double-lock at ""The block database contains a block which appears to be from the future.""?",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372818415,372818415,
practicalswift,2018-03-13T21:15:21Z,"@luke-jr I'm actually investigating a dead-lock right now which seems to have been introduced during the last rebase. Which double-lock are you referring to? Do you have a diff?\n\nI'm investigating as we speak.",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372820974,372820974,
practicalswift,2018-03-13T21:34:28Z,"@luke-jr You mean this one?\n\n```\ndiff --git a/src/init.cpp b/src/init.cpp\nindex e7544e8..f18a947 100644\n--- a/src/init.cpp\n+++ b/src/init.cpp\n@@ -1429,7 +1429,6 @@ bool AppInitMain()\n         nStart = GetTimeMillis();\n         do {\n             try {\n-                LOCK(cs_main);\n                 UnloadBlockIndex();\n                 pcoinsTip.reset();\n                ",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372826373,372826373,
luke-jr,2018-03-14T03:01:06Z,"Search init.cpp for ""`The block database contains a block which appears to be from the future.`"". It grabs cs_main immediately before that. But cs_main is already held here now.",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-372889044,372889044,
practicalswift,2018-03-19T20:37:10Z,"I've now reworked this PR and split it up in three commits:\n* Add missing `LOCK(cs_main)`:s where required for `chainActive` access\n* Annotation: Add `chainActive GUARDED_BY(cs_main)` – does **not** change run-time behaviour\n* Annotation: Add `EXCLUSIVE_LOCKS_REQUIRED(...)` as implied by the `chainActive` guard  – does **not** change run-time behaviour\n\nPlease re-review :-)\n\n/cc @sda",https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-374365825,374365825,
practicalswift,2018-04-03T11:39:58Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-378220374,378220374,
practicalswift,2018-04-09T13:13:05Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-379746901,379746901,
practicalswift,2018-04-14T13:14:09Z,Rebased! Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-381328398,381328398,
practicalswift,2018-04-26T04:22:58Z,Rebased and updated. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-384508766,384508766,
practicalswift,2018-04-30T16:37:36Z,Closing. Will add new PR based on #11652 and #13083.,https://github.com/bitcoin/bitcoin/pull/11596#issuecomment-385454897,385454897,
sdaftuar,2017-11-02T17:53:17Z,"I think we can just add an `AssertLockHeld(cs_main)` to the top of this function -- this function only has two callers, both of which lock cs_main before calling.\n\nEDIT: actually one of the callers does `AssertLockHeld(cs_main)`.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r148611961,148611961,src/validation.cpp
morcos,2017-11-02T18:02:38Z,I think we should just get rid of this assert.  We can't guarantee chainActive height will not go down.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r148614708,148614708,src/wallet/wallet.cpp
promag,2017-11-03T22:02:56Z,"Remove, all callers have `cs_main` locked, assert lock is held instead. Ping @ryanofsky as he says the goal is to removed recursive locks.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r148902549,148902549,src/wallet/wallet.cpp
practicalswift,2017-11-06T10:37:10Z,@promag Thanks! Now fixed.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149043586,149043586,src/wallet/wallet.cpp
practicalswift,2017-11-06T15:04:55Z,@promag I'm getting an assertion failure when running `test/functional/test_runner.py` with your suggested patch applied. Does it pass for you? Reverting to previous version for now.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149102370,149102370,src/wallet/wallet.cpp
promag,2017-11-06T15:11:13Z,I'll check.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149104246,149104246,src/wallet/wallet.cpp
TheBlueMatt,2017-11-06T19:46:00Z,nit: care to do the serialization of bitmap/outs outside of cs_main (same below)?,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149182940,149182940,src/rest.cpp
TheBlueMatt,2017-11-06T20:09:35Z,"Ugh, can we not add more cs_main requirements - if the goal is to resolve the chainActive.Height() issue only then please add the cs_main around just that, its not gonna hurt anything to not hold cs_main for the duration of this function, and we really should be trying to *remove* cs_main from this function, not go the other way.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149189367,149189367,src/wallet/wallet.cpp
TheBlueMatt,2017-11-07T16:51:47Z,"Please no. Can we instead add the locking in CreateTransaction itself? We need to be pushing locks down, especially when it comes to cs_main, not putting more locks in RPC functions.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149434251,149434251,src/wallet/rpcwallet.cpp
luke-jr,2017-11-10T16:22:33Z,"This isn't sufficient I think. We don't want to allow `chainActive` to change from when we get the results, to when we identify the chain they're for. So extract this info above in the first lock...",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r150277341,150277341,src/rest.cpp
luke-jr,2017-11-10T16:22:48Z,Same,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r150277416,150277416,src/rest.cpp
luke-jr,2017-11-10T16:23:02Z,Same.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r150277488,150277488,src/rest.cpp
promag,2017-11-10T16:49:00Z,Which first lock?,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r150285509,150285509,src/rest.cpp
practicalswift,2017-11-10T17:31:26Z,"@luke-jr Thanks for reviewing. Do you mean like this?\n\n```patch\ndiff --git a/src/rest.cpp b/src/rest.cpp\nindex 0ed11e6..649059e 100644\n--- a/src/rest.cpp\n+++ b/src/rest.cpp\n@@ -479,6 +479,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() ",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r150294725,150294725,src/rest.cpp
TheBlueMatt,2017-12-08T16:03:04Z,I'd kinda prefer we push this lock down into wallet/init. Seemd weird to export the cs_main requirement to OpenWallets.,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r155811472,155811472,src/init.cpp
TheBlueMatt,2017-12-08T16:03:59Z,"There are a ton of cs_main-required things in this block, seems weird to put this all the way down here. For static-analysis purposes, its probably best to just take cs_main at the top of the try{} block and hold it through the whole chain-load process.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r155811677,155811677,src/init.cpp
luke-jr,2018-03-01T15:50:23Z,This comment needs to be updated at least. Preferably with an explanation why you're adding a lock here...,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r171601421,171601421,src/init.cpp
practicalswift,2018-03-20T07:09:34Z,@promag See @TheBlueMatt's comment about `cs_main` locking in `CWallet::CreateTransaction(…)`: https://github.com/bitcoin/bitcoin/pull/11596#discussion_r149189367,https://github.com/bitcoin/bitcoin/pull/11596#discussion_r175670143,175670143,src/wallet/wallet.cpp
TheBlueMatt,2018-04-17T18:12:52Z,"Can you just take both locks instead of adding a new scope and lots of diff lines? Its in a test, locks shouldn't matter much.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r182177420,182177420,src/wallet/test/wallet_tests.cpp
TheBlueMatt,2018-04-17T18:14:37Z,"a) annotations need to go in the header file, not the cpp file. b) I dont think we can put locks required in the interfaces file, as it may become a process boundary. The callee will have to take the lock itself.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r182178018,182178018,src/interfaces/wallet.cpp
ryanofsky,2018-04-17T18:41:42Z,"> annotations need to go in the header file\n\nThis is ok, these are just internal functions (in an anonymous namespace) not shared or exposed in headers.",https://github.com/bitcoin/bitcoin/pull/11596#discussion_r182185882,182185882,src/interfaces/wallet.cpp
