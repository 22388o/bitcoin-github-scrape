[
  {
    "sha": "d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDQwOTk2MWNiZjBhODgxMGVlOGNhOTI4M2NhMDRjYTFkZWE0ZGQy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-19T13:55:42Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-26T03:53:51Z"
      },
      "message": "Locking annotations: Add missing cs_main locks (when accessing chainActive)",
      "tree": {
        "sha": "81d1a54c2e8ae06d62b233ec68478c2a3b7051ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81d1a54c2e8ae06d62b233ec68478c2a3b7051ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a07e8caa5d5000286604458e6887f57fec7fdcbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a07e8caa5d5000286604458e6887f57fec7fdcbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a07e8caa5d5000286604458e6887f57fec7fdcbb"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 71,
      "deletions": 24
    },
    "files": [
      {
        "sha": "ab31d85ef966867e8d2a327e4af7e29829a01d79",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 6,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "patch": "@@ -1649,12 +1649,18 @@ bool AppInitMain()\n     if (!CheckDiskSpace() && !CheckDiskSpace(0, true))\n         return false;\n \n-    // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n-    // No locking, as this happens before any background thread is started.\n-    if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n-    } else {\n-        fHaveGenesis = true;\n+    // Either install a handler to notify us when genesis activates, or set\n+    // fHaveGenesis directly.\n+    // Locking is not needed as this happens before any background thread is\n+    // started. A lock is added nevertheless to please Clang's thread safety\n+    // analysis (chainActive is guarded by cs_main).\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Tip() == nullptr) {\n+            uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n+        } else {\n+            fHaveGenesis = true;\n+        }\n     }\n \n     if (gArgs.IsArgSet(\"-blocknotify\"))"
      },
      {
        "sha": "48e735d2e9c003c0d6eab5f9bcd3cc97fbee5e5c",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "patch": "@@ -491,6 +491,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     std::string bitmapStringRepresentation;\n     std::vector<bool> hits;\n     bitmap.resize((vOutPoints.size() + 7) / 8);\n+    int chainActiveHeight;\n+    uint256 chainActiveTipBlockHash;\n     {\n         auto process_utxos = [&vOutPoints, &outs, &hits](const CCoinsView& view, const CTxMemPool& mempool) {\n             for (const COutPoint& vOutPoint : vOutPoints) {\n@@ -517,14 +519,17 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             bitmapStringRepresentation.append(hit ? \"1\" : \"0\"); // form a binary string representation (human-readable for json output)\n             bitmap[i / 8] |= ((uint8_t)hit) << (i % 8);\n         }\n+\n+        chainActiveHeight = chainActive.Height();\n+        chainActiveTipBlockHash = chainActive.Tip()->GetBlockHash();\n     }\n \n     switch (rf) {\n     case RetFormat::BINARY: {\n         // serialize data\n         // use exact same output as mentioned in Bip64\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainActiveHeight << chainActiveTipBlockHash << bitmap << outs;\n         std::string ssGetUTXOResponseString = ssGetUTXOResponse.str();\n \n         req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n@@ -534,7 +539,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n     case RetFormat::HEX: {\n         CDataStream ssGetUTXOResponse(SER_NETWORK, PROTOCOL_VERSION);\n-        ssGetUTXOResponse << chainActive.Height() << chainActive.Tip()->GetBlockHash() << bitmap << outs;\n+        ssGetUTXOResponse << chainActiveHeight << chainActiveTipBlockHash << bitmap << outs;\n         std::string strHex = HexStr(ssGetUTXOResponse.begin(), ssGetUTXOResponse.end()) + \"\\n\";\n \n         req->WriteHeader(\"Content-Type\", \"text/plain\");\n@@ -547,8 +552,8 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n \n         // pack in some essentials\n         // use more or less the same output as mentioned in Bip64\n-        objGetUTXOResponse.pushKV(\"chainHeight\", chainActive.Height());\n-        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActive.Tip()->GetBlockHash().GetHex());\n+        objGetUTXOResponse.pushKV(\"chainHeight\", chainActiveHeight);\n+        objGetUTXOResponse.pushKV(\"chaintipHash\", chainActiveTipBlockHash.GetHex());\n         objGetUTXOResponse.pushKV(\"bitmap\", bitmapStringRepresentation);\n \n         UniValue utxos(UniValue::VARR);"
      },
      {
        "sha": "84ca4a409a3f47f9ea4f8af19bb618a9a74b7158",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "patch": "@@ -66,26 +66,38 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[0]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Test 3: ... and should be rejected if spend2 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Final sanity test: first spend in mempool, second in block, that's OK:\n     std::vector<CMutableTransaction> oneSpend;\n     oneSpend.push_back(spends[0]);\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    }\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n     BOOST_CHECK_EQUAL(mempool.size(), 0U);\n@@ -219,7 +231,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n     CBlock block;\n \n     block = CreateAndProcessBlock({spend_tx}, p2pk_scriptPubKey);\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    }\n     BOOST_CHECK(pcoinsTip->GetBestBlock() == block.GetHash());\n \n     LOCK(cs_main);"
      },
      {
        "sha": "5a1bfd8a0c062bb23d6efc02cc8ddeadd6db9e14",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "patch": "@@ -36,12 +36,16 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* const nullBlock = nullptr;\n-    CBlockIndex* oldTip = chainActive.Tip();\n+    CBlockIndex* oldTip;\n+    {\n+        LOCK(cs_main);\n+        oldTip = chainActive.Tip();\n+    }\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = chainActive.Tip();\n \n     LOCK(cs_main);\n+    CBlockIndex* newTip = chainActive.Tip();\n \n     // Verify ScanForWalletTransactions picks up transactions in both the old\n     // and new block files.\n@@ -117,7 +121,11 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n-    const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n+    int64_t BLOCK_TIME;\n+    {\n+        LOCK(cs_main);\n+        BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n+    }\n     SetMockTime(BLOCK_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n@@ -293,7 +301,10 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         int changePos = -1;\n         std::string error;\n         CCoinControl dummy;\n-        BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, reservekey, fee, changePos, error, dummy));\n+        {\n+            LOCK(cs_main);\n+            BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, reservekey, fee, changePos, error, dummy));\n+        }\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(tx, {}, {}, {}, reservekey, nullptr, state));\n         CMutableTransaction blocktx;\n@@ -302,10 +313,16 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             blocktx = CMutableTransaction(*wallet->mapWallet.at(tx->GetHash()).tx);\n         }\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-        LOCK(wallet->cs_wallet);\n-        auto it = wallet->mapWallet.find(tx->GetHash());\n-        BOOST_CHECK(it != wallet->mapWallet.end());\n-        it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        std::map<uint256, CWalletTx>::iterator it;\n+        {\n+            LOCK(wallet->cs_wallet);\n+            it = wallet->mapWallet.find(tx->GetHash());\n+            BOOST_CHECK(it != wallet->mapWallet.end());\n+        }\n+        {\n+            LOCK(cs_main);\n+            it->second.SetMerkleBranch(chainActive.Tip(), 1);\n+        }\n         return it->second;\n     }\n "
      },
      {
        "sha": "00aaf5899b4e4289b345645c6bdc6273a7eca854",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "patch": "@@ -2736,7 +2736,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     // enough, that fee sniping isn't a problem yet, but by implementing a fix\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n-    txNew.nLockTime = chainActive.Height();\n+    {\n+        LOCK(cs_main);\n+        txNew.nLockTime = chainActive.Height();\n+    }\n \n     // Secondly occasionally randomly pick a nLockTime even further back, so\n     // that transactions that are delayed after signing for whatever reason,\n@@ -4032,6 +4035,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n             return nullptr;\n         }\n \n+        LOCK(cs_main);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n     } else if (gArgs.IsArgSet(\"-usehd\")) {\n         bool useHD = gArgs.GetBoolArg(\"-usehd\", true);"
      }
    ]
  },
  {
    "sha": "77b7b06d7f88a494f754220c646e80af0d13405e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2I3YjA2ZDdmODhhNDk0Zjc1NDIyMGM2NDZlODBhZjBkMTM0MDVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-20T07:04:28Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-26T03:53:51Z"
      },
      "message": "Remove invalid assertion: We can't guarantee chainActive height will not go down\n\nAs noted by @marcos in https://github.com/bitcoin/bitcoin/pull/11596#discussion_r148614708",
      "tree": {
        "sha": "d01c1cefa0052ea220d108faef57b04017338d7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d01c1cefa0052ea220d108faef57b04017338d7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77b7b06d7f88a494f754220c646e80af0d13405e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b7b06d7f88a494f754220c646e80af0d13405e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77b7b06d7f88a494f754220c646e80af0d13405e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b7b06d7f88a494f754220c646e80af0d13405e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4409961cbf0a8810ee8ca9283ca04ca1dea4dd2"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "25b309c7a08269aef26e38a477255635caaa59da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77b7b06d7f88a494f754220c646e80af0d13405e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77b7b06d7f88a494f754220c646e80af0d13405e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=77b7b06d7f88a494f754220c646e80af0d13405e",
        "patch": "@@ -2748,7 +2748,6 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     if (GetRandInt(10) == 0)\n         txNew.nLockTime = std::max(0, (int)txNew.nLockTime - GetRandInt(100));\n \n-    assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;"
      }
    ]
  },
  {
    "sha": "5ff77fb571346f8cf716f4a195939e6ca36eef80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmY3N2ZiNTcxMzQ2ZjhjZjcxNmY0YTE5NTkzOWU2Y2EzNmVlZjgw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-19T16:54:24Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-26T03:55:07Z"
      },
      "message": "Locking annotations: Add EXCLUSIVE_LOCKS_REQUIRED(...) annotations that follow from \"chainActive GUARDED_BY(cs_main)\"",
      "tree": {
        "sha": "4768146af64ffebf8be6ed64690e8131e42c5cdb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4768146af64ffebf8be6ed64690e8131e42c5cdb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ff77fb571346f8cf716f4a195939e6ca36eef80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff77fb571346f8cf716f4a195939e6ca36eef80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ff77fb571346f8cf716f4a195939e6ca36eef80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff77fb571346f8cf716f4a195939e6ca36eef80/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77b7b06d7f88a494f754220c646e80af0d13405e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77b7b06d7f88a494f754220c646e80af0d13405e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77b7b06d7f88a494f754220c646e80af0d13405e"
      }
    ],
    "stats": {
      "total": 178,
      "additions": 99,
      "deletions": 79
    },
    "files": [
      {
        "sha": "fa1f8a48f759ee2c1549c4368860e4e1180a2143",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -57,7 +57,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n };\n \n //! Construct wallet tx struct.\n-WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n+WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -85,7 +85,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -105,7 +105,7 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n+WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];"
      },
      {
        "sha": "3f9081f2538ed726945b36abef890159aa5933b0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -454,7 +454,7 @@ bool TipMayBeStale(const Consensus::Params &consensusParams)\n }\n \n // Requires cs_main\n-bool CanDirectFetch(const Consensus::Params &consensusParams)\n+bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n }\n@@ -471,7 +471,7 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) {\n+void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (count == 0)\n         return;\n \n@@ -800,7 +800,7 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (chainActive.Contains(pindex)) return true;"
      },
      {
        "sha": "1f77ab53aa95a383c7e60287e4e9e54c61195179",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -35,6 +35,8 @@ static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n+extern CCriticalSection cs_main;\n+\n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n@@ -75,7 +77,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */"
      },
      {
        "sha": "2d42895d0d2b7bfe2c97eeac4de26e576336790f",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -48,7 +48,7 @@ QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const i\n     }\n }\n \n-QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n+QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int numBlocks;\n     int64_t adjustedTime;"
      },
      {
        "sha": "bcc7102060fcd668f54de995d98dd9b75dd07c16",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -5,9 +5,13 @@\n #ifndef BITCOIN_QT_TRANSACTIONDESC_H\n #define BITCOIN_QT_TRANSACTIONDESC_H\n \n+#include <sync.h>\n+\n #include <QObject>\n #include <QString>\n \n+extern CCriticalSection cs_main;\n+\n class TransactionRecord;\n \n namespace interfaces {\n@@ -29,7 +33,7 @@ class TransactionDesc: public QObject\n private:\n     TransactionDesc() {}\n \n-    static QString FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime);\n+    static QString FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONDESC_H"
      },
      {
        "sha": "1fa5281848dd02b76035805eaf745cb3da2bf262",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n #include <amount.h>\n+#include <sync.h>\n #include <uint256.h>\n \n #include <QList>\n@@ -17,6 +18,8 @@ class Wallet;\n struct WalletTx;\n struct WalletTxStatus;\n }\n+extern CCriticalSection cs_main;\n+\n \n /** UI model for transaction status. The transaction status is the part of a transaction that will change over time.\n  */\n@@ -111,7 +114,7 @@ class TransactionRecord\n     /** Decompose CWallet transaction to model transaction records.\n      */\n     static bool showTransaction();\n-    static QList<TransactionRecord> decomposeTransaction(const interfaces::WalletTx& wtx);\n+    static QList<TransactionRecord> decomposeTransaction(const interfaces::WalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** @name Immutable transaction attributes\n       @{*/\n@@ -140,11 +143,11 @@ class TransactionRecord\n \n     /** Update status from core wallet tx.\n      */\n-    void updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime);\n+    void updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded(int numBlocks) const;\n+    bool statusUpdateNeeded(int numBlocks) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONRECORD_H"
      },
      {
        "sha": "a30c481585a5b318606d2e2435966b14c9e00605",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -73,7 +73,7 @@ class TransactionTablePriv\n \n     /* Query entire wallet anew from core.\n      */\n-    void refreshWallet(interfaces::Wallet& wallet)\n+    void refreshWallet(interfaces::Wallet& wallet) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         qDebug() << \"TransactionTablePriv::refreshWallet\";\n         cachedWallet.clear();\n@@ -91,7 +91,7 @@ class TransactionTablePriv\n \n        Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction)\n+    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n@@ -176,7 +176,7 @@ class TransactionTablePriv\n         return cachedWallet.size();\n     }\n \n-    TransactionRecord *index(interfaces::Wallet& wallet, int idx)\n+    TransactionRecord *index(interfaces::Wallet& wallet, int idx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         if(idx >= 0 && idx < cachedWallet.size())\n         {\n@@ -244,7 +244,7 @@ void TransactionTableModel::updateAmountColumnTitle()\n     Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n-void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n+void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     uint256 updated;\n     updated.SetHex(hash.toStdString());\n@@ -669,7 +669,7 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n     return QVariant();\n }\n \n-QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const\n+QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     Q_UNUSED(parent);\n     TransactionRecord *data = priv->index(walletModel->wallet(), row);\n@@ -680,7 +680,7 @@ QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex\n     return QModelIndex();\n }\n \n-void TransactionTableModel::updateDisplayUnit()\n+void TransactionTableModel::updateDisplayUnit() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();"
      },
      {
        "sha": "73fe58c3da7b001ef3c12d9f16708f19cb3ec812",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -520,8 +520,11 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n             bitmap[i / 8] |= ((uint8_t)hit) << (i % 8);\n         }\n \n-        chainActiveHeight = chainActive.Height();\n-        chainActiveTipBlockHash = chainActive.Tip()->GetBlockHash();\n+        {\n+            LOCK(cs_main);\n+            chainActiveHeight = chainActive.Height();\n+            chainActiveTipBlockHash = chainActive.Tip()->GetBlockHash();\n+        }\n     }\n \n     switch (rf) {"
      },
      {
        "sha": "30ec2c54496cf52b768ce60b1c5038f1754adefb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -18,7 +18,6 @@\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n #include <streams.h>\n-#include <sync.h>\n #include <txdb.h>\n #include <txmempool.h>\n #include <util.h>"
      },
      {
        "sha": "4d4952643cba3020da74a64f30fab9deabfd9175",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -5,6 +5,10 @@\n #ifndef BITCOIN_RPC_BLOCKCHAIN_H\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n+#include <sync.h>\n+\n+extern CCriticalSection cs_main;\n+\n class CBlock;\n class CBlockIndex;\n class UniValue;\n@@ -16,13 +20,13 @@ class UniValue;\n  * @return A floating point number that is a multiple of the main net minimum\n  * difficulty (4295032833 hashes).\n  */\n-double GetDifficulty(const CBlockIndex* blockindex = nullptr);\n+double GetDifficulty(const CBlockIndex* blockindex = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Callback for when block tip changed. */\n void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Mempool information to JSON */\n UniValue mempoolInfoToJSON();\n@@ -31,7 +35,7 @@ UniValue mempoolInfoToJSON();\n UniValue mempoolToJSON(bool fVerbose = false);\n \n /** Block header to JSON */\n-UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n+UniValue blockheaderToJSON(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n #endif\n "
      },
      {
        "sha": "1009179e41abfed540699ab971dc1916f10968e7",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -44,7 +44,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-UniValue GetNetworkHashPS(int lookup, int height) {\n+UniValue GetNetworkHashPS(int lookup, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())"
      },
      {
        "sha": "dd5715970e3f60a11b4d18d1322714626b919418",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -38,7 +38,7 @@\n #include <univalue.h>\n \n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n+void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //"
      },
      {
        "sha": "154064a2c2fa50d01a108cc8bcca46d5afc05dd9",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -82,15 +82,15 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-CBlockIndex CreateBlockIndex(int nHeight)\n+CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n     index.pprev = chainActive.Tip();\n     return index;\n }\n \n-bool TestSequenceLocks(const CTransaction &tx, int flags)\n+bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(mempool.cs);\n     return CheckSequenceLocks(tx, flags);"
      },
      {
        "sha": "4ef3d775cdc0ba161075fa08ad26a9bc75262427",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -28,6 +28,7 @@\n #include <boost/signals2/signal.hpp>\n \n class CBlockIndex;\n+extern CCriticalSection cs_main;\n \n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;\n@@ -542,7 +543,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate = true);\n \n     void removeRecursive(const CTransaction &tx, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n-    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void removeConflicts(const CTransaction &tx);\n     void removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight);\n "
      },
      {
        "sha": "493a39e1919bffdb1b23315a6c22c5268df97b6b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -452,7 +452,7 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-static bool IsCurrentForFeeEstimation()\n+static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (IsInitialBlockDownload())\n@@ -477,7 +477,7 @@ static bool IsCurrentForFeeEstimation()\n  * and instead just erase from the mempool as needed.\n  */\n \n-void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)\n+void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -554,7 +554,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -989,7 +989,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n@@ -1005,7 +1005,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n@@ -1182,7 +1182,7 @@ static void AlertNotify(const std::string& strMessage)\n     t.detach(); // thread runs free\n }\n \n-static void CheckForkWarningConditions()\n+static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n@@ -1223,7 +1223,7 @@ static void CheckForkWarningConditions()\n     }\n }\n \n-static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n+static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // If we are on a fork that is sufficiently large, set a warning flag\n@@ -1256,7 +1256,7 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidChainFound(CBlockIndex* pindexNew)\n+void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n@@ -1272,7 +1272,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         m_failed_blocks.insert(pindex);\n@@ -2262,7 +2262,7 @@ void static UpdateTip(const CBlockIndex *pindexNew, const CChainParams& chainPar\n   * disconnectpool (note that the caller is responsible for mempool consistency\n   * in any case).\n   */\n-bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool)\n+bool CChainState::DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2385,7 +2385,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2444,7 +2444,7 @@ bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainp\n  * Return the tip of the chain with the most work in it, that isn't\n  * known to be invalid (it's however far from certain to be valid).\n  */\n-CBlockIndex* CChainState::FindMostWorkChain() {\n+CBlockIndex* CChainState::FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     do {\n         CBlockIndex *pindexNew = nullptr;\n \n@@ -2499,7 +2499,7 @@ CBlockIndex* CChainState::FindMostWorkChain() {\n }\n \n /** Delete all entries in setBlockIndexCandidates that are worse than the current tip. */\n-void CChainState::PruneBlockIndexCandidates() {\n+void CChainState::PruneBlockIndexCandidates() EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     // Note that we can't delete the current block itself, as we may need to return to it later in case a\n     // reorganization to a better block fails.\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator it = setBlockIndexCandidates.begin();\n@@ -2514,7 +2514,7 @@ void CChainState::PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2743,7 +2743,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n     return g_chainstate.PreciousBlock(state, params, pindex);\n }\n \n-bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n \n@@ -2806,11 +2806,12 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     }\n     return true;\n }\n+\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n     return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n }\n \n-bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     int nHeight = pindex->nHeight;\n@@ -2843,6 +2844,7 @@ bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n+\n bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n     return g_chainstate.ResetBlockFailureFlags(pindex);\n }\n@@ -2884,7 +2886,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n }\n \n /** Mark a block as having its data received and checked (up to BLOCK_VALID_TRANSACTIONS). */\n-bool CChainState::ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+bool CChainState::ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     pindexNew->nTx = block.vtx.size();\n     pindexNew->nChainTx = 0;\n@@ -3397,7 +3399,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CBlock& block = *pblock;\n "
      },
      {
        "sha": "017bc6530e1de7f339e75b22bb84fcae9ca90189",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -269,7 +269,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams);\n  * initializing state if we're running with -reindex. */\n bool LoadBlockIndex(const CChainParams& chainparams);\n /** Update the chain tip based on database information. */\n-bool LoadChainTip(const CChainParams& chainparams);\n+bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n@@ -309,7 +309,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n@@ -336,12 +336,12 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain\n  */\n-bool TestLockPointValidity(const LockPoints* lp);\n+bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n@@ -354,7 +354,7 @@ bool TestLockPointValidity(const LockPoints* lp);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false);\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Closure representing one script verification\n@@ -405,7 +405,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -414,7 +414,7 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n-bool RewindBlockIndex(const CChainParams& params);\n+bool RewindBlockIndex(const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n@@ -447,10 +447,10 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      },
      {
        "sha": "61e09c934440c8716af7b3ea7dc59c1431429b92",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -18,7 +18,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      },
      {
        "sha": "35249917f32bf000301b90b6d7c3415858a31969",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -86,7 +86,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n+void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -448,7 +448,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue, std::string fromAccount)\n+static CTransactionRef SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, const CCoinControl& coin_control, mapValue_t mapValue, std::string fromAccount) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount curBalance = pwallet->GetBalance();\n \n@@ -1497,7 +1497,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label)\n+UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1764,7 +1764,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount nFee;\n     std::string strSentAccount;"
      },
      {
        "sha": "ae521dbf8f833486ed3534dfa1887f671e190928",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ff77fb571346f8cf716f4a195939e6ca36eef80/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "patch": "@@ -32,6 +32,8 @@\n #include <utility>\n #include <vector>\n \n+extern CCriticalSection cs_main;\n+\n bool AddWallet(CWallet* wallet);\n bool RemoveWallet(CWallet* wallet);\n bool HasWallets();\n@@ -247,10 +249,10 @@ class CMerkleTx\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -437,11 +439,11 @@ class CWalletTx : public CMerkleTx\n \n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n+    CAmount GetCredit(const isminefilter& filter) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetImmatureCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n@@ -462,16 +464,16 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const;\n+    bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(CConnman* connman);\n+    bool RelayWalletTransaction(CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::set<uint256> GetConflicts() const;\n };\n@@ -810,7 +812,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address.\n@@ -831,7 +833,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(const COutPoint& output);\n@@ -894,7 +896,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**\n@@ -917,9 +919,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -990,7 +992,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, CAmount> GetAddressBalances();\n+    std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n     void DeleteLabel(const std::string& label);"
      }
    ]
  },
  {
    "sha": "b0279a029340a2295a5f3419cac0a44eaaa81cfc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDI3OWEwMjkzNDBhMjI5NWE1ZjM0MTljYWMwYTQ0ZWFhYTgxY2Zj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-19T13:35:48Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-26T04:19:07Z"
      },
      "message": "Locking annotations: Variable chainActive is guarded by cs_main",
      "tree": {
        "sha": "2ae9162f99708391f97bfd3c3e3375c811fddd56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ae9162f99708391f97bfd3c3e3375c811fddd56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0279a029340a2295a5f3419cac0a44eaaa81cfc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0279a029340a2295a5f3419cac0a44eaaa81cfc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0279a029340a2295a5f3419cac0a44eaaa81cfc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0279a029340a2295a5f3419cac0a44eaaa81cfc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ff77fb571346f8cf716f4a195939e6ca36eef80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ff77fb571346f8cf716f4a195939e6ca36eef80"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "c3e6df3e9b1562551806a7ab9d4afc3a14fc93f1",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -59,7 +59,7 @@ bool TxIndex::Init()\n     return true;\n }\n \n-static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev)\n+static const CBlockIndex* NextSyncBlock(const CBlockIndex* pindex_prev) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n "
      },
      {
        "sha": "80bfd2ed5ac7f9fa093f5803ab7b93783cd87969",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -57,7 +57,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n };\n \n //! Construct wallet tx struct.\n-WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -85,7 +85,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQ\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -105,7 +105,7 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];"
      },
      {
        "sha": "beba64b12820bfc1a5477db46f41ae6e43f7ed7f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -454,7 +454,7 @@ bool TipMayBeStale(const Consensus::Params &consensusParams)\n }\n \n // Requires cs_main\n-bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool CanDirectFetch(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     return chainActive.Tip()->GetBlockTime() > GetAdjustedTime() - consensusParams.nPowTargetSpacing * 20;\n }\n@@ -471,7 +471,7 @@ bool PeerHasHeader(CNodeState *state, const CBlockIndex *pindex)\n \n /** Update pindexLastCommonBlock and add not-in-flight missing successors to vBlocks, until it has\n  *  at most count entries. */\n-void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+static void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<const CBlockIndex*>& vBlocks, NodeId& nodeStaller, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (count == 0)\n         return;\n "
      },
      {
        "sha": "352f242c5e7e19690011d8de25a84d559846baa3",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -44,7 +44,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * or from the last difficulty change if 'lookup' is nonpositive.\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n-UniValue GetNetworkHashPS(int lookup, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n+static UniValue GetNetworkHashPS(int lookup, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     CBlockIndex *pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())"
      },
      {
        "sha": "a7b9776d672eba70435bf9641c1d65c8f558f814",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -38,7 +38,7 @@\n #include <univalue.h>\n \n \n-void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n {\n     // Call into TxToUniv() in bitcoin-common to decode the transaction hex.\n     //"
      },
      {
        "sha": "7f4a7005689819da6ed50dc178cc9aacfa333131",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -82,15 +82,15 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n     index.pprev = chainActive.Tip();\n     return index;\n }\n \n-bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(mempool.cs);\n     return CheckSequenceLocks(tx, flags);"
      },
      {
        "sha": "5c948ee32aed6e16fda211140ef40b353c1b9cc6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -146,7 +146,7 @@ class CChainState {\n     std::set<CBlockIndex*> m_failed_blocks;\n \n public:\n-    CChain chainActive;\n+    CChain chainActive GUARDED_BY(cs_main);\n     BlockMap mapBlockIndex;\n     std::multimap<CBlockIndex*, CBlockIndex*> mapBlocksUnlinked;\n     CBlockIndex *pindexBestInvalid = nullptr;\n@@ -477,7 +477,7 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n  * and instead just erase from the mempool as needed.\n  */\n \n-void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -1005,7 +1005,7 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n {\n     const CChainParams& chainparams = Params();\n     return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, pfMissingInputs, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);"
      },
      {
        "sha": "be5fca7546a505cb240b8e0af2ab928aa4369a9e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -453,7 +453,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain& chainActive;\n+extern CChain& chainActive GUARDED_BY(cs_main);\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;"
      },
      {
        "sha": "829a67812606225b7843d8a9c3814724c8a2c96d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0279a029340a2295a5f3419cac0a44eaaa81cfc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b0279a029340a2295a5f3419cac0a44eaaa81cfc",
        "patch": "@@ -86,7 +86,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -1497,7 +1497,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1764,7 +1764,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount nFee;\n     std::string strSentAccount;"
      }
    ]
  }
]