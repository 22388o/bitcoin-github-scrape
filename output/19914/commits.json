[
  {
    "sha": "fa7e407b504bc60c77341f02636ed9d6a4b53d79",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdlNDA3YjUwNGJjNjBjNzczNDFmMDI2MzZlZDlkNmE0YjUzZDc5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-08T06:03:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-09-08T05:55:11Z"
      },
      "message": "Do not pass chain params to CheckForStaleTipAndEvictPeers twice",
      "tree": {
        "sha": "decea0186288e79a84a57e967da16c28d9ee3d4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/decea0186288e79a84a57e967da16c28d9ee3d4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7e407b504bc60c77341f02636ed9d6a4b53d79",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiSyQwAmvXqFVLQ7aIZp9sfVdf5E4DA/0AODyACWf/nFROEU9CwkzOX+m4M1qAV\np9MyfzD+7xHZ6EeQWyQmgupdxaWbI93Gmn9bRS1Abb5uEMiqEulDoMJX0mb0f0CS\nl+hLQBvRh7Jaj5vdyitHlwrdBXyGU2qq3YtR7gKtrQ4cyVWpXv8ihQi5WplcY1Av\nRthpQb9sGqSIjeyVY2WMhYZM6mrRQJTj0rcReV/npeU5heLk2uA+/BDidK/7BTm+\nEp0WmykZU5PnvhINwKYAbq9EQEVIe5JNf2JolrwuQOkjmRPKlfyb71o2M4lYA3Pv\nIv+7Kw82MCbFsX9Luv0bcBylYX4gpeY1wWa7rNkLKKLvLpjgY8719/4JqUyBi2QW\nNa55MVcfnZb2ynDcyBU0HUvJW80UsMG1mA2jpX1LlutgNbkhTwy3it7ZGperkUA1\nPhfNWTcCjHjff12EPRy9CK8n8uqvQx+nk7JMp180rIn5iowLHmOCebHGAZG0luXF\n0TX6MbVJ\n=FyWk\n-----END PGP SIGNATURE-----",
        "payload": "tree decea0186288e79a84a57e967da16c28d9ee3d4a\nparent 147d50d63e07f600b414273a9f6b84f9f4ad9696\nauthor MarcoFalke <falke.marco@gmail.com> 1599544981 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1599544511 +0200\n\nDo not pass chain params to CheckForStaleTipAndEvictPeers twice\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7e407b504bc60c77341f02636ed9d6a4b53d79",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7e407b504bc60c77341f02636ed9d6a4b53d79",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7e407b504bc60c77341f02636ed9d6a4b53d79/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/147d50d63e07f600b414273a9f6b84f9f4ad9696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/147d50d63e07f600b414273a9f6b84f9f4ad9696"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 15,
      "deletions": 17
    },
    "files": [
      {
        "sha": "1d386b1ad8cba793cdca22d7fe0dcacce1346077",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa7e407b504bc60c77341f02636ed9d6a4b53d79",
        "patch": "@@ -1247,13 +1247,12 @@ PeerManager::PeerManager(const CChainParams& chainparams, CConnman& connman, Ban\n     // same probability that we have in the reject filter).\n     g_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     // Stale tip checking and peer eviction are on two different timers, but we\n     // don't want them to get out of sync due to drift in the scheduler, so we\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n-    scheduler.scheduleEvery([this, consensusParams] { this->CheckForStaleTipAndEvictPeers(consensusParams); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n+    scheduler.scheduleEvery([this] { this->CheckForStaleTipAndEvictPeers(); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n \n     // schedule next run for 10-15 minutes in the future\n     const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n@@ -1344,7 +1343,7 @@ void PeerManager::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, Params().GetConsensus());\n+    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -1572,7 +1571,7 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n     } // release cs_main before calling ActivateBestChain\n     if (need_activate_chain) {\n         BlockValidationState state;\n-        if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+        if (!ActivateBestChain(state, chainparams, a_recent_block)) {\n             LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n         }\n     }\n@@ -2786,7 +2785,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 a_recent_block = most_recent_block;\n             }\n             BlockValidationState state;\n-            if (!ActivateBestChain(state, Params(), a_recent_block)) {\n+            if (!ActivateBestChain(state, m_chainparams, a_recent_block)) {\n                 LogPrint(BCLog::NET, \"failed to activate chain (%s)\\n\", state.ToString());\n             }\n         }\n@@ -4027,7 +4026,7 @@ void PeerManager::EvictExtraOutboundPeers(int64_t time_in_seconds)\n     }\n }\n \n-void PeerManager::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+void PeerManager::CheckForStaleTipAndEvictPeers()\n {\n     LOCK(cs_main);\n \n@@ -4038,7 +4037,7 @@ void PeerManager::CheckForStaleTipAndEvictPeers(const Consensus::Params &consens\n     if (time_in_seconds > m_stale_tip_check_time) {\n         // Check whether our tip is stale, and if so, allow using an extra\n         // outbound peer\n-        if (!fImporting && !fReindex && m_connman.GetNetworkActive() && m_connman.GetUseAddrmanOutgoing() && TipMayBeStale(consensusParams)) {\n+        if (!fImporting && !fReindex && m_connman.GetNetworkActive() && m_connman.GetUseAddrmanOutgoing() && TipMayBeStale(m_chainparams.GetConsensus())) {\n             LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n             m_connman.SetTryNewOutboundPeer(true);\n         } else if (m_connman.GetTryNewOutboundPeer()) {\n@@ -4071,7 +4070,7 @@ class CompareInvMempoolOrder\n \n bool PeerManager::SendMessages(CNode* pto)\n {\n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    const Consensus::Params& consensusParams = m_chainparams.GetConsensus();\n \n     // We must call MaybeDiscourageAndDisconnect first, to ensure that we'll\n     // disconnect misbehaving peers even before the version handshake is complete."
      },
      {
        "sha": "3e748c0c5bb501274a1bd2c11ee0fb2d6bf56e4a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=fa7e407b504bc60c77341f02636ed9d6a4b53d79",
        "patch": "@@ -76,7 +76,7 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    void CheckForStaleTipAndEvictPeers();\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n     void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */"
      },
      {
        "sha": "e4ee08db6190d57acc06da963209763cb502dd25",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7e407b504bc60c77341f02636ed9d6a4b53d79/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa7e407b504bc60c77341f02636ed9d6a4b53d79",
        "patch": "@@ -153,7 +153,6 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n     auto peerLogic = MakeUnique<PeerManager>(chainparams, *connman, nullptr, *m_node.scheduler, *m_node.chainman, *m_node.mempool);\n \n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n     CConnman::Options options;\n     options.nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n@@ -168,18 +167,18 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n         AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n     }\n \n-    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n \n     // No nodes should be marked for disconnection while we have no extra peers\n     for (const CNode *node : vNodes) {\n         BOOST_CHECK(node->fDisconnect == false);\n     }\n \n-    SetMockTime(GetTime() + 3*consensusParams.nPowTargetSpacing + 1);\n+    SetMockTime(GetTime() + 3 * chainparams.GetConsensus().nPowTargetSpacing + 1);\n \n     // Now tip should definitely be stale, and we should look for an extra\n     // outbound peer\n-    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n     BOOST_CHECK(connman->GetTryNewOutboundPeer());\n \n     // Still no peers should be marked for disconnection\n@@ -192,8 +191,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // required time connected check should be satisfied).\n     AddRandomOutboundPeer(vNodes, *peerLogic, connman.get());\n \n-    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n-    for (int i=0; i<max_outbound_full_relay; ++i) {\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+    for (int i = 0; i < max_outbound_full_relay; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n     // Last added node should get marked for eviction\n@@ -205,8 +204,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // peer, and check that the next newest node gets evicted.\n     UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n \n-    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n-    for (int i=0; i<max_outbound_full_relay-1; ++i) {\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+    for (int i = 0; i < max_outbound_full_relay - 1; ++i) {\n         BOOST_CHECK(vNodes[i]->fDisconnect == false);\n     }\n     BOOST_CHECK(vNodes[max_outbound_full_relay-1]->fDisconnect == true);"
      }
    ]
  }
]