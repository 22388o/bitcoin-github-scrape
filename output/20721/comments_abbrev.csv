jnewbery,2020-12-22 13:46:17,Rebased on master. This is now ready for review.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-749547642,749547642,
DrahtBot,2020-12-23 21:54:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21190 (net: Avoid discouraging the onion proxy when one inbound onion misbehaves by MarcoFalke)\n* #21015 (Make all of ne",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-750488019,750488019,
jnewbery,2020-12-23 22:19:02,"> ""jnewbery deleted a comment from sipa 3 days ago"" ?\n\nha. There were two comments from sheffine saying ""why are you emailing me?"" and one from sipa saying ""sheffine, you're confused"", so I deleted them all to reduce noise.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-750494700,750494700,
sipa,2020-12-23 22:20:53,"Censorship!!!\n\n(yes, that's indeed what happened)",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-750495167,750495167,
jnewbery,2020-12-23 23:27:10,Thanks for the review @ajtowns. I'll move the commits around a bit to address your comments.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-750559337,750559337,
jnewbery,2020-12-29 10:56:50,"Thanks for the reviews, @glozow and @jonatack. I've addressed your comments: https://github.com/bitcoin/bitcoin/compare/6f0309b4743d05c512fc86d2d206f72d512c5c93..d666804b7b2d5006c37b86f5f88e344216ad0862.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752034748,752034748,
jnewbery,2020-12-29 11:01:58,rebased,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752036122,752036122,
jnewbery,2020-12-29 12:05:03,"> Genuine question, why should best ping time be in CNode but all the others in Peer? We use best ping time for eviction logic which seems like an application-layer thing...\n\nThis is a very good question. I haven't specified the difference between connection-layer and application-layer well enough with respect to ping times.\n\nFunctionally, ping times are used in two places: timeout logic a",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752052378,752052378,
jnewbery,2020-12-29 19:58:53,"Ping timeouts are being triggered on feature_bip68_sequence.py test when run on cirrus. That test uses lots of mocktime jumps, so it's not surprising. I'll see if there's a way to make sure that pings don't timeout when using mocktime.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752222792,752222792,
ajtowns,2020-12-30 03:11:16,"> This exists entirely in the connection layer, in `CConnman::AttemptToEvictConnection()`. It requires data from both the connection layer (e.g. connection time, connection type, whether the connection is local, etc)\n\nNot convinced that makes sense -- ""connection type"" and ""how many local connections to evict"" both seem like application logic to me. I was certainly expecting `m_conn_type` to e",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752311889,752311889,
jnewbery,2021-01-02 09:46:31,"I'm going to hold off rebasing this until https://github.com/bitcoin/bitcoin/pull/20811 lands. Once #20811 is merged, we'll be able to continue this series of PRs with much less churn in the header files. Marking as draft for now.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-753453152,753453152,
jnewbery,2021-01-13 14:30:56,"I've rebased on master now that #20811 is merge and added a (hidden) `-pingtimeout` option which avoids having to expose `Peer` to the tests.\n\nThere are still a couple of tests timing out, which I'll fix up next.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-759485838,759485838,
jnewbery,2021-01-13 16:40:56,I'm going to leave this as WIP for now. I think #20927 should go in before this to make review of this PR easier. Please review that PR first.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-759572472,759572472,
jnewbery,2021-01-16 11:04:39,Pushed a fix for the intermittent ping timeout in wallet_resendwallettransactions.py,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-761544843,761544843,
jnewbery,2021-01-23 11:14:43,Rebased on master. All tests are now passing for me locally. Marking this as ready for review.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-765907224,765907224,
jnewbery,2021-01-29 09:25:35,rebased,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-769687320,769687320,
pinheadmz,2021-02-03 15:52:31,"I see around ~20 functional tests that use `setmocktime`... but you only added `-pingtimeout=9999` to two of them. Are you not worried about ping timeouts due to mocktime in any of the other tests?\n\n",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-772612030,772612030,
pinheadmz,2021-02-03 16:47:23,"concept ACK, tests pass locally, scripted diff verified in 4180381f683fad8755b30a3a8e65edc26c1ce5e2\nMakes sense to me, moves ping properties from `CNode` in net to `Peer` in net_processing.\nTesting also by running `src/bitcoind -pingtimeout=1 -signet` (didn't want to disrupt mainnet peers) and got some expected log messages:\n`2021-02-03T15:34:23Z ping timeout: 1.018515s peer=5`",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-772653640,772653640,
glozow,2021-02-03 20:19:57,"> I see around ~20 functional tests that use setmocktime... but you only added -pingtimeout=9999 to two of them. Are you not worried about ping timeouts due to mocktime in any of the other tests?\n\n@pinheadmz I imagine it's only necessary where `setmocktime` does an increase of more than the default ping timeout.\n\nDug into this a little bit looking for `setmocktime` calls with big jumps - @",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-772795602,772795602,
jnewbery,2021-02-04 11:09:23,"I've updated the `-pingtimeout` option to be a binary enable/disable. We don't need fine control over it in the tests, and it was essentially being used to disable ping timeouts entirely.\n\n> Dug into this a little bit looking for setmocktime calls with big jumps - @jnewbery do you think p2p_addr_relay.py, p2p_addrv2_relay.py, and/or p2p_getaddr_caching.py need a -pingtimeout?\n\nVery nice. T",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-773227475,773227475,
jnewbery,2021-02-04 11:10:10,Thanks everyone for the reviews. All comments have now been addressed.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-773227934,773227934,
jnewbery,2021-02-05 09:24:59,"Thanks for the reviews!\n\n> I feel like the interface would be more intuitive if it was just called -disablepingtimeout since it's an optional flag, but perhaps just personal preference?\n\nI think it's best to avoid negative configuration names. `-disablepingtimeout=0` would mean ""do not disable ping timeout"", which is a double negative and slightly harder to parse than ""enable ping timeout""",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-773908504,773908504,
jnewbery,2021-02-05 09:41:39,rebased,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-773918182,773918182,
glozow,2021-02-05 16:36:31,"ACK https://github.com/bitcoin/bitcoin/pull/20721/commits/bbd970a2123aec5071dd3dd901e478844c6e0fea 🍿 \n\nThe negative config option stuff makes more sense to me now, thanks for explaining!",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-774143603,774143603,
dongcarl,2021-02-08 21:17:35,"Light Code-Review ACK bbd970a2123aec5071dd3dd901e478844c6e0fea\n\nThis may have been answered before but could someone tell me the exact sequence of events in the test framework involving `setmocktime` that would make `-nopingtimeout` necessary? My naive reading is that `send_and_ping` blocks until it receives the `pong` and is therefore not going to timeout if the next call is a `setmocktime`.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-775468156,775468156,
jnewbery,2021-02-09 11:22:02,Thanks for the review @amitiuttarwar. I've resolved all of your review comments.,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-775868174,775868174,
jnewbery,2021-02-09 11:29:03,"@dongcarl \n\n> This may have been answered before but could someone tell me the exact sequence of events in the test framework involving setmocktime that would make -nopingtimeout necessary? My naive reading is that send_and_ping blocks until it receives the pong and is therefore not going to timeout if the next call is a setmocktime.\n\nThe `send_and_ping` method involves the python test fra",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-775871829,775871829,
amitiuttarwar,2021-02-09 18:12:42,"reACK af23d37cab, all that changed was in response to my feedback (thanks!) ",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-776135699,776135699,
jnewbery,2021-02-10 10:06:25,"> I think I'm a NACK on the -pingtimeout changes as they stand -- at a minimum it should be clear from the PR description and commit messages why those changes are needed, but there's currently no motivation for them in those places.\n> \n> I think duplicating the -peertimeout check into net_processing is enough to obsolete the need to change the tests\n\nOk, done. I've removed `-pingtimeout`,",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-776595952,776595952,
ajtowns,2021-02-12 02:38:00,"FYI, I think the scripted diff only touches `net_processing.cpp`, so doesn't need the `.*` there.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-777930322,777930322,
jnewbery,2021-02-12 11:39:01,"Thanks for the review @ajtowns. I've addressed both of your comments. This is looking much cleaner now.\n\nApologies to the other reviewers for the churn. Hopefully we can settle on this approach and move towards getting this merged.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-778144929,778144929,
jnewbery,2021-02-15 10:45:59,"Thanks for the review @ajtowns! I'll leave your nits for a follow-up PR.\n\n@dongcarl @amitiuttarwar - I think this would be ready for merge if you reACKed.",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-779134854,779134854,
jnewbery,2021-02-15 16:25:09,Rebased,https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-779328502,779328502,
glozow,2021-02-15 20:07:06,"reACK https://github.com/bitcoin/bitcoin/commit/a5e15ae45ccae7948a6c5b95e6621f01afb88d55 \n\nrebase-only by `git range-diff a3ec04b...a5e15ae`",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-779426239,779426239,
MarcoFalke,2021-02-16 09:02:44,"In the scripted diff I don't like that it may modify non-git user files (e.g. a `net.h.rej` file) in the same folder. Would be better to use `git grep -l '...'`, which would also simplify review, as reviewers don't have to call `git grep` to verify the replacement was complete over all files, including docs.\n\n\nreview ACK a5e15ae45ccae7948a6c5b95e6621f01afb88d55 🥉\n\n<details><summary>Show ",https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-779689700,779689700,
ajtowns,2020-12-23 21:43:57,"If you're changing every reference to `pto` anyway because it's now a reference not a pointer, maybe also call it `node_to` or similar, since it's not a ""p"" anymore?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548265029,548265029,src/net_processing.cpp
ajtowns,2020-12-23 21:45:34,I don't think exposing more implementation details in net_processing.h is a good idea. Fortunately it's fixable: #20758 ,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548266275,548266275,src/net_processing.h
ajtowns,2020-12-23 21:48:14,Move the test change to its own commit so it's easy to verify behaviour doesn't change with the move logic to net_processing commit? I don't follow why the test change is necessary/desirable though.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548268168,548268168,src/test/denialofservice_tests.cpp
jnewbery,2020-12-23 23:22:51,"> Move the test change to its own commit so it's easy to verify behaviour doesn't change\n\ngood idea. Will do.\n\n> I don't follow why the test change is necessary/desirable though.\n\nThe change is required because previously ping timeouts happened in in CConnman, so it was fine to bump the time in this test because there's no CConnman to time out the connection. When the ping data and tim",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548317053,548317053,src/test/denialofservice_tests.cpp
jnewbery,2020-12-23 23:23:38,Totally agree! I think #20758 can happen before or after this PR.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548317225,548317225,src/net_processing.h
jnewbery,2020-12-23 23:24:14,Sure. I'll split the commit into a move and a rename/change to reference to make it easier to review.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548317373,548317373,src/net_processing.cpp
ajtowns,2020-12-24 02:47:29,"Yes, I don't think either need gate the other, the above was literally my thought process in getting to that PR -- sipa may not have nerd sniped me with twitter maths, but that doesn't mean I didn't get nerd sniped anyway...",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548357896,548357896,src/net_processing.h
ajtowns,2020-12-24 03:11:43,"Makes sense; might be a useful commit message for the test change?\n\nSeems kind-of annoying to have to remember to constrain your mocktime bumps by random ping timeout limits. Shouldn't this also (already) cause problems in functional tests?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548362767,548362767,src/test/denialofservice_tests.cpp
sipa,2020-12-24 03:13:14,This seems like a more productive form of aj-sniping.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548363032,548363032,src/net_processing.h
jnewbery,2020-12-24 16:10:02,"The functional tests have an asyncio event loop thread that will automatically respond to ping messages:\n\nhttps://github.com/bitcoin/bitcoin/blob/f656165e9c0d09e654efabd56e6581638e35c26c/test/functional/test_framework/p2p.py#L392-L393\n\nThe unit tests are single threaded, so any logic to handle messages needs to be done in the main test logic.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548586608,548586608,src/test/denialofservice_tests.cpp
jnewbery,2020-12-24 16:20:47,Done,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548593918,548593918,src/net_processing.cpp
jnewbery,2020-12-24 16:24:04,I like this kind of aj-sniping.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548596150,548596150,src/net_processing.h
jnewbery,2020-12-24 16:24:19,"ok, split this into its own commit.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r548596374,548596374,src/test/denialofservice_tests.cpp
glozow,2020-12-28 19:06:12,"Noob / practices question: why not just create this with a `bool` return type, since you change it 3 commits later? I don't have an opinion, but why is it better to do it this way?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549455568,549455568,src/net_processing.h
glozow,2020-12-28 21:04:07,"Genuine question, why should best ping time be in `CNode` but all the others in `Peer`? We use best ping time for eviction logic which seems like an application-layer thing...",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549486291,549486291,src/net.h
glozow,2020-12-28 21:28:04,"Since you removed this, `CNodeStats` doesn't know min ping time anymore. The p2p_eviction and p2p_ping functional tests fail since `getpeerinfo()` always returns 0 for minping :(\n\nAdding it back fixed the tests for me:\n```c\nstats.m_min_ping_usec  = m_best_ping_time;\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549492180,549492180,src/net.cpp
glozow,2020-12-28 21:50:35,"Oh hey, if s/m_min_ping_usec/m_best_ping_time then\n```\nX(m_best_ping_time);\n```\n(wow so clean)",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549497650,549497650,src/net.cpp
jonatack,2020-12-28 22:07:34,"```suggestion\n    std::atomic<int64_t> m_min_ping_time{std::numeric_limits<int64_t>::max()};\n```\nI think renaming from ""min"" to ""best"" needlessly sows confusion or more needed code churn for no gain:\n\n- ""min"" is more precise than ""best"" (best how?)\n- getpeerinfo and its help, -netinfo and its new help (#20764), and the GUI refer to ""min ping"", ""Min Ping"", ""mping"", ""minimum observed pin",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549501774,549501774,src/net.h
jonatack,2020-12-28 22:09:48,"Can you use named casts in lines 234 and 237 while touching this code?\n\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#Res-casts-named\n",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549502248,549502248,src/rpc/net.cpp
jnewbery,2020-12-29 10:16:40,"Just so that the commits are hygienic. For people reviewing commit by commit, it wouldn't make sense to have a function that returns a bool which is just ignored. Changing the return type in a subsequent commit is as easy as changing void to bool in the declaration and definition.\n\nI was considering not returning a bool here, since it's a bit of a strange interface (the function sets `pto.fDis",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549648962,549648962,src/net_processing.h
jnewbery,2020-12-29 10:39:21,"Good catch! I lost this in a rebase. I've now restored it.\n\nI'm going to leave the `m_min_ping_usec` name to avoid increasing the diff further.\n",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549656149,549656149,src/net.cpp
jnewbery,2020-12-29 10:40:47,"I agree. I've changed it to `m_min_ping_time` (it's still code churn since it was previously named `nMinPingUsecTime`, but I agree with you about the consistent naming).",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549656532,549656532,src/net.h
jnewbery,2020-12-29 10:53:31,I'd rather not change this while moving it. There's another C-style cast from int64_t to double on line 206. Let's fix them all at the same time.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549660285,549660285,src/rpc/net.cpp
jnewbery,2020-12-29 12:05:25,Answered here: https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-752052378,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r549679809,549679809,src/net.h
mjdietzx,2021-01-14 18:42:13,"nit: docs specify minimum is 1, but it seems here min is 0?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r557610974,557610974,src/init.cpp
jnewbery,2021-01-16 10:56:34,This error condition is hit if `pingtimeout` is set to 0.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r558839703,558839703,src/init.cpp
murtyjones,2021-01-31 18:26:50,Are cases where the response is malformed (e.g. user inputs a string instead of a number) handled elsewhere?,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r567464686,567464686,src/init.cpp
murtyjones,2021-01-31 18:33:03,Are the inner sets of parenthesis required or is this a code-style thing?,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r567465455,567465455,src/net_processing.cpp
dhruv,2021-02-01 01:34:46,"```suggestion\n    // Don't let pings time out due to mocktime\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r567520925,567520925,src/test/denialofservice_tests.cpp
dhruv,2021-02-01 01:38:00,"(Rookie question) Would the previous commit(9ad48f3965a32a6eba67ba49da19499fbe9b89e3) change anything with respect to mocktime unless `-pingtimeout` is used?  If not, why did some tests start to fail due to ping timeouts?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r567521625,567521625,test/functional/feature_bip68_sequence.py
dhruv,2021-02-01 17:38:52,"```suggestion\n    /** Send a ping message every PING_INTERVAL or if requested via rpc. Disconnect\n     * the peer if a ping has timed out. Return true upon disconnection. */\n    [[nodiscard]] bool ManagePing(CNode& node_to);\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568013403,568013403,src/net_processing.cpp
jnewbery,2021-02-02 14:27:15,"No, these aren't required. In C++ `&&` has a lower precedence than `!=` so the parens aren't changing the order of operations (https://en.cppreference.com/w/cpp/language/operator_precedence). They're not doing any harm either.\n\nThis code is moved unaltered in this PR. I think it's fine to keep it as it is.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568643037,568643037,src/net_processing.cpp
jnewbery,2021-02-02 14:34:22,"Argument handling is in `ArgsManager::GetArg()`. Since the second argument here is an int, the `GetArg(string, int)` version is called:\n\nhttps://github.com/bitcoin/bitcoin/blob/1e69800d5e60c7805931f2c5b978720c6aee180b/src/util/system.cpp#L473-L477\n\nwhich will try to convert the string into an int.\n\nThis might result in a slightly inaccurate error message, but I think it's fine. It's th",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568648896,568648896,src/init.cpp
jnewbery,2021-02-02 14:35:40,Sounds good. Added!,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568649911,568649911,src/test/denialofservice_tests.cpp
jnewbery,2021-02-02 14:37:47,"Previously, when ping timeouts were handled in `CConnman::InactivityCheck()`, the whole logic was gated on the following guard:\n\n```\n    if (now <= node.nTimeConnected + m_peer_connect_timeout) {\n        // Only run inactivity checks if the peer has been connected longer\n        // than m_peer_connect_timeout.\n        return false;\n    }\n```\n\nBecause tests generally run for les",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568651714,568651714,test/functional/feature_bip68_sequence.py
jnewbery,2021-02-02 14:42:43,"I've changed the signature to return a void, so the nodiscard tag is no longer required (good suggestion though!)\n\nI've taken the suggested comment changes.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r568655894,568655894,src/net_processing.cpp
dunxen,2021-02-03 17:19:04,"Nit: Is it a bit pedantic to call it a `nonpositive value` here to include zero? \n\nAlthough I see it's consistent with `-peertimeout` error so that's probably why :)",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r569596508,569596508,src/init.cpp
jnewbery,2021-02-04 10:51:43,"I've changed to option to be a binary true/false, so this check is no longer required.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570127729,570127729,src/init.cpp
glozow,2021-02-04 22:51:07,"So would `-pingtimeout` means timeout=true? And `-nopingtimeout` is the same thing as `-pingtimeout=0`? I couldn't find where the implicit ""no"" logic was :( ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570598796,570598796,test/functional/p2p_addr_relay.py
glozow,2021-02-04 23:06:56,"I appreciate the added documentation 🙏 \n\nnit\n```suggestion\n    /** We have completed a successful ping-pong keepalive. Update latest and best ping times. */\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570606043,570606043,src/net.h
dhruv,2021-02-05 02:53:03,I think it's done in [InterpretOption()](https://github.com/bitcoin/bitcoin/blob/ea5a50f92a6ff81b1d2dd67cdc3663e0e66733ac/src/util/system.cpp#L209) invoked from [ArgsManager::ParseParameters()](https://github.com/bitcoin/bitcoin/blob/ea5a50f92a6ff81b1d2dd67cdc3663e0e66733ac/src/util/system.cpp#L338) which is invoked in [AppInit()](https://github.com/bitcoin/bitcoin/blob/ea5a50f92a6ff81b1d2dd67cdc3,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570686167,570686167,test/functional/p2p_addr_relay.py
jnewbery,2021-02-05 09:18:13,Thanks @dhruv!,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570826114,570826114,test/functional/p2p_addr_relay.py
jnewbery,2021-02-05 09:20:49,:facepalm: I've fixed the doxygen style and also tweaked the comment wording a bit.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r570828055,570828055,src/net.h
glozow,2021-02-05 16:23:14,ahhhh thank you @dhruv!,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r571087717,571087717,test/functional/p2p_addr_relay.py
amitiuttarwar,2021-02-09 01:01:24,"just noting that this changed from `>=` to `>`. makes sense to call it a ""timing mishap"" if the pong was received in the same microsecond as we recorded for the ping going out, so seems fine. just highlighting the change since it's easy to miss. ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572489932,572489932,src/net_processing.cpp
amitiuttarwar,2021-02-09 01:10:38,"tangential because you didn't change this logic, but what's the point of sending a ping message to peers who are too old to support / respond with a pong?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572493215,572493215,src/net_processing.cpp
amitiuttarwar,2021-02-09 01:12:14,isn't this more of a `PongReceived`?,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572493715,572493715,src/net.h
amitiuttarwar,2021-02-09 01:24:49,"this comment previously followed the `fSuccesfullyConnected` check, which I think(?) was the intent -> `fSuccesfullyConnected` is set when processing the `VERACK` message, and `m_greatest_common_version` gets set when processing the `VERSION` message.\n\nbut now this comment is below `MaybeSendPing`, which also might retrieve `m_greatest_common_version` to construct the ping message. I find the ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572499884,572499884,src/net_processing.cpp
amitiuttarwar,2021-02-09 01:29:54,"I know you only moved this code, but I think we could handle `fDisconnect` better. \n\nThis comment seems misleading since I think it only refers to `fSuccesfullyConnected`. Then, we might set `fDisconnect` to true in `MaybeSendPing`, so we check this bool again a couple lines down to also return early.\n\nA simpler logic flow might be removing this check here, starting `MaybeSendPing` with `r",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572501852,572501852,src/net_processing.cpp
amitiuttarwar,2021-02-09 01:31:45,"```suggestion\n    /** Send a ping message every PING_INTERVAL or if requested via RPC. May  \n     *  mark the peer to be disconnected if a ping has timed out. */\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572502484,572502484,src/net_processing.cpp
amitiuttarwar,2021-02-09 01:35:21,"another comment on code that you simply moved-\n\nI found this definition odd. Why is it defined as an int but set as a boolean? Also, why is it an `int64_t`, that seems like more space needed than for a simple bool value? \n\nalso note that this could be constexpr, but I don't know if that actually impacts anything. I tried it out in [godbolt explorer](https://godbolt.org/z/61anP3) and looks ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572503697,572503697,src/net_processing.h
jnewbery,2021-02-09 10:44:03,"pong messages were introduced in 2012 with p2p version 60000. I imagine that prior to that, the reason for a ping message was simply a keepalive (make sure that TCP connections stay up, NAT pinholes stay open, etc). This logic maintains backwards compatibility with clients older than 60000.\n\nIn practice, I expect there are almost no clients older than 60000, but if there are any it'd be a sham",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572777257,572777257,src/net_processing.cpp
jnewbery,2021-02-09 10:46:01,"This is a comment on the line below, which is contructing a `CNetMsgMaker` object with the correct serialization version:\n\n`const CNetMsgMaker msgMaker(pto->GetCommonVersion());`",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572778977,572778977,src/net_processing.cpp
jnewbery,2021-02-09 10:49:09,"That seems like a reasonable change, but I'm not sure it needs to happen in this PR. Very happy to review a PR that moves this around if you think it'd make it clearer.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572782743,572782743,src/net_processing.cpp
jnewbery,2021-02-09 10:51:00,"No, I added this code. It's an int because originally the config option was to set how long the timeout. I later changed the config option to be binary on/off (https://github.com/bitcoin/bitcoin/pull/20721#issuecomment-773227475), but failed to change the type to bool. Will fix.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572783998,572783998,src/net_processing.h
jnewbery,2021-02-09 11:17:29,Yes. Much better. Fixed,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572800969,572800969,src/net.h
jnewbery,2021-02-09 11:21:19,"Oops, this was unintentional. You're right that it shouldn't have any impact, but I'm going to revert it to how it was. Good catch!",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572803578,572803578,src/net_processing.cpp
jnewbery,2021-02-09 11:22:25,Done!,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572804249,572804249,src/net_processing.cpp
jnewbery,2021-02-09 18:00:21,I've moved this back to immediately after the `fSuccessfullyConnected` check. Hopefully that's clearer.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573110570,573110570,src/net_processing.cpp
ajtowns,2021-02-10 03:38:07,"Recommend `if (x < y)` rather than `if (y > x)` generally -- smaller numbers generally go to the left of larger numbers, so keeping that convention is one less thing to have to think about. (This patch changes the tests from `timeout < GetTime()` to `now > timeout`)",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573423598,573423598,src/net_processing.cpp
ajtowns,2021-02-10 04:35:44,"Would probably be better to set `m_pingtimeout = gArgs.GetArg()` in the constructor, rather than re-query it every loop.\n\nI think losing the check that `GetSystemTimeInSeconds() <= node_to.nTimeConnected + peer_connect_timeout` (which is done in `InactivityCheck` but not `MaybeSendPing`) is a mistake -- the docs for `-peertimeout` say ""Specify a p2p connection timeout delay in seconds. After c",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573439430,573439430,src/net_processing.cpp
ajtowns,2021-02-10 04:48:24,"I think it might make more sense in general to set `-peertimeout=9999` for all the test cases (ie, in the framework generated bitcoin.conf) -- or at least all the test cases that use mocktime -- and override it anywhere that's explicitly testing disconnection due to timeouts (`p2p_ping.py`).",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573447152,573447152,test/functional/feature_bip68_sequence.py
ajtowns,2021-02-10 05:10:38,"If I'm following the logic here right, then if we backdate mocktime after sending a PING, we'll never send a PING to that node again. I'm not seeing an obvious problem with that (and don't think it's a change in this PR), but it's somewhat surprising.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573453477,573453477,src/net_processing.cpp
ajtowns,2021-02-10 05:46:20,"If you're doing disconnects here as well, doesn't that make it `MaybeSendPingOrDisconnectDueToLackOfPong()` ? Not sure the `Maybe` is useful -- `SendMessages` doesn't have a `Maybe` despite it not necessarily doing something every time it's called.\n\nThis moves ping disconnections from `ThreadSocketHandler` (which calls `SocketHandler` which calls `InactivityCheck`, I think on a 50ms cycle) to ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573464297,573464297,src/net_processing.cpp
ajtowns,2021-02-10 05:52:39,"Space after ""if"" if you're changing punctuation?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573466306,573466306,src/rpc/net.cpp
ajtowns,2021-02-10 06:09:23,"I think `ping_time.count == 0` is expected if you do `setmocktime X`, then a ping goes out, and the pong is received before you call `setmocktime Y`.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573471961,573471961,src/net_processing.cpp
jnewbery,2021-02-10 09:15:49,"I find that ""now < timeout"" or ""now > timeout"" is much more natural to parse and understand - the thing that we're measuring (the time now) is on the left, and the thing that it's being measured against (the timeout) is on the right. That's how most people speak (""Is it after 10 o'clock?""), and the other way is a bit yoda-esque (""was 10 o'clock before now?""). Ultimately, I think this is a matter o",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573562651,573562651,src/net_processing.cpp
jnewbery,2021-02-10 09:18:33,"That seems right to me. As you say, that's not changed by this PR.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573564530,573564530,src/net_processing.cpp
jnewbery,2021-02-10 09:24:44,"> make it MaybeSendPingOrDisconnectDueToLackOfPong()\n\nI don't think the function name needs to document all the functionality. It's documented in the function comment:\n\n```\n    /** Send a ping message every PING_INTERVAL or if requested via RPC. May\n     *  mark the peer to be disconnected if a ping has timed out. */\n```\n\n> Not sure the Maybe is useful -- SendMessages doesn't hav",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573568813,573568813,src/net_processing.cpp
jnewbery,2021-02-10 09:26:53,"> I think it might make more sense in general to set -peertimeout=9999 for all the test cases (ie, in the framework generated bitcoin.conf)\n\nChanging the behaviour of all tests is outside the scope of this PR, but I'm happy to review any proposal you have for making the tests more robust.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573570335,573570335,test/functional/feature_bip68_sequence.py
jnewbery,2021-02-10 10:07:12,Leaving this so as not to change behaviour,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573599030,573599030,src/net_processing.cpp
jnewbery,2021-02-10 10:08:28,Done,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573599966,573599966,src/rpc/net.cpp
jnewbery,2021-02-10 10:08:48,I've removed `pingtimeout` as requested.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573600195,573600195,src/net_processing.cpp
ajtowns,2021-02-10 11:22:04,(This was meant to be a reply to https://github.com/bitcoin/bitcoin/pull/20721#discussion_r572489932 except github wasn't let me comment there),https://github.com/bitcoin/bitcoin/pull/20721#discussion_r573648637,573648637,src/net_processing.cpp
ajtowns,2021-02-11 00:37:50,"""MaybeSendPing"" just kinda bugs me as a name. I'd suggest ""HandleBIP31PingPong()"" or something, but that would bug me a bit too. Maybe some day it'll be possible to just register a `PingPongMessages` class that deals with both the send and receive side :pray:",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574184445,574184445,src/net_processing.cpp
amitiuttarwar,2021-02-11 20:25:46,"think this could just be..\n\n```suggestion\n        peer.m_ping_start = now;\n```",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574803671,574803671,src/net_processing.cpp
amitiuttarwar,2021-02-11 21:18:00,"I'd prefer if this was a chrono duration, but I understand the context of keeping it consistent with net. ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574832926,574832926,src/net_processing.cpp
ajtowns,2021-02-11 23:41:01,"Adding:\n\n```c++\n    /** Return true if inactivity checks should be ignored */\n    inline bool IgnoreInactivityChecks(const CNode& node) const\n    {\n        return GetSystemTimeInSeconds() <= node.nTimeConnected + m_peer_connect_timeout;\n    }\n```\n\nto `CConnman` would let you avoid adding `m_peer_connect_timeout` in `PeerManagerImpl` and keep the non-mockable times in net.cpp. (",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574903578,574903578,src/net_processing.cpp
ajtowns,2021-02-12 00:28:44,"Should there be a `if (peer == nullptr) return true;` here? We check that everywhere else.\n\nRather than move this line, might be better to continue doing it first thing and pass the result into  `MaybeDiscourageAndDisconnect` rather than having that function look it up too. (At least, that's where I'm expecting to end up with #20758 eventually)",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574920953,574920953,src/net_processing.cpp
ajtowns,2021-02-12 00:40:23,"If you write ""if (10 o'clock < now)"" you've literally put now after 10 o'clock and are asking if that's a true statement. I do get what you're saying; I just find the always less-than strategy lets you read the ordering much more directly in general -- which one comes first is in exactly the order you're reading, and not dictated by a single bit of punctuation. It's also helpful for bounds checkin",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r574925129,574925129,src/net_processing.cpp
jnewbery,2021-02-12 11:37:34,Done,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575163252,575163252,src/net_processing.cpp
jnewbery,2021-02-12 11:37:43,Done,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575163376,575163376,src/net_processing.cpp
jnewbery,2021-02-12 11:39:20,I've now removed this again. Sorry :grimacing: ,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575164249,575164249,src/net_processing.cpp
jnewbery,2021-02-12 12:05:02,Done!,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575177094,575177094,src/net_processing.cpp
glozow,2021-02-12 18:59:44,"Question about 6a03a1f7e4: Is the idea that, in the future, `MaybeDiscourageAndDisconnect()` will only need to accept a `Peer`? And right now, even though you could grab the `PeerRef` from the `m_peer_map` in here again, passing in a `Peer` is a bit less overhead?",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575458057,575458057,src/net_processing.cpp
glozow,2021-02-12 19:32:27,"4561423100c1b6a8e778525a027d021b918a6312\nDefinitely like peerman asking connman if it should `RunInactivityChecks()` instead of taking a peertimeout param 👌\nStrictly speaking, I think it's possible for the time to be different from `RunInactivityChecks` to `InactivityChecks` since they each grab the time separately (as opposed to before, where they used the same `now`)? I don't think it'd be a",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575474426,575474426,src/net.cpp
ajtowns,2021-02-15 00:30:53,"`MaybeDiscourageAndDisconnect` should continue needing a `CNode` in order to signal the disconnection, I think.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575890770,575890770,src/net_processing.cpp
ajtowns,2021-02-15 00:33:06,"~Currently system time isn't guaranteed to move forwards; and I believe we're now doing these checks in different threads so I don't think it's reasonable to try to use the same exact point in time for the two comparisons. We should be doing both checks 10-20 times per second for each peer anyway, I believe, so any lack of precision shouldn't matter.~",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575891034,575891034,src/net.cpp
ajtowns,2021-02-15 00:47:36,`const NodeId peer_id{peer.m_id};` would've changed fewer lines :),https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575893265,575893265,src/net_processing.cpp
ajtowns,2021-02-15 00:54:14,"`if the peer should be connected for inactivity` ? -- we could introduce a net permission to prevent that rather than just have a standard timeout for all peers, eg",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575894343,575894343,src/net.h
ajtowns,2021-02-15 00:55:54,I'm surprised this is pulled out of `InactivityCheck()`. Seems cleaner to keep the early exit to me,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575894665,575894665,src/net.cpp
ajtowns,2021-02-15 01:01:17,"Could make this\n\n```c++\nbool CConnman::RunInactivityChecks(const CNode& node, const uint64_t const* pnow=nullptr)\n{\n    const uint64_t now = (pnow ? *pnow : GetSystemTimeInSeconds());\n    return now > node.nTimeconnected + m_peer_connect_timeout;\n}\n```\n\nand call it from within `InactivityCheck()` as `if (!RunInactivityChecks(node, &now) return false;` to avoid unnecessarily get",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575895661,575895661,src/net.cpp
ajtowns,2021-02-15 01:13:11,"Only mentioning since you've got `RunInactivityChecks` as a separate commit, but I think you could reasonably have pulled `SendPings()` out as a separate commit prior to moving things from net to net_processing too.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575897478,575897478,src/net_processing.cpp
jnewbery,2021-02-15 10:23:48,"Indeed it would, but minimizing lines changed isn't the right metric to judge a commit. Instead we should aim to maximize the clarity and expressiveness of the code after the change. If I was writing this from scratch, I wouldn't create a local copy of the peer id just to use in log lines.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576086207,576086207,src/net_processing.cpp
jnewbery,2021-02-15 10:42:57,"> MaybeDiscourageAndDisconnect should continue needing a CNode in order to signal the disconnection, I think.\n\nThis is true. It's also currently needed for the connection type, which I don't think belongs in net_processing.\n\n> Even though you could grab the PeerRef from the m_peer_map in here again, passing in a Peer is a bit less overhead?\n\nWe want to grab a `PeerRef` at the entry fun",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576098186,576098186,src/net_processing.cpp
jnewbery,2021-02-15 10:44:57,"Yes, good point.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576099605,576099605,src/net_processing.cpp
ajtowns,2021-02-15 12:12:23,"Hmm, actually I think I disagree with that (well, at least after exaggerating it into a bigger principle) -- review is a much more important bottleneck than just about anything else, so optimising the code to be easier to review is much more helpful than optimising it to make perfect sense if we were going to erase our git history and anonymously post the current tree to a mailing list. I think ju",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576149311,576149311,src/net_processing.cpp
jnewbery,2021-02-15 12:28:36,"This discussion is a bit abstract, but I'm going to stand by my assertion. We should always be aiming to improve the quality of the code by standardizing to a clear and consistent style and by taking advantage of higher-level abstractions. One example: if I find a hand written loop that I need to modify, I may well replace it with an stl algorithm. That's undoubtedly a bit more effort to review, b",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576158079,576158079,src/net_processing.cpp
ajtowns,2021-02-15 15:22:32,"The point of review being a bottleneck is that we won't ever progress to a global maximum of quality -- if we could do that, by definition we wouldn't be bottlenecked. Every merge is a reflection of that review bottleneck: did we spend our limited review cycles on working out if a while loop does the same thing as the for loop it replaces, or did we spend it on working out if muhash or minisketch ",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576265810,576265810,src/net_processing.cpp
amitiuttarwar,2021-02-15 19:46:58,I'd prefer if this was called something like `InactivityChecksEnabled` or `ShouldRunInactivityChecks` because right now the name suggests this function is where they are run (aka what `InactivityCheck` does).,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576394790,576394790,src/net.cpp
amitiuttarwar,2021-02-15 20:18:25,connected for inactivity?? I don't follow.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576405738,576405738,src/net.h
glozow,2021-02-15 21:16:27,are y'all talking about the comment being unclear or ?,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576425696,576425696,src/net.h
jnewbery,2021-02-16 09:50:25,I'll change this in a follow-up.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576688160,576688160,src/net.cpp
jnewbery,2021-02-16 09:54:46,"Thanks AJ, these are good points.\n\nYou're wrong about stl algorithms though :grin:",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576691178,576691178,src/net_processing.cpp
MarcoFalke,2021-02-16 12:08:12,unrelated note: Can use the count seconds double helper from #21015     ,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576774527,576774527,src/rpc/net.cpp
MarcoFalke,2021-02-16 12:08:30,Same,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576774686,576774686,src/net_processing.cpp
jnewbery,2021-02-16 13:17:07,Thanks @MarcoFalke. I'll address this in the follow-up,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576814259,576814259,src/rpc/net.cpp
MarcoFalke,2021-02-16 13:53:22,"#21015 isn't merged yet, but hopefully soon will.",https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576838496,576838496,src/rpc/net.cpp
jnewbery,2021-02-16 14:03:07,I plan to review it soon,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576845394,576845394,src/rpc/net.cpp
jnewbery,2021-02-16 15:30:25,I'll take aj's suggestion here: https://github.com/bitcoin/bitcoin/pull/20721#discussion_r575895661 in a follow-up,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576912987,576912987,src/net.cpp
jnewbery,2021-02-16 15:58:08,#21198,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576935113,576935113,src/net.cpp
jnewbery,2021-02-16 15:58:24,#21198,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576935306,576935306,src/net.cpp
jnewbery,2021-02-16 15:58:31,#21198,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576935419,576935419,src/net.cpp
jnewbery,2021-02-16 15:58:37,#21198,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576935505,576935505,src/net.h
jnewbery,2021-02-16 15:59:14,I'll do this in #21198 once #21015 is merged.,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576936047,576936047,src/rpc/net.cpp
jnewbery,2021-02-16 15:59:22,same same,https://github.com/bitcoin/bitcoin/pull/20721#discussion_r576936166,576936166,src/net_processing.cpp
