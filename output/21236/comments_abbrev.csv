DrahtBot,2021-02-19 14:17:28,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21528 ([p2p] Reduce addr blackholes by amitiuttarwar)\n* #21515 (Erlay: bandwidth-efficient transaction relay protocol by",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-782102826,782102826,
jnewbery,2021-02-22 08:46:46,Rebased on master to pick up fix for interface_zmq.py in #21008.,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-783203779,783203779,
jnewbery,2021-02-28 11:52:28,Thanks for the review @ajtowns. I've addressed your comments.,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-787440104,787440104,
jnewbery,2021-02-28 22:05:15,Oops. I missed taking the new lock in one of the call sites. Will fix up tomorrow.,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-787531613,787531613,
jnewbery,2021-03-01 18:00:02,"Once all of the addr data has been moved into net_processing, I intend to guard it with a single lock (see the `m_addr_relay` struct in https://github.com/jnewbery/bitcoin/tree/2021-02-lazy-init-peer). However, it's proving difficult to get lock orders right while the data is still in net. I've decided to punt on doing that until after this PR.\n\nTo avoid simply removing the guard from `m_next_",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-788149974,788149974,
jnewbery,2021-03-03 09:04:16,"Thanks for the review, @fanquake! The compile error was due to an annotation that I'd left from a previous branch. It's now fixed.\n\n> If this SendMessages() logic is going to be split up even more, you could consider a call to GetTime<>() at the start, and just pass that into MaybeSendPing, MaybeSendAddr, MaybeSomeOtherFunc etc.\n\nGood idea. Done!",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-789555842,789555842,
jnewbery,2021-03-04 10:09:51,Thanks for the review @amitiuttarwar! I've addressed all of your comments.,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-790497523,790497523,
jnewbery,2021-03-04 14:26:04,Rebased,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-790655465,790655465,
jnewbery,2021-03-06 16:17:42,"> The only touchpoint I'm unsure about is the call to fRelay here\n\nI'm not sure what this is referring to. I don't see `fRelay` in that file at all.",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-791980714,791980714,
jnewbery,2021-03-06 16:42:08,"> I think we now traverse the vector 2x instead of 1x, but that seems fine.\n\nI've changed this so we both check for the addr in `node.m_addr_known` and add it to `node.m_addr_known` in the same pass.",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-791986604,791986604,
jnewbery,2021-03-11 13:58:35,Rebased,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-796754661,796754661,
jnewbery,2021-03-17 14:25:32,rebased,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-801124033,801124033,
hebasto,2021-03-26 13:26:34,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-808217285,808217285,
jnewbery,2021-03-29 11:23:53,"Thanks for the review @hebasto! Responding to your points:\n\n> I see two calls of three are consolidated. What about the third one [...]\n\nI was also counting the call inside `MaybeSendPing()`, which is called from `SendMessages()`. I've now removed the additional call to `GetTime()` as suggested, which required a duration cast.\n\n> I believe that this commit is not a clean refactoring. T",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-809301197,809301197,
hebasto,2021-03-29 16:45:50,`RecursiveMutex cs_sendProcessing` guards nothing. Let's burn it :),https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-809535865,809535865,
hebasto,2021-03-29 16:52:06,"pico-nit: I find myself more comfortable to reason about the code when the same variable is placed on the same position in similar logical operations. Consider\nhttps://github.com/bitcoin/bitcoin/blob/b4d7d3def058e17d36cf7702e34c0a2fff45a5cf/src/net_processing.cpp#L4154-L4155 and https://github.com/bitcoin/bitcoin/blob/b4d7d3def058e17d36cf7702e34c0a2fff45a5cf/src/net_processing.cpp#L4173\n\nCou",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-809540053,809540053,
jnewbery,2021-03-29 17:18:42,"> pico-nit: I find myself more comfortable to reason about the code when the same variable is placed on the same position in similar logical operations.\n\nI tend to agree and think that generally the variable should be placed on the left and the thing it's being compared to on the right. Others disagreed with me on previous PRs and told me to always place the smaller thing on the left. I think ",https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-809557707,809557707,
sipa,2021-03-31 23:18:12,utACK 935d4889228e7e361c8b0020761fa0e08a55fb48,https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-811526436,811526436,
jnewbery,2021-02-19 13:23:26,"It's currently impossible for `vAddrToSend` to grow larger than `MAX_ADDR_TO_SEND` (observe that the only place where elements are added to `vAddrToSend` check the size first). However, it might be safer to do something like:\n\n```suggestion\n    if(pto.vAddrToSend.size() > MAX_ADDR_TO_SEND) vAddrToSend.resize(MAX_ADDR_TO_SEND);\n```\n\nI'm happy to go with whatever reviewers prefer.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r579181272,579181272,src/net_processing.cpp
ajtowns,2021-02-26 17:37:25,"Err, nack. Please add `EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing)` to `MaybeSendAddr` instead. I could see an argument for having a single mutex representing ""this is the message handler thread"" (rather than one per-peer), but removing guards entirely is wrong...",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r583805388,583805388,src/net.h
ajtowns,2021-02-26 18:36:31,Maybe change this to `node` or `node_to` as per `MaybeSendPing`. It's no longer a `p` either way.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r583839782,583839782,src/net_processing.cpp
ajtowns,2021-02-26 18:54:25,"Could have an Assume instead of an assert, but better to error out than silently cover it up if mistakes are introduced elsewhere I think.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r583849836,583849836,src/net_processing.cpp
ajtowns,2021-02-26 18:56:23,"Should move this to directly after the `RelayAddrsWithConn` check -- that's what makes it true, and you rely on `m_addr_known` being not null in the `!IBD` branch above as well.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r583851018,583851018,src/net_processing.cpp
jnewbery,2021-02-28 10:53:53,"These members should never have been guarded by `cs_sendProcessing`, which really only exists at this point to make sure that multiple threads don't enter `SendMessages()` concurrently.\n\nThe annotation was over-zealously added in #13123. The author of that PR agrees that these annotations are unnecessary: https://github.com/bitcoin/bitcoin/pull/13123#issuecomment-647505130.\n\nThese variable",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584276609,584276609,src/net.h
jnewbery,2021-02-28 10:59:14,"Do you think it'd be useful to add a new macro `AssertAndRecover()`:\n\n- in debug builds, this asserts (terminates) if the condition fails\n- in release builds, this executes some recovery code and continues.\n\neg here the recovery code would be to clear the `vAddrToSend` vector and return from `MaybeSendAddr()`. Better to not relay addr records to a peer and continue operation than crash t",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584277318,584277318,src/net_processing.cpp
jnewbery,2021-02-28 11:40:47,Done,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584282539,584282539,src/net_processing.cpp
jnewbery,2021-02-28 11:44:01,Done,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584282888,584282888,src/net_processing.cpp
ajtowns,2021-02-28 14:17:24,"Isn't `AssertAndRecover(condition, recovery)` the same as `if (!Assume(condition)) { recovery; }` ? (Err, at least if `Assume` was the identity function its comments claim it to be, rather than being cast to `(void)` in release builds)\n\nNot sure the recovery code is needed here -- more than MAX_ADDR_TO_SEND would be a protocol violation, but shouldn't cause a crash or anything, I think?",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584304375,584304375,src/net_processing.cpp
ajtowns,2021-02-28 14:41:40,"""These variables are only ever read/written ... inside SendMessages"" -- is **exactly** what GUARDED_BY(cs_sendProcessing) documents. The point of having the guard is to catch errors when we change the code in future and violate the assumptions we were relying on -- if the code compiles with the GUARDED_BY statements, it will always also compile correctly without them -- the trouble comes when peop",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584308103,584308103,src/net.h
jnewbery,2021-02-28 20:08:02,"> Isn't AssertAndRecover(condition, recovery) the same as if (!Assume(condition)) { recovery; }\n\nAh interesting. I didn't realise that.\n\n> Not sure the recovery code is needed here -- more than MAX_ADDR_TO_SEND would be a protocol violation, but shouldn't cause a crash or anything, I think?\n\nI think it's probably better to skip sending the `addr` message than violate the p2p protocol.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584353143,584353143,src/net_processing.cpp
jnewbery,2021-02-28 20:10:00,"> It's a mistake the other addr-related member variables aren't guarded though\n\nOk. I've moved all of the addr fields to be guarded by their own `m_addr_mutex` mutex. This seems much better than having data/logic that should be in net_processing being locked by a mutex in net.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584353407,584353407,src/net.h
jnewbery,2021-03-01 18:01:45,That proved more difficult than expected. I've reverted that change and have moved just  `m_next_addr_send` and `m_next_local_addr_send` to be guarded by the new `m_addr_mutex`. I'll move the rest of the addr fields under that mutex when they move into the `Peer` struct.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r584933092,584933092,src/net.h
ajtowns,2021-03-02 10:52:41,"I don't follow why you're changing those guards at all in this PR; you don't need to. See https://github.com/ajtowns/bitcoin/tree/202003-pr21236\n\nI don't think it will make sense to lock `m_addr_known` and `vAddrToSend` with per-peer locks: when receiving an addr message we'll obtain the lock for the peer that sends the message, then attempt to obtain the lock for a peer we want to forward the",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r585462620,585462620,src/net.h
jnewbery,2021-03-02 11:36:12,Thanks! Totally agree that taking and releasing multiple locks would be ridiculous. I've taken your branch.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r585490441,585490441,src/net.h
fanquake,2021-03-03 06:36:58,"```suggestion\n    if (node.vAddrToSend.capacity() > 40) {\n        node.vAddrToSend.shrink_to_fit();\n    }\n```",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586153384,586153384,src/net_processing.cpp
fanquake,2021-03-03 06:42:20,"```suggestion\n    const auto current_time = GetTime<std::chrono::microseconds>();\n```",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586155459,586155459,src/net_processing.cpp
jnewbery,2021-03-03 09:02:52,done,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586234407,586234407,src/net_processing.cpp
jnewbery,2021-03-03 09:02:57,done,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586234438,586234438,src/net_processing.cpp
amitiuttarwar,2021-03-03 23:39:11,μnit: `schedule. */` ,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586886948,586886948,src/net_processing.cpp
amitiuttarwar,2021-03-03 23:57:20,what do you think about adding an `AssertLockHeld` to accompany the clang safety annotations with a dynamic runtime check? ([developer notes](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#threads-and-synchronization)),https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586903995,586903995,src/net_processing.cpp
amitiuttarwar,2021-03-04 00:48:52,"looks like d506485865 removed the IBD check, but 4adba42f41 brings it back",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586925342,586925342,src/net_processing.cpp
amitiuttarwar,2021-03-04 01:02:29,"might be worth updating to `m_chainman.ActivateChainstate()`? \n\nh/t https://github.com/bitcoin/bitcoin/pull/21327#discussion_r585433607",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r586930516,586930516,src/net_processing.cpp
amitiuttarwar,2021-03-04 04:46:35,looks like both `MaybeSendPing` and `MaybeSendAddr` can be made into const member functions,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587104852,587104852,src/net_processing.cpp
jnewbery,2021-03-04 10:01:37,"I'm not sure that `const` should be used in cases like this. The compiler will make sure that any function marked `const` doesn't mutate the object's data members, which is the case for both of these functions. However, `const` is not transitive, so the functions are still able to modify state through pointers and modify global state.\n\nHere, `PeerManagerImpl` owns the map of `Peer` objects:\n",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587327515,587327515,src/net_processing.cpp
jnewbery,2021-03-04 10:03:33,Fixed.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587328862,587328862,src/net_processing.cpp
jnewbery,2021-03-04 10:04:45,done,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587329584,587329584,src/net_processing.cpp
jnewbery,2021-03-04 10:04:56,Oops. Good catch. Fixed!,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587329723,587329723,src/net_processing.cpp
jnewbery,2021-03-04 10:09:17,This isn't adding a new `::ChainstateActive()` like #21327 was. I think changing this call to be `m_chainman.ActiveChainstate()` would be adding more noise/distraction for reviewers.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587332869,587332869,src/net_processing.cpp
ajtowns,2021-03-04 12:17:55,"Since `PeerRef` is a shared_ptr which does its own destruction once the ref count hits zero, I don't think it's accurate to say that `PeerManagerImpl` owns the `Peer` object.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587422505,587422505,src/net_processing.cpp
jnewbery,2021-03-04 12:39:09,"I'm not sure it's right to say that ownership of Peer is shared because it uses a shared pointer. We use a shared pointer for the Peer for convenience/safety/synchronization. We never take a shared pointer to a Peer outside PeerManagerImpl, and if we really wanted to, could implement it with raw pointers and a manual ref count, and then `new` and `delete` the Peer objects (as is done by CConnman f",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587435992,587435992,src/net_processing.cpp
ajtowns,2021-03-04 13:59:11,"I was surprised to discover that if you have a class Y with a member `X& x` then C++ thinks it's fine to modify `x.foo = 3` from a const member function of Y. So not sure I'd argue against ""a bit legalistic and not very useful""... (So in particular, if you have a `const PeerManagerImpl`, it will have no problems calling non-const functions of its `m_connman`)\n\nIf you consider modifying the con",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587491156,587491156,src/net_processing.cpp
jnewbery,2021-03-04 14:28:55,"This certainly isn't a hill I'm prepared to die on (either here or in https://github.com/bitcoin/bitcoin/pull/21162#discussion_r587410937). My preference is not to mark functions as const if they're mutating data that is so closely associated with the object that it can only be modified through the object, but I'll go along with the majority if people want this to be const.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587515302,587515302,src/net_processing.cpp
ajtowns,2021-03-04 15:18:22,"Yeah, not my hill either, but I think it's worth discussing so we've got a *shared* understanding of how this data's meant to be controlled... I have some other ideas about `Peer` ownership I want to try out once more of this refactoring is finished that might change this, and worst case can add or remove const markers when we're reordering the PeerManageImpl declarations and adding more comments.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587557545,587557545,src/net_processing.cpp
amitiuttarwar,2021-03-04 18:49:44,"ok. since this is a refactor PR anyway, as a reviewer I would not mind, but its no worries :) ",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587729007,587729007,src/net_processing.cpp
amitiuttarwar,2021-03-05 00:57:50,"I agree that the relevant question is ""what is `const` for?"" The two main aspects are compiler enforcement & human understanding. @jnewbery I get what you're saying about making these member functions `const` is misleading for the humans, because the function often mutates the logical state of the object. However, I also agree with @ajtowns that since the compilers would actually be enforcing some",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587946600,587946600,src/net_processing.cpp
sipa,2021-03-05 02:21:53,"I'm 99% sure that compilers don't use `const` markers on functions/pointers/references at all for optimization. All they do is disallow certain operations on them.\n\nIt's different if you have an actual `const` variable (e.g. a global, local, or member variable that is declared const where it is defined & initialized), because that means ""changing this is UB"". Any other use simply means ""no non",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r587978004,587978004,src/net_processing.cpp
amitiuttarwar,2021-03-05 23:25:33,should we explicitly `#include <algorithm>`? ,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r588780970,588780970,src/net_processing.cpp
amitiuttarwar,2021-03-05 23:48:40,"interesting, ok. so other than with direct variable management, `const` essentially uses the compiler to ensure anyone introducing new code has to think before they modify the object through this path. hm, thanks.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r588787373,588787373,src/net_processing.cpp
jnewbery,2021-03-06 15:44:21,"@sipa yes, that's exactly my understanding. Mutating a `const`-declared variable is UB. Therefore compilers could make optimizations based on the fact that `const`-declared variables cannot change.\n\n`const` on a member functions simply means that this function call won't mutate the state of the object, although of course, other code could mutate the state. Therefore, the compiler can't make an",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r588896407,588896407,src/net_processing.cpp
jnewbery,2021-03-06 15:51:07,Yes! Thank you :),https://github.com/bitcoin/bitcoin/pull/21236#discussion_r588897221,588897221,src/net_processing.cpp
jnewbery,2021-03-06 16:16:36,Done!,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r588899879,588899879,src/net_processing.cpp
amitiuttarwar,2021-03-17 18:45:09,I'm convinced :) ,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r596292997,596292997,src/net_processing.cpp
hebasto,2021-03-26 16:44:43,"e3d6cbca83300e5ccc0fd8a1075ff52654aa76ff\n\nEarly return skips https://github.com/bitcoin/bitcoin/blob/e3d6cbca83300e5ccc0fd8a1075ff52654aa76ff/src/net_processing.cpp#L4221-L4224\n\nThat differs from original behavior.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r602442471,602442471,src/net_processing.cpp
ccdle12,2021-03-28 14:04:30,"super nit: `current_time` here is `const`. Not sure if the intention for `now` is to be immutable in `MaybeSendPing()`, but I think  `now` would still be mutable even though the outer scoped variable is `const` because of the param signature in `MaybeSendPing(..., std::chrono::microseconds now)`",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r602883642,602883642,src/net_processing.cpp
jnewbery,2021-03-29 10:11:36,"In general, there's no benefit to making pass by value parameters const. Passing by reference to const indicates to the caller that the parameter will not be mutated. When passing by value, a copy of the parameter is made, so the original object cannot be mutated.\n\nThere's very good documentation about how to pass parameters in the c++ core guidelines: https://isocpp.github.io/CppCoreGuideline",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603171920,603171920,src/net_processing.cpp
jnewbery,2021-03-29 11:22:55,#21317 has now been merged so I've updated this to use the `if (!Assume(condition)) { recovery; }` pattern.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603212914,603212914,src/net_processing.cpp
jnewbery,2021-03-29 11:23:30,"This is still causing confusion for reviewers, so I've moved the fields to have their own lock that is only used in net_processing.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603213253,603213253,src/net.h
jnewbery,2021-03-29 11:24:14,Thanks @hebasto! See https://github.com/bitcoin/bitcoin/pull/21236#issuecomment-809301197.,https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603213680,603213680,src/net_processing.cpp
ccdle12,2021-03-29 11:52:04,"Thanks, apologies, I think I should have been more clear. Even though the `std::chrono` is passed by value, MaybeSendPing() treats ~it~ the copy as mutable even though I don't think the method mutates the copy. So I was just thinking would it be useful/or maybe unecessary to make current_time in MaybeSendPing() also const.",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603229203,603229203,src/net_processing.cpp
jnewbery,2021-03-29 13:42:59,"I understand. Yes, it is possible to mark the function parameters as `const` in the definition, which would prevent the copy from being mutated within the function body. You can even do this if the function declaration does not mark the parameter as `const`.\n\nHowever, I haven't ever seen that style used in this project. It may be marginally useful, but it may also be misleading (eg see https:/",https://github.com/bitcoin/bitcoin/pull/21236#discussion_r603305159,603305159,src/net_processing.cpp
