[
  {
    "sha": "c02fa47baa517e17b5c43bde3902b1e410c1b93f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDJmYTQ3YmFhNTE3ZTE3YjVjNDNiZGUzOTAyYjFlNDEwYzFiOTNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-03T08:46:55Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net processing] Only call GetTime() once in SendMessages()\n\nWe currently call GetTime() 4 times in SendMessages(). Consolidate this to\nonce GetTime() call.",
      "tree": {
        "sha": "0d6920d08100011e4aadb178d28cd6cba5719a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d6920d08100011e4aadb178d28cd6cba5719a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c02fa47baa517e17b5c43bde3902b1e410c1b93f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02fa47baa517e17b5c43bde3902b1e410c1b93f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c02fa47baa517e17b5c43bde3902b1e410c1b93f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02fa47baa517e17b5c43bde3902b1e410c1b93f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bcd278aa60adf925218a1d59506d525ae639bb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bcd278aa60adf925218a1d59506d525ae639bb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bcd278aa60adf925218a1d59506d525ae639bb3"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9f9af0aa33c9e6529a8e16739bade7f7735a7bd7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c02fa47baa517e17b5c43bde3902b1e410c1b93f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c02fa47baa517e17b5c43bde3902b1e410c1b93f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c02fa47baa517e17b5c43bde3902b1e410c1b93f",
        "patch": "@@ -317,8 +317,10 @@ class PeerManagerImpl final : public PeerManager\n     void PushNodeVersion(CNode& pnode, int64_t nTime);\n \n     /** Send a ping message every PING_INTERVAL or if requested via RPC. May\n-     *  mark the peer to be disconnected if a ping has timed out. */\n-    void MaybeSendPing(CNode& node_to, Peer& peer);\n+     *  mark the peer to be disconnected if a ping has timed out.\n+     *  We use mockable time for ping timeouts, so setmocktime may cause pings\n+     *  to time out. */\n+    void MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now);\n \n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n@@ -4096,12 +4098,8 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n     }\n }\n \n-void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer)\n+void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now)\n {\n-    // Use mockable time for ping timeouts.\n-    // This means that setmocktime may cause pings to time out.\n-    auto now = GetTime<std::chrono::microseconds>();\n-\n     if (m_connman.RunInactivityChecks(node_to) && peer.m_ping_nonce_sent &&\n         now > peer.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL}) {\n         LogPrint(BCLog::NET, \"ping timeout: %fs peer=%d\\n\", 0.000001 * count_microseconds(now - peer.m_ping_start.load()), peer.m_id);\n@@ -4178,7 +4176,9 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     // If we get here, the outgoing message serialization version is set and can't change.\n     const CNetMsgMaker msgMaker(pto->GetCommonVersion());\n \n-    MaybeSendPing(*pto, *peer);\n+    const auto current_time = GetTime<std::chrono::microseconds>();\n+\n+    MaybeSendPing(*pto, *peer, current_time);\n \n     // MaybeSendPing may have marked peer for disconnection\n     if (pto->fDisconnect) return true;\n@@ -4189,7 +4189,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast\n-        auto current_time = GetTime<std::chrono::microseconds>();\n \n         if (fListen && pto->RelayAddrsWithConn() &&\n             !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n@@ -4485,7 +4484,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                             vInv.clear();\n                         }\n                     }\n-                    pto->m_tx_relay->m_last_mempool_req = GetTime<std::chrono::seconds>();\n+                    pto->m_tx_relay->m_last_mempool_req = std::chrono::duration_cast<std::chrono::seconds>(current_time);\n                 }\n \n                 // Determine transactions to relay\n@@ -4573,7 +4572,6 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n-        current_time = GetTime<std::chrono::microseconds>();\n         if (state.m_stalling_since.count() && state.m_stalling_since < current_time - BLOCK_STALLING_TIMEOUT) {\n             // Stalling only triggers when the block download window cannot move. During normal steady state,\n             // the download window should be much larger than the to-be-downloaded set of blocks, so disconnection"
      }
    ]
  },
  {
    "sha": "4ad4abcf07efefafd439b28679dff8d6bbf62943",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWQ0YWJjZjA3ZWZlZmFmZDQzOWIyODY3OWRmZjhkNmJiZjYyOTQz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T10:36:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net] Change addr send times fields to be guarded by new mutex",
      "tree": {
        "sha": "849b342a78caddc23bce900179e4193348c73965",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/849b342a78caddc23bce900179e4193348c73965"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ad4abcf07efefafd439b28679dff8d6bbf62943",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad4abcf07efefafd439b28679dff8d6bbf62943",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ad4abcf07efefafd439b28679dff8d6bbf62943",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad4abcf07efefafd439b28679dff8d6bbf62943/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c02fa47baa517e17b5c43bde3902b1e410c1b93f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c02fa47baa517e17b5c43bde3902b1e410c1b93f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c02fa47baa517e17b5c43bde3902b1e410c1b93f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "66868be7c8c9eb9562a07f7f2000c5d453c5daf7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad4abcf07efefafd439b28679dff8d6bbf62943/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad4abcf07efefafd439b28679dff8d6bbf62943/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=4ad4abcf07efefafd439b28679dff8d6bbf62943",
        "patch": "@@ -548,8 +548,9 @@ class CNode\n     std::vector<CAddress> vAddrToSend;\n     std::unique_ptr<CRollingBloomFilter> m_addr_known{nullptr};\n     bool fGetAddr{false};\n-    std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n-    std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\n+    Mutex m_addr_send_times_mutex;\n+    std::chrono::microseconds m_next_addr_send GUARDED_BY(m_addr_send_times_mutex){0};\n+    std::chrono::microseconds m_next_local_addr_send GUARDED_BY(m_addr_send_times_mutex){0};\n \n     struct TxRelay {\n         mutable RecursiveMutex cs_filter;"
      },
      {
        "sha": "359b7d98436310579fa00369d694e113b0b1fc09",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad4abcf07efefafd439b28679dff8d6bbf62943/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad4abcf07efefafd439b28679dff8d6bbf62943/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4ad4abcf07efefafd439b28679dff8d6bbf62943",
        "patch": "@@ -4189,6 +4189,8 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast\n+        {\n+        LOCK(pto->m_addr_send_times_mutex);\n \n         if (fListen && pto->RelayAddrsWithConn() &&\n             !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n@@ -4249,6 +4251,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             if (pto->vAddrToSend.capacity() > 40)\n                 pto->vAddrToSend.shrink_to_fit();\n         }\n+        } // pto->m_addr_send_times_mutex\n \n         // Start block sync\n         if (pindexBestHeader == nullptr)"
      }
    ]
  },
  {
    "sha": "ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDcxOTI5N2YyZWNkZDIzOTRlZmY2NjhiM2JlNzA3MGJjOWNiM2Uy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-09T09:51:20Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net processing] Extract `addr` send functionality into MaybeSendAddr()\n\nReviewer hint: review with\n\n `git diff --color-moved=dimmed-zebra --ignore-all-space`",
      "tree": {
        "sha": "1956802a26e43cb2195639633e36c5e17b52d46e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1956802a26e43cb2195639633e36c5e17b52d46e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad719297f2ecdd2394eff668b3be7070bc9cb3e2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ad4abcf07efefafd439b28679dff8d6bbf62943",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad4abcf07efefafd439b28679dff8d6bbf62943",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ad4abcf07efefafd439b28679dff8d6bbf62943"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 71,
      "deletions": 65
    },
    "files": [
      {
        "sha": "b79da072deb0bd677701d6f2b3f358bf3c327e9a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 65,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad719297f2ecdd2394eff668b3be7070bc9cb3e2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad719297f2ecdd2394eff668b3be7070bc9cb3e2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
        "patch": "@@ -322,6 +322,9 @@ class PeerManagerImpl final : public PeerManager\n      *  to time out. */\n     void MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now);\n \n+    /** Send `addr` messages on a regular schedule. */\n+    void MaybeSendAddr(CNode* pto, std::chrono::microseconds current_time);\n+\n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n     /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n@@ -4138,6 +4141,72 @@ void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::mic\n     }\n }\n \n+void PeerManagerImpl::MaybeSendAddr(CNode* pto, std::chrono::microseconds current_time)\n+{\n+    LOCK(pto->m_addr_send_times_mutex);\n+    const CNetMsgMaker msgMaker(pto->GetCommonVersion());\n+\n+    if (fListen && pto->RelayAddrsWithConn() &&\n+        !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n+        pto->m_next_local_addr_send < current_time) {\n+        // If we've sent before, clear the bloom filter for the peer, so that our\n+        // self-announcement will actually go out.\n+        // This might be unnecessary if the bloom filter has already rolled\n+        // over since our last self-announcement, but there is only a small\n+        // bandwidth cost that we can incur by doing this (which happens\n+        // once a day on average).\n+        if (pto->m_next_local_addr_send != 0us) {\n+            pto->m_addr_known->reset();\n+        }\n+        if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n+            FastRandomContext insecure_rand;\n+            pto->PushAddress(*local_addr, insecure_rand);\n+        }\n+        pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n+    }\n+\n+    //\n+    // Message: addr\n+    //\n+    if (pto->RelayAddrsWithConn() && pto->m_next_addr_send < current_time) {\n+        pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n+        std::vector<CAddress> vAddr;\n+        vAddr.reserve(pto->vAddrToSend.size());\n+        assert(pto->m_addr_known);\n+\n+        const char* msg_type;\n+        int make_flags;\n+        if (pto->m_wants_addrv2) {\n+            msg_type = NetMsgType::ADDRV2;\n+            make_flags = ADDRV2_FORMAT;\n+        } else {\n+            msg_type = NetMsgType::ADDR;\n+            make_flags = 0;\n+        }\n+\n+        for (const CAddress& addr : pto->vAddrToSend)\n+        {\n+            if (!pto->m_addr_known->contains(addr.GetKey()))\n+            {\n+                pto->m_addr_known->insert(addr.GetKey());\n+                vAddr.push_back(addr);\n+                // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n+                if (vAddr.size() >= MAX_ADDR_TO_SEND)\n+                {\n+                    m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n+                    vAddr.clear();\n+                }\n+            }\n+        }\n+        pto->vAddrToSend.clear();\n+        if (!vAddr.empty())\n+            m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n+        // we only send the big addr message once\n+        if (pto->vAddrToSend.capacity() > 40)\n+            pto->vAddrToSend.shrink_to_fit();\n+    }\n+}\n+\n namespace {\n class CompareInvMempoolOrder\n {\n@@ -4183,76 +4252,13 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     // MaybeSendPing may have marked peer for disconnection\n     if (pto->fDisconnect) return true;\n \n+    MaybeSendAddr(pto, current_time);\n+\n     {\n         LOCK(cs_main);\n \n         CNodeState &state = *State(pto->GetId());\n \n-        // Address refresh broadcast\n-        {\n-        LOCK(pto->m_addr_send_times_mutex);\n-\n-        if (fListen && pto->RelayAddrsWithConn() &&\n-            !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n-            pto->m_next_local_addr_send < current_time) {\n-            // If we've sent before, clear the bloom filter for the peer, so that our\n-            // self-announcement will actually go out.\n-            // This might be unnecessary if the bloom filter has already rolled\n-            // over since our last self-announcement, but there is only a small\n-            // bandwidth cost that we can incur by doing this (which happens\n-            // once a day on average).\n-            if (pto->m_next_local_addr_send != 0us) {\n-                pto->m_addr_known->reset();\n-            }\n-            if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n-                FastRandomContext insecure_rand;\n-                pto->PushAddress(*local_addr, insecure_rand);\n-            }\n-            pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n-        }\n-\n-        //\n-        // Message: addr\n-        //\n-        if (pto->RelayAddrsWithConn() && pto->m_next_addr_send < current_time) {\n-            pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n-            std::vector<CAddress> vAddr;\n-            vAddr.reserve(pto->vAddrToSend.size());\n-            assert(pto->m_addr_known);\n-\n-            const char* msg_type;\n-            int make_flags;\n-            if (pto->m_wants_addrv2) {\n-                msg_type = NetMsgType::ADDRV2;\n-                make_flags = ADDRV2_FORMAT;\n-            } else {\n-                msg_type = NetMsgType::ADDR;\n-                make_flags = 0;\n-            }\n-\n-            for (const CAddress& addr : pto->vAddrToSend)\n-            {\n-                if (!pto->m_addr_known->contains(addr.GetKey()))\n-                {\n-                    pto->m_addr_known->insert(addr.GetKey());\n-                    vAddr.push_back(addr);\n-                    // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n-                    if (vAddr.size() >= MAX_ADDR_TO_SEND)\n-                    {\n-                        m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n-                        vAddr.clear();\n-                    }\n-                }\n-            }\n-            pto->vAddrToSend.clear();\n-            if (!vAddr.empty())\n-                m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n-            // we only send the big addr message once\n-            if (pto->vAddrToSend.capacity() > 40)\n-                pto->vAddrToSend.shrink_to_fit();\n-        }\n-        } // pto->m_addr_send_times_mutex\n-\n         // Start block sync\n         if (pindexBestHeader == nullptr)\n             pindexBestHeader = m_chainman.ActiveChain().Tip();"
      }
    ]
  },
  {
    "sha": "c87423c58b5165de835a49bebd566538a70c07ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODc0MjNjNThiNTE2NWRlODM1YTQ5YmViZDU2NjUzOGE3MGMwN2Fi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-23T10:01:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net processing] Change MaybeSendAddr() to take a reference\n\nChange name of CNode parameter to node now that it's no longer a\npointer.",
      "tree": {
        "sha": "70401ef878db943d5004067ef6ac605ed3819ec9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70401ef878db943d5004067ef6ac605ed3819ec9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c87423c58b5165de835a49bebd566538a70c07ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87423c58b5165de835a49bebd566538a70c07ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c87423c58b5165de835a49bebd566538a70c07ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87423c58b5165de835a49bebd566538a70c07ab/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad719297f2ecdd2394eff668b3be7070bc9cb3e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad719297f2ecdd2394eff668b3be7070bc9cb3e2"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 25,
      "deletions": 25
    },
    "files": [
      {
        "sha": "cc0231afac3d185339fefdfbccb0ecfee09beb9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c87423c58b5165de835a49bebd566538a70c07ab/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c87423c58b5165de835a49bebd566538a70c07ab/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c87423c58b5165de835a49bebd566538a70c07ab",
        "patch": "@@ -323,7 +323,7 @@ class PeerManagerImpl final : public PeerManager\n     void MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now);\n \n     /** Send `addr` messages on a regular schedule. */\n-    void MaybeSendAddr(CNode* pto, std::chrono::microseconds current_time);\n+    void MaybeSendAddr(CNode& node, std::chrono::microseconds current_time);\n \n     const CChainParams& m_chainparams;\n     CConnman& m_connman;\n@@ -4141,69 +4141,69 @@ void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::mic\n     }\n }\n \n-void PeerManagerImpl::MaybeSendAddr(CNode* pto, std::chrono::microseconds current_time)\n+void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds current_time)\n {\n-    LOCK(pto->m_addr_send_times_mutex);\n-    const CNetMsgMaker msgMaker(pto->GetCommonVersion());\n+    LOCK(node.m_addr_send_times_mutex);\n+    const CNetMsgMaker msgMaker(node.GetCommonVersion());\n \n-    if (fListen && pto->RelayAddrsWithConn() &&\n+    if (fListen && node.RelayAddrsWithConn() &&\n         !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n-        pto->m_next_local_addr_send < current_time) {\n+        node.m_next_local_addr_send < current_time) {\n         // If we've sent before, clear the bloom filter for the peer, so that our\n         // self-announcement will actually go out.\n         // This might be unnecessary if the bloom filter has already rolled\n         // over since our last self-announcement, but there is only a small\n         // bandwidth cost that we can incur by doing this (which happens\n         // once a day on average).\n-        if (pto->m_next_local_addr_send != 0us) {\n-            pto->m_addr_known->reset();\n+        if (node.m_next_local_addr_send != 0us) {\n+            node.m_addr_known->reset();\n         }\n-        if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(pto)) {\n+        if (std::optional<CAddress> local_addr = GetLocalAddrForPeer(&node)) {\n             FastRandomContext insecure_rand;\n-            pto->PushAddress(*local_addr, insecure_rand);\n+            node.PushAddress(*local_addr, insecure_rand);\n         }\n-        pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n+        node.m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n     }\n \n     //\n     // Message: addr\n     //\n-    if (pto->RelayAddrsWithConn() && pto->m_next_addr_send < current_time) {\n-        pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n+    if (node.RelayAddrsWithConn() && node.m_next_addr_send < current_time) {\n+        node.m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n         std::vector<CAddress> vAddr;\n-        vAddr.reserve(pto->vAddrToSend.size());\n-        assert(pto->m_addr_known);\n+        vAddr.reserve(node.vAddrToSend.size());\n+        assert(node.m_addr_known);\n \n         const char* msg_type;\n         int make_flags;\n-        if (pto->m_wants_addrv2) {\n+        if (node.m_wants_addrv2) {\n             msg_type = NetMsgType::ADDRV2;\n             make_flags = ADDRV2_FORMAT;\n         } else {\n             msg_type = NetMsgType::ADDR;\n             make_flags = 0;\n         }\n \n-        for (const CAddress& addr : pto->vAddrToSend)\n+        for (const CAddress& addr : node.vAddrToSend)\n         {\n-            if (!pto->m_addr_known->contains(addr.GetKey()))\n+            if (!node.m_addr_known->contains(addr.GetKey()))\n             {\n-                pto->m_addr_known->insert(addr.GetKey());\n+                node.m_addr_known->insert(addr.GetKey());\n                 vAddr.push_back(addr);\n                 // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n                 if (vAddr.size() >= MAX_ADDR_TO_SEND)\n                 {\n-                    m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n+                    m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n                     vAddr.clear();\n                 }\n             }\n         }\n-        pto->vAddrToSend.clear();\n+        node.vAddrToSend.clear();\n         if (!vAddr.empty())\n-            m_connman.PushMessage(pto, msgMaker.Make(make_flags, msg_type, vAddr));\n+            m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n         // we only send the big addr message once\n-        if (pto->vAddrToSend.capacity() > 40)\n-            pto->vAddrToSend.shrink_to_fit();\n+        if (node.vAddrToSend.capacity() > 40)\n+            node.vAddrToSend.shrink_to_fit();\n     }\n }\n \n@@ -4252,7 +4252,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n     // MaybeSendPing may have marked peer for disconnection\n     if (pto->fDisconnect) return true;\n \n-    MaybeSendAddr(pto, current_time);\n+    MaybeSendAddr(*pto, current_time);\n \n     {\n         LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "38c0be5da3af17208b165e73cee7612d3670b038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGMwYmU1ZGEzYWYxNzIwOGIxNjVlNzNjZWU3NjEyZDM2NzBiMDM4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-28T11:16:52Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net processing] Refactor MaybeSendAddr() - early exits\n\nAdd early exit guard clauses if node.RelayAddrsWithConn() is false or if\ncurrent_time < node.m_next_addr_send. Add comments.\n\nThis commit leaves some lines over-indented. Those will be fixed in a\nsubsequent whitespace-only commit.",
      "tree": {
        "sha": "b847f7d629bd1d07121ee54ebbefb0ca53b77c2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b847f7d629bd1d07121ee54ebbefb0ca53b77c2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38c0be5da3af17208b165e73cee7612d3670b038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c0be5da3af17208b165e73cee7612d3670b038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38c0be5da3af17208b165e73cee7612d3670b038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c0be5da3af17208b165e73cee7612d3670b038/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c87423c58b5165de835a49bebd566538a70c07ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87423c58b5165de835a49bebd566538a70c07ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c87423c58b5165de835a49bebd566538a70c07ab"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fd8c653837ba25dd2f6092d8eb98052456514abf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38c0be5da3af17208b165e73cee7612d3670b038/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38c0be5da3af17208b165e73cee7612d3670b038/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=38c0be5da3af17208b165e73cee7612d3670b038",
        "patch": "@@ -4143,11 +4143,16 @@ void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::mic\n \n void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds current_time)\n {\n-    LOCK(node.m_addr_send_times_mutex);\n+    // Nothing to do for non-address-relay peers\n+    if (!node.RelayAddrsWithConn()) return;\n+\n+    assert(node.m_addr_known);\n+\n     const CNetMsgMaker msgMaker(node.GetCommonVersion());\n \n-    if (fListen && node.RelayAddrsWithConn() &&\n-        !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n+    LOCK(node.m_addr_send_times_mutex);\n+    // Periodically advertise our local address to the peer.\n+    if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n         node.m_next_local_addr_send < current_time) {\n         // If we've sent before, clear the bloom filter for the peer, so that our\n         // self-announcement will actually go out.\n@@ -4165,14 +4170,12 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n         node.m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n     }\n \n-    //\n-    // Message: addr\n-    //\n-    if (node.RelayAddrsWithConn() && node.m_next_addr_send < current_time) {\n+    // We sent an `addr` message to this peer recently. Nothing more to do.\n+    if (current_time <= node.m_next_addr_send) return;\n+    {\n         node.m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n         std::vector<CAddress> vAddr;\n         vAddr.reserve(node.vAddrToSend.size());\n-        assert(node.m_addr_known);\n \n         const char* msg_type;\n         int make_flags;"
      }
    ]
  },
  {
    "sha": "01a79ff924b11f91796d4aa63c571897b047ac7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWE3OWZmOTI0YjExZjkxNzk2ZDRhYTYzYzU3MTg5N2IwNDdhYzdk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-02-28T11:17:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-29T11:15:23Z"
      },
      "message": "[net processing] Fix overindentation in MaybeSendAddr()\n\nReviewer hint: review with `git diff --ignore-all-space`.",
      "tree": {
        "sha": "8713e94bb237bf16fe959657fa036b246fc5beb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8713e94bb237bf16fe959657fa036b246fc5beb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01a79ff924b11f91796d4aa63c571897b047ac7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a79ff924b11f91796d4aa63c571897b047ac7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01a79ff924b11f91796d4aa63c571897b047ac7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a79ff924b11f91796d4aa63c571897b047ac7d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38c0be5da3af17208b165e73cee7612d3670b038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38c0be5da3af17208b165e73cee7612d3670b038",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38c0be5da3af17208b165e73cee7612d3670b038"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 28,
      "deletions": 29
    },
    "files": [
      {
        "sha": "1e5822515867b8a253f553f349e9bbf2fd528859",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 29,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01a79ff924b11f91796d4aa63c571897b047ac7d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01a79ff924b11f91796d4aa63c571897b047ac7d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=01a79ff924b11f91796d4aa63c571897b047ac7d",
        "patch": "@@ -4172,42 +4172,41 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n \n     // We sent an `addr` message to this peer recently. Nothing more to do.\n     if (current_time <= node.m_next_addr_send) return;\n-    {\n-        node.m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n-        std::vector<CAddress> vAddr;\n-        vAddr.reserve(node.vAddrToSend.size());\n \n-        const char* msg_type;\n-        int make_flags;\n-        if (node.m_wants_addrv2) {\n-            msg_type = NetMsgType::ADDRV2;\n-            make_flags = ADDRV2_FORMAT;\n-        } else {\n-            msg_type = NetMsgType::ADDR;\n-            make_flags = 0;\n-        }\n+    node.m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n+    std::vector<CAddress> vAddr;\n+    vAddr.reserve(node.vAddrToSend.size());\n+\n+    const char* msg_type;\n+    int make_flags;\n+    if (node.m_wants_addrv2) {\n+        msg_type = NetMsgType::ADDRV2;\n+        make_flags = ADDRV2_FORMAT;\n+    } else {\n+        msg_type = NetMsgType::ADDR;\n+        make_flags = 0;\n+    }\n \n-        for (const CAddress& addr : node.vAddrToSend)\n+    for (const CAddress& addr : node.vAddrToSend)\n+    {\n+        if (!node.m_addr_known->contains(addr.GetKey()))\n         {\n-            if (!node.m_addr_known->contains(addr.GetKey()))\n+            node.m_addr_known->insert(addr.GetKey());\n+            vAddr.push_back(addr);\n+            // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n+            if (vAddr.size() >= MAX_ADDR_TO_SEND)\n             {\n-                node.m_addr_known->insert(addr.GetKey());\n-                vAddr.push_back(addr);\n-                // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n-                if (vAddr.size() >= MAX_ADDR_TO_SEND)\n-                {\n-                    m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n-                    vAddr.clear();\n-                }\n+                m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n+                vAddr.clear();\n             }\n         }\n-        node.vAddrToSend.clear();\n-        if (!vAddr.empty())\n-            m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n-        // we only send the big addr message once\n-        if (node.vAddrToSend.capacity() > 40)\n-            node.vAddrToSend.shrink_to_fit();\n     }\n+    node.vAddrToSend.clear();\n+    if (!vAddr.empty())\n+        m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n+    // we only send the big addr message once\n+    if (node.vAddrToSend.capacity() > 40)\n+        node.vAddrToSend.shrink_to_fit();\n }\n \n namespace {"
      }
    ]
  },
  {
    "sha": "935d4889228e7e361c8b0020761fa0e08a55fb48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzVkNDg4OTIyOGU3ZTM2MWM4YjAwMjA3NjFmYTBlMDhhNTVmYjQ4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-07-09T10:32:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-03-31T17:06:51Z"
      },
      "message": "[net processing] Refactor MaybeSendAddr()\n\nChanges to make MaybeSendAddr simpler and easier to maintain/update:\n\n- assert invariant that node.vAddrToSend.size() can never exceed\n  MAX_ADDR_TO_SEND\n- erase known addresses from vAddrToSend in one pass\n- no check for (vAddr.size() >= MAX_ADDR_TO_SEND) during iteration,\n  since vAddr can never exceed MAX_ADDR_TO_SEND.",
      "tree": {
        "sha": "d6cf9be6e0b44be088a2ba3cda3cdbc07d423fd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6cf9be6e0b44be088a2ba3cda3cdbc07d423fd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/935d4889228e7e361c8b0020761fa0e08a55fb48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935d4889228e7e361c8b0020761fa0e08a55fb48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/935d4889228e7e361c8b0020761fa0e08a55fb48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/935d4889228e7e361c8b0020761fa0e08a55fb48/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01a79ff924b11f91796d4aa63c571897b047ac7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01a79ff924b11f91796d4aa63c571897b047ac7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01a79ff924b11f91796d4aa63c571897b047ac7d"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "4fd37d3f762127fb95154c75032bd18e81f9f47d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 22,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/935d4889228e7e361c8b0020761fa0e08a55fb48/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/935d4889228e7e361c8b0020761fa0e08a55fb48/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=935d4889228e7e361c8b0020761fa0e08a55fb48",
        "patch": "@@ -33,6 +33,7 @@\n #include <util/system.h>\n #include <validation.h>\n \n+#include <algorithm>\n #include <memory>\n #include <optional>\n #include <typeinfo>\n@@ -4148,8 +4149,6 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n \n     assert(node.m_addr_known);\n \n-    const CNetMsgMaker msgMaker(node.GetCommonVersion());\n-\n     LOCK(node.m_addr_send_times_mutex);\n     // Periodically advertise our local address to the peer.\n     if (fListen && !m_chainman.ActiveChainstate().IsInitialBlockDownload() &&\n@@ -4174,8 +4173,25 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n     if (current_time <= node.m_next_addr_send) return;\n \n     node.m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n-    std::vector<CAddress> vAddr;\n-    vAddr.reserve(node.vAddrToSend.size());\n+\n+    if (!Assume(node.vAddrToSend.size() <= MAX_ADDR_TO_SEND)) {\n+        // Should be impossible since we always check size before adding to\n+        // vAddrToSend. Recover by trimming the vector.\n+        node.vAddrToSend.resize(MAX_ADDR_TO_SEND);\n+    }\n+\n+    // Remove addr records that the peer already knows about, and add new\n+    // addrs to the m_addr_known filter on the same pass.\n+    auto addr_already_known = [&node](const CAddress& addr) {\n+        bool ret = node.m_addr_known->contains(addr.GetKey());\n+        if (!ret) node.m_addr_known->insert(addr.GetKey());\n+        return ret;\n+    };\n+    node.vAddrToSend.erase(std::remove_if(node.vAddrToSend.begin(), node.vAddrToSend.end(), addr_already_known),\n+                           node.vAddrToSend.end());\n+\n+    // No addr messages to send\n+    if (node.vAddrToSend.empty()) return;\n \n     const char* msg_type;\n     int make_flags;\n@@ -4186,27 +4202,13 @@ void PeerManagerImpl::MaybeSendAddr(CNode& node, std::chrono::microseconds curre\n         msg_type = NetMsgType::ADDR;\n         make_flags = 0;\n     }\n-\n-    for (const CAddress& addr : node.vAddrToSend)\n-    {\n-        if (!node.m_addr_known->contains(addr.GetKey()))\n-        {\n-            node.m_addr_known->insert(addr.GetKey());\n-            vAddr.push_back(addr);\n-            // receiver rejects addr messages larger than MAX_ADDR_TO_SEND\n-            if (vAddr.size() >= MAX_ADDR_TO_SEND)\n-            {\n-                m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n-                vAddr.clear();\n-            }\n-        }\n-    }\n+    m_connman.PushMessage(&node, CNetMsgMaker(node.GetCommonVersion()).Make(make_flags, msg_type, node.vAddrToSend));\n     node.vAddrToSend.clear();\n-    if (!vAddr.empty())\n-        m_connman.PushMessage(&node, msgMaker.Make(make_flags, msg_type, vAddr));\n+\n     // we only send the big addr message once\n-    if (node.vAddrToSend.capacity() > 40)\n+    if (node.vAddrToSend.capacity() > 40) {\n         node.vAddrToSend.shrink_to_fit();\n+    }\n }\n \n namespace {"
      }
    ]
  }
]