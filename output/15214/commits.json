[
  {
    "sha": "6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjllZjk4ZDk0ZTc5M2I0MmIwYTkwYTczM2E1MTljYTRmMmI2ODMz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-20T12:37:40Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T08:28:00Z"
      },
      "message": "Improve tests by checking for expected return values",
      "tree": {
        "sha": "9bf357ad6bc6443f6590112e52c982d493435491",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bf357ad6bc6443f6590112e52c982d493435491"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c576979b78b541bf3b4a7cbeee989b55d268e3e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c576979b78b541bf3b4a7cbeee989b55d268e3e1"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 36,
      "deletions": 26
    },
    "files": [
      {
        "sha": "65d641d47896325e4ed98fbfa5bf628fe0e8c7b2",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "patch": "@@ -76,7 +76,8 @@ static void VerifyScriptBench(benchmark::State& state)\n     CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n     CScriptWitness& witness = txSpend.vin[0].scriptWitness;\n     witness.stack.emplace_back();\n-    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back());\n+    bool signSuccess = key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back());\n+    assert(signSuccess);\n     witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n     witness.stack.push_back(ToByteVector(pubkey));\n "
      },
      {
        "sha": "ac3e27dd75b71ada8ef5efdbc8630942724d9938",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "patch": "@@ -370,7 +370,7 @@ class TestBuilder\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n-            key.Sign(hash, vchSig, false, iter++);\n+            BOOST_CHECK(key.Sign(hash, vchSig, false, iter++));\n             if ((lenS == 33) != (vchSig[5 + vchSig[3]] == 33)) {\n                 NegateSignatureS(vchSig);\n             }"
      },
      {
        "sha": "61041b8bb2d584b05b28213e5d5387c904bdfb39",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "patch": "@@ -405,13 +405,14 @@ static CScript PushAll(const std::vector<valtype>& values)\n     return result;\n }\n \n-static void ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n+static bool ReplaceRedeemScript(CScript& script, const CScript& redeemScript)\n {\n     std::vector<valtype> stack;\n-    EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n+    bool r = EvalScript(stack, script, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n     assert(stack.size() > 0);\n     stack.back() = std::vector<unsigned char>(redeemScript.begin(), redeemScript.end());\n     script = PushAll(stack);\n+    return r;\n }\n \n BOOST_AUTO_TEST_CASE(test_big_witness_transaction)\n@@ -563,7 +564,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     // P2SH pay-to-compressed-pubkey.\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1)), output1, input1);\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2)), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1);\n+    BOOST_CHECK(ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1));\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -588,7 +589,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     // P2SH witness pay-to-compressed-pubkey (v0).\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1))), output1, input1);\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1));\n+    BOOST_CHECK(ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1)));\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n@@ -613,7 +614,7 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     // P2SH pay-to-uncompressed-pubkey.\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey1L)), output1, input1);\n     CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(scriptPubkey2L)), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L);\n+    BOOST_CHECK(ReplaceRedeemScript(input2.vin[0].scriptSig, scriptPubkey1L));\n     CheckWithFlag(output1, input1, 0, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n     CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);"
      },
      {
        "sha": "28f465802de341b07bd0d605d17fee4818b0ab29",
        "filename": "src/wallet/test/wallet_crypto_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 19,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/wallet/test/wallet_crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b9ef98d94e793b42b0a90a733a519ca4f2b6833/src/wallet/test/wallet_crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_crypto_tests.cpp?ref=6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "patch": "@@ -39,34 +39,40 @@ static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const Secu\n         TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n }\n \n-static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+static bool TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n                         const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n {\n     CKeyingMaterial vchDecrypted;\n-    crypt.Decrypt(vchCiphertext, vchDecrypted);\n-    if (vchPlaintext.size())\n-        BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted);\n+    bool decrypted = crypt.Decrypt(vchCiphertext, vchDecrypted);\n+    bool nonZeroSizeMatches = false;\n+    if (vchPlaintext.size()) {\n+        nonZeroSizeMatches = CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted;\n+        BOOST_CHECK(nonZeroSizeMatches);\n+    }\n+    return decrypted && nonZeroSizeMatches;\n }\n \n-static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n+static bool TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n                        const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n {\n     std::vector<unsigned char> vchCiphertext;\n-    crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    bool encrypted = crypt.Encrypt(vchPlaintext, vchCiphertext);\n+    BOOST_CHECK(encrypted);\n \n     if (!vchCiphertextCorrect.empty())\n         BOOST_CHECK(vchCiphertext == vchCiphertextCorrect);\n \n     const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n-    TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n+    return TestDecrypt(crypt, vchCiphertext, vchPlaintext2);\n }\n \n-static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+static bool TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n                        const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n {\n-    TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n+    bool r = TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n     for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n-        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+        r = r && TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+    return r;\n }\n \n };\n@@ -92,12 +98,12 @@ BOOST_AUTO_TEST_CASE(encrypt) {\n     BOOST_CHECK(vchSalt.size() == WALLET_CRYPTO_SALT_SIZE);\n     CCrypter crypt;\n     crypt.SetKeyFromPassphrase(\"passphrase\", vchSalt, 25000, 0);\n-    TestCrypter::TestEncrypt(crypt, ParseHex(\"22bcade09ac03ff6386914359cfe885cfeb5f77ff0d670f102f619687453b29d\"));\n+    BOOST_CHECK(TestCrypter::TestEncrypt(crypt, ParseHex(\"22bcade09ac03ff6386914359cfe885cfeb5f77ff0d670f102f619687453b29d\")));\n \n     for (int i = 0; i != 100; i++)\n     {\n         uint256 hash(GetRandHash());\n-        TestCrypter::TestEncrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end()));\n+        BOOST_CHECK(TestCrypter::TestEncrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end())));\n     }\n \n }\n@@ -108,18 +114,20 @@ BOOST_AUTO_TEST_CASE(decrypt) {\n     CCrypter crypt;\n     crypt.SetKeyFromPassphrase(\"passphrase\", vchSalt, 25000, 0);\n \n+    BOOST_CHECK(TestCrypter::TestDecrypt(crypt, ParseHex(\"268d36ce1233e9c990caa3c18807b7a7e1552ca1c80bea78ac6170b6ef8e8d98b6adb506a312e0ad4756b4633d46d54a\"), ParseHex(\"22bcade09ac03ff6386914359cfe885cfeb5f77ff0d670f102f619687453b29d\")));\n+\n     // Some corner cases the came up while testing\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"795643ce39d736088367822cdc50535ec6f103715e3e48f4f3b1a60a08ef59ca\"));\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"de096f4a8f9bd97db012aa9d90d74de8cdea779c3ee8bc7633d8b5d6da703486\"));\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"32d0a8974e3afd9c6c3ebf4d66aa4e6419f8c173de25947f98cf8b7ace49449c\"));\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"e7c055cca2faa78cb9ac22c9357a90b4778ded9b2cc220a14cea49f931e596ea\"));\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"b88efddd668a6801d19516d6830da4ae9811988ccbaf40df8fbb72f3f4d335fd\"));\n-    TestCrypter::TestDecrypt(crypt,ParseHex(\"8cae76aa6a43694e961ebcb28c8ca8f8540b84153d72865e8561ddd93fa7bfa9\"));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"795643ce39d736088367822cdc50535ec6f103715e3e48f4f3b1a60a08ef59ca\")));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"de096f4a8f9bd97db012aa9d90d74de8cdea779c3ee8bc7633d8b5d6da703486\")));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"32d0a8974e3afd9c6c3ebf4d66aa4e6419f8c173de25947f98cf8b7ace49449c\")));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"e7c055cca2faa78cb9ac22c9357a90b4778ded9b2cc220a14cea49f931e596ea\")));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"b88efddd668a6801d19516d6830da4ae9811988ccbaf40df8fbb72f3f4d335fd\")));\n+    BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, ParseHex(\"8cae76aa6a43694e961ebcb28c8ca8f8540b84153d72865e8561ddd93fa7bfa9\")));\n \n     for (int i = 0; i != 100; i++)\n     {\n         uint256 hash(GetRandHash());\n-        TestCrypter::TestDecrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end()));\n+        BOOST_CHECK(!TestCrypter::TestDecrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end())));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "64cb79d74259e39f32510219f66f44014815a96b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGNiNzlkNzQyNTllMzlmMzI1MTAyMTlmNjZmNDQwMTQ4MTVhOTZi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-20T12:42:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T08:28:25Z"
      },
      "message": "Warn on discarded return values ([[noreturn]])",
      "tree": {
        "sha": "bff2ed970fb238e316c61b67ac8b79bba1e33073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bff2ed970fb238e316c61b67ac8b79bba1e33073"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64cb79d74259e39f32510219f66f44014815a96b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cb79d74259e39f32510219f66f44014815a96b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64cb79d74259e39f32510219f66f44014815a96b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cb79d74259e39f32510219f66f44014815a96b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b9ef98d94e793b42b0a90a733a519ca4f2b6833",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b9ef98d94e793b42b0a90a733a519ca4f2b6833"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "49b0f4d61cc64e32afc30b77c92eecbe077ba37e",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cb79d74259e39f32510219f66f44014815a96b/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cb79d74259e39f32510219f66f44014815a96b/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=64cb79d74259e39f32510219f66f44014815a96b",
        "patch": "@@ -7,6 +7,7 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n+#include <attributes.h>\n #include <pubkey.h>\n #include <serialize.h>\n #include <support/allocators/secure.h>\n@@ -114,7 +115,7 @@ class CKey\n      * Create a DER-serialized signature.\n      * The test_case parameter tweaks the deterministic nonce.\n      */\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool grind = true, uint32_t test_case = 0) const;\n+    NODISCARD bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool grind = true, uint32_t test_case = 0) const;\n \n     /**\n      * Create a compact signature (65 bytes), which allows reconstructing the used public key."
      },
      {
        "sha": "49ca9e450899d3b57bd4772ea660ae0ae82c7634",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cb79d74259e39f32510219f66f44014815a96b/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cb79d74259e39f32510219f66f44014815a96b/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=64cb79d74259e39f32510219f66f44014815a96b",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n+#include <attributes.h>\n #include <script/script_error.h>\n #include <primitives/transaction.h>\n \n@@ -185,7 +186,7 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n using TransactionSignatureChecker = GenericTransactionSignatureChecker<CTransaction>;\n using MutableTransactionSignatureChecker = GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n+NODISCARD bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);\n \n size_t CountWitnessSigOps(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags);"
      },
      {
        "sha": "0e13a40cea0b5032c3a594d142f6f8154899ee95",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cb79d74259e39f32510219f66f44014815a96b/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cb79d74259e39f32510219f66f44014815a96b/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=64cb79d74259e39f32510219f66f44014815a96b",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_CRYPTER_H\n #define BITCOIN_WALLET_CRYPTER_H\n \n+#include <attributes.h>\n #include <keystore.h>\n #include <serialize.h>\n #include <support/allocators/secure.h>\n@@ -85,8 +86,8 @@ friend class wallet_crypto_tests::TestCrypter; // for test access to chKey/chIV\n \n public:\n     bool SetKeyFromPassphrase(const SecureString &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n-    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const;\n-    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const;\n+    NODISCARD bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const;\n+    NODISCARD bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const;\n     bool SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV);\n \n     void CleanKey()"
      },
      {
        "sha": "72eabe390dce618859a988d98a88aa10bda62e56",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cb79d74259e39f32510219f66f44014815a96b/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cb79d74259e39f32510219f66f44014815a96b/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=64cb79d74259e39f32510219f66f44014815a96b",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_WALLET_RPCWALLET_H\n #define BITCOIN_WALLET_RPCWALLET_H\n \n+#include <attributes.h>\n+\n #include <string>\n \n class CRPCTable;"
      }
    ]
  },
  {
    "sha": "cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmRjOWE3MzI2NzQ4MGU4YjZlNjFlMWJiN2QwYzlhNmEzMzE2NWU1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-01-20T12:42:31Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-02-15T08:29:18Z"
      },
      "message": "Explicitly cast to void to document where we are intentionally discarding return values",
      "tree": {
        "sha": "3c0c3aaf58bb087ef5394f1b6a57749238e70a3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c0c3aaf58bb087ef5394f1b6a57749238e70a3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64cb79d74259e39f32510219f66f44014815a96b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cb79d74259e39f32510219f66f44014815a96b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64cb79d74259e39f32510219f66f44014815a96b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c5a2e2701484cd3dfe446c6e5d2b9ac1bf8d0fdc",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
        "patch": "@@ -234,7 +234,7 @@ bool CKey::VerifyPubKey(const CPubKey& pubkey) const {\n     uint256 hash;\n     CHash256().Write((unsigned char*)str.data(), str.size()).Write(rnd, sizeof(rnd)).Finalize(hash.begin());\n     std::vector<unsigned char> vchSig;\n-    Sign(hash, vchSig);\n+    (void) Sign(hash, vchSig);\n     return pubkey.Verify(hash, vchSig);\n }\n "
      },
      {
        "sha": "144df18acf5c6c7ee48a276248664ae03ce84ad7",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=cfdc9a73267480e8b6e61e1bb7d0c9a6a33165e5",
        "patch": "@@ -263,7 +263,7 @@ struct Stacks\n     Stacks() = delete;\n     Stacks(const Stacks&) = delete;\n     explicit Stacks(const SignatureData& data) : witness(data.scriptWitness.stack) {\n-        EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n+        (void) EvalScript(script, data.scriptSig, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker(), SigVersion::BASE);\n     }\n };\n }"
      }
    ]
  }
]