[
  {
    "sha": "a6d1ab8caa63bd343207baa60edb705209f16fb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQxYWI4Y2FhNjNiZDM0MzIwN2JhYTYwZWRiNzA1MjA5ZjE2ZmI0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-13T22:11:55Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-22T10:02:54Z"
      },
      "message": "test: update bumpfee testing from totalFee to fee_rate",
      "tree": {
        "sha": "d85112c836e1a964ca93daacf6890b93b6341e35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d85112c836e1a964ca93daacf6890b93b6341e35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d1ab8caa63bd343207baa60edb705209f16fb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl53N84ACgkQT1chs9Dj\nkh3+MxAAq3act/fKG8LcgYgIBoG7xNRhvlgEk8hY1hQtp9HwM4VOY7xaanEfhsmL\nAXcKXmdB66rPST+nF9prLA0qyf3zN3byFsZqa/PU1xy/cHbH5MkbPLaUIRL2fbmU\nXat3bo6ysy4CYM3yQc9qIma7dtcKMjr/4pdDAULK8oESB3lPbhZQ6Ccm/4ypFUtI\n0YOKJKuJSJKbgo3VyPxNNuj+XT++QLplgTJFSU0T71+Ll68GH5OFL/ARaOepapXD\nuwuReuMPMsaRUCD405YjU86Pg/xlMmgB6vWOcPq97c7y0sn4CdBVPva5kS5eYrdK\njfS+tlqOrX88e1aQQVcC6LkIGW4ABzCgApv1kI+vib9qg3WQQX1FJDutidvYfwE+\nS/nOAHlO842eq6NgOQLBFSoxlxMKQfcp+I6wb4kBCVariSghv8YyyGY6rcp63drq\n821UoEsbKtHs3sgvyCke5rgzuqE1mKrGrYs89gvQDlY771GvW6UiVkl8akssxhmr\ntxDDDcJc2vxgmCnr9nOOQ9Oo9cDPf5G+ODy98sS7Zs9n1Ff/GgclFIcE7mH2vAyc\nlfsV/DxIeewlD55DPW7WgAZFfp2FYTh5/azhpj0jsd/Tohf6yeMsfF4bLjKLGQML\naZWPofkAQ8cWtNH4IsiVb9X/QvOmgLKaSh/kmVCSPIL3MMhXEY4=\n=wh1b\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwINT2mxjzSKOr5Xu95yeC+TYzs3e2YVgIv8mMQ7FskwJ0CP/wEBHucFLZs7Z/\nD2sdR0MxuPcI8QRedzfP8AjtDaqWx7AwMgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEBvd7o1ZrvTImCR9jkKXRJkI8QRedzfQ\n8AhQ+Hi63jmfzgCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9w\nZW50aW1lc3RhbXBzLm9yZ//wEGsbHcXWcwZw8FouxoK+jJMI8QRedzfQ8AhBZGVh\nflLFogCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2FsZW5kYXIuZXRlcm5pdHl3\nYWxsLmNvbfAQ5IRTMuxX8H1UX8D8WnNgmwjxBF53N9DwCKjkiMqG9nvqAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree d85112c836e1a964ca93daacf6890b93b6341e35\nparent b5c7665e3083f5daaf2b9f247a59a008f2d689a4\nauthor Jon Atack <jon@atack.com> 1584137515 +0100\ncommitter Jon Atack <jon@atack.com> 1584871374 +0100\n\ntest: update bumpfee testing from totalFee to fee_rate\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1ab8caa63bd343207baa60edb705209f16fb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1ab8caa63bd343207baa60edb705209f16fb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1ab8caa63bd343207baa60edb705209f16fb4/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5c7665e3083f5daaf2b9f247a59a008f2d689a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5c7665e3083f5daaf2b9f247a59a008f2d689a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5c7665e3083f5daaf2b9f247a59a008f2d689a4"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 30,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1881d7d3dd61aebc17d483b9396ca5681440bcc1",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 30,
        "deletions": 28,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1ab8caa63bd343207baa60edb705209f16fb4/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1ab8caa63bd343207baa60edb705209f16fb4/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=a6d1ab8caa63bd343207baa60edb705209f16fb4",
        "patch": "@@ -30,14 +30,20 @@\n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600\n \n+# Fee rates (in BTC per 1000 vbytes)\n+INSUFFICIENT = 0.00001000\n+ECONOMICAL   = 0.00050000\n+NORMAL       = 0.00100000\n+HIGH         = 0.00500000\n+TOO_HIGH     = 1.00000000\n+\n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         self.extra_args = [[\n             \"-walletrbf={}\".format(i),\n             \"-mintxfee=0.00002\",\n-            \"-deprecatedrpc=totalFee\",\n             \"-addresstype=bech32\",\n         ] for i in range(self.num_nodes)]\n \n@@ -75,7 +81,6 @@ def run_test(self):\n         test_nonrbf_bumpfee_fails(self, peer_node, dest_address)\n         test_notmine_bumpfee_fails(self, rbf_node, peer_node, dest_address)\n         test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_address)\n-        test_small_output_fails(self, rbf_node, dest_address)\n         test_dust_to_fee(self, rbf_node, dest_address)\n         test_settxfee(self, rbf_node, dest_address)\n         test_watchonly_psbt(self, peer_node, rbf_node, dest_address)\n@@ -93,13 +98,13 @@ def run_test(self):\n \n \n def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n-    self.log.info('Test simple bumpfee')\n+    self.log.info('Test simple bumpfee: {}'.format(mode))\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbftx = rbf_node.gettransaction(rbfid)\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n     if mode == \"fee_rate\":\n-        bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\":0.0015})\n+        bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n     else:\n         bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n@@ -120,7 +125,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     assert_equal(bumpedwtx[\"replaces_txid\"], rbfid)\n \n def test_feerate_args(self, rbf_node, peer_node, dest_address):\n-    self.log.info('Test feerate args')\n+    self.log.info('Test fee_rate args')\n     rbfid = spend_one_input(rbf_node, dest_address)\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n@@ -130,11 +135,11 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     assert_raises_rpc_error(-8, \"fee_rate can't be set along with totalFee.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"totalFee\":0.001})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n-    assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001000})\n+    assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n     assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\":-1})\n \n-    assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\":1})\n+    assert_raises_rpc_error(-4, \"is too high (cannot be higher than\", rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n \n \n def test_segwit_bumpfee_succeeds(self, rbf_node, dest_address):\n@@ -204,15 +209,6 @@ def test_bumpfee_with_descendant_fails(self, rbf_node, rbf_node_address, dest_ad\n     rbf_node.sendrawtransaction(tx[\"hex\"])\n     assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n-def test_small_output_fails(self, rbf_node, dest_address):\n-    self.log.info('Test totalFee bump with small output fails')\n-    # cannot bump fee with a too-small output\n-    rbfid = spend_one_input(rbf_node, dest_address)\n-    rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n-\n-    rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n-\n def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n     self.log.info('Testing small output with feerate bump succeeds')\n \n@@ -255,15 +251,19 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n \n def test_dust_to_fee(self, rbf_node, dest_address):\n     self.log.info('Test that bumped output that is dust is dropped to fee')\n-    # the bumped tx sets fee=49,900, but it converts to 50,000\n     rbfid = spend_one_input(rbf_node, dest_address)\n     fulltx = rbf_node.getrawtransaction(rbfid, 1)\n-    # (31-vbyte p2wpkh output size + 67-vbyte p2wpkh spend estimate) * 10k(discard_rate) / 1000 = 980\n-    bumped_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 50000 - 980})\n+    # size of transaction (p2wpkh, 1 input, 2 outputs): 141 vbytes\n+    assert_equal(fulltx[\"vsize\"], 141)\n+    # bump with fee_rate of 0.00350000 BTC per 1000 vbytes\n+    # expected bump fee of 141 vbytes * fee_rate 0.00350000 BTC / 1000 vbytes = 0.00049350 BTC\n+    # but dust is dropped, so actual bump fee is 0.00050000\n+    bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": 0.0035})\n     full_bumped_tx = rbf_node.getrawtransaction(bumped_tx[\"txid\"], 1)\n     assert_equal(bumped_tx[\"fee\"], Decimal(\"0.00050000\"))\n     assert_equal(len(fulltx[\"vout\"]), 2)\n     assert_equal(len(full_bumped_tx[\"vout\"]), 1)  # change output is eliminated\n+    assert_equal(full_bumped_tx[\"vout\"][0]['value'], Decimal(\"0.00050000\"))\n \n \n def test_settxfee(self, rbf_node, dest_address):\n@@ -285,7 +285,8 @@ def test_settxfee(self, rbf_node, dest_address):\n def test_maxtxfee_fails(self, rbf_node, dest_address):\n     self.log.info('Test that bumpfee fails when it hits -matxfee')\n     # size of bumped transaction (p2wpkh, 1 input, 2 outputs): 141 vbytes\n-    # expected bumping feerate of 20 sats/vbyte => 141*20 sats = 0.00002820 btc\n+    # expected bump fee of 141 vbytes * 0.00200000 BTC / 1000 vbytes = 0.00002820 BTC\n+    # which exceeds maxtxfee and is expected to raise\n     self.restart_node(1, ['-maxtxfee=0.000025'] + self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n     rbfid = spend_one_input(rbf_node, dest_address)\n@@ -356,7 +357,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n \n     # Bump fee, obnoxiously high to add additional watchonly input\n-    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\":0.005})\n+    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\": HIGH})\n     assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n     assert \"txid\" not in bumped_psbt\n     assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])\n@@ -378,17 +379,17 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n def test_rebumping(self, rbf_node, dest_address):\n     self.log.info('Test that re-bumping the original tx fails, but bumping successor works')\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n-    rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n+    bumped = rbf_node.bumpfee(rbfid, {\"fee_rate\": ECONOMICAL})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL})\n+    rbf_node.bumpfee(bumped[\"txid\"], {\"fee_rate\": NORMAL})\n \n \n def test_rebumping_not_replaceable(self, rbf_node, dest_address):\n     self.log.info('Test that re-bumping non-replaceable fails')\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n+    bumped = rbf_node.bumpfee(rbfid, {\"fee_rate\": ECONOMICAL, \"replaceable\": False})\n     assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n-                            {\"totalFee\": 20000})\n+                            {\"fee_rate\": NORMAL})\n \n \n def test_unconfirmed_not_spendable(self, rbf_node, rbf_node_address):\n@@ -450,7 +451,7 @@ def test_locked_wallet_fails(self, rbf_node, dest_address):\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n def test_change_script_match(self, rbf_node, dest_address):\n-    self.log.info('Test that the same change addresses is used for the replacement transaction when possible.')\n+    self.log.info('Test that the same change addresses is used for the replacement transaction when possible')\n \n     def get_change_address(tx):\n         tx_details = rbf_node.getrawtransaction(tx, 1)\n@@ -463,7 +464,7 @@ def get_change_address(tx):\n     assert_equal(len(change_addresses), 1)\n \n     # Now find that address in each subsequent tx, and no other change\n-    bumped_total_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n+    bumped_total_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": ECONOMICAL})\n     assert_equal(change_addresses, get_change_address(bumped_total_tx['txid']))\n     bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n     assert_equal(change_addresses, get_change_address(bumped_rate_tx['txid']))\n@@ -503,5 +504,6 @@ def test_no_more_inputs_fails(self, rbf_node, dest_address):\n     rbfid = rbf_node.sendtoaddress(rbf_node.getnewaddress(), rbf_node.getbalance(), \"\", \"\", True)\n     assert_raises_rpc_error(-4, \"Unable to create transaction: Insufficient funds\", rbf_node.bumpfee, rbfid)\n \n+\n if __name__ == \"__main__\":\n     BumpFeeTest().main()"
      }
    ]
  },
  {
    "sha": "bd05f96d79df1a1561f84850d777808f8575fb8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDA1Zjk2ZDc5ZGYxYTE1NjFmODQ4NTBkNzc3ODA4Zjg1NzVmYjhi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-10T19:22:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-22T10:02:57Z"
      },
      "message": "test: delete wallet_bumpfee_totalfee_deprecation.py",
      "tree": {
        "sha": "918626e8077a0091a2122b9184360a1c5385e97c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/918626e8077a0091a2122b9184360a1c5385e97c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd05f96d79df1a1561f84850d777808f8575fb8b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl53N9EACgkQT1chs9Dj\nkh2JRA//f/pCUIX8b5MLr1cBCdj7V8clZIb75a75324onJJAOMJ+0h0nG2ccrX1w\ny3DmKTK6MiT5a7InRBeTXs5gxNAzY393jMq0/3rWB+sqAh14w6R2nsS/Z/1Ga0pw\nJcOrmlc89+BMIKzzCtuAJGoncbltXc4nTr6IIaoEP4yXhjLnSVNdC+CP+ckst+PK\njqnzNrPg5cJwPb0yr2my9BC7h1f3hpnb2w5GDphR693rLBh+EghbeVHG6y4CGlwH\nDB5GQcqFeMI2CdaXsEc5CUu/KOlEL05IWpClfEVMvum2Q6ghvkEDh6q5gzdGlxGT\nbj9LNW+3If4A1DqoYiJ3x7L9w2q/zgdDliilzOEWAh2vj/vuFBDiV/IT5dnTo64/\nESuTSBjpIRSlbe5Vx7SuNtPz0dyfdMucIiyre2V2YJWo3wRGpw/8siHsfcmrVXjd\nOoG44wDDaIo2zqUkc1ntd9jxsndX92uHdWgYWAntHCTSnnA3ory7N5yyQxZQSyNj\ne8uPa894iG42A3XiGMb0IXIOXR8+Ugqu1Dfrlimlqeuh88GOrtquCowTFLfcm24f\nKhsOji/18/lgKirf1PsfjlCXNQKXGtT8o26jYXCWrogGHb1NPaMKV3Zb0VF8IX4b\nz+kjDBr46/LksRT+CHrLkU9psnvn9qZFxuBB0NXssBlIZQeb9SM=\n=Mbqn\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKW7sJBbr5L+kzkG+Z8TABiwUoTm+FgNjUPu1apf5d85CP/wEDkXGmaGn1v/\nCm0Mg7v55hUI8QRedzfS8AiCc2cAneeSyACD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEMtx1jI56Hu7kikJCJlF8hUI\n8QRedzfS8AhhFI5mznR2HwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ590ukd7JcTqYvWj+PgIYOwjxBF53\nN9PwCOkcVTLqm2DiAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BD7wMxQx4FRih6oFrH9l0DfCPEEXnc30/AI8qFB\npFmSi4kAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 918626e8077a0091a2122b9184360a1c5385e97c\nparent a6d1ab8caa63bd343207baa60edb705209f16fb4\nauthor Jon Atack <jon@atack.com> 1583868136 +0100\ncommitter Jon Atack <jon@atack.com> 1584871377 +0100\n\ntest: delete wallet_bumpfee_totalfee_deprecation.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd05f96d79df1a1561f84850d777808f8575fb8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd05f96d79df1a1561f84850d777808f8575fb8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd05f96d79df1a1561f84850d777808f8575fb8b/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d1ab8caa63bd343207baa60edb705209f16fb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d1ab8caa63bd343207baa60edb705209f16fb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d1ab8caa63bd343207baa60edb705209f16fb4"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 0,
      "deletions": 55
    },
    "files": [
      {
        "sha": "cab8e66e1f15d5478b82d12964093e6f688bc597",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd05f96d79df1a1561f84850d777808f8575fb8b/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd05f96d79df1a1561f84850d777808f8575fb8b/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bd05f96d79df1a1561f84850d777808f8575fb8b",
        "patch": "@@ -183,7 +183,6 @@\n     'rpc_bind.py --nonloopback',\n     'mining_basic.py',\n     'wallet_bumpfee.py',\n-    'wallet_bumpfee_totalfee_deprecation.py',\n     'wallet_implicitsegwit.py',\n     'rpc_named_arguments.py',\n     'wallet_listsinceblock.py',"
      },
      {
        "sha": "b8e097c32e9b0b5eaa7d135718b940c81471fb68",
        "filename": "test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "status": "removed",
        "additions": 0,
        "deletions": 54,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d1ab8caa63bd343207baa60edb705209f16fb4/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d1ab8caa63bd343207baa60edb705209f16fb4/test/functional/wallet_bumpfee_totalfee_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee_totalfee_deprecation.py?ref=a6d1ab8caa63bd343207baa60edb705209f16fb4",
        "patch": "@@ -1,54 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test deprecation of passing `totalFee` to the bumpfee RPC.\"\"\"\n-from decimal import Decimal\n-\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_raises_rpc_error\n-\n-class BumpFeeWithTotalFeeArgumentDeprecationTest(BitcoinTestFramework):\n-    def set_test_params(self):\n-        self.num_nodes = 2\n-        self.extra_args = [[\n-            \"-walletrbf={}\".format(i),\n-            \"-mintxfee=0.00002\",\n-        ] for i in range(self.num_nodes)]\n-\n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n-    def run_test(self):\n-        peer_node, rbf_node = self.nodes\n-        peer_node.generate(110)\n-        self.sync_all()\n-        peer_node.sendtoaddress(rbf_node.getnewaddress(), 0.001)\n-        self.sync_all()\n-        peer_node.generate(1)\n-        self.sync_all()\n-        rbfid = spend_one_input(rbf_node, peer_node.getnewaddress())\n-\n-        self.log.info(\"Testing bumpfee with totalFee argument raises RPC error with deprecation message\")\n-        assert_raises_rpc_error(\n-            -8,\n-            \"totalFee argument has been deprecated and will be removed in 0.20. \" +\n-            \"Please use -deprecatedrpc=totalFee to continue using this argument until removal.\",\n-            rbf_node.bumpfee, rbfid, {\"totalFee\": 2000})\n-\n-        self.log.info(\"Testing bumpfee without totalFee argument does not raise\")\n-        rbf_node.bumpfee(rbfid)\n-\n-def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n-    tx_input = dict(sequence=BIP125_SEQUENCE_NUMBER,\n-                    **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))\n-    destinations = {dest_address: Decimal(\"0.00050000\")}\n-    destinations[node.getrawchangeaddress()] = change_size\n-    rawtx = node.createrawtransaction([tx_input], destinations)\n-    signedtx = node.signrawtransactionwithwallet(rawtx)\n-    txid = node.sendrawtransaction(signedtx[\"hex\"])\n-    return txid\n-\n-if __name__ == \"__main__\":\n-    BumpFeeWithTotalFeeArgumentDeprecationTest().main()"
      }
    ]
  },
  {
    "sha": "e347cfa9a7244277f9d220a4dc3537182f18441e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzQ3Y2ZhOWE3MjQ0Mjc3ZjlkMjIwYTRkYzM1MzcxODJmMTg0NDFl",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-10T17:40:23Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-26T16:54:18Z"
      },
      "message": "rpc: remove deprecated totalFee arg from RPC bumpfee",
      "tree": {
        "sha": "fb0c175cd7805c97bff498106185fc7a89c62575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb0c175cd7805c97bff498106185fc7a89c62575"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e347cfa9a7244277f9d220a4dc3537182f18441e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl583jsACgkQT1chs9Dj\nkh0mjA/8CUf+3fBHOKcXsmD2ZsiyWgpQMql5SBGdNCEGPbb86RyIHz8a3qgivCb1\n234tOoH+1DWj3rA7wBX7sI2cZdNkkgac5HRxDM0altFamsQUUY1VdcOB1v1U8Rcf\nmLBJh6CcZRTWPFwka+s0j0MO2j+TnCjRJviEAzyxyXUoRgMqBCtL7YxLARt1VxJs\npHKayxKHuSa0/3/v3goQraKhEAKlwGX5Kq30Edk/vSzId+vW1hQDVVJl8ZvbiLkm\nTWcytXY7oXKzHXLGu2PzEoMS+l8GTcNu6K4eHi5seFFUMFd5lPiEROXZnHZo/LtV\nn7F0txojUaV/wgk1j76fq66dZJMc9Wc/hIFcSO4psIoCAvcUY6iqOVuFeaLSjy6b\n1pWpUeFy90xjwrWSnpqbwc+jrU00RnFZh4ko37FxANj7IeGp46uJvbOYPSYv3zrc\nT2MrL5tDn6ZPhTVf345K7uv1eaTKVHODMYIucrj99hjnIyBL/+FJhSpmmZDA8b0W\nMOBg4KlPEne4M3E4AJSQni0KmyI5ngUf1edP6SxLKmD0a2XpENLYaxfd4ZYmXrH9\nV6bT9WD5lGAU0rnQPboXRq51kulszgeAtuvLbBmbtw+f4ug3N0qUy1Ub4SV+hEEE\nJp59e49fx0XGv9WReka74Jy/pZvlUCX8P8mXe2u6oiQ8RXVk8xE=\n=OQKU\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIESiZE7ylHjwuDSn+LctCdf150jvd0V2hp6AA2JvvjusCP/wEEh07FMVIJa5\nk3LWs/Sit+0I8QRefN498Agvmbq5osKMWQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEFJnlo9/4ByIv3QDcfZJ\ni/0I8QRefN498AiPTJ7nmxTCQgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbf/wEGtuHXAlbyeKA0LKEUiv9AsI8SDUddfdLJoBakm4\nPZUy90wp+Crien2ZrrsZZCw5fi7OrQjxBF583jzwCL+MboykQPwfAIPf4w0u+QyO\nKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t8BCFw3CW\nQdSzo37wl66xp7peCPEEXnzePPAIG6gnCEd2B8gAg9/jDS75DI4uLWh0dHBzOi8v\nYWxpY2UuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree fb0c175cd7805c97bff498106185fc7a89c62575\nparent bd05f96d79df1a1561f84850d777808f8575fb8b\nauthor Jon Atack <jon@atack.com> 1583862023 +0100\ncommitter Jon Atack <jon@atack.com> 1585241658 +0100\n\nrpc: remove deprecated totalFee arg from RPC bumpfee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e347cfa9a7244277f9d220a4dc3537182f18441e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e347cfa9a7244277f9d220a4dc3537182f18441e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e347cfa9a7244277f9d220a4dc3537182f18441e/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd05f96d79df1a1561f84850d777808f8575fb8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd05f96d79df1a1561f84850d777808f8575fb8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd05f96d79df1a1561f84850d777808f8575fb8b"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 11,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3761ca466afbe89dec27bebb34dbc3e0e4a2f3a6",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e347cfa9a7244277f9d220a4dc3537182f18441e/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e347cfa9a7244277f9d220a4dc3537182f18441e/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=e347cfa9a7244277f9d220a4dc3537182f18441e",
        "patch": "@@ -60,7 +60,7 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CFeeRate& newFeerate, const int64_t maxTxSize, std::vector<std::string>& errors) {\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set FeeRate, TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n+    // This may occur if the user set fee_rate or paytxfee too low, if fallbackfee is too low, or, perhaps,\n     // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n     // moment earlier. In this case, we report an error to the user, who may adjust the fee.\n     CFeeRate minMempoolFeeRate = wallet.chain().mempoolMinFee();"
      },
      {
        "sha": "05342472bbeeb6484b947dff649810a55723f563",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 29,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e347cfa9a7244277f9d220a4dc3537182f18441e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e347cfa9a7244277f9d220a4dc3537182f18441e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e347cfa9a7244277f9d220a4dc3537182f18441e",
        "patch": "@@ -3342,24 +3342,19 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n                 \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n-                \"If `totalFee` (DEPRECATED) is given, adding inputs is not supported, so there must be a single change output that is big enough or it will fail.\\n\"\n                 \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n                 \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n                 \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n                 \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-                \"Alternatively, the user can specify totalFee (DEPRECATED), or fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction .\\n\"\n+                \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n                 \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n                 \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n                     {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                         {\n                             {\"confTarget\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                            {\"totalFee\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"Total fee (NOT feerate) to pay, in satoshis. (DEPRECATED)\\n\"\n-            \"                         In rare cases, the actual fee paid might be slightly higher than the specified\\n\"\n-            \"                         totalFee if the tx change output has to be removed because it is too close to\\n\"\n-            \"                         the dust threshold.\"},\n-                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fallback to 'confTarget'\", \"FeeRate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'confTarget'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n             \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n             \"                         Must be at least 0.0001 BTC per kB higher than the current transaction fee rate.\\n\"},\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n@@ -3400,34 +3395,22 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CCoinControl coin_control;\n     coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     // optional parameters\n-    CAmount totalFee = 0;\n     coin_control.m_signal_bip125_rbf = true;\n \n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {\n                 {\"confTarget\", UniValueType(UniValue::VNUM)},\n-                {\"totalFee\", UniValueType(UniValue::VNUM)},\n                 {\"fee_rate\", UniValueType(UniValue::VNUM)},\n                 {\"replaceable\", UniValueType(UniValue::VBOOL)},\n                 {\"estimate_mode\", UniValueType(UniValue::VSTR)},\n             },\n             true, true);\n-        if (options.exists(\"confTarget\") && (options.exists(\"totalFee\") || options.exists(\"fee_rate\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget can't be set with totalFee or fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n-        } else if (options.exists(\"fee_rate\") && options.exists(\"totalFee\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"fee_rate can't be set along with totalFee.\");\n+        if (options.exists(\"confTarget\") && options.exists(\"fee_rate\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"confTarget can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\");\n         } else if (options.exists(\"confTarget\")) { // TODO: alias this to conf_target\n             coin_control.m_confirm_target = ParseConfirmTarget(options[\"confTarget\"], pwallet->chain().estimateMaxBlocks());\n-        } else if (options.exists(\"totalFee\")) {\n-            if (!pwallet->chain().rpcEnableDeprecated(\"totalFee\")) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, \"totalFee argument has been deprecated and will be removed in 0.20. Please use -deprecatedrpc=totalFee to continue using this argument until removal.\");\n-            }\n-            totalFee = options[\"totalFee\"].get_int64();\n-            if (totalFee <= 0) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid totalFee %s (must be greater than 0)\", FormatMoney(totalFee)));\n-            }\n         } else if (options.exists(\"fee_rate\")) {\n             CFeeRate fee_rate(AmountFromValue(options[\"fee_rate\"]));\n             if (fee_rate <= CFeeRate(0)) {\n@@ -3460,13 +3443,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CAmount new_fee;\n     CMutableTransaction mtx;\n     feebumper::Result res;\n-    if (totalFee > 0) {\n-        // Targeting total fee bump. Requires a change output of sufficient size.\n-        res = feebumper::CreateTotalBumpTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n-    } else {\n-        // Targeting feerate bump.\n-        res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n-    }\n+    // Targeting feerate bump.\n+    res = feebumper::CreateRateBumpTransaction(*pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n@@ -4196,7 +4174,7 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                             },\n                             {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"wallet default\", \"Marks this transaction as BIP125 replaceable.\\n\"\n                             \"                              Allows this transaction to be replaced by a transaction with higher fees\"},\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"Fallback to wallet's confirmation target\", \"Confirmation target (in blocks)\"},\n+                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"fall back to wallet's confirmation target (txconfirmtarget)\", \"Confirmation target (in blocks)\"},\n                             {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"UNSET\", \"The fee estimate mode, must be one of:\\n\"\n                             \"         \\\"UNSET\\\"\\n\"\n                             \"         \\\"ECONOMICAL\\\"\\n\""
      },
      {
        "sha": "38c9807757efe515c6ab3a7d6516b2f5bff69a4f",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e347cfa9a7244277f9d220a4dc3537182f18441e/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e347cfa9a7244277f9d220a4dc3537182f18441e/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=e347cfa9a7244277f9d220a4dc3537182f18441e",
        "patch": "@@ -130,9 +130,9 @@ def test_feerate_args(self, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n \n-    assert_raises_rpc_error(-8, \"confTarget can't be set with totalFee or fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"confTarget\":1})\n-    assert_raises_rpc_error(-8, \"confTarget can't be set with totalFee or fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"totalFee\":0.00001, \"confTarget\":1})\n-    assert_raises_rpc_error(-8, \"fee_rate can't be set along with totalFee.\", rbf_node.bumpfee, rbfid, {\"fee_rate\":0.00001, \"totalFee\":0.001})\n+    assert_raises_rpc_error(-8, \"confTarget can't be set with fee_rate. Please provide either a confirmation target in blocks for automatic fee estimation, or an explicit fee rate.\", rbf_node.bumpfee, rbfid, {\"fee_rate\": NORMAL, \"confTarget\": 1})\n+\n+    assert_raises_rpc_error(-3, \"Unexpected key totalFee\", rbf_node.bumpfee, rbfid, {\"totalFee\": NORMAL})\n \n     # Bumping to just above minrelay should fail to increase total fee enough, at least\n     assert_raises_rpc_error(-8, \"Insufficient total fee\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})"
      }
    ]
  },
  {
    "sha": "4a0b27bb01738e6917e27b2cf47f9a8536249693",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTBiMjdiYjAxNzM4ZTY5MTdlMjdiMmNmNDdmOWE4NTM2MjQ5Njkz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-10T17:40:57Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-26T16:54:21Z"
      },
      "message": "wallet: remove totalfee from createBumpTransaction()",
      "tree": {
        "sha": "a6a1c09e18f53b30d21e979397b86b95ac940247",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6a1c09e18f53b30d21e979397b86b95ac940247"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a0b27bb01738e6917e27b2cf47f9a8536249693",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl583j0ACgkQT1chs9Dj\nkh1Uig/+O7V3mK92XBKxtDmFUWwhvRJnCfHOhwDPBGFzulctpGt9ZBauX5ZJljI+\n3hUEsZh+TzZpXipNnlS5QhU91F613gbbSH8X3XpGnbUa1PY/A7nXRy+3f1NlWbqO\nD+IDHjKsNOM3VxF0+aAmhHIfh5f9ZOy5sZ4IJPPBOFPmR11t7jK7eWv8r70l28qh\nRZHY6nCUe9j3ykgllPvUG1BUEfAFkErsPIzwgemYZ37zecnL81KNjjMr4IablHhV\nmNp2KdcdX78Av1pXF/iV00KkE19IfCsx5czcceDH7r9x/6hp9BohQMyqczKpDP53\nONNFc3cVNWuoCWNjyq2hqw5que9V+/xv+gXj864xNqqAJ79bhXLRgunEVDvVpara\nxLyXgHpbU+AMqo6Rolf2gvVYWSkCfq07EK2KzxVyR8/gXtONCew8Cz0ATn2XIxRd\nlKnqKQWjrdakbxxx1MDarfyzztx21TA7H6FBy2wdlsReuHPHEiKQ2jHnFVzSzwie\n3LtKqUHle/jBF/HQJsB3qyoI1wq1sOTScfDaVblaPRz26rAS2jhXeNn4B5L1yRcj\nfJlc9QRHYGpsa2Oo5LI96BpHXES6b3bb7pZFBGzI++W65RdS8Gf+pjlyWVTfPFiz\nQwZAunH/MapKE0u6JuKefSD+nAdyJ0TsTVStiNFgBWfnSJ7vDZ0=\n=4LOU\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIM5HsJsrnsRVHW80N6LHJt4LfgAuXGGxRJ8WgWqdgu2fCP/wEFXr0VY8rW7P\nJV35vs/k82cI8QRefN4/8AhXcWHYhr5udQCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEH8Ii9oOMRPxd8EAhxVKRUoI\n8QRefN4/8AhSRPzNDsG73QCD3+MNLvkMjiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVu\nZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEPHcWYh2WtHZGbByKzKqgVMI8QRefN4/\n8AgXVh+anUlVvwCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxs\nYXh5LmNvbfAQ9zf6yjvnywtiXzr59ojdeAjxBF583j/wCGsUrE4V91u3AIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a6a1c09e18f53b30d21e979397b86b95ac940247\nparent e347cfa9a7244277f9d220a4dc3537182f18441e\nauthor Jon Atack <jon@atack.com> 1583862057 +0100\ncommitter Jon Atack <jon@atack.com> 1585241661 +0100\n\nwallet: remove totalfee from createBumpTransaction()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a0b27bb01738e6917e27b2cf47f9a8536249693",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a0b27bb01738e6917e27b2cf47f9a8536249693",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a0b27bb01738e6917e27b2cf47f9a8536249693/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e347cfa9a7244277f9d220a4dc3537182f18441e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e347cfa9a7244277f9d220a4dc3537182f18441e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e347cfa9a7244277f9d220a4dc3537182f18441e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e444a6634d19b0ebb2111fb995279dab7345260e",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=4a0b27bb01738e6917e27b2cf47f9a8536249693",
        "patch": "@@ -253,19 +253,12 @@ class WalletImpl : public Wallet\n     }\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        CAmount total_fee,\n         std::vector<std::string>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        if (total_fee > 0) {\n-            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n-                feebumper::Result::OK;\n-        } else {\n-            return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) ==\n-                feebumper::Result::OK;\n-        }\n+        return feebumper::CreateRateBumpTransaction(*m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) == feebumper::Result::OK;\n     }\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(*m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,"
      },
      {
        "sha": "f3da7ca611f07d2a58cdc6de2945c3f08819512a",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=4a0b27bb01738e6917e27b2cf47f9a8536249693",
        "patch": "@@ -155,7 +155,6 @@ class Wallet\n     //! Create bump transaction.\n     virtual bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        CAmount total_fee,\n         std::vector<std::string>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,"
      },
      {
        "sha": "9b072c5266b6de5a50b0ba165cb7d2b60bd477da",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a0b27bb01738e6917e27b2cf47f9a8536249693/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=4a0b27bb01738e6917e27b2cf47f9a8536249693",
        "patch": "@@ -482,7 +482,7 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    if (!m_wallet->createBumpTransaction(hash, coin_control, 0 /* totalFee */, errors, old_fee, new_fee, mtx)) {\n+    if (!m_wallet->createBumpTransaction(hash, coin_control, errors, old_fee, new_fee, mtx)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n             (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n          return false;"
      }
    ]
  },
  {
    "sha": "c3857c5fcb21836ddc1b79a6b19cffe562cade10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzg1N2M1ZmNiMjE4MzZkZGMxYjc5YTZiMTljZmZlNTYyY2FkZTEw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-10T20:57:01Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-03-26T16:54:23Z"
      },
      "message": "wallet: remove CreateTotalBumpTransaction()",
      "tree": {
        "sha": "faea0407e594155375f0c32888417f8b96ca43e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faea0407e594155375f0c32888417f8b96ca43e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3857c5fcb21836ddc1b79a6b19cffe562cade10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl583kAACgkQT1chs9Dj\nkh3O9w/+NDwUT1HGCiR+3ATLkBK1yM1+hbEac0TlANcZMfLBwzAsqQm2bPqPWOYw\nf5uMTips35W16WN8mCZHGoRQ7LwGn3qpoPj9z8qnQR72vFcZiSQm9TLynATOF4gO\n8IavT+IfclYizi+Kwmje5GbUKTsNvsZYuoJ/OpwzGcq2FWp/oApoimGLAiLC4ZZH\npDGl2oQdmNHfpJHkt/H13TwyhDJ4UhHsZCigb8IKDqHO1YiP5VXtQKUKedyma3fX\nrfHlShGQ7ftEbygoIsoajollNEyoT7VOUWBEneAX/+wrPwmLkm+A0CdcYZZa9UfM\nc31ZAz69R4ftMZvUQMjKkhbzTUHaP/2L9WDiRFQnufmxPOHFyPx9BY2xpRUD0zIa\n+7LEgPhHTvGb+JyJOT1VDhFTraORgTs+AIrjYn+i3wVY0QbPir5fkOHNb+GIREUM\nliqSOPs4+7Lk1FSbk9gKB1qQ7Vtrg3m1kdJPrryti4sQ+PoNgdRKEOvql6wNYnGk\nbH8zwfJcdsXTMc5b5hy4b7Dmda0msJnJ3xmPhBTH8GG64iRPppRcS6yEIMwFex/H\n8AS+eF1O7UXhaJEN3I9alfvUbQ769u9cHLw33jgibqP2oQCv2x9pD/4nfovF0C1e\nKPWPgeT3pQ0a0c2gzdifxuYsEJB6j509AJcFaQNoSMOMTb23dDc=\n=34of\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKuuo8k9rBM1KACgYBR7hNDo2omU9HvdLc/DnR3BijCbCP/wEAIjSMr1b+yg\nSd9NmwDsm7MI8QRefN5C8AhwqeqXzWyFPgCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEF3xYvDyfzhZ2Ukt/zz6EiII8CA0g343\nn0qRykhQlsmGESxB5xIgtMHfz9AupOM0Ihk9mAjxBF583kHwCO3XggZLGLRoAIPf\n4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n//AQgzwhT0wt4Ub2T6hVM9gC6wjxBF583kLwCH9Uvuj+AGttAIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BCn7RTi\nsLdQpWqQiXlktVuNCPEgmCSk7NAzaoYQClwJBKqalz8/KLhcxln4bSXqT4oq31cI\n8QRefN5B8AhEtoFg/bjopQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree faea0407e594155375f0c32888417f8b96ca43e9\nparent 4a0b27bb01738e6917e27b2cf47f9a8536249693\nauthor Jon Atack <jon@atack.com> 1583873821 +0100\ncommitter Jon Atack <jon@atack.com> 1585241663 +0100\n\nwallet: remove CreateTotalBumpTransaction()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3857c5fcb21836ddc1b79a6b19cffe562cade10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3857c5fcb21836ddc1b79a6b19cffe562cade10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3857c5fcb21836ddc1b79a6b19cffe562cade10/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a0b27bb01738e6917e27b2cf47f9a8536249693",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a0b27bb01738e6917e27b2cf47f9a8536249693",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a0b27bb01738e6917e27b2cf47f9a8536249693"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 0,
      "deletions": 136
    },
    "files": [
      {
        "sha": "1623ab9074b43e907a2c80e825d90627ede18ef2",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 126,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3857c5fcb21836ddc1b79a6b19cffe562cade10/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3857c5fcb21836ddc1b79a6b19cffe562cade10/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=c3857c5fcb21836ddc1b79a6b19cffe562cade10",
        "patch": "@@ -150,132 +150,6 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid)\n     return res == feebumper::Result::OK;\n }\n \n-Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n-                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n-{\n-    new_fee = total_fee;\n-\n-    auto locked_chain = wallet->chain().lock();\n-    LOCK(wallet->cs_wallet);\n-    errors.clear();\n-    auto it = wallet->mapWallet.find(txid);\n-    if (it == wallet->mapWallet.end()) {\n-        errors.push_back(\"Invalid or non-wallet transaction id\");\n-        return Result::INVALID_ADDRESS_OR_KEY;\n-    }\n-    const CWalletTx& wtx = it->second;\n-\n-    Result result = PreconditionChecks(*wallet, wtx, errors);\n-    if (result != Result::OK) {\n-        return result;\n-    }\n-\n-    // figure out which output was change\n-    // if there was no change output or multiple change outputs, fail\n-    int nOutput = -1;\n-    for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (wallet->IsChange(wtx.tx->vout[i])) {\n-            if (nOutput != -1) {\n-                errors.push_back(\"Transaction has multiple change outputs\");\n-                return Result::WALLET_ERROR;\n-            }\n-            nOutput = i;\n-        }\n-    }\n-    if (nOutput == -1) {\n-        errors.push_back(\"Transaction does not have a change output\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // Calculate the expected size of the new transaction.\n-    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, wallet);\n-    if (maxNewTxSize < 0) {\n-        errors.push_back(\"Transaction contains inputs that cannot be signed\");\n-        return Result::INVALID_ADDRESS_OR_KEY;\n-    }\n-\n-    // calculate the old fee and fee-rate\n-    isminefilter filter = wallet->GetLegacyScriptPubKeyMan() && wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n-    old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n-    CFeeRate nOldFeeRate(old_fee, txSize);\n-    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n-    // future proof against changes to network wide policy for incremental relay\n-    // fee that our node may not be aware of.\n-    CFeeRate nodeIncrementalRelayFee = wallet->chain().relayIncrementalFee();\n-    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n-    if (nodeIncrementalRelayFee > walletIncrementalRelayFee) {\n-        walletIncrementalRelayFee = nodeIncrementalRelayFee;\n-    }\n-\n-    CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n-    if (total_fee < minTotalFee) {\n-        errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-            FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n-        return Result::INVALID_PARAMETER;\n-    }\n-    CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n-    if (total_fee < requiredFee) {\n-        errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-            FormatMoney(requiredFee)));\n-        return Result::INVALID_PARAMETER;\n-    }\n-\n-    // Check that in all cases the new fee doesn't violate maxTxFee\n-     const CAmount max_tx_fee = wallet->m_default_max_tx_fee;\n-     if (new_fee > max_tx_fee) {\n-         errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)\",\n-                               FormatMoney(new_fee), FormatMoney(max_tx_fee)));\n-         return Result::WALLET_ERROR;\n-     }\n-\n-    // check that fee rate is higher than mempool's minimum fee\n-    // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n-    // This may occur if the user set TotalFee or paytxfee too low, if fallbackfee is too low, or, perhaps,\n-    // in a rare situation where the mempool minimum fee increased significantly since the fee estimation just a\n-    // moment earlier. In this case, we report an error to the user, who may use total_fee to make an adjustment.\n-    CFeeRate minMempoolFeeRate = wallet->chain().mempoolMinFee();\n-    CFeeRate nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n-    if (nNewFeeRate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n-        errors.push_back(strprintf(\n-            \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"\n-            \"the totalFee value should be at least %s to add transaction\",\n-            FormatMoney(nNewFeeRate.GetFeePerK()),\n-            FormatMoney(minMempoolFeeRate.GetFeePerK()),\n-            FormatMoney(minMempoolFeeRate.GetFee(maxNewTxSize))));\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // Now modify the output to increase the fee.\n-    // If the output is not large enough to pay the fee, fail.\n-    CAmount nDelta = new_fee - old_fee;\n-    assert(nDelta > 0);\n-    mtx = CMutableTransaction{*wtx.tx};\n-    CTxOut* poutput = &(mtx.vout[nOutput]);\n-    if (poutput->nValue < nDelta) {\n-        errors.push_back(\"Change output is too small to bump the fee\");\n-        return Result::WALLET_ERROR;\n-    }\n-\n-    // If the output would become dust, discard it (converting the dust to fee)\n-    poutput->nValue -= nDelta;\n-    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet))) {\n-        wallet->WalletLogPrintf(\"Bumping fee and discarding dust output\\n\");\n-        new_fee += poutput->nValue;\n-        mtx.vout.erase(mtx.vout.begin() + nOutput);\n-    }\n-\n-    // Mark new tx not replaceable, if requested.\n-    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {\n-        for (auto& input : mtx.vin) {\n-            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n-        }\n-    }\n-\n-    return Result::OK;\n-}\n-\n-\n Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,\n                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {"
      },
      {
        "sha": "859f7547614b6fab89931c2f6ef97da278c685c4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3857c5fcb21836ddc1b79a6b19cffe562cade10/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3857c5fcb21836ddc1b79a6b19cffe562cade10/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=c3857c5fcb21836ddc1b79a6b19cffe562cade10",
        "patch": "@@ -28,16 +28,6 @@ enum class Result\n //! Return whether transaction can be bumped.\n bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid);\n \n-//! Create bumpfee transaction based on total amount.\n-Result CreateTotalBumpTransaction(const CWallet* wallet,\n-                         const uint256& txid,\n-                         const CCoinControl& coin_control,\n-                         CAmount total_fee,\n-                         std::vector<std::string>& errors,\n-                         CAmount& old_fee,\n-                         CAmount& new_fee,\n-                         CMutableTransaction& mtx);\n-\n //! Create bumpfee transaction based on feerate estimates.\n Result CreateRateBumpTransaction(CWallet& wallet,\n                          const uint256& txid,"
      }
    ]
  }
]