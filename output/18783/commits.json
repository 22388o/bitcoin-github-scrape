[
  {
    "sha": "38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOGU0OWRlZDhiZDA3OWY4ZGE4YjI3MGIzOWY4MWNjNWNmM2FkYTEx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-27T14:03:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-27T17:06:59Z"
      },
      "message": "tests: Add fuzzing harness for MessageSign, MessageVerify and other functions in util/message.h",
      "tree": {
        "sha": "bf2e656b20934af7fa7da409eaf86238e148d0fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf2e656b20934af7fa7da409eaf86238e148d0fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38e49ded8bd079f8da8b270b39f81cc5cf3ada11/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ddfce671263e41aa27d56747c23c3240efdfab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ddfce671263e41aa27d56747c23c3240efdfab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ddfce671263e41aa27d56747c23c3240efdfab8"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 55,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9aa817c60bbab59a7914d74368ea2fdd0ae870f6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e49ded8bd079f8da8b270b39f81cc5cf3ada11/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e49ded8bd079f8da8b270b39f81cc5cf3ada11/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
        "patch": "@@ -52,6 +52,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/locale \\\n   test/fuzz/merkle_block_deserialize \\\n   test/fuzz/merkleblock \\\n+  test/fuzz/message \\\n   test/fuzz/messageheader_deserialize \\\n   test/fuzz/multiplication_overflow \\\n   test/fuzz/net_permissions \\\n@@ -585,6 +586,12 @@ test_fuzz_merkleblock_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_merkleblock_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_merkleblock_SOURCES = test/fuzz/merkleblock.cpp\n \n+test_fuzz_message_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_message_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_message_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_message_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_message_SOURCES = test/fuzz/message.cpp\n+\n test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_messageheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "dfa98a812b8f45f0fb3be514854a86ba0427809d",
        "filename": "src/test/fuzz/message.cpp",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38e49ded8bd079f8da8b270b39f81cc5cf3ada11/src/test/fuzz/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38e49ded8bd079f8da8b270b39f81cc5cf3ada11/src/test/fuzz/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/message.cpp?ref=38e49ded8bd079f8da8b270b39f81cc5cf3ada11",
        "patch": "@@ -0,0 +1,48 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <key_io.h>\n+#include <optional.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/message.h>\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::string random_message = fuzzed_data_provider.ConsumeRandomLengthString(1024);\n+    {\n+        const std::vector<uint8_t> random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CKey private_key;\n+        private_key.Set(random_bytes.begin(), random_bytes.end(), fuzzed_data_provider.ConsumeBool());\n+        std::string signature;\n+        const bool message_signed = MessageSign(private_key, random_message, signature);\n+        if (private_key.IsValid()) {\n+            assert(message_signed);\n+            const MessageVerificationResult verification_result = MessageVerify(EncodeDestination(PKHash(private_key.GetPubKey().GetID())), signature, random_message);\n+            assert(verification_result == MessageVerificationResult::OK);\n+        }\n+    }\n+    {\n+        (void)MessageHash(random_message);\n+        (void)MessageVerify(fuzzed_data_provider.ConsumeRandomLengthString(1024), fuzzed_data_provider.ConsumeRandomLengthString(1024), random_message);\n+        (void)SigningResultString(fuzzed_data_provider.PickValueInArray({SigningResult::OK, SigningResult::PRIVATE_KEY_NOT_AVAILABLE, SigningResult::SIGNING_FAILED}));\n+    }\n+}"
      }
    ]
  }
]