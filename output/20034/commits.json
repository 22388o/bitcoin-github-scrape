[
  {
    "sha": "ed3acda33b75d1b546ee696a63def239bcdd62de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDNhY2RhMzNiNzVkMWI1NDZlZTY5NmE2M2RlZjIzOWJjZGQ2MmRl",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-29T00:24:06Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-29T08:35:01Z"
      },
      "message": "test, refactor: add default_wallet_name and wallet_data_filename variables\n\nNo changes in behavior",
      "tree": {
        "sha": "e5944e95fa4f26367dc0f6d2fb893c89fcf5563a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5944e95fa4f26367dc0f6d2fb893c89fcf5563a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed3acda33b75d1b546ee696a63def239bcdd62de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed3acda33b75d1b546ee696a63def239bcdd62de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed3acda33b75d1b546ee696a63def239bcdd62de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed3acda33b75d1b546ee696a63def239bcdd62de/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec9b4492eba5d32ab833d511984756601d3f39b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec9b4492eba5d32ab833d511984756601d3f39b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec9b4492eba5d32ab833d511984756601d3f39b0"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 38,
      "deletions": 36
    },
    "files": [
      {
        "sha": "6a8c97d001e828e34ce7ac9874b773167be9e5b1",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -30,7 +30,7 @@ def run_test(self):\n             wallet_dir = os.path.join(datadir, 'wallets')\n             self.log.info(\"Check that we can't start a second bitcoind instance using the same wallet\")\n             expected_msg = \"Error: Error initializing wallet database environment\"\n-            self.nodes[1].assert_start_raises_init_error(extra_args=['-walletdir={}'.format(wallet_dir), '-wallet=', '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n+            self.nodes[1].assert_start_raises_init_error(extra_args=['-walletdir={}'.format(wallet_dir), '-wallet=' + self.default_wallet_name, '-noserver'], expected_msg=expected_msg, match=ErrorMatch.PARTIAL_REGEX)\n \n if __name__ == '__main__':\n     FilelockTest().main()"
      },
      {
        "sha": "1257dff1ae595c128d0557ae603fa68c842a3dd1",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -95,7 +95,7 @@ def run_test(self):\n             assert_equal(self.nodes[0].cli.getwalletinfo(), wallet_info)\n \n             # Setup to test -getinfo, -generate, and -rpcwallet= with multiple wallets.\n-            wallets = ['', 'Encrypted', 'secret']\n+            wallets = [self.default_wallet_name, 'Encrypted', 'secret']\n             amounts = [BALANCE + Decimal('9.999928'), Decimal(9), Decimal(31)]\n             self.nodes[0].createwallet(wallet_name=wallets[1])\n             self.nodes[0].createwallet(wallet_name=wallets[2])"
      },
      {
        "sha": "adcd8a7d4c6f0eca81d6047a8d44712df615b8c5",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -29,7 +29,7 @@ def run_test(self):\n             self.nodes[0].generate(101)\n             self.nodes[0].createwallet(wallet_name='nopriv', disable_private_keys=True)\n             noprivs0 = self.nodes[0].get_wallet_rpc('nopriv')\n-            w0 = self.nodes[0].get_wallet_rpc('')\n+            w0 = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n             self.nodes[1].createwallet(wallet_name='nopriv', disable_private_keys=True)\n             noprivs1 = self.nodes[1].get_wallet_rpc('nopriv')\n "
      },
      {
        "sha": "100be26c5932553b84eaa9dde12a732c330c38ef",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -102,6 +102,8 @@ def __init__(self):\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n         self.supports_cli = True\n         self.bind_to_localhost_only = True\n+        self.default_wallet_name = \"\"\n+        self.wallet_data_filename = \"wallet.dat\"\n         self.set_test_params()\n         self.parse_args()\n         if self.options.timeout_factor == 0 :"
      },
      {
        "sha": "ef68e224b689cb9eaafe7ef0b63dd0f392a59a41",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -213,7 +213,7 @@ def test_salvage(self):\n         self.assert_tool_output('', '-wallet=salvage', 'salvage')\n \n     def run_test(self):\n-        self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n+        self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename)\n         self.test_invalid_tool_commands_and_args()\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()"
      },
      {
        "sha": "be39b34a54f60ec1098beb55f964791c404e8532",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -107,9 +107,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n-        os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        os.remove(os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -171,9 +171,9 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n \n         # Restore wallets from backup\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', 'wallet.dat'))\n-        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -209,9 +209,9 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets', 'wallet.dat'),\n-            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', ''),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename),\n+            os.path.join(self.nodes[0].datadir, self.chain, '.', 'wallets', self.default_wallet_name, self.wallet_data_filename),\n+            os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name),\n             os.path.join(self.nodes[0].datadir, self.chain, 'wallets')]\n \n         for sourcePath in sourcePaths:"
      },
      {
        "sha": "e4989b4fea8a60f48ee94be2da19368aedb1753b",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -215,10 +215,10 @@ def test_balances(*, fee_node_1=0):\n         # dynamically loading the wallet.\n         before = self.nodes[1].getbalances()['mine']['untrusted_pending']\n         dst = self.nodes[1].getnewaddress()\n-        self.nodes[1].unloadwallet('')\n+        self.nodes[1].unloadwallet(self.default_wallet_name)\n         self.nodes[0].sendtoaddress(dst, 0.1)\n         self.sync_all()\n-        self.nodes[1].loadwallet('')\n+        self.nodes[1].loadwallet(self.default_wallet_name)\n         after = self.nodes[1].getbalances()['mine']['untrusted_pending']\n         assert_equal(before + Decimal('0.1'), after)\n "
      },
      {
        "sha": "62eb15f87aee8d0d9cd1066d439ad749d1aa3b91",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -24,7 +24,7 @@ def run_test(self):\n         # Make a descriptor wallet\n         self.log.info(\"Making a descriptor wallet\")\n         self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n-        self.nodes[0].unloadwallet(\"\")\n+        self.nodes[0].unloadwallet(self.default_wallet_name)\n \n         # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n         self.log.info(\"Checking wallet info\")"
      },
      {
        "sha": "5af14ecb8f516d6a3ec8ef438c247089ee3e9889",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -84,7 +84,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(\n             os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n-            os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"),\n+            os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename),\n         )\n         self.start_node(1)\n \n@@ -112,7 +112,7 @@ def run_test(self):\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n         shutil.copyfile(\n             os.path.join(self.nodes[1].datadir, \"hd.bak\"),\n-            os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"),\n+            os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename),\n         )\n         self.start_node(1, extra_args=self.extra_args[1])\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "f7fdd6e9085a256e0332aa09cdad5fd35513793d",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -820,7 +820,7 @@ def run_test(self):\n \n         # Cannot import those pubkeys to keypool of wallet with privkeys\n         self.log.info(\"Pubkeys cannot be added to the keypool of a wallet with private keys\")\n-        wrpc = self.nodes[1].get_wallet_rpc(\"\")\n+        wrpc = self.nodes[1].get_wallet_rpc(self.default_wallet_name)\n         assert wrpc.getwalletinfo()['private_keys_enabled']\n         result = wrpc.importmulti(\n             [{"
      },
      {
        "sha": "51795aca231e21852cd08bf6164e14e482a1e9e0",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -143,7 +143,7 @@ def run_test(self):\n         w2 = nodes[0].get_wallet_rpc('w2')\n \n         # refer to initial wallet as w1\n-        w1 = nodes[0].get_wallet_rpc('')\n+        w1 = nodes[0].get_wallet_rpc(self.default_wallet_name)\n \n         # import private key and fund it\n         address = addr.pop()"
      },
      {
        "sha": "3f865b330c069f6813c94888696be9b735d7c10b",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -30,7 +30,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\")\n+        wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename)\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n         self.nodes[0].generate(101)\n "
      },
      {
        "sha": "8630b7ab4f93c114ce45f55d6b38ff8c1c99e044",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -62,14 +62,14 @@ def run_test(self):\n \n         def wallet_file(name):\n             if os.path.isdir(wallet_dir(name)):\n-                return wallet_dir(name, \"wallet.dat\")\n+                return wallet_dir(name, self.wallet_data_filename)\n             return wallet_dir(name)\n \n-        assert_equal(self.nodes[0].listwalletdir(), { 'wallets': [{ 'name': '' }] })\n+        assert_equal(self.nodes[0].listwalletdir(), { 'wallets': [{ 'name': self.default_wallet_name }] })\n \n         # check wallet.dat is created\n         self.stop_nodes()\n-        assert_equal(os.path.isfile(wallet_dir('wallet.dat')), True)\n+        assert_equal(os.path.isfile(wallet_dir(self.default_wallet_name, self.wallet_data_filename)), True)\n \n         # create symlink to verify wallet directory path can be referenced\n         # through symlink\n@@ -78,13 +78,13 @@ def wallet_file(name):\n \n         # rename wallet.dat to make sure plain wallet file paths (as opposed to\n         # directory paths) can be loaded\n-        os.rename(wallet_dir(\"wallet.dat\"), wallet_dir(\"w8\"))\n+        os.rename(wallet_dir(self.default_wallet_name, self.wallet_data_filename), wallet_dir(\"w8\"))\n \n         # create another dummy wallet for use in testing backups later\n-        self.start_node(0, [\"-wallet=\"])\n+        self.start_node(0, [\"-wallet=\" + self.default_wallet_name])\n         self.stop_nodes()\n         empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n-        os.rename(wallet_dir(\"wallet.dat\"), empty_wallet)\n+        os.rename(wallet_dir(self.default_wallet_name, self.wallet_data_filename), empty_wallet)\n \n         # restart node with a mix of wallet names:\n         #   w1, w2, w3 - to verify new wallets created when non-existing paths specified\n@@ -94,10 +94,10 @@ def wallet_file(name):\n         #   w7_symlink - to verify symlinked wallet path is initialized correctly\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n-        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n+        wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', self.default_wallet_name]\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n-        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n         assert_equal(set(node.listwallets()), set(wallet_names))\n \n@@ -157,7 +157,7 @@ def wallet_file(name):\n \n         self.restart_node(0, extra_args)\n \n-        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy'])\n \n         wallets = [wallet(w) for w in wallet_names]\n         wallet_bad = wallet(\"bad\")\n@@ -247,12 +247,12 @@ def wallet_file(name):\n         assert_raises_rpc_error(-18, \"Wallet file verification failed. Failed to load database path '{}'. Path does not exist.\".format(path), self.nodes[0].loadwallet, 'wallets')\n \n         # Fail to load duplicate wallets\n-        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w1\", \"wallet.dat\")\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"w1\", self.wallet_data_filename)\n         assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, wallet_names[0])\n \n         # Fail to load duplicate wallets by different ways (directory and filepath)\n-        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"wallet.dat\")\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, 'wallet.dat')\n+        path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", self.wallet_data_filename)\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed. Refusing to load database. Data file '{}' is already loaded.\".format(path), self.nodes[0].loadwallet, self.wallet_data_filename)\n \n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-4, \"BerkeleyDatabase: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n@@ -324,7 +324,7 @@ def wallet_file(name):\n         assert_equal(self.nodes[0].listwallets(), ['w1'])\n         assert_equal(w1.getwalletinfo()['walletname'], 'w1')\n \n-        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), ['', os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy', 'w9'])\n+        assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8', 'w8_copy', 'w9'])\n \n         # Test backing up and restoring wallets\n         self.log.info(\"Test wallet backup\")"
      },
      {
        "sha": "5c24d466c337c47d75414f7ef18be7fd6508bd11",
        "filename": "test/functional/wallet_reorgsrestore.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_reorgsrestore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_reorgsrestore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_reorgsrestore.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -89,7 +89,7 @@ def run_test(self):\n         # Node0 wallet file is loaded on longest sync'ed node1\n         self.stop_node(1)\n         self.nodes[0].backupwallet(os.path.join(self.nodes[0].datadir, 'wallet.bak'))\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallet.dat'))\n+        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, self.default_wallet_name, self.wallet_data_filename))\n         self.start_node(1)\n         tx_after_reorg = self.nodes[1].gettransaction(txid)\n         # Check that normal confirmed tx is confirmed again but with different blockhash"
      },
      {
        "sha": "876eb7f29e998f86b72cbc0fc94e836a605185a3",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed3acda33b75d1b546ee696a63def239bcdd62de/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=ed3acda33b75d1b546ee696a63def239bcdd62de",
        "patch": "@@ -156,7 +156,7 @@ def test_send(self, from_wallet, to_wallet=None, amount=None, data=None,\n     def run_test(self):\n         self.log.info(\"Setup wallets...\")\n         # w0 is a wallet with coinbase rewards\n-        w0 = self.nodes[0].get_wallet_rpc(\"\")\n+        w0 = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n         # w1 is a regular wallet\n         self.nodes[1].createwallet(wallet_name=\"w1\")\n         w1 = self.nodes[1].get_wallet_rpc(\"w1\")"
      }
    ]
  },
  {
    "sha": "c1585bca8dae01dee6a1dd8eadae2f8b100503df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTU4NWJjYThkYWUwMWRlZTZhMWRkOGVhZGFlMmY4YjEwMDUwM2Rm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-29T00:24:06Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-09-29T08:35:01Z"
      },
      "message": "test: Get rid of default wallet hacks\n\n- Get rid of hardcoded wallet \"\" names and -wallet=\"\" args\n- Get rid of setup_nodes (-wallet, -nowallet, -disablewallet) argument rewriting\n\nMotivation:\n\n- Simplify test framework behavior so it's easier to write new tests without\n  having arguments mangled by the framework\n- Make tests more readable, replacing unexplained \"\" string literals with\n  default_wallet_name references\n- Make it trivial to update default wallet name and wallet data filename for\n  sqlite #19077 testing\n- Stop relying on -wallet arguments to create wallets, so it is easy to change\n  -wallet option in the future to only load existing wallets not create new\n  ones (to avoid accidental wallet creation, and encourage use of wallet\n  encryption and descriptor features)",
      "tree": {
        "sha": "d361e4c330412af6f2a6356787da4030c5553e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d361e4c330412af6f2a6356787da4030c5553e51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1585bca8dae01dee6a1dd8eadae2f8b100503df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1585bca8dae01dee6a1dd8eadae2f8b100503df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1585bca8dae01dee6a1dd8eadae2f8b100503df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1585bca8dae01dee6a1dd8eadae2f8b100503df/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed3acda33b75d1b546ee696a63def239bcdd62de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed3acda33b75d1b546ee696a63def239bcdd62de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed3acda33b75d1b546ee696a63def239bcdd62de"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 57,
      "deletions": 57
    },
    "files": [
      {
        "sha": "21776d85c9d50765a533386918247b6ce1f9fdd2",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -36,13 +36,14 @@ def set_test_params(self):\n         self.num_nodes = 6\n         # Add new version after each release:\n         self.extra_args = [\n-            [\"-addresstype=bech32\", \"-wallet=\"], # Pre-release: use to mine blocks\n+            [\"-addresstype=bech32\"], # Pre-release: use to mine blocks\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # Pre-release: use to receive coins, swap wallets, etc\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.19.1\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.18.1\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\"], # v0.17.2\n             [\"-nowallet\", \"-walletrbf=1\", \"-addresstype=bech32\", \"-wallet=wallet.dat\"], # v0.16.3\n         ]\n+        self.wallet_names = [self.default_wallet_name]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -59,6 +60,7 @@ def setup_nodes(self):\n         ])\n \n         self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):\n         self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())"
      },
      {
        "sha": "7769d3836b87446026f383e95c82604025bd218a",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -14,6 +14,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.supports_cli = False\n+        self.wallet_names = []\n \n     def test_config_file_parser(self):\n         # Assume node is stopped"
      },
      {
        "sha": "7a2e35c0959f0267db9d8622a284a6fdbb2b3f67",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -56,7 +56,7 @@ def set_test_params(self):\n         # Set -maxmempool=0 to turn off mempool memory sharing with dbcache\n         # Set -rpcservertimeout=900 to reduce socket disconnects in this\n         # long-running test\n-        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\", \"-dbbatchsize=200000\", \"-wallet=\"]\n+        self.base_args = [\"-limitdescendantsize=0\", \"-maxmempool=0\", \"-rpcservertimeout=900\", \"-dbbatchsize=200000\"]\n \n         # Set different crash ratios and cache sizes.  Note that not all of\n         # -dbcache goes to the in-memory coins cache.\n@@ -66,7 +66,7 @@ def set_test_params(self):\n \n         # Node3 is a normal node with default args, except will mine full blocks\n         # and non-standard txs (e.g. txs with \"dust\" outputs)\n-        self.node3_args = [\"-blockmaxweight=4000000\", \"-acceptnonstdtxn\", \"-wallet=\"]\n+        self.node3_args = [\"-blockmaxweight=4000000\", \"-acceptnonstdtxn\"]\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "702a1d99953fb2791eee5f83c727cf4dabf3493c",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -145,9 +145,9 @@ def set_test_params(self):\n         # mine non-standard txs (e.g. txs with \"dust\" outputs)\n         # Force fSendTrickle to true (via whitelist.noban)\n         self.extra_args = [\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-wallet=\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\", \"-wallet=\"],\n-            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\", \"-wallet=\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=68000\"],\n+            [\"-acceptnonstdtxn\", \"-whitelist=noban@127.0.0.1\", \"-blockmaxweight=32000\"],\n         ]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "7de9a589be698c5a14bb2006955bffebce213bbe",
        "filename": "test/functional/feature_filelock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_filelock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_filelock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_filelock.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -15,7 +15,7 @@ def set_test_params(self):\n \n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=None)\n-        self.nodes[0].start(['-wallet='])\n+        self.nodes[0].start()\n         self.nodes[0].wait_for_rpc_connection()\n \n     def run_test(self):\n@@ -27,6 +27,7 @@ def run_test(self):\n         self.nodes[1].assert_start_raises_init_error(extra_args=['-datadir={}'.format(self.nodes[0].datadir), '-noserver'], expected_msg=expected_msg)\n \n         if self.is_wallet_compiled():\n+            self.nodes[0].createwallet(self.default_wallet_name)\n             wallet_dir = os.path.join(datadir, 'wallets')\n             self.log.info(\"Check that we can't start a second bitcoind instance using the same wallet\")\n             expected_msg = \"Error: Error initializing wallet database environment\""
      },
      {
        "sha": "5522f2b7c66e08d005df6ce6a9cbac5426952f1b",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -45,8 +45,8 @@ def setup_network(self):\n                             \"-blocknotify=echo > {}\".format(os.path.join(self.blocknotify_dir, '%s'))],\n                            [\"-blockversion=211\",\n                             \"-rescan\",\n-                            \"-wallet={}\".format(self.wallet),\n                             \"-walletnotify=echo > {}\".format(os.path.join(self.walletnotify_dir, notify_outputname('%w', '%s')))]]\n+        self.wallet_names = [self.default_wallet_name, self.wallet]\n         super().setup_network()\n \n     def run_test(self):"
      },
      {
        "sha": "e370e11a3eb3b94a16e2bdda2c84be530bab7afd",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -81,16 +81,16 @@ def set_test_params(self):\n \n         # Create nodes 0 and 1 to mine.\n         # Create node 2 to test pruning.\n-        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\", \"-wallet=\"]\n+        self.full_node_default_args = [\"-maxreceivebuffer=20000\", \"-checkblocks=5\"]\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n         self.extra_args = [\n             self.full_node_default_args,\n             self.full_node_default_args,\n-            [\"-wallet=\", \"-maxreceivebuffer=20000\", \"-prune=550\"],\n-            [\"-wallet=\", \"-maxreceivebuffer=20000\"],\n-            [\"-wallet=\", \"-maxreceivebuffer=20000\"],\n-            [\"-wallet=\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-maxreceivebuffer=20000\"],\n+            [\"-prune=550\"],\n         ]\n         self.rpc_timeout = 120\n \n@@ -112,8 +112,7 @@ def setup_network(self):\n     def setup_nodes(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n-        for n in self.nodes:\n-            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase', rescan=False)\n+        self.import_deterministic_coinbase_privkeys()\n \n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later"
      },
      {
        "sha": "3705caf4ffe6c3c11c0eeea245db6530ae53a14b",
        "filename": "test/functional/feature_settings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_settings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/feature_settings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_settings.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -17,6 +17,7 @@ class SettingsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.wallet_names = []\n \n     def run_test(self):\n         node, = self.nodes"
      },
      {
        "sha": "7168cb4ab2c57722537d7771ae18912308d3adc3",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -21,6 +21,7 @@\n class MempoolCompatibilityTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n+        self.wallet_names = [None, self.default_wallet_name]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -31,7 +32,7 @@ def setup_network(self):\n             150200, # oldest version supported by the test framework\n             None,\n         ])\n-        self.start_nodes([[], [\"-wallet=\"]])\n+        self.start_nodes()\n         self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):"
      },
      {
        "sha": "ea064f97636204da85e6c082403fdd90515049b1",
        "filename": "test/functional/rpc_getdescriptorinfo.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/rpc_getdescriptorinfo.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/rpc_getdescriptorinfo.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getdescriptorinfo.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -17,6 +17,7 @@ class DescriptorTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]\n+        self.wallet_names = []\n \n     def test_desc(self, desc, isrange, issolvable, hasprivatekeys):\n         info = self.nodes[0].getdescriptorinfo(desc)"
      },
      {
        "sha": "2824d804347acc34770d531f714eac31d148d95c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 14,
        "deletions": 21,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -102,10 +102,16 @@ def __init__(self):\n         self.rpc_timeout = 60  # Wait for up to 60 seconds for the RPC server to respond\n         self.supports_cli = True\n         self.bind_to_localhost_only = True\n+        self.parse_args()\n         self.default_wallet_name = \"\"\n         self.wallet_data_filename = \"wallet.dat\"\n+        # Optional list of wallet names that can be set in set_test_params to\n+        # create and import keys to. If unset, default is len(nodes) *\n+        # [default_wallet_name]. If wallet names are None, wallet creation is\n+        # skipped. If list is truncated, wallet creation is skipped and keys\n+        # are not imported.\n+        self.wallet_names = None\n         self.set_test_params()\n-        self.parse_args()\n         if self.options.timeout_factor == 0 :\n             self.options.timeout_factor = 99999\n         self.rpc_timeout = int(self.rpc_timeout * self.options.timeout_factor) # optionally, increase timeout by a factor\n@@ -364,23 +370,12 @@ def setup_network(self):\n     def setup_nodes(self):\n         \"\"\"Override this method to customize test node setup\"\"\"\n         extra_args = [[]] * self.num_nodes\n-        wallets = [[]] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-            wallets = [[x for x in eargs if x.startswith('-wallet=')] for eargs in extra_args]\n-        extra_args = [x + ['-nowallet'] for x in extra_args]\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n-        for i, n in enumerate(self.nodes):\n-            n.extra_args.pop()\n-            if '-wallet=0' in n.extra_args or '-nowallet' in n.extra_args or '-disablewallet' in n.extra_args or not self.is_wallet_compiled():\n-                continue\n-            if '-wallet=' not in wallets[i] and not any([x.startswith('-wallet=') for x in wallets[i]]):\n-                wallets[i].append('-wallet=')\n-            for w in wallets[i]:\n-                wallet_name = w.split('=', 1)[1]\n-                n.createwallet(wallet_name=wallet_name, descriptors=self.options.descriptors)\n-        self.import_deterministic_coinbase_privkeys()\n+        if self.is_wallet_compiled():\n+            self.import_deterministic_coinbase_privkeys()\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n                 assert_equal(n.getblockchaininfo()[\"blocks\"], 199)\n@@ -396,13 +391,11 @@ def setup_nodes(self):\n                 assert_equal(chain_info[\"initialblockdownload\"], False)\n \n     def import_deterministic_coinbase_privkeys(self):\n-        for n in self.nodes:\n-            try:\n-                n.getwalletinfo()\n-            except JSONRPCException as e:\n-                assert str(e).startswith('Method not found')\n-                continue\n-\n+        wallet_names = [self.default_wallet_name] * len(self.nodes) if self.wallet_names is None else self.wallet_names\n+        assert len(wallet_names) <= len(self.nodes)\n+        for wallet_name, n in zip(wallet_names, self.nodes):\n+            if wallet_name is not None:\n+                n.createwallet(wallet_name=wallet_name, descriptors=self.options.descriptors, load_on_startup=True)\n             n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n \n     def run_test(self):"
      },
      {
        "sha": "3f25c58851ee3bc4313b9cda10b78d7feb7b1384",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -73,7 +73,7 @@ def test_invalid_tool_commands_and_args(self):\n         locked_dir = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\")\n         self.assert_raises_tool_error(\n             'Error initializing wallet database environment \"{}\"!'.format(locked_dir),\n-            '-wallet=wallet.dat',\n+            '-wallet=' + self.default_wallet_name,\n             'info',\n         )\n         path = os.path.join(self.options.tmpdir, \"node0\", \"regtest\", \"wallets\", \"nonexistent.dat\")\n@@ -104,7 +104,7 @@ def test_tool_wallet_info(self):\n             Transactions: 0\n             Address Book: 3\n         ''')\n-        self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+        self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         timestamp_after = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n         self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n@@ -143,7 +143,7 @@ def test_tool_wallet_info_after_transaction(self):\n             Transactions: 1\n             Address Book: 3\n         ''')\n-        self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+        self.assert_tool_output(out, '-wallet=' + self.default_wallet_name, 'info')\n         shasum_after = self.wallet_shasum()\n         timestamp_after = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n@@ -181,7 +181,7 @@ def test_tool_wallet_create_on_existing_wallet(self):\n \n     def test_getwalletinfo_on_different_wallet(self):\n         self.log.info('Starting node with arg -wallet=foo')\n-        self.start_node(0, ['-wallet=foo'])\n+        self.start_node(0, ['-nowallet', '-wallet=foo'])\n \n         self.log.info('Calling getwalletinfo on a different wallet (\"foo\"), testing output')\n         shasum_before = self.wallet_shasum()"
      },
      {
        "sha": "36049dcb455d7fb1779b6dfaf37b476979c5b78b",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -50,10 +50,10 @@ def set_test_params(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         # whitelist all peers to speed up tx relay / mempool sync\n         self.extra_args = [\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n-            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\", \"-wallet=\"],\n-            [\"-whitelist=noban@127.0.0.1\", \"-wallet=\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n+            [\"-whitelist=noban@127.0.0.1\", \"-keypool=100\"],\n+            [\"-whitelist=noban@127.0.0.1\"],\n         ]\n         self.rpc_timeout = 120\n "
      },
      {
        "sha": "c2b30fb35b629018f68d7fbbe69817e8d464066d",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -16,6 +16,7 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]\n+        self.wallet_names = []\n \n     def run_test (self):\n         # Make sure wallet is really disabled"
      },
      {
        "sha": "9d532742ee14268dcb73cf25ca10ce1850980999",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -151,17 +151,16 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def setup_network(self):\n-        self.extra_args = [[\"-wallet=\"] for _ in range(self.num_nodes)]\n+        self.extra_args = [[] for _ in range(self.num_nodes)]\n         for i, import_node in enumerate(IMPORT_NODES, 2):\n             if import_node.prune:\n                 self.extra_args[i] += [\"-prune=1\"]\n \n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n \n         # Import keys with pruning disabled\n-        self.start_nodes(extra_args=[[\"-wallet=\"]] * self.num_nodes)\n-        for n in self.nodes:\n-            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n+        self.start_nodes(extra_args=[[]] * self.num_nodes)\n+        self.import_deterministic_coinbase_privkeys()\n         self.stop_nodes()\n \n         self.start_nodes()"
      },
      {
        "sha": "155a3be7e26a61218743c70cec6532662b598368",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -41,7 +41,6 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.rpc_timeout = 120\n-        self.extra_args = [[\"-wallet=\"], [\"-wallet=\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -81,7 +80,7 @@ def wallet_file(name):\n         os.rename(wallet_dir(self.default_wallet_name, self.wallet_data_filename), wallet_dir(\"w8\"))\n \n         # create another dummy wallet for use in testing backups later\n-        self.start_node(0, [\"-wallet=\" + self.default_wallet_name])\n+        self.start_node(0, [\"-nowallet\", \"-wallet=\" + self.default_wallet_name])\n         self.stop_nodes()\n         empty_wallet = os.path.join(self.options.tmpdir, 'empty.dat')\n         os.rename(wallet_dir(self.default_wallet_name, self.wallet_data_filename), empty_wallet)\n@@ -95,7 +94,7 @@ def wallet_file(name):\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', self.default_wallet_name]\n-        extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n+        extra_args = ['-nowallet'] + ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n         assert_equal(sorted(map(lambda w: w['name'], self.nodes[0].listwalletdir()['wallets'])), [self.default_wallet_name, os.path.join('sub', 'w5'), 'w', 'w1', 'w2', 'w3', 'w7', 'w7_symlink', 'w8'])\n \n@@ -108,7 +107,7 @@ def wallet_file(name):\n \n         # should not initialize if wallet path can't be created\n         exp_stderr = \"boost::filesystem::create_directory:\"\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n+        self.nodes[0].assert_start_raises_init_error(['-wallet=w8/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n@@ -136,22 +135,22 @@ def wallet_file(name):\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)\n-        self.start_node(0, ['-wallet=w4', '-wallet=w5'])\n+        self.start_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5'])\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         node.generatetoaddress(nblocks=1, address=w5.getnewaddress())\n \n         # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n         os.rename(wallet_dir2, wallet_dir())\n-        self.restart_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n+        self.restart_node(0, ['-nowallet', '-wallet=w4', '-wallet=w5', '-walletdir=' + data_dir()])\n         assert_equal(set(node.listwallets()), {\"w4\", \"w5\"})\n         w5 = wallet(\"w5\")\n         w5_info = w5.getwalletinfo()\n         assert_equal(w5_info['immature_balance'], 50)\n \n         competing_wallet_dir = os.path.join(self.options.tmpdir, 'competing_walletdir')\n         os.mkdir(competing_wallet_dir)\n-        self.restart_node(0, ['-walletdir=' + competing_wallet_dir, '-wallet='])\n+        self.restart_node(0, ['-walletdir=' + competing_wallet_dir])\n         exp_stderr = r\"Error: Error initializing wallet database environment \\\"\\S+competing_walletdir\\\"!\"\n         self.nodes[1].assert_start_raises_init_error(['-walletdir=' + competing_wallet_dir], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n "
      },
      {
        "sha": "446a601aeea8b2f4e1a315bcd8f950a2af3d121b",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1585bca8dae01dee6a1dd8eadae2f8b100503df/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=c1585bca8dae01dee6a1dd8eadae2f8b100503df",
        "patch": "@@ -27,10 +27,11 @@ def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [\n-            [\"-addresstype=bech32\", \"-wallet=\"], # current wallet version\n+            [\"-addresstype=bech32\"], # current wallet version\n             [\"-usehd=1\"],            # v0.16.3 wallet\n             [\"-usehd=0\"]             # v0.15.2 wallet\n         ]\n+        self.wallet_names = [self.default_wallet_name, None, None]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -46,6 +47,7 @@ def setup_nodes(self):\n             150200,\n         ])\n         self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n \n     def dumb_sync_blocks(self):\n         \"\"\""
      }
    ]
  }
]