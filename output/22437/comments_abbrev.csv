jonatack,2021-07-13 13:46:33,"Test output after these changes.  The slow legacy multisig tests are placed at the end.\n\n```\n$ test/functional/rpc_rawtransaction.py \n2021-08-31T20:07:10.312000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_uf3csrh5\n2021-08-31T20:07:11.886000Z TestFramework (INFO): Prepare some coins for multiple *rawtransaction commands\n2021-08-31T20:07:20.276000Z TestFrame",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879102807,879102807,
DrahtBot,2021-07-13 19:10:45,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22788](https://github.com/bitcoin/bitcoin/pull/22788) (scripted-diff: Use generate* from TestFramework by MarcoFalke)\n*",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879332860,879332860,
mjdietzx,2021-07-14 19:46:06,ACK 993189b1fe39cfc29e960ea3a20092309001fa8f very nicely done!,https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880161748,880161748,
jonatack,2021-07-15 08:20:30,"Thanks @mjdietzx!  Rebased to master following the merge of #22447, dropping the first two commits; no other change.\n\n`git range-diff 97153a7 993189b d27edf1`",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880497872,880497872,
practicalswift,2021-07-24 20:04:50,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-886105206,886105206,
jonatack,2021-08-08 15:29:29,"Rebased due to #22510 and updated with the excellent review feedback from @kiminuo and @rajarshimaitra (thanks!) \n\nCommit-by-commit changes (re-pushed a second time for https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854):\n\n`git range-diff db94d74 d27edf1 7f7e64e`\n\nThank you @mjdietzx, @lsilva01, and @rajarshimaitra for the ACKs. Would you mind re-ACKing?\n  ",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894813926,894813926,
jonatack,2021-08-08 17:13:25,"@rajarshimaitra I agree, bringing together the various related tests shows that we can simplify them. I'll look at integrating the following diff based on your suggestion, which works for me, into the changes. \n\n<details><summary>code diff</summary><p>\n\n\n```diff\ndiff --git a/test/functional/rpc_rawtransaction.py b/test/functional/rpc_rawtransaction.py\nindex 84210d3a03..cc6324d9fc 100",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894827564,894827564,
jonatack,2021-08-08 18:11:48,"@rajarshimaitra I've appended a commit with you as the author.  Let me know if the name and email `codeShark149 <rajarshi149@gmail.com>` are correct.\n",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894834554,894834554,
fanquake,2021-08-09 07:14:17,"It could be a good to reorder some of these commits so we're not making one change, then changing the same lines again straight after. For example, in https://github.com/bitcoin/bitcoin/pull/22437/commits/10a3db049ce2858b4885472314567d05d6cc75cb you rename variables i.e `tx`, `txId` to `txid2`, `txid3` etc. However in the following commit (https://github.com/bitcoin/bitcoin/pull/22437/commits/c2d7",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895003637,895003637,
jonatack,2021-08-09 10:00:12,"@fanquake yes, that's better. Reordered the last three commits and reduced the diff slightly in others.",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895096970,895096970,
rajarshimaitra,2021-08-09 17:32:45,"tACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\n\n> @rajarshimaitra I've appended a commit with you as the author. Let me know if the name and email codeShark149 <rajarshi149@gmail.com> are correct.\n\nThat seems correct. That's very generous of you. You did the work, i just pointed fingers. \n\n>At first glance I don't see a straightforwa",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895407401,895407401,
josibake,2021-08-20 09:47:46,"ACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\n\ncode review (tons of great suggestions from others, so nothing for me to add), compiled and ran the tests locally, switched the `-txindex` nodes to non-txindex and vice-versa to verify tests failed as expected.\n\noverall, major kudos on the refactor. grouping the tests into functions made thi",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-902574278,902574278,
jonatack,2021-08-24 08:42:23,Thanks everyone for the reviews! It would be nice for this to be merged before any other change touching this file invalidates all the review. One can hope :),https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-904445717,904445717,
jonatack,2021-08-31 14:32:12,"Dropped the commits after d426cab86c1b, no other change to not invalidate review.  Can continue with the other improvements (test de-duplication, in-mempool txn tests, setup simplification, variable naming cleanup, and others) in a follow-up.",https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909293640,909293640,
jonatack,2021-08-31 19:47:43,Squashed the first two commits per review feedback and made some minor improvements per `git diff d426cab 387355b`.,https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909560320,909560320,
mjdietzx,2021-08-31 20:52:08,reACK 387355bb9482a09c1fc9b137bea56745a93b7dfd,https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909627060,909627060,
josibake,2021-09-01 06:31:24,reACK https://github.com/bitcoin/bitcoin/pull/22437/commits/387355bb9482a09c1fc9b137bea56745a93b7dfd,https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909949154,909949154,
kiminuo,2021-07-20 20:42:39,"Maybe:\n\n```suggestion\n            # 2. invalid parameters - supply txid and string ""Flase"" (intentionally misspelled ""False"").\n```\n\n?",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039,673478039,test/functional/rpc_rawtransaction.py
kiminuo,2021-07-20 20:47:42,This is suspicious to me. Isn't this always true given that `gottx` is in hex?,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308,673481308,test/functional/rpc_rawtransaction.py
kiminuo,2021-07-20 21:01:05,"Question: Is this intentionally only on 4 nodes instead of 6? If it is, maybe `sync_peers` should be called slightly differently not to give the wrong impression.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146,673490146,test/functional/rpc_rawtransaction.py
kiminuo,2021-07-20 21:11:19,"Not originally your code, but variables named `txid` and `txId` are very easy to confuse, I think.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593,673496593,test/functional/rpc_rawtransaction.py
kiminuo,2021-07-20 21:14:44,I would expect `txId` instead of `txid` here. Or can you explain this please?,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569,673498569,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-07-23 14:38:02,Is it necessary here to have `node[2]` create 1 block first? ,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674,675615674,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-07-23 14:52:33,"+1. Maybe something like `txid1`, `txid2`? ",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356,675626356,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-07-23 14:56:01,This doesn't seem like `getrawtransaction()` tests. Maybe test `5` and `6` should be moved into `createrawtransaction()` test group? ,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014,675629014,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-07-23 15:00:56,"I am not sure whether having two `txid` and `txId` transactions helps here, given both of them are confirmed. Because of that we are also not getting a test for only `mempool` transactions.\n\nSo maybe we can have a `txid` confirmed in a block, and then have `txId` in the mempool to check for both the scenario?\n\nWill make the purpose of two transactions clear.\n\nAlso, the names are confus",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466,675632466,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 15:37:26,"> Question: Is this intentionally only on 4 nodes instead of 6?\n\nYes, as only nodes 0 to 3 have a mempool. The last two nodes are -blocksonly and `sync_mempools()` won't work on them.  Added a comment in efe13c3b77 to clarify this.\n\n```diff\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool\n```\n",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398,684646398,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 15:52:41,"I agree that it's unclear. Changed to the following in b0bf8c996034a4:\n```diff\n-            # 6. invalid parameters - supply txid and string ""Flase""\n-            assert_raises_rpc_error(-1, ""not a boolean"", self.nodes[n].getrawtransaction, txId, ""Flase"")\n+            # 6. invalid parameters - supply txid and invalid boolean values (strings) for verbose\n+            for value in [""True"", ",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106,684648106,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 16:40:38,"Good catch! This illustrates why using `txid` and `txId` variable names in the same test isn't ideal. Fixed in commit ""Test src/validation::GetTransaction() with -blocksonly"".",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116,684653116,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 19:24:10,Good idea! Done in a3d8f790633b89a.,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654,684668654,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 19:29:25,"I initially planned to respond that this was out of scope, then saw this very issue had tripped me up (https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116). Agree! Done in 10a3db049ce2858 when the name is reused or reassigned in the same test function. Doing this also revealed an unused `txId` assignment; fixed.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101,684669101,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 20:02:06,"Well spotted! Thanks to the transactions in the next lines, it's not needed and might be an example of the accumulated layers of change in this test file. Removed in commit 8f5c6ba69000b  with an explanation in the commit message.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025,684672025,test/functional/rpc_rawtransaction.py
jonatack,2021-08-07 21:32:39,"Interesting.  We use and need all three transactions, AFAICT.  Updated the names in the last commit to txid, txid2, and txid3.  The test still passes if we sync_blocks() for the second and third transactions instead of sync_all(), but I'd rather not mess with this here.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006,684680006,test/functional/rpc_rawtransaction.py
jonatack,2021-08-08 10:31:17,"Took a fresh look this morning, good call!  The first conditional in `CTransactionRef GetTransaction()` was not necessarily being exercised by the tests:\n```c++\n    if (mempool && !block_index) {\n        CTransactionRef ptx = mempool->get(hash);\n        if (ptx) return ptx;\n    }\n```\nAdded this assert in 7f7e64e30376a2 that covers it:\n```python\n             # 1. valid parameters ",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491,684752491,test/functional/rpc_rawtransaction.py
jonatack,2021-08-08 10:57:45,This assert tests that the `in_active_chain` field is absent as expected when the blockhash argument is not passed...see `src/rpc/rawtransaction.cpp::getrawtransaction()` or `bitcoin-cli help getrawtransaction`,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680,684755680,test/functional/rpc_rawtransaction.py
kiminuo,2021-08-08 12:38:15,"Just to make myself more clear: L140 ends with `['hex']` so presumably `gottx` is a string, so testing on L142 whether `gottx` does not contain `in_active_chain` seems to be always true.\n\nBut maybe I just didn't get your reply. Anyway, if I got it wrong, feel free to just ignore my comment.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854,684768854,test/functional/rpc_rawtransaction.py
rajarshimaitra,2021-08-08 14:38:54,It seems to me that `sync_peers()` is not doing anything and all the nodes get the blocks with `generate()`. This is probably because `generate()` already broadcasts the blocks in p2p. ,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050,684785050,test/functional/rpc_rawtransaction.py
jonatack,2021-08-08 15:39:53,Thank you for re-explaining. You are right! Fixing. Thank you!,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766,684792766,test/functional/rpc_rawtransaction.py
jonatack,2021-08-08 16:33:41,Updated commit 4e83843f03dad710a0fad7a706e2618a7a69a6b3 to fix. Thanks @kiminuo!,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515,684799515,test/functional/rpc_rawtransaction.py
jonatack,2021-08-08 18:07:28,Done,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613,684809613,test/functional/rpc_rawtransaction.py
jonatack,2021-08-09 10:04:25,"Moving the in-mempool transaction tests commit after the simplification commit revealed that removing the `self.sync_peers()` would be flakey without the presence of the in-mempool transaction. This could be fragile, so no longer removing it in the simplification commit.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629,685064629,test/functional/rpc_rawtransaction.py
Zero-1729,2021-08-21 10:52:44,What's the reason for having this as a variable instead of passing the literal to `assert_raises_rpc_error` as an arg?,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693339474,693339474,test/functional/rpc_rawtransaction.py
jonatack,2021-08-21 15:47:19,"This variable is invoked twice below in this test, so it clarifies that we check for the same message and also allows reducing the line length to under 120; previously for instance, both lines did not fit in the GitHub display without scrolling (and scrolling is an annoyance with a file or diff of this length, as you have to navigate to the bottom, scroll, then navigate back to the lines).",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693369747,693369747,test/functional/rpc_rawtransaction.py
Zero-1729,2021-08-21 16:44:36,Thanks for clarifying!,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693375931,693375931,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 14:21:57,in c7327a6e90: Why is this test removed and re-added in the next commit? I think it would be easier to review if it was kept.,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696680563,696680563,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 14:22:40,"c7327a6e90: Don't all nodes have txindex, except n=3? At least the extra_args would suggest that.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696681271,696681271,test/functional/rpc_rawtransaction.py
jonatack,2021-08-26 15:02:47,"Yes, kept node 0 as it was already in use for the -txindex case, and added node 3 to test without -txindex. Didn't seem worth adding iterating through nodes 1 and 2.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696719260,696719260,test/functional/rpc_rawtransaction.py
jonatack,2021-08-26 15:08:13,Probably a rebase oversight during the various changes.,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696724187,696724187,test/functional/rpc_rawtransaction.py
jonatack,2021-08-26 15:18:50,"(this does indeed work:)\n```diff\n-        for n in [0, 3, 4, 5]:\n+        for n in range(self.num_nodes):\n             self.log.info(\n-                f""Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,""\n+                f""Test getrawtransaction {'with' if n <= 2 or n == 5 else 'without'} -txindex,""\n                 f"" {'with' if n >= 4 else 'without'} -blo",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696733591,696733591,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 15:20:10,No need to change. I missed that this was only picking two nodes.,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696734776,696734776,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 15:26:43,"75d1e4cb14a4bc293a17e516598a1b6b81dcac4a: If you rebase, you can use `self.generate(nodes[node], blocks)`",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696740754,696740754,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 15:28:57,"0e4cb3a4bbbf464376b5cad78e83328444bdcf71: The forth node has a mempool, too?",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696742847,696742847,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 15:34:50,"How does -blocksonly even affect the test, given that all txs are mined into blocks anyway?",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696748144,696748144,test/functional/rpc_rawtransaction.py
jonatack,2021-08-26 15:48:10,"If this line remains `self.sync_mempools()`, the test fails with `AssertionError: Mempool sync timed out`.\n\nThe last commit adds an in-mempool tx.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696760147,696760147,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 15:54:36,"> The last commit adds an in-mempool tx.\n\nThe first tx will be mined into a block immediately after. The second test isn't run on the -blocksonly nodes, unless I am missing something.\n\n\nIn general `-blocksonly` only skips incoming transactions, so anything you can test with the option is also possible by simply querying a txid that doesn't exist at all.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696765819,696765819,test/functional/rpc_rawtransaction.py
jonatack,2021-08-26 16:53:13,"Do you think it would be better coverage to run the in-mempool test on the -blocksonly nodes as well...\n```diff\n@@ -88,7 +88,8 @@ class RawTransactionsTest(BitcoinTestFramework):\n         for amount in [1.5, 1.0, 5.0]:\n             self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), 1)\n+        for n in ",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484,696812484,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-26 17:50:47,"Unless I am missing something, the goal of this test is to cover `GetTransaction`, which itself is unaffected by the `blocksonly` option. Thus, there is no need to test this option. (Otherwise, there would also be reason to test with `mocktime`, `minrelaytxfee`, ...)",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696853243,696853243,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 10:10:15,"The -blocksonly nodes allow us to add missing test coverage for rpc getrawtransaction error cases like in my https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484 above. We could maybe pass non-existing txids instead, but it seems better to test actual -blocksonly behavior.\n\nI have a branch to add that coverage and some other improvements, and rather than increase the size of thi",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699179750,699179750,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-31 10:15:43,"> it seems better to test actual -blocksonly behavior.\n\nblocksonly is a network option, so it seems confusing to test it's behaviour inside a raw transaction test.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699183676,699183676,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 10:43:29,"My thought was that -blocksonly effectively disables mempool functionality, which for end-to-end testing relates to how getrawtransaction behaves when a node operator running -blocksonly calls getrawtransaction, which is valid with either txindex and/or passing blockhash if the tx is in a block, so it seems good to have explicit coverage that serves as a regression test and sanity check. Passing a",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699202590,699202590,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-31 11:29:47,"> -blocksonly effectively disables mempool functionality\n\nThe behaviour of the mempool module isn't affected by blocksonly at all. (All txs that are submitted to the mempool are added/rejected in the same way regardless of blocksonly.) blocksonly is purely a net-processing option to disable *incoming* tx relay from network peers. It doesn't affect (in)validity of txs submitted to the mempool. ",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699232209,699232209,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 11:45:17,"I agree from a unit test point of view, but for end-to-end testing these interactions can be good to test. For example, I think I've found a parameter interaction that doesn't work as documented (not sure yet, need to look further). That seems like good coverage to have if someone proposes it, it is reviewed, and ready to use.  The asmap/addrman interaction is another example.  What to do here?  L",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699242734,699242734,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-31 11:56:44,"> The asmap/addrman interaction is another example\n\nI think asmap is part of the addrman module, so testing those together in a test makes sense.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699250588,699250588,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 14:13:23,"> [75d1e4c](https://github.com/bitcoin/bitcoin/commit/75d1e4cb14a4bc293a17e516598a1b6b81dcac4a): If you rebase, you can use `self.generate(nodes[node], blocks)`\n\nThanks. Dropped the commit.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699366246,699366246,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-31 17:38:12,Not addressed in the latest force push? The first two commits aren't squashed?,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699541053,699541053,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 18:06:50,"Thanks for having a look. Didn't change any commits, only dropped the last ones to ~preserve the previous review ACKs.",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699561025,699561025,test/functional/rpc_rawtransaction.py
MarcoFalke,2021-08-31 18:09:47,"reviewing that two commits are squashed should be as easy as checking that other commits are dropped, no?",https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699563008,699563008,test/functional/rpc_rawtransaction.py
jaysonmald35,2021-08-31 18:16:35,Thank u,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699567400,699567400,test/functional/rpc_rawtransaction.py
jonatack,2021-08-31 19:42:57,squashed,https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699622319,699622319,test/functional/rpc_rawtransaction.py
