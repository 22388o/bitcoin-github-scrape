[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879102807",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879102807",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 879102807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTEwMjgwNw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T13:46:33Z",
    "updated_at": "2021-08-31T20:11:18Z",
    "author_association": "MEMBER",
    "body": "Test output after these changes.  The slow legacy multisig tests are placed at the end.\r\n\r\n```\r\n$ test/functional/rpc_rawtransaction.py \r\n2021-08-31T20:07:10.312000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_uf3csrh5\r\n2021-08-31T20:07:11.886000Z TestFramework (INFO): Prepare some coins for multiple *rawtransaction commands\r\n2021-08-31T20:07:20.276000Z TestFramework (INFO): Test getrawtransaction with -txindex\r\n2021-08-31T20:07:20.306000Z TestFramework (INFO): Test getrawtransaction without -txindex\r\n2021-08-31T20:07:21.601000Z TestFramework (INFO): Test getrawtransaction with -txindex, with blockhash\r\n2021-08-31T20:07:21.605000Z TestFramework (INFO): Test getrawtransaction with -txindex, without blockhash: 'in_active_chain' should be absent\r\n2021-08-31T20:07:21.655000Z TestFramework (INFO): Test getrawtransaction without -txindex, with blockhash\r\n2021-08-31T20:07:21.659000Z TestFramework (INFO): Test getrawtransaction without -txindex, without blockhash: expect the call to raise\r\n2021-08-31T20:07:21.704000Z TestFramework (INFO): Test getrawtransaction on genesis block coinbase returns an error\r\n2021-08-31T20:07:21.712000Z TestFramework (INFO): Test createrawtransaction\r\n2021-08-31T20:07:21.944000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (bech32)\r\n2021-08-31T20:07:22.021000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (p2sh-segwit)\r\n2021-08-31T20:07:22.106000Z TestFramework (INFO): Test signrawtransactionwithwallet with missing prevtx info (legacy)\r\n2021-08-31T20:07:22.175000Z TestFramework (INFO): Test sendrawtransaction with missing input\r\n2021-08-31T20:07:22.205000Z TestFramework (INFO): Test sendrawtransaction/testmempoolaccept with maxfeerate\r\n2021-08-31T20:07:23.777000Z TestFramework (INFO): Test sendrawtransaction/testmempoolaccept with tx already in the chain\r\n2021-08-31T20:07:23.858000Z TestFramework (INFO): Test decoderawtransaction\r\n2021-08-31T20:07:23.886000Z TestFramework (INFO): Test transaction version numbers\r\n2021-08-31T20:07:23.894000Z TestFramework (INFO): Test raw multisig transactions (legacy)\r\n2021-08-31T20:07:30.595000Z TestFramework (INFO): Stopping nodes\r\n2021-08-31T20:07:30.858000Z TestFramework (INFO): Cleaning up /tmp/bitcoin_func_test_uf3csrh5 on exit\r\n2021-08-31T20:07:30.858000Z TestFramework (INFO): Tests successful\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879102807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879332860",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-879332860",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 879332860,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg3OTMzMjg2MA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-13T19:10:45Z",
    "updated_at": "2021-08-27T16:09:35Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22788](https://github.com/bitcoin/bitcoin/pull/22788) (scripted-diff: Use generate* from TestFramework by MarcoFalke)\n* [#19831](https://github.com/bitcoin/bitcoin/pull/19831) (test: Check that decoderawtransaction heuristic may fail by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879332860/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880161748",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880161748",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 880161748,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDE2MTc0OA==",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T19:46:06Z",
    "updated_at": "2021-07-14T19:46:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 993189b1fe39cfc29e960ea3a20092309001fa8f very nicely done!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880161748/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880497872",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-880497872",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 880497872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDQ5Nzg3Mg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-15T08:20:30Z",
    "updated_at": "2021-07-15T08:20:30Z",
    "author_association": "MEMBER",
    "body": "Thanks @mjdietzx!  Rebased to master following the merge of #22447, dropping the first two commits; no other change.\r\n\r\n`git range-diff 97153a7 993189b d27edf1`",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880497872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886105206",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-886105206",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 886105206,
    "node_id": "IC_kwDOABII58400OR2",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-24T20:04:50Z",
    "updated_at": "2021-07-24T20:04:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886105206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894813926",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894813926",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 894813926,
    "node_id": "IC_kwDOABII5841Vcbm",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-08T15:29:29Z",
    "updated_at": "2021-08-08T16:49:44Z",
    "author_association": "MEMBER",
    "body": "Rebased due to #22510 and updated with the excellent review feedback from @kiminuo and @rajarshimaitra (thanks!) \r\n\r\nCommit-by-commit changes (re-pushed a second time for https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854):\r\n\r\n`git range-diff db94d74 d27edf1 7f7e64e`\r\n\r\nThank you @mjdietzx, @lsilva01, and @rajarshimaitra for the ACKs. Would you mind re-ACKing?\r\n  ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894813926/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894827564",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894827564",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 894827564,
    "node_id": "IC_kwDOABII5841Vfws",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-08T17:13:25Z",
    "updated_at": "2021-08-09T08:20:25Z",
    "author_association": "MEMBER",
    "body": "@rajarshimaitra I agree, bringing together the various related tests shows that we can simplify them. I'll look at integrating the following diff based on your suggestion, which works for me, into the changes. \r\n\r\n<details><summary>code diff</summary><p>\r\n\r\n\r\n```diff\r\ndiff --git a/test/functional/rpc_rawtransaction.py b/test/functional/rpc_rawtransaction.py\r\nindex 84210d3a03..cc6324d9fc 100755\r\n--- a/test/functional/rpc_rawtransaction.py\r\n+++ b/test/functional/rpc_rawtransaction.py\r\n@@ -101,19 +101,9 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             self.raw_multisig_transaction_legacy_tests()\r\n \r\n     def getrawtransaction_tests(self):\r\n-        addr = self.nodes[1].getnewaddress()\r\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\r\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\r\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\r\n-        txid2 = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\r\n-        self.generate_and_sync(node=0, blocks=1)\r\n-\r\n         # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\r\n-        txid3 = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\r\n+        hex = self.nodes[2].getrawtransaction(tx)\r\n         block1, block2 = self.nodes[2].generate(2)\r\n-        self.sync_peers()\r\n \r\n         err_msg = (\r\n             \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\r\n@@ -134,47 +124,44 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             if n == 0 or n == 5:\r\n                 # with -txindex\r\n                 for verbose in [None, 0, False]:\r\n-                    assert_equal(self.nodes[n].getrawtransaction(txid2, verbose), rawTxSigned['hex'])\r\n+                    assert_equal(self.nodes[n].getrawtransaction(tx, verbose), hex)\r\n                 for verbose in [1, True]:\r\n-                    gottx1 = self.nodes[n].getrawtransaction(txid2, verbose)\r\n-                    assert_equal(gottx1['hex'], rawTxSigned['hex'])\r\n-                    assert 'in_active_chain' not in gottx1.keys()\r\n-                    gottx2 = self.nodes[n].getrawtransaction(txid=txid3, verbose=verbose)\r\n-                    assert_equal(gottx2['txid'], txid3)\r\n-                    assert 'in_active_chain' not in gottx2.keys()\r\n+                    gottx = self.nodes[n].getrawtransaction(tx, verbose)\r\n+                    assert_equal(gottx['hex'], hex)\r\n+                    assert 'in_active_chain' not in gottx.keys()\r\n             else:\r\n                 # without -txindex\r\n                 for verbose in [None, 0, False, 1, True]:\r\n-                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid2, verbose)\r\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, tx, verbose)\r\n \r\n             # 2. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n             for value in [\"True\", \"False\"]:\r\n-                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txid2, verbose=value)\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=tx, verbose=value)\r\n \r\n             # 3. invalid parameters - supply txid and empty array\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, [])\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, [])\r\n \r\n             # 4. invalid parameters - supply txid and empty dict\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid2, {})\r\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, tx, {})\r\n \r\n             # 5. with block hash\r\n             # We should be able to get the raw transaction by providing the correct block\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n-            assert_equal(gottx['txid'], txid3)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n+            assert_equal(gottx['txid'], tx)\r\n             assert_equal(gottx['in_active_chain'], True)\r\n             # We should not get the tx if we provide an unrelated block\r\n-            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=block2)\r\n+            assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=block2)\r\n             # An invalid block hash should raise the correct errors\r\n-            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=True)\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"foobar\")\r\n-            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=\"abcd1234\")\r\n+            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[n].getrawtransaction, txid=tx, blockhash=True)\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"foobar\")\r\n+            assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=\"abcd1234\")\r\n             foo = \"ZZZ0000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=foo)\r\n+            assert_raises_rpc_error(-8, f\"parameter 3 must be hexadecimal string (not '{foo}')\", self.nodes[n].getrawtransaction, txid=tx, blockhash=foo)\r\n             bar = \"0000000000000000000000000000000000000000000000000000000000000000\"\r\n-            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=txid3, blockhash=bar)\r\n+            assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[n].getrawtransaction, txid=tx, blockhash=bar)\r\n             # Undo the blocks and verify that \"in_active_chain\" is false.\r\n             self.nodes[n].invalidateblock(block1)\r\n-            gottx = self.nodes[n].getrawtransaction(txid=txid3, verbose=True, blockhash=block1)\r\n+            gottx = self.nodes[n].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\r\n             assert_equal(gottx['in_active_chain'], False)\r\n             self.nodes[n].reconsiderblock(block1)\r\n             assert_equal(self.nodes[n].getbestblockhash(), block2)\r\n```\r\n</p></details>\r\n\r\n> It if txindex is on, the blockhash searching won't take place even if it's provided. It seems to me that this particular behaviour is not being tested. I am also not sure what can be a possible approach to test this.\r\n\r\nAt first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894827564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894834554",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-894834554",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 894834554,
    "node_id": "IC_kwDOABII5841Vhd6",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-08T18:11:48Z",
    "updated_at": "2021-08-08T18:11:48Z",
    "author_association": "MEMBER",
    "body": "@rajarshimaitra I've appended a commit with you as the author.  Let me know if the name and email `codeShark149 <rajarshi149@gmail.com>` are correct.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/894834554/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895003637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895003637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 895003637,
    "node_id": "IC_kwDOABII5841WKv1",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?u=a0e0040aacd7d4f0787481e8ac30b494fa429e11&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-09T07:14:17Z",
    "updated_at": "2021-08-09T07:14:17Z",
    "author_association": "MEMBER",
    "body": "It could be a good to reorder some of these commits so we're not making one change, then changing the same lines again straight after. For example, in https://github.com/bitcoin/bitcoin/pull/22437/commits/10a3db049ce2858b4885472314567d05d6cc75cb you rename variables i.e `tx`, `txId` to `txid2`, `txid3` etc. However in the following commit (https://github.com/bitcoin/bitcoin/pull/22437/commits/c2d79955a833aec09ad2f7a064509bcdcdbd1cb0), a bunch of those end up being renamed again, i.e `txid3` and `txid2` back to `tx`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895003637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895096970",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895096970",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 895096970,
    "node_id": "IC_kwDOABII5841WhiK",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-09T10:00:12Z",
    "updated_at": "2021-08-09T10:00:12Z",
    "author_association": "MEMBER",
    "body": "@fanquake yes, that's better. Reordered the last three commits and reduced the diff slightly in others.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895096970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895407401",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-895407401",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 895407401,
    "node_id": "IC_kwDOABII5841XtUp",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?u=3bb306a343c601258749dbbd03dbe66d0e9d82b4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-09T17:32:45Z",
    "updated_at": "2021-08-09T17:32:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "tACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\r\n\r\n> @rajarshimaitra I've appended a commit with you as the author. Let me know if the name and email codeShark149 <rajarshi149@gmail.com> are correct.\r\n\r\nThat seems correct. That's very generous of you. You did the work, i just pointed fingers. \r\n\r\n>At first glance I don't see a straightforward way to test which code path is taken in that case with the current code, as there is no observable difference in behavior other than hopefully in performance, for which a benchmark could be added.\r\n\r\nYes that occurred to me too. There is no observational difference between the two paths. So we won't know which one is taken. Probably something for a future improvement. Maybe all it needs is one debug log in the core logic, and with that we can check in the test.   ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/895407401/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902574278",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-902574278",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 902574278,
    "node_id": "IC_kwDOABII5841zDDG",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-20T09:47:46Z",
    "updated_at": "2021-08-20T09:47:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/22437/commits/f0aacf0a87a67f88018f683092f3b7d16e03e6f1\r\n\r\ncode review (tons of great suggestions from others, so nothing for me to add), compiled and ran the tests locally, switched the `-txindex` nodes to non-txindex and vice-versa to verify tests failed as expected.\r\n\r\noverall, major kudos on the refactor. grouping the tests into functions made this much more readable. also +1 for more test coverage",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/902574278/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904445717",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-904445717",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 904445717,
    "node_id": "IC_kwDOABII58416L8V",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-24T08:42:23Z",
    "updated_at": "2021-08-24T08:42:23Z",
    "author_association": "MEMBER",
    "body": "Thanks everyone for the reviews! It would be nice for this to be merged before any other change touching this file invalidates all the review. One can hope :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/904445717/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909293640",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909293640",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 909293640,
    "node_id": "IC_kwDOABII5842MrhI",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T14:32:12Z",
    "updated_at": "2021-08-31T14:32:12Z",
    "author_association": "MEMBER",
    "body": "Dropped the commits after d426cab86c1b, no other change to not invalidate review.  Can continue with the other improvements (test de-duplication, in-mempool txn tests, setup simplification, variable naming cleanup, and others) in a follow-up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909293640/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909560320",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909560320",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 909560320,
    "node_id": "IC_kwDOABII5842NsoA",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T19:47:43Z",
    "updated_at": "2021-08-31T20:08:02Z",
    "author_association": "MEMBER",
    "body": "Squashed the first two commits per review feedback and made some minor improvements per `git diff d426cab 387355b`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909560320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909627060",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909627060",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 909627060,
    "node_id": "IC_kwDOABII5842N860",
    "user": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?u=6e534b25446a57600514192504756c77c2637aae&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-31T20:52:08Z",
    "updated_at": "2021-08-31T20:52:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "reACK 387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909627060/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909949154",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#issuecomment-909949154",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/22437",
    "id": 909949154,
    "node_id": "IC_kwDOABII5842PLji",
    "user": {
      "login": "josibake",
      "id": 7444140,
      "node_id": "MDQ6VXNlcjc0NDQxNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7444140?u=74b81df8d0edae1756edd0fe8ae7cb458b05b5cd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/josibake",
      "html_url": "https://github.com/josibake",
      "followers_url": "https://api.github.com/users/josibake/followers",
      "following_url": "https://api.github.com/users/josibake/following{/other_user}",
      "gists_url": "https://api.github.com/users/josibake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/josibake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/josibake/subscriptions",
      "organizations_url": "https://api.github.com/users/josibake/orgs",
      "repos_url": "https://api.github.com/users/josibake/repos",
      "events_url": "https://api.github.com/users/josibake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/josibake/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-09-01T06:31:24Z",
    "updated_at": "2021-09-01T06:31:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "reACK https://github.com/bitcoin/bitcoin/pull/22437/commits/387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/909949154/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039",
    "pull_request_review_id": 711046958,
    "id": 673478039,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ3ODAzOQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 118,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe:\r\n\r\n```suggestion\r\n            # 2. invalid parameters - supply txid and string \"Flase\" (intentionally misspelled \"False\").\r\n```\r\n\r\n?",
    "created_at": "2021-07-20T20:42:39Z",
    "updated_at": "2021-07-20T21:02:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673478039"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673478039/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 148,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308",
    "pull_request_review_id": 711046958,
    "id": 673481308,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ4MTMwOA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 112,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is suspicious to me. Isn't this always true given that `gottx` is in hex?",
    "created_at": "2021-07-20T20:47:42Z",
    "updated_at": "2021-07-20T21:02:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673481308"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673481308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146",
    "pull_request_review_id": 711046958,
    "id": 673490146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5MDE0Ng==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 35,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Question: Is this intentionally only on 4 nodes instead of 6? If it is, maybe `sync_peers` should be called slightly differently not to give the wrong impression.",
    "created_at": "2021-07-20T21:01:05Z",
    "updated_at": "2021-07-20T21:02:05Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673490146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673490146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593",
    "pull_request_review_id": 711070104,
    "id": 673496593,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5NjU5Mw==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 79,
    "original_position": 81,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not originally your code, but variables named `txid` and `txId` are very easy to confuse, I think.",
    "created_at": "2021-07-20T21:11:19Z",
    "updated_at": "2021-07-20T21:11:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673496593"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673496593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 105,
    "original_line": 105,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569",
    "pull_request_review_id": 711072535,
    "id": 673498569,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3MzQ5ODU2OQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 116,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would expect `txId` instead of `txid` here. Or can you explain this please?",
    "created_at": "2021-07-20T21:14:44Z",
    "updated_at": "2021-07-20T21:14:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r673498569"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/673498569/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 146,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674",
    "pull_request_review_id": 713795683,
    "id": 675615674,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYxNTY3NA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 58,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it necessary here to have `node[2]` create 1 block first? ",
    "created_at": "2021-07-23T14:38:02Z",
    "updated_at": "2021-07-23T15:09:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675615674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675615674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 88,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356",
    "pull_request_review_id": 713795683,
    "id": 675626356,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyNjM1Ng==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 79,
    "original_position": 81,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "+1. Maybe something like `txid1`, `txid2`? ",
    "created_at": "2021-07-23T14:52:33Z",
    "updated_at": "2021-07-23T15:09:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675626356"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675626356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 105,
    "original_line": 105,
    "side": "RIGHT",
    "in_reply_to_id": 673496593
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014",
    "pull_request_review_id": 713795683,
    "id": 675629014,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYyOTAxNA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 127,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This doesn't seem like `getrawtransaction()` tests. Maybe test `5` and `6` should be moved into `createrawtransaction()` test group? ",
    "created_at": "2021-07-23T14:56:01Z",
    "updated_at": "2021-07-23T15:09:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675629014"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675629014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 157,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466",
    "pull_request_review_id": 713795683,
    "id": 675632466,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY3NTYzMjQ2Ng==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 82,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I am not sure whether having two `txid` and `txId` transactions helps here, given both of them are confirmed. Because of that we are also not getting a test for only `mempool` transactions.\r\n\r\nSo maybe we can have a `txid` confirmed in a block, and then have `txId` in the mempool to check for both the scenario?\r\n\r\nWill make the purpose of two transactions clear.\r\n\r\nAlso, the names are confusing, something more distinct would be helpful.   \r\n\r\n  ",
    "created_at": "2021-07-23T15:00:56Z",
    "updated_at": "2021-07-23T15:09:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r675632466"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/675632466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 111,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398",
    "pull_request_review_id": 724828134,
    "id": 684646398,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0NjM5OA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 35,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Question: Is this intentionally only on 4 nodes instead of 6?\r\n\r\nYes, as only nodes 0 to 3 have a mempool. The last two nodes are -blocksonly and `sync_mempools()` won't work on them.  Added a comment in efe13c3b77 to clarify this.\r\n\r\n```diff\r\n-        self.sync_mempools()\r\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool\r\n```\r\n",
    "created_at": "2021-08-07T15:37:26Z",
    "updated_at": "2021-08-08T16:42:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684646398"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684646398/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 673490146
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106",
    "pull_request_review_id": 724829142,
    "id": 684648106,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY0ODEwNg==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 118,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree that it's unclear. Changed to the following in b0bf8c996034a4:\r\n```diff\r\n-            # 6. invalid parameters - supply txid and string \"Flase\"\r\n-            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\r\n+            # 6. invalid parameters - supply txid and invalid boolean values (strings) for verbose\r\n+            for value in [\"True\", \"False\"]:\r\n+                assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txid=txId, verbose=value)\r\n```\r\n",
    "created_at": "2021-08-07T15:52:41Z",
    "updated_at": "2021-08-08T16:43:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684648106"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684648106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 148,
    "side": "RIGHT",
    "in_reply_to_id": 673478039
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116",
    "pull_request_review_id": 724831986,
    "id": 684653116,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY1MzExNg==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 116,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch! This illustrates why using `txid` and `txId` variable names in the same test isn't ideal. Fixed in commit \"Test src/validation::GetTransaction() with -blocksonly\".",
    "created_at": "2021-08-07T16:40:38Z",
    "updated_at": "2021-08-07T16:40:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684653116/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 146,
    "side": "RIGHT",
    "in_reply_to_id": 673498569
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654",
    "pull_request_review_id": 724841082,
    "id": 684668654,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2ODY1NA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+            else:\n+                # without -txindex\n+                for verbose in [None, 0, False, 1, True]:\n+                    assert_raises_rpc_error(-5, err_msg, self.nodes[n].getrawtransaction, txid, verbose)\n+\n+            # 2. invalid parameters - supply txid and string \"Flase\"\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, \"Flase\")\n+\n+            # 3. invalid parameters - supply txid and empty array\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, [])\n+\n+            # 4. invalid parameters - supply txid and empty dict\n+            assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[n].getrawtransaction, txId, {})\n+\n+            # 5. invalid parameters - sequence out of range",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 127,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good idea! Done in a3d8f790633b89a.",
    "created_at": "2021-08-07T19:24:10Z",
    "updated_at": "2021-08-08T16:46:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684668654"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684668654/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 157,
    "side": "RIGHT",
    "in_reply_to_id": 675629014
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101",
    "pull_request_review_id": 724841291,
    "id": 684669101,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY2OTEwMQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 79,
    "original_position": 81,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I initially planned to respond that this was out of scope, then saw this very issue had tripped me up (https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684653116). Agree! Done in 10a3db049ce2858 when the name is reused or reassigned in the same test function. Doing this also revealed an unused `txId` assignment; fixed.",
    "created_at": "2021-08-07T19:29:25Z",
    "updated_at": "2021-08-08T16:41:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684669101"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684669101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 105,
    "original_line": 105,
    "side": "RIGHT",
    "in_reply_to_id": 673496593
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025",
    "pull_request_review_id": 724842779,
    "id": 684672025,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY3MjAyNQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 58,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Well spotted! Thanks to the transactions in the next lines, it's not needed and might be an example of the accumulated layers of change in this test file. Removed in commit 8f5c6ba69000b  with an explanation in the commit message.",
    "created_at": "2021-08-07T20:02:06Z",
    "updated_at": "2021-08-08T16:45:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684672025"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684672025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 88,
    "side": "RIGHT",
    "in_reply_to_id": 675615674
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006",
    "pull_request_review_id": 724846983,
    "id": 684680006,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDY4MDAwNg==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 82,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Interesting.  We use and need all three transactions, AFAICT.  Updated the names in the last commit to txid, txid2, and txid3.  The test still passes if we sync_blocks() for the second and third transactions instead of sync_all(), but I'd rather not mess with this here.",
    "created_at": "2021-08-07T21:32:39Z",
    "updated_at": "2021-08-07T21:32:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684680006"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684680006/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 675632466
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491",
    "pull_request_review_id": 724886622,
    "id": 684752491,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1MjQ5MQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 82,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Took a fresh look this morning, good call!  The first conditional in `CTransactionRef GetTransaction()` was not necessarily being exercised by the tests:\r\n```c++\r\n    if (mempool && !block_index) {\r\n        CTransactionRef ptx = mempool->get(hash);\r\n        if (ptx) return ptx;\r\n    }\r\n```\r\nAdded this assert in 7f7e64e30376a2 that covers it:\r\n```python\r\n             # 1. valid parameters - supply txid along with various valid values for verbose\r\n+            if n == 0 or n == 3:\r\n+                # test with a tx in mempool, with and without -txindex\r\n+                tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.1)\r\n+                self.nodes[n].getrawtransaction(tx_in_mempool)\r\n```\r\nVerified by removing that code in GetTransaction() to ensure the new assert fails without it and passes with it.",
    "created_at": "2021-08-08T10:31:17Z",
    "updated_at": "2021-08-09T08:21:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684752491"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684752491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 111,
    "side": "RIGHT",
    "in_reply_to_id": 675632466
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680",
    "pull_request_review_id": 724888821,
    "id": 684755680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc1NTY4MA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 112,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This assert tests that the `in_active_chain` field is absent as expected when the blockhash argument is not passed...see `src/rpc/rawtransaction.cpp::getrawtransaction()` or `bitcoin-cli help getrawtransaction`",
    "created_at": "2021-08-08T10:57:45Z",
    "updated_at": "2021-08-08T11:05:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684755680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684755680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT",
    "in_reply_to_id": 673481308
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854",
    "pull_request_review_id": 724898086,
    "id": 684768854,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc2ODg1NA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 112,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just to make myself more clear: L140 ends with `['hex']` so presumably `gottx` is a string, so testing on L142 whether `gottx` does not contain `in_active_chain` seems to be always true.\r\n\r\nBut maybe I just didn't get your reply. Anyway, if I got it wrong, feel free to just ignore my comment.",
    "created_at": "2021-08-08T12:38:15Z",
    "updated_at": "2021-08-08T12:38:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684768854"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684768854/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT",
    "in_reply_to_id": 673481308
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050",
    "pull_request_review_id": 724909753,
    "id": 684785050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc4NTA1MA==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 87,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems to me that `sync_peers()` is not doing anything and all the nodes get the blocks with `generate()`. This is probably because `generate()` already broadcasts the blocks in p2p. ",
    "created_at": "2021-08-08T14:38:54Z",
    "updated_at": "2021-08-08T16:40:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684785050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684785050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 116,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 107,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766",
    "pull_request_review_id": 724915007,
    "id": 684792766,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5Mjc2Ng==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 112,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank you for re-explaining. You are right! Fixing. Thank you!",
    "created_at": "2021-08-08T15:39:53Z",
    "updated_at": "2021-08-08T15:39:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684792766"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684792766/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT",
    "in_reply_to_id": 673481308
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515",
    "pull_request_review_id": 724919401,
    "id": 684799515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDc5OTUxNQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()\n+\n+        err_msg = (\n+            \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\n+            \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\n+        )\n+\n+        for n in [0, 3, 4, 5]:\n+            self.log.info(\n+                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\n+                f\" {'with' if n >= 4 else 'without'} -blocksonly\"\n+            )\n+\n+            # 1. valid parameters - supply txid along with various valid values for verbose\n+            if n == 0 or n == 5:\n+                # with -txindex\n+                for verbose in [None, 0, False]:\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx\n+                for verbose in [1, True]:\n+                    # We only check the \"hex\" field of the output so we don't need to update\n+                    # this test every time the output format changes.\n+                    gottx = self.nodes[n].getrawtransaction(txId, verbose)['hex']\n+                    assert_equal(gottx, rawTxSigned['hex'])\n+                    assert 'in_active_chain' not in gottx",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 112,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Updated commit 4e83843f03dad710a0fad7a706e2618a7a69a6b3 to fix. Thanks @kiminuo!",
    "created_at": "2021-08-08T16:33:41Z",
    "updated_at": "2021-08-08T16:33:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684799515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684799515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT",
    "in_reply_to_id": 673481308
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613",
    "pull_request_review_id": 724925423,
    "id": 684809613,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NDgwOTYxMw==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 87,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-08-08T18:07:28Z",
    "updated_at": "2021-08-08T18:07:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r684809613"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/684809613/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 116,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 107,
    "side": "RIGHT",
    "in_reply_to_id": 684785050
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629",
    "pull_request_review_id": 725211679,
    "id": 685064629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY4NTA2NDYyOQ==",
    "diff_hunk": "@@ -69,24 +74,129 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools(self.nodes[0:3])\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, node, blocks):\n+        self.sync_peers()\n+        self.nodes[node].generate(blocks)\n+        self.sync_peers()\n+\n     def run_test(self):\n-        self.log.info('prepare some coins for multiple *rawtransaction commands')\n-        self.nodes[2].generate(1)\n-        self.sync_all()\n-        self.nodes[0].generate(COINBASE_MATURITY + 1)\n-        self.sync_all()\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)\n-        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),5.0)\n-        self.sync_all()\n-        self.nodes[0].generate(5)\n-        self.sync_all()\n-\n-        self.log.info('Test getrawtransaction on genesis block coinbase returns an error')\n+        self.log.info(\"Prepare some coins for multiple *rawtransaction commands\")\n+        self.generate_and_sync(node=2, blocks=1)\n+        self.generate_and_sync(node=0, blocks=COINBASE_MATURITY + 1)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.generate_and_sync(node=0, blocks=5)\n+\n+        self.getrawtransaction_tests()\n+        self.createrawtransaction_tests()\n+        self.sendrawtransaction_tests()\n+        self.sendrawtransaction_testmempoolaccept_tests()\n+        self.decoderawtransaction_tests()\n+        self.transaction_version_number_tests()\n+        if not self.options.descriptors:\n+            self.raw_multisig_transaction_legacy_tests()\n+\n+    def getrawtransaction_tests(self):\n+        addr = self.nodes[1].getnewaddress()\n+        txid = self.nodes[0].sendtoaddress(addr, 10)\n+        self.generate_and_sync(node=0, blocks=1)\n+        vout = find_vout_for_address(self.nodes[1], txid, addr)\n+        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n+        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n+        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n+        self.generate_and_sync(node=0, blocks=1)\n+\n+        # Make a tx by sending, then generate 2 blocks; block1 has the tx in it\n+        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n+        block1, block2 = self.nodes[2].generate(2)\n+        self.sync_peers()",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 87,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "d27edf1d85f44c58029e0197251cca56873b860f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Moving the in-mempool transaction tests commit after the simplification commit revealed that removing the `self.sync_peers()` would be flakey without the presence of the in-mempool transaction. This could be fragile, so no longer removing it in the simplification commit.",
    "created_at": "2021-08-09T10:04:25Z",
    "updated_at": "2021-08-09T10:15:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r685064629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/685064629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 116,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 107,
    "side": "RIGHT",
    "in_reply_to_id": 684785050
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693339474",
    "pull_request_review_id": 735487275,
    "id": 693339474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzMzOTQ3NA==",
    "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 554,
    "original_position": 553,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
    "user": {
      "login": "Zero-1729",
      "id": 23586626,
      "node_id": "MDQ6VXNlcjIzNTg2NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zero-1729",
      "html_url": "https://github.com/Zero-1729",
      "followers_url": "https://api.github.com/users/Zero-1729/followers",
      "following_url": "https://api.github.com/users/Zero-1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zero-1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
      "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
      "repos_url": "https://api.github.com/users/Zero-1729/repos",
      "events_url": "https://api.github.com/users/Zero-1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's the reason for having this as a variable instead of passing the literal to `assert_raises_rpc_error` as an arg?",
    "created_at": "2021-08-21T10:52:44Z",
    "updated_at": "2021-08-21T10:52:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693339474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693339474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693339474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693339474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 320,
    "original_line": 320,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693369747",
    "pull_request_review_id": 735504355,
    "id": 693369747,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM2OTc0Nw==",
    "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 554,
    "original_position": 553,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This variable is invoked twice below in this test, so it clarifies that we check for the same message and also allows reducing the line length to under 120; previously for instance, both lines did not fit in the GitHub display without scrolling (and scrolling is an annoyance with a file or diff of this length, as you have to navigate to the bottom, scroll, then navigate back to the lines).",
    "created_at": "2021-08-21T15:47:19Z",
    "updated_at": "2021-08-21T15:47:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693369747",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693369747"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693369747"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693369747/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 320,
    "original_line": 320,
    "side": "RIGHT",
    "in_reply_to_id": 693339474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693375931",
    "pull_request_review_id": 735507764,
    "id": 693375931,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5MzM3NTkzMQ==",
    "diff_hunk": "@@ -199,283 +306,25 @@ def run_test(self):\n             ])\n             assert_raises_rpc_error(-3, \"Missing scriptPubKey\", self.nodes[0].signrawtransactionwithwallet, rawtx, [\n                 {\n-                    \"txid\": txid,\n+                    \"txid\": TXID,\n                     \"vout\": 3,\n                     \"amount\": 1\n                 }\n             ])\n \n-        #########################################\n-        # sendrawtransaction with missing input #\n-        #########################################\n-\n-        self.log.info('sendrawtransaction with missing input')\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1}] #won't exists\n-        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n-        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n-        rawtx   = self.nodes[2].signrawtransactionwithwallet(rawtx)\n-\n-        # This will raise an exception since there are missing inputs\n-        assert_raises_rpc_error(-25, \"bad-txns-inputs-missingorspent\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n-\n-        #####################################\n-        # getrawtransaction with block hash #\n-        #####################################\n-\n-        # make a tx by sending then generate 2 blocks; block1 has the tx in it\n-        tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        block1, block2 = self.nodes[2].generate(2)\n-        self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n-\n-        if not self.options.descriptors:\n-            # The traditional multisig workflow does not work with descriptor wallets so these are legacy only.\n-            # The multisig workflow with descriptor wallets uses PSBTs and is tested elsewhere, no need to do them here.\n-            #########################\n-            # RAW TX MULTISIG TESTS #\n-            #########################\n-            # 2of2 test\n-            addr1 = self.nodes[2].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[2].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            # Tests for createmultisig and addmultisigaddress\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 1, [\"01020304\"])\n-            self.nodes[0].createmultisig(2, [addr1Obj['pubkey'], addr2Obj['pubkey']]) # createmultisig can only take public keys\n-            assert_raises_rpc_error(-5, \"Invalid public key\", self.nodes[0].createmultisig, 2, [addr1Obj['pubkey'], addr1]) # addmultisigaddress can take both pubkeys and addresses so long as they are in the wallet, which is tested here.\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr1])['address']\n-\n-            #use balance deltas instead of absolute values\n-            bal = self.nodes[2].getbalance()\n-\n-            # send 1.2 BTC to msig adr\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 1.2)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n-\n-\n-            # 2of3 test from different nodes\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-            addr3 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-            addr3Obj = self.nodes[2].getaddressinfo(addr3)\n-\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey'], addr3Obj['pubkey']])['address']\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            #THIS IS AN INCOMPLETE FEATURE\n-            #NODE2 HAS TWO OF THREE KEY AND THE FUNDS SHOULD BE SPENDABLE AND COUNT AT BALANCE CALCULATION\n-            assert_equal(self.nodes[2].getbalance(), bal) #for now, assume the funds of a 2of3 multisig tx are not marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned = self.nodes[1].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxPartialSigned['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxSigned = self.nodes[2].signrawtransactionwithwallet(rawTx, inputs)\n-            assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n-            self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n-            rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-            # 2of2 test for combining transactions\n-            bal = self.nodes[2].getbalance()\n-            addr1 = self.nodes[1].getnewaddress()\n-            addr2 = self.nodes[2].getnewaddress()\n-\n-            addr1Obj = self.nodes[1].getaddressinfo(addr1)\n-            addr2Obj = self.nodes[2].getaddressinfo(addr2)\n-\n-            self.nodes[1].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObj = self.nodes[2].addmultisigaddress(2, [addr1Obj['pubkey'], addr2Obj['pubkey']])['address']\n-            mSigObjValid = self.nodes[2].getaddressinfo(mSigObj)\n-\n-            txId = self.nodes[0].sendtoaddress(mSigObj, 2.2)\n-            decTx = self.nodes[0].gettransaction(txId)\n-            rawTx2 = self.nodes[0].decoderawtransaction(decTx['hex'])\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-\n-            assert_equal(self.nodes[2].getbalance(), bal) # the funds of a 2of2 multisig tx should not be marked as spendable\n-\n-            txDetails = self.nodes[0].gettransaction(txId, True)\n-            rawTx2 = self.nodes[0].decoderawtransaction(txDetails['hex'])\n-            vout = next(o for o in rawTx2['vout'] if o['value'] == Decimal('2.20000000'))\n-\n-            bal = self.nodes[0].getbalance()\n-            inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n-            outputs = { self.nodes[0].getnewaddress() : 2.19 }\n-            rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n-            rawTxPartialSigned1 = self.nodes[1].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned1)\n-            assert_equal(rawTxPartialSigned1['complete'], False) #node1 only has one key, can't comp. sign the tx\n-\n-            rawTxPartialSigned2 = self.nodes[2].signrawtransactionwithwallet(rawTx2, inputs)\n-            self.log.debug(rawTxPartialSigned2)\n-            assert_equal(rawTxPartialSigned2['complete'], False) #node2 only has one key, can't comp. sign the tx\n-            rawTxComb = self.nodes[2].combinerawtransaction([rawTxPartialSigned1['hex'], rawTxPartialSigned2['hex']])\n-            self.log.debug(rawTxComb)\n-            self.nodes[2].sendrawtransaction(rawTxComb)\n-            rawTx2 = self.nodes[0].decoderawtransaction(rawTxComb)\n-            self.sync_all()\n-            self.nodes[0].generate(1)\n-            self.sync_all()\n-            assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n-\n-        # decoderawtransaction tests\n-        # witness transaction\n-        encrawtx = \"010000000001010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f50500000000000102616100000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, True) # decode as witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # force decode as non-witness transaction\n-        # non-witness transaction\n-        encrawtx = \"01000000010000000000000072c1a6a246ae63f74f931e8365e15a089c68d61900000000000000000000ffffffff0100e1f505000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx, False) # decode as non-witness transaction\n-        assert_equal(decrawtx['vout'][0]['value'], Decimal('1.00000000'))\n-        # known ambiguous transaction in the chain (see https://github.com/bitcoin/bitcoin/issues/20579)\n-        encrawtx = \"020000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff4b03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000ffffffff03f4c1fb4b0000000016001497cfc76442fe717f2a3f0cc9c175f7561b6619970000000000000000266a24aa21a9ed957d1036a80343e0d1b659497e1b48a38ebe876a056d45965fac4a85cda84e1900000000000000002952534b424c4f434b3a8e092581ab01986cbadc84f4b43f4fa4bb9e7a2e2a0caf9b7cf64d939028e22c0120000000000000000000000000000000000000000000000000000000000000000000000000\"\n-        decrawtx = self.nodes[0].decoderawtransaction(encrawtx)\n-        decrawtx_wit = self.nodes[0].decoderawtransaction(encrawtx, True)\n-        assert_raises_rpc_error(-22, 'TX decode failed', self.nodes[0].decoderawtransaction, encrawtx, False) # fails to decode as non-witness transaction\n-        assert_equal(decrawtx, decrawtx_wit) # the witness interpretation should be chosen\n-        assert_equal(decrawtx['vin'][0]['coinbase'], \"03c68708046ff8415c622f4254432e434f4d2ffabe6d6de1965d02c68f928e5b244ab1965115a36f56eb997633c7f690124bbf43644e23080000000ca3d3af6d005a65ff0200fd00000000\")\n-\n-        # Basic signrawtransaction test\n-        addr = self.nodes[1].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(addr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        vout = find_vout_for_address(self.nodes[1], txid, addr)\n-        rawTx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {self.nodes[1].getnewaddress(): 9.999})\n-        rawTxSigned = self.nodes[1].signrawtransactionwithwallet(rawTx)\n-        txId = self.nodes[1].sendrawtransaction(rawTxSigned['hex'])\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # getrawtransaction tests\n-        # 1. valid parameters - only supply txid\n-        assert_equal(self.nodes[0].getrawtransaction(txId), rawTxSigned['hex'])\n-\n-        # 2. valid parameters - supply txid and 0 for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 0), rawTxSigned['hex'])\n-\n-        # 3. valid parameters - supply txid and False for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, False), rawTxSigned['hex'])\n-\n-        # 4. valid parameters - supply txid and 1 for verbose.\n-        # We only check the \"hex\" field of the output so we don't need to update this test every time the output format changes.\n-        assert_equal(self.nodes[0].getrawtransaction(txId, 1)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 5. valid parameters - supply txid and True for non-verbose\n-        assert_equal(self.nodes[0].getrawtransaction(txId, True)[\"hex\"], rawTxSigned['hex'])\n-\n-        # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, \"Flase\")\n-\n-        # 7. invalid parameters - supply txid and empty array\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, [])\n-\n-        # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_rpc_error(-1, \"not a boolean\", self.nodes[0].getrawtransaction, txId, {})\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 1000)\n-\n-        # 9. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        # 10. invalid parameters - sequence number out of range\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n-\n-        inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n-        outputs = { self.nodes[0].getnewaddress() : 1 }\n-        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n-        decrawtx= self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['vin'][0]['sequence'], 4294967294)\n-\n-        ####################################\n-        # TRANSACTION VERSION NUMBER TESTS #\n-        ####################################\n-\n-        # Test the minimum transaction version number that fits in a signed 32-bit integer.\n-        # As transaction version is unsigned, this should convert to its unsigned equivalent.\n-        tx = CTransaction()\n-        tx.nVersion = -0x80000000\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x80000000)\n-\n-        # Test the maximum transaction version number that fits in a signed 32-bit integer.\n-        tx = CTransaction()\n-        tx.nVersion = 0x7fffffff\n-        rawtx = tx.serialize().hex()\n-        decrawtx = self.nodes[0].decoderawtransaction(rawtx)\n-        assert_equal(decrawtx['version'], 0x7fffffff)\n-\n-        self.log.info('sendrawtransaction/testmempoolaccept with maxfeerate')\n+    def sendrawtransaction_testmempoolaccept_tests(self):\n+        self.log.info(\"Test sendrawtransaction/testmempoolaccept with maxfeerate\")\n+        fee_exceeds_max = \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\"",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 554,
    "original_position": 553,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "f0aacf0a87a67f88018f683092f3b7d16e03e6f1",
    "user": {
      "login": "Zero-1729",
      "id": 23586626,
      "node_id": "MDQ6VXNlcjIzNTg2NjI2",
      "avatar_url": "https://avatars.githubusercontent.com/u/23586626?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Zero-1729",
      "html_url": "https://github.com/Zero-1729",
      "followers_url": "https://api.github.com/users/Zero-1729/followers",
      "following_url": "https://api.github.com/users/Zero-1729/following{/other_user}",
      "gists_url": "https://api.github.com/users/Zero-1729/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Zero-1729/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Zero-1729/subscriptions",
      "organizations_url": "https://api.github.com/users/Zero-1729/orgs",
      "repos_url": "https://api.github.com/users/Zero-1729/repos",
      "events_url": "https://api.github.com/users/Zero-1729/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Zero-1729/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for clarifying!",
    "created_at": "2021-08-21T16:44:36Z",
    "updated_at": "2021-08-21T16:44:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693375931",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693375931"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r693375931"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/693375931/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 320,
    "original_line": 320,
    "side": "RIGHT",
    "in_reply_to_id": 693339474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696680563",
    "pull_request_review_id": 739543669,
    "id": 696680563,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjY4MDU2Mw==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in c7327a6e90: Why is this test removed and re-added in the next commit? I think it would be easier to review if it was kept.",
    "created_at": "2021-08-26T14:21:57Z",
    "updated_at": "2021-08-26T14:21:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696680563",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696680563"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696680563"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696680563/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696681271",
    "pull_request_review_id": 739544627,
    "id": 696681271,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjY4MTI3MQ==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 41,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "c7327a6e90: Don't all nodes have txindex, except n=3? At least the extra_args would suggest that.",
    "created_at": "2021-08-26T14:22:40Z",
    "updated_at": "2021-08-26T14:22:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696681271",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696681271"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696681271"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696681271/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696719260",
    "pull_request_review_id": 739596438,
    "id": 696719260,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjcxOTI2MA==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 41,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yes, kept node 0 as it was already in use for the -txindex case, and added node 3 to test without -txindex. Didn't seem worth adding iterating through nodes 1 and 2.",
    "created_at": "2021-08-26T15:02:47Z",
    "updated_at": "2021-08-26T15:02:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696719260",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696719260"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696719260"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696719260/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT",
    "in_reply_to_id": 696681271
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696724187",
    "pull_request_review_id": 739603135,
    "id": 696724187,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjcyNDE4Nw==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Probably a rebase oversight during the various changes.",
    "created_at": "2021-08-26T15:08:13Z",
    "updated_at": "2021-08-26T15:08:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696724187",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696724187"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696724187"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696724187/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT",
    "in_reply_to_id": 696680563
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696733591",
    "pull_request_review_id": 739615896,
    "id": 696733591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjczMzU5MQ==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 41,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(this does indeed work:)\r\n```diff\r\n-        for n in [0, 3, 4, 5]:\r\n+        for n in range(self.num_nodes):\r\n             self.log.info(\r\n-                f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\r\n+                f\"Test getrawtransaction {'with' if n <= 2 or n == 5 else 'without'} -txindex,\"\r\n                 f\" {'with' if n >= 4 else 'without'} -blocksonly\"\r\n             )\r\n             # 1. valid parameters - supply txid along with various valid values for verbose\r\n-            if n == 0 or n == 3:\r\n+            if n <= 3:\r\n                 # with a transaction in the mempool, with and without -txindex\r\n                 tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.5)\r\n                 self.nodes[n].getrawtransaction(tx_in_mempool)\r\n-            if n == 0 or n == 5:\r\n+            if n <= 2 or n == 5:\r\n                 # with -txindex\r\n```\r\n",
    "created_at": "2021-08-26T15:18:50Z",
    "updated_at": "2021-08-26T15:18:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696733591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696733591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696733591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696733591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT",
    "in_reply_to_id": 696681271
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696734776",
    "pull_request_review_id": 739617515,
    "id": 696734776,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjczNDc3Ng==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block\n-        gottx = self.nodes[0].getrawtransaction(tx, True)\n-        assert_equal(gottx['txid'], tx)\n-        assert 'in_active_chain' not in gottx\n-        # We should not get the tx if we provide an unrelated block\n-        assert_raises_rpc_error(-5, \"No such transaction found\", self.nodes[0].getrawtransaction, tx, True, block2)\n-        # An invalid block hash should raise the correct errors\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[0].getrawtransaction, tx, True, True)\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 6, for 'foobar')\", self.nodes[0].getrawtransaction, tx, True, \"foobar\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be of length 64 (not 8, for 'abcd1234')\", self.nodes[0].getrawtransaction, tx, True, \"abcd1234\")\n-        assert_raises_rpc_error(-8, \"parameter 3 must be hexadecimal string (not 'ZZZ0000000000000000000000000000000000000000000000000000000000000')\", self.nodes[0].getrawtransaction, tx, True, \"ZZZ0000000000000000000000000000000000000000000000000000000000000\")\n-        assert_raises_rpc_error(-5, \"Block hash not found\", self.nodes[0].getrawtransaction, tx, True, \"0000000000000000000000000000000000000000000000000000000000000000\")\n-        # Undo the blocks and check in_active_chain\n-        self.nodes[0].invalidateblock(block1)\n-        gottx = self.nodes[0].getrawtransaction(txid=tx, verbose=True, blockhash=block1)\n-        assert_equal(gottx['in_active_chain'], False)\n-        self.nodes[0].reconsiderblock(block1)\n-        assert_equal(self.nodes[0].getbestblockhash(), block2)\n+        for n in [0, 3]:\n+            self.log.info(f\"Test getrawtransaction {'with' if n == 0 else 'without'} -txindex, with blockhash\")",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 41,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No need to change. I missed that this was only picking two nodes.",
    "created_at": "2021-08-26T15:20:10Z",
    "updated_at": "2021-08-26T15:20:10Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696734776",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696734776"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696734776"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696734776/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 231,
    "side": "RIGHT",
    "in_reply_to_id": 696681271
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696740754",
    "pull_request_review_id": 739624964,
    "id": 696740754,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0MDc1NA==",
    "diff_hunk": "@@ -72,17 +73,22 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools()\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, *, node, blocks, pre_sync=True):\n+        if pre_sync == True:\n+            self.sync_peers()\n+        self.nodes[node].generate(blocks)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a: If you rebase, you can use `self.generate(nodes[node], blocks)`",
    "created_at": "2021-08-26T15:26:43Z",
    "updated_at": "2021-08-26T15:34:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696740754",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696740754"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696740754"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696740754/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696742847",
    "pull_request_review_id": 739624964,
    "id": 696742847,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0Mjg0Nw==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71: The forth node has a mempool, too?",
    "created_at": "2021-08-26T15:28:57Z",
    "updated_at": "2021-08-26T15:34:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696742847",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696742847"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696742847"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696742847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696748144",
    "pull_request_review_id": 739624964,
    "id": 696748144,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc0ODE0NA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How does -blocksonly even affect the test, given that all txs are mined into blocks anyway?",
    "created_at": "2021-08-26T15:34:50Z",
    "updated_at": "2021-08-26T15:34:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696748144",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696748144"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696748144"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696748144/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696760147",
    "pull_request_review_id": 739651394,
    "id": 696760147,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc2MDE0Nw==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If this line remains `self.sync_mempools()`, the test fails with `AssertionError: Mempool sync timed out`.\r\n\r\nThe last commit adds an in-mempool tx.",
    "created_at": "2021-08-26T15:48:10Z",
    "updated_at": "2021-08-26T15:48:11Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696760147",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696760147"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696760147"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696760147/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696765819",
    "pull_request_review_id": 739658821,
    "id": 696765819,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njc2NTgxOQ==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> The last commit adds an in-mempool tx.\r\n\r\nThe first tx will be mined into a block immediately after. The second test isn't run on the -blocksonly nodes, unless I am missing something.\r\n\r\n\r\nIn general `-blocksonly` only skips incoming transactions, so anything you can test with the option is also possible by simply querying a txid that doesn't exist at all.",
    "created_at": "2021-08-26T15:54:36Z",
    "updated_at": "2021-08-26T15:54:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696765819",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696765819"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696765819"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696765819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696812484",
    "pull_request_review_id": 739720541,
    "id": 696812484,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5NjgxMjQ4NA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do you think it would be better coverage to run the in-mempool test on the -blocksonly nodes as well...\r\n```diff\r\n@@ -88,7 +88,8 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n         for amount in [1.5, 1.0, 5.0]:\r\n             self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), amount)\r\n-        self.nodes[0].sendtoaddress(self.nodes[3].getnewaddress(), 1)\r\n+        for n in [3, 4, 5]:\r\n+            self.nodes[0].sendtoaddress(self.nodes[n].getnewaddress(), 1)\r\n         self.generate_and_sync(node=0, blocks=5)\r\n@@ -109,16 +110,22 @@ class RawTransactionsTest(BitcoinTestFramework):\r\n             \"No such mempool transaction. Use -txindex or provide a block hash to enable\"\r\n             \" blockchain transaction queries. Use gettransaction for wallet transactions.\"\r\n         )\r\n+        err_msg_2 = \"No such mempool or blockchain transaction. Use gettransaction for wallet transactions.\"\r\n         for n in [0, 3, 4, 5]:\r\n             self.log.info(\r\n                 f\"Test getrawtransaction {'with' if n == 0 or n == 5 else 'without'} -txindex,\"\r\n                 f\" {'with' if n >= 4 else 'without'} -blocksonly\"\r\n             )\r\n-            # 1. valid parameters - supply txid along with various valid values for verbose\r\n+            # With a transaction in the mempool\r\n+            tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n].getnewaddress(), 0.5)\r\n             if n == 0 or n == 3:\r\n-                # with a transaction in the mempool, with and without -txindex\r\n-                tx_in_mempool = self.nodes[n].sendtoaddress(self.nodes[n + 1].getnewaddress(), 0.5)\r\n+                # with and without -txindex\r\n                 self.nodes[n].getrawtransaction(tx_in_mempool)\r\n+            else:\r\n+                # -blocksonly, with and without -txindex\r\n+                assert_raises_rpc_error(-5, err_msg if n == 4 else err_msg_2, self.nodes[n].getrawtransaction, tx_in_mempool)\r\n```\r\nor do you prefer dropping the -blocksonly nodes and testing the other nodes with a non-existing tx.",
    "created_at": "2021-08-26T16:53:13Z",
    "updated_at": "2021-08-26T16:53:13Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696812484"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696812484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696853243",
    "pull_request_review_id": 739773763,
    "id": 696853243,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5Njg1MzI0Mw==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless I am missing something, the goal of this test is to cover `GetTransaction`, which itself is unaffected by the `blocksonly` option. Thus, there is no need to test this option. (Otherwise, there would also be reason to test with `mocktime`, `minrelaytxfee`, ...)",
    "created_at": "2021-08-26T17:50:47Z",
    "updated_at": "2021-08-26T17:50:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696853243",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696853243"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696853243"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/696853243/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699179750",
    "pull_request_review_id": 742534661,
    "id": 699179750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTE3OTc1MA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The -blocksonly nodes allow us to add missing test coverage for rpc getrawtransaction error cases like in my https://github.com/bitcoin/bitcoin/pull/22437#discussion_r696812484 above. We could maybe pass non-existing txids instead, but it seems better to test actual -blocksonly behavior.\r\n\r\nI have a branch to add that coverage and some other improvements, and rather than increase the size of this pull and invalidate the existing review, I can propose it as a follow-up.",
    "created_at": "2021-08-31T10:10:15Z",
    "updated_at": "2021-08-31T10:10:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699179750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699179750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699179750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699179750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699183676",
    "pull_request_review_id": 742539980,
    "id": 699183676,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTE4MzY3Ng==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> it seems better to test actual -blocksonly behavior.\r\n\r\nblocksonly is a network option, so it seems confusing to test it's behaviour inside a raw transaction test.",
    "created_at": "2021-08-31T10:15:43Z",
    "updated_at": "2021-08-31T10:15:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699183676",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699183676"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699183676"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699183676/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699202590",
    "pull_request_review_id": 742564773,
    "id": 699202590,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIwMjU5MA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My thought was that -blocksonly effectively disables mempool functionality, which for end-to-end testing relates to how getrawtransaction behaves when a node operator running -blocksonly calls getrawtransaction, which is valid with either txindex and/or passing blockhash if the tx is in a block, so it seems good to have explicit coverage that serves as a regression test and sanity check. Passing a wrong txid could be added as well, where relevant, to verify the same outcome.",
    "created_at": "2021-08-31T10:43:29Z",
    "updated_at": "2021-08-31T10:58:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699202590",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699202590"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699202590"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699202590/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699232209",
    "pull_request_review_id": 742604765,
    "id": 699232209,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTIzMjIwOQ==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> -blocksonly effectively disables mempool functionality\r\n\r\nThe behaviour of the mempool module isn't affected by blocksonly at all. (All txs that are submitted to the mempool are added/rejected in the same way regardless of blocksonly.) blocksonly is purely a net-processing option to disable *incoming* tx relay from network peers. It doesn't affect (in)validity of txs submitted to the mempool. For example, when the wallet or rpc submits a tx, it will still be added to the mempool.\r\n\r\nAs part of this test, if the goal is to get a fully functioning, but empty mempool, it might be easier to run the tests that you want to run at the beginning with an empty mempool. (Or by restarting a node with `-nopersistmempool` to empty the mempool). Or as mentioned previously by picking a txid that is not currently in the mempool.\r\n\r\n\r\nIf there was an option to completely disable the mempool (i.e. never initialize the class), then it indeed would make a lot of sense to check for that code path.\r\n\r\nIn testing it is important to be able to draw units/modules and assume that the modules don't interact with each other, other than over their defined interface. This allows to test units/modules separate from each other. If they had to be tested in combination it would lead to path explosion in any real software project, thus making it harder to test meaningful.\r\n\r\nMoreover, if the behaviour of one module is required for testing another module, it will make it harder to change the behaviour of that module and only touching the tests of that module.\r\n\r\nOr put another way: If `-blockonly` was relevant to test here, why is `-minrelaytxfee` (or any other setting) not relevant to test here?",
    "created_at": "2021-08-31T11:29:47Z",
    "updated_at": "2021-08-31T11:29:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699232209",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699232209"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699232209"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699232209/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699242734",
    "pull_request_review_id": 742619160,
    "id": 699242734,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTI0MjczNA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree from a unit test point of view, but for end-to-end testing these interactions can be good to test. For example, I think I've found a parameter interaction that doesn't work as documented (not sure yet, need to look further). That seems like good coverage to have if someone proposes it, it is reviewed, and ready to use.  The asmap/addrman interaction is another example.  What to do here?  Lots of time invested so far.  Sure, I could spend even more time to rework this without the coverage and hope for everyone to review it again.  Or just drop the work starting with \"Test...with -blocksonly\" and maybe pick up the rest later in a follow-up.",
    "created_at": "2021-08-31T11:45:17Z",
    "updated_at": "2021-08-31T11:45:17Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699242734",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699242734"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699242734"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699242734/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699250588",
    "pull_request_review_id": 742629020,
    "id": 699250588,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTI1MDU4OA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> The asmap/addrman interaction is another example\r\n\r\nI think asmap is part of the addrman module, so testing those together in a test makes sense.",
    "created_at": "2021-08-31T11:56:44Z",
    "updated_at": "2021-08-31T11:56:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699250588",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699250588"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699250588"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699250588/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699366246",
    "pull_request_review_id": 742786197,
    "id": 699366246,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTM2NjI0Ng==",
    "diff_hunk": "@@ -72,17 +73,22 @@ def setup_network(self):\n         super().setup_network()\n         self.connect_nodes(0, 2)\n \n+    def sync_peers(self):\n+        self.sync_mempools()\n+        self.sync_blocks()\n+\n+    def generate_and_sync(self, *, node, blocks, pre_sync=True):\n+        if pre_sync == True:\n+            self.sync_peers()\n+        self.nodes[node].generate(blocks)",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "75d1e4cb14a4bc293a17e516598a1b6b81dcac4a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> [75d1e4c](https://github.com/bitcoin/bitcoin/commit/75d1e4cb14a4bc293a17e516598a1b6b81dcac4a): If you rebase, you can use `self.generate(nodes[node], blocks)`\r\n\r\nThanks. Dropped the commit.",
    "created_at": "2021-08-31T14:13:23Z",
    "updated_at": "2021-08-31T14:13:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699366246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699366246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699366246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699366246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 83,
    "side": "RIGHT",
    "in_reply_to_id": 696740754
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699541053",
    "pull_request_review_id": 743019445,
    "id": 699541053,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU0MTA1Mw==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not addressed in the latest force push? The first two commits aren't squashed?",
    "created_at": "2021-08-31T17:38:12Z",
    "updated_at": "2021-08-31T17:38:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699541053",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699541053"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699541053"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699541053/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT",
    "in_reply_to_id": 696680563
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699561025",
    "pull_request_review_id": 743046314,
    "id": 699561025,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2MTAyNQ==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for having a look. Didn't change any commits, only dropped the last ones to ~preserve the previous review ACKs.",
    "created_at": "2021-08-31T18:06:50Z",
    "updated_at": "2021-08-31T18:06:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699561025",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699561025"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699561025"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699561025/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT",
    "in_reply_to_id": 696680563
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699563008",
    "pull_request_review_id": 743049048,
    "id": 699563008,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2MzAwOA==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "reviewing that two commits are squashed should be as easy as checking that other commits are dropped, no?",
    "created_at": "2021-08-31T18:09:47Z",
    "updated_at": "2021-08-31T18:09:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699563008",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699563008"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699563008"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699563008/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT",
    "in_reply_to_id": 696680563
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699567400",
    "pull_request_review_id": 743054895,
    "id": 699567400,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTU2NzQwMA==",
    "diff_hunk": "@@ -74,12 +75,11 @@ def setup_network(self):\n         self.connect_nodes(0, 2)\n \n     def sync_peers(self):\n-        self.sync_mempools()\n+        self.sync_mempools(self.nodes[0:3])  # nodes 0 to 3 have a mempool",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": null,
    "original_position": 20,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "0e4cb3a4bbbf464376b5cad78e83328444bdcf71",
    "user": {
      "login": "jaysonmald35",
      "id": 87387449,
      "node_id": "MDQ6VXNlcjg3Mzg3NDQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/87387449?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jaysonmald35",
      "html_url": "https://github.com/jaysonmald35",
      "followers_url": "https://api.github.com/users/jaysonmald35/followers",
      "following_url": "https://api.github.com/users/jaysonmald35/following{/other_user}",
      "gists_url": "https://api.github.com/users/jaysonmald35/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jaysonmald35/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jaysonmald35/subscriptions",
      "organizations_url": "https://api.github.com/users/jaysonmald35/orgs",
      "repos_url": "https://api.github.com/users/jaysonmald35/repos",
      "events_url": "https://api.github.com/users/jaysonmald35/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jaysonmald35/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thank u",
    "created_at": "2021-08-31T18:16:35Z",
    "updated_at": "2021-08-31T18:16:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699567400",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699567400"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699567400"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699567400/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 78,
    "side": "RIGHT",
    "in_reply_to_id": 696742847
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699622319",
    "pull_request_review_id": 743127410,
    "id": 699622319,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY5OTYyMjMxOQ==",
    "diff_hunk": "@@ -226,28 +227,28 @@ def run_test(self):\n         tx = self.nodes[2].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         block1, block2 = self.nodes[2].generate(2)\n         self.sync_all()\n-        # We should be able to get the raw transaction by providing the correct block\n-        gottx = self.nodes[0].getrawtransaction(tx, True, block1)\n-        assert_equal(gottx['txid'], tx)\n-        assert_equal(gottx['in_active_chain'], True)\n-        # We should not have the 'in_active_chain' flag when we don't provide a block",
    "path": "test/functional/rpc_rawtransaction.py",
    "position": 316,
    "original_position": 22,
    "commit_id": "387355bb9482a09c1fc9b137bea56745a93b7dfd",
    "original_commit_id": "01fba512bee8b55cbc8eb32e302115f113ffa31b",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "squashed",
    "created_at": "2021-08-31T19:42:57Z",
    "updated_at": "2021-08-31T19:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699622319",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699622319"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/22437#discussion_r699622319"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/22437"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/699622319/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 233,
    "original_line": 233,
    "side": "LEFT",
    "in_reply_to_id": 696680563
  }
]