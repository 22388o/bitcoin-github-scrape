[
  {
    "sha": "3c481f8921bbc587cf287329f39243abe703b868",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzQ4MWY4OTIxYmJjNTg3Y2YyODczMjlmMzkyNDNhYmU3MDNiODY4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-06-20T08:01:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-10T05:41:50Z"
      },
      "message": "signrawtransactionwithkey: better error messages for bad redeemScript/witnessScript\n\nThis adds checks to ensure the redeemScript/witnessScript actually\ncorrespond to the provided scriptPubKey, and, if both are provided,\nthat they are sensibly related to each other.\n\nThanks to github user passionofvc for raising this issue.",
      "tree": {
        "sha": "3374bd2d19e1e7c15ac4343e86c3c14450cbae2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3374bd2d19e1e7c15ac4343e86c3c14450cbae2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c481f8921bbc587cf287329f39243abe703b868",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c481f8921bbc587cf287329f39243abe703b868",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c481f8921bbc587cf287329f39243abe703b868",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c481f8921bbc587cf287329f39243abe703b868/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5a8d0cff1e5f35e51b5c086e4352cc36f354998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5a8d0cff1e5f35e51b5c086e4352cc36f354998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5a8d0cff1e5f35e51b5c086e4352cc36f354998"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 78,
      "deletions": 16
    },
    "files": [
      {
        "sha": "e05f28347f45aeab2780ce1872f18bde5ffdaca8",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 16,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c481f8921bbc587cf287329f39243abe703b868/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c481f8921bbc587cf287329f39243abe703b868/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=3c481f8921bbc587cf287329f39243abe703b868",
        "patch": "@@ -196,32 +196,73 @@ void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keyst\n             }\n \n             // if redeemScript and private keys were given, add redeemScript to the keystore so it can be signed\n-            if (keystore && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+            const bool is_p2sh = scriptPubKey.IsPayToScriptHash();\n+            const bool is_p2wsh = scriptPubKey.IsPayToWitnessScriptHash();\n+            if (keystore && (is_p2sh || is_p2wsh)) {\n                 RPCTypeCheckObj(prevOut,\n                     {\n                         {\"redeemScript\", UniValueType(UniValue::VSTR)},\n                         {\"witnessScript\", UniValueType(UniValue::VSTR)},\n                     }, true);\n                 UniValue rs = find_value(prevOut, \"redeemScript\");\n-                if (!rs.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(rs, \"redeemScript\"));\n-                    CScript redeemScript(rsData.begin(), rsData.end());\n-                    keystore->AddCScript(redeemScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    // This is only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n-                    keystore->AddCScript(GetScriptForWitness(redeemScript));\n-                }\n                 UniValue ws = find_value(prevOut, \"witnessScript\");\n-                if (!ws.isNull()) {\n-                    std::vector<unsigned char> wsData(ParseHexV(ws, \"witnessScript\"));\n-                    CScript witnessScript(wsData.begin(), wsData.end());\n-                    keystore->AddCScript(witnessScript);\n-                    // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n-                    keystore->AddCScript(GetScriptForWitness(witnessScript));\n-                }\n                 if (rs.isNull() && ws.isNull()) {\n                     throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing redeemScript/witnessScript\");\n                 }\n+\n+                // work from witnessScript when possible\n+                std::vector<unsigned char> scriptData(!ws.isNull() ? ParseHexV(ws, \"witnessScript\") : ParseHexV(rs, \"redeemScript\"));\n+                CScript script(scriptData.begin(), scriptData.end());\n+                keystore->AddCScript(script);\n+                // Automatically also add the P2WSH wrapped version of the script (to deal with P2SH-P2WSH).\n+                // This is done for redeemScript only for compatibility, it is encouraged to use the explicit witnessScript field instead.\n+                CScript witness_output_script{GetScriptForWitness(script)};\n+                keystore->AddCScript(witness_output_script);\n+\n+                if (!ws.isNull() && !rs.isNull()) {\n+                    // if both witnessScript and redeemScript are provided,\n+                    // they should either be the same (for backwards compat),\n+                    // or the redeemScript should be the encoded form of\n+                    // the witnessScript (ie, for p2sh-p2wsh)\n+                    if (ws.get_str() != rs.get_str()) {\n+                        std::vector<unsigned char> redeemScriptData(ParseHexV(rs, \"redeemScript\"));\n+                        CScript redeemScript(redeemScriptData.begin(), redeemScriptData.end());\n+                        if (redeemScript != witness_output_script) {\n+                            throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript does not correspond to witnessScript\");\n+                        }\n+                    }\n+                }\n+\n+                if (is_p2sh) {\n+                    const CTxDestination p2sh{ScriptHash(script)};\n+                    const CTxDestination p2sh_p2wsh{ScriptHash(witness_output_script)};\n+                    if (scriptPubKey == GetScriptForDestination(p2sh)) {\n+                        // traditional p2sh; arguably an error if\n+                        // we got here with rs.IsNull(), because\n+                        // that means the p2sh script was specified\n+                        // via witnessScript param, but for now\n+                        // we'll just quietly accept it\n+                    } else if (scriptPubKey == GetScriptForDestination(p2sh_p2wsh)) {\n+                        // p2wsh encoded as p2sh; ideally the witness\n+                        // script was specified in the witnessScript\n+                        // param, but also support specifying it via\n+                        // redeemScript param for backwards compat\n+                        // (in which case ws.IsNull() == true)\n+                    } else {\n+                        // otherwise, can't generate scriptPubKey from\n+                        // either script, so we got unusable parameters\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript/witnessScript does not match scriptPubKey\");\n+                    }\n+                } else if (is_p2wsh) {\n+                    // plain p2wsh; could throw an error if script\n+                    // was specified by redeemScript rather than\n+                    // witnessScript (ie, ws.IsNull() == true), but\n+                    // accept it for backwards compat\n+                    const CTxDestination p2wsh{WitnessV0ScriptHash(script)};\n+                    if (scriptPubKey != GetScriptForDestination(p2wsh)) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"redeemScript/witnessScript does not match scriptPubKey\");\n+                    }\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "056e193d55a6a49fc867b5a2a739b7775503d755",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c481f8921bbc587cf287329f39243abe703b868/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c481f8921bbc587cf287329f39243abe703b868/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=3c481f8921bbc587cf287329f39243abe703b868",
        "patch": "@@ -134,6 +134,27 @@ def do_multisig(self):\n \n         assert_raises_rpc_error(-8, \"Missing redeemScript/witnessScript\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n \n+        # if witnessScript specified, all ok\n+        prevtx_err[\"witnessScript\"] = prevtxs[0][\"redeemScript\"]\n+        node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # both specified, also ok\n+        prevtx_err[\"redeemScript\"] = prevtxs[0][\"redeemScript\"]\n+        node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # redeemScript mismatch to witnessScript\n+        prevtx_err[\"redeemScript\"] = \"6a\" # OP_RETURN\n+        assert_raises_rpc_error(-8, \"redeemScript does not correspond to witnessScript\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # redeemScript does not match scriptPubKey\n+        del prevtx_err[\"witnessScript\"]\n+        assert_raises_rpc_error(-8, \"redeemScript/witnessScript does not match scriptPubKey\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n+        # witnessScript does not match scriptPubKey\n+        prevtx_err[\"witnessScript\"] = prevtx_err[\"redeemScript\"]\n+        del prevtx_err[\"redeemScript\"]\n+        assert_raises_rpc_error(-8, \"redeemScript/witnessScript does not match scriptPubKey\", node2.signrawtransactionwithkey, rawtx, self.priv[0:self.nsigs-1], [prevtx_err])\n+\n         rawtx2 = node2.signrawtransactionwithkey(rawtx, self.priv[0:self.nsigs - 1], prevtxs)\n         rawtx3 = node2.signrawtransactionwithkey(rawtx2[\"hex\"], [self.priv[-1]], prevtxs)\n "
      }
    ]
  },
  {
    "sha": "ec4c79326bb670c2cc1757ecfb1900f8460c5257",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzRjNzkzMjZiYjY3MGMyY2MxNzU3ZWNmYjE5MDBmODQ2MGM1MjU3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-06-20T09:40:29Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-10T05:41:50Z"
      },
      "message": "signrawtransaction*: improve error for partial signing\n\nThanks to Danial Jaffy (tipu) for reporting this issue.",
      "tree": {
        "sha": "64851d5f99de774e4484845e50e119a434e3c71d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64851d5f99de774e4484845e50e119a434e3c71d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec4c79326bb670c2cc1757ecfb1900f8460c5257",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4c79326bb670c2cc1757ecfb1900f8460c5257",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec4c79326bb670c2cc1757ecfb1900f8460c5257",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec4c79326bb670c2cc1757ecfb1900f8460c5257/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c481f8921bbc587cf287329f39243abe703b868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c481f8921bbc587cf287329f39243abe703b868",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c481f8921bbc587cf287329f39243abe703b868"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1d176ba4d1172d26521547ac7727bdb8b3dd9e0",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec4c79326bb670c2cc1757ecfb1900f8460c5257/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec4c79326bb670c2cc1757ecfb1900f8460c5257/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=ec4c79326bb670c2cc1757ecfb1900f8460c5257",
        "patch": "@@ -309,6 +309,9 @@ UniValue SignTransaction(CMutableTransaction& mtx, const SigningProvider* keysto\n             if (serror == SCRIPT_ERR_INVALID_STACK_OPERATION) {\n                 // Unable to sign input and verification failed (possible attempt to partially sign).\n                 TxInErrorToJSON(txin, vErrors, \"Unable to sign input, invalid stack size (possibly missing key)\");\n+            } else if (serror == SCRIPT_ERR_SIG_NULLFAIL) {\n+                // Verification failed (possibly due to insufficient signatures).\n+                TxInErrorToJSON(txin, vErrors, \"CHECK(MULTI)SIG failing with non-zero signature (possibly need more signatures)\");\n             } else {\n                 TxInErrorToJSON(txin, vErrors, ScriptErrorString(serror));\n             }"
      }
    ]
  }
]