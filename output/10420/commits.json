[
  {
    "sha": "5749a48821f6a83d17b4f4626d09d6abdada5135",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzQ5YTQ4ODIxZjZhODNkMTdiNGY0NjI2ZDA5ZDZhYmRhZGE1MTM1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-03-09T22:56:23Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-05-23T17:39:50Z"
      },
      "message": "Add Qt tests for wallet spends & bumpfee\n\nA few code changes were needed to accompany the test:\n\n* Adding setObjectName() calls for a few Qt controls to make them easily\n  accessible from the test.\n\n* Calling contextMenu->popup() instead of contextMenu->exec() to open\n  the transaction list context menu without blocking the test thread.\n\n* Opening the context menu at the contextualMenu event point rather than\n  the cursor position (this change was not strictly needed to make the test\n  work, but is more correct).\n\n* Updating the bumped transaction row with showTransaction=true instead of\n  false. This is needed to prevent the bumped tx from being hidden, so the last\n  part of the test which attempts to bump the bumped tx can work. (Technically\n  this change is a more general bugfix not limited to the testing environment,\n  but the bug doesn't happen outside of the testing environment because in the\n  full Qt client, a queued NotifyTransactionChanged notification causes the row\n  to be updated twice, first with showTransaction=false, then immediately after\n  with showTransaction=true.)",
      "tree": {
        "sha": "4ad44d14509e2d4198b9f021ce0059551480a976",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ad44d14509e2d4198b9f021ce0059551480a976"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5749a48821f6a83d17b4f4626d09d6abdada5135",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5749a48821f6a83d17b4f4626d09d6abdada5135",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5749a48821f6a83d17b4f4626d09d6abdada5135",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5749a48821f6a83d17b4f4626d09d6abdada5135/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e96ecf075e8633f83ed1e05052402fb6b4d6186",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e96ecf075e8633f83ed1e05052402fb6b4d6186",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e96ecf075e8633f83ed1e05052402fb6b4d6186"
      }
    ],
    "stats": {
      "total": 89,
      "additions": 76,
      "deletions": 13
    },
    "files": [
      {
        "sha": "32362ccdfc63e6181ff821d7922a0aae0efaa696",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 11,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5749a48821f6a83d17b4f4626d09d6abdada5135/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5749a48821f6a83d17b4f4626d09d6abdada5135/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=5749a48821f6a83d17b4f4626d09d6abdada5135",
        "patch": "@@ -8,26 +8,46 @@\n #include \"qt/sendcoinsdialog.h\"\n #include \"qt/sendcoinsentry.h\"\n #include \"qt/transactiontablemodel.h\"\n+#include \"qt/transactionview.h\"\n #include \"qt/walletmodel.h\"\n #include \"test/test_bitcoin.h\"\n #include \"validation.h\"\n #include \"wallet/wallet.h\"\n \n #include <QAbstractButton>\n+#include <QAction>\n #include <QApplication>\n+#include <QCheckBox>\n+#include <QPushButton>\n #include <QTimer>\n #include <QVBoxLayout>\n \n namespace\n {\n-//! Press \"Yes\" button in modal send confirmation dialog.\n-void ConfirmSend()\n+//! Press \"Ok\" button in message box dialog.\n+void ConfirmMessage(QString* text = nullptr)\n {\n-    QTimer::singleShot(0, makeCallback([](Callback* callback) {\n+    QTimer::singleShot(0, makeCallback([text](Callback* callback) {\n+        for (QWidget* widget : QApplication::topLevelWidgets()) {\n+            if (widget->inherits(\"QMessageBox\")) {\n+                QMessageBox* messageBox = qobject_cast<QMessageBox*>(widget);\n+                if (text) *text = messageBox->text();\n+                messageBox->defaultButton()->click();\n+            }\n+        }\n+        delete callback;\n+    }), SLOT(call()));\n+}\n+\n+//! Press \"Yes\" or \"Cancel\" buttons in modal send confirmation dialog.\n+void ConfirmSend(QString* text = nullptr, bool cancel = false)\n+{\n+    QTimer::singleShot(0, makeCallback([text, cancel](Callback* callback) {\n         for (QWidget* widget : QApplication::topLevelWidgets()) {\n             if (widget->inherits(\"SendConfirmationDialog\")) {\n                 SendConfirmationDialog* dialog = qobject_cast<SendConfirmationDialog*>(widget);\n-                QAbstractButton* button = dialog->button(QMessageBox::Yes);\n+                if (text) *text = dialog->text();\n+                QAbstractButton* button = dialog->button(cancel ? QMessageBox::Cancel : QMessageBox::Yes);\n                 button->setEnabled(true);\n                 button->click();\n             }\n@@ -37,12 +57,16 @@ void ConfirmSend()\n }\n \n //! Send coins to address and return txid.\n-uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CBitcoinAddress& address, CAmount amount)\n+uint256 SendCoins(CWallet& wallet, SendCoinsDialog& sendCoinsDialog, const CBitcoinAddress& address, CAmount amount, bool rbf)\n {\n     QVBoxLayout* entries = sendCoinsDialog.findChild<QVBoxLayout*>(\"entries\");\n     SendCoinsEntry* entry = qobject_cast<SendCoinsEntry*>(entries->itemAt(0)->widget());\n     entry->findChild<QValidatedLineEdit*>(\"payTo\")->setText(QString::fromStdString(address.ToString()));\n     entry->findChild<BitcoinAmountField*>(\"payAmount\")->setValue(amount);\n+    sendCoinsDialog.findChild<QFrame*>(\"frameFee\")\n+        ->findChild<QFrame*>(\"frameFeeSelection\")\n+        ->findChild<QCheckBox*>(\"optInRBF\")\n+        ->setCheckState(rbf ? Qt::Checked : Qt::Unchecked);\n     uint256 txid;\n     boost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect([&txid](CWallet*, const uint256& hash, ChangeType status) {\n         if (status == CT_NEW) txid = hash;\n@@ -66,6 +90,32 @@ QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)\n     return {};\n }\n \n+//! Invoke bumpfee on txid and check results.\n+void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, std::string expectError, bool cancel)\n+{\n+    QTableView* table = view.findChild<QTableView*>(\"transactionView\");\n+    QModelIndex index = FindTx(*table->selectionModel()->model(), txid);\n+    QVERIFY2(index.isValid(), \"Could not find BumpFee txid\");\n+\n+    // Select row in table, invoke context menu, and make sure bumpfee action is\n+    // enabled or disabled as expected.\n+    QAction* action = view.findChild<QAction*>(\"bumpFeeAction\");\n+    table->selectionModel()->select(index, QItemSelectionModel::ClearAndSelect | QItemSelectionModel::Rows);\n+    action->setEnabled(expectDisabled);\n+    table->customContextMenuRequested({});\n+    QCOMPARE(action->isEnabled(), !expectDisabled);\n+\n+    action->setEnabled(true);\n+    QString text;\n+    if (expectError.empty()) {\n+        ConfirmSend(&text, cancel);\n+    } else {\n+        ConfirmMessage(&text);\n+    }\n+    action->trigger();\n+    QVERIFY(text.indexOf(QString::fromStdString(expectError)) != -1);\n+}\n+\n //! Simple qt wallet tests.\n //\n // Test widgets can be debugged interactively calling show() on them and\n@@ -81,9 +131,11 @@ QModelIndex FindTx(const QAbstractItemModel& model, const uint256& txid)\n //     src/qt/test/test_bitcoin-qt -platform cocoa    # macOS\n void TestSendCoins()\n {\n-    // Set up wallet and chain with 101 blocks (1 mature block for spending).\n+    // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n-    test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n+    for (int i = 0; i < 5; ++i) {\n+        test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n+    }\n     bitdb.MakeMock();\n     std::unique_ptr<CWalletDBWrapper> dbw(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"));\n     CWallet wallet(std::move(dbw));\n@@ -100,19 +152,27 @@ void TestSendCoins()\n     // Create widgets for sending coins and listing transactions.\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n+    TransactionView transactionView(platformStyle.get());\n     OptionsModel optionsModel;\n     WalletModel walletModel(platformStyle.get(), &wallet, &optionsModel);\n     sendCoinsDialog.setModel(&walletModel);\n+    transactionView.setModel(&walletModel);\n \n     // Send two transactions, and verify they are added to transaction list.\n     TransactionTableModel* transactionTableModel = walletModel.getTransactionTableModel();\n-    QCOMPARE(transactionTableModel->rowCount({}), 101);\n-    uint256 txid1 = SendCoins(wallet, sendCoinsDialog, CBitcoinAddress(CKeyID()), 5 * COIN);\n-    uint256 txid2 = SendCoins(wallet, sendCoinsDialog, CBitcoinAddress(CKeyID()), 10 * COIN);\n-    QCOMPARE(transactionTableModel->rowCount({}), 103);\n+    QCOMPARE(transactionTableModel->rowCount({}), 105);\n+    uint256 txid1 = SendCoins(wallet, sendCoinsDialog, CBitcoinAddress(CKeyID()), 5 * COIN, false /* rbf */);\n+    uint256 txid2 = SendCoins(wallet, sendCoinsDialog, CBitcoinAddress(CKeyID()), 10 * COIN, true /* rbf */);\n+    QCOMPARE(transactionTableModel->rowCount({}), 107);\n     QVERIFY(FindTx(*transactionTableModel, txid1).isValid());\n     QVERIFY(FindTx(*transactionTableModel, txid2).isValid());\n \n+    // Call bumpfee. Test disabled, canceled, enabled, then failing cases.\n+    BumpFee(transactionView, txid1, true /* expect disabled */, \"not BIP 125 replaceable\" /* expected error */, false /* cancel */);\n+    BumpFee(transactionView, txid2, false /* expect disabled */, {} /* expected error */, true /* cancel */);\n+    BumpFee(transactionView, txid2, false /* expect disabled */, {} /* expected error */, false /* cancel */);\n+    BumpFee(transactionView, txid2, false /* expect disabled */, \"already bumped\" /* expected error */, false /* cancel */);\n+\n     bitdb.Flush(true);\n     bitdb.Reset();\n }"
      },
      {
        "sha": "5da10e41b953843e021a083910e2932a08dba4e3",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5749a48821f6a83d17b4f4626d09d6abdada5135/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5749a48821f6a83d17b4f4626d09d6abdada5135/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=5749a48821f6a83d17b4f4626d09d6abdada5135",
        "patch": "@@ -136,10 +136,12 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     view->installEventFilter(this);\n \n     transactionView = view;\n+    transactionView->setObjectName(\"transactionView\");\n \n     // Actions\n     abandonAction = new QAction(tr(\"Abandon transaction\"), this);\n     bumpFeeAction = new QAction(tr(\"Increase transaction fee\"), this);\n+    bumpFeeAction->setObjectName(\"bumpFeeAction\");\n     QAction *copyAddressAction = new QAction(tr(\"Copy address\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n@@ -150,6 +152,7 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     QAction *showDetailsAction = new QAction(tr(\"Show transaction details\"), this);\n \n     contextMenu = new QMenu(this);\n+    contextMenu->setObjectName(\"contextMenu\");\n     contextMenu->addAction(copyAddressAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyAmountAction);\n@@ -380,7 +383,7 @@ void TransactionView::contextualMenu(const QPoint &point)\n \n     if(index.isValid())\n     {\n-        contextMenu->exec(QCursor::pos());\n+        contextMenu->popup(transactionView->viewport()->mapToGlobal(point));\n     }\n }\n \n@@ -416,7 +419,7 @@ void TransactionView::bumpFee()\n     // Bump tx fee over the walletModel\n     if (model->bumpFee(hash)) {\n         // Update the table\n-        model->getTransactionTableModel()->updateTransaction(hashQStr, CT_UPDATED, false);\n+        model->getTransactionTableModel()->updateTransaction(hashQStr, CT_UPDATED, true);\n     }\n }\n "
      }
    ]
  }
]