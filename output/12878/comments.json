[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378780320",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-378780320",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 378780320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc4MDMyMA==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T23:52:01Z",
    "updated_at": "2018-04-04T23:52:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "Bumped to address @jnewbery's suggestions. Unsquashed changes are at https://github.com/ajtowns/bitcoin/commits/netconf-refactor-track with commit 26d3faaa28c794b48df2a12cdb4a9a71de3d1a96 here having the same tree  as commit 3467454beff8e7b2df87f9a0e29391eb14a8e6c3 on the -track branch:\r\n\r\n```\r\n$ for a in netconf-refactor{,-track}; do git log -1 --pretty=\"%h -> %T\" $a; done\r\n26d3faaa28 -> ef5b209a05c28afb98e0ce8e05e9cbc54dfebeaf\r\n3467454bef -> ef5b209a05c28afb98e0ce8e05e9cbc54dfebeaf\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378780320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378965847",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-378965847",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 378965847,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODk2NTg0Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T14:57:44Z",
    "updated_at": "2018-04-05T14:57:44Z",
    "author_association": "MEMBER",
    "body": "utACK 26d3faaa28c794b48df2a12cdb4a9a71de3d1a96",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378965847/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379042633",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379042633",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379042633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA0MjYzMw==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T19:00:45Z",
    "updated_at": "2018-04-05T19:00:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased due to conflict with #10244, and renamed ChainNameFromCommandLine to GetChainName. Not sure how useful the -track branch is since it's now got a merge with master, but it still works: https://github.com/ajtowns/bitcoin/commit/492bbcdc558ae0edae0e2beb49a50932c8d576c6 follows on from where the tracking branch left off, and matches this branches current head, 77a733a99a75bdd04ad94df830e5bdc8a6040959:\r\n\r\n```\r\n$ for a in netconf-refactor{,-track}; do git log -1 --pretty=\"%h -> %T\" $a; done\r\n77a733a99a -> 4b6b60ed983260f4f3219ad28825d209ff5a7957\r\n492bbcdc55 -> 4b6b60ed983260f4f3219ad28825d209ff5a7957\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379042633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379055825",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379055825",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379055825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA1NTgyNQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T19:49:30Z",
    "updated_at": "2018-04-05T19:49:30Z",
    "author_association": "MEMBER",
    "body": "utACK 77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379055825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379056681",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379056681",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379056681,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA1NjY4MQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T19:52:58Z",
    "updated_at": "2018-04-05T19:52:58Z",
    "author_association": "MEMBER",
    "body": "utACK 77a733a99a75bdd04ad94df830e5bdc8a6040959, not too concerned about the nit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379056681/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379056921",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379056921",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379056921,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTA1NjkyMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T19:53:53Z",
    "updated_at": "2018-04-05T19:53:53Z",
    "author_association": "MEMBER",
    "body": "ACK 77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379056921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379102083",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379102083",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379102083,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTEwMjA4Mw==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T23:03:30Z",
    "updated_at": "2018-04-05T23:06:19Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, this should also help my arg refactor a bit\r\nEDIT: utACK https://github.com/bitcoin/bitcoin/pull/12878/commits/77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379102083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379397256",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379397256",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379397256,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTM5NzI1Ng==",
    "user": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?u=c6cf723ac2c78d38bf31ae2665cb16e3e4452227&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-06T22:03:47Z",
    "updated_at": "2018-04-06T22:03:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 77a733a",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379397256/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379554354",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379554354",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379554354,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU1NDM1NA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-08T14:23:25Z",
    "updated_at": "2018-04-08T14:23:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK 77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379554354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379582936",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#issuecomment-379582936",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/12878",
    "id": 379582936,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTU4MjkzNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-08T21:10:58Z",
    "updated_at": "2018-04-08T21:10:58Z",
    "author_association": "MEMBER",
    "body": "post merge utACK 77a733a beside question",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379582936/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179046912",
    "pull_request_review_id": 109214721,
    "id": 179046912,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTA0NjkxMg==",
    "diff_hunk": "@@ -265,6 +270,106 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n }\n \n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+    BOOST_CHECK(1\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" ); // 1st value takes precedence\n+    BOOST_CHECK(1\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" ); // 1st value takes precedence\n+",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 72,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "0068900bf239993de7f4c124f53beaf28366294b",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, these probably should be merged back into the previous check\r\n",
    "created_at": "2018-04-04T07:22:37Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179046912",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179046912"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179046912"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179046912/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 363,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179157828",
    "pull_request_review_id": 109348348,
    "id": 179157828,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE1NzgyOA==",
    "diff_hunk": "@@ -305,6 +307,12 @@ class ArgsManager\n     // been set. Also called directly in testing.\n     void ForceSetArg(const std::string& strArg, const std::string& strValue);\n \n+    /**\n+     * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+     * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.",
    "path": "src/util.h",
    "position": null,
    "original_position": 15,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This comment is wrong (since 55a89751faaada5598771d10401030e9e86eecbd when `MAX_NETWORK_TYPES` was removed). May as well remove it now that you're moving the function.",
    "created_at": "2018-04-04T14:22:26Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179157828",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179157828"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179157828"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179157828/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 312,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179163873",
    "pull_request_review_id": 109348348,
    "id": 179163873,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE2Mzg3Mw==",
    "diff_hunk": "@@ -735,35 +735,56 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    // assert(streamConfig.good());",
    "path": "src/util.cpp",
    "position": null,
    "original_position": 10,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "remove comment?",
    "created_at": "2018-04-04T14:37:01Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179163873",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179163873"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179163873"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179163873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 740,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166079",
    "pull_request_review_id": 109348348,
    "id": 179166079,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE2NjA3OQ==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 76,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand this comment. Can you make it more explicit about what you mean, or remove?",
    "created_at": "2018-04-04T14:42:10Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166079",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166079"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166079"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166079/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 319,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166647",
    "pull_request_review_id": 109348348,
    "id": 179166647,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE2NjY0Nw==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 84,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "and `h` and `i`?",
    "created_at": "2018-04-04T14:43:44Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166647",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166647"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179166647"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179166647/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 327,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179170959",
    "pull_request_review_id": 109348348,
    "id": 179170959,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE3MDk1OQ==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this is clearer in C++11:\r\n\r\n`    for (auto def : { false, true }) {`",
    "created_at": "2018-04-04T14:55:25Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179170959",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179170959"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179170959"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179170959/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 364,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173614",
    "pull_request_review_id": 109348348,
    "id": 179173614,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE3MzYxNA==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 143,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why no: `    BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1);` ?",
    "created_at": "2018-04-04T15:02:16Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173614",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173614"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173614"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 390,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173942",
    "pull_request_review_id": 109348348,
    "id": 179173942,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTE3Mzk0Mg==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2\n+                && test_args.GetArgs(\"-h\").front() == \"1\"\n+                && test_args.GetArgs(\"-h\").back() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 2\n+                && test_args.GetArgs(\"-i\").front() == \"0\"\n+                && test_args.GetArgs(\"-i\").back() == \"1\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-ccc\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-d\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-fff\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-ggg\")); // IsArgNegated==true when noggg=0",
    "path": "src/test/util_tests.cpp",
    "position": 162,
    "original_position": 158,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> IsArgNegated==true when noggg=0\r\n\r\nyuck. Can we change that?",
    "created_at": "2018-04-04T15:03:10Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173942",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173942"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179173942"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179173942/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 405,
    "original_line": 405,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179296164",
    "pull_request_review_id": 109515905,
    "id": 179296164,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTI5NjE2NA==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2\n+                && test_args.GetArgs(\"-h\").front() == \"1\"\n+                && test_args.GetArgs(\"-h\").back() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 2\n+                && test_args.GetArgs(\"-i\").front() == \"0\"\n+                && test_args.GetArgs(\"-i\").back() == \"1\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-ccc\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-d\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-fff\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-ggg\")); // IsArgNegated==true when noggg=0",
    "path": "src/test/util_tests.cpp",
    "position": 162,
    "original_position": 158,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's changed in #11862 (and easy to change on its own as well). I think it makes sense for this PR to just refactor/add tests rather than change functionality though.",
    "created_at": "2018-04-04T21:59:49Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179296164",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179296164"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179296164"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179296164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 405,
    "original_line": 405,
    "side": "RIGHT",
    "in_reply_to_id": 179173942
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179311284",
    "pull_request_review_id": 109533126,
    "id": 179311284,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTMxMTI4NA==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 121,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, it is. But no point to `auto` instead of `bool` :)",
    "created_at": "2018-04-04T23:19:10Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179311284",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179311284"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179311284"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179311284/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 364,
    "side": "RIGHT",
    "in_reply_to_id": 179170959
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179330564",
    "pull_request_review_id": 109554929,
    "id": 179330564,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTMzMDU2NA==",
    "diff_hunk": "@@ -735,35 +735,55 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    LOCK(cs_args);\n \n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(stream, setOptions), end; it != end; ++it)\n     {\n-        LOCK(cs_args);\n-        std::set<std::string> setOptions;\n-        setOptions.insert(\"*\");\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegatedOption(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0)\n+            mapArgs[strKey] = strValue;\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n \n-        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-        {\n-            // Don't overwrite existing settings so command line settings override bitcoin.conf\n-            std::string strKey = std::string(\"-\") + it->string_key;\n-            std::string strValue = it->value[0];\n-            InterpretNegatedOption(strKey, strValue);\n-            if (mapArgs.count(strKey) == 0)\n-                mapArgs[strKey] = strValue;\n-            mapMultiArgs[strKey].push_back(strValue);\n-        }\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n+{\n+    fs::ifstream stream(GetConfigFile(confPath));\n+\n+    // ok to not have a config file\n+    if (stream.good()) {\n+        ReadConfigStream(stream);\n     }\n+\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!fs::is_directory(GetDataDir(false))) {\n         throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n     }\n }\n \n+std::string ArgsManager::ChainNameFromCommandLine() const",
    "path": "src/util.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "26d3faaa28c794b48df2a12cdb4a9a71de3d1a96",
    "user": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could just call this `ChainName` given `gArgs` is all about the command line / config files already.",
    "created_at": "2018-04-05T01:34:05Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179330564",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179330564"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179330564"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179330564/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 773,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179332381",
    "pull_request_review_id": 109556961,
    "id": 179332381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTMzMjM4MQ==",
    "diff_hunk": "@@ -735,35 +735,55 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    LOCK(cs_args);\n \n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(stream, setOptions), end; it != end; ++it)\n     {\n-        LOCK(cs_args);\n-        std::set<std::string> setOptions;\n-        setOptions.insert(\"*\");\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegatedOption(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0)\n+            mapArgs[strKey] = strValue;\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n \n-        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-        {\n-            // Don't overwrite existing settings so command line settings override bitcoin.conf\n-            std::string strKey = std::string(\"-\") + it->string_key;\n-            std::string strValue = it->value[0];\n-            InterpretNegatedOption(strKey, strValue);\n-            if (mapArgs.count(strKey) == 0)\n-                mapArgs[strKey] = strValue;\n-            mapMultiArgs[strKey].push_back(strValue);\n-        }\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n+{\n+    fs::ifstream stream(GetConfigFile(confPath));\n+\n+    // ok to not have a config file\n+    if (stream.good()) {\n+        ReadConfigStream(stream);\n     }\n+\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!fs::is_directory(GetDataDir(false))) {\n         throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n     }\n }\n \n+std::string ArgsManager::ChainNameFromCommandLine() const",
    "path": "src/util.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "26d3faaa28c794b48df2a12cdb4a9a71de3d1a96",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ":+1:  Probably GetChainName() would be slightly more consistent...",
    "created_at": "2018-04-05T01:51:00Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179332381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179332381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179332381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179332381/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 773,
    "side": "RIGHT",
    "in_reply_to_id": 179330564
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492185",
    "pull_request_review_id": 109746157,
    "id": 179492185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ5MjE4NQ==",
    "diff_hunk": "@@ -253,16 +258,150 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n+\n+    // A double negative is a positive.\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Config test\n+    const char *conf_test = \"nofoo=1\\nfoo=1\\nnobar=0\\n\";\n+    testArgs.ParseParameters(1, (char**)argv_test);\n+    testArgs.ReadConfigString(conf_test);\n+\n+    // This was passed twice, second one overrides the negative setting,\n+    // but not the value.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n+\n+    // Combined test\n+    const char *combo_test_args[] = {\"ignored\", \"-nofoo\", \"-bar\"};\n+    const char *combo_test_conf = \"foo=1\\nnobar=1\\n\";\n+    testArgs.ParseParameters(3, (char**)combo_test_args);\n+    testArgs.ReadConfigString(combo_test_conf);\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n+                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n+                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+\n+    // Command line overrides, but doesn't erase old setting\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n+                && testArgs.GetArgs(\"-bar\").front() == \"\"\n+                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n+{\n+    const char *str_config =\n+       \"a=\\n\"\n+       \"b=1\\n\"\n+       \"ccc=argument\\n\"\n+       \"ccc=multiple\\n\"\n+       \"d=e\\n\"\n+       \"nofff=1\\n\"\n+       \"noggg=0\\n\"\n+       \"h=1\\n\"    // negated edge cases in config behave very oddly\n+       \"noh=1\\n\"\n+       \"noi=1\\n\"\n+       \"i=1\\n\";\n+\n+    TestArgsManager test_args;\n+\n+    test_args.ReadConfigString(str_config);\n+    // expectation: a, b, ccc, d, fff, ggg end up in map\n+\n+    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n+                && test_args.GetMapArgs().count(\"-b\")\n+                && test_args.GetMapArgs().count(\"-ccc\")\n+                && test_args.GetMapArgs().count(\"-d\")\n+                && test_args.GetMapArgs().count(\"-fff\")\n+                && test_args.GetMapArgs().count(\"-ggg\")\n+                && test_args.GetMapArgs().count(\"-h\")\n+                && test_args.GetMapArgs().count(\"-i\")\n+               );\n+\n+    BOOST_CHECK(test_args.IsArgSet(\"-a\")\n+                && test_args.IsArgSet(\"-b\")\n+                && test_args.IsArgSet(\"-ccc\")\n+                && test_args.IsArgSet(\"-d\")\n+                && test_args.IsArgSet(\"-fff\")\n+                && test_args.IsArgSet(\"-ggg\")\n+                && test_args.IsArgSet(\"-h\")\n+                && test_args.IsArgSet(\"-i\")\n+                && !test_args.IsArgSet(\"-zzz\")\n+               );\n+\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-ccc\", \"xxx\") == \"argument\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+               );\n+\n+    for (int i = 0; i < 2; i++) {\n+        bool def = (i > 0);\n+        BOOST_CHECK(test_args.GetBoolArg(\"-a\", def)\n+                     && test_args.GetBoolArg(\"-b\", def)\n+                     && !test_args.GetBoolArg(\"-ccc\", def)\n+                     && !test_args.GetBoolArg(\"-d\", def)\n+                     && !test_args.GetBoolArg(\"-fff\", def)\n+                     && test_args.GetBoolArg(\"-ggg\", def)\n+                     && test_args.GetBoolArg(\"-h\", def)\n+                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && test_args.GetBoolArg(\"-zzz\", def) == def\n+                   );\n+    }\n+\n+    BOOST_CHECK(test_args.GetArgs(\"-a\").size() == 1\n+                && test_args.GetArgs(\"-a\").front() == \"\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n+                && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n+                && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n+                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2\n+                && test_args.GetArgs(\"-h\").front() == \"1\"\n+                && test_args.GetArgs(\"-h\").back() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 2\n+                && test_args.GetArgs(\"-i\").front() == \"0\"\n+                && test_args.GetArgs(\"-i\").back() == \"1\");\n+    BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n+\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-a\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-b\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-ccc\"));\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-d\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-fff\"));\n+    BOOST_CHECK(test_args.IsArgNegated(\"-ggg\")); // IsArgNegated==true when noggg=0",
    "path": "src/test/util_tests.cpp",
    "position": 162,
    "original_position": 158,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "7edc29f0ce7ba0ea64dc0d64afcdc05bb88e4440",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "sounds good. Keep this PR as refactor only and do behaviour changes in #11862.",
    "created_at": "2018-04-05T14:56:46Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179492185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179492185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492185/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 405,
    "original_line": 405,
    "side": "RIGHT",
    "in_reply_to_id": 179173942
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492489",
    "pull_request_review_id": 109746525,
    "id": 179492489,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTQ5MjQ4OQ==",
    "diff_hunk": "@@ -735,35 +735,55 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-void ArgsManager::ReadConfigFile(const std::string& confPath)\n+void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    fs::ifstream streamConfig(GetConfigFile(confPath));\n-    if (!streamConfig.good())\n-        return; // No bitcoin.conf file is OK\n+    LOCK(cs_args);\n \n+    std::set<std::string> setOptions;\n+    setOptions.insert(\"*\");\n+\n+    for (boost::program_options::detail::config_file_iterator it(stream, setOptions), end; it != end; ++it)\n     {\n-        LOCK(cs_args);\n-        std::set<std::string> setOptions;\n-        setOptions.insert(\"*\");\n+        // Don't overwrite existing settings so command line settings override bitcoin.conf\n+        std::string strKey = std::string(\"-\") + it->string_key;\n+        std::string strValue = it->value[0];\n+        InterpretNegatedOption(strKey, strValue);\n+        if (mapArgs.count(strKey) == 0)\n+            mapArgs[strKey] = strValue;\n+        mapMultiArgs[strKey].push_back(strValue);\n+    }\n+}\n \n-        for (boost::program_options::detail::config_file_iterator it(streamConfig, setOptions), end; it != end; ++it)\n-        {\n-            // Don't overwrite existing settings so command line settings override bitcoin.conf\n-            std::string strKey = std::string(\"-\") + it->string_key;\n-            std::string strValue = it->value[0];\n-            InterpretNegatedOption(strKey, strValue);\n-            if (mapArgs.count(strKey) == 0)\n-                mapArgs[strKey] = strValue;\n-            mapMultiArgs[strKey].push_back(strValue);\n-        }\n+void ArgsManager::ReadConfigFile(const std::string& confPath)\n+{\n+    fs::ifstream stream(GetConfigFile(confPath));\n+\n+    // ok to not have a config file\n+    if (stream.good()) {\n+        ReadConfigStream(stream);\n     }\n+\n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!fs::is_directory(GetDataDir(false))) {\n         throw std::runtime_error(strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str()));\n     }\n }\n \n+std::string ArgsManager::ChainNameFromCommandLine() const",
    "path": "src/util.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "26d3faaa28c794b48df2a12cdb4a9a71de3d1a96",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree that `GetChainName()` is a better name. Can be done in this PR or a future PR.",
    "created_at": "2018-04-05T14:57:36Z",
    "updated_at": "2018-04-05T18:50:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179492489",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492489"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179492489"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179492489/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 773,
    "side": "RIGHT",
    "in_reply_to_id": 179330564
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179581340",
    "pull_request_review_id": 109853188,
    "id": 179581340,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTU4MTM0MA==",
    "diff_hunk": "@@ -737,31 +737,31 @@ fs::path GetConfigFile(const std::string& confPath)\n \n void ArgsManager::ReadConfigStream(std::istream& stream)\n {\n-    if (!stream.good())",
    "path": "src/util.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "087c5d204015e646d65696007415d6e998764631",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Replace this with an assertion instead, even if just to self-document assumptions?",
    "created_at": "2018-04-05T19:50:15Z",
    "updated_at": "2018-04-05T19:50:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179581340",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179581340"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179581340"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179581340/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 740,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179961477",
    "pull_request_review_id": 110300281,
    "id": 179961477,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk2MTQ3Nw==",
    "diff_hunk": "@@ -258,16 +258,52 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In the test case `util_GetBoolArgEdgeCases` you seem to be removing all calls to `GetBoolArg`. Is this intentional?",
    "created_at": "2018-04-08T21:10:20Z",
    "updated_at": "2018-04-08T21:10:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179961477",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179961477"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179961477"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179961477/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 270,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179987090",
    "pull_request_review_id": 110328198,
    "id": 179987090,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3OTk4NzA5MA==",
    "diff_hunk": "@@ -258,16 +258,52 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n {\n     // Test some awful edge cases that hopefully no user will ever exercise.\n     TestArgsManager testArgs;\n+\n+    // Params test\n     const char *argv_test[] = {\"ignored\", \"-nofoo\", \"-foo\", \"-nobar=0\"};\n     testArgs.ParseParameters(4, (char**)argv_test);\n \n     // This was passed twice, second one overrides the negative setting.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-foo\", false) == true);\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n \n     // A double negative is a positive.\n     BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n-    BOOST_CHECK(testArgs.GetBoolArg(\"-bar\", false) == true);",
    "path": "src/test/util_tests.cpp",
    "position": null,
    "original_position": 16,
    "commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "original_commit_id": "77a733a99a75bdd04ad94df830e5bdc8a6040959",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah; I think the edge cases are more clearly tested with GetArg and a clearly distinct default value. The IsArgNegated/GetBoolArg cases are still tested in util_GetBoolArg (via -a and -b).",
    "created_at": "2018-04-09T04:55:21Z",
    "updated_at": "2018-04-09T04:55:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179987090",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179987090"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/12878#discussion_r179987090"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/12878"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/179987090/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 270,
    "side": "LEFT",
    "in_reply_to_id": 179961477
  }
]