[
  {
    "sha": "8d3fe87523ffc86f164ae94da10a84ce0ca06412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDNmZTg3NTIzZmZjODZmMTY0YWU5NGRhMTBhODRjZTBjYTA2NDEy",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-04-20T15:31:47Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2018-05-22T15:15:24Z"
      },
      "message": "getblock for 1-block reorgs in response to compact block message\n\nfilter already in flight requests to same peer only",
      "tree": {
        "sha": "89fa460abdaff3e38ddcaeef11fd7bbb1f4f42c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89fa460abdaff3e38ddcaeef11fd7bbb1f4f42c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d3fe87523ffc86f164ae94da10a84ce0ca06412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d3fe87523ffc86f164ae94da10a84ce0ca06412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d3fe87523ffc86f164ae94da10a84ce0ca06412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d3fe87523ffc86f164ae94da10a84ce0ca06412/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf76c23fbfc8500fa494f8cef8068a67a1388c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf76c23fbfc8500fa494f8cef8068a67a1388c3"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cae9a64c3c395d04199285c123a4bf93b90d1c0b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d3fe87523ffc86f164ae94da10a84ce0ca06412/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d3fe87523ffc86f164ae94da10a84ce0ca06412/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8d3fe87523ffc86f164ae94da10a84ce0ca06412",
        "patch": "@@ -2402,15 +2402,28 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n+        bool in_flight_from_same_peer = fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId();\n \n         if (pindex->nStatus & BLOCK_HAVE_DATA) // Nothing to do here\n             return true;\n \n-        if (pindex->nChainWork <= chainActive.Tip()->nChainWork || // We know something better\n+        if (pindex->nChainWork <= chainActive.Tip()->nChainWork || // We know same or better\n                 pindex->nTx != 0) { // We had this block at some point, but pruned it\n-            if (fAlreadyInFlight) {\n-                // We requested this block for some reason, but our mempool will probably be useless\n+            if (in_flight_from_same_peer\n+                    || (!fAlreadyInFlight && pindex->nChainWork == chainActive.Tip()->nChainWork)) {\n+                // We requested this block for some reason from the same peer\n+                // or just want same height block, but our mempool will probably be useless\n                 // so we just grab the block via normal getdata\n+                std::list<QueuedBlock>::iterator* queued_block_it = nullptr;\n+                if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex, &queued_block_it)) {\n+                    if (!(*queued_block_it)->partialBlock) {\n+                        (*queued_block_it)->partialBlock.reset();\n+                    } else {\n+                        // The block was already in flight using compact blocks from the same peer\n+                        LogPrint(BCLog::NET, \"Peer sent us compact block we were already syncing!\\n\");\n+                        return true;\n+                    }\n+                }\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n@@ -2432,7 +2445,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // possibilities in compact block processing...\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n             if ((!fAlreadyInFlight && nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) ||\n-                 (fAlreadyInFlight && blockInFlightIt->second.first == pfrom->GetId())) {\n+                 (in_flight_from_same_peer)) {\n                 std::list<QueuedBlock>::iterator* queuedBlockIt = nullptr;\n                 if (!MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex, &queuedBlockIt)) {\n                     if (!(*queuedBlockIt)->partialBlock)"
      }
    ]
  }
]