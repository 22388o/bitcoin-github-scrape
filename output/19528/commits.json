[
  {
    "sha": "fa459bdc87bbb050ca1c8d469023a96ed798540e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTQ1OWJkYzg3YmJiMDUwY2ExYzhkNDY5MDIzYTk2ZWQ3OTg1NDBl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-15T17:45:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-02T19:32:30Z"
      },
      "message": "rpc: Treat all args after a hidden arg as hidden as well\n\nThis commit has no effect right now, but hardens the code for the future",
      "tree": {
        "sha": "8da3e363a68e96727de37b4f6c8412b9514a8cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8da3e363a68e96727de37b4f6c8412b9514a8cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa459bdc87bbb050ca1c8d469023a96ed798540e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgH8AwAi+SFaRh/hBBzGVXTDRYkKbOrgmOug6Ekep4paV6xhFN74+pfWgACU66x\nB6HdJnADDG//8p9soikl8+FxAsEzHMJ3istP+gZXrOeJZqtqy2pFwEy4cmk1slug\nxYEXzzpmqZYMYIk1hyjPuAB33ff0baW6rp/l54VD6PLfMt3al9vm94eVGc5NGAyr\nya2bfn4QZPVpaQ+3qQDsd/y8W1EPr8eVW15iRCkhqM7JokAb3w8VeLw3L6UTRX5f\ngLyFI8Th6S5mDHETXEe+VL+rcPMh7O1W1KTq4Xk1NPjveCTqr5DTFLpna3KqZgqk\nGNhNnvgeH4X5Se3HTlcQsRoYi90UEue+lKHJWlhnohNOOQJJpVVizqK48MVasKcK\nDPXwdZIrMh439gGiRsbOBYb0+B+yk3rAzhBZR7dnrZmyZC8M5VKxEXGptNoAo36w\nTDg58lBj5rOAzNlAIHeFWh+Pt3DLfoonQIguz5O7t2+GmkFcvCjPmcX2b4ro9hd3\nDwIMEgoH\n=4FL8\n-----END PGP SIGNATURE-----",
        "payload": "tree 8da3e363a68e96727de37b4f6c8412b9514a8cdf\nparent a78742830aa35bf57bcb0a4730977a1e5a1876bc\nauthor MarcoFalke <falke.marco@gmail.com> 1594835101 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1596396750 +0200\n\nrpc: Treat all args after a hidden arg as hidden as well\n\nThis commit has no effect right now, but hardens the code for the future\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa459bdc87bbb050ca1c8d469023a96ed798540e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa459bdc87bbb050ca1c8d469023a96ed798540e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa459bdc87bbb050ca1c8d469023a96ed798540e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a78742830aa35bf57bcb0a4730977a1e5a1876bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78742830aa35bf57bcb0a4730977a1e5a1876bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a78742830aa35bf57bcb0a4730977a1e5a1876bc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e3db1dd513f2d35401c25ae3ab87228384b18205",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa459bdc87bbb050ca1c8d469023a96ed798540e/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa459bdc87bbb050ca1c8d469023a96ed798540e/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=fa459bdc87bbb050ca1c8d469023a96ed798540e",
        "patch": "@@ -504,7 +504,7 @@ std::string RPCHelpMan::ToString() const\n     ret += m_name;\n     bool was_optional{false};\n     for (const auto& arg : m_args) {\n-        if (arg.m_hidden) continue;\n+        if (arg.m_hidden) break; // Any arg that follows is also hidden\n         const bool optional = arg.IsOptional();\n         ret += \" \";\n         if (optional) {\n@@ -526,7 +526,7 @@ std::string RPCHelpMan::ToString() const\n     Sections sections;\n     for (size_t i{0}; i < m_args.size(); ++i) {\n         const auto& arg = m_args.at(i);\n-        if (arg.m_hidden) continue;\n+        if (arg.m_hidden) break; // Any arg that follows is also hidden\n \n         if (i == 0) ret += \"\\nArguments:\\n\";\n "
      }
    ]
  },
  {
    "sha": "fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTg5Y2E5YjViZDMzNDgxM2ZkN2U3ZWRiMjAyYzU2YjM1MDc2ZThk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-15T19:29:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-02T19:32:36Z"
      },
      "message": "refactor: Use C++11 range based for loops to simplify rpc code",
      "tree": {
        "sha": "bb160f22ce43ace7f87a76de050e222f13a24758",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb160f22ce43ace7f87a76de050e222f13a24758"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgeTAwAmdkgEA2VZdGnlBDJLZInZcHywBTmsOCcurRlHkfmmgYbYiRJK+sS555W\n8xD7apiBHuTN41eQiy0Gm4VTwHWNRBCzTKGEv9kqYPViF6ci1Ykra1HoXxjZIX+5\nNeM6UC/PH7Mc1idwhhQFsWsBUgY4yi+opDOf2sNmFvOktLOATxkyu/ZxoJAPXBJr\nOteep6faok78gYupptph0rmLXatUMc18xzOnrc0J7Bo5d55OIT1hEufq06YJqvpf\n/fYEb0VR+iyG7T3bFLhzhCM0T+lw0A4yUeGocZiy50kI8BEddigSn8sg7Fn91tsO\nrV7u6abwP0Fch+GjbjXktVgfpKfiey2ak3hnG+DMQmdRYcKIpo52hhpt1qABPTwV\n5wN9GA+5KOCjeaS4ZsQg8rDDEz+HutEUKPX3nfcxvO3V1V7eeZ3e3xAuE00FOdiH\nxHnFXL4Fo+QPkOp2lh60s7RZjNvgO3gXWgjlM4biAiHhnxrtI9YBUVB5tvV3Z59R\nALKO2mCg\n=zG7z\n-----END PGP SIGNATURE-----",
        "payload": "tree bb160f22ce43ace7f87a76de050e222f13a24758\nparent fa459bdc87bbb050ca1c8d469023a96ed798540e\nauthor MarcoFalke <falke.marco@gmail.com> 1594841381 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1596396756 +0200\n\nrefactor: Use C++11 range based for loops to simplify rpc code\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa459bdc87bbb050ca1c8d469023a96ed798540e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa459bdc87bbb050ca1c8d469023a96ed798540e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa459bdc87bbb050ca1c8d469023a96ed798540e"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 17,
      "deletions": 22
    },
    "files": [
      {
        "sha": "868ff88d08e8c609ffe03bf407fd7abd841b7d46",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -2407,7 +2407,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"dumptxoutset\",           &dumptxoutset,           {\"path\"} },\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+    for (const auto& c : commands) {\n+        t.appendCommand(c.name, &c);\n+    }\n }"
      },
      {
        "sha": "c357d6f5b45e3e75108acac1a01f975b02e86197",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -1200,7 +1200,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"estimaterawfee\",         &estimaterawfee,         {\"conf_target\", \"threshold\"} },\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+    for (const auto& c : commands) {\n+        t.appendCommand(c.name, &c);\n+    }\n }"
      },
      {
        "sha": "eee6f79437ad01975bf6d063e11cac09fb4d22cb",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -619,7 +619,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"echojson\",               &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+    for (const auto& c : commands) {\n+        t.appendCommand(c.name, &c);\n+    }\n }"
      },
      {
        "sha": "4c0cfb8ba4ad298d760ea31cb6201426cd7cb7ca",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -796,7 +796,7 @@ static const CRPCCommand commands[] =\n     { \"network\",            \"getnodeaddresses\",       &getnodeaddresses,       {\"count\"} },\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+    for (const auto& c : commands) {\n+        t.appendCommand(c.name, &c);\n+    }\n }"
      },
      {
        "sha": "a9f5d3cf807500c2cc83dc2a70e0d2246c5a5579",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -1821,7 +1821,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"verifytxoutproof\",             &verifytxoutproof,          {\"proof\"} },\n };\n // clang-format on\n-\n-    for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n-        t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n+    for (const auto& c : commands) {\n+        t.appendCommand(c.name, &c);\n+    }\n }"
      },
      {
        "sha": "9c8e7fe04ae5439a69a80b01a6674aafabd08180",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa89ca9b5bd334813fd7e7edb202c56b35076e8d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "patch": "@@ -256,13 +256,8 @@ static const CRPCCommand vRPCCommands[] =\n \n CRPCTable::CRPCTable()\n {\n-    unsigned int vcidx;\n-    for (vcidx = 0; vcidx < (sizeof(vRPCCommands) / sizeof(vRPCCommands[0])); vcidx++)\n-    {\n-        const CRPCCommand *pcmd;\n-\n-        pcmd = &vRPCCommands[vcidx];\n-        mapCommands[pcmd->name].push_back(pcmd);\n+    for (const auto& c : vRPCCommands) {\n+        appendCommand(c.name, &c);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUwYmRjNzU1NDg5YjJlMjkxZWE1YmEwZTM5ZTQ0YTIwYzZjNmRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-15T20:10:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-02T19:32:40Z"
      },
      "message": "rpc: Limit echo to 10 args",
      "tree": {
        "sha": "86a5ca3fc1ca9a7c71c433b723f6c83daf60bcdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86a5ca3fc1ca9a7c71c433b723f6c83daf60bcdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgoSgv/aMh0YL5MVUVCArIRbjf3U8WA/QVma1vKQsZx3CXw0GOYgT/Qc2YZ7Ygb\nTpN59rpicsh/icpFkW5V/IuAZoVfF+xEC6qO+Af47m3eYSUJJwC+n0Xq56/Dcznh\nFpwHCllwM6GSn4CyaSSYo/R4SCJ9KKj4bkNi2yVIg3PZiB+8jjW5jqfg3cvAyRex\neUpCsXqQ8NSvqQ2E+QU7J2vWnF1MwSzUoH/Ivnq0CeIDUMrt13CtDOf7s2mlLOHe\nFBOLLwcX/IlmZTU18HkDsPnavBQulTUJrExHuzbjsHZ+KE9VPL5j2yMQ+kwV1WW7\n1oT7Q1Cdnd69/Gkx4vzs6T9q6fvjrMFMnUZZzB69r+bU7vV1SDHYac/3YbQuqSj7\nIIHiMEjtHfg+MgSxG7JFT5lpGOk2A59dM8Pje2P90SbNl3pfM0gg51sOc4M4XwQV\nQXOJqAWJAtMC+WBSMNRtsz7TVgcYUxz0Uq8cWJYSZqMrZa4yDJxGikril2ZEAh1I\nK+J/zijl\n=qV1p\n-----END PGP SIGNATURE-----",
        "payload": "tree 86a5ca3fc1ca9a7c71c433b723f6c83daf60bcdd\nparent fa89ca9b5bd334813fd7e7edb202c56b35076e8d\nauthor MarcoFalke <falke.marco@gmail.com> 1594843845 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1596396760 +0200\n\nrpc: Limit echo to 10 args\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa89ca9b5bd334813fd7e7edb202c56b35076e8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa89ca9b5bd334813fd7e7edb202c56b35076e8d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4c90408211adca628b93898ae0b39cbfe539940f",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
        "patch": "@@ -583,16 +583,29 @@ static UniValue echo(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"echo|echojson ...\",\n                 \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n-                \"\\nIt will return an internal bug report when exactly 100 arguments are passed.\\n\"\n+                \"\\nIt will return an internal bug report when arg9='trigger_internal_bug' is passed.\\n\"\n                 \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n                 \"bitcoin-cli and the GUI. There is no server-side difference.\",\n-                {},\n+                {\n+                    {\"arg0\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg1\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg2\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg3\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg4\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg5\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg6\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg7\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg8\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                    {\"arg9\", RPCArg::Type::STR, RPCArg::Optional::OMITTED_NAMED_ARG, \"\"},\n+                },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"Returns whatever was passed in\"},\n                 RPCExamples{\"\"},\n             }.ToString()\n         );\n \n-    CHECK_NONFATAL(request.params.size() != 100);\n+    if (request.params[9].isStr()) {\n+        CHECK_NONFATAL(request.params[9].get_str() != \"trigger_internal_bug\");\n+    }\n \n     return request.params;\n }"
      },
      {
        "sha": "cc5a264adbd71e250b6e38c351d3045542b4de9a",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
        "patch": "@@ -27,8 +27,8 @@ def run_test(self):\n         self.log.info(\"test CHECK_NONFATAL\")\n         assert_raises_rpc_error(\n             -1,\n-            \"Internal bug detected: 'request.params.size() != 100'\",\n-            lambda: node.echo(*[0] * 100),\n+            'Internal bug detected: \\'request.params[9].get_str() != \"trigger_internal_bug\"\\'',\n+            lambda: node.echo(arg9='trigger_internal_bug'),\n         )\n \n         self.log.info(\"test getmemoryinfo\")"
      }
    ]
  },
  {
    "sha": "fa77de2baa40ee828c850ef4068c76cc3619e87b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTc3ZGUyYmFhNDBlZTgyOGM4NTBlZjQwNjhjNzZjYzM2MTllODdi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-15T19:26:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-08-02T19:33:27Z"
      },
      "message": "rpc: Assert that RPCArg names are equal to CRPCCommand ones (misc)",
      "tree": {
        "sha": "de06e09c45caaf7cded97e0a0b0aeced2687c1f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de06e09c45caaf7cded97e0a0b0aeced2687c1f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa77de2baa40ee828c850ef4068c76cc3619e87b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgsEwv/VEgp+b4VPWRD7QA6trPdCKaxOxS9ai0habysRff4BaxR/gN5EktXX7zn\ndeoQlHyn5vvN0v5/icn4LsIxAuU7RB3pHTGtyojQBUehjsdb8BARQgBnUkJZGTm8\nqa40z2aj+UC8jUzKwatmdBzjZWTM23C4P1fWRxNLt/csEUkPi7XFuIuCl7IKbPKJ\nsIR2SkkKmb3SOKBgoAW/3uTOmylF9r9cTdiWvSj86fqN8YphulSzYrWeSJfJbE7g\nLYmXv3USIgr+y+OkuZ0WIw8oW1hgmA105zLhccq92sHDuvFRkmELbTlWpbqqDPcY\n7gPbdt71n4P/VqkD95pEe1NRN1S76nYl6sjU6KvoqNH+cWJS58yTaVgs+maKkFj0\n9s95aqS0Qvo2i3VbzyQEJVGJt2r8Wuvixk1frCrC9GrlSO7F6uMngsSFlQ6zOZp2\nbfButby88rVRYD1qzP6L/Jm2ETyVHuAVJNrVe9T/QMlIvzXeE8YDo+/TpIUJ+5ER\nFdZ27k8+\n=X1On\n-----END PGP SIGNATURE-----",
        "payload": "tree de06e09c45caaf7cded97e0a0b0aeced2687c1f4\nparent fa50bdc755489b2e291ea5ba0e39e44a20c6c6de\nauthor MarcoFalke <falke.marco@gmail.com> 1594841182 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1596396807 +0200\n\nrpc: Assert that RPCArg names are equal to CRPCCommand ones (misc)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa77de2baa40ee828c850ef4068c76cc3619e87b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa77de2baa40ee828c850ef4068c76cc3619e87b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa77de2baa40ee828c850ef4068c76cc3619e87b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa50bdc755489b2e291ea5ba0e39e44a20c6c6de"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 73,
      "deletions": 47
    },
    "files": [
      {
        "sha": "ff31bee1e35812533d0a5826ef0bb4a26e219caf",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 47,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa77de2baa40ee828c850ef4068c76cc3619e87b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa77de2baa40ee828c850ef4068c76cc3619e87b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fa77de2baa40ee828c850ef4068c76cc3619e87b",
        "patch": "@@ -27,9 +27,9 @@\n \n #include <univalue.h>\n \n-static UniValue validateaddress(const JSONRPCRequest& request)\n+static RPCHelpMan validateaddress()\n {\n-            RPCHelpMan{\"validateaddress\",\n+    return RPCHelpMan{\"validateaddress\",\n                 \"\\nReturn information about the given bitcoin address.\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to validate\"},\n@@ -50,8 +50,8 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n                     HelpExampleCli(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\") +\n                     HelpExampleRpc(\"validateaddress\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n     bool isValid = IsValidDestination(dest);\n \n@@ -69,11 +69,13 @@ static UniValue validateaddress(const JSONRPCRequest& request)\n         ret.pushKVs(detail);\n     }\n     return ret;\n+},\n+    };\n }\n \n-static UniValue createmultisig(const JSONRPCRequest& request)\n+static RPCHelpMan createmultisig()\n {\n-            RPCHelpMan{\"createmultisig\",\n+    return RPCHelpMan{\"createmultisig\",\n                 \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n                 \"It returns a json object with the address and redeemScript.\\n\",\n                 {\n@@ -98,8 +100,8 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"createmultisig\", \"2, \\\"[\\\\\\\"03789ed0bb717d88f7d321a368d905e7430207ebbd82bd342cf11ae157a7ace5fd\\\\\\\",\\\\\\\"03dbc6764b8884a92e871274b87583e6d5c2a58819473e17e107ef3f6aa5a61626\\\\\\\"]\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     int required = request.params[0].get_int();\n \n     // Get the public keys\n@@ -135,11 +137,13 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     result.pushKV(\"descriptor\", descriptor->ToString());\n \n     return result;\n+},\n+    };\n }\n \n-UniValue getdescriptorinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getdescriptorinfo()\n {\n-            RPCHelpMan{\"getdescriptorinfo\",\n+    return RPCHelpMan{\"getdescriptorinfo\",\n             {\"\\nAnalyses a descriptor.\\n\"},\n             {\n                 {\"descriptor\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The descriptor.\"},\n@@ -157,8 +161,9 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"Analyse a descriptor\\n\" +\n                 HelpExampleCli(\"getdescriptorinfo\", \"\\\"wpkh([d34db33f/84h/0h/0h]0279be667ef9dcbbac55a06295Ce870b07029Bfcdb2dce28d959f2815b16f81798)\\\"\")\n-            }}.Check(request);\n-\n+            },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR});\n \n     FlatSigningProvider provider;\n@@ -175,11 +180,13 @@ UniValue getdescriptorinfo(const JSONRPCRequest& request)\n     result.pushKV(\"issolvable\", desc->IsSolvable());\n     result.pushKV(\"hasprivatekeys\", provider.keys.size() > 0);\n     return result;\n+},\n+    };\n }\n \n-UniValue deriveaddresses(const JSONRPCRequest& request)\n+static RPCHelpMan deriveaddresses()\n {\n-            RPCHelpMan{\"deriveaddresses\",\n+    return RPCHelpMan{\"deriveaddresses\",\n             {\"\\nDerives one or more addresses corresponding to an output descriptor.\\n\"\n             \"Examples of output descriptors are:\\n\"\n             \"    pkh(<pubkey>)                        P2PKH outputs for the given pubkey\\n\"\n@@ -202,8 +209,9 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n                 HelpExampleCli(\"deriveaddresses\", \"\\\"wpkh([d34db33f/84h/0h/0h]xpub6DJ2dNUysrn5Vt36jH2KLBT2i1auw1tTSSomg8PhqNiUtx8QX2SvC9nrHu81fT41fvDUnhMjEzQgXnQjKEu3oaqMSzhSrHMxyyoEAmUHQbY/0/*)#cjjspncu\\\" \\\"[0,2]\\\"\")\n-            }}.Check(request);\n-\n+            },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType()}); // Range argument is checked later\n     const std::string desc_str = request.params[0].get_str();\n \n@@ -254,11 +262,13 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n     }\n \n     return addresses;\n+},\n+    };\n }\n \n-static UniValue verifymessage(const JSONRPCRequest& request)\n+static RPCHelpMan verifymessage()\n {\n-            RPCHelpMan{\"verifymessage\",\n+    return RPCHelpMan{\"verifymessage\",\n                 \"\\nVerify a signed message\\n\",\n                 {\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n@@ -278,8 +288,8 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"verifymessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"signature\\\", \\\"my message\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     LOCK(cs_main);\n \n     std::string strAddress  = request.params[0].get_str();\n@@ -301,11 +311,13 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     }\n \n     return false;\n+},\n+    };\n }\n \n-static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n+static RPCHelpMan signmessagewithprivkey()\n {\n-            RPCHelpMan{\"signmessagewithprivkey\",\n+    return RPCHelpMan{\"signmessagewithprivkey\",\n                 \"\\nSign a message with the private key of an address\\n\",\n                 {\n                     {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key to sign the message with.\"},\n@@ -322,8 +334,8 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n             \"\\nAs a JSON-RPC call\\n\"\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n \n@@ -339,20 +351,22 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     }\n \n     return signature;\n+},\n+    };\n }\n \n-static UniValue setmocktime(const JSONRPCRequest& request)\n+static RPCHelpMan setmocktime()\n {\n-            RPCHelpMan{\"setmocktime\",\n+    return RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n                     {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\"\"},\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     if (!Params().IsMockableChain()) {\n         throw std::runtime_error(\"setmocktime is for regression testing (-regtest mode) only\");\n     }\n@@ -374,19 +388,21 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n     }\n \n     return NullUniValue;\n+},\n+    };\n }\n \n-static UniValue mockscheduler(const JSONRPCRequest& request)\n+static RPCHelpMan mockscheduler()\n {\n-    RPCHelpMan{\"mockscheduler\",\n+    return RPCHelpMan{\"mockscheduler\",\n         \"\\nBump the scheduler into the future (-regtest only)\\n\",\n         {\n             {\"delta_time\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Number of seconds to forward the scheduler into the future.\" },\n         },\n         RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n         RPCExamples{\"\"},\n-    }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     if (!Params().IsMockableChain()) {\n         throw std::runtime_error(\"mockscheduler is for regression testing (-regtest mode) only\");\n     }\n@@ -405,6 +421,8 @@ static UniValue mockscheduler(const JSONRPCRequest& request)\n     node.scheduler->MockForward(std::chrono::seconds(delta_seconds));\n \n     return NullUniValue;\n+},\n+    };\n }\n \n static UniValue RPCLockedMemoryInfo()\n@@ -439,12 +457,12 @@ static std::string RPCMallocInfo()\n }\n #endif\n \n-static UniValue getmemoryinfo(const JSONRPCRequest& request)\n+static RPCHelpMan getmemoryinfo()\n {\n     /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n      * as users will undoubtedly confuse it with the other \"memory pool\"\n      */\n-            RPCHelpMan{\"getmemoryinfo\",\n+    return RPCHelpMan{\"getmemoryinfo\",\n                 \"Returns an object containing information about memory usage.\\n\",\n                 {\n                     {\"mode\", RPCArg::Type::STR, /* default */ \"\\\"stats\\\"\", \"determines what kind of information is returned.\\n\"\n@@ -474,8 +492,8 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                     HelpExampleCli(\"getmemoryinfo\", \"\")\n             + HelpExampleRpc(\"getmemoryinfo\", \"\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     std::string mode = request.params[0].isNull() ? \"stats\" : request.params[0].get_str();\n     if (mode == \"stats\") {\n         UniValue obj(UniValue::VOBJ);\n@@ -490,6 +508,8 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n     } else {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"unknown mode \" + mode);\n     }\n+},\n+    };\n }\n \n static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n@@ -510,9 +530,9 @@ static void EnableOrDisableLogCategories(UniValue cats, bool enable) {\n     }\n }\n \n-UniValue logging(const JSONRPCRequest& request)\n+static RPCHelpMan logging()\n {\n-            RPCHelpMan{\"logging\",\n+    return RPCHelpMan{\"logging\",\n             \"Gets and sets the logging configuration.\\n\"\n             \"When called without an argument, returns the list of categories with status that are currently being debug logged or not.\\n\"\n             \"When called with arguments, adds or removes categories from debug logging and return the lists above.\\n\"\n@@ -543,8 +563,8 @@ UniValue logging(const JSONRPCRequest& request)\n                     HelpExampleCli(\"logging\", \"\\\"[\\\\\\\"all\\\\\\\"]\\\" \\\"[\\\\\\\"http\\\\\\\"]\\\"\")\n             + HelpExampleRpc(\"logging\", \"[\\\"all\\\"], [\\\"libevent\\\"]\")\n                 },\n-            }.Check(request);\n-\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n     uint32_t original_log_categories = LogInstance().GetCategoryMask();\n     if (request.params[0].isArray()) {\n         EnableOrDisableLogCategories(request.params[0], true);\n@@ -575,13 +595,13 @@ UniValue logging(const JSONRPCRequest& request)\n     }\n \n     return result;\n+},\n+    };\n }\n \n-static UniValue echo(const JSONRPCRequest& request)\n+static RPCHelpMan echo(const std::string& name)\n {\n-    if (request.fHelp)\n-        throw std::runtime_error(\n-            RPCHelpMan{\"echo|echojson ...\",\n+    return RPCHelpMan{name,\n                 \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n                 \"\\nIt will return an internal bug report when arg9='trigger_internal_bug' is passed.\\n\"\n                 \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n@@ -600,16 +620,22 @@ static UniValue echo(const JSONRPCRequest& request)\n                 },\n                 RPCResult{RPCResult::Type::NONE, \"\", \"Returns whatever was passed in\"},\n                 RPCExamples{\"\"},\n-            }.ToString()\n-        );\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    if (request.fHelp) throw std::runtime_error(self.ToString());\n \n     if (request.params[9].isStr()) {\n         CHECK_NONFATAL(request.params[9].get_str() != \"trigger_internal_bug\");\n     }\n \n     return request.params;\n+},\n+    };\n }\n \n+static RPCHelpMan echo() { return echo(\"echo\"); }\n+static RPCHelpMan echojson() { return echo(\"echojson\"); }\n+\n void RegisterMiscRPCCommands(CRPCTable &t)\n {\n // clang-format off\n@@ -629,7 +655,7 @@ static const CRPCCommand commands[] =\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},\n     { \"hidden\",             \"mockscheduler\",          &mockscheduler,          {\"delta_time\"}},\n     { \"hidden\",             \"echo\",                   &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n-    { \"hidden\",             \"echojson\",               &echo,                   {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n+    { \"hidden\",             \"echojson\",               &echojson,               {\"arg0\",\"arg1\",\"arg2\",\"arg3\",\"arg4\",\"arg5\",\"arg6\",\"arg7\",\"arg8\",\"arg9\"}},\n };\n // clang-format on\n     for (const auto& c : commands) {"
      }
    ]
  }
]