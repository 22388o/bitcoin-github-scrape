[
  {
    "sha": "90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGVkYTRkMzc2MmM1MGVkYmViMmE5ZWYwM2YwYmJiN2Y5OGUxMWUz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-18T21:16:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-12T14:12:59Z"
      },
      "message": "Advertize all new block hashes in a reorganization",
      "tree": {
        "sha": "4d54076d7292c6184e11ddfa15967ae021a94456",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d54076d7292c6184e11ddfa15967ae021a94456"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8a13501196fc79a3f728683b74f9d586dda46c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8a13501196fc79a3f728683b74f9d586dda46c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8a13501196fc79a3f728683b74f9d586dda46c1"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 26,
      "deletions": 5
    },
    "files": [
      {
        "sha": "cda1851e136a60f2a3bcf64e46bd79776b8e8561",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
        "patch": "@@ -51,6 +51,9 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n }\n \n const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n+    if (pindex == NULL) {\n+        return NULL;\n+    }\n     if (pindex->nHeight > Height())\n         pindex = pindex->GetAncestor(Height());\n     while (pindex && !Contains(pindex))"
      },
      {
        "sha": "d14d6d4fbc1d6ca081a7704ed3e38588d7cd6c10",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 5,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=90eda4d3762c50edbeb2a9ef03f0bbb7f98e11e3",
        "patch": "@@ -2191,14 +2191,16 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n  * that is already loaded (to avoid loading it again from disk).\n  */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n-    CBlockIndex *pindexNewTip = NULL;\n     CBlockIndex *pindexMostWork = NULL;\n     do {\n         boost::this_thread::interruption_point();\n \n+        CBlockIndex *pindexNewTip = NULL;\n+        const CBlockIndex *pindexFork;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n+            CBlockIndex *pindexOldTip = chainActive.Tip();\n             pindexMostWork = FindMostWorkChain();\n \n             // Whether we have anything to do at all.\n@@ -2209,23 +2211,39 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n                 return false;\n \n             pindexNewTip = chainActive.Tip();\n+            pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n         if (!fInitialDownload) {\n-            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            // Find the hashes of all blocks that weren't previously in the best chain.\n+            std::vector<uint256> vHashes;\n+            while (pindexNewTip != pindexFork) {\n+                 vHashes.push_back(pindexNewTip->GetBlockHash());\n+                 pindexNewTip = pindexNewTip->pprev;\n+                 if (vHashes.size() == 16) {\n+                     // Do not send more than 16 hashes in case of a huge reorganization.\n+                     // Rely on the peer's synchronization mechanism in that case.\n+                     break;\n+                 }\n+            }\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n             {\n                 LOCK(cs_vNodes);\n                 BOOST_FOREACH(CNode* pnode, vNodes)\n-                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                        pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                        BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                            pnode->PushInventory(CInv(MSG_BLOCK, hash));\n+                        }\n+                    }\n             }\n             // Notify external listeners about the new tip.\n-            uiInterface.NotifyBlockTip(hashNewTip);\n+            if (!vHashes.empty()) {\n+                uiInterface.NotifyBlockTip(vHashes.front());\n+            }\n         }\n     } while(pindexMostWork != chainActive.Tip());\n     CheckBlockIndex();"
      }
    ]
  }
]