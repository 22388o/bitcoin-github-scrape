ccdle12,2019-11-26 18:37:43,"Hi @brakmic \n\nThe functional tests fail for me on:\n\n`osx`\n```\n2019-11-26T18:19:47.936000Z TestFramework (INFO): Initializing test directory /var/folders/pq/0yxd9h7x0xx1ztz_n4qlnvk00000gn/T/bitcoin_func_test_u47a85ag\n2019-11-26T18:19:49.122000Z TestFramework (ERROR): JSONRPC error\nTraceback (most recent call last):\n  File ""/Users/Desktop/Projects/bitcoin/test/functional/test_frame",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558763312,558763312,
brakmic,2019-11-26 18:40:24,"> Hi @brakmic\n> \n> The functional tests fail for me on:\n> ```\n\nThese are tests that are already included in rpc_dumptxoutset.py. The test I added executes when you comment out the other, failing, tests. As those haven't been coded by me, I didn't touch them. \nOf course, we should fix them, but in another PR, I think. ",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558764329,558764329,
petterhs,2019-11-26 18:41:45,"It throws for the example input:  `>bitcoin-cli dumptxoutset utxo.dat`\n\n`ubuntu 16`",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558764819,558764819,
brakmic,2019-11-26 18:43:14,"> It throws for the example input: `>bitcoin-cli dumptxoutset utxo.dat`\n> \n> `ubuntu 16`\n\nThanks, will look into it.",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558765341,558765341,
brakmic,2019-11-26 18:56:37,"As already suspected in my [pre-PR message](https://github.com/bitcoin/bitcoin/issues/17612#issuecomment-558729728) the standard **is_regular_file** wasn't enough and we had to switch to boost's [portable_file_name](https://www.boost.org/doc/libs/1_68_0/libs/filesystem/doc/portability_guide.htm). However, this function is actually much more powerful, because it helps a lot regarding portability.\",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558770496,558770496,
brakmic,2019-11-26 19:17:02,"Just to clarify the problem mentioned above by @petterhs \n\nThe previously used **is_regular_file** checks if a *path* is valid. Like: *is this a file, or a pipe, a dir* etc. This of course wasn't enough as we actually need to check for validity of a *given string*, before it becomes a *path object*.\n\nTherefore, I switched to boost's **portable_file_name**.\n\n--EDIT: Not sure, if this co",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558778263,558778263,
petterhs,2019-11-26 19:36:01,"Is there an advantage to using `if (!portable_file_name..)` instead of checking after `FILE* file{fsbridge::fopen(temppath, ""wb"")};` with  `if (!file){...` like in #17614 ",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558785649,558785649,
brakmic,2019-11-26 19:37:12,"> Is there an advantage to using `if (!portable_file_name..)` instead of checking after `FILE* file{fsbridge::fopen(temppath, ""wb"")};` with `if (!file){...` like in #17614\n\nI'd say, it doesn't use raw pointers and C constructs like FILE.",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558786022,558786022,
laanwj,2019-11-27 08:26:36,"Would make sense to have a RPC utility function (in `rpc/util.cpp`) for checking write file paths; it could check things such as:\n- Is the path valid\n- Does the file already exist (if so, reject)\n- Is the path writable\n- â€¦\n\nWe have a similar check in `dumpwallet`:\n```c++\n  fs::path filepath = request.params[0].get_str();\n    filepath = fs::absolute(filepath);\n\n    /* Prevent ",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558982730,558982730,
brakmic,2019-11-27 08:29:38,"@laanwj Indeed! \n\nI'll then write such a utility function and substitute current checks with it. \n\nShould I open a new PR, or is it OK to continue with it here?",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558983662,558983662,
laanwj,2019-11-27 08:53:43,"> I'll then write such a utility function and substitute current checks with it.\n\nThanks!\n\n> Should I open a new PR, or is it OK to continue with it here?\n\nI'd prefer updating this one, it's close enough.",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-558991637,558991637,
brakmic,2019-11-27 22:05:28,"Moved to #17623 \nReason: the PR got automatically closed after I tried to send squashed changes. There seems to be no way to reopen it again.",https://github.com/bitcoin/bitcoin/pull/17615#issuecomment-559266278,559266278,
fanquake,2019-11-26 18:58:00,"If you are going to introduce new Boost Filesystem usage (try and avoid that if possible), it needs to be wrapped in our [Boost Filesystem wrapper](https://github.com/bitcoin/bitcoin/blob/master/src/fs.h#L19).",https://github.com/bitcoin/bitcoin/pull/17615#discussion_r350924644,350924644,src/rpc/blockchain.cpp
brakmic,2019-11-26 18:58:22,"Ah, yes, of course. Will change it!",https://github.com/bitcoin/bitcoin/pull/17615#discussion_r350924825,350924825,src/rpc/blockchain.cpp
