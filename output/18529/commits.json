[
  {
    "sha": "55608455cbed4234f26f62ed9ff500fe5dbc21c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTYwODQ1NWNiZWQ0MjM0ZjI2ZjYyZWQ5ZmY1MDBmZTVkYmMyMWM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-04T23:15:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:25:25Z"
      },
      "message": "Make a fuzzer-based copy of the prevector randomized test",
      "tree": {
        "sha": "29a3817ea2db02664729557f7423066f9f2aeab6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29a3817ea2db02664729557f7423066f9f2aeab6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55608455cbed4234f26f62ed9ff500fe5dbc21c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55608455cbed4234f26f62ed9ff500fe5dbc21c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55608455cbed4234f26f62ed9ff500fe5dbc21c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55608455cbed4234f26f62ed9ff500fe5dbc21c4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abc145c9a4aef8ec269b7e0a3e9403cff9970fe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abc145c9a4aef8ec269b7e0a3e9403cff9970fe4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abc145c9a4aef8ec269b7e0a3e9403cff9970fe4"
      }
    ],
    "stats": {
      "total": 298,
      "additions": 298,
      "deletions": 0
    },
    "files": [
      {
        "sha": "82975aadbe904879c357277a27e0dbb4777168ce",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55608455cbed4234f26f62ed9ff500fe5dbc21c4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55608455cbed4234f26f62ed9ff500fe5dbc21c4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=55608455cbed4234f26f62ed9ff500fe5dbc21c4",
        "patch": "@@ -58,6 +58,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/parse_numbers \\\n   test/fuzz/parse_script \\\n   test/fuzz/parse_univalue \\\n+  test/fuzz/prevector \\\n   test/fuzz/partial_merkle_tree_deserialize \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/pow \\\n@@ -609,6 +610,12 @@ test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_parse_univalue_SOURCES = test/fuzz/parse_univalue.cpp\n \n+test_fuzz_prevector_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_prevector_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_prevector_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_prevector_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prevector_SOURCES = test/fuzz/prevector.cpp\n+\n test_fuzz_partial_merkle_tree_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIAL_MERKLE_TREE_DESERIALIZE=1\n test_fuzz_partial_merkle_tree_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_partial_merkle_tree_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "45452c85c24fa941659a2ab01dd088887202cd56",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "added",
        "additions": 291,
        "deletions": 0,
        "changes": 291,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55608455cbed4234f26f62ed9ff500fe5dbc21c4/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55608455cbed4234f26f62ed9ff500fe5dbc21c4/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=55608455cbed4234f26f62ed9ff500fe5dbc21c4",
        "patch": "@@ -0,0 +1,291 @@\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+\n+#include <vector>\n+#include <prevector.h>\n+\n+#include <reverse_iterator.h>\n+#include <serialize.h>\n+#include <streams.h>\n+\n+namespace {\n+\n+template<unsigned int N, typename T>\n+class prevector_tester {\n+    typedef std::vector<T> realtype;\n+    realtype real_vector;\n+    realtype real_vector_alt;\n+\n+    typedef prevector<N, T> pretype;\n+    pretype pre_vector;\n+    pretype pre_vector_alt;\n+\n+    typedef typename pretype::size_type Size;\n+    bool passed = true;\n+\n+    template <typename A, typename B>\n+    void local_check_equal(A a, B b)\n+    {\n+        local_check(a == b);\n+    }\n+\n+    void local_check(bool b)\n+    {\n+        passed &= b;\n+    }\n+    void test() {\n+        const pretype& const_pre_vector = pre_vector;\n+        local_check_equal(real_vector.size(), pre_vector.size());\n+        local_check_equal(real_vector.empty(), pre_vector.empty());\n+        for (Size s = 0; s < real_vector.size(); s++) {\n+             local_check(real_vector[s] == pre_vector[s]);\n+             local_check(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             local_check(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             local_check(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+        }\n+        // local_check(realtype(pre_vector) == real_vector);\n+        local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        size_t pos = 0;\n+        for (const T& v : pre_vector) {\n+             local_check(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(pre_vector)) {\n+             local_check(v == real_vector[--pos]);\n+        }\n+        for (const T& v : const_pre_vector) {\n+             local_check(v == real_vector[pos++]);\n+        }\n+        for (const T& v : reverse_iterate(const_pre_vector)) {\n+             local_check(v == real_vector[--pos]);\n+        }\n+        CDataStream ss1(SER_DISK, 0);\n+        CDataStream ss2(SER_DISK, 0);\n+        ss1 << real_vector;\n+        ss2 << pre_vector;\n+        local_check_equal(ss1.size(), ss2.size());\n+        for (Size s = 0; s < ss1.size(); s++) {\n+            local_check_equal(ss1[s], ss2[s]);\n+        }\n+    }\n+\n+public:\n+    void resize(Size s) {\n+        real_vector.resize(s);\n+        local_check_equal(real_vector.size(), s);\n+        pre_vector.resize(s);\n+        local_check_equal(pre_vector.size(), s);\n+        test();\n+    }\n+\n+    void reserve(Size s) {\n+        real_vector.reserve(s);\n+        local_check(real_vector.capacity() >= s);\n+        pre_vector.reserve(s);\n+        local_check(pre_vector.capacity() >= s);\n+        test();\n+    }\n+\n+    void insert(Size position, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, value);\n+        pre_vector.insert(pre_vector.begin() + position, value);\n+        test();\n+    }\n+\n+    void insert(Size position, Size count, const T& value) {\n+        real_vector.insert(real_vector.begin() + position, count, value);\n+        pre_vector.insert(pre_vector.begin() + position, count, value);\n+        test();\n+    }\n+\n+    template<typename I>\n+    void insert_range(Size position, I first, I last) {\n+        real_vector.insert(real_vector.begin() + position, first, last);\n+        pre_vector.insert(pre_vector.begin() + position, first, last);\n+        test();\n+    }\n+\n+    void erase(Size position) {\n+        real_vector.erase(real_vector.begin() + position);\n+        pre_vector.erase(pre_vector.begin() + position);\n+        test();\n+    }\n+\n+    void erase(Size first, Size last) {\n+        real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n+        pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n+        test();\n+    }\n+\n+    void update(Size pos, const T& value) {\n+        real_vector[pos] = value;\n+        pre_vector[pos] = value;\n+        test();\n+    }\n+\n+    void push_back(const T& value) {\n+        real_vector.push_back(value);\n+        pre_vector.push_back(value);\n+        test();\n+    }\n+\n+    void pop_back() {\n+        real_vector.pop_back();\n+        pre_vector.pop_back();\n+        test();\n+    }\n+\n+    void clear() {\n+        real_vector.clear();\n+        pre_vector.clear();\n+    }\n+\n+    void assign(Size n, const T& value) {\n+        real_vector.assign(n, value);\n+        pre_vector.assign(n, value);\n+    }\n+\n+    Size size() const {\n+        return real_vector.size();\n+    }\n+\n+    Size capacity() const {\n+        return pre_vector.capacity();\n+    }\n+\n+    void shrink_to_fit() {\n+        pre_vector.shrink_to_fit();\n+        test();\n+    }\n+\n+    void swap() {\n+        real_vector.swap(real_vector_alt);\n+        pre_vector.swap(pre_vector_alt);\n+        test();\n+    }\n+\n+    void move() {\n+        real_vector = std::move(real_vector_alt);\n+        real_vector_alt.clear();\n+        pre_vector = std::move(pre_vector_alt);\n+        pre_vector_alt.clear();\n+    }\n+\n+    void copy() {\n+        real_vector = real_vector_alt;\n+        pre_vector = pre_vector_alt;\n+    }\n+\n+    void resize_uninitialized(realtype values) {\n+        size_t r = values.size();\n+        size_t s = real_vector.size() / 2;\n+        if (real_vector.capacity() < s + r) {\n+            real_vector.reserve(s + r);\n+        }\n+        real_vector.resize(s);\n+        pre_vector.resize_uninitialized(s);\n+        for (auto v : values) {\n+            real_vector.push_back(v);\n+        }\n+        auto p = pre_vector.size();\n+        pre_vector.resize_uninitialized(p + r);\n+        for (auto v : values) {\n+            pre_vector[p] = v;\n+            ++p;\n+        }\n+        test();\n+    }\n+\n+    ~prevector_tester() {\n+        assert(passed);\n+    }\n+};\n+\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider prov(buffer.data(), buffer.size());\n+    prevector_tester<8, int> test;\n+\n+    while (prov.remaining_bytes()) {\n+        switch (prov.ConsumeIntegralInRange<int>(0, 14 + 3 * (test.size() > 0))) {\n+        case 0:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n+            break;\n+        case 15:\n+            test.erase(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1));\n+            break;\n+        case 1:\n+            test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n+            break;\n+        case 2:\n+            test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());\n+            break;\n+        case 3: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeBool());\n+            int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n+            test.erase(beg, beg + del);\n+            break;\n+        }\n+        case 4:\n+            test.push_back(prov.ConsumeIntegral<int>());\n+            break;\n+        case 16:\n+            test.pop_back();\n+            break;\n+        case 5: {\n+            int values[4];\n+            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 3);\n+            for (int k = 0; k < num; ++k) {\n+                values[k] = prov.ConsumeIntegral<int>();\n+            }\n+            test.insert_range(prov.ConsumeIntegralInRange<size_t>(0, test.size()), values, values + num);\n+            break;\n+        }\n+        case 6: {\n+            int del = std::min<int>(test.size(), 1 + prov.ConsumeIntegralInRange<int>(0, 3));\n+            int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n+            test.erase(beg, beg + del);\n+            break;\n+        }\n+        case 7:\n+            test.reserve(prov.ConsumeIntegralInRange<size_t>(0, 32767));\n+            break;\n+        case 8:\n+            test.shrink_to_fit();\n+            break;\n+        case 17:\n+            test.update(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1), prov.ConsumeIntegral<int>());\n+            break;\n+        case 9:\n+            test.clear();\n+            break;\n+        case 10:\n+            test.assign(prov.ConsumeIntegralInRange<size_t>(0, 32767), prov.ConsumeIntegral<int>());\n+            break;\n+        case 11:\n+            test.swap();\n+            break;\n+        case 12:\n+            test.copy();\n+            break;\n+        case 13:\n+            test.move();\n+            break;\n+        case 14: {\n+            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 15);\n+            std::vector<int> values(num);\n+            for (auto& v : values) {\n+                v = prov.ConsumeIntegral<int>();\n+            }\n+            test.resize_uninitialized(values);\n+            break;\n+        }\n+        }\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZGE4MzA5YmZjNmE4Yzk0ZjBiN2MwNzZkMWNjY2M4NmMxMDExY2Jj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-04T23:26:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:39:38Z"
      },
      "message": "Assert immediately rather than caching failure",
      "tree": {
        "sha": "4b890e8ad963bff53e1b3a5254e4a1bd8e3edfef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b890e8ad963bff53e1b3a5254e4a1bd8e3edfef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55608455cbed4234f26f62ed9ff500fe5dbc21c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55608455cbed4234f26f62ed9ff500fe5dbc21c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55608455cbed4234f26f62ed9ff500fe5dbc21c4"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 23,
      "deletions": 34
    },
    "files": [
      {
        "sha": "74c1f8d469f632650e7feca9bc002b04d50d2b1b",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 34,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
        "patch": "@@ -25,68 +25,61 @@ class prevector_tester {\n     pretype pre_vector_alt;\n \n     typedef typename pretype::size_type Size;\n-    bool passed = true;\n \n-    template <typename A, typename B>\n-    void local_check_equal(A a, B b)\n-    {\n-        local_check(a == b);\n-    }\n-\n-    void local_check(bool b)\n-    {\n-        passed &= b;\n-    }\n     void test() {\n         const pretype& const_pre_vector = pre_vector;\n-        local_check_equal(real_vector.size(), pre_vector.size());\n-        local_check_equal(real_vector.empty(), pre_vector.empty());\n+        assert(real_vector.size() == pre_vector.size());\n+        assert(real_vector.empty() == pre_vector.empty());\n         for (Size s = 0; s < real_vector.size(); s++) {\n-             local_check(real_vector[s] == pre_vector[s]);\n-             local_check(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n-             local_check(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n-             local_check(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n+             assert(real_vector[s] == pre_vector[s]);\n+             assert(&(pre_vector[s]) == &(pre_vector.begin()[s]));\n+             assert(&(pre_vector[s]) == &*(pre_vector.begin() + s));\n+             assert(&(pre_vector[s]) == &*((pre_vector.end() + s) - real_vector.size()));\n         }\n-        // local_check(realtype(pre_vector) == real_vector);\n-        local_check(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n-        local_check(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n+        // assert(realtype(pre_vector) == real_vector);\n+        assert(pretype(real_vector.begin(), real_vector.end()) == pre_vector);\n+        assert(pretype(pre_vector.begin(), pre_vector.end()) == pre_vector);\n         size_t pos = 0;\n         for (const T& v : pre_vector) {\n-             local_check(v == real_vector[pos++]);\n+             assert(v == real_vector[pos]);\n+             ++pos;\n         }\n         for (const T& v : reverse_iterate(pre_vector)) {\n-             local_check(v == real_vector[--pos]);\n+             --pos;\n+             assert(v == real_vector[pos]);\n         }\n         for (const T& v : const_pre_vector) {\n-             local_check(v == real_vector[pos++]);\n+             assert(v == real_vector[pos]);\n+             ++pos;\n         }\n         for (const T& v : reverse_iterate(const_pre_vector)) {\n-             local_check(v == real_vector[--pos]);\n+             --pos;\n+             assert(v == real_vector[pos]);\n         }\n         CDataStream ss1(SER_DISK, 0);\n         CDataStream ss2(SER_DISK, 0);\n         ss1 << real_vector;\n         ss2 << pre_vector;\n-        local_check_equal(ss1.size(), ss2.size());\n+        assert(ss1.size() == ss2.size());\n         for (Size s = 0; s < ss1.size(); s++) {\n-            local_check_equal(ss1[s], ss2[s]);\n+            assert(ss1[s] == ss2[s]);\n         }\n     }\n \n public:\n     void resize(Size s) {\n         real_vector.resize(s);\n-        local_check_equal(real_vector.size(), s);\n+        assert(real_vector.size() == s);\n         pre_vector.resize(s);\n-        local_check_equal(pre_vector.size(), s);\n+        assert(pre_vector.size() == s);\n         test();\n     }\n \n     void reserve(Size s) {\n         real_vector.reserve(s);\n-        local_check(real_vector.capacity() >= s);\n+        assert(real_vector.capacity() >= s);\n         pre_vector.reserve(s);\n-        local_check(pre_vector.capacity() >= s);\n+        assert(pre_vector.capacity() >= s);\n         test();\n     }\n \n@@ -199,10 +192,6 @@ class prevector_tester {\n         }\n         test();\n     }\n-\n-    ~prevector_tester() {\n-        assert(passed);\n-    }\n };\n \n }"
      }
    ]
  },
  {
    "sha": "402ad5aaca9509d45d861d77eb6431d6e1944f91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDJhZDVhYWNhOTUwOWQ0NWQ4NjFkNzdlYjY0MzFkNmUxOTQ0Zjkx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:31:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:39:42Z"
      },
      "message": "Only run sanity check once at the end",
      "tree": {
        "sha": "e612eed180776a70351e6604854089a6b4e3772f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e612eed180776a70351e6604854089a6b4e3772f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/402ad5aaca9509d45d861d77eb6431d6e1944f91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/402ad5aaca9509d45d861d77eb6431d6e1944f91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/402ad5aaca9509d45d861d77eb6431d6e1944f91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/402ad5aaca9509d45d861d77eb6431d6e1944f91/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eda8309bfc6a8c94f0b7c076d1cccc86c1011cbc"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 4,
      "deletions": 15
    },
    "files": [
      {
        "sha": "39320c12166e2bf2a19c0cdc9938b7f834b386b8",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 15,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/402ad5aaca9509d45d861d77eb6431d6e1944f91/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/402ad5aaca9509d45d861d77eb6431d6e1944f91/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=402ad5aaca9509d45d861d77eb6431d6e1944f91",
        "patch": "@@ -26,7 +26,8 @@ class prevector_tester {\n \n     typedef typename pretype::size_type Size;\n \n-    void test() {\n+public:\n+    void test() const {\n         const pretype& const_pre_vector = pre_vector;\n         assert(real_vector.size() == pre_vector.size());\n         assert(real_vector.empty() == pre_vector.empty());\n@@ -66,70 +67,59 @@ class prevector_tester {\n         }\n     }\n \n-public:\n     void resize(Size s) {\n         real_vector.resize(s);\n         assert(real_vector.size() == s);\n         pre_vector.resize(s);\n         assert(pre_vector.size() == s);\n-        test();\n     }\n \n     void reserve(Size s) {\n         real_vector.reserve(s);\n         assert(real_vector.capacity() >= s);\n         pre_vector.reserve(s);\n         assert(pre_vector.capacity() >= s);\n-        test();\n     }\n \n     void insert(Size position, const T& value) {\n         real_vector.insert(real_vector.begin() + position, value);\n         pre_vector.insert(pre_vector.begin() + position, value);\n-        test();\n     }\n \n     void insert(Size position, Size count, const T& value) {\n         real_vector.insert(real_vector.begin() + position, count, value);\n         pre_vector.insert(pre_vector.begin() + position, count, value);\n-        test();\n     }\n \n     template<typename I>\n     void insert_range(Size position, I first, I last) {\n         real_vector.insert(real_vector.begin() + position, first, last);\n         pre_vector.insert(pre_vector.begin() + position, first, last);\n-        test();\n     }\n \n     void erase(Size position) {\n         real_vector.erase(real_vector.begin() + position);\n         pre_vector.erase(pre_vector.begin() + position);\n-        test();\n     }\n \n     void erase(Size first, Size last) {\n         real_vector.erase(real_vector.begin() + first, real_vector.begin() + last);\n         pre_vector.erase(pre_vector.begin() + first, pre_vector.begin() + last);\n-        test();\n     }\n \n     void update(Size pos, const T& value) {\n         real_vector[pos] = value;\n         pre_vector[pos] = value;\n-        test();\n     }\n \n     void push_back(const T& value) {\n         real_vector.push_back(value);\n         pre_vector.push_back(value);\n-        test();\n     }\n \n     void pop_back() {\n         real_vector.pop_back();\n         pre_vector.pop_back();\n-        test();\n     }\n \n     void clear() {\n@@ -152,13 +142,11 @@ class prevector_tester {\n \n     void shrink_to_fit() {\n         pre_vector.shrink_to_fit();\n-        test();\n     }\n \n     void swap() {\n         real_vector.swap(real_vector_alt);\n         pre_vector.swap(pre_vector_alt);\n-        test();\n     }\n \n     void move() {\n@@ -190,7 +178,6 @@ class prevector_tester {\n             pre_vector[p] = v;\n             ++p;\n         }\n-        test();\n     }\n };\n \n@@ -277,4 +264,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         }\n         }\n     }\n+\n+    test.test();\n }"
      }
    ]
  },
  {
    "sha": "c2ccadc26a04358b11539097c1aadb8d11b85c21",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmNjYWRjMjZhMDQzNThiMTE1MzkwOTdjMWFhZGI4ZDExYjg1YzIx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:37:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:39:42Z"
      },
      "message": "Merge and generalize case 3 and case 6",
      "tree": {
        "sha": "5ccb80d89df5e0715e210b7427d538c88fc12925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ccb80d89df5e0715e210b7427d538c88fc12925"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2ccadc26a04358b11539097c1aadb8d11b85c21",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ccadc26a04358b11539097c1aadb8d11b85c21",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ccadc26a04358b11539097c1aadb8d11b85c21",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ccadc26a04358b11539097c1aadb8d11b85c21/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "402ad5aaca9509d45d861d77eb6431d6e1944f91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/402ad5aaca9509d45d861d77eb6431d6e1944f91",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/402ad5aaca9509d45d861d77eb6431d6e1944f91"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4154d9c713039e2d8db4b1d883f08259241794b8",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 10,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2ccadc26a04358b11539097c1aadb8d11b85c21/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2ccadc26a04358b11539097c1aadb8d11b85c21/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=c2ccadc26a04358b11539097c1aadb8d11b85c21",
        "patch": "@@ -189,7 +189,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     prevector_tester<8, int> test;\n \n     while (prov.remaining_bytes()) {\n-        switch (prov.ConsumeIntegralInRange<int>(0, 14 + 3 * (test.size() > 0))) {\n+        switch (prov.ConsumeIntegralInRange<int>(0, 13 + 3 * (test.size() > 0))) {\n         case 0:\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n             break;\n@@ -203,7 +203,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), 1 + prov.ConsumeBool(), prov.ConsumeIntegral<int>());\n             break;\n         case 3: {\n-            int del = std::min<int>(test.size(), 1 + prov.ConsumeBool());\n+            int del = prov.ConsumeIntegralInRange<int>(0, test.size());\n             int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n             test.erase(beg, beg + del);\n             break;\n@@ -223,19 +223,13 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             test.insert_range(prov.ConsumeIntegralInRange<size_t>(0, test.size()), values, values + num);\n             break;\n         }\n-        case 6: {\n-            int del = std::min<int>(test.size(), 1 + prov.ConsumeIntegralInRange<int>(0, 3));\n-            int beg = prov.ConsumeIntegralInRange<int>(0, test.size() - del);\n-            test.erase(beg, beg + del);\n-            break;\n-        }\n         case 7:\n             test.reserve(prov.ConsumeIntegralInRange<size_t>(0, 32767));\n             break;\n         case 8:\n             test.shrink_to_fit();\n             break;\n-        case 17:\n+        case 14:\n             test.update(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1), prov.ConsumeIntegral<int>());\n             break;\n         case 9:\n@@ -253,7 +247,7 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 13:\n             test.move();\n             break;\n-        case 14: {\n+        case 6: {\n             int num = 1 + prov.ConsumeIntegralInRange<int>(0, 15);\n             std::vector<int> values(num);\n             for (auto& v : values) {"
      }
    ]
  },
  {
    "sha": "b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWQyNGQxZDAzMWEyYjJjZTY3YmY4NDZiYWZhMWMzYTQ5OWI3NTUz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:51:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-06T21:51:38Z"
      },
      "message": "Reorder the test instructions by number",
      "tree": {
        "sha": "b6f74f3ece9c5e3a2cfb81e49a40a7e0e94eb53a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6f74f3ece9c5e3a2cfb81e49a40a7e0e94eb53a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2ccadc26a04358b11539097c1aadb8d11b85c21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2ccadc26a04358b11539097c1aadb8d11b85c21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2ccadc26a04358b11539097c1aadb8d11b85c21"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "0e51ee3c95868545986150bf4926a9c6e7e18716",
        "filename": "src/test/fuzz/prevector.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553/src/test/fuzz/prevector.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1d24d1d031a2b2ce67bf846bafa1c3a499b7553/src/test/fuzz/prevector.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/prevector.cpp?ref=b1d24d1d031a2b2ce67bf846bafa1c3a499b7553",
        "patch": "@@ -193,9 +193,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 0:\n             test.insert(prov.ConsumeIntegralInRange<size_t>(0, test.size()), prov.ConsumeIntegral<int>());\n             break;\n-        case 15:\n-            test.erase(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1));\n-            break;\n         case 1:\n             test.resize(std::max(0, std::min(30, (int)test.size() + prov.ConsumeIntegralInRange<int>(0, 4) - 2)));\n             break;\n@@ -211,9 +208,6 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 4:\n             test.push_back(prov.ConsumeIntegral<int>());\n             break;\n-        case 16:\n-            test.pop_back();\n-            break;\n         case 5: {\n             int values[4];\n             int num = 1 + prov.ConsumeIntegralInRange<int>(0, 3);\n@@ -223,15 +217,21 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             test.insert_range(prov.ConsumeIntegralInRange<size_t>(0, test.size()), values, values + num);\n             break;\n         }\n+        case 6: {\n+            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 15);\n+            std::vector<int> values(num);\n+            for (auto& v : values) {\n+                v = prov.ConsumeIntegral<int>();\n+            }\n+            test.resize_uninitialized(values);\n+            break;\n+        }\n         case 7:\n             test.reserve(prov.ConsumeIntegralInRange<size_t>(0, 32767));\n             break;\n         case 8:\n             test.shrink_to_fit();\n             break;\n-        case 14:\n-            test.update(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1), prov.ConsumeIntegral<int>());\n-            break;\n         case 9:\n             test.clear();\n             break;\n@@ -247,15 +247,15 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n         case 13:\n             test.move();\n             break;\n-        case 6: {\n-            int num = 1 + prov.ConsumeIntegralInRange<int>(0, 15);\n-            std::vector<int> values(num);\n-            for (auto& v : values) {\n-                v = prov.ConsumeIntegral<int>();\n-            }\n-            test.resize_uninitialized(values);\n+        case 14:\n+            test.update(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1), prov.ConsumeIntegral<int>());\n+            break;\n+        case 15:\n+            test.erase(prov.ConsumeIntegralInRange<size_t>(0, test.size() - 1));\n+            break;\n+        case 16:\n+            test.pop_back();\n             break;\n-        }\n         }\n     }\n "
      }
    ]
  }
]