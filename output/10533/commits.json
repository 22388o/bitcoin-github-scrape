[
  {
    "sha": "c53c9831eedaf3b311bb942945268830f9ba3abc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTNjOTgzMWVlZGFmM2IzMTFiYjk0Mjk0NTI2ODgzMGY5YmEzYWJj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-05T17:50:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-08T18:22:52Z"
      },
      "message": "Replace cookie auth in tests\n\nSince rpcuser and rpcpassword are now deprecated, replace them with cookie auth.\n\nFix test failures with cookie auth",
      "tree": {
        "sha": "a2e5d98479f40c1df82cd08adb4beb509ccf329c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2e5d98479f40c1df82cd08adb4beb509ccf329c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c53c9831eedaf3b311bb942945268830f9ba3abc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53c9831eedaf3b311bb942945268830f9ba3abc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c53c9831eedaf3b311bb942945268830f9ba3abc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53c9831eedaf3b311bb942945268830f9ba3abc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fec4da0bec93a49798b5f5e92cf76e900759ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fec4da0bec93a49798b5f5e92cf76e900759ee4"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 44,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1fa1c0710b5370c2a59f2ec1f631add59f3887cc",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=c53c9831eedaf3b311bb942945268830f9ba3abc",
        "patch": "@@ -1486,7 +1486,7 @@ def test_p2sh_witness(self, segwit_activated):\n     # nodes would have stored, this requires special handling.\n     # To enable this test, pass --oldbinary=<path-to-pre-segwit-bitcoind> to\n     # the test.\n-    def test_upgrade_after_activation(self, node, node_id):\n+    def test_upgrade_after_activation(self, node_id):\n         self.log.info(\"Testing software upgrade after softfork activation\")\n \n         assert(node_id != 0) # node0 is assumed to be a segwit-active bitcoind\n@@ -1502,14 +1502,14 @@ def test_upgrade_after_activation(self, node, node_id):\n         sync_blocks(self.nodes)\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert(get_bip9_status(node, 'segwit')['status'] == \"active\")\n+        assert(get_bip9_status(self.nodes[node_id], 'segwit')['status'] == \"active\")\n \n         # Make sure this peers blocks match those of node0.\n-        height = node.getblockcount()\n+        height = self.nodes[node_id].getblockcount()\n         while height >= 0:\n-            block_hash = node.getblockhash(height)\n+            block_hash = self.nodes[node_id].getblockhash(height)\n             assert_equal(block_hash, self.nodes[0].getblockhash(height))\n-            assert_equal(self.nodes[0].getblock(block_hash), node.getblock(block_hash))\n+            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[node_id].getblock(block_hash))\n             height -= 1\n \n \n@@ -1944,7 +1944,7 @@ def run_test(self):\n         self.test_signature_version_1()\n         self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n-        self.test_upgrade_after_activation(self.nodes[2], 2)\n+        self.test_upgrade_after_activation(2)\n         self.test_witness_sigops()\n \n "
      },
      {
        "sha": "c7fd44b81cd28af6033e36625b884ecb1331bb94",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c53c9831eedaf3b311bb942945268830f9ba3abc",
        "patch": "@@ -28,6 +28,7 @@\n     get_mocktime,\n     get_rpc_proxy,\n     initialize_datadir,\n+    get_datadir_path,\n     log_filename,\n     p2p_port,\n     rpc_url,\n@@ -300,13 +301,13 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 bitcoind_processes[i] = subprocess.Popen(args)\n                 self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n+                wait_for_bitcoind_start(bitcoind_processes[i], datadir, i)\n                 self.log.debug(\"initialize_chain: RPC successfully started\")\n \n             self.nodes = []\n             for i in range(MAX_NODES):\n                 try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(i), i))\n+                    self.nodes.append(get_rpc_proxy(rpc_url(get_datadir_path(cachedir, i), i), i))\n                 except:\n                     self.log.exception(\"Error connecting to node %d\" % i)\n                     sys.exit(1)"
      },
      {
        "sha": "e09e9b6afcec22beac9dd7e857e4f5d068b230f8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 35,
        "deletions": 14,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c53c9831eedaf3b311bb942945268830f9ba3abc/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c53c9831eedaf3b311bb942945268830f9ba3abc",
        "patch": "@@ -181,21 +181,39 @@ def initialize_datadir(dirname, n):\n     datadir = os.path.join(dirname, \"node\"+str(n))\n     if not os.path.isdir(datadir):\n         os.makedirs(datadir)\n-    rpc_u, rpc_p = rpc_auth_pair(n)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n         f.write(\"regtest=1\\n\")\n-        f.write(\"rpcuser=\" + rpc_u + \"\\n\")\n-        f.write(\"rpcpassword=\" + rpc_p + \"\\n\")\n         f.write(\"port=\"+str(p2p_port(n))+\"\\n\")\n         f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n-\n-def rpc_auth_pair(n):\n-    return 'rpcuser\ud83d\udcbb' + str(n), 'rpcpass\ud83d\udd11' + str(n)\n-\n-def rpc_url(i, rpchost=None):\n-    rpc_u, rpc_p = rpc_auth_pair(i)\n+    \n+def get_datadir_path(dirname, n):\n+    return os.path.join(dirname, \"node\"+str(n))\n+    \n+def get_auth_cookie(datadir, n):\n+    if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n+        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n+            userpass = f.read()\n+            split_userpass = userpass.split(':')\n+            return split_userpass[0], split_userpass[1]\n+    else:\n+        with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n+            user = None\n+            password = None\n+            for line in f:\n+                if line.startswith(\"rpcuser=\"):\n+                    assert user is None # Ensure that there is only one rpcuser line\n+                    user = line.split(\"=\")[1].strip(\"\\n\")\n+                if line.startswith(\"rpcpassword=\"):\n+                    assert password is None # Ensure that there is only one rpcpassword line\n+                    password = line.split(\"=\")[1].strip(\"\\n\")\n+            if user is None and password is None:\n+                raise ValueError(\"No RPC credentials\")\n+            return user, password\n+\n+def rpc_url(datadir, i, rpchost=None):\n+    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n     host = '127.0.0.1'\n     port = rpc_port(i)\n     if rpchost:\n@@ -206,7 +224,7 @@ def rpc_url(i, rpchost=None):\n             host = rpchost\n     return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-def wait_for_bitcoind_start(process, url, i):\n+def wait_for_bitcoind_start(process, datadir, i):\n     '''\n     Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n     Raise an exception if bitcoind exits during initialization.\n@@ -215,7 +233,8 @@ def wait_for_bitcoind_start(process, url, i):\n         if process.poll() is not None:\n             raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n         try:\n-            rpc = get_rpc_proxy(url, i)\n+            # Check if .cookie file to be created\n+            rpc = get_rpc_proxy(rpc_url(datadir, i), i)\n             blocks = rpc.getblockcount()\n             break # break out of loop on success\n         except IOError as e:\n@@ -224,6 +243,9 @@ def wait_for_bitcoind_start(process, url, i):\n         except JSONRPCException as e: # Initialization phase\n             if e.error['code'] != -28: # RPC in warmup?\n                 raise # unknown JSON RPC exception\n+        except ValueError as e: # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+            if \"No RPC credentials\" not in str(e):\n+                raise\n         time.sleep(0.25)\n \n \n@@ -239,10 +261,9 @@ def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    url = rpc_url(i, rpchost)\n-    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n+    wait_for_bitcoind_start(bitcoind_processes[i], datadir, i)\n     logger.debug(\"initialize_chain: RPC successfully started\")\n-    proxy = get_rpc_proxy(url, i, timeout=timewait)\n+    proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n \n     if COVERAGE_DIR:\n         coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)"
      }
    ]
  },
  {
    "sha": "3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWM1YWQ4OGU2N2JiYTc0Yzc5NTU3NWQ1MmM5N2ZkMmM3ZTg4MGMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-06T18:43:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-09T00:19:39Z"
      },
      "message": "Add test for rpcuser/rpcpassword",
      "tree": {
        "sha": "cee5030718555f704718a126fe0d5f3a24714a4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cee5030718555f704718a126fe0d5f3a24714a4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c53c9831eedaf3b311bb942945268830f9ba3abc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c53c9831eedaf3b311bb942945268830f9ba3abc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c53c9831eedaf3b311bb942945268830f9ba3abc"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 59,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a30e15ace9e43b9e7653d4eb1d890ea453543fc7",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 51,
        "deletions": 7,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "patch": "@@ -16,16 +16,21 @@ class HTTPBasicsTest (BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = False\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n \n     def setup_chain(self):\n         super().setup_chain()\n         #Append rpcauth to bitcoin.conf before initialization\n         rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n         rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        rpcuser = \"rpcuser=rpcuser\ud83d\udcbb\"\n+        rpcpassword = \"rpcpassword=rpcpassword\ud83d\udd11\"\n         with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n             f.write(rpcauth+\"\\n\")\n             f.write(rpcauth2+\"\\n\")\n+        with open(os.path.join(self.options.tmpdir+\"/node1\", \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(rpcuser+\"\\n\")\n+            f.write(rpcpassword+\"\\n\")\n \n     def run_test(self):\n \n@@ -50,7 +55,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, False)\n+        assert_equal(resp.status, 200)\n         conn.close()\n         \n         #Use new authpair to confirm both work\n@@ -60,7 +65,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, False)\n+        assert_equal(resp.status, 200)\n         conn.close()\n \n         #Wrong login name with rt's password\n@@ -71,7 +76,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, True)\n+        assert_equal(resp.status, 401)\n         conn.close()\n \n         #Wrong password for rt\n@@ -82,7 +87,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, True)\n+        assert_equal(resp.status, 401)\n         conn.close()\n \n         #Correct for rt2\n@@ -93,7 +98,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, False)\n+        assert_equal(resp.status, 200)\n         conn.close()\n \n         #Wrong password for rt2\n@@ -104,7 +109,46 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         resp = conn.getresponse()\n-        assert_equal(resp.status==401, True)\n+        assert_equal(resp.status, 401)\n+        conn.close()\n+\n+        ###############################################################\n+        # Check correctness of the rpcuser/rpcpassword config options #\n+        ###############################################################\n+        url = urllib.parse.urlparse(self.nodes[1].url)\n+\n+        # rpcuser and rpcpassword authpair\n+        rpcuserauthpair = \"rpcuser\ud83d\udcbb:rpcpassword\ud83d\udd11\"\n+\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n+\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status, 200)\n+        conn.close()\n+\n+        #Wrong login name with rpcuser's password\n+        rpcuserauthpair = \"rpcuserwrong:rpcpassword\"\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n+\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status, 401)\n+        conn.close()\n+\n+        #Wrong password for rpcuser\n+        rpcuserauthpair = \"rpcuser:rpcpasswordwrong\"\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(rpcuserauthpair)}\n+\n+        conn = http.client.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status, 401)\n         conn.close()\n \n "
      },
      {
        "sha": "37e9d297389d7627833cc4b40b711970940d89eb",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "patch": "@@ -315,7 +315,7 @@ def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +325,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.nodes[5] = self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "198599010e4142d56c3be2da85d4ae5e532789a9",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "patch": "@@ -49,7 +49,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "c94dd6499f17f27ab5386741e84b9038be8c227d",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ec5ad88e67bba74c795575d52c97fd2c7e880c1/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "patch": "@@ -187,10 +187,10 @@ def initialize_datadir(dirname, n):\n         f.write(\"rpcport=\"+str(rpc_port(n))+\"\\n\")\n         f.write(\"listenonion=0\\n\")\n     return datadir\n-    \n+\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\"+str(n))\n-    \n+\n def get_auth_cookie(datadir, n):\n     if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n         with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n@@ -224,7 +224,7 @@ def rpc_url(datadir, i, rpchost=None):\n             host = rpchost\n     return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-def wait_for_bitcoind_start(process, datadir, i):\n+def wait_for_bitcoind_start(process, datadir, i, rpchost=None):\n     '''\n     Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n     Raise an exception if bitcoind exits during initialization.\n@@ -234,7 +234,7 @@ def wait_for_bitcoind_start(process, datadir, i):\n             raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n         try:\n             # Check if .cookie file to be created\n-            rpc = get_rpc_proxy(rpc_url(datadir, i), i)\n+            rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i)\n             blocks = rpc.getblockcount()\n             break # break out of loop on success\n         except IOError as e:\n@@ -261,7 +261,7 @@ def _start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    wait_for_bitcoind_start(bitcoind_processes[i], datadir, i)\n+    wait_for_bitcoind_start(bitcoind_processes[i], datadir, i, rpchost)\n     logger.debug(\"initialize_chain: RPC successfully started\")\n     proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n "
      }
    ]
  },
  {
    "sha": "279fde58e39fe96b86a68586d5a857a31d3c81cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzlmZGU1OGUzOWZlOTZiODZhNjg1ODZkNWE4NTdhMzFkM2M4MWNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-18T17:05:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-18T17:34:54Z"
      },
      "message": "Check for rpcuser/rpcpassword first then for cookie\n\nBetter to check that rpcuser and rpcpassword exist then to check for\nthe cookie in the test framework.\n\nName an argument for consistency in p2p-segwit.py",
      "tree": {
        "sha": "dc7c73fad1eb580a696385a8583b32617b700ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc7c73fad1eb580a696385a8583b32617b700ccd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/279fde58e39fe96b86a68586d5a857a31d3c81cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/279fde58e39fe96b86a68586d5a857a31d3c81cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/279fde58e39fe96b86a68586d5a857a31d3c81cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/279fde58e39fe96b86a68586d5a857a31d3c81cd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ec5ad88e67bba74c795575d52c97fd2c7e880c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ec5ad88e67bba74c795575d52c97fd2c7e880c1"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 13,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c332a47710f6d8416e4b86e41d0e3c5c8edbe001",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/279fde58e39fe96b86a68586d5a857a31d3c81cd/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/279fde58e39fe96b86a68586d5a857a31d3c81cd/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=279fde58e39fe96b86a68586d5a857a31d3c81cd",
        "patch": "@@ -1944,7 +1944,7 @@ def run_test(self):\n         self.test_signature_version_1()\n         self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n-        self.test_upgrade_after_activation(2)\n+        self.test_upgrade_after_activation(node_id=2)\n         self.test_witness_sigops()\n \n "
      },
      {
        "sha": "d2a609451d91fb4e919c091fa58e10b4d2cf4e56",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/279fde58e39fe96b86a68586d5a857a31d3c81cd/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/279fde58e39fe96b86a68586d5a857a31d3c81cd/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=279fde58e39fe96b86a68586d5a857a31d3c81cd",
        "patch": "@@ -192,25 +192,26 @@ def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\"+str(n))\n \n def get_auth_cookie(datadir, n):\n-    if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n-        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n-            userpass = f.read()\n-            split_userpass = userpass.split(':')\n-            return split_userpass[0], split_userpass[1]\n-    else:\n+    user = None\n+    password = None\n+    if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):\n         with open(os.path.join(datadir, \"bitcoin.conf\"), 'r') as f:\n-            user = None\n-            password = None\n             for line in f:\n                 if line.startswith(\"rpcuser=\"):\n                     assert user is None # Ensure that there is only one rpcuser line\n                     user = line.split(\"=\")[1].strip(\"\\n\")\n                 if line.startswith(\"rpcpassword=\"):\n                     assert password is None # Ensure that there is only one rpcpassword line\n                     password = line.split(\"=\")[1].strip(\"\\n\")\n-            if user is None and password is None:\n-                raise ValueError(\"No RPC credentials\")\n-            return user, password\n+    if os.path.isfile(os.path.join(datadir, \"regtest\", \".cookie\")):\n+        with open(os.path.join(datadir, \"regtest\", \".cookie\"), 'r') as f:\n+            userpass = f.read()\n+            split_userpass = userpass.split(':')\n+            user = split_userpass[0]\n+            password = split_userpass[1]\n+    if user is None or password is None:\n+        raise ValueError(\"No RPC credentials\")\n+    return user, password\n \n def rpc_url(datadir, i, rpchost=None):\n     rpc_u, rpc_p = get_auth_cookie(datadir, i)"
      }
    ]
  }
]