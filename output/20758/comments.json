[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483382",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483382",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 750483382,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4MzM4Mg==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-23T21:37:16Z",
    "updated_at": "2020-12-23T21:37:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Marked as WIP; definitely needs some review/testing.\r\n\r\nThe `move CNodeState into Peer` commit might not be the greatest idea -- the locking issues are a little subtle (assumign I got them right). Not sure the the locking guidelines for Peer make sense (see \"annotate lock guideline violation?\" commit) though (and generally not convinced we need the multiple per-peer state mutexes that Peer has).\r\n\r\nI think it might make sense to have CNode have an opaque Peer pointer member that's provided by net_processing when the connection is first made and passed back to net_processing via the PeerManager interface -- that would obsolete a lot of the \"state for this peer\" lookups, and might simplify locking substantially. Bit complicated to think about, so I stopped at this point, but that was what I was originally looking to explore here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483525",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483525",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 750483525,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDQ4MzUyNQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-23T21:37:50Z",
    "updated_at": "2021-02-16T07:59:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21090 (Default to NODE_WITNESS in nLocalServices by dhruv)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiuttarwar)\n* #21015 (Make all of net_processing (and some of net) use std::chrono types by dhruv)\n* #20966 (banman: save the banlist in a JSON format on disk by vasild)\n* #20721 (Net: Move ping data to net_processing by jnewbery)\n* #20295 (rpc: getblockfrompeer by Sjors)\n* #20228 (addrman: Make addrman a top-level component by jnewbery)\n* #19438 (Introduce deploymentstatus by ajtowns)\n* #18261 (Erlay: bandwidth-efficient transaction relay protocol by naumenkogs)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750483525/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750520136",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750520136",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 750520136,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDUyMDEzNg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-23T22:54:45Z",
    "updated_at": "2020-12-23T22:54:45Z",
    "author_association": "MEMBER",
    "body": "Strong concept ACK. I really like the idea of compilation firewalls and not exposing the innards of net_processing through the header file.\r\n\r\nI don't know where this fits in the sequence of PRs for #19398. Doing it first makes some sense because it means we won't be putting stuff into the header file only to remove it later, but I think this PR will need to be split up into more digestible pieces to be merged.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/750520136/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751358315",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751358315",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 751358315,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTM1ODMxNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-26T14:01:01Z",
    "updated_at": "2020-12-26T14:01:01Z",
    "author_association": "MEMBER",
    "body": "I've made a branch at https://github.com/jnewbery/bitcoin/tree/pr20758.1 that implements something I've wanted to try for a while. It moves PeerManagerImpl into its own translation unit (net_processing_impl.cpp), with the declaration of PeerManagerImpl in net_processing_impl.h. That header file is only included by net_processing.cpp (so the std::unique_ptr<PeerManagerImpl> can be constructed) and the test files. The tests are updated to use a PeerManagerImpl instead of a PeerManager.\r\n\r\nThe result is that PeerManager and net_processing.h don't need to include any functions that are for test only. That header file and PeerManager's public interface are about as minimal as possible (the only exposed methods are RelayTransaction, GetNodeStateStats and IgnoresIncomingTxs). Meanwhile, everything in PeerManagerImpl can be made public (since it's behind a compilation firewall so effectively everything is hidden from other translation units), and the tests can access any method/data in the class.\r\n\r\nWhat do you think? Is this something we should consider?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751358315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751535311",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751535311",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 751535311,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTUzNTMxMQ==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-28T00:33:44Z",
    "updated_at": "2020-12-28T00:33:44Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  It moves PeerManagerImpl into its own translation unit\r\n\r\nI think a better approach would be to have `module.h` as the public interface, `module_impl.h` as the white-box testing interface (ie the class definition of `PeerManagerImpl`), and `module.cpp` as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\r\n\r\nI think maybe it'd be even better to focus on making the classes smaller so they can be tested purely via their public interfaces though, and not worry too much about exposing a few extra methods in the meantime?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/751535311/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752140615",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752140615",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 752140615,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjE0MDYxNQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-29T16:13:20Z",
    "updated_at": "2020-12-29T16:13:20Z",
    "author_association": "MEMBER",
    "body": "> I think a better approach would be to have module.h as the public interface, module_impl.h as the white-box testing interface (ie the class definition of PeerManagerImpl), and module.cpp as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\r\n\r\nACK. This seems even better!\r\n\r\n> I think maybe it'd be even better to focus on making the classes smaller so they can be tested purely via their public interfaces though, and not worry too much about exposing a few extra methods in the meantime?\r\n\r\nAlso ACK making classes smaller. I think the tx_request module is a great example of how we can make the code clearer and better tested by breaking up the functionality. Perhaps block downloading, orphan handling, addr relay, etc could get similar treatment in future.\r\n\r\nAside: I think 'tested purely via their public interfaces' is an OOP mantra that sounds good in theory, but white-box testing is too useful to throw out entirely, especially when dealing with legacy code that has existing large modules/classes.\r\n\r\nThis can all be left for future work though. I think just implementing the PeerManagerImpl is a great first step. I'd love to help get this reviewed and merged. Perhaps everything up to _move PeerManagerImpl into cpp file_ could be split into a PR for review first?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752140615/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752327389",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752327389",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 752327389,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1MjMyNzM4OQ==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-12-30T04:54:58Z",
    "updated_at": "2020-12-30T04:54:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Aside: I think 'tested purely via their public interfaces' is an OOP mantra that sounds good in theory, but white-box testing is too useful to throw out entirely, especially when dealing with legacy code that has existing large modules/classes.\r\n\r\nI still think that's white-box testing -- it's just that calling public functions is equivalent to entering at function boundaries, while calling private functions is more like a GOTO into the middle of a function. But I don't mind having test-only sanity check functions (like in txrequest.h)...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/752327389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759853026",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-759853026",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 759853026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc1OTg1MzAyNg==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-14T00:53:41Z",
    "updated_at": "2021-01-14T00:53:41Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased now #20811 is merged. I think the next step is to split some of the commits moving globals into PeerManagerImpl members into a separate PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/759853026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760755534",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-760755534",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 760755534,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2MDc1NTUzNA==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-15T08:40:38Z",
    "updated_at": "2021-01-15T08:40:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "Pulled out some commits (and added one to drop connman from `MaybeSetPeerAsAnnoun...`) into #20942, so that's the next set to review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/760755534/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770410626",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-770410626",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 770410626,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDQxMDYyNg==",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-31T16:41:53Z",
    "updated_at": "2021-01-31T16:41:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased on #20942 and included a set of 10 commits to introduce txorphanage.h and cpp that pulls out (and de-globalises) orphan tracking. The only remaining global there is g_cs_orphans. I think it would make sense to move the orphan work sets from `net_processing.cpp:Peer` into a new map in `txorphanage.h:TxOrphanage` -- that would allow the lock to be moved into the class as well, and might also make it reasonable to do cleverer things like track multiple announcements of orphans (if we need to retry requesting their parents eg).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/770410626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901266996",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-901266996",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20758",
    "id": 901266996,
    "node_id": "IC_kwDOABII5841uD40",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-08-18T16:45:34Z",
    "updated_at": "2021-08-18T16:45:34Z",
    "author_association": "MEMBER",
    "body": "Needs rebase?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/901266996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548306663",
    "pull_request_review_id": 558261042,
    "id": 548306663,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMwNjY2Mw==",
    "diff_hunk": "@@ -1319,7 +1319,7 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n         LOCK(m_peer_mutex);\n         for (auto& it : m_peer_map) {\n             Peer& peer = *it.second;\n-            LOCK(peer.m_block_inv_mutex);\n+            LOCK(peer.m_block_inv_mutex); // TODO: violates \"Mutexes inside this struct must not be held when locking m_peer_mutex.\" rule??",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "7f479a56b775f0ef50005bae3a910f9adc95b1b7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You're the second person who's been confused by this comment (https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546338754), which tells me that I didn't make it clear enough.\r\n\r\nIt's fine to lock m_peer_mutex and then lock one of the inner mutexes, or even to lock m_peer_mutex, take a shared_ptr to the Peer, release m_peer_mutex and then lock an inner mutex. The only rule is that we don't want to lock an inner mutex and then lock m_peer_mutex.\r\n\r\nIf you have better wording for the comment, I'm very happy to take it.",
    "created_at": "2020-12-23T22:49:28Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548306663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548306663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548306663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548306663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1322,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548321467",
    "pull_request_review_id": 558274751,
    "id": 548321467,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTQ2Nw==",
    "diff_hunk": "@@ -408,18 +288,343 @@ struct CNodeState {\n         m_recently_announced_invs.reset();\n     }\n };\n+} // namespace\n+\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n+    /** Protects block inventory data members */\n+    Mutex m_block_inv_mutex;\n+    /** List of blocks that we'll anounce via an `inv` message.\n+     * There is no final sorting before sending, as they are always sent\n+     * immediately and in the order requested. */\n+    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n+    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n+     * message. If we can't announce via a `headers` message, we'll fall back to\n+     * announcing via `inv`. */\n+    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n+    /** The final block hash that we sent in an `inv` message to this peer.\n+     * When the peer requests this block, we send an `inv` message to trigger\n+     * the peer to request the next sequence of block hashes.\n+     * Most peers use headers-first syncing, which doesn't use this mechanism */\n+    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n+\n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> m_starting_height{-1};\n+\n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Protects m_getdata_requests **/\n+    Mutex m_getdata_requests_mutex;\n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n+\n+    /** Traditional CNodeState info **/\n+    CNodeState nodestate GUARDED_BY(cs_main);\n+\n+    explicit Peer(NodeId id, CAddress addr, bool is_inbound) : m_id(id),  nodestate(addr, is_inbound) {}\n+};\n+\n+namespace {\n+class PeerManagerImpl final : public PeerManager {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 199,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This isn't what I was expecting to see. I was assuming that you'd use a pimpl idiom where the `PeerManager` would hold a unique_ptr to the `PeerManagerImpl` rather than have `PeerManagerImpl` inherit from `PeerManager`.\r\n\r\nI'm not saying there's a problem with this way, but I'm curious what made you choose it.",
    "created_at": "2020-12-23T23:43:08Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548321467",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548321467"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548321467"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548321467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548369699",
    "pull_request_review_id": 558322873,
    "id": 548369699,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2OTY5OQ==",
    "diff_hunk": "@@ -408,18 +288,343 @@ struct CNodeState {\n         m_recently_announced_invs.reset();\n     }\n };\n+} // namespace\n+\n+struct Peer {\n+    /** Same id as the CNode object for this peer */\n+    const NodeId m_id{0};\n+\n+    /** Protects misbehavior data members */\n+    Mutex m_misbehavior_mutex;\n+    /** Accumulated misbehavior score for this peer */\n+    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n+\n+    /** Protects block inventory data members */\n+    Mutex m_block_inv_mutex;\n+    /** List of blocks that we'll anounce via an `inv` message.\n+     * There is no final sorting before sending, as they are always sent\n+     * immediately and in the order requested. */\n+    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n+    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n+     * message. If we can't announce via a `headers` message, we'll fall back to\n+     * announcing via `inv`. */\n+    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n+    /** The final block hash that we sent in an `inv` message to this peer.\n+     * When the peer requests this block, we send an `inv` message to trigger\n+     * the peer to request the next sequence of block hashes.\n+     * Most peers use headers-first syncing, which doesn't use this mechanism */\n+    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n+\n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> m_starting_height{-1};\n+\n+    /** Set of txids to reconsider once their parent transactions have been accepted **/\n+    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n+\n+    /** Protects m_getdata_requests **/\n+    Mutex m_getdata_requests_mutex;\n+    /** Work queue of items requested by this peer **/\n+    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n+\n+    /** Traditional CNodeState info **/\n+    CNodeState nodestate GUARDED_BY(cs_main);\n+\n+    explicit Peer(NodeId id, CAddress addr, bool is_inbound) : m_id(id),  nodestate(addr, is_inbound) {}\n+};\n+\n+namespace {\n+class PeerManagerImpl final : public PeerManager {",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 199,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "PeerManager does multiple inheritance already so the virtual overhead's already there, and this avoids two lots of unique pointers?",
    "created_at": "2020-12-24T03:47:58Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548369699",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548369699"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548369699"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548369699/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 338,
    "side": "RIGHT",
    "in_reply_to_id": 548321467
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498363",
    "pull_request_review_id": 558468080,
    "id": 548498363,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5ODM2Mw==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 51,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This alias (and therefore the forward declaration of `Peer` above) don't need to be in the header file. `PeerRef` is only used in net_processing.cpp. I'd also suggest moving the `Peer` comment to the cpp file.",
    "created_at": "2020-12-24T11:18:25Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498363",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498363"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498363"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498363/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498945",
    "pull_request_review_id": 558468080,
    "id": 548498945,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5ODk0NQ==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 120,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure these additional `public` access specifiers are useful. Just the comments is sufficient.",
    "created_at": "2020-12-24T11:20:18Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498945",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498945"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498945"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548498945/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499050",
    "pull_request_review_id": 558468080,
    "id": 548499050,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5OTA1MA==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 109,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This can be in the 'exposed for tests' section.",
    "created_at": "2020-12-24T11:20:47Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499050",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499050"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499050"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499050/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499689",
    "pull_request_review_id": 558468080,
    "id": 548499689,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQ5OTY4OQ==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n+\n+    virtual ~PeerManager() { }\n };\n \n-/** Relay transaction to every node */\n-void RelayTransaction(const uint256& txid, const uint256& wtxid, const CConnman& connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+std::unique_ptr<PeerManager> make_PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n+                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 240,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this be aligned with the `(` above instead of the `<`?",
    "created_at": "2020-12-24T11:23:22Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499689",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499689"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499689"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548499689/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 108,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548504063",
    "pull_request_review_id": 558468080,
    "id": 548504063,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODUwNDA2Mw==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 232,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It'd be great to eventually move all of this fully inside `PeerManagerImpl`, or break it out into an `OrphansManager` class.",
    "created_at": "2020-12-24T11:39:50Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548504063",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548504063"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548504063"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/548504063/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 88,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 87,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549934388",
    "pull_request_review_id": 559778921,
    "id": 549934388,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNDM4OA==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 51,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I left `PeerRef` in the header in the hopes of having `net.cpp` manage the state (though in that case it would potentially become a `unique_ptr`)",
    "created_at": "2020-12-30T04:48:54Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549934388",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549934388"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549934388"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549934388/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 548498363
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549935444",
    "pull_request_review_id": 559779941,
    "id": 549935444,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNTQ0NA==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC\n     /** Get statistics from node state */\n-    bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats);\n+    virtual bool GetNodeStateStats(NodeId nodeid, CNodeStateStats& stats) = 0;\n \n     /** Whether this node ignores txs received over p2p. */\n-    bool IgnoresIncomingTxs() {return m_ignore_incoming_txs;};\n-\n-private:\n-    /** Get a shared pointer to the Peer object.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef GetPeerRef(NodeId id) const;\n-\n-    /** Get a shared pointer to the Peer object and remove it from m_peer_map.\n-     *  May return an empty shared_ptr if the Peer object can't be found. */\n-    PeerRef RemovePeer(NodeId id);\n-\n-    /**\n-     * Potentially mark a node discouraged based on the contents of a BlockValidationState object\n-     *\n-     * @param[in] via_compact_block this bool is passed in because net_processing should\n-     * punish peers differently depending on whether the data was provided in a compact\n-     * block message or not. If the compact block had a valid header, but contained invalid\n-     * txs, the peer should not be punished. See BIP 152.\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForBlock(NodeId nodeid, const BlockValidationState& state,\n-                                 bool via_compact_block, const std::string& message = \"\");\n+    virtual bool IgnoresIncomingTxs() = 0;\n \n+public: // exposed for tests\n     /**\n-     * Potentially disconnect and discourage a node based on the contents of a TxValidationState object\n-     *\n-     * @return Returns true if the peer was punished (probably disconnected)\n-     */\n-    bool MaybePunishNodeForTx(NodeId nodeid, const TxValidationState& state, const std::string& message = \"\");\n-\n-    /** Maybe disconnect a peer and discourage future connections from its address.\n-     *\n-     * @param[in]   pnode     The node to check.\n-     * @return                True if the peer was marked for disconnection in this function\n+     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n+     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n+     * Public for unit testing.\n      */\n-    bool MaybeDiscourageAndDisconnect(CNode& pnode);\n-\n-    void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n-    /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n-                               const std::vector<CBlockHeader>& headers,\n-                               bool via_compact_block);\n-\n-    void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n-\n-    /** Register with TxRequestTracker that an INV has been received from a\n-     *  peer. The announcement parameters are decided in PeerManager and then\n-     *  passed to TxRequestTracker. */\n-    void AddTxAnnouncement(const CNode& node, const GenTxid& gtxid, std::chrono::microseconds current_time)\n-        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    virtual void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message) = 0;\n \n-    /** Send a version message to a peer */\n-    void PushNodeVersion(CNode& pnode, int64_t nTime);\n-\n-    const CChainParams& m_chainparams;\n-    CConnman& m_connman;\n-    /** Pointer to this node's banman. May be nullptr - check existence before dereferencing. */\n-    BanMan* const m_banman;\n-    ChainstateManager& m_chainman;\n-    CTxMemPool& m_mempool;\n-    TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-\n-    int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    //* Whether this node is running in blocks only mode */\n-    const bool m_ignore_incoming_txs;\n-\n-    /** Whether we've completed initial sync yet, for determining when to turn\n-      * on extra block-relay-only peers. */\n-    bool m_initial_sync_finished{false};\n-\n-    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n-     *  on any of the mutexes inside a Peer object. */\n-    mutable Mutex m_peer_mutex;\n-    /**\n-     * Map of all Peer objects, keyed by peer id. This map is protected\n-     * by the m_peer_mutex. Once a shared pointer reference is\n-     * taken, the lock may be released. Individual fields are protected by\n-     * their own locks.\n-     */\n-    std::map<NodeId, PeerRef> m_peer_map GUARDED_BY(m_peer_mutex);\n+    /** Process a single message from a peer. Public for fuzz testing */\n+    virtual void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n+                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc) = 0;\n+\n+    struct COrphanTx {\n+        CTransactionRef tx;\n+        NodeId fromPeer;\n+        int64_t nTimeExpire;\n+        size_t list_pos;\n+    };\n+\n+    virtual bool AddOrphanTx(const CTransactionRef& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual void EraseOrphansFor(NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(g_cs_orphans) = 0;\n+    virtual unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans) = 0;\n+    virtual void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds) = 0;\n+\n+    /** Map from txid to orphan transaction record. Limited by\n+     *  -maxorphantx/DEFAULT_MAX_ORPHAN_TRANSACTIONS */\n+    std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 232,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I did spend a few moments trying to break it out, but my first approach didn't work immediately, so I'm leaving it for later",
    "created_at": "2020-12-30T04:56:20Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549935444",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549935444"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549935444"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549935444/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 88,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 87,
    "side": "RIGHT",
    "in_reply_to_id": 548504063
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549937241",
    "pull_request_review_id": 559782922,
    "id": 549937241,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTkzNzI0MQ==",
    "diff_hunk": "@@ -1319,7 +1319,7 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n         LOCK(m_peer_mutex);\n         for (auto& it : m_peer_map) {\n             Peer& peer = *it.second;\n-            LOCK(peer.m_block_inv_mutex);\n+            LOCK(peer.m_block_inv_mutex); // TODO: violates \"Mutexes inside this struct must not be held when locking m_peer_mutex.\" rule??",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "7f479a56b775f0ef50005bae3a910f9adc95b1b7",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, in that case I would describe it as a lock *ordering* constraint -- \"if you need to acquire internal locks from multiple peers, acquire m_peer_mutex first, then acquire the peers' locks and do your work, then release the internal locks, then release m_peer_mutex. If you are already holding an internal lock, you must release it before acquiring m_peer_mutex (eg by calling GetPeerRef)\".\r\n\r\n(It's probably already clear enough on its own; it's just that the above would go unwritten everywhere else in the codebase, so that it's written down here make it sound like there's some stricter requirement going on...)",
    "created_at": "2020-12-30T05:09:11Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549937241",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549937241"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549937241"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/549937241/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1322,
    "side": "RIGHT",
    "in_reply_to_id": 548306663
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550411991",
    "pull_request_review_id": 560276627,
    "id": 550411991,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMTk5MQ==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 51,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Moved now. Trivial to move back if net.cpp ends up owning them.",
    "created_at": "2020-12-31T06:54:27Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550411991",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550411991"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550411991"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550411991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 59,
    "side": "RIGHT",
    "in_reply_to_id": 548498363
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550412024",
    "pull_request_review_id": 560276648,
    "id": 550412024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDQxMjAyNA==",
    "diff_hunk": "@@ -49,204 +49,64 @@ struct CNodeStateStats {\n  *\n  * Mutexes inside this struct must not be held when locking m_peer_mutex.\n  *\n+ * Details are all local to net_processing.cpp\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n-struct Peer {\n-    /** Same id as the CNode object for this peer */\n-    const NodeId m_id{0};\n-\n-    /** Protects misbehavior data members */\n-    Mutex m_misbehavior_mutex;\n-    /** Accumulated misbehavior score for this peer */\n-    int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n-    bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n-\n-    /** Protects block inventory data members */\n-    Mutex m_block_inv_mutex;\n-    /** List of blocks that we'll anounce via an `inv` message.\n-     * There is no final sorting before sending, as they are always sent\n-     * immediately and in the order requested. */\n-    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n-    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n-     * message. If we can't announce via a `headers` message, we'll fall back to\n-     * announcing via `inv`. */\n-    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-    /** The final block hash that we sent in an `inv` message to this peer.\n-     * When the peer requests this block, we send an `inv` message to trigger\n-     * the peer to request the next sequence of block hashes.\n-     * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n-\n-    /** Set of txids to reconsider once their parent transactions have been accepted **/\n-    std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n-\n-    /** Protects m_getdata_requests **/\n-    Mutex m_getdata_requests_mutex;\n-    /** Work queue of items requested by this peer **/\n-    std::deque<CInv> m_getdata_requests GUARDED_BY(m_getdata_requests_mutex);\n-\n-    explicit Peer(NodeId id) : m_id(id) {}\n-};\n+struct Peer; // body is defined in net_processing.cpp\n \n using PeerRef = std::shared_ptr<Peer>;\n \n-class PeerManager final : public CValidationInterface, public NetEventsInterface {\n+class PeerManager : public CValidationInterface, public NetEventsInterface {\n public:\n-    PeerManager(const CChainParams& chainparams, CConnman& connman, BanMan* banman,\n-                CScheduler& scheduler, ChainstateManager& chainman, CTxMemPool& pool,\n-                bool ignore_incoming_txs);\n-\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n-    void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n-    /**\n-     * Overridden from CValidationInterface.\n-     */\n-    void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n-\n-    /** Initialize a peer by adding it to mapNodeState and pushing a message requesting its version */\n-    void InitializeNode(CNode* pnode) override;\n-    /** Handle removal of a peer by updating various state and removing it from mapNodeState */\n-    void FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) override;\n-    /**\n-    * Process protocol messages received from a given node\n-    *\n-    * @param[in]   pfrom           The node which we have received messages from.\n-    * @param[in]   interrupt       Interrupt condition for processing threads\n-    */\n-    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n-    /**\n-    * Send queued protocol messages to be sent to a give node.\n-    *\n-    * @param[in]   pto             The node which we are sending messages to.\n-    * @return                      True if there is more work to be done\n-    */\n-    bool SendMessages(CNode* pto) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n-\n-    /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode& pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n-    void CheckForStaleTipAndEvictPeers();\n-    /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */\n-    void EvictExtraOutboundPeers(int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    /** Retrieve unbroadcast transactions from the mempool and reattempt sending to peers */\n-    void ReattemptInitialBroadcast(CScheduler& scheduler) const;\n-\n-    /** Process a single message from a peer. Public for fuzz testing */\n-    void ProcessMessage(CNode& pfrom, const std::string& msg_type, CDataStream& vRecv,\n-                        const std::chrono::microseconds time_received, const std::atomic<bool>& interruptMsgProc);\n+    virtual void CheckForStaleTipAndEvictPeers() = 0;\n \n-    /**\n-     * Increment peer's misbehavior score. If the new value >= DISCOURAGEMENT_THRESHOLD, mark the node\n-     * to be discouraged, meaning the peer might be disconnected and added to the discouragement filter.\n-     * Public for unit testing.\n-     */\n-    void Misbehaving(const NodeId pnode, const int howmuch, const std::string& message);\n+    /** Relay transaction to every node */\n+    virtual void RelayTransaction(const uint256& txid, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_main) = 0;\n \n+public: // exposed as debugging info for RPC",
    "path": "src/net_processing.h",
    "position": null,
    "original_position": 120,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "85d78a911272b8ed8be8fa282d14c9f446d8102e",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Removed",
    "created_at": "2020-12-31T06:54:37Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550412024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550412024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550412024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/550412024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 69,
    "side": "RIGHT",
    "in_reply_to_id": 548498945
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556199317",
    "pull_request_review_id": 566823894,
    "id": 556199317,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjE5OTMxNw==",
    "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It was already there but it's confusing to employ a verb for a data struct. Also blocks have only one header.",
    "created_at": "2021-01-13T01:13:53Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556199317",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556199317"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556199317"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556199317/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556209688",
    "pull_request_review_id": 566823894,
    "id": 556209688,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIwOTY4OA==",
    "diff_hunk": "@@ -1075,7 +1078,7 @@ PeerRef PeerManagerImpl::GetPeerRef(NodeId id) const\n     return it != m_peer_map.end() ? it->second : nullptr;\n }\n \n-PeerRef PeerManagerImpl::RemovePeer(NodeId id)\n+PeerRef PeerManagerImpl::RemovePeer(NodeId id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 717,
    "original_position": 119,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "77aa3edcb01deeb63b1b5e911b85ea78f32fc281",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Superfluous lock annotation, already present on method declaration in net_processing.h?",
    "created_at": "2021-01-13T01:46:32Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556209688",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556209688"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556209688"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556209688/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1119,
    "original_line": 1119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223603",
    "pull_request_review_id": 566823894,
    "id": 556223603,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIyMzYwMw==",
    "diff_hunk": "@@ -601,6 +604,9 @@ class PeerManagerImpl final : public PeerManager\n     /** Number of preferable block download peers. */\n     int nPreferredDownload GUARDED_BY(cs_main) = 0;\n \n+    /** Height of highest fast announce block, updated by NewPoWValidBlock */\n+    int m_height_of_highest_fast_announce GUARDED_BY(cs_main) = 0;",
    "path": "src/net_processing.cpp",
    "position": 417,
    "original_position": 15,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "2c5ae7a9236627403055a0d1fca4b0f4a9a85825",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe `m_height_highest_cb_fast_announced`, inducing a unit is always better IMO.",
    "created_at": "2021-01-13T02:30:29Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223603",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223603"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223603"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 603,
    "original_line": 603,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223881",
    "pull_request_review_id": 566823894,
    "id": 556223881,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjIyMzg4MQ==",
    "diff_hunk": "@@ -769,11 +769,30 @@ class CNode\n class NetEventsInterface\n {\n public:\n-    virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n-    virtual bool SendMessages(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_sendProcessing) = 0;\n+    /** Initialize a peer (setup state, queue any initial messages) */",
    "path": "src/net.h",
    "position": 3,
    "original_position": 6,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "0d246a59b606c51728d10cb70004a6eedb951bca",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe precise that's network-related state, and that we queue ready-to-send messages, not received messages yet.",
    "created_at": "2021-01-13T02:31:30Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223881",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223881"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223881"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556223881/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 770,
    "original_line": 770,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556256615",
    "pull_request_review_id": 566886750,
    "id": 556256615,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1NjYxNQ==",
    "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think you're misreading? Should be parsed as \"Whether (this block) has (validated headers)\" not \"Whether (this block) (has validated) headers\". Unless I've messed up, this should just be moving in this PR, so would rather avoid editing it.",
    "created_at": "2021-01-13T04:34:38Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556256615",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556256615"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556256615"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556256615/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT",
    "in_reply_to_id": 556199317
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556258257",
    "pull_request_review_id": 566888431,
    "id": 556258257,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI1ODI1Nw==",
    "diff_hunk": "@@ -1075,7 +1078,7 @@ PeerRef PeerManagerImpl::GetPeerRef(NodeId id) const\n     return it != m_peer_map.end() ? it->second : nullptr;\n }\n \n-PeerRef PeerManagerImpl::RemovePeer(NodeId id)\n+PeerRef PeerManagerImpl::RemovePeer(NodeId id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)",
    "path": "src/net_processing.cpp",
    "position": 717,
    "original_position": 119,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "77aa3edcb01deeb63b1b5e911b85ea78f32fc281",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The declaration is in net_processing.cpp. It is redundant, yeah; I'm not 100% convinced the locking changes for including `CNodeState` into `Peer` are adequate (in particular, that it's reasonable to be confident that the interaction with `m_peer_mutex` is okay), so haven't cleaned this up.",
    "created_at": "2021-01-13T04:40:36Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556258257",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556258257"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556258257"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/556258257/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1119,
    "original_line": 1119,
    "side": "RIGHT",
    "in_reply_to_id": 556209688
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557787335",
    "pull_request_review_id": 568734225,
    "id": 557787335,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzc4NzMzNQ==",
    "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Honestly, I'm not native so don't get the semantic difference you're pointing to me :/",
    "created_at": "2021-01-15T00:29:17Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557787335",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557787335"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557787335"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557787335/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT",
    "in_reply_to_id": 556199317
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557843020",
    "pull_request_review_id": 568795951,
    "id": 557843020,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzAyMA==",
    "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think \"Whether this block has (headers which have been validated)\" is the right interpretation, versus \"Whether this block (has itself taken the action of validating) headers\" while a valid interpretation isn't the intended one. \"has validated\" is ambiguous between being the past tense of the verb to validate, or the present tense of the verb \"to have\" and the adjective \"validated\".",
    "created_at": "2021-01-15T03:40:00Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557843020",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557843020"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557843020"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/557843020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT",
    "in_reply_to_id": 556199317
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559052738",
    "pull_request_review_id": 569974897,
    "id": 559052738,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTA1MjczOA==",
    "diff_hunk": "@@ -161,6 +161,14 @@ void EraseOrphansFor(NodeId peer);\n \n // Internal stuff\n namespace {\n+/** Blocks that are in flight, and that are in the queue to be downloaded. */\n+struct QueuedBlock {\n+    uint256 hash;\n+    const CBlockIndex* pindex;                               //!< Optional.\n+    bool fValidatedHeaders;                                  //!< Whether this block has validated headers at the time of request.",
    "path": "src/net_processing.cpp",
    "position": null,
    "original_position": 8,
    "commit_id": "3f90a18ad71082bcb69d0ef4bfedeeb2daad06f3",
    "original_commit_id": "536a57b07634233bfc866b4b21471e7036c16733",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Gotcha, I agree with the interpretation :)",
    "created_at": "2021-01-16T23:31:22Z",
    "updated_at": "2021-02-16T02:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r559052738",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559052738"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/20758#discussion_r559052738"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20758"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/559052738/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT",
    "in_reply_to_id": 556199317
  }
]