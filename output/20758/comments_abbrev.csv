ajtowns,2020-12-23 21:37:16,"Marked as WIP; definitely needs some review/testing.\n\nThe `move CNodeState into Peer` commit might not be the greatest idea -- the locking issues are a little subtle (assumign I got them right). Not sure the the locking guidelines for Peer make sense (see ""annotate lock guideline violation?"" commit) though (and generally not convinced we need the multiple per-peer state mutexes that Peer has).",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483382,750483382,
DrahtBot,2020-12-23 21:37:50,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21090 (Default to NODE_WITNESS in nLocalServices by dhruv)\n* #21061 ([p2p] Introduce node rebroadcast module by amitiutt",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750483525,750483525,
jnewbery,2020-12-23 22:54:45,"Strong concept ACK. I really like the idea of compilation firewalls and not exposing the innards of net_processing through the header file.\n\nI don't know where this fits in the sequence of PRs for #19398. Doing it first makes some sense because it means we won't be putting stuff into the header file only to remove it later, but I think this PR will need to be split up into more digestible piec",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-750520136,750520136,
jnewbery,2020-12-26 14:01:01,"I've made a branch at https://github.com/jnewbery/bitcoin/tree/pr20758.1 that implements something I've wanted to try for a while. It moves PeerManagerImpl into its own translation unit (net_processing_impl.cpp), with the declaration of PeerManagerImpl in net_processing_impl.h. That header file is only included by net_processing.cpp (so the std::unique_ptr<PeerManagerImpl> can be constructed) and ",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751358315,751358315,
ajtowns,2020-12-28 00:33:44,">  It moves PeerManagerImpl into its own translation unit\n\nI think a better approach would be to have `module.h` as the public interface, `module_impl.h` as the white-box testing interface (ie the class definition of `PeerManagerImpl`), and `module.cpp` as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\n\",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-751535311,751535311,
jnewbery,2020-12-29 16:13:20,"> I think a better approach would be to have module.h as the public interface, module_impl.h as the white-box testing interface (ie the class definition of PeerManagerImpl), and module.cpp as the implementation -- no need to have two cpp files for what's really only a single module, and it also avoids moving the code around.\n\nACK. This seems even better!\n\n> I think maybe it'd be even bette",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752140615,752140615,
ajtowns,2020-12-30 04:54:58,"> Aside: I think 'tested purely via their public interfaces' is an OOP mantra that sounds good in theory, but white-box testing is too useful to throw out entirely, especially when dealing with legacy code that has existing large modules/classes.\n\nI still think that's white-box testing -- it's just that calling public functions is equivalent to entering at function boundaries, while calling pr",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-752327389,752327389,
ajtowns,2021-01-14 00:53:41,Rebased now #20811 is merged. I think the next step is to split some of the commits moving globals into PeerManagerImpl members into a separate PR.,https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-759853026,759853026,
ajtowns,2021-01-15 08:40:38,"Pulled out some commits (and added one to drop connman from `MaybeSetPeerAsAnnoun...`) into #20942, so that's the next set to review.",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-760755534,760755534,
ajtowns,2021-01-31 16:41:53,"Rebased on #20942 and included a set of 10 commits to introduce txorphanage.h and cpp that pulls out (and de-globalises) orphan tracking. The only remaining global there is g_cs_orphans. I think it would make sense to move the orphan work sets from `net_processing.cpp:Peer` into a new map in `txorphanage.h:TxOrphanage` -- that would allow the lock to be moved into the class as well, and might also",https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-770410626,770410626,
MarcoFalke,2021-08-18 16:45:34,Needs rebase?,https://github.com/bitcoin/bitcoin/pull/20758#issuecomment-901266996,901266996,
jnewbery,2020-12-23 22:49:28,"You're the second person who's been confused by this comment (https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546338754), which tells me that I didn't make it clear enough.\n\nIt's fine to lock m_peer_mutex and then lock one of the inner mutexes, or even to lock m_peer_mutex, take a shared_ptr to the Peer, release m_peer_mutex and then lock an inner mutex. The only rule is that we don'",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548306663,548306663,src/net_processing.cpp
jnewbery,2020-12-23 23:43:08,"This isn't what I was expecting to see. I was assuming that you'd use a pimpl idiom where the `PeerManager` would hold a unique_ptr to the `PeerManagerImpl` rather than have `PeerManagerImpl` inherit from `PeerManager`.\n\nI'm not saying there's a problem with this way, but I'm curious what made you choose it.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548321467,548321467,src/net_processing.cpp
ajtowns,2020-12-24 03:47:58,"PeerManager does multiple inheritance already so the virtual overhead's already there, and this avoids two lots of unique pointers?",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548369699,548369699,src/net_processing.cpp
jnewbery,2020-12-24 11:18:25,This alias (and therefore the forward declaration of `Peer` above) don't need to be in the header file. `PeerRef` is only used in net_processing.cpp. I'd also suggest moving the `Peer` comment to the cpp file.,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498363,548498363,src/net_processing.h
jnewbery,2020-12-24 11:20:18,I'm not sure these additional `public` access specifiers are useful. Just the comments is sufficient.,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548498945,548498945,src/net_processing.h
jnewbery,2020-12-24 11:20:47,This can be in the 'exposed for tests' section.,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499050,548499050,src/net_processing.h
jnewbery,2020-12-24 11:23:22,Should this be aligned with the `(` above instead of the `<`?,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548499689,548499689,src/net_processing.h
jnewbery,2020-12-24 11:39:50,"It'd be great to eventually move all of this fully inside `PeerManagerImpl`, or break it out into an `OrphansManager` class.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r548504063,548504063,src/net_processing.h
ajtowns,2020-12-30 04:48:54,I left `PeerRef` in the header in the hopes of having `net.cpp` manage the state (though in that case it would potentially become a `unique_ptr`),https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549934388,549934388,src/net_processing.h
ajtowns,2020-12-30 04:56:20,"I did spend a few moments trying to break it out, but my first approach didn't work immediately, so I'm leaving it for later",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549935444,549935444,src/net_processing.h
ajtowns,2020-12-30 05:09:11,"Ah, in that case I would describe it as a lock *ordering* constraint -- ""if you need to acquire internal locks from multiple peers, acquire m_peer_mutex first, then acquire the peers' locks and do your work, then release the internal locks, then release m_peer_mutex. If you are already holding an internal lock, you must release it before acquiring m_peer_mutex (eg by calling GetPeerRef)"".\n\n(It",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r549937241,549937241,src/net_processing.cpp
ajtowns,2020-12-31 06:54:27,Moved now. Trivial to move back if net.cpp ends up owning them.,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550411991,550411991,src/net_processing.h
ajtowns,2020-12-31 06:54:37,Removed,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r550412024,550412024,src/net_processing.h
ariard,2021-01-13 01:13:53,It was already there but it's confusing to employ a verb for a data struct. Also blocks have only one header.,https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556199317,556199317,src/net_processing.cpp
ariard,2021-01-13 01:46:32,"Superfluous lock annotation, already present on method declaration in net_processing.h?",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556209688,556209688,src/net_processing.cpp
ariard,2021-01-13 02:30:29,"Maybe `m_height_highest_cb_fast_announced`, inducing a unit is always better IMO.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223603,556223603,src/net_processing.cpp
ariard,2021-01-13 02:31:30,"Maybe precise that's network-related state, and that we queue ready-to-send messages, not received messages yet.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556223881,556223881,src/net.h
ajtowns,2021-01-13 04:34:38,"I think you're misreading? Should be parsed as ""Whether (this block) has (validated headers)"" not ""Whether (this block) (has validated) headers"". Unless I've messed up, this should just be moving in this PR, so would rather avoid editing it.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556256615,556256615,src/net_processing.cpp
ajtowns,2021-01-13 04:40:36,"The declaration is in net_processing.cpp. It is redundant, yeah; I'm not 100% convinced the locking changes for including `CNodeState` into `Peer` are adequate (in particular, that it's reasonable to be confident that the interaction with `m_peer_mutex` is okay), so haven't cleaned this up.",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r556258257,556258257,src/net_processing.cpp
ariard,2021-01-15 00:29:17,"Honestly, I'm not native so don't get the semantic difference you're pointing to me :/",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557787335,557787335,src/net_processing.cpp
ajtowns,2021-01-15 03:40:00,"I think ""Whether this block has (headers which have been validated)"" is the right interpretation, versus ""Whether this block (has itself taken the action of validating) headers"" while a valid interpretation isn't the intended one. ""has validated"" is ambiguous between being the past tense of the verb to validate, or the present tense of the verb ""to have"" and the adjective ""validated"".",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r557843020,557843020,src/net_processing.cpp
ariard,2021-01-16 23:31:22,"Gotcha, I agree with the interpretation :)",https://github.com/bitcoin/bitcoin/pull/20758#discussion_r559052738,559052738,src/net_processing.cpp
