[
  {
    "sha": "480e3415d738a4e0e2ad9774c43f29937178ecae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODBlMzQxNWQ3MzhhNGUwZTJhZDk3NzRjNDNmMjk5MzcxNzhlY2Fl",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-05-20T17:22:29Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-05-23T19:15:46Z"
      },
      "message": "configure: Add flag for enabling thread_local.\n\n- When aiming for glibc compatibility, don't use thread_local.\n- Add a flag --enable-threadlocal, which, when specified, will\n  enable/disable thread_local regardless of the value of glibc_compat.\n- FreeBSD has a buggy thread_local, don't use it.",
      "tree": {
        "sha": "aed40a1c1f3f40da6605f7f8d37f2fcdd58f3ccf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aed40a1c1f3f40da6605f7f8d37f2fcdd58f3ccf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/480e3415d738a4e0e2ad9774c43f29937178ecae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480e3415d738a4e0e2ad9774c43f29937178ecae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/480e3415d738a4e0e2ad9774c43f29937178ecae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/480e3415d738a4e0e2ad9774c43f29937178ecae/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "149b3477ecff4ff9c50cd38724c86cb6ae4d3276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/149b3477ecff4ff9c50cd38724c86cb6ae4d3276",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/149b3477ecff4ff9c50cd38724c86cb6ae4d3276"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 49,
      "deletions": 36
    },
    "files": [
      {
        "sha": "5e1a5e14a13277180256080fecfb6000d344be1b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 49,
        "deletions": 36,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/480e3415d738a4e0e2ad9774c43f29937178ecae/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/480e3415d738a4e0e2ad9774c43f29937178ecae/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=480e3415d738a4e0e2ad9774c43f29937178ecae",
        "patch": "@@ -194,6 +194,12 @@ AC_ARG_ENABLE([glibc-back-compat],\n   [use_glibc_compat=$enableval],\n   [use_glibc_compat=no])\n \n+AC_ARG_ENABLE([threadlocal],\n+  [AS_HELP_STRING([--enable-threadlocal],\n+  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enabled if there is platform support and glibc-back-compat is not enabled)])],\n+  [use_thread_local=$enableval],\n+  [use_thread_local=auto])\n+\n AC_ARG_ENABLE([asm],\n   [AS_HELP_STRING([--disable-asm],\n   [disable assembly routines (enabled by default)])],\n@@ -827,42 +833,49 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n-TEMP_LDFLAGS=\"$LDFLAGS\"\n-LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n-AC_MSG_CHECKING([for thread_local support])\n-AC_LINK_IFELSE([AC_LANG_SOURCE([\n-  #include <thread>\n-  static thread_local int foo = 0;\n-  static void run_thread() { foo++;}\n-  int main(){\n-  for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n-  return foo;\n-  }\n-  ])],\n-  [\n-   case $host in\n-     *mingw*)\n-        # mingw32's implementation of thread_local has also been shown to behave\n-        # erroneously under concurrent usage; see:\n-        # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n-        AC_MSG_RESULT(no)\n-        ;;\n-      *darwin*)\n-        # TODO enable thread_local on later versions of Darwin where it is\n-        # supported (per https://stackoverflow.com/a/29929949)\n-        AC_MSG_RESULT(no)\n-        ;;\n-      *)\n-        AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n-        AC_MSG_RESULT(yes)\n-        ;;\n-    esac\n-  ],\n-  [\n-    AC_MSG_RESULT(no)\n-  ]\n-)\n-LDFLAGS=\"$TEMP_LDFLAGS\"\n+if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && test \"x$use_glibc_compat\" = xno; }; then\n+  TEMP_LDFLAGS=\"$LDFLAGS\"\n+  LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n+  AC_MSG_CHECKING([for thread_local support])\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([\n+    #include <thread>\n+    static thread_local int foo = 0;\n+    static void run_thread() { foo++;}\n+    int main(){\n+    for(int i = 0; i < 10; i++) { std::thread(run_thread).detach();}\n+    return foo;\n+    }\n+    ])],\n+    [\n+     case $host in\n+       *mingw*)\n+          # mingw32's implementation of thread_local has also been shown to behave\n+          # erroneously under concurrent usage; see:\n+          # https://gist.github.com/jamesob/fe9a872051a88b2025b1aa37bfa98605\n+          AC_MSG_RESULT(no)\n+          ;;\n+        *darwin*)\n+          # TODO enable thread_local on later versions of Darwin where it is\n+          # supported (per https://stackoverflow.com/a/29929949)\n+          AC_MSG_RESULT(no)\n+          ;;\n+        *freebsd*)\n+          # FreeBSD's implementation of thread_local is also buggy (per\n+          # https://groups.google.com/d/msg/bsdmailinglist/22ncTZAbDp4/Dii_pII5AwAJ)\n+          AC_MSG_RESULT(no)\n+          ;;\n+        *)\n+          AC_DEFINE(HAVE_THREAD_LOCAL,1,[Define if thread_local is supported.])\n+          AC_MSG_RESULT(yes)\n+          ;;\n+      esac\n+    ],\n+    [\n+      AC_MSG_RESULT(no)\n+    ]\n+  )\n+  LDFLAGS=\"$TEMP_LDFLAGS\"\n+fi\n \n # Check for different ways of gathering OS randomness\n AC_MSG_CHECKING(for Linux getrandom syscall)"
      }
    ]
  }
]