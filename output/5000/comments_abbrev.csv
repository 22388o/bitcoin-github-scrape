luke-jr,2014-09-29T02:34:51Z,"Concept ACK, although I'd prefer a more abstract implementation (eg, IsSoftforkSafe similar to IsStandard).\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57111059,57111059,
petertodd,2014-09-29T02:49:04Z,"@luke-jr My intent here is to target something very specific - execution of opcodes reserved for upgrades - to avoid unnecessarily rejecting transactions using new opcodes in non-executed codepaths. For instance with a CHECKLOCKTIMEVERIFY opcode to lock funds until a certain time would often be used in conjunction with another way to spend the output that doesn't use that new feature, and there's ",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57111637,57111637,
luke-jr,2014-09-29T03:00:33Z,"@petertodd My goal isn't to remove this policy - in fact, I'd like to have it deployed on Eligius sooner. Simply that having a dedicated function to check things like this would be useful abstraction.\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57112132,57112132,
petertodd,2014-09-29T03:08:17Z,"@luke-jr What specifically do you want the abstraction for? I mean, do you want to know if a transaction breaks a soft-fork safe rule specifically? If tx is otherwise valid, IsSoftforkSafe(tx) could simply be to run EvalScript() with the softfork-safe rules enabled, returning true so long as EvalScript() returns true and tx.nVersion is as expected. The issue is that it returning false may also mea",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57112417,57112417,
sipa,2014-09-29T03:10:18Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57112487,57112487,
luke-jr,2014-09-29T03:11:53Z,"@petertodd It is potentially helpful to reduce CPU usage to skip non-softforksafe transactions without evaluating them. I don't feel strongly that this abstraction is needed, but it doesn't seem like it should be difficult to do?\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57112551,57112551,
petertodd,2014-09-29T03:14:20Z,"@luke-jr Sure, but the only time where that'd save a meaningful amount of CPU time is during an attack, and equally the attacker could just use up CPU time with invalid but softfork-safe scripts.\n\nAgain, note how SCRIPT_VERIFY_NULLDUMMY is implemented in the exact same way.\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57112648,57112648,
gavinandresen,2014-09-29T13:21:54Z,"I suggest dropping the term ""blacklist"" because that is misleading -- these are not black-listed, they are just non-standard-if-executed. A miner might still mine these and the block is perfectly valid and will be accepted by the network.\n\nI also don't think the tests belong in script_invalid.json, again because they ARE valid, just not standard. I suggest creating a new test case and a script_n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57159140,57159140,
sipa,2014-09-29T14:36:41Z,"Blacklist is maybe indeed to strong a word, but IMHO the script engine does\nnot need to know or care whether a particular flag is used by the consensus\ncode or as a policy, and script_valid/script_invalid is the right way to\ntest for those.\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57170056,57170056,
gavinandresen,2014-09-29T14:46:59Z,"Script engine doesn't need to know. I want to make life a tiny bit easier for other implementations that are using script_invalid as ""if you accept any of this stuff then your implementation is broken.""\n\nI can imagine that having ""valid but not standard"" stuff in script_invalid.json is likely to cause them painful banging-their-heads-on-the-desk-when-they-figure-out-we-added-Yet-Another-Script-F",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57171672,57171672,
petertodd,2014-09-29T15:00:46Z,"@gavinandresen We already have lots of ""valid but not standard"" stuff in (script|tx) _ (in)valid.json, e.g. SCRIPT_VERIFY_NULLDUMMY, SCRIPT_VERIFY_STRICTENC, and soon BIP62 flags. I am one of those ""other implementation"" maintainers, and the bitcoinj maintainers are using up-to-date (script|tx)_(in)valid.json tests. Having all the relevant tests in one place is highly convenient.\n\nre: ""telling p",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57173904,57173904,
sipa,2014-09-29T15:06:18Z,"We can add a comment to script_valid saying: ""Flags x/y/z are currently not\nused in consensus code, so if you don't care about them, skip tests that\nmention them"".\n\nThe reason I prefer using flags (and the associated script_valid tests) is\nbecause it allows clear testing of interaction of different flags), and\nthat for most things it results in a smaller and more efficient\nimplementation (n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57174816,57174816,
petertodd,2014-09-29T15:16:08Z,"@sipa I'd perfer to avoid adding extra comments like that with the rational being if you're using any of the script/tx test cases, you really should have very good familiarity with the Bitcoin Core C++ code anyway. I do describe what the SCRIPT_VERIFY_BLACKLIST_UPGRADABLE_NOPS flag is thoroughly in a comment where it is defined.\n\nAgreed re: flag rational - NULLDUMMY is another example that's nea",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57176381,57176381,
gavinandresen,2014-09-29T15:42:46Z,"RE: other stuff in script_valid: \nOkey dokey, then maybe it is time to rename script_valid / script_invalid  to  script_accepted / script_rejected (but I can live with current naming).\n\n@petertodd : what do you mean by this is a security fix? My point is that if you use an OP_FOO transaction before miners are validating it then you are insecure. Period.  Relying on ""most nodes won't relay and m",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57180767,57180767,
petertodd,2014-09-29T16:16:10Z,"@gavinandresen re-read the pull-req description; remember it's written from the perspective of a full-node operator, in particular, think about the case where you are a miner. \n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57185992,57185992,
BitcoinPullTester,2014-09-29T17:50:06Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/p5000_9974941aab08c0f97a116a5947b7d969caece16f/ for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.lo",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57200216,57200216,
mikehearn,2014-10-01T10:02:19Z,I think this is attempting to fix one particular instance of the more general problem: soft forks are a bad idea that we should just stop referring to. Indeed we should be building ways to _prevent_ soft forks and turn them into hard forks. One way to do that would be to introduce a new rule that simply rejects blocks with an unknown version. In the event that the majority switches to making block,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57442789,57442789,
petertodd,2014-10-01T10:19:19Z,"@mikehearn ""I believe I've laid out the argument for this quite a few times in the past and nobody has really disagreed"" <- People have disagreed repeatedly. Since you're not convinced by our counter arguments - and you're the only person who seems to think soft-forks are bad around here - I strongly suspect that what you're interpreting as 'agreemnt' is actually just that people have stopped spen",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-57444404,57444404,
sipa,2014-10-06T21:54:18Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58106242,58106242,
gmaxwell,2014-10-07T00:54:33Z,"This was always my understand of how NOPs should be handled.  I agree that ""blacklist"" is likely to be misunderstood.  ""Discourage use of reserved NO OP opcodes for forward compatiblity"" may be better.\n\nMike, I strongy disagree with your remarks on soft forks, and I'm unclear as to why you would have taken this position. Extending functionality by precluding otherwise meaningless transactions is",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58122615,58122615,
webdeli,2014-10-07T01:16:43Z,"As I don't have any more potent way of adding sentiment to the stack than what Gregory Maxwell stated, i'd like to simply add: ""Yeah, what he said"". Bitcoin is still highly experimental is an observation in the standard disclaimer of the LTB network podcast and that is a GOOD thing. Agility and affordance to build Bitcoin is at stake and soft-forking is a tool with discrete utility to the developm",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58124117,58124117,
TheBlueMatt,2014-10-07T07:34:34Z,"Conceptual ACK, but I have to agree that using the term ""blacklist"" is probably bad.\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58147382,58147382,
mikehearn,2014-10-07T09:46:00Z,"I don't think we should be relying on IsStandard for preserving the security of full nodes - people can and do change that function on the assumption that it doesn't affect the fully validating nature of their node. Plus, I thought the goal was to relax and eventually remove it over time anyway. Certainly the trend has been to make more things standard. But I agree that if the previous behave were",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58160603,58160603,
gavinandresen,2014-10-07T15:32:41Z,"@petertodd : I'm still confused as to how this improves the upgrade situation.\n\nTo be concrete, we've got a funding transaction, TxFund. It will look like:\n\n```\nversion: 1   (because the person sending me BTC has not upgraded yet)\nscriptPubKey: HASH160 <hash> EQUAL\n```\n\nAnd a redeeming transaction, TxRedeem. It will look like:\n\n```\nversion: 2  (because it is redeemed by upgraded softwa",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58203810,58203810,
petertodd,2014-10-13T13:10:21Z,"@gavinandresen First of all, you're assuming that post-upgrade we reject nVersion < post_upgrade_nVersion blocks. This is problematic as now non-upgraded miners are creating blocks rejected by the rest of the network that to non-upgraded wallets look like real confirmations. Lots of people accept funds based on a single confirmation, so this risks people getting double-spent. With BIP34 - Height i",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58889473,58889473,
petertodd,2014-10-13T13:13:00Z,@sipa Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58889779,58889779,
petertodd,2014-10-13T13:13:31Z,"Oh, and also changed to terminology from 'blacklist' to 'discouraged'\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58889845,58889845,
TheBlueMatt,2014-10-13T18:04:07Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-58931119,58931119,
gavinandresen,2014-10-28T18:17:43Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-60804621,60804621,
sipa,2014-11-04T14:08:17Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-61643791,61643791,
petertodd,2014-11-04T17:19:13Z,Rebased\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-61678212,61678212,
btcdrak,2014-11-04T18:48:33Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-61692575,61692575,
sipa,2014-11-17T16:26:50Z,utACK; I really think we want this merged before there is a really with generalized P2SH IsStandard().\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-63330921,63330921,
gmaxwell,2014-11-18T01:19:47Z,"Before there is a release*. Alternatively, we could back out the IsStandard changes. :(\n\nIdea/Approach ACK but  this needs a rebase to reflect the set_error() changes.\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-63407395,63407395,
petertodd,2014-11-18T03:22:34Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-63417122,63417122,
gmaxwell,2014-11-18T16:33:24Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-63499660,63499660,
schildbach,2014-11-18T16:35:01Z,"Oh wow, pull request 5000 (-:\n",https://github.com/bitcoin/bitcoin/pull/5000#issuecomment-63499963,63499963,
