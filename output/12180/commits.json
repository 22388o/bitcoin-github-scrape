[
  {
    "sha": "0d0de9ad771b648ff5b97852147215c263415e15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDBkZTlhZDc3MWI2NDhmZjViOTc4NTIxNDcyMTVjMjYzNDE1ZTE1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-01-14T01:26:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-01-14T02:43:28Z"
      },
      "message": "scripted-diff: change kB to kvB, kilobyte to kilovbyte\n\nRenames kB and kilobyte to kvB and kilovbyte respectively in order\nto make clear the fee estimates are in virtual bytes rather than\nactual bytes.\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/init.cpp\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/*.h\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/policy/*.h\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/policy/*.cpp\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/qt/*.cpp\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/rpc/*.cpp\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/wallet/*.cpp\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/wallet/*.cpp\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/rpc/*.cpp\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/qt/*.cpp\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/*.cpp\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/policy/*.h\nsed -i 's/\\<kilobyte\\>/\\kilovbyte/g' src/policy/*.cpp\nsed -i 's/\\<\\kB\\>/\\kvB/g' src/test/*.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "ed498e4533390ece1d9920cd488ce6c1973272b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed498e4533390ece1d9920cd488ce6c1973272b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d0de9ad771b648ff5b97852147215c263415e15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0de9ad771b648ff5b97852147215c263415e15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d0de9ad771b648ff5b97852147215c263415e15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0de9ad771b648ff5b97852147215c263415e15/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45cf8a03cb57b8639a8d47323bde46ba22d9eeaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45cf8a03cb57b8639a8d47323bde46ba22d9eeaf"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 43,
      "deletions": 43
    },
    "files": [
      {
        "sha": "01a061bcd7c4d7ccc57568b90b0f70fef70baddd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -459,7 +459,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (showDebug)\n     {\n-        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction fee per kvB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY));\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n@@ -468,22 +468,22 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug) {\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !testnetChainParams->RequireStandard()));\n-        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n-        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n+        strUsage += HelpMessageOpt(\"-incrementalrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) used to define cost of relay, used for mempool limiting and BIP 125 replacement. (default: %s)\", CURRENCY_UNIT, FormatMoney(DEFAULT_INCREMENTAL_RELAY_FEE)));\n+        strUsage += HelpMessageOpt(\"-dustrelayfee=<amt>\", strprintf(\"Fee rate (in %s/kvB) used to defined dust, the value of an output such that it will cost more than its value in fees at this fee rate to spend it. (default: %s)\", CURRENCY_UNIT, FormatMoney(DUST_RELAY_TX_FEE)));\n     }\n     strUsage += HelpMessageOpt(\"-bytespersigop\", strprintf(_(\"Equivalent bytes per sigop in transactions for relay and mining (default: %u)\"), DEFAULT_BYTES_PER_SIGOP));\n     strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), DEFAULT_ACCEPT_DATACARRIER));\n     strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kvB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-whitelistrelay\", strprintf(_(\"Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)\"), DEFAULT_WHITELISTRELAY));\n     strUsage += HelpMessageOpt(\"-whitelistforcerelay\", strprintf(_(\"Force relay of transactions from whitelisted peers even if they violate local relay policy (default: %d)\"), DEFAULT_WHITELISTFORCERELAY));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n-    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n+    strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kvB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n "
      },
      {
        "sha": "97215dd0592dea9b70b380709449fe4c4c68a669",
        "filename": "src/policy/feerate.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -39,5 +39,5 @@ CAmount CFeeRate::GetFee(size_t nBytes_) const\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    return strprintf(\"%d.%08d %s/kvB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "829f98e624e63d8bc68238d048231d8ac0083df1",
        "filename": "src/policy/feerate.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -14,22 +14,22 @@\n extern const std::string CURRENCY_UNIT;\n \n /**\n- * Fee rate in satoshis per kilobyte: CAmount / kB\n+ * Fee rate in satoshis per kilovbyte: CAmount / kvB\n  */\n class CFeeRate\n {\n private:\n     CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n \n public:\n-    /** Fee rate of 0 satoshis per kB */\n+    /** Fee rate of 0 satoshis per kvB */\n     CFeeRate() : nSatoshisPerK(0) { }\n     template<typename I>\n     CFeeRate(const I _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) {\n         // We've previously had bugs creep in from silent double->int conversion...\n         static_assert(std::is_integral<I>::value, \"CFeeRate should be used without floats\");\n     }\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n+    /** Constructor for a fee rate in satoshis per kvB. The size in bytes must not exceed (2^63 - 1)*/\n     CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n     /**\n      * Return the fee in satoshis for the given size in bytes."
      },
      {
        "sha": "5b47661a9a6bba4fb0ce6a6b4bc278b412d9b36e",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -18,19 +18,19 @@\n CAmount GetDustThreshold(const CTxOut& txout, const CFeeRate& dustRelayFeeIn)\n {\n     // \"Dust\" is defined in terms of dustRelayFee,\n-    // which has units satoshis-per-kilobyte.\n+    // which has units satoshis-per-kilovbyte.\n     // If you'd pay more in fees than the value of the output\n     // to spend something, then we consider it dust.\n     // A typical spendable non-segwit txout is 34 bytes big, and will\n     // need a CTxIn of at least 148 bytes to spend:\n     // so dust is a spendable txout less than\n     // 182*dustRelayFee/1000 (in satoshis).\n-    // 546 satoshis at the default rate of 3000 sat/kB.\n+    // 546 satoshis at the default rate of 3000 sat/kvB.\n     // A typical spendable segwit txout is 31 bytes big, and will\n     // need a CTxIn of at least 67 bytes to spend:\n     // so dust is a spendable txout less than\n     // 98*dustRelayFee/1000 (in satoshis).\n-    // 294 satoshis at the default rate of 3000 sat/kB.\n+    // 294 satoshis at the default rate of 3000 sat/kvB.\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n "
      },
      {
        "sha": "3f8c67e22a5738b6f27ec58174a75afa58f3c4ca",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -18,7 +18,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"-maxtxfee is set very high! Fees this large could be paid on a single \"\n \"transaction.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient \"\n+\"A fee rate (in %s/kvB) that will be used when fee estimation has insufficient \"\n \"data (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Accept relayed transactions received from whitelisted peers even when not \"\n@@ -87,10 +87,10 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Extra transactions to keep in memory for compact block reconstructions \"\n \"(default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, \"\n+\"Fees (in %s/kvB) smaller than this are considered zero fee for relaying, \"\n \"mining and transaction creation (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Fees (in %s/kB) smaller than this are considered zero fee for transaction \"\n+\"Fees (in %s/kvB) smaller than this are considered zero fee for transaction \"\n \"creation (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Force relay of transactions from whitelisted peers even if they violate \"\n@@ -157,7 +157,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Rescans are not possible in pruned mode. You will need to use -reindex which \"\n \"will download the whole blockchain again.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Set lowest fee rate (in %s/kB) for transactions to be included in block \"\n+\"Set lowest fee rate (in %s/kvB) for transactions to be included in block \"\n \"creation. (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Set the number of script verification threads (%u to %d, 0 = auto, <0 = \"\n@@ -173,7 +173,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"rebuild the block database if you are sure that your computer's date and \"\n \"time are correct\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"The fee rate (in %s/kB) that indicates your tolerance for discarding change \"\n+\"The fee rate (in %s/kvB) that indicates your tolerance for discarding change \"\n \"by adding it to the fee (default: %s). Note: An output is discarded if it is \"\n \"dust at this rate, but we will always discard up to the dust relay fee and a \"\n \"discard fee above that is limited by the fee estimate for the longest target\"),\n@@ -306,7 +306,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in %s/kvB) to add to transactions you send (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"How many blocks to check at startup (default: %u, 0 = all)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Importing...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Imports blocks from external blk000??.dat file on startup\"),"
      },
      {
        "sha": "d697c45897ad09f52fc902245e5e978cfef60ce4",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -322,7 +322,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         questionString.append(tr(\"added as transaction fee\"));\n \n         // append transaction size\n-        questionString.append(\" (\" + QString::number((double)currentTransaction.getTransactionSize() / 1000) + \" kB)\");\n+        questionString.append(\" (\" + QString::number((double)currentTransaction.getTransactionSize() / 1000) + \" kvB)\");\n     }\n \n     // add total amount in all subdivision units\n@@ -650,15 +650,15 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n     if (ui->radioSmartFee->isChecked())\n         ui->labelFeeMinimized->setText(ui->labelSmartFee->text());\n     else {\n-        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kB\");\n+        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kvB\");\n     }\n }\n \n void SendCoinsDialog::updateMinFeeLabel()\n {\n     if (model && model->getOptionsModel())\n         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), GetRequiredFee(1000)) + \"/kB\")\n+            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), GetRequiredFee(1000)) + \"/kvB\")\n         );\n }\n \n@@ -685,7 +685,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     FeeCalculation feeCalc;\n     CFeeRate feeRate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n-    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n+    ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kvB\");\n \n     if (feeCalc.reason == FeeReason::FALLBACK) {\n         ui->labelSmartFee2->show(); // (Smart fee not initialized yet. This usually takes a few blocks...)"
      },
      {
        "sha": "bebef5d2802c859cce296769ad5b14458007767e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -1375,7 +1375,7 @@ UniValue getmempoolinfo(const JSONRPCRequest& request)\n             \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n             \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n             \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n+            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kvB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n             \"  \\\"minrelaytxfee\\\": xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      },
      {
        "sha": "b391eff6a8e69d860f74ab0e6428b12e9ed34f0d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -776,13 +776,13 @@ UniValue estimatefee(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"estimatefee nblocks\\n\"\n             \"\\nDEPRECATED. Please use estimatesmartfee for more intelligent estimates.\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"\\nEstimates the approximate fee per kilovbyte needed for a transaction to begin\\n\"\n             \"confirmation within nblocks blocks. Uses virtual transaction size of transaction\\n\"\n             \"as defined in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks     (numeric, required)\\n\"\n             \"\\nResult:\\n\"\n-            \"n              (numeric) estimated fee-per-kilobyte\\n\"\n+            \"n              (numeric) estimated fee-per-kilovbyte\\n\"\n             \"\\n\"\n             \"A negative value is returned if not enough transactions and blocks\\n\"\n             \"have been observed to make an estimate.\\n\"\n@@ -816,7 +816,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n             \"estimatesmartfee conf_target (\\\"estimate_mode\\\")\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"\\nEstimates the approximate fee per kilovbyte needed for a transaction to begin\\n\"\n             \"confirmation within conf_target blocks if possible and return the number of blocks\\n\"\n             \"for which the estimate is valid. Uses virtual transaction size as defined\\n\"\n             \"in BIP 141 (witness data is discounted).\\n\"\n@@ -833,7 +833,7 @@ UniValue estimatesmartfee(const JSONRPCRequest& request)\n             \"       \\\"CONSERVATIVE\\\"\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kvB\\n\"\n             \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n@@ -881,7 +881,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"\\nWARNING: This is an advanced API call that is tightly coupled to the specific\\n\"\n             \"         implementation of fee estimation. The parameters it can be called with\\n\"\n             \"         and the results it returns will change if the internal implementation changes.\\n\"\n-            \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n+            \"\\nEstimates the approximate fee per kilovbyte needed for a transaction to begin\\n\"\n             \"confirmation within conf_target blocks if possible. Uses virtual transaction size as\\n\"\n             \"defined in BIP 141 (witness data is discounted).\\n\"\n             \"\\nArguments:\\n\"\n@@ -892,7 +892,7 @@ UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"short\\\" : {            (json object, optional) estimate for short time horizon\\n\"\n-            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"      \\\"feerate\\\" : x.x,        (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kvB\\n\"\n             \"      \\\"decay\\\" : x.x,          (numeric) exponential decay (per block) for historical moving average of confirmation data\\n\"\n             \"      \\\"scale\\\" : x,            (numeric) The resolution of confirmation targets at this time horizon\\n\"\n             \"      \\\"pass\\\" : {              (json object, optional) information about the lowest range of feerates to succeed in meeting the threshold\\n\""
      },
      {
        "sha": "5518c9f234f5bf777255ee64873dcd272760fc72",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -439,8 +439,8 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kvB\\n\"\n+            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kvB\\n\"\n             \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n             \"  {\\n\"\n             \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\""
      },
      {
        "sha": "45923d7ed263c43ad38f5b8864f35b4c34a0f662",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -71,7 +71,7 @@ BOOST_AUTO_TEST_CASE(GetFeeTest)\n     BOOST_CHECK(CFeeRate(CAmount(-1), 1000) == CFeeRate(-1));\n     BOOST_CHECK(CFeeRate(CAmount(0), 1000) == CFeeRate(0));\n     BOOST_CHECK(CFeeRate(CAmount(1), 1000) == CFeeRate(1));\n-    // lost precision (can only resolve satoshis per kB)\n+    // lost precision (can only resolve satoshis per kvB)\n     BOOST_CHECK(CFeeRate(CAmount(1), 1001) == CFeeRate(0));\n     BOOST_CHECK(CFeeRate(CAmount(2), 1001) == CFeeRate(1));\n     // some more integer checks\n@@ -93,7 +93,7 @@ BOOST_AUTO_TEST_CASE(BinaryOperatorTest)\n     BOOST_CHECK(a <= a);\n     BOOST_CHECK(b >= a);\n     BOOST_CHECK(b >= b);\n-    // a should be 0.00000002 BTC/kB now\n+    // a should be 0.00000002 BTC/kvB now\n     a += a;\n     BOOST_CHECK(a == b);\n }\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(ToStringTest)\n {\n     CFeeRate feeRate;\n     feeRate = CFeeRate(1);\n-    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kB\");\n+    BOOST_CHECK_EQUAL(feeRate.ToString(), \"0.00000001 BTC/kvB\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "afa12d42af753dc47fea4872f1abc6fdf5542bcd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -53,7 +53,7 @@ static const bool DEFAULT_WHITELISTFORCERELAY = true;\n static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n-//! Discourage users to set fees higher than this amount (in satoshis) per kB\n+//! Discourage users to set fees higher than this amount (in satoshis) per kvB\n static const CAmount HIGH_TX_FEE_PER_KB = 0.01 * COIN;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n static const CAmount HIGH_MAX_TX_FEE = 100 * HIGH_TX_FEE_PER_KB;"
      },
      {
        "sha": "4d1f8d2861569fc4dee7106c979b416ca004ebd8",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -20,14 +20,14 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-changetype\", _(\"What type of change to use (\\\"legacy\\\", \\\"p2sh-segwit\\\", or \\\"bech32\\\", default is same as -addresstype)\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kvB) that will be used when fee estimation has insufficient data (default: %s)\"),\n                                                                CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n-    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kvB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n                                                                 \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n-    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kvB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kvB) to add to transactions you send (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));"
      },
      {
        "sha": "5bcdf8e5339d149f0b200b30e93c595928b5971d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d0de9ad771b648ff5b97852147215c263415e15/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d0de9ad771b648ff5b97852147215c263415e15/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0d0de9ad771b648ff5b97852147215c263415e15",
        "patch": "@@ -2675,9 +2675,9 @@ UniValue settxfee(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw std::runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n+            \"\\nSet the transaction fee per kvB. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kvB\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2717,7 +2717,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"keypoolsize\\\": xxxx,             (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx, (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n             \"  \\\"unlocked_until\\\": ttt,           (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"paytxfee\\\": x.xxxx,              (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kvB\\n\"\n             \"  \\\"hdmasterkeyid\\\": \\\"<hash160>\\\"     (string) the Hash160 of the HD master pubkey\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -3017,7 +3017,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"changePosition\\\"         (numeric, optional, default random) The index of the change output\\n\"\n                             \"     \\\"includeWatching\\\"        (boolean, optional, default false) Also select inputs which are watch only\\n\"\n                             \"     \\\"lockUnspents\\\"           (boolean, optional, default false) Lock selected unspent outputs\\n\"\n-                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n+                            \"     \\\"feeRate\\\"                (numeric, optional, default not set: makes wallet determine the fee) Set a specific fee rate in \" + CURRENCY_UNIT + \"/kvB\\n\"\n                             \"     \\\"subtractFeeFromOutputs\\\" (array, optional) A json array of integers.\\n\"\n                             \"                              The fee will be equally deducted from the amount of each specified output.\\n\"\n                             \"                              The outputs are specified by their zero-based index, before any change output is added.\\n\""
      }
    ]
  },
  {
    "sha": "c9d5fe868278c9d0ca641ee174b47aa3f6b9de98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWQ1ZmU4NjgyNzhjOWQwY2E2NDFlZTE3NGI0N2FhM2Y2YjlkZTk4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-01-14T02:24:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-01-14T02:43:50Z"
      },
      "message": "Undo accidental scripted diff change",
      "tree": {
        "sha": "99d349f9aa7b2f7681fca5b4a806beba0e917118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99d349f9aa7b2f7681fca5b4a806beba0e917118"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d0de9ad771b648ff5b97852147215c263415e15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0de9ad771b648ff5b97852147215c263415e15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d0de9ad771b648ff5b97852147215c263415e15"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "015b3a92ddc7fe7f085e2e08aab93ca4728ca99f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d5fe868278c9d0ca641ee174b47aa3f6b9de98/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c9d5fe868278c9d0ca641ee174b47aa3f6b9de98",
        "patch": "@@ -322,7 +322,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         questionString.append(tr(\"added as transaction fee\"));\n \n         // append transaction size\n-        questionString.append(\" (\" + QString::number((double)currentTransaction.getTransactionSize() / 1000) + \" kvB)\");\n+        questionString.append(\" (\" + QString::number((double)currentTransaction.getTransactionSize() / 1000) + \" kB)\");\n     }\n \n     // add total amount in all subdivision units"
      }
    ]
  }
]