gmaxwell,2017-02-07T21:26:21Z,Concept ACK. Lightly tested ack. Getting these cleaned up makes it much easier to use tools that catch serious bugs.,https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-278145259,278145259,
theuni,2017-02-10T00:27:41Z,"I added clang annotations for everything in net (I think) that's guarded by a mutex, and built with -Wthread-safety: https://github.com/theuni/bitcoin/commit/df50d4fabc71a175c3faa0fcf74ded856ea35709\n\nThis reveals that nearly all is good, with these exceptions: https://github.com/theuni/bitcoin/commit/d185ca0840f8107b2cf4307f51d703e849532928\n\nThe only one that we really need to worry about ",https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-278821261,278821261,
theuni,2017-02-10T05:45:29Z,"Heh, title change comes from IRC discussion. The race mentioned above is not new, and not likely to cause issues. It's not worth holding up 0.14 for another set of ACKs or another PR to review.\n\nIf anyone strongly disagrees I'll PR a fix, but I'm ok with leaving it alone.\n\nACK a51ecf7ce00096bf607d15227ff1e1e39a3f6803",https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-278863021,278863021,
laanwj,2017-02-10T09:41:34Z,"What should hold up the release are critical issues, e.g. those that can (or do) cause crashes, and corruption. Fixing every little thing static and dynamic analyzers can complain about is *not* part of that, and can be done later.\n\nutACK https://github.com/bitcoin/bitcoin/commit/a51ecf7ce00096bf607d15227ff1e1e39a3f6803",https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-278899831,278899831,
TheBlueMatt,2017-02-10T16:32:50Z,Rebased to fix a trivial merge conflict.,https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-278992204,278992204,
theuni,2017-02-10T19:22:11Z,re-ACK db2dc7a58cb0a3df58188b748df8e0d04ba76f00,https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-279040458,279040458,
sipa,2017-02-10T22:02:50Z,"ACK db2dc7a58cb0a3df58188b748df8e0d04ba76f00. Running a node with master + this PR, with many connections, compiled with -fsanitize=thread -fsanitize=undefined. Only these cases are detected:\n* BDB's internal locks (which persist across call stacks, bleh) trigger lock inversion detections.\n* leveldb::port::AtomicPointer isn't recognized as an atomic (and should probably be replaced with c++11 ",https://github.com/bitcoin/bitcoin/pull/9708#issuecomment-279078567,279078567,
theuni,2017-02-09T19:54:17Z,nit: .empty() please,https://github.com/bitcoin/bitcoin/pull/9708#discussion_r100396961,100396961,src/net.cpp
TheBlueMatt,2017-02-09T22:16:42Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/9708#discussion_r100426351,100426351,src/net.cpp
