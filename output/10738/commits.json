[
  {
    "sha": "e1dbd84efeba803437bc97507288cde37f640fb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWRiZDg0ZWZlYmE4MDM0MzdiYzk3NTA3Mjg4Y2RlMzdmNjQwZmIx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-29T23:38:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: replace specific FindNodes with a generic one\n\nOnce FindNode returns a shared_ptr, it becomes much more useful.",
      "tree": {
        "sha": "050f3ce55d57fb7803a536fb8bf849b227d8fbe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/050f3ce55d57fb7803a536fb8bf849b227d8fbe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1dbd84efeba803437bc97507288cde37f640fb1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1dbd84efeba803437bc97507288cde37f640fb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1dbd84efeba803437bc97507288cde37f640fb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1dbd84efeba803437bc97507288cde37f640fb1/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7397af9d314dd01ca3699efbe6eec68f62a6ef2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7397af9d314dd01ca3699efbe6eec68f62a6ef2b"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 32,
      "deletions": 73
    },
    "files": [
      {
        "sha": "8228f00869fae422a034c68dde9ad10d13e37d68",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 68,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1dbd84efeba803437bc97507288cde37f640fb1/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1dbd84efeba803437bc97507288cde37f640fb1/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e1dbd84efeba803437bc97507288cde37f640fb1",
        "patch": "@@ -299,51 +299,11 @@ bool IsReachable(const CNetAddr& addr)\n     return IsReachable(net);\n }\n \n-\n-CNode* CConnman::FindNode(const CNetAddr& ip)\n-{\n-    LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-        if ((CNetAddr)pnode->addr == ip)\n-            return (pnode);\n-    return NULL;\n-}\n-\n-CNode* CConnman::FindNode(const CSubNet& subNet)\n-{\n-    LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-    if (subNet.Match((CNetAddr)pnode->addr))\n-        return (pnode);\n-    return NULL;\n-}\n-\n-CNode* CConnman::FindNode(const std::string& addrName)\n-{\n-    LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes) {\n-        if (pnode->GetAddrName() == addrName) {\n-            return (pnode);\n-        }\n-    }\n-    return NULL;\n-}\n-\n-CNode* CConnman::FindNode(const CService& addr)\n-{\n-    LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-        if ((CService)pnode->addr == addr)\n-            return (pnode);\n-    return NULL;\n-}\n-\n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n     LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes) {\n-        if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n-            return false;\n+    if (FindNode([nonce](const CNode* pnode) { return !pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce; })) {\n+        return false;\n     }\n     return true;\n }\n@@ -371,8 +331,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             return NULL;\n \n         // Look for an existing connection\n-        CNode* pnode = FindNode((CService)addrConnect);\n-        if (pnode)\n+        if (FindNode([&addrConnect](const CNode* pnode) { return (CService)pnode->addr == addrConnect; }))\n         {\n             LogPrintf(\"Failed to open new connection, already connected\\n\");\n             return NULL;\n@@ -402,8 +361,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n             LOCK(cs_vNodes);\n-            CNode* pnode = FindNode((CService)addrConnect);\n-            if (pnode)\n+            if (auto pnode = FindNode([&addrConnect](const CNode* pnode) { return (CService)pnode->addr == addrConnect; }))\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n                 CloseSocket(hSocket);\n@@ -1034,11 +992,9 @@ bool CConnman::AttemptToEvictConnection()\n     // Disconnect from the network group with the most connections\n     NodeId evicted = vEvictionCandidates.front().id;\n     LOCK(cs_vNodes);\n-    for(std::vector<CNode*>::const_iterator it(vNodes.begin()); it != vNodes.end(); ++it) {\n-        if ((*it)->GetId() == evicted) {\n-            (*it)->fDisconnect = true;\n-            return true;\n-        }\n+    if (auto pnode = FindNode([evicted](const CNode* pnode) { return pnode->GetId() == evicted; })) {\n+        pnode->fDisconnect = true;\n+        return true;\n     }\n     return false;\n }\n@@ -1946,12 +1902,13 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n     }\n     if (!pszDest) {\n-        if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n-            FindNode(addrConnect.ToStringIPPort()))\n+        std::string addr_name = addrConnect.ToStringIPPort();\n+        if (IsLocal(addrConnect) || IsBanned(addrConnect) ||\n+            FindNode([&addrConnect, &addr_name](const CNode* pnode) { return (CNetAddr)pnode->addr == addrConnect || addr_name == pnode->GetAddrName(); }))\n             return false;\n-    } else if (FindNode(std::string(pszDest)))\n+    } else if (FindNode([&pszDest](const CNode* pnode) { return pnode->GetAddrName() == pszDest; })) {\n         return false;\n+    }\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n \n@@ -2549,7 +2506,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n     LOCK(cs_vNodes);\n-    if (CNode* pnode = FindNode(strNode)) {\n+    if (auto pnode = FindNode([&strNode](const CNode* pnode) { return pnode->GetAddrName() == strNode; })) {\n         pnode->fDisconnect = true;\n         return true;\n     }\n@@ -2558,11 +2515,9 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n bool CConnman::DisconnectNode(NodeId id)\n {\n     LOCK(cs_vNodes);\n-    for(CNode* pnode : vNodes) {\n-        if (id == pnode->GetId()) {\n-            pnode->fDisconnect = true;\n-            return true;\n-        }\n+    if (auto pnode = FindNode([id](const CNode* pnode) { return pnode->GetId() == id; })) {\n+        pnode->fDisconnect = true;\n+        return true;\n     }\n     return false;\n }\n@@ -2852,15 +2807,11 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n {\n-    CNode* found = nullptr;\n     LOCK(cs_vNodes);\n-    for (auto&& pnode : vNodes) {\n-        if(pnode->GetId() == id) {\n-            found = pnode;\n-            break;\n-        }\n+    if (auto pnode = FindNode([id](const CNode* pnode) { return pnode->GetId() == id; })) {\n+        return NodeFullyConnected(pnode) && func(pnode);\n     }\n-    return found != nullptr && NodeFullyConnected(found) && func(found);\n+    return false;\n }\n \n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {"
      },
      {
        "sha": "14d253141cf4c64f19aeb33637b52127fb3c1aed",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1dbd84efeba803437bc97507288cde37f640fb1/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1dbd84efeba803437bc97507288cde37f640fb1/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e1dbd84efeba803437bc97507288cde37f640fb1",
        "patch": "@@ -302,11 +302,6 @@ class CConnman\n \n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n-    CNode* FindNode(const CNetAddr& ip);\n-    CNode* FindNode(const CSubNet& subNet);\n-    CNode* FindNode(const std::string& addrName);\n-    CNode* FindNode(const CService& addr);\n-\n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n@@ -333,6 +328,19 @@ class CConnman\n     // Whether the node should be passed out in ForEach* callbacks\n     static bool NodeFullyConnected(const CNode* pnode);\n \n+    template <typename Callable>\n+    CNode* FindNode(Callable&& func)\n+    {\n+        LOCK(cs_vNodes);\n+        for (auto& node : vNodes) {\n+            if(func(node)) {\n+                return node;\n+            }\n+        }\n+        return nullptr;\n+    }\n+\n+\n     // Network usage totals\n     CCriticalSection cs_totalBytesRecv;\n     CCriticalSection cs_totalBytesSent;"
      }
    ]
  },
  {
    "sha": "e832634b1d2949d989e969f73982da5daf885668",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODMyNjM0YjFkMjk0OWQ5ODllOTY5ZjczOTgyZGE1ZGFmODg1NjY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T21:35:53Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: use range-based-for in a few places\n\nNo need to mess with iterators",
      "tree": {
        "sha": "e9b86bc4917a97b0fd1e5140f2b00f181725586d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9b86bc4917a97b0fd1e5140f2b00f181725586d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e832634b1d2949d989e969f73982da5daf885668",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e832634b1d2949d989e969f73982da5daf885668",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e832634b1d2949d989e969f73982da5daf885668",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e832634b1d2949d989e969f73982da5daf885668/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1dbd84efeba803437bc97507288cde37f640fb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1dbd84efeba803437bc97507288cde37f640fb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1dbd84efeba803437bc97507288cde37f640fb1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0c96907fa593ad918fa44e64f079e69de28c92c9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e832634b1d2949d989e969f73982da5daf885668/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e832634b1d2949d989e969f73982da5daf885668/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e832634b1d2949d989e969f73982da5daf885668",
        "patch": "@@ -2484,9 +2484,11 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n         return vNodes.size();\n \n     int nNum = 0;\n-    for(std::vector<CNode*>::const_iterator it = vNodes.begin(); it != vNodes.end(); ++it)\n-        if (flags & ((*it)->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+    for (const auto& pnode : vNodes) {\n+        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT)) {\n             nNum++;\n+        }\n+    }\n \n     return nNum;\n }\n@@ -2496,8 +2498,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.clear();\n     LOCK(cs_vNodes);\n     vstats.reserve(vNodes.size());\n-    for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n-        CNode* pnode = *it;\n+    for (auto& pnode : vNodes) {\n         vstats.emplace_back();\n         pnode->copyStats(vstats.back());\n     }"
      }
    ]
  },
  {
    "sha": "59cd96a1734b2dece0f0a128594c15b21e2600c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWNkOTZhMTczNGIyZGVjZTBmMGExMjg1OTRjMTViMjFlMjYwMGM0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-29T22:53:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: turn CNodes into shared_ptrs\n\nNote that this is an interim commit for easier review; it is strictly worse\nthan bare pointers.\n\nThe actual benefits will come in the next commits. The main one being that we\ncan drop our clunky (and unsafe) refcounting.",
      "tree": {
        "sha": "93d53a19f2435cc58f0c0f27c31b053963b18c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93d53a19f2435cc58f0c0f27c31b053963b18c3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59cd96a1734b2dece0f0a128594c15b21e2600c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59cd96a1734b2dece0f0a128594c15b21e2600c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59cd96a1734b2dece0f0a128594c15b21e2600c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59cd96a1734b2dece0f0a128594c15b21e2600c4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e832634b1d2949d989e969f73982da5daf885668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e832634b1d2949d989e969f73982da5daf885668",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e832634b1d2949d989e969f73982da5daf885668"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 54,
      "deletions": 54
    },
    "files": [
      {
        "sha": "ed696da2be656b7b3905f487416a294dcf882b0c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 40,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59cd96a1734b2dece0f0a128594c15b21e2600c4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59cd96a1734b2dece0f0a128594c15b21e2600c4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=59cd96a1734b2dece0f0a128594c15b21e2600c4",
        "patch": "@@ -324,7 +324,7 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n+std::shared_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n@@ -376,7 +376,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         NodeId id = GetNewNodeId();\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CAddress addr_bind = GetBindAddress(hSocket);\n-        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false);\n+        auto pnode(std::make_shared<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false));\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n@@ -490,7 +490,7 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes) {\n+        for (auto& pnode : vNodes) {\n             if (subNet.Match((CNetAddr)pnode->addr))\n                 pnode->fDisconnect = true;\n         }\n@@ -914,7 +914,7 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        for (CNode *node : vNodes) {\n+        for (auto& node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n@@ -1016,7 +1016,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes)\n+        for (const auto& pnode : vNodes)\n             if (pnode->fInbound)\n                 nInbound++;\n     }\n@@ -1067,16 +1067,16 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n \n-    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n+    auto pnode(std::make_shared<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true));\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    GetNodeSignals().InitializeNode(pnode.get(), *this);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n \n     {\n         LOCK(cs_vNodes);\n-        vNodes.push_back(pnode);\n+        vNodes.push_back(std::move(pnode));\n     }\n }\n \n@@ -1091,8 +1091,8 @@ void CConnman::ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n-            std::vector<CNode*> vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+            std::vector<std::shared_ptr<CNode>> vNodesCopy = vNodes;\n+            for (auto& pnode : vNodesCopy)\n             {\n                 if (pnode->fDisconnect)\n                 {\n@@ -1113,8 +1113,8 @@ void CConnman::ThreadSocketHandler()\n         }\n         {\n             // Delete disconnected nodes\n-            std::list<CNode*> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (CNode* pnode : vNodesDisconnectedCopy)\n+            std::list<std::shared_ptr<CNode>> vNodesDisconnectedCopy = vNodesDisconnected;\n+            for (auto& pnode : vNodesDisconnectedCopy)\n             {\n                 // wait until threads are done using it\n                 if (pnode->GetRefCount() <= 0) {\n@@ -1130,7 +1130,7 @@ void CConnman::ThreadSocketHandler()\n                     }\n                     if (fDelete) {\n                         vNodesDisconnected.remove(pnode);\n-                        DeleteNode(pnode);\n+                        DeleteNode(std::move(pnode));\n                     }\n                 }\n             }\n@@ -1170,7 +1170,7 @@ void CConnman::ThreadSocketHandler()\n \n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes)\n+            for (auto& pnode : vNodes)\n             {\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n@@ -1242,14 +1242,14 @@ void CConnman::ThreadSocketHandler()\n         //\n         // Service each socket\n         //\n-        std::vector<CNode*> vNodesCopy;\n+        std::vector<std::shared_ptr<CNode>> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy)\n+            for (auto& pnode : vNodesCopy)\n                 pnode->AddRef();\n         }\n-        for (CNode* pnode : vNodesCopy)\n+        for (auto& pnode : vNodesCopy)\n         {\n             if (interruptNet)\n                 return;\n@@ -1329,7 +1329,7 @@ void CConnman::ThreadSocketHandler()\n             if (sendSet)\n             {\n                 LOCK(pnode->cs_vSend);\n-                size_t nBytes = SocketSendData(pnode);\n+                size_t nBytes = SocketSendData(pnode.get());\n                 if (nBytes) {\n                     RecordBytesSent(nBytes);\n                 }\n@@ -1370,7 +1370,7 @@ void CConnman::ThreadSocketHandler()\n         }\n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n+            for (auto& pnode : vNodesCopy)\n                 pnode->Release();\n         }\n     }\n@@ -1537,7 +1537,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n-        for (auto pnode : vNodes) {\n+        for (const auto& pnode : vNodes) {\n             nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n         }\n         if (nRelevant >= 2) {\n@@ -1693,7 +1693,7 @@ void CConnman::ThreadOpenConnections()\n         std::set<std::vector<unsigned char> > setConnected;\n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodes) {\n+            for (auto& pnode : vNodes) {\n                 if (!pnode->fInbound && !pnode->fAddnode) {\n \n                     // Count the peers that have all relevant services\n@@ -1820,7 +1820,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     std::map<std::string, std::pair<bool, CService>> mapConnectedByName;\n     {\n         LOCK(cs_vNodes);\n-        for (const CNode* pnode : vNodes) {\n+        for (const auto& pnode : vNodes) {\n             if (pnode->addr.IsValid()) {\n                 mapConnected[pnode->addr] = pnode->fInbound;\n             }\n@@ -1910,7 +1910,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n     }\n \n-    CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n+    std::shared_ptr<CNode> pnode(ConnectNode(addrConnect, pszDest, fCountFailure));\n \n     if (!pnode)\n         return false;\n@@ -1923,10 +1923,10 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (fAddnode)\n         pnode->fAddnode = true;\n \n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    GetNodeSignals().InitializeNode(pnode.get(), *this);\n     {\n         LOCK(cs_vNodes);\n-        vNodes.push_back(pnode);\n+        vNodes.push_back(std::move(pnode));\n     }\n \n     return true;\n@@ -1936,40 +1936,40 @@ void CConnman::ThreadMessageHandler()\n {\n     while (!flagInterruptMsgProc)\n     {\n-        std::vector<CNode*> vNodesCopy;\n+        std::vector<std::shared_ptr<CNode>> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n             vNodesCopy = vNodes;\n-            for (CNode* pnode : vNodesCopy) {\n+            for (auto& pnode : vNodesCopy) {\n                 pnode->AddRef();\n             }\n         }\n \n         bool fMoreWork = false;\n \n-        for (CNode* pnode : vNodesCopy)\n+        for (auto& pnode : vNodesCopy)\n         {\n             if (pnode->fDisconnect)\n                 continue;\n \n             // Receive messages\n-            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode, *this, flagInterruptMsgProc);\n+            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode.get(), *this, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n                 return;\n \n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n-                GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n+                GetNodeSignals().SendMessages(pnode.get(), *this, flagInterruptMsgProc);\n             }\n             if (flagInterruptMsgProc)\n                 return;\n         }\n \n         {\n             LOCK(cs_vNodes);\n-            for (CNode* pnode : vNodesCopy)\n+            for (auto& pnode : vNodesCopy)\n                 pnode->Release();\n         }\n \n@@ -2144,7 +2144,7 @@ void CConnman::SetNetworkActive(bool active)\n \n         LOCK(cs_vNodes);\n         // Close sockets to all nodes\n-        for (CNode* pnode : vNodes) {\n+        for (auto& pnode : vNodes) {\n             pnode->CloseSocketDisconnect();\n         }\n     } else {\n@@ -2389,19 +2389,19 @@ void CConnman::Stop()\n     }\n \n     // Close sockets\n-    for (CNode* pnode : vNodes)\n+    for (auto& pnode : vNodes)\n         pnode->CloseSocketDisconnect();\n     for (ListenSocket& hListenSocket : vhListenSocket)\n         if (hListenSocket.socket != INVALID_SOCKET)\n             if (!CloseSocket(hListenSocket.socket))\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    for (CNode *pnode : vNodes) {\n-        DeleteNode(pnode);\n+    for (auto& pnode : vNodes) {\n+        DeleteNode(std::move(pnode));\n     }\n-    for (CNode *pnode : vNodesDisconnected) {\n-        DeleteNode(pnode);\n+    for (auto& pnode : vNodesDisconnected) {\n+        DeleteNode(std::move(pnode));\n     }\n     vNodes.clear();\n     vNodesDisconnected.clear();\n@@ -2412,14 +2412,14 @@ void CConnman::Stop()\n     semAddnode = NULL;\n }\n \n-void CConnman::DeleteNode(CNode* pnode)\n+void CConnman::DeleteNode(std::shared_ptr<CNode>&& pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n     GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n     if(fUpdateConnectionTime)\n         addrman.Connected(pnode->addr);\n-    delete pnode;\n+    pnode.reset();\n }\n \n CConnman::~CConnman()\n@@ -2810,7 +2810,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n {\n     LOCK(cs_vNodes);\n     if (auto pnode = FindNode([id](const CNode* pnode) { return pnode->GetId() == id; })) {\n-        return NodeFullyConnected(pnode) && func(pnode);\n+        return NodeFullyConnected(pnode.get()) && func(pnode.get());\n     }\n     return false;\n }"
      },
      {
        "sha": "465c5e4cd156c5f339a704de4f3bb12924ff27ba",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59cd96a1734b2dece0f0a128594c15b21e2600c4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59cd96a1734b2dece0f0a128594c15b21e2600c4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=59cd96a1734b2dece0f0a128594c15b21e2600c4",
        "patch": "@@ -166,8 +166,8 @@ class CConnman\n     {\n         LOCK(cs_vNodes);\n         for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n+            if (NodeFullyConnected(node.get()))\n+                func(node.get());\n         }\n     };\n \n@@ -176,8 +176,8 @@ class CConnman\n     {\n         LOCK(cs_vNodes);\n         for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                func(node);\n+            if (NodeFullyConnected(node.get()))\n+                func(node.get());\n         }\n     };\n \n@@ -186,8 +186,8 @@ class CConnman\n     {\n         LOCK(cs_vNodes);\n         for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n+            if (NodeFullyConnected(node.get()))\n+                pre(node.get());\n         }\n         post();\n     };\n@@ -197,8 +197,8 @@ class CConnman\n     {\n         LOCK(cs_vNodes);\n         for (auto&& node : vNodes) {\n-            if (NodeFullyConnected(node))\n-                pre(node);\n+            if (NodeFullyConnected(node.get()))\n+                pre(node.get());\n         }\n         post();\n     };\n@@ -303,10 +303,10 @@ class CConnman\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     bool AttemptToEvictConnection();\n-    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+    std::shared_ptr<CNode> ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n-    void DeleteNode(CNode* pnode);\n+    void DeleteNode(std::shared_ptr<CNode>&& pnode);\n \n     NodeId GetNewNodeId();\n \n@@ -329,11 +329,11 @@ class CConnman\n     static bool NodeFullyConnected(const CNode* pnode);\n \n     template <typename Callable>\n-    CNode* FindNode(Callable&& func)\n+    std::shared_ptr<CNode> FindNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n         for (auto& node : vNodes) {\n-            if(func(node)) {\n+            if(func(node.get())) {\n                 return node;\n             }\n         }\n@@ -371,8 +371,8 @@ class CConnman\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes;\n     CCriticalSection cs_vAddedNodes;\n-    std::vector<CNode*> vNodes;\n-    std::list<CNode*> vNodesDisconnected;\n+    std::vector<std::shared_ptr<CNode>> vNodes;\n+    std::list<std::shared_ptr<CNode>> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n "
      }
    ]
  },
  {
    "sha": "2d720aaa626d3866ee3664f1ce9c3d654811e418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDcyMGFhYTYyNmQzODY2ZWUzNjY0ZjFjZTljM2Q2NTQ4MTFlNDE4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T22:26:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: add strong_ptr and decay_ptr\n\nSee strong_ptr.h for more details.",
      "tree": {
        "sha": "598897fbcfaac6144cdf077312533294e4c0e2b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/598897fbcfaac6144cdf077312533294e4c0e2b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d720aaa626d3866ee3664f1ce9c3d654811e418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d720aaa626d3866ee3664f1ce9c3d654811e418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d720aaa626d3866ee3664f1ce9c3d654811e418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d720aaa626d3866ee3664f1ce9c3d654811e418/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59cd96a1734b2dece0f0a128594c15b21e2600c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59cd96a1734b2dece0f0a128594c15b21e2600c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59cd96a1734b2dece0f0a128594c15b21e2600c4"
      }
    ],
    "stats": {
      "total": 454,
      "additions": 454,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6327a95b120bd86f59799991ac6819710bce241b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "patch": "@@ -137,6 +137,7 @@ BITCOIN_CORE_H = \\\n   script/standard.h \\\n   script/ismine.h \\\n   streams.h \\\n+  strong_ptr.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\"
      },
      {
        "sha": "9184afc0a3ce00bfa0f131c1cc6f18bb031f7a6b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "patch": "@@ -71,6 +71,7 @@ BITCOIN_TESTS =\\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n   test/streams_tests.cpp \\\n+  test/strong_ptr.cpp \\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin_main.cpp \\"
      },
      {
        "sha": "d120194ed26667407ea5f69b59ec5e3cb08e0a02",
        "filename": "src/strong_ptr.h",
        "status": "added",
        "additions": 317,
        "deletions": 0,
        "changes": 317,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/strong_ptr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/strong_ptr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/strong_ptr.h?ref=2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "patch": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {\n+                // wait here\n+                continue;\n+            }\n+            // dec is guaranteed to be unique here. Its memory will be freed\n+            // when it goes out of scope.\n+            return 0;\n+        }\n+*/\n+\n+template <typename T>\n+class decay_ptr;\n+\n+template <typename T>\n+class strong_ptr\n+{\n+    struct shared_deleter {\n+        void operator()(T* /* unused */) const {}\n+        const std::shared_ptr<void> m_data;\n+    };\n+\n+    friend class decay_ptr<T>;\n+\n+    template <typename U, typename... Args>\n+    friend strong_ptr<U> make_strong(Args&&... args);\n+\n+    template <typename U>\n+    explicit strong_ptr(std::shared_ptr<U>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+public:\n+    using element_type = T;\n+\n+    constexpr strong_ptr() : strong_ptr(nullptr) {}\n+\n+    constexpr strong_ptr(std::nullptr_t) : m_shared{nullptr} {}\n+\n+    template <typename U>\n+    explicit strong_ptr(U* ptr) : m_data(ptr)\n+    {\n+    }\n+\n+    template <typename Deleter>\n+    strong_ptr(std::nullptr_t ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(U* ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(std::unique_ptr<U, Deleter>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+    template <typename U>\n+    strong_ptr(strong_ptr<U>&& rhs) : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)}\n+    {\n+    }\n+\n+    strong_ptr(strong_ptr&& rhs) noexcept : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)} {}\n+\n+    ~strong_ptr() = default;\n+\n+    strong_ptr(const strong_ptr& rhs) = delete;\n+    strong_ptr& operator=(const strong_ptr& rhs) = delete;\n+\n+    strong_ptr& operator=(strong_ptr&& rhs) noexcept\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(strong_ptr<U>&& rhs)\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(U* rhs)\n+    {\n+        reset(rhs);\n+        return *this;\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr& operator=(std::unique_ptr<U, Deleter>&& rhs)\n+    {\n+        m_data = std::move(rhs);\n+        m_shared.reset(nullptr, shared_deleter{m_data});\n+        return *this;\n+    }\n+\n+    void reset()\n+    {\n+        m_data.reset();\n+        m_shared.reset();\n+    }\n+    void reset(std::nullptr_t)\n+    {\n+        reset();\n+    }\n+    template <typename U>\n+    void reset(U* ptr)\n+    {\n+        m_data.reset(ptr);\n+        m_shared.reset(nullptr, shared_deleter{m_data});\n+    }\n+    template <typename U, typename Deleter>\n+    void reset(U* ptr, Deleter deleter)\n+    {\n+        m_data.reset(ptr, std::move(deleter));\n+        m_shared.reset(nullptr, shared_deleter{m_data});\n+    }\n+    std::shared_ptr<T> get_shared() const\n+    {\n+        return std::shared_ptr<T>(m_shared, m_data.get());\n+    }\n+    T* operator*()\n+    {\n+        return m_data.operator*();\n+    }\n+    const T* operator*() const\n+    {\n+        return m_data.operator*();\n+    }\n+    T* operator->()\n+    {\n+        return m_data.operator->();\n+    }\n+    const T* operator->() const\n+    {\n+        return m_data.operator->();\n+    }\n+    const T* get() const\n+    {\n+        return m_data.get();\n+    }\n+    T* get()\n+    {\n+        return m_data.get();\n+    }\n+    explicit operator bool() const\n+    {\n+        return m_data.operator bool();\n+    }\n+\n+private:\n+    std::shared_ptr<T> m_data;\n+    std::shared_ptr<void> m_shared{nullptr, shared_deleter{m_data}};\n+};\n+\n+template <typename T>\n+class decay_ptr\n+{\n+public:\n+    constexpr decay_ptr() = default;\n+    constexpr decay_ptr(std::nullptr_t) : decay_ptr{} {}\n+    decay_ptr(decay_ptr&& rhs) noexcept : m_data{std::move(rhs.m_data)}, m_decaying{rhs.m_decaying}\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a move ctor\n+        rhs.m_decaying.reset();\n+    }\n+\n+    template <typename U>\n+    decay_ptr(decay_ptr<U>&& rhs) : m_data{std::move(rhs.m_data)}, m_decaying{rhs.m_decaying}\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a move ctor\n+        rhs.m_decaying.reset();\n+    }\n+\n+    decay_ptr(const decay_ptr&) = delete;\n+    decay_ptr& operator=(const decay_ptr&) = delete;\n+\n+    template <typename U>\n+    decay_ptr(strong_ptr<U>&& ptr) : m_data{std::move(ptr.m_data)}, m_decaying{ptr.m_shared}\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a ctor which accepts an rvalue shared_ptr.\n+        ptr.m_shared.reset();\n+    }\n+\n+    ~decay_ptr() = default;\n+\n+    template <typename U>\n+    decay_ptr& operator=(decay_ptr<U>&& rhs)\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a move operator\n+        m_data = std::move(rhs.m_data);\n+        m_decaying = rhs.m_decaying;\n+        rhs.m_decaying.reset();\n+        return *this;\n+    }\n+    decay_ptr& operator=(decay_ptr&& rhs) noexcept\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a move operator\n+        m_data = std::move(rhs.m_data);\n+        m_decaying = rhs.m_decaying;\n+        rhs.m_decaying.reset();\n+        return *this;\n+    }\n+    template <typename U>\n+    decay_ptr& operator=(strong_ptr<U>&& rhs)\n+    {\n+        // NOTE: Until c++14, weak_ptr lacked a move operator which accepts an rvalue shared_ptr.\n+        m_data = std::move(rhs.m_data);\n+        m_decaying = rhs.m_shared;\n+        rhs.m_shared.reset();\n+        return *this;\n+    }\n+    bool decayed() const\n+    {\n+        return m_decaying.expired();\n+    }\n+    void reset()\n+    {\n+        m_decaying.reset();\n+        m_data.reset();\n+    }\n+    T* operator*()\n+    {\n+        return m_data.operator*();\n+    }\n+    const T* operator*() const\n+    {\n+        return m_data.operator*();\n+    }\n+    T* operator->()\n+    {\n+        return m_data.operator->();\n+    }\n+    const T* operator->() const\n+    {\n+        return m_data.operator->();\n+    }\n+    const T* get() const\n+    {\n+        return m_data.get();\n+    }\n+    T* get()\n+    {\n+        return m_data.get();\n+    }\n+    explicit operator bool() const\n+    {\n+        return m_data.operator bool();\n+    }\n+\n+private:\n+    std::shared_ptr<T> m_data;\n+    std::weak_ptr<void> m_decaying;\n+};\n+\n+template <typename T, typename... Args>\n+inline strong_ptr<T> make_strong(Args&&... args)\n+{\n+    return strong_ptr<T>(std::make_shared<T>(std::forward<Args>(args)...));\n+}\n+\n+\n+#endif // BITCOIN_STRONGPTR_H"
      },
      {
        "sha": "f4ef73aa2d369997d81304f3f344f9dc16cc812b",
        "filename": "src/test/strong_ptr.cpp",
        "status": "added",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/test/strong_ptr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d720aaa626d3866ee3664f1ce9c3d654811e418/src/test/strong_ptr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/strong_ptr.cpp?ref=2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "patch": "@@ -0,0 +1,135 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"strong_ptr.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+class my_struct\n+{\n+public:\n+    my_struct(int){}\n+    my_struct() = default;\n+    ~my_struct()\n+    {\n+        m_valid = false;\n+    }\n+    bool valid() const\n+    {\n+        return m_valid;\n+    }\n+private:\n+    bool m_valid = true;\n+};\n+\n+class Deleter\n+{\n+public:\n+    explicit Deleter(bool& deleted) : m_deleted{deleted}{}\n+\n+    void operator()(std::nullptr_t)\n+    {\n+        m_deleted = true;\n+    }\n+    template <typename T>\n+    void operator()(T* ptr)\n+    {\n+        delete ptr;\n+        m_deleted = true;\n+    }\n+private:\n+    bool& m_deleted;\n+};\n+\n+BOOST_FIXTURE_TEST_SUITE(strong_ptr_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(construction)\n+{\n+    // typical construction\n+    strong_ptr<my_struct> strong(new my_struct());\n+    BOOST_CHECK(strong);\n+    BOOST_CHECK(strong->valid());\n+    decay_ptr<my_struct> degraded(std::move(strong));\n+    BOOST_CHECK(!strong);\n+    BOOST_CHECK(degraded);\n+    BOOST_CHECK(degraded.decayed());\n+    BOOST_CHECK(degraded->valid());\n+}\n+\n+BOOST_AUTO_TEST_CASE(deletion)\n+{\n+    // test typical deletion\n+    {\n+        bool deleted = false;\n+        {\n+            strong_ptr<my_struct> strong(new my_struct(), Deleter(deleted));\n+        }\n+        BOOST_CHECK(deleted);\n+    }\n+    {\n+        bool deleted = false;\n+        strong_ptr<my_struct> strong(new my_struct(), Deleter(deleted));\n+        strong.reset();\n+        BOOST_CHECK(deleted);\n+    }\n+    {\n+        bool deleted = false;\n+        strong_ptr<my_struct> strong(new my_struct(), Deleter(deleted));\n+        decay_ptr<my_struct> degraded(std::move(strong));\n+        BOOST_CHECK(!deleted);\n+        degraded.reset();\n+        BOOST_CHECK(deleted);\n+    }\n+    {\n+        bool deleted = false;\n+        strong_ptr<my_struct> strong(new my_struct(), Deleter(deleted));\n+        {\n+            auto shared = strong.get_shared();\n+        }\n+        decay_ptr<my_struct> degraded(std::move(strong));\n+        BOOST_CHECK(!deleted);\n+        degraded.reset();\n+        BOOST_CHECK(deleted);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(shared_outlives_strong)\n+{\n+    {\n+        bool deleted = false;\n+        strong_ptr<my_struct> strong(new my_struct(), Deleter(deleted));\n+        auto shared = strong.get_shared();\n+        {\n+            decay_ptr<my_struct> degraded(std::move(strong));\n+            BOOST_CHECK(!degraded.decayed());\n+        }\n+        BOOST_CHECK(!deleted);\n+        shared.reset();\n+        BOOST_CHECK(deleted);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(use_count)\n+{\n+        strong_ptr<my_struct> strong(new my_struct());\n+        auto shared = strong.get_shared();\n+        BOOST_CHECK(shared.use_count() == 2);\n+        auto strong2(std::move(strong));\n+        BOOST_CHECK(shared.use_count() == 2);\n+        BOOST_CHECK(strong2);\n+        BOOST_CHECK(!strong);\n+        strong = std::move(strong2);\n+        BOOST_CHECK(shared.use_count() == 2);\n+        BOOST_CHECK(strong);\n+        BOOST_CHECK(!strong2);\n+        decay_ptr<my_struct> degraded(std::move(strong));\n+        BOOST_CHECK(shared.use_count() == 1);\n+        BOOST_CHECK(!strong);\n+        BOOST_CHECK(!degraded.decayed());\n+        shared.reset();\n+        BOOST_CHECK(degraded.decayed());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "457bc99c57e2a84ea94529dc867fcc26d093226a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTdiYzk5YzU3ZTJhODRlYTk0NTI5ZGM4NjdmY2MyNmQwOTMyMjZh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T00:25:54Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: switch CNode to strong_ptr/decay_ptr\n\nIt's necessary to control which thread deletes CNodes, because net_processing\nrequires notification so that it may clean up its resources as well.\n\nMore generally we need assurance that, when deleting a CNode, there's nothing\nelse attempting to access it.\n\nshared_ptr and decay_ptr enable us to do this safely. vNodes now holds\nstrong_ptrs rather than shared_ptrs, and moves them to a container of\ndecay_ptrs once disconnected. At that point, we can wait until there are no\nremaining users before deletion.",
      "tree": {
        "sha": "0aee1469a03e6770bdb28cf1fbf801d033520c65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aee1469a03e6770bdb28cf1fbf801d033520c65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/457bc99c57e2a84ea94529dc867fcc26d093226a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457bc99c57e2a84ea94529dc867fcc26d093226a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/457bc99c57e2a84ea94529dc867fcc26d093226a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457bc99c57e2a84ea94529dc867fcc26d093226a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d720aaa626d3866ee3664f1ce9c3d654811e418",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d720aaa626d3866ee3664f1ce9c3d654811e418"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 37,
      "deletions": 27
    },
    "files": [
      {
        "sha": "5b7aaaf56bfc6178a5470bb777bf876c76a9cdc1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 22,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457bc99c57e2a84ea94529dc867fcc26d093226a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457bc99c57e2a84ea94529dc867fcc26d093226a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=457bc99c57e2a84ea94529dc867fcc26d093226a",
        "patch": "@@ -324,7 +324,7 @@ static CAddress GetBindAddress(SOCKET sock)\n     return addr_bind;\n }\n \n-std::shared_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n+strong_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n@@ -376,7 +376,7 @@ std::shared_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *p\n         NodeId id = GetNewNodeId();\n         uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n         CAddress addr_bind = GetBindAddress(hSocket);\n-        auto pnode(std::make_shared<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false));\n+        auto pnode(make_strong<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false));\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n         pnode->AddRef();\n \n@@ -1067,7 +1067,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     CAddress addr_bind = GetBindAddress(hSocket);\n \n-    auto pnode(std::make_shared<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true));\n+    auto pnode(make_strong<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true));\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n     GetNodeSignals().InitializeNode(pnode.get(), *this);\n@@ -1091,13 +1091,14 @@ void CConnman::ThreadSocketHandler()\n         {\n             LOCK(cs_vNodes);\n             // Disconnect unused nodes\n-            std::vector<std::shared_ptr<CNode>> vNodesCopy = vNodes;\n-            for (auto& pnode : vNodesCopy)\n+            for (auto it = vNodes.begin(); it != vNodes.end();)\n             {\n-                if (pnode->fDisconnect)\n+                if ((*it)->fDisconnect)\n                 {\n+                    strong_ptr<CNode> pnode(std::move(*it));\n+\n                     // remove from vNodes\n-                    vNodes.erase(remove(vNodes.begin(), vNodes.end(), pnode), vNodes.end());\n+                    it = vNodes.erase(it);\n \n                     // release outbound grant (if any)\n                     pnode->grantOutbound.Release();\n@@ -1107,18 +1108,20 @@ void CConnman::ThreadSocketHandler()\n \n                     // hold in disconnected pool until all refs are released\n                     pnode->Release();\n-                    vNodesDisconnected.push_back(pnode);\n+                    vNodesDisconnected.emplace_back(std::move(pnode));\n+                } else {\n+                    ++it;\n                 }\n             }\n         }\n         {\n             // Delete disconnected nodes\n-            std::list<std::shared_ptr<CNode>> vNodesDisconnectedCopy = vNodesDisconnected;\n-            for (auto& pnode : vNodesDisconnectedCopy)\n+            for (auto it = vNodesDisconnected.begin(); it != vNodesDisconnected.end();)\n             {\n+                CNode* pnode = it->get();\n                 // wait until threads are done using it\n+                bool fDelete = false;\n                 if (pnode->GetRefCount() <= 0) {\n-                    bool fDelete = false;\n                     {\n                         TRY_LOCK(pnode->cs_inventory, lockInv);\n                         if (lockInv) {\n@@ -1128,10 +1131,13 @@ void CConnman::ThreadSocketHandler()\n                             }\n                         }\n                     }\n-                    if (fDelete) {\n-                        vNodesDisconnected.remove(pnode);\n-                        DeleteNode(std::move(pnode));\n-                    }\n+                }\n+                if (fDelete) {\n+                    decay_ptr<CNode> node(std::move(*it));\n+                    it = vNodesDisconnected.erase(it);\n+                    DeleteNode(std::move(node));\n+                } else {\n+                    ++it;\n                 }\n             }\n         }\n@@ -1245,9 +1251,11 @@ void CConnman::ThreadSocketHandler()\n         std::vector<std::shared_ptr<CNode>> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n-            vNodesCopy = vNodes;\n-            for (auto& pnode : vNodesCopy)\n+            vNodesCopy.reserve(vNodes.size());\n+            for (auto& pnode : vNodes) {\n+                vNodesCopy.push_back(pnode.get_shared());\n                 pnode->AddRef();\n+            }\n         }\n         for (auto& pnode : vNodesCopy)\n         {\n@@ -1910,7 +1918,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n     }\n \n-    std::shared_ptr<CNode> pnode(ConnectNode(addrConnect, pszDest, fCountFailure));\n+    strong_ptr<CNode> pnode(ConnectNode(addrConnect, pszDest, fCountFailure));\n \n     if (!pnode)\n         return false;\n@@ -1939,8 +1947,9 @@ void CConnman::ThreadMessageHandler()\n         std::vector<std::shared_ptr<CNode>> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n-            vNodesCopy = vNodes;\n-            for (auto& pnode : vNodesCopy) {\n+            vNodesCopy.reserve(vNodes.size());\n+            for (auto& pnode : vNodes) {\n+                vNodesCopy.push_back(pnode.get_shared());\n                 pnode->AddRef();\n             }\n         }\n@@ -2398,7 +2407,7 @@ void CConnman::Stop()\n \n     // clean up some globals (to help leak detection)\n     for (auto& pnode : vNodes) {\n-        DeleteNode(std::move(pnode));\n+        DeleteNode(decay_ptr<CNode>(std::move(pnode)));\n     }\n     for (auto& pnode : vNodesDisconnected) {\n         DeleteNode(std::move(pnode));\n@@ -2412,7 +2421,7 @@ void CConnman::Stop()\n     semAddnode = NULL;\n }\n \n-void CConnman::DeleteNode(std::shared_ptr<CNode>&& pnode)\n+void CConnman::DeleteNode(decay_ptr<CNode>&& pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;"
      },
      {
        "sha": "3e1d0749c8c8bae674637efe175e4c30be13d8cd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/457bc99c57e2a84ea94529dc867fcc26d093226a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/457bc99c57e2a84ea94529dc867fcc26d093226a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=457bc99c57e2a84ea94529dc867fcc26d093226a",
        "patch": "@@ -18,6 +18,7 @@\n #include \"protocol.h\"\n #include \"random.h\"\n #include \"streams.h\"\n+#include \"strong_ptr.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"threadinterrupt.h\"\n@@ -303,10 +304,10 @@ class CConnman\n     uint64_t CalculateKeyedNetGroup(const CAddress& ad) const;\n \n     bool AttemptToEvictConnection();\n-    std::shared_ptr<CNode> ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+    strong_ptr<CNode> ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n-    void DeleteNode(std::shared_ptr<CNode>&& pnode);\n+    void DeleteNode(decay_ptr<CNode>&& pnode);\n \n     NodeId GetNewNodeId();\n \n@@ -334,7 +335,7 @@ class CConnman\n         LOCK(cs_vNodes);\n         for (auto& node : vNodes) {\n             if(func(node.get())) {\n-                return node;\n+                return node.get_shared();\n             }\n         }\n         return nullptr;\n@@ -371,8 +372,8 @@ class CConnman\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes;\n     CCriticalSection cs_vAddedNodes;\n-    std::vector<std::shared_ptr<CNode>> vNodes;\n-    std::list<std::shared_ptr<CNode>> vNodesDisconnected;\n+    std::vector<strong_ptr<CNode>> vNodes;\n+    std::list<decay_ptr<CNode>> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n "
      }
    ]
  },
  {
    "sha": "8317948f6787b2fda4c11ec2f09136898147df07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzE3OTQ4ZjY3ODdiMmZkYTRjMTFlYzJmMDkxMzY4OTgxNDdkZjA3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T00:30:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:06Z"
      },
      "message": "net: remove CNode's refcounting in favor of strong_ptr",
      "tree": {
        "sha": "fa230b120a8412420fdc6e372a8d81023e3f43ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa230b120a8412420fdc6e372a8d81023e3f43ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8317948f6787b2fda4c11ec2f09136898147df07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8317948f6787b2fda4c11ec2f09136898147df07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8317948f6787b2fda4c11ec2f09136898147df07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8317948f6787b2fda4c11ec2f09136898147df07/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "457bc99c57e2a84ea94529dc867fcc26d093226a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/457bc99c57e2a84ea94529dc867fcc26d093226a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/457bc99c57e2a84ea94529dc867fcc26d093226a"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 3,
      "deletions": 31
    },
    "files": [
      {
        "sha": "8c6f7537ac0186de849565ffa60a8fd5c283ce59",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8317948f6787b2fda4c11ec2f09136898147df07/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8317948f6787b2fda4c11ec2f09136898147df07/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8317948f6787b2fda4c11ec2f09136898147df07",
        "patch": "@@ -378,7 +378,6 @@ strong_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *pszDes\n         CAddress addr_bind = GetBindAddress(hSocket);\n         auto pnode(make_strong<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", false));\n         pnode->nServicesExpected = ServiceFlags(addrConnect.nServices & nRelevantServices);\n-        pnode->AddRef();\n \n         return pnode;\n     } else if (!proxyConnectionFailed) {\n@@ -1068,7 +1067,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CAddress addr_bind = GetBindAddress(hSocket);\n \n     auto pnode(make_strong<CNode>(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true));\n-    pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n     GetNodeSignals().InitializeNode(pnode.get(), *this);\n \n@@ -1107,7 +1105,6 @@ void CConnman::ThreadSocketHandler()\n                     pnode->CloseSocketDisconnect();\n \n                     // hold in disconnected pool until all refs are released\n-                    pnode->Release();\n                     vNodesDisconnected.emplace_back(std::move(pnode));\n                 } else {\n                     ++it;\n@@ -1118,10 +1115,10 @@ void CConnman::ThreadSocketHandler()\n             // Delete disconnected nodes\n             for (auto it = vNodesDisconnected.begin(); it != vNodesDisconnected.end();)\n             {\n-                CNode* pnode = it->get();\n                 // wait until threads are done using it\n                 bool fDelete = false;\n-                if (pnode->GetRefCount() <= 0) {\n+                if (it->decayed()) {\n+                    CNode* pnode = it->get();\n                     {\n                         TRY_LOCK(pnode->cs_inventory, lockInv);\n                         if (lockInv) {\n@@ -1254,7 +1251,6 @@ void CConnman::ThreadSocketHandler()\n             vNodesCopy.reserve(vNodes.size());\n             for (auto& pnode : vNodes) {\n                 vNodesCopy.push_back(pnode.get_shared());\n-                pnode->AddRef();\n             }\n         }\n         for (auto& pnode : vNodesCopy)\n@@ -1376,11 +1372,6 @@ void CConnman::ThreadSocketHandler()\n                 }\n             }\n         }\n-        {\n-            LOCK(cs_vNodes);\n-            for (auto& pnode : vNodesCopy)\n-                pnode->Release();\n-        }\n     }\n }\n \n@@ -1950,7 +1941,6 @@ void CConnman::ThreadMessageHandler()\n             vNodesCopy.reserve(vNodes.size());\n             for (auto& pnode : vNodes) {\n                 vNodesCopy.push_back(pnode.get_shared());\n-                pnode->AddRef();\n             }\n         }\n \n@@ -1976,12 +1966,6 @@ void CConnman::ThreadMessageHandler()\n                 return;\n         }\n \n-        {\n-            LOCK(cs_vNodes);\n-            for (auto& pnode : vNodesCopy)\n-                pnode->Release();\n-        }\n-\n         std::unique_lock<std::mutex> lock(mutexMsgProc);\n         if (!fMoreWork) {\n             condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100), [this] { return fMsgProcWake; });\n@@ -2424,6 +2408,7 @@ void CConnman::Stop()\n void CConnman::DeleteNode(decay_ptr<CNode>&& pnode)\n {\n     assert(pnode);\n+    assert(pnode.decayed());\n     bool fUpdateConnectionTime = false;\n     GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n     if(fUpdateConnectionTime)"
      },
      {
        "sha": "ac5689586f134d9b1bf875eed37b407436bcb72c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8317948f6787b2fda4c11ec2f09136898147df07/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8317948f6787b2fda4c11ec2f09136898147df07/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8317948f6787b2fda4c11ec2f09136898147df07",
        "patch": "@@ -751,19 +751,6 @@ class CNode\n     //! May not be called more than once\n     void SetAddrLocal(const CService& addrLocalIn);\n \n-    CNode* AddRef()\n-    {\n-        nRefCount++;\n-        return this;\n-    }\n-\n-    void Release()\n-    {\n-        nRefCount--;\n-    }\n-\n-\n-\n     void AddAddressKnown(const CAddress& _addr)\n     {\n         addrKnown.insert(_addr.GetKey());"
      }
    ]
  },
  {
    "sha": "afd1a552d20ecf24789b1fdb81d080d177037275",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQxYTU1MmQyMGVjZjI0Nzg5YjFmZGI4MWQwODBkMTc3MDM3Mjc1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T20:07:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:07Z"
      },
      "message": "net: create GetNodesCopy and use it in a few places",
      "tree": {
        "sha": "deafa18228b738e37d19ab32a08a3e20a03b6ac2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deafa18228b738e37d19ab32a08a3e20a03b6ac2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd1a552d20ecf24789b1fdb81d080d177037275",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd1a552d20ecf24789b1fdb81d080d177037275",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd1a552d20ecf24789b1fdb81d080d177037275",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd1a552d20ecf24789b1fdb81d080d177037275/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8317948f6787b2fda4c11ec2f09136898147df07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8317948f6787b2fda4c11ec2f09136898147df07",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8317948f6787b2fda4c11ec2f09136898147df07"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 25,
      "deletions": 14
    },
    "files": [
      {
        "sha": "fc76b993fb57c2d54dd166b694e034e4bda3971e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd1a552d20ecf24789b1fdb81d080d177037275/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd1a552d20ecf24789b1fdb81d080d177037275/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=afd1a552d20ecf24789b1fdb81d080d177037275",
        "patch": "@@ -489,9 +489,10 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n-        for (auto& pnode : vNodes) {\n-            if (subNet.Match((CNetAddr)pnode->addr))\n+        for (auto& pnode : GetNodesCopy()) {\n+            if (subNet.Match((CNetAddr)pnode->addr)) {\n                 pnode->fDisconnect = true;\n+            }\n         }\n     }\n     if(banReason == BanReasonManuallyAdded)\n@@ -1938,12 +1939,8 @@ void CConnman::ThreadMessageHandler()\n         std::vector<std::shared_ptr<CNode>> vNodesCopy;\n         {\n             LOCK(cs_vNodes);\n-            vNodesCopy.reserve(vNodes.size());\n-            for (auto& pnode : vNodes) {\n-                vNodesCopy.push_back(pnode.get_shared());\n-            }\n+            vNodesCopy = GetNodesCopy();\n         }\n-\n         bool fMoreWork = false;\n \n         for (auto& pnode : vNodesCopy)\n@@ -2137,7 +2134,7 @@ void CConnman::SetNetworkActive(bool active)\n \n         LOCK(cs_vNodes);\n         // Close sockets to all nodes\n-        for (auto& pnode : vNodes) {\n+        for (auto& pnode : GetNodesCopy()) {\n             pnode->CloseSocketDisconnect();\n         }\n     } else {\n@@ -2491,8 +2488,9 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();\n     LOCK(cs_vNodes);\n-    vstats.reserve(vNodes.size());\n-    for (auto& pnode : vNodes) {\n+    std::vector<std::shared_ptr<CNode>> nodes_copy = GetNodesCopy();\n+    vstats.reserve(nodes_copy.size());\n+    for (const auto& pnode : nodes_copy) {\n         vstats.emplace_back();\n         pnode->copyStats(vstats.back());\n     }"
      },
      {
        "sha": "3b7d2f8cd19a4e4fc5aff9fe8ef402bc87e39aa6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd1a552d20ecf24789b1fdb81d080d177037275/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd1a552d20ecf24789b1fdb81d080d177037275/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=afd1a552d20ecf24789b1fdb81d080d177037275",
        "patch": "@@ -166,7 +166,7 @@ class CConnman\n     void ForEachNode(Callable&& func)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n+        for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 func(node.get());\n         }\n@@ -176,7 +176,7 @@ class CConnman\n     void ForEachNode(Callable&& func) const\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n+        for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 func(node.get());\n         }\n@@ -186,7 +186,7 @@ class CConnman\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n+        for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 pre(node.get());\n         }\n@@ -197,7 +197,7 @@ class CConnman\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n         LOCK(cs_vNodes);\n-        for (auto&& node : vNodes) {\n+        for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 pre(node.get());\n         }\n@@ -329,6 +329,19 @@ class CConnman\n     // Whether the node should be passed out in ForEach* callbacks\n     static bool NodeFullyConnected(const CNode* pnode);\n \n+    std::vector<std::shared_ptr<CNode>> GetNodesCopy() const\n+    {\n+        std::vector<std::shared_ptr<CNode>> nodes_copy;\n+        {\n+            LOCK(cs_vNodes);\n+            nodes_copy.reserve(vNodes.size());\n+            for (auto&& node : vNodes) {\n+                nodes_copy.push_back(node.get_shared());\n+            }\n+        }\n+        return nodes_copy;\n+    }\n+\n     template <typename Callable>\n     std::shared_ptr<CNode> FindNode(Callable&& func)\n     {"
      }
    ]
  },
  {
    "sha": "afd31d77064c2185c5afe323005fbcba76feca61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmQzMWQ3NzA2NGMyMTg1YzVhZmUzMjMwMDVmYmNiYTc2ZmVjYTYx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T00:58:48Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-03T23:13:07Z"
      },
      "message": "net: clean up vNodes usage in the socket handler\n\n- Make a single, quick copy at the top of the loop\n- Disconnect outside of the lock",
      "tree": {
        "sha": "26eda8037616ac13790a720c4fa4c7b1a5591f05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26eda8037616ac13790a720c4fa4c7b1a5591f05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afd31d77064c2185c5afe323005fbcba76feca61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd31d77064c2185c5afe323005fbcba76feca61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afd31d77064c2185c5afe323005fbcba76feca61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd31d77064c2185c5afe323005fbcba76feca61/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd1a552d20ecf24789b1fdb81d080d177037275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd1a552d20ecf24789b1fdb81d080d177037275",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd1a552d20ecf24789b1fdb81d080d177037275"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 27,
      "deletions": 55
    },
    "files": [
      {
        "sha": "1e50a34c5aaf347910ed6123378296fe73d43565",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 55,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afd31d77064c2185c5afe323005fbcba76feca61/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afd31d77064c2185c5afe323005fbcba76feca61/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=afd31d77064c2185c5afe323005fbcba76feca61",
        "patch": "@@ -1084,66 +1084,47 @@ void CConnman::ThreadSocketHandler()\n     unsigned int nPrevNodeCount = 0;\n     while (!interruptNet)\n     {\n-        //\n-        // Disconnect nodes\n-        //\n+        std::vector<decay_ptr<CNode>> nodes_to_disconnect;\n+        std::vector<std::shared_ptr<CNode>> nodes_copy;\n+        // Separate nodes scheduled for disconnection\n         {\n             LOCK(cs_vNodes);\n-            // Disconnect unused nodes\n             for (auto it = vNodes.begin(); it != vNodes.end();)\n             {\n                 if ((*it)->fDisconnect)\n                 {\n-                    strong_ptr<CNode> pnode(std::move(*it));\n-\n                     // remove from vNodes\n+                    nodes_to_disconnect.emplace_back(std::move(*it));\n                     it = vNodes.erase(it);\n-\n-                    // release outbound grant (if any)\n-                    pnode->grantOutbound.Release();\n-\n-                    // close socket and cleanup\n-                    pnode->CloseSocketDisconnect();\n-\n-                    // hold in disconnected pool until all refs are released\n-                    vNodesDisconnected.emplace_back(std::move(pnode));\n                 } else {\n+                    nodes_copy.push_back(it->get_shared());\n                     ++it;\n                 }\n             }\n         }\n-        {\n-            // Delete disconnected nodes\n-            for (auto it = vNodesDisconnected.begin(); it != vNodesDisconnected.end();)\n-            {\n-                // wait until threads are done using it\n-                bool fDelete = false;\n-                if (it->decayed()) {\n-                    CNode* pnode = it->get();\n-                    {\n-                        TRY_LOCK(pnode->cs_inventory, lockInv);\n-                        if (lockInv) {\n-                            TRY_LOCK(pnode->cs_vSend, lockSend);\n-                            if (lockSend) {\n-                                fDelete = true;\n-                            }\n-                        }\n-                    }\n-                }\n-                if (fDelete) {\n-                    decay_ptr<CNode> node(std::move(*it));\n-                    it = vNodesDisconnected.erase(it);\n-                    DeleteNode(std::move(node));\n-                } else {\n-                    ++it;\n-                }\n-            }\n+        // Disconnect nodes\n+        for (auto& pnode : nodes_to_disconnect) {\n+            assert(pnode->fDisconnect);\n+            // release outbound grant (if any)\n+            pnode->grantOutbound.Release();\n+\n+            // close socket and cleanup\n+            pnode->CloseSocketDisconnect();\n+            vNodesDisconnected.push_back(std::move(pnode));\n         }\n-        size_t vNodesSize;\n+\n+        // Destroy the node when only one instance remains\n+        for (auto it = vNodesDisconnected.begin(); it != vNodesDisconnected.end();)\n         {\n-            LOCK(cs_vNodes);\n-            vNodesSize = vNodes.size();\n+            if (it->decayed()) {\n+                decay_ptr<CNode> pnode(std::move(*it));\n+                it = vNodesDisconnected.erase(it);\n+                DeleteNode(std::move(pnode));\n+            } else {\n+                ++it;\n+            }\n         }\n+        size_t vNodesSize = nodes_copy.size();\n         if(vNodesSize != nPrevNodeCount) {\n             nPrevNodeCount = vNodesSize;\n             if(clientInterface)\n@@ -1173,8 +1154,7 @@ void CConnman::ThreadSocketHandler()\n         }\n \n         {\n-            LOCK(cs_vNodes);\n-            for (auto& pnode : vNodes)\n+            for (auto& pnode : nodes_copy)\n             {\n                 // Implement the following logic:\n                 // * If there is data to send, select() for sending data. As this only\n@@ -1246,15 +1226,7 @@ void CConnman::ThreadSocketHandler()\n         //\n         // Service each socket\n         //\n-        std::vector<std::shared_ptr<CNode>> vNodesCopy;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesCopy.reserve(vNodes.size());\n-            for (auto& pnode : vNodes) {\n-                vNodesCopy.push_back(pnode.get_shared());\n-            }\n-        }\n-        for (auto& pnode : vNodesCopy)\n+        for (auto& pnode : nodes_copy)\n         {\n             if (interruptNet)\n                 return;"
      }
    ]
  },
  {
    "sha": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGM2NzFhMjIwNDZjNmMwOWE2ZGUyYjFkMzhlOWUyZmEzOTIwNjI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-06-30T00:46:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-04T00:46:31Z"
      },
      "message": "net: drop some cs_vNodes locks\n\nThese are all unnecessary now that a shared_ptr is held.",
      "tree": {
        "sha": "2bc2fd4e01002235b93465da64050ba04fdb0a69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2bc2fd4e01002235b93465da64050ba04fdb0a69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc671a22046c6c09a6de2b1d38e9e2fa3920628/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afd31d77064c2185c5afe323005fbcba76feca61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afd31d77064c2185c5afe323005fbcba76feca61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afd31d77064c2185c5afe323005fbcba76feca61"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 1,
      "deletions": 20
    },
    "files": [
      {
        "sha": "2667318a45ae60e2dab03d5076ece0b690314595",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc671a22046c6c09a6de2b1d38e9e2fa3920628/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc671a22046c6c09a6de2b1d38e9e2fa3920628/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
        "patch": "@@ -301,7 +301,6 @@ bool IsReachable(const CNetAddr& addr)\n \n bool CConnman::CheckIncomingNonce(uint64_t nonce)\n {\n-    LOCK(cs_vNodes);\n     if (FindNode([nonce](const CNode* pnode) { return !pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce; })) {\n         return false;\n     }\n@@ -360,7 +359,6 @@ strong_ptr<CNode> CConnman::ConnectNode(CAddress addrConnect, const char *pszDes\n             // In that case, drop the connection that was just created, and return the existing CNode instead.\n             // Also store the name we used to connect in that CNode, so that future FindNode() calls to that\n             // name catch this early.\n-            LOCK(cs_vNodes);\n             if (auto pnode = FindNode([&addrConnect](const CNode* pnode) { return (CService)pnode->addr == addrConnect; }))\n             {\n                 pnode->MaybeSetAddrName(std::string(pszDest));\n@@ -488,7 +486,6 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n     if(clientInterface)\n         clientInterface->BannedListChanged();\n     {\n-        LOCK(cs_vNodes);\n         for (auto& pnode : GetNodesCopy()) {\n             if (subNet.Match((CNetAddr)pnode->addr)) {\n                 pnode->fDisconnect = true;\n@@ -991,7 +988,6 @@ bool CConnman::AttemptToEvictConnection()\n \n     // Disconnect from the network group with the most connections\n     NodeId evicted = vEvictionCandidates.front().id;\n-    LOCK(cs_vNodes);\n     if (auto pnode = FindNode([evicted](const CNode* pnode) { return pnode->GetId() == evicted; })) {\n         pnode->fDisconnect = true;\n         return true;\n@@ -1908,14 +1904,8 @@ void CConnman::ThreadMessageHandler()\n {\n     while (!flagInterruptMsgProc)\n     {\n-        std::vector<std::shared_ptr<CNode>> vNodesCopy;\n-        {\n-            LOCK(cs_vNodes);\n-            vNodesCopy = GetNodesCopy();\n-        }\n         bool fMoreWork = false;\n-\n-        for (auto& pnode : vNodesCopy)\n+        for (auto& pnode : GetNodesCopy())\n         {\n             if (pnode->fDisconnect)\n                 continue;\n@@ -2104,7 +2094,6 @@ void CConnman::SetNetworkActive(bool active)\n     if (!active) {\n         fNetworkActive = false;\n \n-        LOCK(cs_vNodes);\n         // Close sockets to all nodes\n         for (auto& pnode : GetNodesCopy()) {\n             pnode->CloseSocketDisconnect();\n@@ -2459,7 +2448,6 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();\n-    LOCK(cs_vNodes);\n     std::vector<std::shared_ptr<CNode>> nodes_copy = GetNodesCopy();\n     vstats.reserve(nodes_copy.size());\n     for (const auto& pnode : nodes_copy) {\n@@ -2470,7 +2458,6 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n \n bool CConnman::DisconnectNode(const std::string& strNode)\n {\n-    LOCK(cs_vNodes);\n     if (auto pnode = FindNode([&strNode](const CNode* pnode) { return pnode->GetAddrName() == strNode; })) {\n         pnode->fDisconnect = true;\n         return true;\n@@ -2479,7 +2466,6 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n }\n bool CConnman::DisconnectNode(NodeId id)\n {\n-    LOCK(cs_vNodes);\n     if (auto pnode = FindNode([id](const CNode* pnode) { return pnode->GetId() == id; })) {\n         pnode->fDisconnect = true;\n         return true;\n@@ -2772,7 +2758,6 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n \n bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n {\n-    LOCK(cs_vNodes);\n     if (auto pnode = FindNode([id](const CNode* pnode) { return pnode->GetId() == id; })) {\n         return NodeFullyConnected(pnode.get()) && func(pnode.get());\n     }"
      },
      {
        "sha": "15e9ae01db363c2de37d70437df8fec99e743eb9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc671a22046c6c09a6de2b1d38e9e2fa3920628/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc671a22046c6c09a6de2b1d38e9e2fa3920628/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
        "patch": "@@ -165,7 +165,6 @@ class CConnman\n     template<typename Callable>\n     void ForEachNode(Callable&& func)\n     {\n-        LOCK(cs_vNodes);\n         for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 func(node.get());\n@@ -175,7 +174,6 @@ class CConnman\n     template<typename Callable>\n     void ForEachNode(Callable&& func) const\n     {\n-        LOCK(cs_vNodes);\n         for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 func(node.get());\n@@ -185,7 +183,6 @@ class CConnman\n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n     {\n-        LOCK(cs_vNodes);\n         for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 pre(node.get());\n@@ -196,7 +193,6 @@ class CConnman\n     template<typename Callable, typename CallableAfter>\n     void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n     {\n-        LOCK(cs_vNodes);\n         for (auto&& node : GetNodesCopy()) {\n             if (NodeFullyConnected(node.get()))\n                 pre(node.get());"
      }
    ]
  }
]