[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312751966",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312751966",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
    "id": 312751966,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjc1MTk2Ng==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-04T00:03:22Z",
    "updated_at": "2017-07-04T00:03:22Z",
    "author_association": "MEMBER",
    "body": "Note that https://github.com/bitcoin/bitcoin/pull/10697#issuecomment-311811754 applies here as well.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312751966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312755338",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312755338",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
    "id": 312755338,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMjc1NTMzOA==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-04T00:45:45Z",
    "updated_at": "2017-07-04T00:45:45Z",
    "author_association": "MEMBER",
    "body": "Test failure looks unrelated and matches another one here: https://travis-ci.org/bitcoin/bitcoin/jobs/248773151. Kicking off a new build.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/312755338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/324287323",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-324287323",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
    "id": 324287323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMyNDI4NzMyMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-08-23T10:22:45Z",
    "updated_at": "2017-08-23T10:22:45Z",
    "author_association": "MEMBER",
    "body": "Needs rebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/324287323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364663457",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-364663457",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
    "id": 364663457,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM2NDY2MzQ1Nw==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-02-10T15:36:43Z",
    "updated_at": "2018-02-10T15:36:43Z",
    "author_association": "MEMBER",
    "body": "The title sounds great because is not \"reinventing the wheel\" like our own ref_count data structure.\r\nBut strong_pointer feels like reinventing the wheel again...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/364663457/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437192700",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-437192700",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/10738",
    "id": 437192700,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzNzE5MjcwMA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-11-08T23:20:46Z",
    "updated_at": "2018-11-08T23:20:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/437192700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158109825",
    "pull_request_review_id": 84866659,
    "id": 158109825,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODEwOTgyNQ==",
    "diff_hunk": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {",
    "path": "src/strong_ptr.h",
    "position": 51,
    "original_position": 51,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand how make_strong/strong_ptr/decay_ptr provide any benefit in this example. Why wouldn't you just use regular shared pointers, and write this loop as `while (str.use_count() > 1)`?",
    "created_at": "2017-12-20T19:09:07Z",
    "updated_at": "2017-12-20T19:09:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158109825",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158109825"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158109825"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158109825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158149046",
    "pull_request_review_id": 84912959,
    "id": 158149046,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE1ODE0OTA0Ng==",
    "diff_hunk": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {",
    "path": "src/strong_ptr.h",
    "position": 51,
    "original_position": 51,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "a weak_ptr can be created from a shared_ptr without bumping its refcount. That weak_ptr can ```lock()``` in a separate thread just after checking use_count() here. ```shared_ptr.unique()``` (```shared_ptr.use_count() == 1```) was deprecated in c++17 for that reason.\r\n\r\nOnce moved to a decay_ptr, ```decayed()``` is a trustworthy ```unique()```.",
    "created_at": "2017-12-20T22:07:55Z",
    "updated_at": "2017-12-20T22:07:55Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158149046",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158149046"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158149046"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/158149046/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 158109825
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166312833",
    "pull_request_review_id": 94358094,
    "id": 166312833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMxMjgzMw==",
    "diff_hunk": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {",
    "path": "src/strong_ptr.h",
    "position": 51,
    "original_position": 51,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this is a particularly good example, as it encourages busy waiting :-) But for the application in our net code it's a clever solution.",
    "created_at": "2018-02-06T14:19:34Z",
    "updated_at": "2018-02-06T14:19:34Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166312833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166312833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166312833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166312833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 158109825
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166316663",
    "pull_request_review_id": 94360577,
    "id": 166316663,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMxNjY2Mw==",
    "diff_hunk": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {\n+                // wait here\n+                continue;\n+            }\n+            // dec is guaranteed to be unique here. Its memory will be freed\n+            // when it goes out of scope.\n+            return 0;\n+        }\n+*/\n+\n+template <typename T>\n+class decay_ptr;\n+\n+template <typename T>\n+class strong_ptr\n+{\n+    struct shared_deleter {\n+        void operator()(T* /* unused */) const {}\n+        const std::shared_ptr<void> m_data;\n+    };\n+\n+    friend class decay_ptr<T>;\n+\n+    template <typename U, typename... Args>\n+    friend strong_ptr<U> make_strong(Args&&... args);\n+\n+    template <typename U>\n+    explicit strong_ptr(std::shared_ptr<U>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+public:\n+    using element_type = T;\n+\n+    constexpr strong_ptr() : strong_ptr(nullptr) {}\n+\n+    constexpr strong_ptr(std::nullptr_t) : m_shared{nullptr} {}\n+\n+    template <typename U>\n+    explicit strong_ptr(U* ptr) : m_data(ptr)\n+    {\n+    }\n+\n+    template <typename Deleter>\n+    strong_ptr(std::nullptr_t ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(U* ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(std::unique_ptr<U, Deleter>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+    template <typename U>\n+    strong_ptr(strong_ptr<U>&& rhs) : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)}\n+    {\n+    }\n+\n+    strong_ptr(strong_ptr&& rhs) noexcept : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)} {}\n+\n+    ~strong_ptr() = default;\n+\n+    strong_ptr(const strong_ptr& rhs) = delete;\n+    strong_ptr& operator=(const strong_ptr& rhs) = delete;\n+\n+    strong_ptr& operator=(strong_ptr&& rhs) noexcept\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(strong_ptr<U>&& rhs)\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(U* rhs)\n+    {\n+        reset(rhs);\n+        return *this;\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr& operator=(std::unique_ptr<U, Deleter>&& rhs)\n+    {\n+        m_data = std::move(rhs);\n+        m_shared.reset(nullptr, shared_deleter{m_data});\n+        return *this;\n+    }\n+\n+    void reset()\n+    {\n+        m_data.reset();\n+        m_shared.reset();\n+    }\n+    void reset(std::nullptr_t)",
    "path": "src/strong_ptr.h",
    "position": 156,
    "original_position": 156,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What is the advantage of having a specific overload for nullptr_t?",
    "created_at": "2018-02-06T14:26:13Z",
    "updated_at": "2018-02-06T14:44:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166316663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166316663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166316663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166316663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 156,
    "original_line": 156,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166320184",
    "pull_request_review_id": 94360577,
    "id": 166320184,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMyMDE4NA==",
    "diff_hunk": "@@ -333,6 +328,19 @@ class CConnman\n     // Whether the node should be passed out in ForEach* callbacks\n     static bool NodeFullyConnected(const CNode* pnode);\n \n+    template <typename Callable>",
    "path": "src/net.h",
    "position": null,
    "original_position": 16,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "e1dbd84efeba803437bc97507288cde37f640fb1",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nice! I like how this cleans up the searching functions. Maybe add a comment (for doxygen) that this returns the first (arbitrary) node that matches a certain predicate, or `nullptr` otherwise.",
    "created_at": "2018-02-06T14:31:53Z",
    "updated_at": "2018-02-06T14:44:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166320184",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166320184"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166320184"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166320184/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 331,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166323055",
    "pull_request_review_id": 94360577,
    "id": 166323055,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NjMyMzA1NQ==",
    "diff_hunk": "@@ -329,6 +329,19 @@ class CConnman\n     // Whether the node should be passed out in ForEach* callbacks\n     static bool NodeFullyConnected(const CNode* pnode);\n \n+    std::vector<std::shared_ptr<CNode>> GetNodesCopy() const",
    "path": "src/net.h",
    "position": 85,
    "original_position": 40,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "afd1a552d20ecf24789b1fdb81d080d177037275",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Creating a copy - increasing all refcounts in the process, just to drop them again at the end of the function - feels like a lot of overhead, how many lock operations does that take internally? Can we somehow benchmark that this is more efficient than holding cs_vnodes for the entire time? (or at least, not much slower, not all the cases are performance critical and it does clean up the code)",
    "created_at": "2018-02-06T14:40:56Z",
    "updated_at": "2018-02-06T14:44:45Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166323055",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166323055"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166323055"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/166323055/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 328,
    "original_line": 332,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167354695",
    "pull_request_review_id": 95573235,
    "id": 167354695,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzM1NDY5NQ==",
    "diff_hunk": "@@ -329,6 +329,19 @@ class CConnman\n     // Whether the node should be passed out in ForEach* callbacks\n     static bool NodeFullyConnected(const CNode* pnode);\n \n+    std::vector<std::shared_ptr<CNode>> GetNodesCopy() const",
    "path": "src/net.h",
    "position": 85,
    "original_position": 40,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "afd1a552d20ecf24789b1fdb81d080d177037275",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Performance isn't the intention, this was done in order to avoid keeping cs_vNodes locked during the ForEachNode callbacks. Though I agree and also really dislike the overhead.",
    "created_at": "2018-02-09T21:49:03Z",
    "updated_at": "2018-02-09T21:49:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167354695",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167354695"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167354695"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167354695/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 328,
    "original_line": 332,
    "side": "RIGHT",
    "in_reply_to_id": 166323055
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167358024",
    "pull_request_review_id": 95577203,
    "id": 167358024,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE2NzM1ODAyNA==",
    "diff_hunk": "@@ -0,0 +1,317 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STRONGPTR_H\n+#define BITCOIN_STRONGPTR_H\n+\n+#include <memory>\n+\n+/*\n+    strong_ptr and decay_ptr create a safe use pattern for moving shared_ptrs\n+    to a unique_ptr.\n+\n+    While any such pattern would usually make no sense, it can be made to work\n+    with a new type that holds an extra reference (strong_ptr), and one that\n+    observes the lifetime of extra references (decay_ptr).\n+\n+    The process is:\n+        1. Create a strong_ptr like any typical smart pointer. It cannot be\n+            copied, but it can \"loan out\" shared_ptrs using\n+            strong_ptr::get_shared().\n+        2. Use the \"loaned\" shared_ptrs as usual, and use the strong_ptr as\n+            though it were a unique_ptr.\n+        3. When it's time to coalesce, move the strong_ptr into a decay_ptr.\n+        4. Query the status with decay_ptr::decayed().\n+\n+    Once moved into a decay_ptr, the original strong_ptr is reset, and the\n+    decay_ptr is unable to loan out any new shared_ptrs. Once the decay_ptr has\n+    decayed, it behaves just like a unique_ptr.\n+\n+    If a loaned shared_ptr outlives the strong_ptr that owns it, the lifetime\n+    is extended until the last copy is deleted. This is accomplished by\n+    creating a shared_ptr to represent the lifetime of the strong_ptr, and\n+    storing a copy of it in the loaned shared_ptr's deleter.\n+\n+    Thus, strong_ptr and decay_ptr ensure that allocated memory is always freed.\n+\n+    Here's a quick example of their use:\n+\n+        void func(std::shared_ptr<int>)\n+        {\n+            // Some long-lived operation\n+        }\n+\n+        int main()\n+        {\n+            strong_ptr<int> str(make_strong<int>(100));\n+            std::thread(func, str.get_shared());\n+            decay_ptr<int> dec(std::move(strong));\n+            // The original strong_ptr is now reset\n+            while (!dec.decayed()) {\n+                // wait here\n+                continue;\n+            }\n+            // dec is guaranteed to be unique here. Its memory will be freed\n+            // when it goes out of scope.\n+            return 0;\n+        }\n+*/\n+\n+template <typename T>\n+class decay_ptr;\n+\n+template <typename T>\n+class strong_ptr\n+{\n+    struct shared_deleter {\n+        void operator()(T* /* unused */) const {}\n+        const std::shared_ptr<void> m_data;\n+    };\n+\n+    friend class decay_ptr<T>;\n+\n+    template <typename U, typename... Args>\n+    friend strong_ptr<U> make_strong(Args&&... args);\n+\n+    template <typename U>\n+    explicit strong_ptr(std::shared_ptr<U>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+public:\n+    using element_type = T;\n+\n+    constexpr strong_ptr() : strong_ptr(nullptr) {}\n+\n+    constexpr strong_ptr(std::nullptr_t) : m_shared{nullptr} {}\n+\n+    template <typename U>\n+    explicit strong_ptr(U* ptr) : m_data(ptr)\n+    {\n+    }\n+\n+    template <typename Deleter>\n+    strong_ptr(std::nullptr_t ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(U* ptr, Deleter deleter) : m_data{ptr, std::move(deleter)}\n+    {\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr(std::unique_ptr<U, Deleter>&& rhs) : m_data{std::move(rhs)}\n+    {\n+    }\n+\n+    template <typename U>\n+    strong_ptr(strong_ptr<U>&& rhs) : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)}\n+    {\n+    }\n+\n+    strong_ptr(strong_ptr&& rhs) noexcept : m_data{std::move(rhs.m_data)}, m_shared{std::move(rhs.m_shared)} {}\n+\n+    ~strong_ptr() = default;\n+\n+    strong_ptr(const strong_ptr& rhs) = delete;\n+    strong_ptr& operator=(const strong_ptr& rhs) = delete;\n+\n+    strong_ptr& operator=(strong_ptr&& rhs) noexcept\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(strong_ptr<U>&& rhs)\n+    {\n+        m_data = std::move(rhs.m_data);\n+        m_shared = std::move(rhs.m_shared);\n+        return *this;\n+    }\n+\n+    template <typename U>\n+    strong_ptr& operator=(U* rhs)\n+    {\n+        reset(rhs);\n+        return *this;\n+    }\n+\n+    template <typename U, typename Deleter>\n+    strong_ptr& operator=(std::unique_ptr<U, Deleter>&& rhs)\n+    {\n+        m_data = std::move(rhs);\n+        m_shared.reset(nullptr, shared_deleter{m_data});\n+        return *this;\n+    }\n+\n+    void reset()\n+    {\n+        m_data.reset();\n+        m_shared.reset();\n+    }\n+    void reset(std::nullptr_t)",
    "path": "src/strong_ptr.h",
    "position": 156,
    "original_position": 156,
    "commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "original_commit_id": "6dc671a22046c6c09a6de2b1d38e9e2fa3920628",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Heh, I have no idea why I added that. Will remove.",
    "created_at": "2018-02-09T22:04:04Z",
    "updated_at": "2018-02-09T22:04:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167358024",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167358024"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167358024"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/10738"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/167358024/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 156,
    "original_line": 156,
    "side": "RIGHT",
    "in_reply_to_id": 166316663
  }
]