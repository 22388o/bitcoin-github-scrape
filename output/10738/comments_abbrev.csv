theuni,2017-07-04T00:03:22Z,Note that https://github.com/bitcoin/bitcoin/pull/10697#issuecomment-311811754 applies here as well.,https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312751966,312751966,
theuni,2017-07-04T00:45:45Z,Test failure looks unrelated and matches another one here: https://travis-ci.org/bitcoin/bitcoin/jobs/248773151. Kicking off a new build.,https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-312755338,312755338,
laanwj,2017-08-23T10:22:45Z,Needs rebase.,https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-324287323,324287323,
jtimon,2018-02-10T15:36:43Z,"The title sounds great because is not ""reinventing the wheel"" like our own ref_count data structure.\nBut strong_pointer feels like reinventing the wheel again...",https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-364663457,364663457,
DrahtBot,2018-11-08T23:20:46Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/10738#issuecomment-437192700,437192700,
ryanofsky,2017-12-20T19:09:07Z,"I don't understand how make_strong/strong_ptr/decay_ptr provide any benefit in this example. Why wouldn't you just use regular shared pointers, and write this loop as `while (str.use_count() > 1)`?",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158109825,158109825,src/strong_ptr.h
theuni,2017-12-20T22:07:55Z,"a weak_ptr can be created from a shared_ptr without bumping its refcount. That weak_ptr can ```lock()``` in a separate thread just after checking use_count() here. ```shared_ptr.unique()``` (```shared_ptr.use_count() == 1```) was deprecated in c++17 for that reason.\n\nOnce moved to a decay_ptr, ```decayed()``` is a trustworthy ```unique()```.",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r158149046,158149046,src/strong_ptr.h
laanwj,2018-02-06T14:19:34Z,"I don't think this is a particularly good example, as it encourages busy waiting :-) But for the application in our net code it's a clever solution.",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166312833,166312833,src/strong_ptr.h
laanwj,2018-02-06T14:26:13Z,What is the advantage of having a specific overload for nullptr_t?,https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166316663,166316663,src/strong_ptr.h
laanwj,2018-02-06T14:31:53Z,"Nice! I like how this cleans up the searching functions. Maybe add a comment (for doxygen) that this returns the first (arbitrary) node that matches a certain predicate, or `nullptr` otherwise.",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166320184,166320184,src/net.h
laanwj,2018-02-06T14:40:56Z,"Creating a copy - increasing all refcounts in the process, just to drop them again at the end of the function - feels like a lot of overhead, how many lock operations does that take internally? Can we somehow benchmark that this is more efficient than holding cs_vnodes for the entire time? (or at least, not much slower, not all the cases are performance critical and it does clean up the code)",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r166323055,166323055,src/net.h
theuni,2018-02-09T21:49:03Z,"Performance isn't the intention, this was done in order to avoid keeping cs_vNodes locked during the ForEachNode callbacks. Though I agree and also really dislike the overhead.",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167354695,167354695,src/net.h
theuni,2018-02-09T22:04:04Z,"Heh, I have no idea why I added that. Will remove.",https://github.com/bitcoin/bitcoin/pull/10738#discussion_r167358024,167358024,src/strong_ptr.h
