[
  {
    "sha": "3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDUyMzA5NWJlOWNmNTQyZDcwMWNiY2I5OWVjZDdlMmMwYzQ1OWU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-12T12:45:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-10T13:47:07Z"
      },
      "message": "Support for multiple local addresses",
      "tree": {
        "sha": "c68a67de8e15f50af75901d2961d37b01740f702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c68a67de8e15f50af75901d2961d37b01740f702"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a275bac2b5454ae9d6744f28c29cbf40e2fbf13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a275bac2b5454ae9d6744f28c29cbf40e2fbf13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a275bac2b5454ae9d6744f28c29cbf40e2fbf13"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 182,
      "deletions": 81
    },
    "files": [
      {
        "sha": "5fb09ceb7eeb56823269bc5cf812dc840f018d68",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -12,7 +12,6 @@ using namespace std;\n using namespace boost;\n \n int nGotIRCAddresses = 0;\n-bool fGotExternalIP = false;\n \n void ThreadIRCSeed2(void* parg);\n \n@@ -248,9 +247,10 @@ void ThreadIRCSeed2(void* parg)\n                 return;\n         }\n \n+        CNetAddr addrLocal;\n         string strMyName;\n-        if (addrLocalHost.IsRoutable() && !fUseProxy && !fNameInUse)\n-            strMyName = EncodeAddress(addrLocalHost);\n+        if (GetLocal(addrLocal, &addrConnect))\n+            strMyName = EncodeAddress(GetLocalAddress(&addrConnect));\n         else\n             strMyName = strprintf(\"x%u\", GetRand(1000000000));\n \n@@ -285,9 +285,8 @@ void ThreadIRCSeed2(void* parg)\n             if (!fUseProxy && addrFromIRC.IsRoutable())\n             {\n                 // IRC lets you to re-nick\n-                fGotExternalIP = true;\n-                addrLocalHost.SetIP(addrFromIRC);\n-                strMyName = EncodeAddress(addrLocalHost);\n+                AddLocal(addrFromIRC, LOCAL_IRC);\n+                strMyName = EncodeAddress(GetLocalAddress(&addrConnect));\n                 Send(hSocket, strprintf(\"NICK %s\\r\", strMyName.c_str()).c_str());\n             }\n         }"
      },
      {
        "sha": "a6073199ec2f2422a47993756b2475376cd9084b",
        "filename": "src/irc.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/irc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/irc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.h?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -8,6 +8,5 @@\n void ThreadIRCSeed(void* parg);\n \n extern int nGotIRCAddresses;\n-extern bool fGotExternalIP;\n \n #endif"
      },
      {
        "sha": "000367341806c4d175165fa1b82699a1e714cc36",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -2208,6 +2208,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (!vRecv.empty())\n             vRecv >> pfrom->nStartingHeight;\n \n+        if (pfrom->fInbound && addrMe.IsRoutable())\n+        {\n+            pfrom->addrLocal = addrMe;\n+            SeenLocal(addrMe);\n+        }\n+\n         // Disconnect if we connected to ourself\n         if (nNonce == nLocalHostNonce && nNonce > 1)\n         {\n@@ -2231,12 +2237,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n-            if (!fNoListen && !fUseProxy && addrLocalHost.IsRoutable() &&\n-                !IsInitialBlockDownload())\n+            if (!fNoListen && !fUseProxy && !IsInitialBlockDownload())\n             {\n-                CAddress addr(addrLocalHost);\n-                addr.nTime = GetAdjustedTime();\n-                pfrom->PushAddress(addr);\n+                CAddress addr = GetLocalAddress(&pfrom->addr);\n+                if (addr.IsRoutable())\n+                    pfrom->PushAddress(addr);\n             }\n \n             // Get recent addresses\n@@ -2839,11 +2844,11 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                         pnode->setAddrKnown.clear();\n \n                     // Rebroadcast our address\n-                    if (!fNoListen && !fUseProxy && addrLocalHost.IsRoutable())\n+                    if (!fNoListen && !fUseProxy)\n                     {\n-                        CAddress addr(addrLocalHost);\n-                        addr.nTime = GetAdjustedTime();\n-                        pnode->PushAddress(addr);\n+                        CAddress addr = GetLocalAddress(&pnode->addr);\n+                        if (addr.IsRoutable())\n+                            pnode->PushAddress(addr);\n                     }\n                 }\n             }"
      },
      {
        "sha": "876268a28187f569ed0230286f2a152efbe24a6e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 64,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -46,7 +46,8 @@ bool fClient = false;\n bool fAllowDNS = false;\n static bool fUseUPnP = false;\n uint64 nLocalServices = (fClient ? 0 : NODE_NETWORK);\n-CAddress addrLocalHost(CService(\"0.0.0.0\", 0), nLocalServices);\n+CCriticalSection cs_mapLocalHost;\n+map<CNetAddr, int> mapLocalHost;\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n array<int, THREAD_MAX> vnThreadsRunning;\n@@ -85,7 +86,45 @@ void CNode::PushGetBlocks(CBlockIndex* pindexBegin, uint256 hashEnd)\n     PushMessage(\"getblocks\", CBlockLocator(pindexBegin), hashEnd);\n }\n \n+// find 'best' local address for a particular peer\n+bool GetLocal(CNetAddr& addr, const CNetAddr *paddrPeer)\n+{\n+    if (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n+        return false;\n \n+    int nBestCount = -1;\n+    int nBestReachability = -1;\n+    {\n+        LOCK(cs_mapLocalHost);\n+        for (map<CNetAddr, int>::iterator it = mapLocalHost.begin(); it != mapLocalHost.end(); it++)\n+        {\n+            int nCount = (*it).second;\n+            int nReachability = (*it).first.GetReachabilityFrom(paddrPeer);\n+            if (nReachability > nBestReachability || (nReachability == nBestReachability && nCount > nBestCount))\n+            {\n+                addr = (*it).first;\n+                nBestReachability = nReachability;\n+                nBestCount = nCount;\n+            }\n+        }\n+    }\n+    return nBestCount >= 0;\n+}\n+\n+// get best local address for a particular peer as a CAddress\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n+{\n+    CAddress ret(CService(\"0.0.0.0\",0),0);\n+    CNetAddr addr;\n+    if (GetLocal(addr, paddrPeer))\n+    {\n+        ret.SetIP(addr);\n+        ret.SetPort(GetListenPort());\n+        ret.nServices = nLocalServices;\n+        ret.nTime = GetAdjustedTime();\n+    }\n+    return ret;\n+}\n \n bool RecvLine(SOCKET hSocket, string& strLine)\n {\n@@ -138,6 +177,64 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n     }\n }\n \n+// used when scores of local addresses may have changed\n+// pushes better local address to peers\n+void static AdvertizeLocal()\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+    {\n+        if (pnode->fSuccessfullyConnected)\n+        {\n+            CAddress addrLocal = GetLocalAddress(&pnode->addr);\n+            if (addrLocal.IsRoutable() && (CNetAddr)addrLocal != (CNetAddr)pnode->addrLocal)\n+            {\n+                pnode->PushAddress(addrLocal);\n+                pnode->addrLocal = addrLocal;\n+            }\n+        }\n+    }\n+}\n+\n+// learn a new local address\n+bool AddLocal(const CNetAddr& addr, int nScore)\n+{\n+    if (!addr.IsRoutable())\n+        return false;\n+\n+    printf(\"AddLocal(%s,%i)\\n\", addr.ToString().c_str(), nScore);\n+\n+    {\n+        LOCK(cs_mapLocalHost);\n+        mapLocalHost[addr] = std::max(nScore, mapLocalHost[addr]) + (mapLocalHost.count(addr) ? 1 : 0);\n+    }\n+\n+    AdvertizeLocal();\n+\n+    return true;\n+}\n+\n+// vote for a local address\n+bool SeenLocal(const CNetAddr& addr)\n+{\n+    {\n+        LOCK(cs_mapLocalHost);\n+        if (mapLocalHost.count(addr) == 0)\n+            return false;\n+        mapLocalHost[addr]++;\n+    }\n+\n+    AdvertizeLocal();\n+\n+    return true;\n+}\n+\n+// check whether a given address is potentially local\n+bool IsLocal(const CNetAddr& addr)\n+{\n+    LOCK(cs_mapLocalHost);\n+    return mapLocalHost.count(addr) > 0;\n+}\n \n \n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n@@ -251,33 +348,11 @@ bool GetMyExternalIP(CNetAddr& ipRet)\n \n void ThreadGetMyExternalIP(void* parg)\n {\n-    // Wait for IRC to get it first\n-    if (GetBoolArg(\"-irc\", false))\n-    {\n-        for (int i = 0; i < 2 * 60; i++)\n-        {\n-            Sleep(1000);\n-            if (fGotExternalIP || fShutdown)\n-                return;\n-        }\n-    }\n-\n-    // Fallback in case IRC fails to get it\n+    CNetAddr addrLocalHost;\n     if (GetMyExternalIP(addrLocalHost))\n     {\n         printf(\"GetMyExternalIP() returned %s\\n\", addrLocalHost.ToStringIP().c_str());\n-        if (addrLocalHost.IsRoutable())\n-        {\n-            // If we already connected to a few before we had our IP, go back and addr them.\n-            // setAddrKnown automatically filters any duplicate sends.\n-            CAddress addr(addrLocalHost);\n-            addr.nTime = GetAdjustedTime();\n-            {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                    pnode->PushAddress(addr);\n-            }\n-        }\n+        AddLocal(addrLocalHost, LOCAL_HTTP);\n     }\n }\n \n@@ -320,7 +395,7 @@ CNode* FindNode(const CService& addr)\n \n CNode* ConnectNode(CAddress addrConnect, int64 nTimeout)\n {\n-    if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost)\n+    if (IsLocal(addrConnect))\n         return NULL;\n \n     // Look for an existing connection\n@@ -406,7 +481,7 @@ void CNode::PushVersion()\n     /// when NTP implemented, change to just nTime = GetAdjustedTime()\n     int64 nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (fUseProxy ? CAddress(CService(\"0.0.0.0\",0)) : addr);\n-    CAddress addrMe = (fUseProxy || !addrLocalHost.IsRoutable() ? CAddress(CService(\"0.0.0.0\",0)) : addrLocalHost);\n+    CAddress addrMe = GetLocalAddress(&addr);\n     RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n                 nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight);\n@@ -878,24 +953,19 @@ void ThreadMapPort2(void* parg)\n     r = UPNP_GetValidIGD(devlist, &urls, &data, lanaddr, sizeof(lanaddr));\n     if (r == 1)\n     {\n-        if (!addrLocalHost.IsRoutable())\n+        char externalIPAddress[40];\n+        r = UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIPAddress);\n+        if(r != UPNPCOMMAND_SUCCESS)\n+            printf(\"UPnP: GetExternalIPAddress() returned %d\\n\", r);\n+        else\n         {\n-            char externalIPAddress[40];\n-            r = UPNP_GetExternalIPAddress(urls.controlURL, data.first.servicetype, externalIPAddress);\n-            if(r != UPNPCOMMAND_SUCCESS)\n-                printf(\"UPnP: GetExternalIPAddress() returned %d\\n\", r);\n-            else\n+            if(externalIPAddress[0])\n             {\n-                if(externalIPAddress[0])\n-                {\n-                    printf(\"UPnP: ExternalIPAddress = %s\\n\", externalIPAddress);\n-                    CAddress addrExternalFromUPnP(CService(externalIPAddress, 0), nLocalServices);\n-                    if (addrExternalFromUPnP.IsRoutable())\n-                        addrLocalHost = addrExternalFromUPnP;\n-                }\n-                else\n-                    printf(\"UPnP: GetExternalIPAddress failed.\\n\");\n+                printf(\"UPnP: ExternalIPAddress = %s\\n\", externalIPAddress);\n+                AddLocal(CNetAddr(externalIPAddress), LOCAL_UPNP);\n             }\n+            else\n+                printf(\"UPnP: GetExternalIPAddress failed.\\n\");\n         }\n \n         string strDesc = \"Bitcoin \" + FormatFullVersion();\n@@ -1280,7 +1350,7 @@ void ThreadOpenConnections2(void* parg)\n             CAddress addr = addrman.Select(10 + min(nOutbound,8)*10);\n \n             // if we selected an invalid address, restart\n-            if (!addr.IsIPv4() || !addr.IsValid() || setConnected.count(addr.GetGroup()) || addr == addrLocalHost)\n+            if (!addr.IsIPv4() || !addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n                 break;\n \n             nTries++;\n@@ -1383,7 +1453,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect)\n     //\n     if (fShutdown)\n         return false;\n-    if ((CNetAddr)addrConnect == (CNetAddr)addrLocalHost || !addrConnect.IsIPv4() ||\n+    if (IsLocal(addrConnect) || !addrConnect.IsIPv4() ||\n         FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect))\n         return false;\n \n@@ -1492,7 +1562,6 @@ bool BindListenPort(string& strError)\n {\n     strError = \"\";\n     int nOne = 1;\n-    addrLocalHost.SetPort(GetListenPort());\n \n #ifdef WIN32\n     // Initialize Windows Sockets\n@@ -1589,11 +1658,7 @@ void StartNode(void* parg)\n         vector<CNetAddr> vaddr;\n         if (LookupHost(pszHostName, vaddr))\n             BOOST_FOREACH (const CNetAddr &addr, vaddr)\n-                if (!addr.IsLocal())\n-                {\n-                    addrLocalHost.SetIP(addr);\n-                    break;\n-                }\n+               AddLocal(addr, LOCAL_IF);\n     }\n #else\n     // Get local host ip\n@@ -1614,32 +1679,26 @@ void StartNode(void* parg)\n                     printf(\"ipv4 %s: %s\\n\", ifa->ifa_name, pszIP);\n \n                 // Take the first IP that isn't loopback 127.x.x.x\n-                CAddress addr(CService(s4->sin_addr, GetListenPort()), nLocalServices);\n-                if (addr.IsValid() && !addr.IsLocal())\n-                {\n-                    addrLocalHost = addr;\n-                    break;\n-                }\n+                CNetAddr addr(s4->sin_addr);\n+                AddLocal(addr, LOCAL_IF);\n             }\n             else if (ifa->ifa_addr->sa_family == AF_INET6)\n             {\n                 struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);\n                 if (inet_ntop(ifa->ifa_addr->sa_family, (void*)&(s6->sin6_addr), pszIP, sizeof(pszIP)) != NULL)\n                     printf(\"ipv6 %s: %s\\n\", ifa->ifa_name, pszIP);\n+\n+#ifdef USE_IPV6\n+                CNetAddr addr(s6->sin6_addr);\n+                AddLocal(addr, LOCAL_IF);\n+#endif\n             }\n         }\n         freeifaddrs(myaddrs);\n     }\n #endif\n-    printf(\"addrLocalHost = %s\\n\", addrLocalHost.ToString().c_str());\n \n-    if (fUseProxy || mapArgs.count(\"-connect\") || fNoListen)\n-    {\n-        // Proxies can't take incoming connections\n-        addrLocalHost.SetIP(CNetAddr(\"0.0.0.0\"));\n-        printf(\"addrLocalHost = %s\\n\", addrLocalHost.ToString().c_str());\n-    }\n-    else\n+    if (!fUseProxy && !mapArgs.count(\"-connect\") && !fNoListen)\n     {\n         CreateThread(ThreadGetMyExternalIP, NULL);\n     }"
      },
      {
        "sha": "d2aaa5fff048d9330c67cae4b40dd08187956b97",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -41,6 +41,21 @@ bool BindListenPort(std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n bool StopNode();\n \n+enum\n+{\n+    LOCAL_NONE,\n+    LOCAL_IF,\n+    LOCAL_UPNP,\n+    LOCAL_IRC,\n+    LOCAL_HTTP,\n+};\n+\n+bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n+bool SeenLocal(const CNetAddr& addr);\n+bool IsLocal(const CNetAddr& addr);\n+bool GetLocal(CNetAddr &addr, const CNetAddr *paddrPeer = NULL);\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n+\n enum\n {\n     MSG_TX = 1,\n@@ -85,7 +100,6 @@ enum threadId\n extern bool fClient;\n extern bool fAllowDNS;\n extern uint64 nLocalServices;\n-extern CAddress addrLocalHost;\n extern uint64 nLocalHostNonce;\n extern boost::array<int, THREAD_MAX> vnThreadsRunning;\n extern CAddrMan addrman;\n@@ -120,6 +134,7 @@ class CNode\n     unsigned int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n+    CNetAddr addrLocal;\n     int nVersion;\n     std::string strSubVer;\n     bool fClient;"
      },
      {
        "sha": "18d18e9a34841db59843f8babc6c544f99f0da04",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -590,6 +590,29 @@ void CNetAddr::print() const\n     printf(\"CNetAddr(%s)\\n\", ToString().c_str());\n }\n \n+// for IPv6 partners:        for unknown/Teredo partners:      for IPv4 partners:\n+// 0 - unroutable            // 0 - unroutable                 // 0 - unroutable\n+// 1 - teredo                // 1 - teredo                     // 1 - ipv4\n+// 2 - tunneled ipv6         // 2 - tunneled ipv6\n+// 3 - ipv4                  // 3 - ipv6\n+// 4 - ipv6                  // 4 - ipv4\n+int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n+{\n+    if (!IsValid() || !IsRoutable())\n+        return 0;\n+    if (paddrPartner && paddrPartner->IsIPv4())\n+        return IsIPv4() ? 1 : 0;\n+    if (IsRFC4380())\n+        return 1;\n+    if (IsRFC3964() || IsRFC6052())\n+        return 2;\n+    bool fRealIPv6 = paddrPartner && !paddrPartner->IsRFC4380() && paddrPartner->IsValid() && paddrPartner->IsRoutable();\n+    if (fRealIPv6)\n+        return IsIPv4() ? 3 : 4;\n+    else\n+        return IsIPv4() ? 4 : 3;\n+}\n+\n void CService::Init()\n {\n     port = 0;"
      },
      {
        "sha": "0c48c3bc00b3cf5089dcdb6f8a9fda9ab3604f82",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d523095be9cf542d701cbcb99ecd7e2c0c459e6/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "patch": "@@ -72,6 +72,7 @@ class CNetAddr\n         int64 GetHash() const;\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n         std::vector<unsigned char> GetGroup() const;\n+        int GetReachabilityFrom(const CNetAddr *paddrPartner = NULL) const;\n         void print() const;\n \n #ifdef USE_IPV6"
      }
    ]
  },
  {
    "sha": "82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmE2OThiZWQ2ZWY1YjQ5ZGZiZTc0YzE0ZGE2ZTJiNTY1YWFhNzEw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-02-19T19:44:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-04-10T13:47:09Z"
      },
      "message": "Added -externalip",
      "tree": {
        "sha": "91a386c07c55d1c84099af0607698cbdbd8fbb69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a386c07c55d1c84099af0607698cbdbd8fbb69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82a698bed6ef5b49dfbe74c14da6e2b565aaa710/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d523095be9cf542d701cbcb99ecd7e2c0c459e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d523095be9cf542d701cbcb99ecd7e2c0c459e6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f15f5737056cc6ade1cf94d1dd7658b090ee4ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a698bed6ef5b49dfbe74c14da6e2b565aaa710/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a698bed6ef5b49dfbe74c14da6e2b565aaa710/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
        "patch": "@@ -182,6 +182,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\" +\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\") + \"\\n\" +\n+            \"  -externalip=<ip> \\t  \"   + _(\"Specify your own public address\") + \"\\n\" +\n             \"  -irc             \\t  \"   + _(\"Find peers using internet relay chat (default: 0)\") + \"\\n\" +\n             \"  -listen          \\t  \"   + _(\"Accept connections from outside (default: 1)\") + \"\\n\" +\n #ifdef QT_GUI\n@@ -534,6 +535,12 @@ bool AppInit2(int argc, char* argv[])\n         }\n     }\n \n+    if (mapArgs.count(\"-externalip\"))\n+    {\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-externalip\"])\n+            AddLocal(CNetAddr(strAddr, fAllowDNS), LOCAL_MANUAL);\n+    }\n+\n     if (mapArgs.count(\"-addnode\"))\n     {\n         BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])"
      },
      {
        "sha": "c46883a254785be9ae3f3822c62becf53dd10a2f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82a698bed6ef5b49dfbe74c14da6e2b565aaa710/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82a698bed6ef5b49dfbe74c14da6e2b565aaa710/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=82a698bed6ef5b49dfbe74c14da6e2b565aaa710",
        "patch": "@@ -48,6 +48,9 @@ enum\n     LOCAL_UPNP,\n     LOCAL_IRC,\n     LOCAL_HTTP,\n+    LOCAL_MANUAL,\n+\n+    LOCAL_MAX\n };\n \n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);"
      }
    ]
  }
]