[
  {
    "sha": "723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNhYTFiODc1MmMxZDZjNmMwYTc2MDU5YzUzMmViZTJmNDA2ZmMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T09:50:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T07:34:53Z"
      },
      "message": "qt: Backup former GUI settings on `-resetguisettings`\n\nWrites the GUI settings to `guisettings.bak` in the data directory\nbefore wiping them. This can be used to retroactively troubleshoot\nissues (e.g. #11262) where `-resetguisettings` solves the problem.",
      "tree": {
        "sha": "c76db380e10b0936c8386456dc38c0178fea4e2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c76db380e10b0936c8386456dc38c0178fea4e2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09627b1dd41d1151a709d5ead82a924bf59e3d38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09627b1dd41d1151a709d5ead82a924bf59e3d38"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d603445fbfcd7d75a8541f0c7f41c6ee289840e",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "patch": "@@ -15,6 +15,7 @@\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "feb00a33b0a91c8be9dd260b3b2d41bc0269e402",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723aa1b8752c1d6c6c0a76059c532ebe2f406fc1/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
        "patch": "@@ -151,10 +151,32 @@ void OptionsModel::Init(bool resetSettings)\n     language = settings.value(\"language\").toString();\n }\n \n+/** Helper function to copy contents from one QSettings to another.\n+ * By using allKeys this also covers nested settings in a hierarchy.\n+ */\n+static void CopySettings(QSettings& dst, const QSettings& src)\n+{\n+    for (const QString& key : src.allKeys()) {\n+        dst.setValue(key, src.value(key));\n+    }\n+}\n+\n+/** Back up a QSettings to an ini-formatted file. */\n+static void BackupSettings(const fs::path& filename, const QSettings& src)\n+{\n+    qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n+    QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);\n+    dst.clear();\n+    CopySettings(dst, src);\n+}\n+\n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n+    // Backup old settings to chain-specific datadir for troubleshooting\n+    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+\n     // Save the strDataDir setting\n     QString dataDir = Intro::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();"
      }
    ]
  }
]