[
  {
    "sha": "13f608582c1d941ad71cae49a79084f346da0938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2Y2MDg1ODJjMWQ5NDFhZDcxY2FlNDlhNzkwODRmMzQ2ZGEwOTM4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:51:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:51:53Z"
      },
      "message": "netbase: Make InterruptibleRecv return an error code instead of bool",
      "tree": {
        "sha": "6636268954a92b9cc39a911ee21d15832b4e3129",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6636268954a92b9cc39a911ee21d15832b4e3129"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13f608582c1d941ad71cae49a79084f346da0938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13f608582c1d941ad71cae49a79084f346da0938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f9d3ae6da48325b0a37ad7fd1abe263a0f2c9a"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 27,
      "deletions": 18
    },
    "files": [
      {
        "sha": "414456a16c8f9f5d828c7e802472b565413dd256",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 18,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13f608582c1d941ad71cae49a79084f346da0938/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13f608582c1d941ad71cae49a79084f346da0938/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=13f608582c1d941ad71cae49a79084f346da0938",
        "patch": "@@ -198,6 +198,14 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+enum class IntrRecvError {\n+    OK,\n+    Timeout,\n+    Disconnected,\n+    NetworkError,\n+    Interrupted\n+};\n+\n /**\n  * Read bytes from socket. This will either read the full number of bytes requested\n  * or return False on error or timeout.\n@@ -209,7 +217,7 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n@@ -222,30 +230,30 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n             len -= ret;\n             data += ret;\n         } else if (ret == 0) { // Unexpected disconnection\n-            return false;\n+            return IntrRecvError::Disconnected;\n         } else { // Other error or blocking\n             int nErr = WSAGetLastError();\n             if (nErr == WSAEINPROGRESS || nErr == WSAEWOULDBLOCK || nErr == WSAEINVAL) {\n                 if (!IsSelectableSocket(hSocket)) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n                 struct timeval tval = MillisToTimeval(std::min(endTime - curTime, maxWait));\n                 fd_set fdset;\n                 FD_ZERO(&fdset);\n                 FD_SET(hSocket, &fdset);\n                 int nRet = select(hSocket + 1, &fdset, NULL, NULL, &tval);\n                 if (nRet == SOCKET_ERROR) {\n-                    return false;\n+                    return IntrRecvError::NetworkError;\n                 }\n             } else {\n-                return false;\n+                return IntrRecvError::NetworkError;\n             }\n         }\n         if (interruptSocks5Recv)\n-            return false;\n+            return IntrRecvError::Interrupted;\n         curTime = GetTimeMillis();\n     }\n-    return len == 0;\n+    return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n struct ProxyCredentials\n@@ -272,6 +280,7 @@ std::string Socks5ErrorString(int err)\n /** Connect using SOCKS5 (as described in RFC1928) */\n static bool Socks5(const std::string& strDest, int port, const ProxyCredentials *auth, SOCKET& hSocket)\n {\n+    IntrRecvError recvr;\n     LogPrint(\"net\", \"SOCKS5 connecting %s\\n\", strDest);\n     if (strDest.size() > 255) {\n         CloseSocket(hSocket);\n@@ -294,7 +303,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet1[2];\n-    if (!InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n@@ -320,7 +329,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         }\n         LogPrint(\"proxy\", \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n         char pchRetA[2];\n-        if (!InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+        if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n         }\n@@ -349,9 +358,9 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         return error(\"Error sending to proxy\");\n     }\n     char pchRet2[4];\n-    if (!InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n-        return error(\"Error reading proxy response\");\n+        return error(\"Error while reading proxy response\");\n     }\n     if (pchRet2[0] != 0x05) {\n         CloseSocket(hSocket);\n@@ -370,26 +379,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: ret = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: ret = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n         case 0x03:\n         {\n-            ret = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n-            if (!ret) {\n+            recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n+            if (recvr != IntrRecvError::OK) {\n                 CloseSocket(hSocket);\n                 return error(\"Error reading from proxy\");\n             }\n             int nRecv = pchRet3[0];\n-            ret = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n+            recvr = InterruptibleRecv(pchRet3, nRecv, SOCKS5_RECV_TIMEOUT, hSocket);\n             break;\n         }\n         default: CloseSocket(hSocket); return error(\"Error: malformed proxy response\");\n     }\n-    if (!ret) {\n+    if (recvr != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }\n-    if (!InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) {\n+    if ((recvr = InterruptibleRecv(pchRet3, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         return error(\"Error reading from proxy\");\n     }"
      }
    ]
  },
  {
    "sha": "3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGRmZTI5ODM3NWMyNDg0YWMyODFkOGE2ZDczMWFkODYxNmYzNTQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:52:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-09T07:53:22Z"
      },
      "message": "netbase: Do not print an error on connection timeouts through proxy\n\nIf a timeout happens while reading the proxy response, this effectively\nmeans we timed out while connecting to the remote node. This is very\ncommon for Tor, so do not print an error message.",
      "tree": {
        "sha": "dcd28f2fc4e5481effaf87d771dc84e2cdc88f27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcd28f2fc4e5481effaf87d771dc84e2cdc88f27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ddfe298375c2484ac281d8a6d731ad8616f3542",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ddfe298375c2484ac281d8a6d731ad8616f3542/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13f608582c1d941ad71cae49a79084f346da0938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13f608582c1d941ad71cae49a79084f346da0938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13f608582c1d941ad71cae49a79084f346da0938"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fc9a6ed0be8e3f8bcece8c50d369a00c49785562",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ddfe298375c2484ac281d8a6d731ad8616f3542/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ddfe298375c2484ac281d8a6d731ad8616f3542/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=3ddfe298375c2484ac281d8a6d731ad8616f3542",
        "patch": "@@ -360,7 +360,14 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     char pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n-        return error(\"Error while reading proxy response\");\n+        if (recvr == IntrRecvError::Timeout) {\n+            /* If a timeout happens here, this effectively means we timed out while connecting\n+             * to the remote node. This is very common for Tor, so do not print an\n+             * error message. */\n+            return false;\n+        } else {\n+            return error(\"Error while reading proxy response\");\n+        }\n     }\n     if (pchRet2[0] != 0x05) {\n         CloseSocket(hSocket);"
      }
    ]
  }
]