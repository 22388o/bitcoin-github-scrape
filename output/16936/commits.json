[
  {
    "sha": "78487ef8ae9d56d3285955c258c8fe0abf55b516",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODQ4N2VmOGFlOWQ1NmQzMjg1OTU1YzI1OGM4ZmUwYWJmNTViNTE2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-09-22T04:20:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-09-22T22:55:20Z"
      },
      "message": "Bugfix: QA: Fix service flag comparison check in rpc_net test",
      "tree": {
        "sha": "f5dd807b5f1652068c8e240cbc35c2bc94b24c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5dd807b5f1652068c8e240cbc35c2bc94b24c59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78487ef8ae9d56d3285955c258c8fe0abf55b516",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78487ef8ae9d56d3285955c258c8fe0abf55b516",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78487ef8ae9d56d3285955c258c8fe0abf55b516",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78487ef8ae9d56d3285955c258c8fe0abf55b516/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13377b7a695c2fc774946cfd6a9aa01dd338e13c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13377b7a695c2fc774946cfd6a9aa01dd338e13c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13377b7a695c2fc774946cfd6a9aa01dd338e13c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b2017bc18ebe99a9012cefc25206b95ae6baefae",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78487ef8ae9d56d3285955c258c8fe0abf55b516/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78487ef8ae9d56d3285955c258c8fe0abf55b516/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=78487ef8ae9d56d3285955c258c8fe0abf55b516",
        "patch": "@@ -20,13 +20,12 @@\n     wait_until,\n )\n from test_framework.mininode import P2PInterface\n+import test_framework.messages\n from test_framework.messages import (\n     CAddress,\n     msg_addr,\n     NODE_NETWORK,\n     NODE_WITNESS,\n-    NODE_GETUTXO,NODE_BLOOM,\n-    NODE_NETWORK_LIMITED,\n )\n \n def assert_net_servicesnames(servicesflag, servicenames):\n@@ -36,16 +35,10 @@ def assert_net_servicesnames(servicesflag, servicenames):\n     :param servicesflag: The services as an integer.\n     :param servicesnames: The list of decoded services names, as strings.\n     \"\"\"\n-    if servicesflag & NODE_NETWORK:\n-        assert \"NETWORK\" in servicenames\n-    if servicesflag & NODE_GETUTXO:\n-        assert \"GETUTXO\" in servicenames\n-    if servicesflag & NODE_BLOOM:\n-        assert \"BLOOM\" in servicenames\n-    if servicesflag & NODE_WITNESS:\n-        assert \"WITNESS\" in servicenames\n-    if servicesflag & NODE_NETWORK_LIMITED:\n-        assert \"NETWORK_LIMITED\" in servicenames\n+    servicesflag_generated = 0\n+    for servicename in servicenames:\n+        servicesflag_generated |= getattr(test_framework.messages, 'NODE_' + servicename)\n+    assert servicesflag_generated == servicesflag\n \n class NetTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -119,7 +112,7 @@ def _test_getnetworkinfo(self):\n         # check the `servicesnames` field\n         network_info = [node.getnetworkinfo() for node in self.nodes]\n         for info in network_info:\n-            assert_net_servicesnames(int(info[\"localservices\"]), info[\"localservicesnames\"])\n+            assert_net_servicesnames(int(info[\"localservices\"], 0x10), info[\"localservicesnames\"])\n \n     def _test_getaddednodeinfo(self):\n         assert_equal(self.nodes[0].getaddednodeinfo(), [])\n@@ -143,7 +136,7 @@ def _test_getpeerinfo(self):\n         assert_equal(peer_info[1][0]['minfeefilter'], Decimal(\"0.00001000\"))\n         # check the `servicesnames` field\n         for info in peer_info:\n-            assert_net_servicesnames(int(info[0][\"services\"]), info[0][\"servicesnames\"])\n+            assert_net_servicesnames(int(info[0][\"services\"], 0x10), info[0][\"servicesnames\"])\n \n     def _test_getnodeaddresses(self):\n         self.nodes[0].add_p2p_connection(P2PInterface())"
      },
      {
        "sha": "343442ba8a793e10ff65ea6339af19a8c974b6a7",
        "filename": "test/lint/lint-python-dead-code-whitelist",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78487ef8ae9d56d3285955c258c8fe0abf55b516/test/lint/lint-python-dead-code-whitelist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78487ef8ae9d56d3285955c258c8fe0abf55b516/test/lint/lint-python-dead-code-whitelist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code-whitelist?ref=78487ef8ae9d56d3285955c258c8fe0abf55b516",
        "patch": "@@ -12,6 +12,8 @@ InvalidOPIFConstruction  # unused class (test/functional/data/invalid_txs.py)\n _.is_compressed  # unused property (test/functional/test_framework/key.py)\n legacy  # unused variable (test/functional/test_framework/address.py)\n msg_generic  # unused class (test/functional/test_framework/messages.py)\n+NODE_BLOOM  # actually used (test/functional/test_framework/messages.py)\n+NODE_GETUTXO  # actually used (test/functional/test_framework/messages.py)\n NonexistentInput  # unused class (test/functional/data/invalid_txs.py)\n on_addr  # unused function (test/functional/test_framework/mininode.py)\n on_blocktxn  # unused function (test/functional/test_framework/mininode.py)"
      }
    ]
  }
]