[
  {
    "sha": "7905ea0f169ed5b5cb3cee798868fc8e4c617484",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTA1ZWEwZjE2OWVkNWI1Y2IzY2VlNzk4ODY4ZmM4ZTRjNjE3NDg0",
    "commit": {
      "author": {
        "name": "251",
        "email": "13120787+l2a5b1@users.noreply.github.com",
        "date": "2019-08-21T16:56:39Z"
      },
      "committer": {
        "name": "251",
        "email": "13120787+l2a5b1@users.noreply.github.com",
        "date": "2019-08-21T16:56:39Z"
      },
      "message": "Drops boost/algorithm/string/split.hpp\n\nThis commit drops the `boost/algorithm/string/split.hpp` dependency from\nthe project.\n\nIt replaces `boost::split` with a custom function `Split` that has\nan identical API and returns exactly the same results as `boost::split`\nto ease refactoring.\n\nIn addition this commit refactors an instance of `boost::algorithm::trim_right`\nwhich was implicitly made available via the `boost/algorithm/string.hpp`\ndependency to prevent having to introduce a new dependency\n`boost/algorithm/string/trim.hpp`.",
      "tree": {
        "sha": "f11f1e60fc86617df0eaad20fcbca98322b1f5e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f11f1e60fc86617df0eaad20fcbca98322b1f5e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7905ea0f169ed5b5cb3cee798868fc8e4c617484",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7905ea0f169ed5b5cb3cee798868fc8e4c617484",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7905ea0f169ed5b5cb3cee798868fc8e4c617484",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7905ea0f169ed5b5cb3cee798868fc8e4c617484/comments",
    "author": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "l2a5b1",
      "id": 13120787,
      "node_id": "MDQ6VXNlcjEzMTIwNzg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/13120787?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/l2a5b1",
      "html_url": "https://github.com/l2a5b1",
      "followers_url": "https://api.github.com/users/l2a5b1/followers",
      "following_url": "https://api.github.com/users/l2a5b1/following{/other_user}",
      "gists_url": "https://api.github.com/users/l2a5b1/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/l2a5b1/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/l2a5b1/subscriptions",
      "organizations_url": "https://api.github.com/users/l2a5b1/orgs",
      "repos_url": "https://api.github.com/users/l2a5b1/repos",
      "events_url": "https://api.github.com/users/l2a5b1/events{/privacy}",
      "received_events_url": "https://api.github.com/users/l2a5b1/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70b12af87eb036623f5dd1f3a519efe6c156570d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70b12af87eb036623f5dd1f3a519efe6c156570d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70b12af87eb036623f5dd1f3a519efe6c156570d"
      }
    ],
    "stats": {
      "total": 318,
      "additions": 284,
      "deletions": 34
    },
    "files": [
      {
        "sha": "d9a2bb357bf529c2b0d35ebe7489e2a49553d91a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -212,6 +212,7 @@ BITCOIN_CORE_H = \\\n   util/moneystr.h \\\n   util/rbf.h \\\n   util/threadnames.h \\\n+  util/splitstring.h \\\n   util/time.h \\\n   util/translation.h \\\n   util/url.h \\\n@@ -298,6 +299,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   ui_interface.cpp \\\n+  util/splitstring.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n@@ -468,6 +470,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n+  util/splitstring.cpp \\\n   versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n@@ -500,6 +503,7 @@ libbitcoin_util_a_SOURCES = \\\n   util/moneystr.cpp \\\n   util/rbf.cpp \\\n   util/threadnames.cpp \\\n+  util/splitstring.cpp \\\n   util/strencodings.cpp \\\n   util/time.cpp \\\n   util/url.cpp \\"
      },
      {
        "sha": "b99e65890950a52303ba9176b8df6064f852b4dc",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -147,6 +147,7 @@ BITCOIN_TESTS =\\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n+  test/utilsplitstring_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n   test/versionbits_tests.cpp"
      },
      {
        "sha": "bfca5cb747f44d1e0ad6de1b88d125484c0381af",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -20,6 +20,7 @@\n #include <univalue.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -28,8 +29,6 @@\n #include <memory>\n #include <stdio.h>\n \n-#include <boost/algorithm/string.hpp>\n-\n static bool fCreateBlank;\n static std::map<std::string,UniValue> registers;\n static const int CONTINUE_EXECUTION=-1;\n@@ -233,7 +232,7 @@ static void MutateTxRBFOptIn(CMutableTransaction& tx, const std::string& strInId\n static void MutateTxAddInput(CMutableTransaction& tx, const std::string& strInput)\n {\n     std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    Split(vStrInputParts, strInput, IsAnyOf(\":\"));\n \n     // separate TXID:VOUT in string\n     if (vStrInputParts.size()<2)\n@@ -268,7 +267,7 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const std::string& strIn\n {\n     // Separate into VALUE:ADDRESS\n     std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    Split(vStrInputParts, strInput, IsAnyOf(\":\"));\n \n     if (vStrInputParts.size() != 2)\n         throw std::runtime_error(\"TX output missing or too many separators\");\n@@ -293,7 +292,7 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n {\n     // Separate into VALUE:PUBKEY[:FLAGS]\n     std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    Split(vStrInputParts, strInput, IsAnyOf(\":\"));\n \n     if (vStrInputParts.size() < 2 || vStrInputParts.size() > 3)\n         throw std::runtime_error(\"TX output missing or too many separators\");\n@@ -337,7 +336,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n {\n     // Separate into VALUE:REQUIRED:NUMKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]\n     std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    Split(vStrInputParts, strInput, IsAnyOf(\":\"));\n \n     // Check that there are enough parameters\n     if (vStrInputParts.size()<3)\n@@ -438,7 +437,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const std::string& str\n {\n     // separate VALUE:SCRIPT[:FLAGS]\n     std::vector<std::string> vStrInputParts;\n-    boost::split(vStrInputParts, strInput, boost::is_any_of(\":\"));\n+    Split(vStrInputParts, strInput, IsAnyOf(\":\"));\n     if (vStrInputParts.size() < 2)\n         throw std::runtime_error(\"TX output missing separator\");\n \n@@ -767,7 +766,7 @@ static std::string readStdin()\n     if (ferror(stdin))\n         throw std::runtime_error(\"error reading stdin\");\n \n-    boost::algorithm::trim_right(ret);\n+    ret.erase(ret.find_last_not_of(\" \\t\\n\\v\\f\\r\") + 1);\n \n     return ret;\n }"
      },
      {
        "sha": "1406fdcdd2a4e8a3569eaed7369f99871328191f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -9,14 +9,12 @@\n #include <consensus/merkle.h>\n #include <tinyformat.h>\n #include <util/system.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <versionbitsinfo.h>\n \n #include <assert.h>\n \n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n-\n static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)\n {\n     CMutableTransaction txNew;\n@@ -350,7 +348,7 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n \n     for (const std::string& strDeployment : args.GetArgs(\"-vbparams\")) {\n         std::vector<std::string> vDeploymentParams;\n-        boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n+        Split(vDeploymentParams, strDeployment, IsAnyOf(\":\"));\n         if (vDeploymentParams.size() != 3) {\n             throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n         }"
      },
      {
        "sha": "d391472f9d8550d718f74e0d89e1e9a5cc9ea1a9",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -11,12 +11,12 @@\n #include <serialize.h>\n #include <streams.h>\n #include <univalue.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <version.h>\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n \n #include <algorithm>\n \n@@ -46,13 +46,13 @@ CScript ParseScript(const std::string& s)\n     }\n \n     std::vector<std::string> words;\n-    boost::algorithm::split(words, s, boost::algorithm::is_any_of(\" \\t\\n\"), boost::algorithm::token_compress_on);\n+    Split(words, s, IsAnyOf(\" \\t\\n\"), true);\n \n     for (std::vector<std::string>::const_iterator w = words.begin(); w != words.end(); ++w)\n     {\n         if (w->empty())\n         {\n-            // Empty string, ignore. (boost::split given '' will return one word)\n+            // Empty string, ignore. (Split given '' will return one word)\n         }\n         else if (std::all_of(w->begin(), w->end(), ::IsDigit) ||\n             (w->front() == '-' && w->size() > 1 && std::all_of(w->begin()+1, w->end(), ::IsDigit)))"
      },
      {
        "sha": "22360c14aebb38477a6275d2227ac5991eb1ef8f",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -12,6 +12,7 @@\n #include <rpc/server.h>\n #include <sync.h>\n #include <ui_interface.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n #include <util/translation.h>\n@@ -97,7 +98,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     for (const std::string& strRPCAuth : gArgs.GetArgs(\"-rpcauth\")) {\n         //Search for multi-user login/pass \"rpcauth\" from config\n         std::vector<std::string> vFields;\n-        boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+        Split(vFields, strRPCAuth, IsAnyOf(\":$\"));\n         if (vFields.size() != 3) {\n             //Incorrect formatting in config file\n             continue;"
      },
      {
        "sha": "2e646e9e1de1cc8afa7dbb68b929c13b1bc41358",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -47,6 +47,7 @@\n #include <txmempool.h>\n #include <ui_interface.h>\n #include <util/moneystr.h>\n+#include <util/splitstring.h>\n #include <util/system.h>\n #include <util/threadnames.h>\n #include <util/translation.h>\n@@ -67,7 +68,6 @@\n \n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n-#include <boost/algorithm/string/split.hpp>\n #include <boost/thread.hpp>\n \n #if ENABLE_ZMQ"
      },
      {
        "sha": "da0b48514b5ae8bc74a2936964b6d60d3e77783e",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -17,12 +17,11 @@\n #include <streams.h>\n #include <sync.h>\n #include <txmempool.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <validation.h>\n #include <version.h>\n \n-#include <boost/algorithm/string.hpp>\n-\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n@@ -123,7 +122,7 @@ static bool rest_headers(HTTPRequest* req,\n     std::string param;\n     const RetFormat rf = ParseDataFormat(param, strURIPart);\n     std::vector<std::string> path;\n-    boost::split(path, param, boost::is_any_of(\"/\"));\n+    Split(path, param, IsAnyOf(\"/\"));\n \n     if (path.size() != 2)\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n@@ -403,7 +402,7 @@ static bool rest_getutxos(HTTPRequest* req, const std::string& strURIPart)\n     if (param.length() > 1)\n     {\n         std::string strUriParams = param.substr(1);\n-        boost::split(uriParts, strUriParams, boost::is_any_of(\"/\"));\n+        Split(uriParts, strUriParams, IsAnyOf(\"/\"));\n     }\n \n     // throw exception in case of an empty request"
      },
      {
        "sha": "8421ba29e6b2f0bd145b97300050bde3310f6ea3",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -10,12 +10,12 @@\n #include <rpc/util.h>\n #include <shutdown.h>\n #include <sync.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <util/system.h>\n \n #include <boost/signals2/signal.hpp>\n #include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n \n #include <memory> // for unique_ptr\n #include <unordered_map>\n@@ -387,7 +387,7 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n     int hole = 0;\n     for (const std::string &argNamePattern: argNames) {\n         std::vector<std::string> vargNames;\n-        boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(\"|\"));\n+        Split(vargNames, argNamePattern, IsAnyOf(\"|\"));\n         auto fr = argsIn.end();\n         for (const std::string & argName : vargNames) {\n             fr = argsIn.find(argName);"
      },
      {
        "sha": "48397b5e89c63fb4d4bfb980ee0e39349a0aca3d",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -3,14 +3,14 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <util/strencodings.h>\n+#include <util/splitstring.h>\n #include <util/system.h>\n #include <test/setup_common.h>\n \n #include <string>\n #include <utility>\n #include <vector>\n \n-#include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n@@ -19,7 +19,7 @@ static void ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n     if (strArg.size())\n-      boost::split(vecArg, strArg, IsSpace, boost::token_compress_on);\n+      Split(vecArg, strArg, IsSpace, true);\n \n     // Insert dummy executable name:\n     vecArg.insert(vecArg.begin(), \"testbitcoin\");"
      },
      {
        "sha": "84dca21c2e20c9aee09fc09007c28c7c04b9a06a",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -10,9 +10,9 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <test/setup_common.h>\n+#include <util/splitstring.h>\n #include <util/time.h>\n \n-#include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -22,7 +22,7 @@\n UniValue CallRPC(std::string args)\n {\n     std::vector<std::string> vArgs;\n-    boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n+    Split(vArgs, args, IsAnyOf(\" \\t\"));\n     std::string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n     JSONRPCRequest request;"
      },
      {
        "sha": "859ff5313d974ced00845b028ee903c20801e970",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -21,13 +21,13 @@\n #include <script/script_error.h>\n #include <script/standard.h>\n #include <streams.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n \n #include <map>\n #include <string>\n \n #include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n \n #include <univalue.h>\n@@ -65,7 +65,7 @@ unsigned int ParseScriptFlags(std::string strFlags)\n     }\n     unsigned int flags = 0;\n     std::vector<std::string> words;\n-    boost::algorithm::split(words, strFlags, boost::algorithm::is_any_of(\",\"));\n+    Split(words, strFlags, IsAnyOf(\",\"));\n \n     for (const std::string& word : words)\n     {"
      },
      {
        "sha": "6af5498f1500fbed07d22975434cf561912d20dd",
        "filename": "src/test/utilsplitstring_tests.cpp",
        "status": "added",
        "additions": 165,
        "deletions": 0,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/utilsplitstring_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/test/utilsplitstring_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/utilsplitstring_tests.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -0,0 +1,165 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/splitstring.h>\n+#include <util/strencodings.h>\n+\n+#include <string>\n+#include <vector>\n+\n+#include <test/setup_common.h>\n+#include <boost/test/unit_test.hpp>\n+\n+//\n+// To validate the implementation of Split against `boost::split`:\n+//\n+// [1] Comment out `#include <util/splitstring.h>` above and use the includes below:\n+//\n+// #include <boost/algorithm/string/classification.hpp>\n+// #include <boost/algorithm/string/split.hpp>\n+//\n+// [2] Replace the Split implementation in `util/splitstring.h` with the implementation below:\n+//\n+// template<typename ContainerT>\n+// void Split(ContainerT& tokens, const std::string& str, const std::function<bool(char)>& predicate, bool merge_empty = false)\n+// {\n+//     boost::split(tokens, str, predicate, merge_empty ? boost::token_compress_on : boost::token_compress_off);\n+// }\n+//\n+// The unit tests should yield the same result.\n+//\n+\n+BOOST_FIXTURE_TEST_SUITE(utilsplitstring_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(urlsplitstring_test)\n+{\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"\", \"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,,\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"\", \"\", \"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,,\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"Satoshi,Nakamoto\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"Satoshi\", \"Nakamoto\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"Satoshi,Nakamoto\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"Satoshi\", \"Nakamoto\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,Satoshi,,,,,,Nakamoto,,\", IsAnyOf(\",\"));\n+        std::vector<std::string> expected = {\"\", \"\", \"Satoshi\", \"\", \"\", \"\", \"\", \"\", \"Nakamoto\", \"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \",,Satoshi,,,,,,Nakamoto,,\", IsAnyOf(\",\"), true);\n+        std::vector<std::string> expected = {\"\", \"Satoshi\", \"Nakamoto\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::set<std::string> result;\n+        Split(result, \"#reckless\", IsAnyOf(\"\"), false);\n+        BOOST_CHECK_EQUAL(result.count(\"#reckless\"), 1);\n+    }\n+\n+    {\n+        std::set<std::string> result;\n+        Split(result, \"#reckless\", IsAnyOf(\"\"), true);\n+        BOOST_CHECK_EQUAL(result.count(\"#reckless\"), 1);\n+    }\n+\n+    {\n+        std::set<std::string> result;\n+        Split(result, \"#reckless\", IsAnyOf(\",#$\"), false);\n+        BOOST_CHECK_EQUAL(result.count(\"\"), 1);\n+        BOOST_CHECK_EQUAL(result.count(\"reckless\"), 1);\n+    }\n+\n+    {\n+        std::set<std::string> result;\n+        Split(result, \"#reckless|hodl bitcoin \", IsAnyOf(\" |\"), true);\n+        BOOST_CHECK_EQUAL(result.count(\"#reckless\"), 1);\n+        BOOST_CHECK_EQUAL(result.count(\"hodl\"), 1);\n+        BOOST_CHECK_EQUAL(result.count(\"bitcoin\"), 1);\n+        BOOST_CHECK_EQUAL(result.count(\"\"), 1);\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"  Satoshi \\f\\n\\r\\t\\vNakamoto  \", IsSpace);\n+        std::vector<std::string> expected = {\"\", \"\", \"Satoshi\", \"\", \"\", \"\", \"\", \"\", \"Nakamoto\", \"\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+    {\n+        std::vector<std::string> result;\n+        Split(result, \"  Satoshi \\f\\n\\r\\t\\vNakamoto  \", IsSpace, true);\n+        std::vector<std::string> expected = {\"\", \"Satoshi\", \"Nakamoto\", \"\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(result.begin(), result.end(), expected.begin(), expected.end());\n+    }\n+\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "68f46929e414b2163601fb3313dedfd37914d81f",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <chainparams.h>\n #include <torcontrol.h>\n+#include <util/splitstring.h>\n #include <util/strencodings.h>\n #include <netbase.h>\n #include <net.h>\n@@ -17,7 +18,6 @@\n #include <stdlib.h>\n \n #include <boost/signals2/signal.hpp>\n-#include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n \n@@ -621,7 +621,7 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n                 std::map<std::string,std::string> m = ParseTorReplyMapping(l.second);\n                 std::map<std::string,std::string>::iterator i;\n                 if ((i = m.find(\"METHODS\")) != m.end())\n-                    boost::split(methods, i->second, boost::is_any_of(\",\"));\n+                    Split(methods, i->second, IsAnyOf(\",\"));\n                 if ((i = m.find(\"COOKIEFILE\")) != m.end())\n                     cookiefile = i->second;\n             } else if (l.first == \"VERSION\") {"
      },
      {
        "sha": "780572b7827eeb201ec45fcd79d39097e5ca99f6",
        "filename": "src/util/splitstring.cpp",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/util/splitstring.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/util/splitstring.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/splitstring.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <util/splitstring.h>\n+\n+std::function<bool(char)> IsAnyOf(const std::string& any_of_separator)\n+{\n+    auto predicate = [&](char c) {\n+        return (any_of_separator.find(c) != std::string::npos);\n+    };\n+\n+    return predicate;\n+}"
      },
      {
        "sha": "7f188d02ae4872c136aabea8d429f86559887500",
        "filename": "src/util/splitstring.h",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/util/splitstring.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/util/splitstring.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/splitstring.h?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <functional>\n+#include <iterator>\n+#include <set>\n+#include <string>\n+#include <vector>\n+#include <type_traits>\n+\n+#ifndef BITCOIN_UTIL_SPLITSTRING_H\n+#define BITCOIN_UTIL_SPLITSTRING_H\n+\n+/**\n+ * Returns a predicate function that tests if a character is in the `any_of_separator` string argument.\n+ * @param[in] any_of_string     A string with valid separators.\n+ */\n+std::function<bool(char)> IsAnyOf(const std::string& any_of_separator);\n+\n+/**\n+ * Tokenizes a string by any of the given separators.\n+ * @param[in] tokens            The container (either an instance of std::vector<std::string>\n+ *                              or std::set<std::string>) to add tokenized string parts to.\n+ * @param[in] str               The string to tokenize.\n+ * @param[in] predicate         A function predicate that identifies separators.\n+ * @param[in] merge_empty       Set to true to merge adjacent separators (empty tokens); otherwise false (default).\n+ */\n+template<typename ContainerT>\n+void Split(ContainerT& tokens, const std::string& str, const std::function<bool(char)>& predicate, bool merge_empty=false)\n+{\n+    static_assert(\n+        std::is_same<std::vector<std::string>, ContainerT>::value ||\n+        std::is_same<std::set<std::string>, ContainerT>::value,\n+        \"`Split` has only been tested with template arguments of type `std::vector<std::string>` and `std::set<std::string>`\");\n+\n+    auto insertIt = std::inserter(tokens, tokens.end());\n+    if (str.empty()) {\n+        *insertIt = \"\";\n+        return;\n+    }\n+\n+    const auto begin = str.cbegin();\n+    const auto end = str.cend();\n+\n+    for (auto it = begin; it < end; ++it) {\n+        bool foundSeparator{false};\n+        auto start = it;\n+\n+        for (; it < end; ++it) {\n+            foundSeparator = predicate(*it);\n+            if (foundSeparator) break;\n+        }\n+\n+        if (it != begin && (!merge_empty || start != it)) {\n+            *insertIt = std::string(start, it);\n+        }\n+\n+        if (foundSeparator) {\n+            if (it == begin) {\n+                *insertIt = \"\";\n+            }\n+            if (it == end - 1) {\n+                *insertIt = \"\";\n+            }\n+        }\n+    }\n+}\n+\n+#endif // BITCOIN_UTIL_SPLITSTRING_H"
      },
      {
        "sha": "535949e15bad79ee4f9c525658b416c963c376db",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -14,6 +14,7 @@\n #include <script/standard.h>\n #include <sync.h>\n #include <util/bip32.h>\n+#include <util/splitstring.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <util/translation.h>\n@@ -23,7 +24,6 @@\n #include <stdint.h>\n #include <tuple>\n \n-#include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n #include <univalue.h>\n@@ -595,7 +595,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 continue;\n \n             std::vector<std::string> vstr;\n-            boost::split(vstr, line, boost::is_any_of(\" \"));\n+            Split(vstr, line, IsAnyOf(\" \"));\n             if (vstr.size() < 2)\n                 continue;\n             CKey key = DecodeSecret(vstr[0]);"
      },
      {
        "sha": "30a221eb9d38d6b0086bdfb681ac19f47010806f",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7905ea0f169ed5b5cb3cee798868fc8e4c617484/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7905ea0f169ed5b5cb3cee798868fc8e4c617484/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=7905ea0f169ed5b5cb3cee798868fc8e4c617484",
        "patch": "@@ -49,7 +49,6 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/algorithm/string.hpp\n     boost/algorithm/string/classification.hpp\n     boost/algorithm/string/replace.hpp\n-    boost/algorithm/string/split.hpp\n     boost/chrono/chrono.hpp\n     boost/date_time/posix_time/posix_time.hpp\n     boost/filesystem.hpp"
      }
    ]
  }
]