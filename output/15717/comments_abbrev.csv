DrahtBot,2019-04-01T19:19:54Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15890](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15890.html) (Doc: remove text about txes always relayed ",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478710368,478710368,
dongcarl,2019-04-01T19:36:58Z,"@MishraShivendra I would love to review this, would you be able to do the following:\n1. Remove the copyright notices (we're licensed MIT)\n2. Break the changes up into smaller, more digestible commits?",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478716148,478716148,
MishraShivendra,2019-04-02T02:13:29Z,"@dongcarl\nThanks.\nSure. Let me close this pull request and do three separate commits for those bullet points.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478816157,478816157,
sipa,2019-04-02T02:20:13Z,No need to close the PR; you can overwrite it by force pushing.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478817460,478817460,
sipa,2019-04-02T08:09:09Z,"@practicalswift This is code copied from another project; unless we're going to submit improvements upstream, nits here are pointless.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478890599,478890599,
practicalswift,2019-04-02T08:16:16Z,@MishraShivendra Can you clarify which files/directories that are meant to be left as-is (with flaws reported upstream) and which files/directories that are not? :-),https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478892784,478892784,
sipa,2019-04-02T08:20:16Z,"@practicalswift It's literally in the PR description, and also obvious from the code (it's copyright someone else...)",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478894087,478894087,
practicalswift,2019-04-02T08:47:51Z,"@sipa The reason that I'm asking explicitly is that I noticed that some files added to this repo were not identical to the corresponding files in the repo that appears to be the upstream.\n\n@MishraShivendra What is the correct upstream repo the files were copied from?",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-478903368,478903368,
MishraShivendra,2019-04-02T15:35:58Z,"@practicalswift Thanks for reviewing the changes. Those files were taken from [here]( https://github.com/getlantern/libnatpmp). I've taken just the files needed. A few headers were merged together and useless code was removed. A few other error codes were also added. Please see diff between corresponding .c and .h files. Would push suggested changes in a while.\n\n> @practicalswift This is code ",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479055317,479055317,
laanwj,2019-04-02T16:54:07Z,"travis linter complains; either this needs the expected include guards, or to be excluded from the lints\n```\nsrc/natpmp/gateway.h seems to be missing the expected include guard:\n  #ifndef BITCOIN_NATPMP_GATEWAY_H\n  #define BITCOIN_NATPMP_GATEWAY_H\n  ...\n  #endif // BITCOIN_NATPMP_GATEWAY_H\nsrc/natpmp/natmap_wrapper.h seems to be missing the expected include guard:\n  #ifndef BITCOIN",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479092169,479092169,
laanwj,2019-04-02T17:07:18Z,"Ok, we discussed the license issue on IRC.\n\nThe conclusion was that it's probably best to mention the differing license for the files in `contrib/debian/copyright` (per file), so that people can see this in one glance without having to view the individual source files, but apart from that it's acceptable to include them. 3BSD versus MIT is close enough, and is not expected to cause problems.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479098246,479098246,
dongcarl,2019-04-02T17:09:01Z,"~~Also, I believe the upstream is really [here](http://miniupnp.free.fr/files/), I'm not sure if there's a diff between what you copied and what's available upstream, so checking would be great!~~\n\nI was wrong, see comment here: https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479113678",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479099057,479099057,
dongcarl,2019-04-02T17:41:43Z,"I'm sorry about the confusion, https://github.com/miniupnp/libnatpmp is indeed the repo that's being updated.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-479113678,479113678,
dongcarl,2019-04-09T18:32:50Z,"@MishraShivendra It seems that Travis is failing. Could you take a look at the errors there?\n\nAside from that, please rearrange your commits so they look something like this:\n1. A commit copying in the newest libnatpmp code\n2. A commit integrating libnatpmp with bitcoin's build system\n3. One or more commits integrating libnatpmp with bitcoin's codebase\n\nObviously there might be some ",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-481376732,481376732,
luke-jr,2019-04-09T19:02:18Z,There's no excuse to subtree this. It should be a normal shared library dependency.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-481393239,481393239,
laanwj,2019-04-10T14:03:27Z,"Concept ACK in any case, thanks for picking this up.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-481704481,481704481,
MishraShivendra,2019-04-10T15:27:00Z,"@dongcarl @laanwj Thanks for those input and clarification. \n\n> It seems that Travis is failing. Could you take a look at the errors there?\n\nChanges already in progress on a private branch. I'll push them shortly.\n\n> There's no excuse to subtree this. It should be a normal shared library dependency.\n\n@luke-jr \nI believe it was already discussed in #12288 . Not sure if we need a s",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-481738585,481738585,
luke-jr,2019-04-10T15:55:20Z,There is already a separate shared library.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-481750400,481750400,
MishraShivendra,2019-04-14T05:48:54Z,"@dongcarl \nTravis-ci build seems to be inconsistent. The above PR build seems to fail but mainline of my forked repo passes: [Travis-Ci-Master-Build](https://travis-ci.org/MishraShivendra/bitcoin/builds/519644709).\nCan someone please restart the PR build?\n\n@practicalswift The current commit includes most of the changes you suggested. Can you please take a look?\n\n@luke-jr Can you please",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-482921942,482921942,
practicalswift,2019-04-14T13:21:45Z,"@MishraShivendra Sure! In light of previous comments -- do you want me to review all the files or just a subset? In the latter case, what subset? :-)",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-482975043,482975043,
MishraShivendra,2019-04-14T15:38:37Z,"@practicalswift \nA quick look at everything, please.  \nTo shed some light on the changes:\n[These (first commit)](https://github.com/bitcoin/bitcoin/pull/15717/commits/5293339e4dddc84ca5a219e9b8ca4130b00ef1d8) are the file belong to libnatpmp and [this diff](https://gist.github.com/MishraShivendra/472143f3829cea1026e9fc1714586a85) shows the changes I've introduced in upstream. \n[Second comm",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-483001218,483001218,
luke-jr,2019-04-14T19:40:43Z,@MishaShivendra It's installed with the user's OS.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-483048670,483048670,
MishraShivendra,2019-04-19T18:46:25Z,Pushed suggested changes.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-484983859,484983859,
MishraShivendra,2019-04-24T17:35:44Z,Can someone please give input in the above?,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486346201,486346201,
luke-jr,2019-04-24T21:26:31Z,You should leave UPnP stuff alone for this. Just add NAT-PMP support as a separate feature.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486433276,486433276,
ryanofsky,2019-04-25T16:26:43Z,"There was some discussion about this in IRC yesterday:\n\nhttp://www.erisian.com.au/bitcoin-core-dev/log-2019-04-24.html#l-255\n\nI did want to throw out as a suggestion that instead of running this code inside bitcoind or even adding it to the project we could consider calling out to a command line client with boost::process like: https://superuser.com/questions/192132/how-to-automatically-fo",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486743647,486743647,
dongcarl,2019-04-25T16:56:51Z,"> There was some discussion about this in IRC yesterday:\n> \n> http://www.erisian.com.au/bitcoin-core-dev/log-2019-04-24.html#l-255\n\nYes that discussion resulted in a few conclusions:\n\n1. NAT-PMP should be enabled by default\n~~2. Let's not submit more reviews of the subtree'd code, as we might make it a dependency under `depends`~~\n2. Updated: We are going to make NAT-PMP part of th",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486754072,486754072,
laanwj,2019-04-25T18:25:16Z,"> I did want to throw out as a suggestion that instead of running this code inside bitcoind or even adding it to the project we could consider calling out to a command line client with boost::process like: \n\nPlease, no scope creep here. This can always be done later but there's no need to complicate this effort even further with a requirement that it should run outside the process.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486785716,486785716,
luke-jr,2019-04-25T18:34:46Z,"> Updated: We are going to make NAT-PMP part of the bitcoind codebase, exactly like you've done here\n\nNACK. There is no excuse for this. It is universally held to be a bad practice in the open source community, and for very good reasons. We have an excuse to bundle consensus-critical stuff because upstream doesn't generally consider the ramifications of some bugfixes, but that does not apply t",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486789256,486789256,
ryanofsky,2019-04-25T18:48:27Z,"> Please, no scope creep here. \n\nJust in case there is a misunderstanding, the change I was referring to is potentially a very small change after #15382. Something like:\n\n```c++\ngArgs.AddArg(""-upnpc_bin"", ""Path to port forwarding client binary."");\n...\nif (gArgs.IsArgSet(""-upnp_bin"")) {\n   bp::system(strprintf(""%s %i %i"", gArgs.GetArg(""-upnp_bin""), internal_port, external_port));\n",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-486793888,486793888,
Sjors,2019-04-26T19:08:36Z,"Concept ACK. I'm OK with compiling this by default\n\nI don't think we should turn this on by default until the GUI is updated: that's better done in a followup.\n\nI'm reluctant to strip UPnP compilation by default. The GUI currently has a ""map port using UPnP"" (off by default). Although it's tempting to just change the text and meaning of that textbox, that's a can of worms by itself. It see",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487168407,487168407,
MishraShivendra,2019-04-27T05:46:21Z,"> I did want to throw out as a suggestion that instead of running this code inside bitcoind or even adding it to the project we could consider calling out to a command line client with boost::process like:\n\nI don't seem to agree. It could be difficult to find [these errors](https://github.com/bitcoin/bitcoin/pull/15717/files#diff-7ca56436e371c665a570c330956889caR297) through running the binary",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487257580,487257580,
luke-jr,2019-04-27T06:48:30Z,That's not what I meant. Just use standard `pkg-config` for libnatpmp. Every major distro has it already.,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487260998,487260998,
Sjors,2019-04-27T07:22:38Z,"1. Yes\n2. What Luke says, plus adding to depends because we need that for distribution builds (though that can wait for a followup if if the feature is off by default)",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487263071,487263071,
MishraShivendra,2019-04-27T19:13:18Z,"@luke-jr @Sjors \nSo you mean to say #2 should be:\n2. Sub-tree libnatpmp changes: Would sub-tree libnatpmp. I would remove all unused files and maintain the same gateway/natpmp (.cpp/.h) files introduced already in this PR. Use package-config for libnatpmp and add depends.\n",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487312106,487312106,
Sjors,2019-04-27T19:38:22Z,"No, I would not sub-tree libnatpmp. Just rely on `pkg-config` to find `libnatpmp` on the system (during `./configure`). The wrapper you created can go in `src/util` or some similar place. Don't worry about depends: that can wait for a future commit.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-487313850,487313850,
DrahtBot,2019-05-08T20:34:21Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-490640682,490640682,
DrahtBot,2019-08-16T14:02:06Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-522019564,522019564,
brakmic,2019-11-28T22:30:52Z,"Hi,\n\nFirst, I'm not sure if this task is still ""up for grabs"", because it's closed now. However, the icon is still there, so it should be. Anyway, I'm working on it out of curiosity, because I only know about UPnPC, so I thought it would be nice to learn how NAT-PMP works. :)\n\nThe [commit in my forked repo](https://github.com/brakmic/bitcoin/commit/df0f5ccb532565d325fad2004f83069dc52f1cc3)",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-559613107,559613107,
luke-jr,2019-11-29T00:13:12Z,"> Integrated libnatpmp source directory (similar to secp256k1 and univalue)\n\nDon't do this.\n\n> non-portable (no .la-files generation available).\n\n.la files are generally considered obsolete...\n",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-559622743,559622743,
brakmic,2019-11-29T05:37:22Z,"@luke-jr\nI know that la-files are obsolete, but as libnatpmp has no pkg-config, there was no other option. Maybe there is one that I don't know about?\n\nAnyway, I consider this task as obsolete then.\n\nThanks.",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-559665457,559665457,
Sjors,2019-11-29T08:00:58Z,"Adding. NAT-PMP support is not obsolete, see #11902. The question is just how.\n\nI think @luke-jr's point about integrating the source directory is that this practice should be avoided, especially for projects that are still being (somewhat) maintained. It's better to make a PR upstream to add pkg-config support.\n\nMeanwhile you could add it to https://github.com/bitcoin/bitcoin/tree/master/",https://github.com/bitcoin/bitcoin/pull/15717#issuecomment-559696715,559696715,
practicalswift,2019-04-02T07:51:29Z,"This looks a bit dangerous: should be `;` and not `,` right? :-)",https://github.com/bitcoin/bitcoin/pull/15717#discussion_r271172008,271172008,src/natpmp/natmap_wrapper.cpp
practicalswift,2019-04-17T05:58:55Z,Nit: Consider using `using` instead of `typedef`.,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276089083,276089083,src/net.cpp
practicalswift,2019-04-17T06:03:04Z,Consider initialising `m_NatPmpObj` here or in the constructor. As the code is currently formulated `m_NatPmpObj` will remain uninitialised if the `InitNatPmp` call in the constructor fails.,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276089880,276089880,src/natpmp/include/natmap_wrapper.h
practicalswift,2019-04-17T06:03:33Z,Nit: `void` redundant.,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276089993,276089993,src/natpmp/natmap_wrapper.cpp
practicalswift,2019-04-17T06:06:50Z,Nit: Make sure parameter names match between definition and declaration.,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276090632,276090632,src/natpmp/natpmp.cpp
practicalswift,2019-04-17T06:09:00Z,Nit: Move this down to first use to make it clear that it is zeroed before use?,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276091039,276091039,src/natpmp/natpmp.cpp
practicalswift,2019-04-17T06:21:11Z,Constructor should be `explicit` :-),https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276093339,276093339,src/natpmp/include/natmap_wrapper.h
practicalswift,2019-04-17T06:28:42Z,"Should be ""DhcpDefaultGateway"" :-)",https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276095085,276095085,src/natpmp/gateway.cpp
practicalswift,2019-04-17T06:32:25Z,In parts of this PR the return value of `gettimeofday` is checked and in some parts it is not. Consider doing it consistently throughout this PR: either the assumption is that it can fail or the assumption is that it cannot :-),https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276095957,276095957,src/natpmp/natpmp.cpp
practicalswift,2019-04-17T07:10:15Z,Take a look at how this is handled in `IsSpace(char c)` (`strencodings.h`).,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276105622,276105622,src/natpmp/gateway.cpp
practicalswift,2019-04-17T07:13:16Z,Consider running `clang-tidy` on all new files. For changes to existing files: use https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/clang-format-diff.py,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r276106557,276106557,src/natpmp/gateway.cpp
luke-jr,2019-04-20T18:25:27Z,Both should be supported...,https://github.com/bitcoin/bitcoin/pull/15717#discussion_r277142619,277142619,src/init.cpp
MishraShivendra,2019-04-21T10:35:35Z,"@luke-jr \nI meant to use same switch ""-portmap"" for upnp as well as NAT-PMP. And the particular implementation is picked based on ""USE_UPNP"" flag (In this file as well as net.cpp). So I believe both are supported but picked based on USE_UPNP flag. Do you see any problem here?",https://github.com/bitcoin/bitcoin/pull/15717#discussion_r277162402,277162402,src/init.cpp
luke-jr,2019-04-21T18:40:24Z,"USE_UPNP is a compile-time option, not run-time.\n\nUPnP and NAT-PMP are two completely different protocols. They don't do the same thing. Some routers may support only one or the other.",https://github.com/bitcoin/bitcoin/pull/15717#discussion_r277177752,277177752,src/init.cpp
MishraShivendra,2019-04-22T07:48:18Z,"@laanwj @luke-jr Do you think we should introduce a separate switch for this? \nOr fall back to upnp?\n#11902",https://github.com/bitcoin/bitcoin/pull/15717#discussion_r277229640,277229640,src/init.cpp
