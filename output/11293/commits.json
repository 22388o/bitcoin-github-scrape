[
  {
    "sha": "5ab586f90b74d84e29156ebf6692b9e9055aa047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWI1ODZmOTBiNzRkODRlMjkxNTZlYmY2NjkyYjllOTA1NWFhMDQ3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-09-12T00:42:37Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-09-21T03:35:54Z"
      },
      "message": "Consolidate CMerkleBlock constructor into a single method\n\nIncorporates feedback suggested by @sipa, @promag, @TheBlueMatt.",
      "tree": {
        "sha": "df40944f8ec6d4135bb2a610095f1b5d6924548a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df40944f8ec6d4135bb2a610095f1b5d6924548a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ab586f90b74d84e29156ebf6692b9e9055aa047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab586f90b74d84e29156ebf6692b9e9055aa047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab586f90b74d84e29156ebf6692b9e9055aa047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab586f90b74d84e29156ebf6692b9e9055aa047/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3255d6347b1f9eccbec3d6d93d4a424087a3b35b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3255d6347b1f9eccbec3d6d93d4a424087a3b35b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3255d6347b1f9eccbec3d6d93d4a424087a3b35b"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 19,
      "deletions": 32
    },
    "files": [
      {
        "sha": "3f07b4dac43b3a9c642fc88659be01300d48dd1c",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 28,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab586f90b74d84e29156ebf6692b9e9055aa047/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab586f90b74d84e29156ebf6692b9e9055aa047/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=5ab586f90b74d84e29156ebf6692b9e9055aa047",
        "patch": "@@ -9,33 +9,8 @@\n #include \"consensus/consensus.h\"\n #include \"utilstrencodings.h\"\n \n-CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n-{\n-    header = block.GetBlockHeader();\n \n-    std::vector<bool> vMatch;\n-    std::vector<uint256> vHashes;\n-\n-    vMatch.reserve(block.vtx.size());\n-    vHashes.reserve(block.vtx.size());\n-\n-    for (unsigned int i = 0; i < block.vtx.size(); i++)\n-    {\n-        const uint256& hash = block.vtx[i]->GetHash();\n-        if (filter.IsRelevantAndUpdate(*block.vtx[i]))\n-        {\n-            vMatch.push_back(true);\n-            vMatchedTxn.push_back(std::make_pair(i, hash));\n-        }\n-        else\n-            vMatch.push_back(false);\n-        vHashes.push_back(hash);\n-    }\n-\n-    txn = CPartialMerkleTree(vHashes, vMatch);\n-}\n-\n-CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n+CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids)\n {\n     header = block.GetBlockHeader();\n \n@@ -48,10 +23,14 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const uint256& hash = block.vtx[i]->GetHash();\n-        if (txids.count(hash))\n+        if (txids && txids->count(hash)) {\n             vMatch.push_back(true);\n-        else\n+        } else if (filter && filter->IsRelevantAndUpdate(*block.vtx[i])) {\n+            vMatch.push_back(true);\n+            vMatchedTxn.emplace_back(i, hash);\n+        } else {\n             vMatch.push_back(false);\n+        }\n         vHashes.push_back(hash);\n     }\n "
      },
      {
        "sha": "6c05f2c1f81fc8b878cf54971d8cb1d7db532c3e",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab586f90b74d84e29156ebf6692b9e9055aa047/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab586f90b74d84e29156ebf6692b9e9055aa047/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=5ab586f90b74d84e29156ebf6692b9e9055aa047",
        "patch": "@@ -131,19 +131,23 @@ class CMerkleBlock\n     CBlockHeader header;\n     CPartialMerkleTree txn;\n \n-public:\n-    /** Public only for unit testing and relay testing (not relayed) */\n+    /**\n+     * Public only for unit testing and relay testing (not relayed).\n+     *\n+     * Used only when a bloom filter is specified to allow\n+     * testing the transactions which matched the bloom filter.\n+     */\n     std::vector<std::pair<unsigned int, uint256> > vMatchedTxn;\n \n     /**\n      * Create from a CBlock, filtering transactions according to filter\n      * Note that this will call IsRelevantAndUpdate on the filter for each transaction,\n      * thus the filter will likely be modified.\n      */\n-    CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n+    CMerkleBlock(const CBlock& block, CBloomFilter& filter) : CMerkleBlock(block, &filter, nullptr) { }\n \n     // Create from a CBlock, matching the txids in the set\n-    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids);\n+    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids) : CMerkleBlock(block, nullptr, &txids) { }\n \n     CMerkleBlock() {}\n \n@@ -154,6 +158,10 @@ class CMerkleBlock\n         READWRITE(header);\n         READWRITE(txn);\n     }\n+\n+private:\n+    // Combined constructor to consolidate code\n+    CMerkleBlock(const CBlock& block, CBloomFilter* filter, const std::set<uint256>* txids);\n };\n \n #endif // BITCOIN_MERKLEBLOCK_H"
      }
    ]
  },
  {
    "sha": "46ce223d15d4111d096f6342eb6f526d2507d7d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmNlMjIzZDE1ZDQxMTFkMDk2ZjYzNDJlYjZmNTI2ZDI1MDdkN2Q3",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-09-12T00:43:48Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2017-09-21T03:36:10Z"
      },
      "message": "Add tests for CMerkleBlock usage with txids specified",
      "tree": {
        "sha": "8e76a793e79393c78842939e5b2728ab97a0bb4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e76a793e79393c78842939e5b2728ab97a0bb4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46ce223d15d4111d096f6342eb6f526d2507d7d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce223d15d4111d096f6342eb6f526d2507d7d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46ce223d15d4111d096f6342eb6f526d2507d7d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46ce223d15d4111d096f6342eb6f526d2507d7d7/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ab586f90b74d84e29156ebf6692b9e9055aa047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab586f90b74d84e29156ebf6692b9e9055aa047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab586f90b74d84e29156ebf6692b9e9055aa047"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 100,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7a921a1bae867734640ad9d1e07d1e2198c431bb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "patch": "@@ -49,6 +49,7 @@ BITCOIN_TESTS =\\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/merkle_tests.cpp \\\n+  test/merkleblock_tests.cpp \\\n   test/miner_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/net_tests.cpp \\"
      },
      {
        "sha": "eac2c102a684dbbd102d8d9cd30a7d4d6a7b9c99",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientversion.h\"\n #include \"key.h\"\n #include \"merkleblock.h\"\n+#include \"primitives/block.h\"\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -179,20 +180,15 @@ BOOST_AUTO_TEST_CASE(bloom_match)\n \n BOOST_AUTO_TEST_CASE(merkle_block_1)\n {\n-    // Random real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n-    // With 9 txes\n-    CBlock block;\n-    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n-    stream >> block;\n-\n+    CBlock block = getBlock13b8a();\n     CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);\n     // Match the last transaction\n     filter.insert(uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n \n     CMerkleBlock merkleBlock(block, filter);\n-    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n \n-    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1);\n     std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));"
      },
      {
        "sha": "3e66c6f2c66276c6fc2e1daee0604c42132d9560",
        "filename": "src/test/merkleblock_tests.cpp",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/merkleblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/merkleblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_tests.cpp?ref=46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2012-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"merkleblock.h\"\n+#include \"uint256.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(merkleblock_tests, BasicTestingSetup)\n+\n+/**\n+ * Create a CMerkleBlock using a list of txids which will be found in the\n+ * given block.\n+ */\n+BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)\n+{\n+    CBlock block = getBlock13b8a();\n+\n+    std::set<uint256> txids;\n+\n+    // Last txn in block.\n+    uint256 txhash1 = uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\");\n+\n+    // Second txn in block.\n+    uint256 txhash2 = uint256S(\"0xf9fc751cb7dc372406a9f8d738d5e6f8f63bab71986a39cf36ee70ee17036d07\");\n+\n+    txids.insert(txhash1);\n+    txids.insert(txhash2);\n+\n+    CMerkleBlock merkleBlock(block, txids);\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n+\n+    // vMatchedTxn is only used when bloom filter is specified.\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n+    BOOST_CHECK_EQUAL(vMatched.size(), 2);\n+\n+    // Ordered by occurrence in depth-first tree traversal.\n+    BOOST_CHECK_EQUAL(vMatched[0].ToString(), txhash2.ToString());\n+    BOOST_CHECK_EQUAL(vIndex[0], 1);\n+\n+    BOOST_CHECK_EQUAL(vMatched[1].ToString(), txhash1.ToString());\n+    BOOST_CHECK_EQUAL(vIndex[1], 8);\n+}\n+\n+\n+/**\n+ * Create a CMerkleBlock using a list of txids which will not be found in the\n+ * given block.\n+ */\n+BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)\n+{\n+    CBlock block = getBlock13b8a();\n+\n+    std::set<uint256> txids2;\n+    txids2.insert(uint256S(\"0xc0ffee00003bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));\n+    CMerkleBlock merkleBlock(block, txids2);\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+\n+    std::vector<uint256> vMatched;\n+    std::vector<unsigned int> vIndex;\n+\n+    BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n+    BOOST_CHECK_EQUAL(vMatched.size(), 0);\n+    BOOST_CHECK_EQUAL(vIndex.size(), 0);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "79bc48a118094c85f9f43576670e59e05a19b019",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "patch": "@@ -18,6 +18,7 @@\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"streams.h\"\n #include \"rpc/server.h\"\n #include \"rpc/register.h\"\n #include \"script/sigcache.h\"\n@@ -158,3 +159,15 @@ CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {\n     return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, nHeight,\n                            spendsCoinbase, sigOpCost, lp);\n }\n+\n+/**\n+ * @returns a real block (0000000000013b8ab2cd513b0261a14096412195a72a0c4827d229dcc7e0f7af)\n+ *      with 9 txs.\n+ */\n+CBlock getBlock13b8a()\n+{\n+    CBlock block;\n+    CDataStream stream(ParseHex(\"0100000090f0a9f110702f808219ebea1173056042a714bad51b916cb6800000000000005275289558f51c9966699404ae2294730c3c9f9bda53523ce50e9b95e558da2fdb261b4d4c86041b1ab1bf930901000000010000000000000000000000000000000000000000000000000000000000000000ffffffff07044c86041b0146ffffffff0100f2052a01000000434104e18f7afbe4721580e81e8414fc8c24d7cfacf254bb5c7b949450c3e997c2dc1242487a8169507b631eb3771f2b425483fb13102c4eb5d858eef260fe70fbfae0ac00000000010000000196608ccbafa16abada902780da4dc35dafd7af05fa0da08cf833575f8cf9e836000000004a493046022100dab24889213caf43ae6adc41cf1c9396c08240c199f5225acf45416330fd7dbd022100fe37900e0644bf574493a07fc5edba06dbc07c311b947520c2d514bc5725dcb401ffffffff0100f2052a010000001976a914f15d1921f52e4007b146dfa60f369ed2fc393ce288ac000000000100000001fb766c1288458c2bafcfec81e48b24d98ec706de6b8af7c4e3c29419bfacb56d000000008c493046022100f268ba165ce0ad2e6d93f089cfcd3785de5c963bb5ea6b8c1b23f1ce3e517b9f022100da7c0f21adc6c401887f2bfd1922f11d76159cbc597fbd756a23dcbb00f4d7290141042b4e8625a96127826915a5b109852636ad0da753c9e1d5606a50480cd0c40f1f8b8d898235e571fe9357d9ec842bc4bba1827daaf4de06d71844d0057707966affffffff0280969800000000001976a9146963907531db72d0ed1a0cfb471ccb63923446f388ac80d6e34c000000001976a914f0688ba1c0d1ce182c7af6741e02658c7d4dfcd388ac000000000100000002c40297f730dd7b5a99567eb8d27b78758f607507c52292d02d4031895b52f2ff010000008b483045022100f7edfd4b0aac404e5bab4fd3889e0c6c41aa8d0e6fa122316f68eddd0a65013902205b09cc8b2d56e1cd1f7f2fafd60a129ed94504c4ac7bdc67b56fe67512658b3e014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffffca5065ff9617cbcba45eb23726df6498a9b9cafed4f54cbab9d227b0035ddefb000000008a473044022068010362a13c7f9919fa832b2dee4e788f61f6f5d344a7c2a0da6ae740605658022006d1af525b9a14a35c003b78b72bd59738cd676f845d1ff3fc25049e01003614014104732012cb962afa90d31b25d8fb0e32c94e513ab7a17805c14ca4c3423e18b4fb5d0e676841733cb83abaf975845c9f6f2a8097b7d04f4908b18368d6fc2d68ecffffffff01001ec4110200000043410469ab4181eceb28985b9b4e895c13fa5e68d85761b7eee311db5addef76fa8621865134a221bd01f28ec9999ee3e021e60766e9d1f3458c115fb28650605f11c9ac000000000100000001cdaf2f758e91c514655e2dc50633d1e4c84989f8aa90a0dbc883f0d23ed5c2fa010000008b48304502207ab51be6f12a1962ba0aaaf24a20e0b69b27a94fac5adf45aa7d2d18ffd9236102210086ae728b370e5329eead9accd880d0cb070aea0c96255fae6c4f1ddcce1fd56e014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff02404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac002d3101000000001976a9141befba0cdc1ad56529371864d9f6cb042faa06b588ac000000000100000001b4a47603e71b61bc3326efd90111bf02d2f549b067f4c4a8fa183b57a0f800cb010000008a4730440220177c37f9a505c3f1a1f0ce2da777c339bd8339ffa02c7cb41f0a5804f473c9230220585b25a2ee80eb59292e52b987dad92acb0c64eced92ed9ee105ad153cdb12d001410443bd44f683467e549dae7d20d1d79cbdb6df985c6e9c029c8d0c6cb46cc1a4d3cf7923c5021b27f7a0b562ada113bc85d5fda5a1b41e87fe6e8802817cf69996ffffffff0280651406000000001976a9145505614859643ab7b547cd7f1f5e7e2a12322d3788ac00aa0271000000001976a914ea4720a7a52fc166c55ff2298e07baf70ae67e1b88ac00000000010000000586c62cd602d219bb60edb14a3e204de0705176f9022fe49a538054fb14abb49e010000008c493046022100f2bc2aba2534becbdf062eb993853a42bbbc282083d0daf9b4b585bd401aa8c9022100b1d7fd7ee0b95600db8535bbf331b19eed8d961f7a8e54159c53675d5f69df8c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff03ad0e58ccdac3df9dc28a218bcf6f1997b0a93306faaa4b3a28ae83447b2179010000008b483045022100be12b2937179da88599e27bb31c3525097a07cdb52422d165b3ca2f2020ffcf702200971b51f853a53d644ebae9ec8f3512e442b1bcb6c315a5b491d119d10624c83014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff2acfcab629bbc8685792603762c921580030ba144af553d271716a95089e107b010000008b483045022100fa579a840ac258871365dd48cd7552f96c8eea69bd00d84f05b283a0dab311e102207e3c0ee9234814cfbb1b659b83671618f45abc1326b9edcc77d552a4f2a805c0014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffdcdc6023bbc9944a658ddc588e61eacb737ddf0a3cd24f113b5a8634c517fcd2000000008b4830450221008d6df731df5d32267954bd7d2dda2302b74c6c2a6aa5c0ca64ecbabc1af03c75022010e55c571d65da7701ae2da1956c442df81bbf076cdbac25133f99d98a9ed34c014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffffe15557cd5ce258f479dfd6dc6514edf6d7ed5b21fcfa4a038fd69f06b83ac76e010000008b483045022023b3e0ab071eb11de2eb1cc3a67261b866f86bf6867d4558165f7c8c8aca2d86022100dc6e1f53a91de3efe8f63512850811f26284b62f850c70ca73ed5de8771fb451014104462e76fd4067b3a0aa42070082dcb0bf2f388b6495cf33d789904f07d0f55c40fbd4b82963c69b3dc31895d0c772c812b1d5fbcade15312ef1c0e8ebbb12dcd4ffffffff01404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000010000000166d7577163c932b4f9690ca6a80b6e4eb001f0a2fa9023df5595602aae96ed8d000000008a4730440220262b42546302dfb654a229cefc86432b89628ff259dc87edd1154535b16a67e102207b4634c020a97c3e7bbd0d4d19da6aa2269ad9dded4026e896b213d73ca4b63f014104979b82d02226b3a4597523845754d44f13639e3bf2df5e82c6aab2bdc79687368b01b1ab8b19875ae3c90d661a3d0a33161dab29934edeb36aa01976be3baf8affffffff02404b4c00000000001976a9144854e695a02af0aeacb823ccbc272134561e0a1688ac40420f00000000001976a914abee93376d6b37b5c2940655a6fcaf1c8e74237988ac0000000001000000014e3f8ef2e91349a9059cb4f01e54ab2597c1387161d3da89919f7ea6acdbb371010000008c49304602210081f3183471a5ca22307c0800226f3ef9c353069e0773ac76bb580654d56aa523022100d4c56465bdc069060846f4fbf2f6b20520b2a80b08b168b31e66ddb9c694e240014104976c79848e18251612f8940875b2b08d06e6dc73b9840e8860c066b7e87432c477e9a59a453e71e6d76d5fe34058b800a098fc1740ce3012e8fc8a00c96af966ffffffff02c0e1e400000000001976a9144134e75a6fcb6042034aab5e18570cf1f844f54788ac404b4c00000000001976a9142b6ba7c9d796b75eef7942fc9288edd37c32f5c388ac00000000\"), SER_NETWORK, PROTOCOL_VERSION);\n+    stream >> block;\n+    return block;\n+}"
      },
      {
        "sha": "2390aca34208266ea9f9c3a64d3a56abbf94ef0e",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46ce223d15d4111d096f6342eb6f526d2507d7d7/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=46ce223d15d4111d096f6342eb6f526d2507d7d7",
        "patch": "@@ -99,7 +99,7 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper() :\n         nFee(0), nTime(0), nHeight(1),\n         spendsCoinbase(false), sigOpCost(4) { }\n-    \n+\n     CTxMemPoolEntry FromTx(const CMutableTransaction &tx);\n     CTxMemPoolEntry FromTx(const CTransaction &tx);\n \n@@ -110,4 +110,7 @@ struct TestMemPoolEntryHelper\n     TestMemPoolEntryHelper &SpendsCoinbase(bool _flag) { spendsCoinbase = _flag; return *this; }\n     TestMemPoolEntryHelper &SigOpsCost(unsigned int _sigopsCost) { sigOpCost = _sigopsCost; return *this; }\n };\n+\n+CBlock getBlock13b8a();\n+\n #endif"
      }
    ]
  }
]