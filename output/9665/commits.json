[
  {
    "sha": "efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmMxMzVmZjZkZDNmOWI3YTU5OWM0ZWQ4ZWU3MmRlNzBkYjY3NzNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-01T21:17:54Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-23T20:41:52Z"
      },
      "message": "Use cached [compact] blocks to respond to getdata messages",
      "tree": {
        "sha": "d8be3c80913c2de262f631fd906213df3948bb2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8be3c80913c2de262f631fd906213df3948bb2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c2edd9f6707d16c03ecfba094b1cfec2ddc4dce"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 30,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4bfa01606758271067360b30c03d3d6681ee879f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 17,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
        "patch": "@@ -979,6 +979,13 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             {\n                 bool send = false;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n+                std::shared_ptr<const CBlock> a_recent_block;\n+                std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+                {\n+                    LOCK(cs_most_recent_block);\n+                    a_recent_block = most_recent_block;\n+                    a_recent_compact_block = most_recent_compact_block;\n+                }\n                 if (mi != mapBlockIndex.end())\n                 {\n                     if (mi->second->nChainTx && !mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n@@ -988,11 +995,6 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // before ActivateBestChain but after AcceptBlock).\n                         // In this case, we need to run ActivateBestChain prior to checking the relay\n                         // conditions below.\n-                        std::shared_ptr<const CBlock> a_recent_block;\n-                        {\n-                            LOCK(cs_most_recent_block);\n-                            a_recent_block = most_recent_block;\n-                        }\n                         CValidationState dummy;\n                         ActivateBestChain(dummy, Params(), a_recent_block);\n                     }\n@@ -1026,14 +1028,20 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 // it's available before trying to send.\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))\n                 {\n-                    // Send block from disk\n-                    CBlock block;\n-                    if (!ReadBlockFromDisk(block, (*mi).second, consensusParams))\n-                        assert(!\"cannot load block from disk\");\n+                    std::shared_ptr<const CBlock> pblock;\n+                    if (a_recent_block && a_recent_block->GetHash() == (*mi).second->GetBlockHash()) {\n+                        pblock = a_recent_block;\n+                    } else {\n+                        // Send block from disk\n+                        std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n+                        if (!ReadBlockFromDisk(*pblockRead, (*mi).second, consensusParams))\n+                            assert(!\"cannot load block from disk\");\n+                        pblock = pblockRead;\n+                    }\n                     if (inv.type == MSG_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block));\n+                        connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, block));\n+                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_FILTERED_BLOCK)\n                     {\n                         bool sendMerkleBlock = false;\n@@ -1042,7 +1050,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             LOCK(pfrom->cs_filter);\n                             if (pfrom->pfilter) {\n                                 sendMerkleBlock = true;\n-                                merkleBlock = CMerkleBlock(block, *pfrom->pfilter);\n+                                merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n                             }\n                         }\n                         if (sendMerkleBlock) {\n@@ -1055,7 +1063,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n-                                connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *block.vtx[pair.first]));\n+                                connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n                         }\n                         // else\n                             // no response\n@@ -1069,10 +1077,15 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n                         int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n                         if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                            CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n-                            connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n-                        } else\n-                            connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, block));\n+                            if (fPeerWantsWitness && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                            } else {\n+                                CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n+                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                            }\n+                        } else {\n+                            connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+                        }\n                     }\n \n                     // Trigger the peer node to send a getblocks request for the next batch of inventory"
      }
    ]
  },
  {
    "sha": "c47f5b798233a0083d71ce033f7c044267af70f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDdmNWI3OTgyMzNhMDA4M2Q3MWNlMDMzZjdjMDQ0MjY3YWY3MGYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-02T19:55:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-23T20:41:52Z"
      },
      "message": "Cache witness-enabled state with recent-compact-block-cache",
      "tree": {
        "sha": "76878319b1015d882873e394aa7f151d83bdec9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76878319b1015d882873e394aa7f151d83bdec9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c47f5b798233a0083d71ce033f7c044267af70f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47f5b798233a0083d71ce033f7c044267af70f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c47f5b798233a0083d71ce033f7c044267af70f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47f5b798233a0083d71ce033f7c044267af70f1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efc135ff6dd3f9b7a599c4ed8ee72de70db6773c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "23a856f5e5e9b588c8bf6bc8834983ba7a68310e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c47f5b798233a0083d71ce033f7c044267af70f1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c47f5b798233a0083d71ce033f7c044267af70f1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c47f5b798233a0083d71ce033f7c044267af70f1",
        "patch": "@@ -775,6 +775,7 @@ static CCriticalSection cs_most_recent_block;\n static std::shared_ptr<const CBlock> most_recent_block;\n static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block;\n static uint256 most_recent_block_hash;\n+static bool fWitnessesPresentInMostRecentCompactBlock;\n \n void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) {\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> pcmpctblock = std::make_shared<const CBlockHeaderAndShortTxIDs> (*pblock, true);\n@@ -795,6 +796,7 @@ void PeerLogicValidation::NewPoWValidBlock(const CBlockIndex *pindex, const std:\n         most_recent_block_hash = hashBlock;\n         most_recent_block = pblock;\n         most_recent_compact_block = pcmpctblock;\n+        fWitnessesPresentInMostRecentCompactBlock = fWitnessEnabled;\n     }\n \n     connman->ForEachNode([this, &pcmpctblock, pindex, &msgMaker, fWitnessEnabled, &hashBlock](CNode* pnode) {\n@@ -981,10 +983,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n                 std::shared_ptr<const CBlock> a_recent_block;\n                 std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n+                bool fWitnessesPresentInARecentCompactBlock;\n                 {\n                     LOCK(cs_most_recent_block);\n                     a_recent_block = most_recent_block;\n                     a_recent_compact_block = most_recent_compact_block;\n+                    fWitnessesPresentInARecentCompactBlock = fWitnessesPresentInMostRecentCompactBlock;\n                 }\n                 if (mi != mapBlockIndex.end())\n                 {\n@@ -1077,7 +1081,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n                         int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n                         if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                            if (fPeerWantsWitness && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n+                            if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n                                 connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n                             } else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n@@ -2941,7 +2945,7 @@ bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsg\n                     {\n                         LOCK(cs_most_recent_block);\n                         if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n-                            if (state.fWantsCmpctWitness)\n+                            if (state.fWantsCmpctWitness || !fWitnessesPresentInMostRecentCompactBlock)\n                                 connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n                             else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);"
      }
    ]
  },
  {
    "sha": "b49ad44efeaff66806d2c142273f70e2a4ddfb9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDlhZDQ0ZWZlYWZmNjY4MDZkMmMxNDIyNzNmNzBlMmE0ZGRmYjlk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-07T16:49:07Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-02-23T20:41:53Z"
      },
      "message": "Add comment about cs_most_recent_block coverage",
      "tree": {
        "sha": "b7860a37c680bfda8d5b2a2069f018d83c12afbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7860a37c680bfda8d5b2a2069f018d83c12afbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b49ad44efeaff66806d2c142273f70e2a4ddfb9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49ad44efeaff66806d2c142273f70e2a4ddfb9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b49ad44efeaff66806d2c142273f70e2a4ddfb9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49ad44efeaff66806d2c142273f70e2a4ddfb9d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c47f5b798233a0083d71ce033f7c044267af70f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c47f5b798233a0083d71ce033f7c044267af70f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c47f5b798233a0083d71ce033f7c044267af70f1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3971ac17d2989edca45b148c8923589e5006071a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49ad44efeaff66806d2c142273f70e2a4ddfb9d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49ad44efeaff66806d2c142273f70e2a4ddfb9d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b49ad44efeaff66806d2c142273f70e2a4ddfb9d",
        "patch": "@@ -771,6 +771,7 @@ void PeerLogicValidation::SyncTransaction(const CTransaction& tx, const CBlockIn\n     }\n }\n \n+// All of the following cache a recent block, and are protected by cs_most_recent_block\n static CCriticalSection cs_most_recent_block;\n static std::shared_ptr<const CBlock> most_recent_block;\n static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block;"
      }
    ]
  }
]