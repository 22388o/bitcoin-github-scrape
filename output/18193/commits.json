[
  {
    "sha": "bca8665d0895c450e552c357a036d9e9579e3678",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiY2E4NjY1ZDA4OTVjNDUwZTU1MmMzNTdhMDM2ZDllOTU3OWUzNjc4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-21T21:15:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-02-21T21:16:40Z"
      },
      "message": "scripted-diff: Wallet: Rename incorrectly named *UsedDestination\n\nThese functions are used to mark/check if a key of our own has been used to spend (and only for avoid-reuse wallets), which has nothing to do with the destination/address itself.\nGive them more accurate names to avoid confusion.\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/UsedDestination/SpentKey/g' $(git grep -l 'UsedDestination' ./src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "2683486aa95186e22cab1e1d83e911e8937f5251",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2683486aa95186e22cab1e1d83e911e8937f5251"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bca8665d0895c450e552c357a036d9e9579e3678",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bca8665d0895c450e552c357a036d9e9579e3678",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bca8665d0895c450e552c357a036d9e9579e3678",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bca8665d0895c450e552c357a036d9e9579e3678/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dd7bd47be2f046ea4b114ab86a099ec483d9f3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dd7bd47be2f046ea4b114ab86a099ec483d9f3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dd7bd47be2f046ea4b114ab86a099ec483d9f3a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "38bc251d234a36d397173621265c07a2791b8843",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bca8665d0895c450e552c357a036d9e9579e3678",
        "patch": "@@ -2925,7 +2925,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n-        bool reused = avoid_reuse && pwallet->IsUsedDestination(out.tx->GetHash(), out.i);\n+        bool reused = avoid_reuse && pwallet->IsSpentKey(out.tx->GetHash(), out.i);\n \n         if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n             continue;"
      },
      {
        "sha": "02fe59b601da16b77db3d23570aed02458e82cee",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bca8665d0895c450e552c357a036d9e9579e3678",
        "patch": "@@ -714,7 +714,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n-void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations)\n+void CWallet::SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations)\n {\n     AssertLockHeld(cs_wallet);\n     const CWalletTx* srctx = GetWalletTx(hash);\n@@ -734,7 +734,7 @@ void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, u\n     }\n }\n \n-bool CWallet::IsUsedDestination(const uint256& hash, unsigned int n) const\n+bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n {\n     AssertLockHeld(cs_wallet);\n     CTxDestination dst;\n@@ -777,7 +777,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n         for (const CTxIn& txin : wtxIn.tx->vin) {\n             const COutPoint& op = txin.prevout;\n-            SetUsedDestinationState(batch, op.hash, op.n, true, tx_destinations);\n+            SetSpentKeyState(batch, op.hash, op.n, true, tx_destinations);\n         }\n \n         MarkDestinationsDirty(tx_destinations);\n@@ -1878,7 +1878,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n     uint256 hashTx = GetHash();\n     for (unsigned int i = 0; i < tx->vout.size(); i++)\n     {\n-        if (!pwallet->IsSpent(hashTx, i) && (allow_used_addresses || !pwallet->IsUsedDestination(hashTx, i))) {\n+        if (!pwallet->IsSpent(hashTx, i) && (allow_used_addresses || !pwallet->IsSpentKey(hashTx, i))) {\n             const CTxOut &txout = tx->vout[i];\n             nCredit += pwallet->GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n@@ -2168,7 +2168,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n                 continue;\n             }\n \n-            if (!allow_used_addresses && IsUsedDestination(wtxid, i)) {\n+            if (!allow_used_addresses && IsSpentKey(wtxid, i)) {\n                 continue;\n             }\n "
      },
      {
        "sha": "6c1c3040c247967b89843cf4b1947ea326509ab0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bca8665d0895c450e552c357a036d9e9579e3678/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bca8665d0895c450e552c357a036d9e9579e3678",
        "patch": "@@ -817,8 +817,8 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     // Whether this or any known UTXO with the same single key has been spent.\n-    bool IsUsedDestination(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool IsSpentKey(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n "
      }
    ]
  }
]