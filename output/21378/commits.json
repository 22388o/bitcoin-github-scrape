[
  {
    "sha": "898d54177d364a8120c2fcd4cfeaa831121062fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OThkNTQxNzdkMzY0YTgxMjBjMmZjZDRjZmVhYTgzMTEyMTA2MmZk",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:36Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:36Z"
      },
      "message": "versionbits: correct doxygen comments",
      "tree": {
        "sha": "3b55e5984043032a016a7833610cd2934c6b81a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b55e5984043032a016a7833610cd2934c6b81a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/898d54177d364a8120c2fcd4cfeaa831121062fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898d54177d364a8120c2fcd4cfeaa831121062fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/898d54177d364a8120c2fcd4cfeaa831121062fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898d54177d364a8120c2fcd4cfeaa831121062fd/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d22654fe9e90093e643cb7beb896c48a274d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d22654fe9e90093e643cb7beb896c48a274d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d22654fe9e90093e643cb7beb896c48a274d47"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ec25c0d7ede4407448dec1748ea99aee12c10ec3",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/898d54177d364a8120c2fcd4cfeaa831121062fd/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/898d54177d364a8120c2fcd4cfeaa831121062fd/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=898d54177d364a8120c2fcd4cfeaa831121062fd",
        "patch": "@@ -79,11 +79,11 @@ struct VersionBitsCache\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment at the current tip. */\n+/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment at the current tip. */\n+/** Get the numerical statistics for the BIP9 state for a given deployment as at pindexPrev. */\n BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      }
    ]
  },
  {
    "sha": "c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWVkNDJmYWI5Y2M2OGVkNDNiYTU1YTZiYThjMjJmZjAyOGNmYzEw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T12:43:18Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:40Z"
      },
      "message": "versionbits: Use dedicated lock instead of cs_main",
      "tree": {
        "sha": "e3533944db242f557f9c44c3e77926894a9919f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3533944db242f557f9c44c3e77926894a9919f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "898d54177d364a8120c2fcd4cfeaa831121062fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898d54177d364a8120c2fcd4cfeaa831121062fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/898d54177d364a8120c2fcd4cfeaa831121062fd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a83bb9f9af679d9131db10eb1939848c3347f897",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "patch": "@@ -1223,7 +1223,7 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n     softforks.pushKV(name, rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden."
      },
      {
        "sha": "1edba7f41437ad4e0d055e1a1da23bc5713eb43a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "patch": "@@ -1809,11 +1809,10 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache GUARDED_BY(cs_main);\n+VersionBitsCache versionbitscache;\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n-    LOCK(cs_main);\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n@@ -1862,9 +1861,8 @@ static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n     return params.SegwitHeight != std::numeric_limits<int>::max();\n }\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n-    AssertLockHeld(cs_main);\n-\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n+{\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n \n     // BIP16 didn't become active until Apr 1 2012 (on mainnet, and"
      },
      {
        "sha": "5246a0a9547c01bca128e01a77ceb5f966175aac",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "patch": "@@ -187,6 +187,7 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.cs);\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -197,6 +198,7 @@ BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::\n \n int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n {\n+    LOCK(cache.cs);\n     return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n }\n \n@@ -207,6 +209,7 @@ uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentP\n \n void VersionBitsCache::Clear()\n {\n+    LOCK(cs);\n     for (unsigned int d = 0; d < Consensus::MAX_VERSION_BITS_DEPLOYMENTS; d++) {\n         caches[d].clear();\n     }"
      },
      {
        "sha": "23541b81d656427c5dd83f0bf98ac10b2b0741a3",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "patch": "@@ -6,6 +6,8 @@\n #define BITCOIN_VERSIONBITS_H\n \n #include <chain.h>\n+#include <sync.h>\n+\n #include <map>\n \n /** What block version to use for new blocks (pre versionbits) */\n@@ -74,7 +76,8 @@ class AbstractThresholdConditionChecker {\n  *  keyed by the bit position used to signal support. */\n struct VersionBitsCache\n {\n-    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+    Mutex cs;\n+    ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(cs);\n \n     void Clear();\n };"
      }
    ]
  },
  {
    "sha": "ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDVhZGIzOThhZGE2NzM4Y2QzYTZmNDE5ZmRhZjBiZjNmODAwNjg2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-06-16T08:58:56Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:40Z"
      },
      "message": "[refactor] Add deploymentstatus.h\n\nProvides DeploymentEnabled, DeploymentActiveAt, and DeploymentActiveAfter\nhelpers for checking the status of buried deployments. Can be overloaded\nso the same syntax works for non-buried deployments, allowing future\nsoft forks to be changed from signalled to buried deployments without\nhaving to touch the implementation code.\n\nReplaces IsWitnessEnabled and IsScriptWitnessEnabled.",
      "tree": {
        "sha": "89a53cb7577cf7c597c0adb9e7a53ce5ce524644",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89a53cb7577cf7c597c0adb9e7a53ce5ce524644"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5ed42fab9cc68ed43ba55a6ba8c22ff028cfc10"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 95,
      "deletions": 45
    },
    "files": [
      {
        "sha": "375c6621b41e81a35c7c07782daf2bcb1c6df3b7",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -144,6 +144,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentstatus.h \\\n   flatfile.h \\\n   fs.h \\\n   httprpc.h \\"
      },
      {
        "sha": "03013d3bca26b267efe3cefc1e095430b9258dfa",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -11,6 +11,17 @@\n \n namespace Consensus {\n \n+enum BuriedDeployment : int16_t\n+{\n+    // buried deployments get negative values to avoid overlap with SignalledDeployment\n+    DEPLOYMENT_HEIGHTINCB = std::numeric_limits<int16_t>::min(),\n+    DEPLOYMENT_CLTV,\n+    DEPLOYMENT_DERSIG,\n+    DEPLOYMENT_CSV,\n+    DEPLOYMENT_SEGWIT,\n+};\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+\n enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n@@ -90,7 +101,25 @@ struct Params {\n      */\n     bool signet_blocks{false};\n     std::vector<uint8_t> signet_challenge;\n+\n+    inline int DeploymentHeight(BuriedDeployment dep) const\n+    {\n+        switch (dep) {\n+        case DEPLOYMENT_HEIGHTINCB:\n+            return BIP34Height;\n+        case DEPLOYMENT_CLTV:\n+            return BIP65Height;\n+        case DEPLOYMENT_DERSIG:\n+            return BIP66Height;\n+        case DEPLOYMENT_CSV:\n+            return CSVHeight;\n+        case DEPLOYMENT_SEGWIT:\n+            return SegwitHeight;\n+        } // no default case, so the compiler can warn about missing cases\n+        return std::numeric_limits<int>::max();\n+    }\n };\n+\n } // namespace Consensus\n \n #endif // BITCOIN_CONSENSUS_PARAMS_H"
      },
      {
        "sha": "3bd12e3290c31978a9dd24e0f20102caf6a3a551",
        "filename": "src/deploymentstatus.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTSTATUS_H\n+#define BITCOIN_DEPLOYMENTSTATUS_H\n+\n+#include <chain.h>\n+\n+#include <limits>\n+\n+/** Determine if a deployment is active for the next block */\n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is active for this block */\n+inline bool DeploymentActiveAt(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return pindex->nHeight >= params.DeploymentHeight(dep);\n+}\n+\n+/** Determine if a deployment is enabled (can ever be active) */\n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "a9cc91c702eeda2f183ca148baa22a576729c361",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -17,6 +17,7 @@\n #include <chainparams.h>\n #include <compat/sanity.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <fs.h>\n #include <hash.h>\n #include <httprpc.h>\n@@ -1831,7 +1832,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         }\n     }\n \n-    if (chainparams.GetConsensus().SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n         // Advertise witness capabilities.\n         // The option to not set NODE_WITNESS is only used in the tests and should be removed.\n         nLocalServices = ServiceFlags(nLocalServices | NODE_WITNESS);"
      },
      {
        "sha": "24e3cf2d24a703f02d94f31328ebaac19a5a442b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -13,6 +13,7 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <pow.h>\n@@ -138,12 +139,12 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     // This is only needed in case the witness softfork activation is reverted\n     // (which would require a very deep reorganization).\n     // Note that the mempool would accept transactions with witness data before\n-    // IsWitnessEnabled, but we would only ever mine blocks after IsWitnessEnabled\n+    // the deployment is active, but we would only ever mine blocks after activation\n     // unless there is a massive block reorganization with the witness softfork\n     // not activated.\n     // TODO: replace this with a call to main to assess validity of a mempool\n     // transaction (which in most cases can be a no-op).\n-    fIncludeWitness = IsWitnessEnabled(pindexPrev, chainparams.GetConsensus());\n+    fIncludeWitness = DeploymentActiveAfter(pindexPrev, chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n \n     int nPackagesSelected = 0;\n     int nDescendantsUpdated = 0;"
      },
      {
        "sha": "3411b649375127d16f133dbcf69d848b3c4a05e3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -11,6 +11,7 @@\n #include <blockfilter.h>\n #include <chainparams.h>\n #include <consensus/validation.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <merkleblock.h>\n@@ -841,7 +842,7 @@ void PeerManagerImpl::FindNextBlocksToDownload(NodeId nodeid, unsigned int count\n                 // We consider the chain that this peer is on invalid.\n                 return;\n             }\n-            if (!State(nodeid)->fHaveWitness && IsWitnessEnabled(pindex->pprev, consensusParams)) {\n+            if (!State(nodeid)->fHaveWitness && DeploymentActiveAt(pindex, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n                 // We wouldn't download this block or its descendants from this peer.\n                 return;\n             }\n@@ -1318,7 +1319,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n         return;\n     nHighestFastAnnounce = pindex->nHeight;\n \n-    bool fWitnessEnabled = IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus());\n+    bool fWitnessEnabled = DeploymentActiveAt(pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT);\n     uint256 hashBlock(pblock->GetHash());\n \n     {\n@@ -1943,7 +1944,7 @@ void PeerManagerImpl::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             while (pindexWalk && !::ChainActive().Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n                 if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n                         !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, m_chainparams.GetConsensus()) || State(pfrom.GetId())->fHaveWitness)) {\n+                        (!DeploymentActiveAt(pindexWalk, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) || State(pfrom.GetId())->fHaveWitness)) {\n                     // We don't have this block, and it's not yet in flight.\n                     vToFetch.push_back(pindexWalk);\n                 }\n@@ -3295,7 +3296,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         if (!fAlreadyInFlight && !CanDirectFetch(m_chainparams.GetConsensus()))\n             return;\n \n-        if (IsWitnessEnabled(pindex->pprev, m_chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+        if (DeploymentActiveAt(pindex, m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n             return;"
      },
      {
        "sha": "5973d528096e7c976df7aad9df0882fd918f4370",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n@@ -762,7 +763,7 @@ static RPCHelpMan getblocktemplate()\n     pblock->nNonce = 0;\n \n     // NOTE: If at some point we support pre-segwit miners post-segwit-activation, this needs to take segwit support into consideration\n-    const bool fPreSegWit = (pindexPrev->nHeight + 1 < consensusParams.SegwitHeight);\n+    const bool fPreSegWit = !DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n "
      },
      {
        "sha": "17a635ea99a048dad6591ecaee79c08d92d4f577",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 33,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -15,6 +15,7 @@\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n #include <cuckoocache.h>\n+#include <deploymentstatus.h>\n #include <flatfile.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -1852,15 +1853,6 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n \n static ThresholdConditionCache warningcache[VERSIONBITS_NUM_BITS] GUARDED_BY(cs_main);\n \n-// 0.13.0 was shipped with a segwit deployment defined for testnet, but not for\n-// mainnet. We no longer need to support disabling the segwit deployment\n-// except for testing purposes, due to limitations of the functional test\n-// environment. See test/functional/p2p-segwit.py.\n-static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n-{\n-    return params.SegwitHeight != std::numeric_limits<int>::max();\n-}\n-\n static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams)\n {\n     unsigned int flags = SCRIPT_VERIFY_NONE;\n@@ -1879,22 +1871,22 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n \n     // Enforce WITNESS rules whenever P2SH is in effect (and the segwit\n     // deployment is defined).\n-    if (flags & SCRIPT_VERIFY_P2SH && IsScriptWitnessEnabled(consensusparams)) {\n+    if (flags & SCRIPT_VERIFY_P2SH && DeploymentEnabled(consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n     }\n \n     // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= consensusparams.BIP66Height) {\n+    if (DeploymentActiveAt(pindex, consensusparams, Consensus::DEPLOYMENT_DERSIG)) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= consensusparams.BIP65Height) {\n+    if (DeploymentActiveAt(pindex, consensusparams, Consensus::DEPLOYMENT_CLTV)) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n     // Start enforcing BIP112 (CHECKSEQUENCEVERIFY)\n-    if (pindex->nHeight >= consensusparams.CSVHeight) {\n+    if (DeploymentActiveAt(pindex, consensusparams, Consensus::DEPLOYMENT_CSV)) {\n         flags |= SCRIPT_VERIFY_CHECKSEQUENCEVERIFY;\n     }\n \n@@ -1904,7 +1896,7 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     }\n \n     // Start enforcing BIP147 NULLDUMMY (activated simultaneously with segwit)\n-    if (IsWitnessEnabled(pindex->pprev, consensusparams)) {\n+    if (DeploymentActiveAt(pindex, consensusparams, Consensus::DEPLOYMENT_SEGWIT)) {\n         flags |= SCRIPT_VERIFY_NULLDUMMY;\n     }\n \n@@ -2096,7 +2088,7 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n \n     // Start enforcing BIP68 (sequence locks)\n     int nLockTimeFlags = 0;\n-    if (pindex->nHeight >= chainparams.GetConsensus().CSVHeight) {\n+    if (DeploymentActiveAt(pindex, chainparams.GetConsensus(), Consensus::DEPLOYMENT_CSV)) {\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n@@ -3186,7 +3178,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     pindexNew->nDataPos = pos.nPos;\n     pindexNew->nUndoPos = 0;\n     pindexNew->nStatus |= BLOCK_HAVE_DATA;\n-    if (IsWitnessEnabled(pindexNew->pprev, consensusParams)) {\n+    if (DeploymentActiveAt(pindexNew, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         pindexNew->nStatus |= BLOCK_OPT_WITNESS;\n     }\n     pindexNew->RaiseValidity(BLOCK_VALID_TRANSACTIONS);\n@@ -3384,17 +3376,11 @@ bool CheckBlock(const CBlock& block, BlockValidationState& state, const Consensu\n     return true;\n }\n \n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int height = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n-    return (height >= params.SegwitHeight);\n-}\n-\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams)\n {\n     int commitpos = GetWitnessCommitmentIndex(block);\n     static const std::vector<unsigned char> nonce(32, 0x00);\n-    if (commitpos != NO_WITNESS_COMMITMENT && IsWitnessEnabled(pindexPrev, consensusParams) && !block.vtx[0]->HasWitness()) {\n+    if (commitpos != NO_WITNESS_COMMITMENT && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT) && !block.vtx[0]->HasWitness()) {\n         CMutableTransaction tx(*block.vtx[0]);\n         tx.vin[0].scriptWitness.stack.resize(1);\n         tx.vin[0].scriptWitness.stack[0] = nonce;\n@@ -3407,7 +3393,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n     std::vector<unsigned char> commitment;\n     int commitpos = GetWitnessCommitmentIndex(block);\n     std::vector<unsigned char> ret(32, 0x00);\n-    if (consensusParams.SegwitHeight != std::numeric_limits<int>::max()) {\n+    if (DeploymentEnabled(consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         if (commitpos == NO_WITNESS_COMMITMENT) {\n             uint256 witnessroot = BlockWitnessMerkleRoot(block, nullptr);\n             CHash256().Write(witnessroot).Write(ret).Finalize(witnessroot);\n@@ -3489,11 +3475,12 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, BlockValidatio\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    if ((block.nVersion < 2 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB)) ||\n+        (block.nVersion < 3 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_DERSIG)) ||\n+        (block.nVersion < 4 && DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CLTV))) {\n             return state.Invalid(BlockValidationResult::BLOCK_INVALID_HEADER, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n+    }\n \n     return true;\n }\n@@ -3510,7 +3497,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n \n     // Start enforcing BIP113 (Median Time Past).\n     int nLockTimeFlags = 0;\n-    if (nHeight >= consensusParams.CSVHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_CSV)) {\n         assert(pindexPrev != nullptr);\n         nLockTimeFlags |= LOCKTIME_MEDIAN_TIME_PAST;\n     }\n@@ -3527,7 +3514,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB))\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0]->vin[0].scriptSig.size() < expect.size() ||\n@@ -3545,7 +3532,7 @@ static bool ContextualCheckBlock(const CBlock& block, BlockValidationState& stat\n     //   {0xaa, 0x21, 0xa9, 0xed}, and the following 32 bytes are SHA256^2(witness root, witness reserved value). In case there are\n     //   multiple, the last one is used.\n     bool fHaveWitness = false;\n-    if (nHeight >= consensusParams.SegwitHeight) {\n+    if (DeploymentActiveAfter(pindexPrev, consensusParams, Consensus::DEPLOYMENT_SEGWIT)) {\n         int commitpos = GetWitnessCommitmentIndex(block);\n         if (commitpos != NO_WITNESS_COMMITMENT) {\n             bool malleated = false;\n@@ -4475,7 +4462,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     {\n         LOCK(cs_main);\n         for (const auto& entry : m_blockman.m_block_index) {\n-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n+            if (DeploymentActiveAt(entry.second, params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {\n                 EraseBlockData(entry.second);\n             }\n         }\n@@ -4490,7 +4477,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n             // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n             // blocks in ConnectBlock, we don't need to go back and\n             // re-download/re-verify blocks from before segwit actually activated.\n-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+            if (DeploymentActiveAfter(m_chain[nHeight - 1], params.GetConsensus(), Consensus::DEPLOYMENT_SEGWIT) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n                 break;\n             }\n             nHeight++;\n@@ -5496,7 +5483,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n         // We need to fake this flag so that CChainState::RewindBlockIndex()\n         // won't try to rewind the entire assumed-valid chain on startup.\n-        if (index->pprev && ::IsWitnessEnabled(index->pprev, ::Params().GetConsensus())) {\n+        if (index->pprev && DeploymentActiveAt(index, ::Params().GetConsensus(), Consensus::DEPLOYMENT_SEGWIT)) {\n             index->nStatus |= BLOCK_OPT_WITNESS;\n         }\n     }"
      },
      {
        "sha": "d037c32d50fd81e13a2974cfb964e136242697b3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5adb398ada6738cd3a6f419fdaf0bf3f800686/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "patch": "@@ -325,10 +325,6 @@ bool TestBlockValidity(BlockValidationState& state,\n                        bool fCheckPOW = true,\n                        bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** Check whether witness commitments are required for a block, and whether to enforce NULLDUMMY (BIP 147) rules.\n- *  Note that transaction witness validation rules are always enforced when P2SH is enforced. */\n-bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n "
      }
    ]
  },
  {
    "sha": "073ae5b33c51fe66800c364830f0b645046150d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzNhZTViMzNjNTFmZTY2ODAwYzM2NDgzMGYwYjY0NTA0NjE1MGQ3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-02T18:01:23Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:40Z"
      },
      "message": "[refactor] Add versionbits deployments to deploymentstatus.h\n\nAdds support for versionbits deployments to DeploymentEnabled,\nDeploymentActiveAfter and DeploymentActiveAt. Also moves versionbitscache\nfrom validation to deploymentstatus.",
      "tree": {
        "sha": "448db40b3768759caef2b3215fc0b97b71abb05b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/448db40b3768759caef2b3215fc0b97b71abb05b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/073ae5b33c51fe66800c364830f0b645046150d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/073ae5b33c51fe66800c364830f0b645046150d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/073ae5b33c51fe66800c364830f0b645046150d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/073ae5b33c51fe66800c364830f0b645046150d7/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5adb398ada6738cd3a6f419fdaf0bf3f800686",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad5adb398ada6738cd3a6f419fdaf0bf3f800686"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 46,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d5cb329b9dbbeb52b8bb5fce20e3d28a57c4c903",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -315,6 +315,7 @@ libbitcoin_server_a_SOURCES = \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n   dbwrapper.cpp \\\n+  deploymentstatus.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\"
      },
      {
        "sha": "a253cdc3e619244887c87a0aca2799844acb91aa",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -22,13 +22,14 @@ enum BuriedDeployment : int16_t\n };\n constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n \n-enum DeploymentPos\n+enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9."
      },
      {
        "sha": "8771012948cbe7b357f899e3c04eea0232477349",
        "filename": "src/deploymentstatus.cpp",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/deploymentstatus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/deploymentstatus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.cpp?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentstatus.h>\n+#include <versionbits.h>\n+\n+#include <consensus/params.h>\n+\n+VersionBitsCache versionbitscache;\n+\n+/* Basic sanity checking for BuriedDeployment/DeploymentPos enums and\n+ * ValidDeployment check */\n+\n+static_assert(ValidDeployment(Consensus::DEPLOYMENT_TESTDUMMY), \"sanity check of DeploymentPos failed (TESTDUMMY not valid)\");\n+static_assert(!ValidDeployment(Consensus::MAX_VERSION_BITS_DEPLOYMENTS), \"sanity check of DeploymentPos failed (MAX value considered valid)\");\n+static_assert(!ValidDeployment(static_cast<Consensus::BuriedDeployment>(Consensus::DEPLOYMENT_TESTDUMMY)), \"sanity check of BuridedDeployment failed (overlaps with DeploymentPos)\");"
      },
      {
        "sha": "c13d40520541ba7665ce2a9b20fb7985b441580c",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -6,28 +6,50 @@\n #define BITCOIN_DEPLOYMENTSTATUS_H\n \n #include <chain.h>\n+#include <versionbits.h>\n \n #include <limits>\n \n+/** Global cache for versionbits deployment status */\n+extern VersionBitsCache versionbitscache;\n+\n /** Determine if a deployment is active for the next block */\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return (pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1) >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+}\n+\n /** Determine if a deployment is active for this block */\n inline bool DeploymentActiveAt(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return pindex->nHeight >= params.DeploymentHeight(dep);\n }\n \n+inline bool DeploymentActiveAt(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return DeploymentActiveAfter(pindex->pprev, params, dep);\n+}\n+\n /** Determine if a deployment is enabled (can ever be active) */\n inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::BuriedDeployment dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n     return params.DeploymentHeight(dep) != std::numeric_limits<int>::max();\n }\n \n+inline bool DeploymentEnabled(const Consensus::Params& params, Consensus::DeploymentPos dep)\n+{\n+    assert(Consensus::ValidDeployment(dep));\n+    return params.vDeployments[dep].nTimeout != 0;\n+}\n+\n #endif // BITCOIN_DEPLOYMENTSTATUS_H"
      },
      {
        "sha": "c559fc9b5024bc94ccc964481e3f101c7ba39a0a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -12,6 +12,7 @@\n #include <coins.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n #include <node/coinstats.h>"
      },
      {
        "sha": "a514cccaab658c751d8b3649a20df673f38e9532",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -714,10 +714,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     // Check for non-standard pay-to-script-hash in inputs\n-    const auto& params = args.m_chainparams.GetConsensus();\n     assert(std::addressof(::ChainActive()) == std::addressof(m_active_chainstate.m_chain));\n-    auto taproot_state = VersionBitsState(m_active_chainstate.m_chain.Tip(), params, Consensus::DEPLOYMENT_TAPROOT, versionbitscache);\n-    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_state == ThresholdState::ACTIVE)) {\n+    const bool taproot_active = DeploymentActiveAt(m_active_chainstate.m_chain.Tip(), args.m_chainparams.GetConsensus(), Consensus::DEPLOYMENT_TAPROOT);\n+    if (fRequireStandard && !AreInputsStandard(tx, m_view, taproot_active)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n \n@@ -1810,8 +1809,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-VersionBitsCache versionbitscache;\n-\n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n@@ -1891,7 +1888,7 @@ static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consens\n     }\n \n     // Start enforcing Taproot using versionbits logic.\n-    if (VersionBitsState(pindex->pprev, consensusparams, Consensus::DEPLOYMENT_TAPROOT, versionbitscache) == ThresholdState::ACTIVE) {\n+    if (DeploymentActiveAt(pindex, consensusparams, Consensus::DEPLOYMENT_TAPROOT)) {\n         flags |= SCRIPT_VERIFY_TAPROOT;\n     }\n "
      },
      {
        "sha": "1b28cbecc26a4f902fc7238267595f3d54c9412e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -24,7 +24,6 @@\n #include <sync.h>\n #include <txmempool.h> // For CTxMemPool::cs\n #include <txdb.h>\n-#include <versionbits.h>\n #include <serialize.h>\n #include <util/check.h>\n #include <util/hasher.h>\n@@ -1000,8 +999,6 @@ CChain& ChainActive();\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-extern VersionBitsCache versionbitscache;\n-\n /**\n  * Determine what nVersion a new block should use.\n  */"
      }
    ]
  },
  {
    "sha": "aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTFkZWI3NTA3ZTFlOGJiM2M2YTI5ZGQ2ZGUyZDdjZDBkMzY0NTRi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-10-17T12:21:38Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:01:40Z"
      },
      "message": "[refactor] SoftForkPushBack and deploymentinfo\n\nrpc/blockchain.cpp: Rename BIP9SoftForkPushBack and BuriedSoftForkPushBack\nto SoftForkPushBack and have the compiler figure out which one to use\nbased on the deployment type. Avoids having to update the file when\nburying a deployment.\n\ndeploymentinfo: Rename versionbitsinfo to deploymentinfo and add\nnames of buried deployments, so they don't need to be duplicated in\nVBDeploymentInfo and getblockchaininfo.",
      "tree": {
        "sha": "7884071f82b0f818f3f3eaeac5152b041655be6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7884071f82b0f818f3f3eaeac5152b041655be6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "073ae5b33c51fe66800c364830f0b645046150d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/073ae5b33c51fe66800c364830f0b645046150d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/073ae5b33c51fe66800c364830f0b645046150d7"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 88,
      "deletions": 53
    },
    "files": [
      {
        "sha": "910d3cbec49438ce5ac4bb8e289759bd115cc84d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -144,6 +144,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   dbwrapper.h \\\n+  deploymentinfo.h \\\n   deploymentstatus.h \\\n   flatfile.h \\\n   fs.h \\\n@@ -262,7 +263,6 @@ BITCOIN_CORE_H = \\\n   validation.h \\\n   validationinterface.h \\\n   versionbits.h \\\n-  versionbitsinfo.h \\\n   wallet/bdb.h \\\n   wallet/coincontrol.h \\\n   wallet/coinselection.h \\\n@@ -524,6 +524,7 @@ libbitcoin_common_a_SOURCES = \\\n   compressor.cpp \\\n   core_read.cpp \\\n   core_write.cpp \\\n+  deploymentinfo.cpp \\\n   key.cpp \\\n   key_io.cpp \\\n   merkleblock.cpp \\\n@@ -542,7 +543,6 @@ libbitcoin_common_a_SOURCES = \\\n   script/sign.cpp \\\n   script/signingprovider.cpp \\\n   script/standard.cpp \\\n-  versionbitsinfo.cpp \\\n   warnings.cpp \\\n   $(BITCOIN_CORE_H)\n "
      },
      {
        "sha": "bb53b75210a0487d8dd3c09fc0daa90ac1c37487",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -7,9 +7,9 @@\n \n #include <chainparamsseeds.h>\n #include <consensus/merkle.h>\n+#include <deploymentinfo.h>\n #include <hash.h> // for signet block challenge hash\n #include <util/system.h>\n-#include <versionbitsinfo.h>\n \n #include <assert.h>\n "
      },
      {
        "sha": "fc622cf04401242b20937c308f3a4b013b342af6",
        "filename": "src/deploymentinfo.cpp",
        "status": "added",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2016-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <deploymentinfo.h>\n+\n+#include <consensus/params.h>\n+\n+const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+    {\n+        /*.name =*/ \"testdummy\",\n+        /*.gbt_force =*/ true,\n+    },\n+    {\n+        /*.name =*/ \"taproot\",\n+        /*.gbt_force =*/ true,\n+    },\n+};\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep)\n+{\n+    assert(ValidDeployment(dep));\n+    switch (dep) {\n+    case Consensus::DEPLOYMENT_HEIGHTINCB:\n+        return \"bip34\";\n+    case Consensus::DEPLOYMENT_CLTV:\n+        return \"bip65\";\n+    case Consensus::DEPLOYMENT_DERSIG:\n+        return \"bip66\";\n+    case Consensus::DEPLOYMENT_CSV:\n+        return \"csv\";\n+    case Consensus::DEPLOYMENT_SEGWIT:\n+        return \"segwit\";\n+    } // no default case, so the compiler can warn about missing cases\n+    return \"\";\n+}\n+\n+"
      },
      {
        "sha": "c2e2f6cdb63ef61d278e1028a30110589256f1a5",
        "filename": "src/deploymentinfo.h",
        "status": "added",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/deploymentinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/deploymentinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.h?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -0,0 +1,29 @@\n+// Copyright (c) 2016-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DEPLOYMENTINFO_H\n+#define BITCOIN_DEPLOYMENTINFO_H\n+\n+#include <consensus/params.h>\n+\n+#include <string>\n+\n+struct VBDeploymentInfo {\n+    /** Deployment name */\n+    const char *name;\n+    /** Whether GBT clients can safely ignore this rule in simplified usage */\n+    bool gbt_force;\n+};\n+\n+extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS];\n+\n+std::string DeploymentName(Consensus::BuriedDeployment dep);\n+\n+inline std::string DeploymentName(Consensus::DeploymentPos pos)\n+{\n+    assert(Consensus::ValidDeployment(pos));\n+    return VersionBitsDeploymentInfo[pos].name;\n+}\n+\n+#endif // BITCOIN_DEPLOYMENTINFO_H"
      },
      {
        "sha": "847d226067163daf8eda22c02d3ccd8eea0b5c3e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -10,8 +10,10 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n+#include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n@@ -37,6 +39,7 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n+#include <versionbits.h>\n #include <warnings.h>\n \n #include <stdint.h>\n@@ -1206,25 +1209,25 @@ static RPCHelpMan verifychain()\n     };\n }\n \n-static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name, int height) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static void SoftForkDescPushBack(UniValue& softforks, const Consensus::Params& params, Consensus::BuriedDeployment dep) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For buried deployments.\n     // A buried deployment is one where the height of the activation has been hardcoded into\n     // the client implementation long after the consensus change has activated. See BIP 90.\n     // Buried deployments with activation height value of\n     // std::numeric_limits<int>::max() are disabled and thus hidden.\n-    if (height == std::numeric_limits<int>::max()) return;\n+    if (!DeploymentEnabled(params, dep)) return;\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n     // getblockchaininfo reports the softfork as active from when the chain height is\n     // one below the activation height\n-    rv.pushKV(\"active\", ::ChainActive().Tip()->nHeight + 1 >= height);\n-    rv.pushKV(\"height\", height);\n-    softforks.pushKV(name, rv);\n+    rv.pushKV(\"active\", DeploymentActiveAfter(::ChainActive().Tip(), params, dep));\n+    rv.pushKV(\"height\", params.DeploymentHeight(dep));\n+    softforks.pushKV(DeploymentName(dep), rv);\n }\n \n-static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n+static void SoftForkDescPushBack(UniValue& softforks, const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n {\n     // For BIP9 deployments.\n     // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n@@ -1269,7 +1272,7 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n     rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n \n-    softforks.pushKV(name, rv);\n+    softforks.pushKV(DeploymentName(id), rv);\n }\n \n RPCHelpMan getblockchaininfo()\n@@ -1361,13 +1364,13 @@ RPCHelpMan getblockchaininfo()\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     UniValue softforks(UniValue::VOBJ);\n-    BuriedForkDescPushBack(softforks, \"bip34\", consensusParams.BIP34Height);\n-    BuriedForkDescPushBack(softforks, \"bip66\", consensusParams.BIP66Height);\n-    BuriedForkDescPushBack(softforks, \"bip65\", consensusParams.BIP65Height);\n-    BuriedForkDescPushBack(softforks, \"csv\", consensusParams.CSVHeight);\n-    BuriedForkDescPushBack(softforks, \"segwit\", consensusParams.SegwitHeight);\n-    BIP9SoftForkDescPushBack(softforks, \"testdummy\", consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    BIP9SoftForkDescPushBack(softforks, \"taproot\", consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+    SoftForkDescPushBack(softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n     obj.pushKV(\"softforks\",             softforks);\n \n     obj.pushKV(\"warnings\", GetWarnings(false).original);"
      },
      {
        "sha": "cd7dc7e8421a3c6212ef98db5c94066ab918a84a",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <deploymentinfo.h>\n #include <deploymentstatus.h>\n #include <key_io.h>\n #include <miner.h>\n@@ -34,7 +35,6 @@\n #include <util/translation.h>\n #include <validation.h>\n #include <validationinterface.h>\n-#include <versionbitsinfo.h>\n #include <warnings.h>\n \n #include <memory>"
      },
      {
        "sha": "fa41bad46d97a132447f34316c6475a3df6e58fa",
        "filename": "src/versionbitsinfo.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/versionbitsinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/versionbitsinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.cpp?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -1,18 +0,0 @@\n-// Copyright (c) 2016-2020 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <versionbitsinfo.h>\n-\n-#include <consensus/params.h>\n-\n-const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n-    {\n-        /*.name =*/ \"testdummy\",\n-        /*.gbt_force =*/ true,\n-    },\n-    {\n-        /*.name =*/ \"taproot\",\n-        /*.gbt_force =*/ true,\n-    },\n-};"
      },
      {
        "sha": "a7822bc747a977df697e1e8975cd5558948820c8",
        "filename": "src/versionbitsinfo.h",
        "status": "removed",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/073ae5b33c51fe66800c364830f0b645046150d7/src/versionbitsinfo.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/073ae5b33c51fe66800c364830f0b645046150d7/src/versionbitsinfo.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbitsinfo.h?ref=073ae5b33c51fe66800c364830f0b645046150d7",
        "patch": "@@ -1,17 +0,0 @@\n-// Copyright (c) 2016-2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_VERSIONBITSINFO_H\n-#define BITCOIN_VERSIONBITSINFO_H\n-\n-struct VBDeploymentInfo {\n-    /** Deployment name */\n-    const char *name;\n-    /** Whether GBT clients can safely ignore this rule in simplified usage */\n-    bool gbt_force;\n-};\n-\n-extern const struct VBDeploymentInfo VersionBitsDeploymentInfo[];\n-\n-#endif // BITCOIN_VERSIONBITSINFO_H"
      }
    ]
  },
  {
    "sha": "3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2UyNDA1YzU4ZWQ1ZWE5MDEzNjhlODNjYjc4Y2VmYTBiZGU0YjRk",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T01:19:06Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:06:06Z"
      },
      "message": "[refactor] versionbits: make VersionBitsCache a full class\n\nMoves the VersionBits* functions to be methods of the cache class,\nand makes the cache and its lock private to the class.",
      "tree": {
        "sha": "28b3707cf22249d98c216680a1241cee62d72db7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28b3707cf22249d98c216680a1241cee62d72db7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa1deb7507e1e8bb3c6a29dd6de2d7cd0d36454b"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 37,
      "deletions": 30
    },
    "files": [
      {
        "sha": "659e69ff08e62f021f718575ac106ba7308a5c4e",
        "filename": "src/deploymentstatus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/deploymentstatus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/deploymentstatus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentstatus.h?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -23,7 +23,7 @@ inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus\n inline bool DeploymentActiveAfter(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos dep)\n {\n     assert(Consensus::ValidDeployment(dep));\n-    return ThresholdState::ACTIVE == VersionBitsState(pindexPrev, params, dep, versionbitscache);\n+    return ThresholdState::ACTIVE == versionbitscache.State(pindexPrev, params, dep);\n }\n \n /** Determine if a deployment is active for this block */"
      },
      {
        "sha": "012c309611f4b92bcfa12670aad6ba61d7f8d610",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -1236,7 +1236,7 @@ static void SoftForkDescPushBack(UniValue& softforks, const Consensus::Params& c\n     if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = VersionBitsState(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    const ThresholdState thresholdState = versionbitscache.State(::ChainActive().Tip(), consensusParams, id);\n     switch (thresholdState) {\n     case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n     case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n@@ -1250,12 +1250,12 @@ static void SoftForkDescPushBack(UniValue& softforks, const Consensus::Params& c\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = VersionBitsStateSinceHeight(::ChainActive().Tip(), consensusParams, id, versionbitscache);\n+    int64_t since_height = versionbitscache.StateSinceHeight(::ChainActive().Tip(), consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n     {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = VersionBitsStatistics(::ChainActive().Tip(), consensusParams, id);\n+        BIP9Stats statsStruct = versionbitscache.Statistics(::ChainActive().Tip(), consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"threshold\", statsStruct.threshold);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);"
      },
      {
        "sha": "307073178f1e0dd405d8dda41a1ff1eb9e28b13f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -829,15 +829,15 @@ static RPCHelpMan getblocktemplate()\n     UniValue vbavailable(UniValue::VOBJ);\n     for (int j = 0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n         Consensus::DeploymentPos pos = Consensus::DeploymentPos(j);\n-        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        ThresholdState state = versionbitscache.State(pindexPrev, consensusParams, pos);\n         switch (state) {\n             case ThresholdState::DEFINED:\n             case ThresholdState::FAILED:\n                 // Not exposed to GBT at all\n                 break;\n             case ThresholdState::LOCKED_IN:\n                 // Ensure bit is set in block version\n-                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+                pblock->nVersion |= versionbitscache.Mask(consensusParams, pos);\n                 // FALL THROUGH to get vbavailable set...\n             case ThresholdState::STARTED:\n             {\n@@ -846,7 +846,7 @@ static RPCHelpMan getblocktemplate()\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     if (!vbinfo.gbt_force) {\n                         // If the client doesn't support this, don't indicate it in the [default] version\n-                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                        pblock->nVersion &= ~versionbitscache.Mask(consensusParams, pos);\n                     }\n                 }\n                 break;"
      },
      {
        "sha": "0402848092a9eef74938ba562e8c9607f0930aab",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -5,6 +5,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <consensus/params.h>\n+#include <deploymentstatus.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n #include <versionbits.h>\n@@ -226,7 +227,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n     const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n     for (int i=0; i<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        uint32_t bitmask = VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n+        uint32_t bitmask = versionbitscache.Mask(mainnetParams, static_cast<Consensus::DeploymentPos>(i));\n         // Make sure that no deployment tries to set an invalid bit.\n         BOOST_CHECK_EQUAL(bitmask & ~(uint32_t)VERSIONBITS_TOP_MASK, bitmask);\n \n@@ -238,7 +239,7 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // activated soft fork could be later changed to be earlier to avoid\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n-            if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n+            if (versionbitscache.Mask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n                 BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n                         mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n             }"
      },
      {
        "sha": "96aa900ec704416098c8d5ab776a8cebeca204ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -1814,9 +1814,9 @@ int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Para\n     int32_t nVersion = VERSIONBITS_TOP_BITS;\n \n     for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = VersionBitsState(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i), versionbitscache);\n+        ThresholdState state = versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n         if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= VersionBitsMask(params, static_cast<Consensus::DeploymentPos>(i));\n+            nVersion |= versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n         }\n     }\n "
      },
      {
        "sha": "07f49540e267fad8c1fb02960d673a7673c9f7ae",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -185,24 +185,24 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n \n } // namespace\n \n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.cs);\n-    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(cs);\n+    return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, caches[pos]);\n }\n \n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n }\n \n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    LOCK(cache.cs);\n-    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+    LOCK(cs);\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, caches[pos]);\n }\n \n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);\n }"
      },
      {
        "sha": "bba2ebc6e2b73866a41f40c1cdf3872f059f42dd",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 17,
        "deletions": 11,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "patch": "@@ -72,22 +72,28 @@ class AbstractThresholdConditionChecker {\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n-/** BIP 9 allows multiple softforks to be deployed in parallel. We cache per-period state for every one of them\n- *  keyed by the bit position used to signal support. */\n-struct VersionBitsCache\n+/** BIP 9 allows multiple softforks to be deployed in parallel. We cache\n+ *  per-period state for every one of them. */\n+\n+class VersionBitsCache\n {\n+private:\n     Mutex cs;\n     ThresholdConditionCache caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(cs);\n \n+public:\n+    /** Get the numerical statistics for the BIP9 state for a given deployment as at pindexPrev. */\n+    static BIP9Stats Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n+    ThresholdState State(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n+    /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n+    int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+\n     void Clear();\n };\n \n-/** Get the BIP9 state for a given deployment for the block after pindexPrev. */\n-ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-/** Get the numerical statistics for the BIP9 state for a given deployment as at pindexPrev. */\n-BIP9Stats VersionBitsStatistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n-/** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n-int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n-uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n-\n #endif // BITCOIN_VERSIONBITS_H"
      }
    ]
  },
  {
    "sha": "3a32ec4a0562a009c65182071e822bf556be01a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTMyZWM0YTA1NjJhMDA5YzY1MTgyMDcxZTgyMmJmNTU2YmUwMWE4",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-12-29T01:36:02Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:06:08Z"
      },
      "message": "[refactor] move ComputeBlockVersion from validation to VersionBitsCache\n\nThis also changes ComputeBlockVersion to take the vbcache lock once,\nrather than once for each deployment.",
      "tree": {
        "sha": "6f018ec7970f4f9b7a2cc8d65b6acdb0d30fdb41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f018ec7970f4f9b7a2cc8d65b6acdb0d30fdb41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a32ec4a0562a009c65182071e822bf556be01a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a32ec4a0562a009c65182071e822bf556be01a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a32ec4a0562a009c65182071e822bf556be01a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a32ec4a0562a009c65182071e822bf556be01a8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ce2405c58ed5ea901368e83cb78cefa0bde4b4d"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 36,
      "deletions": 35
    },
    "files": [
      {
        "sha": "32b117ce124334196fa479f887632ae445c2090d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -122,7 +122,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n \n-    pblock->nVersion = ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n+    pblock->nVersion = versionbitscache.ComputeBlockVersion(pindexPrev, chainparams.GetConsensus());\n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n     if (chainparams.MineBlocksOnDemand())"
      },
      {
        "sha": "f2fbb4196f0d5f7d26f55d86c351e62a95faa637",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -273,29 +273,29 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // should not be set.\n     CBlockIndex *lastBlock = nullptr;\n     lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n     for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n         lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n         // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n         // to be 4, and the bit we're testing happens to be bit 28.\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n     }\n     // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n     // CBV should still not yet set the bit.\n     nTime = nStartTime;\n     for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n         lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+        BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n     }\n \n     // Advance to the next period and transition to STARTED,\n     lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n     // Check that ComputeBlockVersion will set the bit until nTimeout\n     nTime += 600;\n@@ -304,8 +304,8 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // These blocks are all before nTimeout is reached.\n     while (nTime < nTimeout && blocksToMine > 0) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+        BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n         blocksToMine--;\n         nTime += 600;\n         nHeight += 1;\n@@ -316,12 +316,12 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // the bit until the period transition.\n     for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n         lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+        BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n         nHeight += 1;\n     }\n     // The next block should trigger no longer setting the bit.\n     lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n@@ -331,24 +331,24 @@ BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n     // Mine one period worth of blocks, and check that the bit will be on for the\n     // next period.\n     lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Mine another period worth of blocks, signaling the new bit.\n     lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n     lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n+    BOOST_CHECK((versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n     lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n+    BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses\n     // VERSIONBITS_LAST_OLD_BLOCK_VERSION.\n-    //BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n+    //BOOST_CHECK_EQUAL(versionbitscache.ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n }\n \n "
      },
      {
        "sha": "14bb951a4d260022687c1bdfbbd76c61d1daf555",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 15,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -1809,20 +1809,6 @@ void StopScriptCheckWorkerThreads()\n     scriptcheckqueue.StopWorkerThreads();\n }\n \n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n-{\n-    int32_t nVersion = VERSIONBITS_TOP_BITS;\n-\n-    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n-        ThresholdState state = versionbitscache.State(pindexPrev, params, static_cast<Consensus::DeploymentPos>(i));\n-        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n-            nVersion |= versionbitscache.Mask(params, static_cast<Consensus::DeploymentPos>(i));\n-        }\n-    }\n-\n-    return nVersion;\n-}\n-\n /**\n  * Threshold condition checker that triggers when unknown versionbits are seen on the network.\n  */\n@@ -1844,7 +1830,7 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n         return pindex->nHeight >= params.MinBIP9WarningHeight &&\n                ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&\n-               ((ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n+               ((versionbitscache.ComputeBlockVersion(pindex->pprev, params) >> bit) & 1) == 0;\n     }\n };\n "
      },
      {
        "sha": "20b26e33a3c3b4a1be873abea5e952f8c3787772",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -999,11 +999,6 @@ CChain& ChainActive();\n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n \n-/**\n- * Determine what nVersion a new block should use.\n- */\n-int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n-\n /** Get block file info entry for one block file */\n CBlockFileInfo* GetBlockFileInfo(size_t n);\n "
      },
      {
        "sha": "41163dc857718d2705f78e5f537983c33011789c",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -207,6 +207,22 @@ uint32_t VersionBitsCache::Mask(const Consensus::Params& params, Consensus::Depl\n     return VersionBitsConditionChecker(pos).Mask(params);\n }\n \n+int32_t VersionBitsCache::ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n+{\n+    LOCK(cs);\n+    int32_t nVersion = VERSIONBITS_TOP_BITS;\n+\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; i++) {\n+        Consensus::DeploymentPos pos = static_cast<Consensus::DeploymentPos>(i);\n+        ThresholdState state = VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, caches[pos]);\n+        if (state == ThresholdState::LOCKED_IN || state == ThresholdState::STARTED) {\n+            nVersion |= Mask(params, pos);\n+        }\n+    }\n+\n+    return nVersion;\n+}\n+\n void VersionBitsCache::Clear()\n {\n     LOCK(cs);"
      },
      {
        "sha": "a1def478349fbdc9ae0556adc3ce554df7969310",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a32ec4a0562a009c65182071e822bf556be01a8/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a32ec4a0562a009c65182071e822bf556be01a8/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=3a32ec4a0562a009c65182071e822bf556be01a8",
        "patch": "@@ -93,6 +93,10 @@ class VersionBitsCache\n     /** Get the block height at which the BIP9 deployment switched into the state for the block after pindexPrev. */\n     int StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n+    /** Determine what nVersion a new block should use\n+     */\n+    int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n+\n     void Clear();\n };\n "
      }
    ]
  },
  {
    "sha": "b8413a636284d883f73ccf3ff7a6fbfe56115440",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODQxM2E2MzYyODRkODgzZjczY2NmM2ZmN2E2ZmJmZTU2MTE1NDQw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-03T18:13:17Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:09:06Z"
      },
      "message": "Switch taproot to buried deployment",
      "tree": {
        "sha": "deb36b667091a1c3c64a21f0b130e166e695f324",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deb36b667091a1c3c64a21f0b130e166e695f324"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8413a636284d883f73ccf3ff7a6fbfe56115440",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8413a636284d883f73ccf3ff7a6fbfe56115440",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8413a636284d883f73ccf3ff7a6fbfe56115440",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8413a636284d883f73ccf3ff7a6fbfe56115440/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a32ec4a0562a009c65182071e822bf556be01a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a32ec4a0562a009c65182071e822bf556be01a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a32ec4a0562a009c65182071e822bf556be01a8"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 29,
      "deletions": 32
    },
    "files": [
      {
        "sha": "dee0fa78cbe003af9b03f35ff0cdedfc2e997253",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 24,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "patch": "@@ -72,6 +72,7 @@ class CMainParams : public CChainParams {\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n+        consensus.TaprootHeight = std::numeric_limits<int>::max(); // never active\n         consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -84,11 +85,6 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n-\n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n \n@@ -189,6 +185,7 @@ class CTestNetParams : public CChainParams {\n         consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.CSVHeight = 770112; // 00000000025e930139bac5c6c31a403776da130831ab85be56578f3fa75369bb\n         consensus.SegwitHeight = 834624; // 00000000002b980fcd729daaa248fd9316a5200e9b367f4ff2c42453e84201ca\n+        consensus.TaprootHeight = std::numeric_limits<int>::max(); // never active\n         consensus.MinBIP9WarningHeight = 836640; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -201,11 +198,6 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Deployment of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n-\n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n \n@@ -324,6 +316,7 @@ class SigNetParams : public CChainParams {\n         consensus.BIP66Height = 1;\n         consensus.CSVHeight = 1;\n         consensus.SegwitHeight = 1;\n+        consensus.TaprootHeight = 1;\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n@@ -336,11 +329,6 @@ class SigNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n \n-        // Activation of Taproot (BIPs 340-342)\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-\n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n         h << consensus.signet_challenge;\n@@ -389,6 +377,7 @@ class CRegTestParams : public CChainParams {\n         consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in functional tests)\n         consensus.CSVHeight = 432; // CSV activated on regtest (Used in rpc activation tests)\n         consensus.SegwitHeight = 0; // SEGWIT is always activated on regtest unless overridden\n+        consensus.TaprootHeight = 0; // Taproot is always activated on regtest unless overridden\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n@@ -400,9 +389,6 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n@@ -474,18 +460,26 @@ class CRegTestParams : public CChainParams {\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n \n-void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n+static void override_deployment_height(const ArgsManager& args, Consensus::BuriedDeployment dep, int& dep_height)\n {\n-    if (args.IsArgSet(\"-segwitheight\")) {\n-        int64_t height = args.GetArg(\"-segwitheight\", consensus.SegwitHeight);\n+    std::string dep_name = DeploymentName(dep);\n+    std::string argname = strprintf(\"-%sheight\", dep_name);\n+    if (args.IsArgSet(argname)) {\n+        int64_t height = args.GetArg(argname, dep_height);\n         if (height < -1 || height >= std::numeric_limits<int>::max()) {\n-            throw std::runtime_error(strprintf(\"Activation height %ld for segwit is out of valid range. Use -1 to disable segwit.\", height));\n+            throw std::runtime_error(strprintf(\"Activation height %ld for %s is out of valid range. Use -1 to disable %s.\", height, argname, dep_name));\n         } else if (height == -1) {\n-            LogPrintf(\"Segwit disabled for testing\\n\");\n+            LogPrintf(\"%s disabled for testing\\n\", dep_name);\n             height = std::numeric_limits<int>::max();\n         }\n-        consensus.SegwitHeight = static_cast<int>(height);\n+        dep_height = static_cast<int>(height);\n     }\n+}\n+\n+void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n+{\n+    override_deployment_height(args, Consensus::DEPLOYMENT_SEGWIT, consensus.SegwitHeight);\n+    override_deployment_height(args, Consensus::DEPLOYMENT_TAPROOT, consensus.TaprootHeight);\n \n     if (!args.IsArgSet(\"-vbparams\")) return;\n "
      },
      {
        "sha": "5b1e294dd90ac70fbafef69b8d74e0d8728fbfbc",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "patch": "@@ -22,6 +22,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n     argsman.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-taprootheight=<n>\", \"Set the activation height of taproot. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "65809138edff83f136d121b462344eff7f3da12e",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "patch": "@@ -19,17 +19,17 @@ enum BuriedDeployment : int16_t\n     DEPLOYMENT_DERSIG,\n     DEPLOYMENT_CSV,\n     DEPLOYMENT_SEGWIT,\n+    DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n };\n-constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_SEGWIT; }\n+constexpr bool ValidDeployment(BuriedDeployment dep) { return DEPLOYMENT_HEIGHTINCB <= dep && dep <= DEPLOYMENT_TAPROOT; }\n \n enum DeploymentPos : uint16_t\n {\n     DEPLOYMENT_TESTDUMMY,\n-    DEPLOYMENT_TAPROOT, // Deployment of Schnorr/Taproot (BIPs 340-342)\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n-constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TAPROOT; }\n+constexpr bool ValidDeployment(DeploymentPos dep) { return DEPLOYMENT_TESTDUMMY <= dep && dep <= DEPLOYMENT_TESTDUMMY; }\n \n /**\n  * Struct for each individual consensus rule change using BIP9.\n@@ -73,6 +73,8 @@ struct Params {\n      * Note that segwit v0 script rules are enforced on all blocks except the\n      * BIP 16 exception blocks. */\n     int SegwitHeight;\n+    /** Block height at which Taproot (BIP340, BIP341, BIP342) becomes active. */\n+    int TaprootHeight;\n     /** Don't warn about unknown BIP 9 activations below this height.\n      * This prevents us from warning about the CSV and segwit activations. */\n     int MinBIP9WarningHeight;\n@@ -116,6 +118,8 @@ struct Params {\n             return CSVHeight;\n         case DEPLOYMENT_SEGWIT:\n             return SegwitHeight;\n+        case DEPLOYMENT_TAPROOT:\n+            return TaprootHeight;\n         } // no default case, so the compiler can warn about missing cases\n         return std::numeric_limits<int>::max();\n     }"
      },
      {
        "sha": "34563e7df4dcf83e86b487925a5bd97620de4cb3",
        "filename": "src/deploymentinfo.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/deploymentinfo.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8413a636284d883f73ccf3ff7a6fbfe56115440/src/deploymentinfo.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/deploymentinfo.cpp?ref=b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "patch": "@@ -11,10 +11,6 @@ const struct VBDeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_B\n         /*.name =*/ \"testdummy\",\n         /*.gbt_force =*/ true,\n     },\n-    {\n-        /*.name =*/ \"taproot\",\n-        /*.gbt_force =*/ true,\n-    },\n };\n \n std::string DeploymentName(Consensus::BuriedDeployment dep)\n@@ -31,6 +27,8 @@ std::string DeploymentName(Consensus::BuriedDeployment dep)\n         return \"csv\";\n     case Consensus::DEPLOYMENT_SEGWIT:\n         return \"segwit\";\n+    case Consensus::DEPLOYMENT_TAPROOT:\n+        return \"taproot\";\n     } // no default case, so the compiler can warn about missing cases\n     return \"\";\n }"
      },
      {
        "sha": "da7be9d5d871debfa6e3c29fae3a0e93852e9f9a",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8413a636284d883f73ccf3ff7a6fbfe56115440/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8413a636284d883f73ccf3ff7a6fbfe56115440/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "patch": "@@ -1201,7 +1201,7 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n-        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:1:1\"], [\"-par=1\"]]\n+        self.extra_args = [[\"-par=1\", \"-taprootheight=-1\"], [\"-par=1\"]]\n \n     def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n "
      }
    ]
  },
  {
    "sha": "6e08b0852c3759e18ee418d1730094ac80e7adc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTA4YjA4NTJjMzc1OWUxOGVlNDE4ZDE3MzAwOTRhYzgwZTdhZGM2",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-03T18:45:58Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-04T16:09:06Z"
      },
      "message": "gbt: encourage signalling by vbit 2 prior to taproot activation",
      "tree": {
        "sha": "1626a1aea1ed7356b9dbd5883557dc37ff56ae1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1626a1aea1ed7356b9dbd5883557dc37ff56ae1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e08b0852c3759e18ee418d1730094ac80e7adc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e08b0852c3759e18ee418d1730094ac80e7adc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e08b0852c3759e18ee418d1730094ac80e7adc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e08b0852c3759e18ee418d1730094ac80e7adc6/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8413a636284d883f73ccf3ff7a6fbfe56115440",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8413a636284d883f73ccf3ff7a6fbfe56115440"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6ddd5643185e432b5ddff79f93d1cca4adfeeaec",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e08b0852c3759e18ee418d1730094ac80e7adc6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e08b0852c3759e18ee418d1730094ac80e7adc6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6e08b0852c3759e18ee418d1730094ac80e7adc6",
        "patch": "@@ -867,10 +867,17 @@ static RPCHelpMan getblocktemplate()\n             }\n         }\n     }\n+\n+    int taproot_height = consensusParams.DeploymentHeight(Consensus::DEPLOYMENT_TAPROOT);\n+    int64_t height = pindexPrev->nHeight+1;\n+    int vbrequired = 0;\n+    if (height < taproot_height && taproot_height <= height + 4*consensusParams.nMinerConfirmationWindow) {\n+        vbrequired = (VERSIONBITS_TOP_BITS | (1 << 2));\n+    }\n     result.pushKV(\"version\", pblock->nVersion);\n     result.pushKV(\"rules\", aRules);\n     result.pushKV(\"vbavailable\", vbavailable);\n-    result.pushKV(\"vbrequired\", int(0));\n+    result.pushKV(\"vbrequired\", vbrequired);\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here"
      }
    ]
  },
  {
    "sha": "69e36bc152b208b96e2f9e5eba1319b5818d250e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWUzNmJjMTUyYjIwOGI5NmUyZjllNWViYTEzMTliNTgxOGQyNTBl",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-03T18:46:25Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-03-06T10:31:20Z"
      },
      "message": "consensus: enable taproot at flag day height 747936 -- DO NOT RUN",
      "tree": {
        "sha": "18756d87d316cd0b24edd79953eb924386578514",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18756d87d316cd0b24edd79953eb924386578514"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69e36bc152b208b96e2f9e5eba1319b5818d250e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e36bc152b208b96e2f9e5eba1319b5818d250e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69e36bc152b208b96e2f9e5eba1319b5818d250e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e36bc152b208b96e2f9e5eba1319b5818d250e/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e08b0852c3759e18ee418d1730094ac80e7adc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e08b0852c3759e18ee418d1730094ac80e7adc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e08b0852c3759e18ee418d1730094ac80e7adc6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c3a0a324bffa11f80cc7dc177027df84bb966cd8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e36bc152b208b96e2f9e5eba1319b5818d250e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e36bc152b208b96e2f9e5eba1319b5818d250e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=69e36bc152b208b96e2f9e5eba1319b5818d250e",
        "patch": "@@ -72,7 +72,10 @@ class CMainParams : public CChainParams {\n         consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.CSVHeight = 419328; // 000000000000000004a1b34462cb8aeebd5799177f7a29cf28f2d1961716b5b5\n         consensus.SegwitHeight = 481824; // 0000000000000000001c8018d9cb3b742ef25114f27563e3fc4a1902167f9893\n-        consensus.TaprootHeight = std::numeric_limits<int>::max(); // never active\n+\n+        consensus.TaprootHeight = 747936; // expected early August 2022\n+        assert(false);\n+\n         consensus.MinBIP9WarningHeight = 483840; // segwit activation height + miner confirmation window\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks"
      }
    ]
  }
]