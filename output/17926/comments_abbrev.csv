DrahtBot,2020-01-15 03:00:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17972 (tests: Add fuzzing harness for CKey and key related functions by practicalswift)\n\nIf you consider this pull requ",https://github.com/bitcoin/bitcoin/pull/17926#issuecomment-574473383,574473383,
practicalswift,2020-01-21 11:55:10,Rebased! :),https://github.com/bitcoin/bitcoin/pull/17926#issuecomment-576648729,576648729,
practicalswift,2020-03-07 13:42:22,@MarcoFalke Thanks for great feedback. All feedback addressed. Please re-review :),https://github.com/bitcoin/bitcoin/pull/17926#issuecomment-596089826,596089826,
MarcoFalke,2020-03-05 19:22:36,Can test a roundtrip of `FormatMoney<->ParseMoney`?,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r388510232,388510232,src/test/fuzz/integer.cpp
MarcoFalke,2020-03-05 19:25:25,"\n\nCan test a roundtrip of `ValueFromAmount.getValStr<->ParseMoney`?\n",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r388511843,388511843,src/test/fuzz/integer.cpp
MarcoFalke,2020-03-05 19:27:35,"```suggestion\n    (void)GetKeyForDestination(/* store */ {}, tx_destination);\n```",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r388513087,388513087,src/test/fuzz/key_io.cpp
MarcoFalke,2020-03-05 19:28:38,"```suggestion\n    TxToUniv(tx, /* hashBlock */ {}, u);\n```",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r388513651,388513651,src/test/fuzz/transaction.cpp
practicalswift,2020-03-07 13:41:25,Very good idea! Thanks for the suggestion. Now added :),https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389255464,389255464,src/test/fuzz/integer.cpp
practicalswift,2020-03-07 13:41:37,Another very good idea! Thanks! Now added :),https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389255485,389255485,src/test/fuzz/integer.cpp
practicalswift,2020-03-07 13:41:43,Fixed!,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389255497,389255497,src/test/fuzz/key_io.cpp
practicalswift,2020-03-07 13:41:49,Fixed!,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389255504,389255504,src/test/fuzz/transaction.cpp
MarcoFalke,2020-03-07 14:19:43,"```\ncore_write.cpp:21:29: runtime error: negation of -9223372036854775808 cannot be represented in type 'CAmount' (aka 'long'); cast to an unsigned type to negate this value to itself\n\n    #0 0x5603b409bffb in ValueFromAmount(long const&) /home/travis/build/bitcoin/bitcoin/build/bitcoin-x86_64-pc-linux-gnu/src/core_write.cpp:21:29\n\n    #1 0x5603b40a7304 in TxToUniv(CTransaction const&, u",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389257830,389257830,src/test/fuzz/transaction.cpp
practicalswift,2020-03-07 14:37:58,Thanks. Now fixed. Happened to rebase on `master` too -- blaming muscle memory :),https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389258961,389258961,src/test/fuzz/transaction.cpp
MarcoFalke,2020-03-07 15:29:26,Could also assert the roundtrip `decompressed == script`?,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389262151,389262151,src/test/fuzz/script.cpp
MarcoFalke,2020-03-07 15:29:52,Looks like you accidentally added a unit test here? This does not depend on any fuzz input.,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389262172,389262172,src/test/fuzz/script.cpp
practicalswift,2020-03-07 15:46:40,"@MarcoFalke Are you sure about that? `vch` is built from `buffer` which is built from fuzz input, no? :)",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389263340,389263340,src/test/fuzz/script.cpp
practicalswift,2020-03-07 15:58:51,"I'm afraid not since that assertion is not guaranteed to hold :)\n\nCounter-example:\n\n```\n$ xxd -p -r <<< ""210220acacacffff6010b472a266d0bd89c13706a4132ccfb16f7c3b9fcbacacacacac"" > counter-example\n$ src/test/fuzz/script counter-example\n…\nscript: test/fuzz/script.cpp:40: void test_one_input(const std::vector<uint8_t> &): Assertion `script == decompressed_script' failed.\n…\n```",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389264128,389264128,src/test/fuzz/script.cpp
MarcoFalke,2020-03-07 22:00:00,"I am pretty sure that if it was not guaranteed to hold, we would be running into consensus failures pretty soon. Please take a look at #18292 ",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389315249,389315249,src/test/fuzz/script.cpp
MarcoFalke,2020-03-07 22:01:56,"`buffer` is only *appened* to `vch`, but pratically never read. Only the beginning of `vch` (20 or 32 bytes) are read, and they are all constant (zero). So this does never read any fuzz input, except for copying into the vector.\n\nI suggest to remove this for loop and content.",https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389315385,389315385,src/test/fuzz/script.cpp
practicalswift,2020-03-07 23:44:45,With #18292 it all makes sense. Thanks!,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389320820,389320820,src/test/fuzz/script.cpp
MarcoFalke,2020-03-09 15:19:45,ping @practicalswift ,https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389760804,389760804,src/test/fuzz/script.cpp
practicalswift,2020-03-09 15:24:15,I'll fix. Thanks for the ping :),https://github.com/bitcoin/bitcoin/pull/17926#discussion_r389764032,389764032,src/test/fuzz/script.cpp
