[
  {
    "sha": "5aadd4be1883386a04bef6a04e9a1142601ef7a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWFkZDRiZTE4ODMzODZhMDRiZWY2YTA0ZTlhMTE0MjYwMWVmN2E3",
    "commit": {
      "author": {
        "name": "Prayank",
        "email": "prayank23@outlook.com",
        "date": "2020-09-29T17:41:58Z"
      },
      "committer": {
        "name": "Prayank",
        "email": "prayank23@outlook.com",
        "date": "2020-10-21T15:51:39Z"
      },
      "message": "Convert amounts from float to decimal\n\n+ fee, fee_expected, output_amount\n+ Using value of coin['amount'] as decimal and removed 'int'\n+ Removed unnecessary parentheses\n+ Remove str() and use quotes",
      "tree": {
        "sha": "0a3575b6c8aee4cbced1d6741034e22133d6db5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a3575b6c8aee4cbced1d6741034e22133d6db5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5aadd4be1883386a04bef6a04e9a1142601ef7a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aadd4be1883386a04bef6a04e9a1142601ef7a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5aadd4be1883386a04bef6a04e9a1142601ef7a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5aadd4be1883386a04bef6a04e9a1142601ef7a7/comments",
    "author": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prayank23",
      "id": 13405205,
      "node_id": "MDQ6VXNlcjEzNDA1MjA1",
      "avatar_url": "https://avatars.githubusercontent.com/u/13405205?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prayank23",
      "html_url": "https://github.com/prayank23",
      "followers_url": "https://api.github.com/users/prayank23/followers",
      "following_url": "https://api.github.com/users/prayank23/following{/other_user}",
      "gists_url": "https://api.github.com/users/prayank23/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prayank23/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prayank23/subscriptions",
      "organizations_url": "https://api.github.com/users/prayank23/orgs",
      "repos_url": "https://api.github.com/users/prayank23/repos",
      "events_url": "https://api.github.com/users/prayank23/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prayank23/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de4b7f25acef14f98ed09b7cbaa065067313d24b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de4b7f25acef14f98ed09b7cbaa065067313d24b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de4b7f25acef14f98ed09b7cbaa065067313d24b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fc4c7756688bebd72caf6d3384cedd6251aa1117",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5aadd4be1883386a04bef6a04e9a1142601ef7a7/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5aadd4be1883386a04bef6a04e9a1142601ef7a7/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=5aadd4be1883386a04bef6a04e9a1142601ef7a7",
        "patch": "@@ -83,31 +83,31 @@ def run_test(self):\n         )\n \n         self.log.info('A transaction not in the mempool')\n-        fee = 0.00000700\n+        fee = Decimal('0.000007')\n         raw_tx_0 = node.signrawtransactionwithwallet(node.createrawtransaction(\n             inputs=[{\"txid\": txid_in_block, \"vout\": 0, \"sequence\": BIP125_SEQUENCE_NUMBER}],  # RBF is used later\n-            outputs=[{node.getnewaddress(): 0.3 - fee}],\n+            outputs=[{node.getnewaddress(): Decimal('0.3') - fee}],\n         ))['hex']\n         tx = CTransaction()\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(fee))}}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee}}],\n             rawtxs=[raw_tx_0],\n         )\n \n         self.log.info('A final transaction not in the mempool')\n         coin = coins.pop()  # Pick a random coin(base) to spend\n-        output_amount = 0.025\n+        output_amount = Decimal('0.025')\n         raw_tx_final = node.signrawtransactionwithwallet(node.createrawtransaction(\n             inputs=[{'txid': coin['txid'], 'vout': coin['vout'], \"sequence\": 0xffffffff}],  # SEQUENCE_FINAL\n             outputs=[{node.getnewaddress(): output_amount}],\n             locktime=node.getblockcount() + 2000,  # Can be anything\n         ))['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n-        fee_expected = int(coin['amount']) - output_amount\n+        fee_expected = coin['amount'] - output_amount\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(fee_expected))}}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': fee_expected}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -130,7 +130,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': Decimal(str(2 * fee))}}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': (2 * fee)}}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -190,7 +190,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal(str(0.1 - 0.05))}}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'vsize': tx.get_vsize(), 'fees': { 'base': Decimal('0.1') - Decimal('0.05')}}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      }
    ]
  }
]