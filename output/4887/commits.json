[
  {
    "sha": "4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmIzMGExZWI4MTAwOWNmNzViNzVjODM3MWUzNjFlZjE0OWUzNzQ0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-09-10T04:06:34Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-02T17:35:51Z"
      },
      "message": "Correct logging AcceptBlock()->AcceptBlockHeader()",
      "tree": {
        "sha": "b2f4bba71d363a3d2f883751f88e739cc6092b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2f4bba71d363a3d2f883751f88e739cc6092b92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20a4b69360246c85700cab90df4de99b83eb368a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a4b69360246c85700cab90df4de99b83eb368a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20a4b69360246c85700cab90df4de99b83eb368a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f49c4dcedebea4613c51fcfcec3dadf5c1a1dfd3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb30a1eb81009cf75b75c8371e361ef149e3744/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb30a1eb81009cf75b75c8371e361ef149e3744/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4bb30a1eb81009cf75b75c8371e361ef149e3744",
        "patch": "@@ -2274,7 +2274,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (miSelf != mapBlockIndex.end()) {\n         pindex = miSelf->second;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"AcceptBlock() : block is marked invalid\"), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n     }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n@@ -2284,12 +2284,12 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         int64_t deltaTime = block.GetBlockTime() - pcheckpoint->GetBlockTime();\n         if (deltaTime < 0)\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n+            return state.DoS(100, error(\"%s : block with timestamp before last checkpoint\", __func__),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n         if (!CheckMinWork(block.nBits, pcheckpoint->nBits, deltaTime))\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n+            return state.DoS(100, error(\"%s : block with too little proof-of-work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n         }\n     }\n@@ -2300,36 +2300,36 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n         if ((!Params().SkipProofOfWorkCheck()) &&\n            (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-            return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n+            return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n \n         // Check timestamp against prev\n         if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-            return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"),\n+            return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n                                  REJECT_INVALID, \"time-too-old\");\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n-            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight),\n+            return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                              REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n         // Don't accept any forks from the main chain prior to last checkpoint\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-            return state.DoS(100, error(\"AcceptBlock() : forked chain older than last checkpoint (height %d)\", nHeight));\n+            return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2 && \n             CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n         {\n-            return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n+            return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n                                  REJECT_OBSOLETE, \"bad-version\");\n         }\n     }"
      }
    ]
  }
]