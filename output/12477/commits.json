[
  {
    "sha": "fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRiMzljYTYyMzc3ODEzNDZjYTNkYTMxOWUyYmQ5ZTQ4YTVhNjA0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-17T19:29:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-02-22T19:53:14Z"
      },
      "message": "test: Plug memory leaks and stack-use-after-scope",
      "tree": {
        "sha": "1f441104a6e3bd684d1a7c1e3669b07615a437f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f441104a6e3bd684d1a7c1e3669b07615a437f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABAgAGBQJajx+qAAoJEM4rdWl+aaVIO3oMAKC+B6Ei70kD2mtRCTpF0ueW\n6kR0tEEhAaQVUNkBEwBPi0R7LXzCofCvxf7xRJHcjSasXQXFSh6pjiHTVjwLAMWh\nC94LtoQidBISSwNac9X4/xS4UoZqm85nPILmZzVpjvYlVx0glyGSyjXH6QOHCOx1\nNT29Yvqn+O0deuJ7UTIrpV8Fvde8pSenzCburL1ohmczedxofXrkn5XN4V0k6ZYx\nQkquowW9Wav5G0Wnz6hAAgC+ibSzyn/YDb1hm1hD2k2MiV449ibWVSfb63sdx7t5\naV/U8fEzqJcb6GyOwtFbLG5q/iky6AQOJuvfFt2AcODRftcO3wEXskSByeLZcH3J\n8eeVkKUOZecE5ssyCyoiebi7OZuowc+0o67GL1zYQCxx8gznjd0IfqB62Tvb9Zbh\nUDikXgw/IZRalrPBH/A2QvPyD/9SyDcCY9CM3/6fE9E8l0mI2b/L0na9URKrZvV7\nI8oLJBVbGOOzCQTc1+0jLljTU3fNyfLUYmUVLhRjnw==\n=eAdK\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f441104a6e3bd684d1a7c1e3669b07615a437f0\nparent 27c59dc502f29cf1d76290556c21e366145e3b2e\nauthor MarcoFalke <falke.marco@gmail.com> 1518895796 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1519329194 -0500\n\ntest: Plug memory leaks and stack-use-after-scope\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadb39ca6237781346ca3da319e2bd9e48a5a604",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadb39ca6237781346ca3da319e2bd9e48a5a604/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27c59dc502f29cf1d76290556c21e366145e3b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c59dc502f29cf1d76290556c21e366145e3b2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c59dc502f29cf1d76290556c21e366145e3b2e"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6f438b60e97623dc12ae2c3b4e0f6a5ac04cce02",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -37,11 +37,6 @@ static void CoinSelection(benchmark::State& state)\n     LOCK(wallet.cs_wallet);\n \n     while (state.KeepRunning()) {\n-        // Empty wallet.\n-        for (COutput output : vCoins)\n-            delete output.tx;\n-        vCoins.clear();\n-\n         // Add coins.\n         for (int i = 0; i < 1000; i++)\n             addCoin(1000 * COIN, wallet, vCoins);\n@@ -53,6 +48,12 @@ static void CoinSelection(benchmark::State& state)\n         assert(success);\n         assert(nValueRet == 1003 * COIN);\n         assert(setCoinsRet.size() == 2);\n+\n+        // Empty wallet.\n+        for (COutput& output : vCoins) {\n+            delete output.tx;\n+        }\n+        vCoins.clear();\n     }\n }\n "
      },
      {
        "sha": "8e0ec5243b13e72f7b0dabca42b2d50284f0e205",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -406,11 +406,11 @@ BOOST_AUTO_TEST_CASE(test_CheckQueueControl_Locks)\n         boost::thread_group tg;\n         std::mutex m;\n         std::condition_variable cv;\n+        bool has_lock{false};\n+        bool has_tried{false};\n+        bool done{false};\n+        bool done_ack{false};\n         {\n-            bool has_lock {false};\n-            bool has_tried {false};\n-            bool done {false};\n-            bool done_ack {false};\n             std::unique_lock<std::mutex> l(m);\n             tg.create_thread([&]{\n                     CCheckQueueControl<FakeCheck> control(queue.get());"
      },
      {
        "sha": "95c4825b840f0522bd29a9faac4b9be6b96e933b",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadb39ca6237781346ca3da319e2bd9e48a5a604/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fadb39ca6237781346ca3da319e2bd9e48a5a604",
        "patch": "@@ -28,6 +28,9 @@ void CConnmanTest::AddNode(CNode& node)\n void CConnmanTest::ClearNodes()\n {\n     LOCK(g_connman->cs_vNodes);\n+    for (CNode* node : g_connman->vNodes) {\n+        delete node;\n+    }\n     g_connman->vNodes.clear();\n }\n "
      }
    ]
  }
]