[
  {
    "sha": "c52296a73e5222628bf6a03eaf727622594bf464",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTIyOTZhNzNlNTIyMjYyOGJmNmEwM2VhZjcyNzYyMjU5NGJmNDY0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-05T20:50:22Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-31T18:20:01Z"
      },
      "message": "Testnet difficulty calculation changes, to take effect Feb 15 2012\n\nAllow mining of min-difficulty blocks if 20 minutes have gone by without mining a regular-difficulty block.\nNormal rules apply every 2016 blocks, though, so there may be a very-slow-to-confirm block at the difficulty-adjustment blocks.",
      "tree": {
        "sha": "f2e577b6854814f80b53daa6b552d6b073aa38f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2e577b6854814f80b53daa6b552d6b073aa38f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c52296a73e5222628bf6a03eaf727622594bf464",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52296a73e5222628bf6a03eaf727622594bf464",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c52296a73e5222628bf6a03eaf727622594bf464",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c52296a73e5222628bf6a03eaf727622594bf464/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4477b17f15ac3e574fdddef7c9cf10473158d30d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4477b17f15ac3e574fdddef7c9cf10473158d30d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4477b17f15ac3e574fdddef7c9cf10473158d30d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 29,
      "deletions": 4
    },
    "files": [
      {
        "sha": "60374c04083f91226adae5a1cc374656f98ffdc2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 4,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c52296a73e5222628bf6a03eaf727622594bf464/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c52296a73e5222628bf6a03eaf727622594bf464/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c52296a73e5222628bf6a03eaf727622594bf464",
        "patch": "@@ -768,6 +768,11 @@ static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n //\n unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n {\n+    // Testnet has min-difficulty blocks\n+    // after nTargetSpacing*2 time between blocks:\n+    if (fTestNet && nTime > nTargetSpacing*2)\n+        return bnProofOfWorkLimit.GetCompact();\n+\n     CBigNum bnResult;\n     bnResult.SetCompact(nBase);\n     while (nTime > 0 && bnResult < bnProofOfWorkLimit)\n@@ -782,16 +787,36 @@ unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n     return bnResult.GetCompact();\n }\n \n-unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast)\n+unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)\n {\n+    unsigned int nProofOfWorkLimit = bnProofOfWorkLimit.GetCompact();\n \n     // Genesis block\n     if (pindexLast == NULL)\n-        return bnProofOfWorkLimit.GetCompact();\n+        return nProofOfWorkLimit;\n \n     // Only change once per interval\n     if ((pindexLast->nHeight+1) % nInterval != 0)\n+    {\n+        // Special rules for testnet after 15 Feb 2012:\n+        if (fTestNet && pblock->nTime > 1329264000)\n+        {\n+            // If the new block's timestamp is more than 2* 10 minutes\n+            // then allow mining of a min-difficulty block.\n+            if (pblock->nTime - pindexLast->nTime > nTargetSpacing*2)\n+                return nProofOfWorkLimit;\n+            else\n+            {\n+                // Return the last non-special-min-difficulty-rules-block\n+                const CBlockIndex* pindex = pindexLast;\n+                while (pindex->pprev && pindex->nHeight % nInterval != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = pindex->pprev;\n+                return pindex->nBits;\n+            }\n+        }\n+\n         return pindexLast->nBits;\n+    }\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n@@ -1540,7 +1565,7 @@ bool CBlock::AcceptBlock()\n     int nHeight = pindexPrev->nHeight+1;\n \n     // Check proof of work\n-    if (nBits != GetNextWorkRequired(pindexPrev))\n+    if (nBits != GetNextWorkRequired(pindexPrev, this))\n         return DoS(100, error(\"AcceptBlock() : incorrect proof of work\"));\n \n     // Check timestamp against prev\n@@ -3120,7 +3145,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n     pblock->nTime          = max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n-    pblock->nBits          = GetNextWorkRequired(pindexPrev);\n+    pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock.get());\n     pblock->nNonce         = 0;\n \n     return pblock.release();"
      }
    ]
  }
]