[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384797131",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384797131",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 384797131,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDc5NzEzMQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-26T21:38:16Z",
    "updated_at": "2018-04-26T21:38:16Z",
    "author_association": "MEMBER",
    "body": "The build failure is due to an eight year old bug in clang: https://bugs.llvm.org/show_bug.cgi?id=8263",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384797131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384964026",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384964026",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 384964026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk2NDAyNg==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T13:04:53Z",
    "updated_at": "2018-04-27T13:04:53Z",
    "author_association": "MEMBER",
    "body": "I like the goal here but I find the changes a bit overwhelming for achieving this.  It seems like we could achieve this more easily in other ways, like (1) just building the hash on demand the first time it's requested, or (2) adding a deserialization flag to CTransaction that instructs it to skip the hash if we're not planning to use it?\r\n\r\n[I'm not sure if (1) is a great solution, since there might be some memory-cache-benefits to building the hash at the time of deserialization, and maybe no one likes the design of having a mutable hash inside of CTransaction, but it would be a super-small diff...]",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384964026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384985819",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384985819",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 384985819,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk4NTgxOQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T14:24:19Z",
    "updated_at": "2018-04-27T14:24:19Z",
    "author_association": "MEMBER",
    "body": "I didn't particularly like option (1) because it makes the caching run-time depended (it is always compiled in, but only used when it happens to be requested), compared to having it compile time enforced by typing `CPureTransaction` instead of `CTransaction`.\r\n\r\nNote that my approach is a variation of option (2) by passing through the type of the transaction to `ReadBlockFromDisk` instead of passing through an additional flag that is converted to a deserialization option and then passed on to the constructor of the transaction.\r\n\r\nSo I think having explicit types is advantageous in both code clarity and cleanness, with the tradeoff of a minimally larger diff.\r\n\r\nNote: I will push a fixed up version of the patch by next Monday to minimize the diff and (hopefully) work around the gcc and clang compiler bugs.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384985819/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384990768",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384990768",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 384990768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk5MDc2OA==",
    "user": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T14:40:46Z",
    "updated_at": "2018-04-27T14:40:46Z",
    "author_association": "MEMBER",
    "body": "Fair enough, I just don't want us to overlook simpler solutions that might be acceptable.  I'm happy to let the reviewers with stronger feelings about the design of these data types chime in.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384990768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384999627",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384999627",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 384999627,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NDk5OTYyNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T15:09:52Z",
    "updated_at": "2018-04-27T15:09:52Z",
    "author_association": "MEMBER",
    "body": "I just pushed a version that might compile on our buggy clang and that is according to the design that @sipa requested in https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145046\r\n\r\n> Then at the very least introduce alternate versions of CTransaction/CBlock that don't precompute anything, for use in reindexing and rescanning and serving blocks from disk.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/384999627/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385092217",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385092217",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 385092217,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTA5MjIxNw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-27T20:57:42Z",
    "updated_at": "2018-04-27T20:57:42Z",
    "author_association": "MEMBER",
    "body": "@MarcoFalke Thanks for working on this, I'll review soon.\r\n\r\n@sdaftuar My preference is having separate types, for these reasons:\r\n* Having lazily-computed hashes in transactions involves synchronization structures (atomics at least to avoid multiple threads simultaneously getting a hash for the first time).\r\n* Smaller in memory in places where it's not needed.\r\n* We have the option of later moving the with-hash types into consensus code and not exposing it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385092217/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385745421",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385745421",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 385745421,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTc0NTQyMQ==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-01T18:15:06Z",
    "updated_at": "2018-05-01T18:15:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "This seems like very useful work, but for serving out historic blocks it would perhaps be better if we could (largely) avoid deserializing and re-serializing them entirely as doing so is tremendously expensive (involving a billionity mallocs). Better is better however. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385745421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385942233",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385942233",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 385942233,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTk0MjIzMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T11:09:06Z",
    "updated_at": "2018-05-02T11:18:24Z",
    "author_association": "MEMBER",
    "body": ">  Having lazily-computed hashes in transactions involves synchronization structures (atomics at least to avoid multiple threads simultaneously getting a hash for the first time).\r\n\r\nAgree. The main thing I don't like about lazy evaluation is that it's much harder to reason about performance then. I think I prefer the current explicit solution, even though much more verbose.\r\n\r\n> This seems like very useful work, but for serving out historic blocks it would perhaps be better if we could (largely) avoid deserializing and re-serializing them entirely as doing so is tremendously expensive (involving a billionity mallocs). Better is better however.\r\n\r\nYes - I was also about to say this. How difficult would it be to serve the data directly from disk, without serialization/deserialization roundtrip?\r\n\r\n~~Edit: to do this efficiently would require a change to the on-disk format to add the size, or adding the on-disk block size to the block index.~~ OH this is actually already there, situated before the `nPos`:\r\n```\r\n    // Write index header\r\n    unsigned int nSize = GetSerializeSize(fileout, block);\r\n    fileout << messageStart << nSize;\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385942233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385958355",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385958355",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 385958355,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NTk1ODM1NQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T12:17:59Z",
    "updated_at": "2018-05-02T12:17:59Z",
    "author_association": "MEMBER",
    "body": "> but for serving out historic blocks it would perhaps be better if we could (largely) avoid deserializing and re-serializing them entirely\r\n\r\nMy dumb try at this: #13151",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/385958355/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386069372",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386069372",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 386069372,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjA2OTM3Mg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T18:08:30Z",
    "updated_at": "2018-05-02T18:08:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Even with 13151 something like this might very useful for making _rescan_ faster...  rescan is slow enough to make it largely unusable now.  I'd been thinking deserialization was worse than hashing in it, but the performance numbers above make me wonder.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386069372/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386101356",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386101356",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 386101356,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjEwMTM1Ng==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T19:57:27Z",
    "updated_at": "2018-05-02T19:57:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Certainly Concept ACK if we can get rescan up for this (even as a separate PR), just using it for serving blocks for old nodes is maybe less worth it (at least post-13151).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386101356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386102286",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386102286",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 386102286,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjEwMjI4Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-02T20:00:35Z",
    "updated_at": "2018-05-02T20:00:35Z",
    "author_association": "MEMBER",
    "body": "Will do a rebase once the other pull is merged",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386102286/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386204339",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386204339",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 386204339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM4NjIwNDMzOQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-03T06:44:48Z",
    "updated_at": "2018-05-03T06:44:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "Nice work!\r\nConcept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/386204339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391530089",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391530089",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 391530089,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTUzMDA4OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-23T23:16:40Z",
    "updated_at": "2018-05-23T23:16:40Z",
    "author_association": "MEMBER",
    "body": "Any reason not to reuse `CMutableTransaction` for the purposes where `CPureTransaction` is introduced here? The only reason why `CTransaction` is immutable is to not interfere with or require synchronization on its precomputed hashes. As `CMutableTransaction` has no cashed hashes, this is not an issue.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391530089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391766471",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391766471",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 391766471,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc2NjQ3MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T15:54:42Z",
    "updated_at": "2018-05-24T15:54:42Z",
    "author_association": "MEMBER",
    "body": "@sipa I'd prefer to make it \"type-safe\", i.e. make it impossible/compile-time enforced that none of the expensive operations are called. Otherwise this seems too fragile.\r\n\r\nI think to make it compile-time enforced, this would require to change one of transaction types to be a class that takes template arguments and then add a static assert in `Get*Hash`. I am happy to change to that implementation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391766471/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391769939",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391769939",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 391769939,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc2OTkzOQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T16:04:52Z",
    "updated_at": "2018-05-24T16:04:52Z",
    "author_association": "MEMBER",
    "body": "@MarcoFalke But as long as you keep CMutableTransaction around, such a guarantee doesn't really exist, as that class still has uncached hashing operations (and should probably remain so, see a recent PR that speeds up signing by avoiding CMutableTransaction -> CTransaction conversions).\n\nMy preference is just to evolve CTransaction into the validation-logic-optimized-efficient transaction representation, and CMutableTransaction into the simple-generic representation. That may mean that uncached hashes are still invoked in places where performance doesn't matter that much.\n\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391769939/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391787330",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391787330",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 391787330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM5MTc4NzMzMA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-05-24T16:59:38Z",
    "updated_at": "2018-05-24T17:01:42Z",
    "author_association": "MEMBER",
    "body": "After discussing this a bit with @MarcoFalke, I see the advantage of being able to enforce through the type system that no GetHash is unexpectedly called on transactions that don't have a cache in certain specific cases (like serving historical blocks).\n\nOn the other hand, it's also introducing yet another type for the same data, which seems a high price. As it has const fields, conversion to other transaction types will be expensive if it's ever needed, but it does get the ability to take advantage of more efficient storage if they get implemented (like one malloc per transaction).\n\nOverall, I think my preference is to reuse CMutableTransaction here, but if we want the extra guarantees and an extra type, the current approach seems fine.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/391787330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423356937",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-423356937",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 423356937,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQyMzM1NjkzNw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-09-20T22:38:38Z",
    "updated_at": "2018-09-27T20:50:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14337 ([refactoring] Create common interface for CMutableTransaction and CTransaction with static polymorphism by lucash-dev)\n* #14194 (Annotate unused parameters with [[maybe_unused]] by practicalswift)\n* #13864 (validation: Document where we are intentionally ignoring bool return values from validation related functions by practicalswift)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/423356937/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431399312",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-431399312",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 431399312,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQzMTM5OTMxMg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-10-19T15:19:58Z",
    "updated_at": "2018-10-19T15:19:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "Curious why this was closed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/431399312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555827098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-555827098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/13098",
    "id": 555827098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1NTgyNzA5OA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-20T04:00:36Z",
    "updated_at": "2019-11-20T04:00:36Z",
    "author_association": "MEMBER",
    "body": "Rebased (with the p2p changes removed) here: #17529",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/555827098/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217529351",
    "pull_request_review_id": 155266414,
    "id": 217529351,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzUyOTM1MQ==",
    "diff_hunk": "@@ -1187,61 +1188,72 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n             }\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n             // Don't set pblock as we've sent the block\n-        } else {\n-            // Send block from disk\n-            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n-            if (!ReadBlockFromDisk(*pblockRead, pindex, consensusParams))\n-                assert(!\"cannot load block from disk\");\n-            pblock = pblockRead;\n-        }\n-        if (pblock) {\n-            if (inv.type == MSG_BLOCK)\n-                connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_WITNESS_BLOCK)\n-                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_FILTERED_BLOCK)\n+        } else if (inv.type == MSG_WITNESS_BLOCK || inv.type == MSG_BLOCK) {\n+            const int ser_flags{inv.type == MSG_BLOCK ? SERIALIZE_TRANSACTION_NO_WITNESS : 0};\n+            if (pblock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(ser_flags, NetMsgType::BLOCK, *pblock));\n+            } else {\n+                CPureBlock pure_block;\n+                if (!ReadBlockFromDisk(pure_block, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+                connman->PushMessage(pfrom, msgMaker.Make(ser_flags, NetMsgType::BLOCK, pure_block));\n+            }\n+        } else if (inv.type == MSG_FILTERED_BLOCK) {\n+            CBlock basic_block;\n+            if (!pblock && !ReadBlockFromDisk(basic_block, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n             {\n-                bool sendMerkleBlock = false;\n-                CMerkleBlock merkleBlock;\n-                {\n-                    LOCK(pfrom->cs_filter);\n-                    if (pfrom->pfilter) {\n-                        sendMerkleBlock = true;\n-                        merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n-                    }\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = pblock ? CMerkleBlock(*pblock, *pfrom->pfilter) : CMerkleBlock(basic_block, *pfrom->pfilter);\n                 }\n-                if (sendMerkleBlock) {\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n-                    // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                    // This avoids hurting performance by pointlessly requiring a round-trip\n-                    // Note that there is currently no way for a node to request any single transactions we didn't send here -\n-                    // they must either disconnect and retry or request the full block.\n-                    // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                    // however we MUST always provide at least what the remote peer needs\n-                    typedef std::pair<unsigned int, uint256> PairType;\n-                    for (PairType& pair : merkleBlock.vMatchedTxn)\n-                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn) {\n+                    pblock ?\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, pblock->vtx[pair.first])) :\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, basic_block.vtx[pair.first]));\n                 }\n-                // else\n-                    // no response\n             }\n-            else if (inv.type == MSG_CMPCT_BLOCK)\n-            {\n-                // If a peer is asking for old blocks, we're almost guaranteed\n-                // they won't have a useful mempool to match against a compact block,\n-                // and we don't feel like constructing the object for them, so\n-                // instead we respond with the full, non-compact block.\n-                bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-                int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-                if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                    if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n-                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+            // else\n+            // no response\n+        } else if (inv.type == MSG_CMPCT_BLOCK) {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock;\n+                    CBlock block_read;\n+                    if (pblock) {\n+                        cmpctblock = CBlockHeaderAndShortTxIDs{*pblock, fPeerWantsWitness};\n                     } else {\n-                        CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                        if (!ReadBlockFromDisk(block_read, pindex, consensusParams)) assert(!\"cannot load block from disk\");",
    "path": "src/net_processing.cpp",
    "position": 115,
    "original_position": 115,
    "commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "original_commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems like when `!pblock && inv.type == MSG_FILTERED_BLOCK` or  `!pblock && inv.type == MSG_CMPCT_BLOCK` in previous code, the message would be dropped, but now the block gets read from disk? Is this an intentional change if so?",
    "created_at": "2018-09-13T20:49:21Z",
    "updated_at": "2018-09-13T20:49:22Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r217529351",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217529351"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r217529351"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/217529351/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1245,
    "original_line": 1245,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696305",
    "pull_request_review_id": 156688624,
    "id": 218696305,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODY5NjMwNQ==",
    "diff_hunk": "@@ -283,6 +288,43 @@ class CTransaction\n     const int32_t nVersion;\n     const uint32_t nLockTime;\n \n+    /** Convert a CMutableTransaction into a CPureTransaction. */\n+    CPureTransaction(const CMutableTransaction& tx);",
    "path": "src/primitives/transaction.h",
    "position": 32,
    "original_position": 32,
    "commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "original_commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/primitives/transaction.h:292]: (style) Class 'CPureTransaction' has a constructor with 1 argument that is not explicit.\r\n```",
    "created_at": "2018-09-19T07:35:39Z",
    "updated_at": "2018-09-19T07:35:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696305",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696305"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696305"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 292,
    "original_line": 292,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696343",
    "pull_request_review_id": 156688681,
    "id": 218696343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODY5NjM0Mw==",
    "diff_hunk": "@@ -283,6 +288,43 @@ class CTransaction\n     const int32_t nVersion;\n     const uint32_t nLockTime;\n \n+    /** Convert a CMutableTransaction into a CPureTransaction. */\n+    CPureTransaction(const CMutableTransaction& tx);\n+    CPureTransaction(CMutableTransaction&& tx);",
    "path": "src/primitives/transaction.h",
    "position": 33,
    "original_position": 33,
    "commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "original_commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/primitives/transaction.h:293]: (style) Class 'CPureTransaction' has a constructor with 1 argument that is not explicit.\r\n```",
    "created_at": "2018-09-19T07:35:50Z",
    "updated_at": "2018-09-19T07:35:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 293,
    "original_line": 293,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696418",
    "pull_request_review_id": 156688776,
    "id": 218696418,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxODY5NjQxOA==",
    "diff_hunk": "@@ -17,6 +17,21 @@ namespace block_bench {\n // a block off the wire, but before we can relay the block on to peers using\n // compact block relay.\n \n+static void DeserializePureBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)block_bench::block413567,\n+        (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+        SER_NETWORK, PROTOCOL_VERSION);\n+    char a = '\\0';\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    while (state.KeepRunning()) {\n+        CPureBlock block;\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));",
    "path": "src/bench/checkblock.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "original_commit_id": "775202dea78c2c139823029bd8124836b064943e",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```\r\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/bench/checkblock.cpp:31]: (warning) Assert statement calls a function which may have desired side effects: 'Rewind'.\r\n```",
    "created_at": "2018-09-19T07:36:09Z",
    "updated_at": "2018-09-19T07:36:09Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696418",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696418"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696418"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/13098"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/218696418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 31,
    "original_line": 31,
    "side": "RIGHT"
  }
]