[
  {
    "sha": "775202dea78c2c139823029bd8124836b064943e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzUyMDJkZWE3OGMyYzEzOTgyMzAyOWJkODEyNDgzNmIwNjQ5NDNl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-27T15:05:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-06T17:11:02Z"
      },
      "message": "Skip tx-rehashing on historic blocks",
      "tree": {
        "sha": "b8b44f2000570541c4b5c353dad6a10c8be2ef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8b44f2000570541c4b5c353dad6a10c8be2ef6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/775202dea78c2c139823029bd8124836b064943e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775202dea78c2c139823029bd8124836b064943e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/775202dea78c2c139823029bd8124836b064943e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775202dea78c2c139823029bd8124836b064943e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf27b531a7fcd7066ab6649e8073bd1895a823a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adf27b531a7fcd7066ab6649e8073bd1895a823a"
      }
    ],
    "stats": {
      "total": 324,
      "additions": 207,
      "deletions": 117
    },
    "files": [
      {
        "sha": "db87f568c10b724e841cb27110daab75764e5ab6",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -351,6 +351,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   prevector.h \\\n   primitives/block.cpp \\\n   primitives/block.h \\\n+  primitives/tx_types.h \\\n   primitives/transaction.cpp \\\n   primitives/transaction.h \\\n   pubkey.cpp \\"
      },
      {
        "sha": "b95d32fc5fa0c0df19004ae187bee1fe7b143988",
        "filename": "src/bench/checkblock.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/bench/checkblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/bench/checkblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/checkblock.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -17,6 +17,21 @@ namespace block_bench {\n // a block off the wire, but before we can relay the block on to peers using\n // compact block relay.\n \n+static void DeserializePureBlockTest(benchmark::State& state)\n+{\n+    CDataStream stream((const char*)block_bench::block413567,\n+        (const char*)&block_bench::block413567[sizeof(block_bench::block413567)],\n+        SER_NETWORK, PROTOCOL_VERSION);\n+    char a = '\\0';\n+    stream.write(&a, 1); // Prevent compaction\n+\n+    while (state.KeepRunning()) {\n+        CPureBlock block;\n+        stream >> block;\n+        assert(stream.Rewind(sizeof(block_bench::block413567)));\n+    }\n+}\n+\n static void DeserializeBlockTest(benchmark::State& state)\n {\n     CDataStream stream((const char*)block_bench::block413567,\n@@ -55,5 +70,6 @@ static void DeserializeAndCheckBlockTest(benchmark::State& state)\n     }\n }\n \n+BENCHMARK(DeserializePureBlockTest, 970);\n BENCHMARK(DeserializeBlockTest, 130);\n BENCHMARK(DeserializeAndCheckBlockTest, 160);"
      },
      {
        "sha": "49ea6e88b5ea9dfd2a6403fb3e613e4fe0671a58",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -127,7 +127,7 @@ static void MempoolEviction(benchmark::State& state)\n         AddTx(tx6_r, 1100LL, pool);\n         AddTx(tx7_r, 9000LL, pool);\n         pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n-        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n+        pool.TrimToSize(GetVirtualTransactionSize(*tx1_r));\n     }\n }\n "
      },
      {
        "sha": "8bcecfb2b1b5346a72e9c3d21aa0defecd962aea",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -176,7 +176,7 @@ bool PartiallyDownloadedBlock::IsTxAvailable(size_t index) const {\n ReadStatus PartiallyDownloadedBlock::FillBlock(CBlock& block, const std::vector<CTransactionRef>& vtx_missing) {\n     assert(!header.IsNull());\n     uint256 hash = header.GetHash();\n-    block = header;\n+    block = CBlock{header};\n     block.vtx.resize(txn_available.size());\n \n     size_t tx_missing_offset = 0;"
      },
      {
        "sha": "5830563963f5c8dc9a40f137a799950dc65688ca",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef BITCOIN_BLOOM_H\n #define BITCOIN_BLOOM_H\n \n+#include <primitives/tx_types.h>\n #include <serialize.h>\n \n #include <vector>\n \n class COutPoint;\n-class CTransaction;\n class uint256;\n \n //! 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%"
      },
      {
        "sha": "6eea7bf2894913693fed21ca6b8bf0ff4c642664",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -6,13 +6,13 @@\n #define BITCOIN_CONSENSUS_TX_VERIFY_H\n \n #include <amount.h>\n+#include <primitives/tx_types.h>\n \n #include <stdint.h>\n #include <vector>\n \n class CBlockIndex;\n class CCoinsViewCache;\n-class CTransaction;\n class CValidationState;\n \n /** Transaction validation functions */"
      },
      {
        "sha": "8cff1f42387c8519770dc9f6a9e3d6aa416c5d3d",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -6,14 +6,13 @@\n #define BITCOIN_CORE_IO_H\n \n #include <amount.h>\n+#include <primitives/tx_types.h>\n \n #include <string>\n #include <vector>\n \n-class CBlock;\n class CBlockHeader;\n class CScript;\n-class CTransaction;\n struct CMutableTransaction;\n struct PartiallySignedTransaction;\n class uint256;"
      },
      {
        "sha": "c1bfa235d987a5f15146acf5aae81258ab4acfac",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -90,10 +90,10 @@ CScript ParseScript(const std::string& s)\n }\n \n // Check that all of the input and output scripts of a transaction contains valid opcodes\n-static bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n+static bool CheckTxScriptsSanity(const CPureTransaction& tx)\n {\n     // Check input scripts for non-coinbase txs\n-    if (!CTransaction(tx).IsCoinBase()) {\n+    if (!tx.IsCoinBase()) {\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n             if (!tx.vin[i].scriptSig.HasValidOps() || tx.vin[i].scriptSig.size() > MAX_SCRIPT_SIZE) {\n                 return false;\n@@ -122,7 +122,7 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no\n         CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n         try {\n             ssData >> tx;\n-            if (ssData.eof() && (!try_witness || CheckTxScriptsSanity(tx))) {\n+            if (ssData.eof() && (!try_witness || CheckTxScriptsSanity(CPureTransaction{tx}))) {\n                 return true;\n             }\n         } catch (const std::exception&) {"
      },
      {
        "sha": "af3d04dc20a4acfd076aacf08a4e07e7606a7ed6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 52,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -1178,7 +1178,8 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n         std::shared_ptr<const CBlock> pblock;\n         if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {\n             pblock = a_recent_block;\n-        } else if (inv.type == MSG_WITNESS_BLOCK) {\n+        }\n+        if (!pblock && inv.type == MSG_WITNESS_BLOCK) {\n             // Fast-path: in this case it is possible to serve the block directly from disk,\n             // as the network format matches the format on disk\n             std::vector<uint8_t> block_data;\n@@ -1187,61 +1188,72 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n             }\n             connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, MakeSpan(block_data)));\n             // Don't set pblock as we've sent the block\n-        } else {\n-            // Send block from disk\n-            std::shared_ptr<CBlock> pblockRead = std::make_shared<CBlock>();\n-            if (!ReadBlockFromDisk(*pblockRead, pindex, consensusParams))\n-                assert(!\"cannot load block from disk\");\n-            pblock = pblockRead;\n-        }\n-        if (pblock) {\n-            if (inv.type == MSG_BLOCK)\n-                connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_WITNESS_BLOCK)\n-                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n-            else if (inv.type == MSG_FILTERED_BLOCK)\n+        } else if (inv.type == MSG_WITNESS_BLOCK || inv.type == MSG_BLOCK) {\n+            const int ser_flags{inv.type == MSG_BLOCK ? SERIALIZE_TRANSACTION_NO_WITNESS : 0};\n+            if (pblock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(ser_flags, NetMsgType::BLOCK, *pblock));\n+            } else {\n+                CPureBlock pure_block;\n+                if (!ReadBlockFromDisk(pure_block, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+                connman->PushMessage(pfrom, msgMaker.Make(ser_flags, NetMsgType::BLOCK, pure_block));\n+            }\n+        } else if (inv.type == MSG_FILTERED_BLOCK) {\n+            CBlock basic_block;\n+            if (!pblock && !ReadBlockFromDisk(basic_block, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+            bool sendMerkleBlock = false;\n+            CMerkleBlock merkleBlock;\n             {\n-                bool sendMerkleBlock = false;\n-                CMerkleBlock merkleBlock;\n-                {\n-                    LOCK(pfrom->cs_filter);\n-                    if (pfrom->pfilter) {\n-                        sendMerkleBlock = true;\n-                        merkleBlock = CMerkleBlock(*pblock, *pfrom->pfilter);\n-                    }\n+                LOCK(pfrom->cs_filter);\n+                if (pfrom->pfilter) {\n+                    sendMerkleBlock = true;\n+                    merkleBlock = pblock ? CMerkleBlock(*pblock, *pfrom->pfilter) : CMerkleBlock(basic_block, *pfrom->pfilter);\n                 }\n-                if (sendMerkleBlock) {\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n-                    // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n-                    // This avoids hurting performance by pointlessly requiring a round-trip\n-                    // Note that there is currently no way for a node to request any single transactions we didn't send here -\n-                    // they must either disconnect and retry or request the full block.\n-                    // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n-                    // however we MUST always provide at least what the remote peer needs\n-                    typedef std::pair<unsigned int, uint256> PairType;\n-                    for (PairType& pair : merkleBlock.vMatchedTxn)\n-                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+            }\n+            if (sendMerkleBlock) {\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n+                // This avoids hurting performance by pointlessly requiring a round-trip\n+                // Note that there is currently no way for a node to request any single transactions we didn't send here -\n+                // they must either disconnect and retry or request the full block.\n+                // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n+                // however we MUST always provide at least what the remote peer needs\n+                typedef std::pair<unsigned int, uint256> PairType;\n+                for (PairType& pair : merkleBlock.vMatchedTxn) {\n+                    pblock ?\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, pblock->vtx[pair.first])) :\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, basic_block.vtx[pair.first]));\n                 }\n-                // else\n-                    // no response\n             }\n-            else if (inv.type == MSG_CMPCT_BLOCK)\n-            {\n-                // If a peer is asking for old blocks, we're almost guaranteed\n-                // they won't have a useful mempool to match against a compact block,\n-                // and we don't feel like constructing the object for them, so\n-                // instead we respond with the full, non-compact block.\n-                bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-                int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-                if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n-                    if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n-                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+            // else\n+            // no response\n+        } else if (inv.type == MSG_CMPCT_BLOCK) {\n+            // If a peer is asking for old blocks, we're almost guaranteed\n+            // they won't have a useful mempool to match against a compact block,\n+            // and we don't feel like constructing the object for them, so\n+            // instead we respond with the full, non-compact block.\n+            bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n+            int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n+            if (CanDirectFetch(consensusParams) && pindex->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n+                if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == pindex->GetBlockHash()) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                } else {\n+                    CBlockHeaderAndShortTxIDs cmpctblock;\n+                    CBlock block_read;\n+                    if (pblock) {\n+                        cmpctblock = CBlockHeaderAndShortTxIDs{*pblock, fPeerWantsWitness};\n                     } else {\n-                        CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                        if (!ReadBlockFromDisk(block_read, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+                        cmpctblock = CBlockHeaderAndShortTxIDs{block_read, fPeerWantsWitness};\n                     }\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                }\n+            } else {\n+                if (pblock) {\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, pblock));\n                 } else {\n-                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+                    CPureBlock block_pure;\n+                    if (!ReadBlockFromDisk(block_pure, pindex, consensusParams)) assert(!\"cannot load block from disk\");\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, block_pure));\n                 }\n             }\n         }\n@@ -2166,7 +2178,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         LogPrint(BCLog::NET, \"getheaders %d to %s from peer=%d\\n\", (pindex ? pindex->nHeight : -1), hashStop.IsNull() ? \"end\" : hashStop.ToString(), pfrom->GetId());\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n-            vHeaders.push_back(pindex->GetBlockHeader());\n+            vHeaders.emplace_back(pindex->GetBlockHeader());\n             if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n@@ -3399,14 +3411,14 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n                     pBestIndex = pindex;\n                     if (fFoundStartingHeader) {\n                         // add this to the headers message\n-                        vHeaders.push_back(pindex->GetBlockHeader());\n+                        vHeaders.emplace_back(pindex->GetBlockHeader());\n                     } else if (PeerHasHeader(&state, pindex)) {\n                         continue; // keep looking for the first new block\n                     } else if (pindex->pprev == nullptr || PeerHasHeader(&state, pindex->pprev)) {\n                         // Peer doesn't have this header but they do have the prior one.\n                         // Start sending headers.\n                         fFoundStartingHeader = true;\n-                        vHeaders.push_back(pindex->GetBlockHeader());\n+                        vHeaders.emplace_back(pindex->GetBlockHeader());\n                     } else {\n                         // Peer doesn't have this header or the prior one -- nothing will\n                         // connect, so bail out."
      },
      {
        "sha": "550cd519e80758b2b2df38dbd7b13ac8e8a5c5c7",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -15,7 +15,8 @@ uint256 CBlockHeader::GetHash() const\n     return SerializeHash(*this);\n }\n \n-std::string CBlock::ToString() const\n+template <typename TxRef>\n+std::string Block<TxRef>::ToString() const\n {\n     std::stringstream s;\n     s << strprintf(\"CBlock(hash=%s, ver=0x%08x, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n@@ -30,3 +31,4 @@ std::string CBlock::ToString() const\n     }\n     return s.str();\n }\n+template std::string Block<CTransactionRef>::ToString() const;"
      },
      {
        "sha": "0c5839619524c348aab36db81d7afc2577c2ef2a",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_PRIMITIVES_BLOCK_H\n \n #include <primitives/transaction.h>\n+#include <primitives/tx_types.h>\n #include <serialize.h>\n #include <uint256.h>\n \n@@ -69,21 +70,22 @@ class CBlockHeader\n };\n \n \n-class CBlock : public CBlockHeader\n+template <typename TxRef>\n+class Block : public CBlockHeader\n {\n public:\n     // network and disk\n-    std::vector<CTransactionRef> vtx;\n+    std::vector<TxRef> vtx;\n \n     // memory only\n     mutable bool fChecked;\n \n-    CBlock()\n+    Block()\n     {\n         SetNull();\n     }\n \n-    CBlock(const CBlockHeader &header)\n+    explicit Block(const CBlockHeader& header)\n     {\n         SetNull();\n         *(static_cast<CBlockHeader*>(this)) = header;"
      },
      {
        "sha": "22455d8bc5181ba60df49273aab5d670299da684",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -55,6 +55,7 @@ std::string CTxOut::ToString() const\n }\n \n CMutableTransaction::CMutableTransaction() : nVersion(CTransaction::CURRENT_VERSION), nLockTime(0) {}\n+CMutableTransaction::CMutableTransaction(const CPureTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime) {}\n CMutableTransaction::CMutableTransaction(const CTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime) {}\n \n uint256 CMutableTransaction::GetHash() const\n@@ -75,10 +76,16 @@ uint256 CTransaction::ComputeWitnessHash() const\n     return SerializeHash(*this, SER_GETHASH, 0);\n }\n \n+/* Only used for the CTransaction default constructor */\n+CPureTransaction::CPureTransaction() : vin{}, vout{}, nVersion{CPureTransaction::CURRENT_VERSION}, nLockTime{0} {}\n /* For backward compatibility, the hash is initialized to 0. TODO: remove the need for this default constructor entirely. */\n-CTransaction::CTransaction() : vin(), vout(), nVersion(CTransaction::CURRENT_VERSION), nLockTime(0), hash{}, m_witness_hash{} {}\n-CTransaction::CTransaction(const CMutableTransaction& tx) : vin(tx.vin), vout(tx.vout), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}\n-CTransaction::CTransaction(CMutableTransaction&& tx) : vin(std::move(tx.vin)), vout(std::move(tx.vout)), nVersion(tx.nVersion), nLockTime(tx.nLockTime), hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}\n+CTransaction::CTransaction() : CPureTransaction{}, hash{}, m_witness_hash{} {}\n+\n+CPureTransaction::CPureTransaction(const CMutableTransaction& tx) : vin{tx.vin}, vout{tx.vout}, nVersion{tx.nVersion}, nLockTime{tx.nLockTime} {}\n+CTransaction::CTransaction(const CMutableTransaction& tx) : CPureTransaction{tx}, hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}\n+\n+CPureTransaction::CPureTransaction(CMutableTransaction&& tx) : vin{std::move(tx.vin)}, vout{std::move(tx.vout)}, nVersion{tx.nVersion}, nLockTime{tx.nLockTime} {}\n+CTransaction::CTransaction(CMutableTransaction&& tx) : CPureTransaction{std::move(tx)}, hash{ComputeHash()}, m_witness_hash{ComputeWitnessHash()} {}\n \n CAmount CTransaction::GetValueOut() const\n {"
      },
      {
        "sha": "05a87a43f848d726865c2907d9b2bbb9c6d4ddf5",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 49,
        "deletions": 30,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -6,10 +6,11 @@\n #ifndef BITCOIN_PRIMITIVES_TRANSACTION_H\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n-#include <stdint.h>\n #include <amount.h>\n+#include <primitives/tx_types.h>\n #include <script/script.h>\n #include <serialize.h>\n+#include <stdint.h>\n #include <uint256.h>\n \n static const int SERIALIZE_TRANSACTION_NO_WITNESS = 0x40000000;\n@@ -261,8 +262,12 @@ inline void SerializeTransaction(const TxType& tx, Stream& s) {\n /** The basic transaction that is broadcasted on the network and contained in\n  * blocks.  A transaction can contain multiple inputs and outputs.\n  */\n-class CTransaction\n+class CPureTransaction\n {\n+protected:\n+    /** Construct a CPureTransaction that qualifies as IsNull() */\n+    CPureTransaction();\n+\n public:\n     // Default transaction version.\n     static const int32_t CURRENT_VERSION=2;\n@@ -283,6 +288,43 @@ class CTransaction\n     const int32_t nVersion;\n     const uint32_t nLockTime;\n \n+    /** Convert a CMutableTransaction into a CPureTransaction. */\n+    CPureTransaction(const CMutableTransaction& tx);\n+    CPureTransaction(CMutableTransaction&& tx);\n+\n+    template <typename Stream>\n+    inline void Serialize(Stream& s) const {\n+        SerializeTransaction(*this, s);\n+    }\n+\n+    /** This deserializing constructor is provided instead of an Unserialize method.\n+     *  Unserialize is not possible, since it would require overwriting const fields. */\n+    template <typename Stream>\n+    CPureTransaction(deserialize_type, Stream& s) : CPureTransaction(CMutableTransaction(deserialize, s)) {}\n+\n+    bool IsNull() const\n+    {\n+        return vin.empty() && vout.empty();\n+    }\n+\n+    bool IsCoinBase() const\n+    {\n+        return (vin.size() == 1 && vin[0].prevout.IsNull());\n+    }\n+\n+    bool HasWitness() const\n+    {\n+        for (size_t i = 0; i < vin.size(); i++) {\n+            if (!vin[i].scriptWitness.IsNull()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+};\n+\n+class CTransaction : public CPureTransaction\n+{\n private:\n     /** Memory only. */\n     const uint256 hash;\n@@ -296,23 +338,14 @@ class CTransaction\n     CTransaction();\n \n     /** Convert a CMutableTransaction into a CTransaction. */\n-    CTransaction(const CMutableTransaction &tx);\n-    CTransaction(CMutableTransaction &&tx);\n-\n-    template <typename Stream>\n-    inline void Serialize(Stream& s) const {\n-        SerializeTransaction(*this, s);\n-    }\n+    CTransaction(const CMutableTransaction& tx);\n+    CTransaction(CMutableTransaction&& tx);\n \n     /** This deserializing constructor is provided instead of an Unserialize method.\n      *  Unserialize is not possible, since it would require overwriting const fields. */\n     template <typename Stream>\n     CTransaction(deserialize_type, Stream& s) : CTransaction(CMutableTransaction(deserialize, s)) {}\n \n-    bool IsNull() const {\n-        return vin.empty() && vout.empty();\n-    }\n-\n     const uint256& GetHash() const { return hash; }\n     const uint256& GetWitnessHash() const { return m_witness_hash; };\n \n@@ -328,32 +361,17 @@ class CTransaction\n      */\n     unsigned int GetTotalSize() const;\n \n-    bool IsCoinBase() const\n-    {\n-        return (vin.size() == 1 && vin[0].prevout.IsNull());\n-    }\n-\n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n         return a.hash == b.hash;\n     }\n \n     friend bool operator!=(const CTransaction& a, const CTransaction& b)\n     {\n-        return a.hash != b.hash;\n+        return !(a == b);\n     }\n \n     std::string ToString() const;\n-\n-    bool HasWitness() const\n-    {\n-        for (size_t i = 0; i < vin.size(); i++) {\n-            if (!vin[i].scriptWitness.IsNull()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n };\n \n /** A mutable version of CTransaction. */\n@@ -365,6 +383,7 @@ struct CMutableTransaction\n     uint32_t nLockTime;\n \n     CMutableTransaction();\n+    explicit CMutableTransaction(const CPureTransaction& tx);\n     explicit CMutableTransaction(const CTransaction& tx);\n \n     template <typename Stream>\n@@ -399,7 +418,7 @@ struct CMutableTransaction\n     }\n };\n \n-typedef std::shared_ptr<const CTransaction> CTransactionRef;\n+template <typename Tx> static inline CPureTransactionRef MakePureTransactionRef(Tx&& txIn) { return std::make_shared<const CPureTransaction>(std::forward<Tx>(txIn)); }\n static inline CTransactionRef MakeTransactionRef() { return std::make_shared<const CTransaction>(); }\n template <typename Tx> static inline CTransactionRef MakeTransactionRef(Tx&& txIn) { return std::make_shared<const CTransaction>(std::forward<Tx>(txIn)); }\n "
      },
      {
        "sha": "9b6de8d17eb56513def8ad4f4ce31d95b4f84f1a",
        "filename": "src/primitives/tx_types.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/primitives/tx_types.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/primitives/tx_types.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/tx_types.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_PRIMITIVES_TX_TYPES_H\n+#define BITCOIN_PRIMITIVES_TX_TYPES_H\n+\n+#include <memory>\n+\n+// Forward declarations and typedefs to be used as replacement for the full\n+// transaction.h or block.h header\n+\n+class CPureTransaction;\n+class CTransaction;\n+\n+using CPureTransactionRef = std::shared_ptr<const CPureTransaction>;\n+using CTransactionRef = std::shared_ptr<const CTransaction>;\n+\n+template <typename TxRef>\n+class Block;\n+\n+using CPureBlock = Block<CPureTransactionRef>;\n+using CBlock = Block<CTransactionRef>;\n+\n+#endif // BITCOIN_PRIMITIVES_TX_TYPES_H"
      },
      {
        "sha": "e57e3ae8c769ac0f04e7ff2aabb8d162e41da982",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -7,9 +7,10 @@\n \n #include <vector>\n #include <stdint.h>\n+\n #include <amount.h>\n+#include <primitives/tx_types.h>\n \n-class CBlock;\n class CBlockIndex;\n class UniValue;\n "
      },
      {
        "sha": "68aea588dddf3b15f77198d30ee965b90781aafd",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -15,8 +15,6 @@\n \n class CPubKey;\n class CScript;\n-class CTransaction;\n-class uint256;\n \n /** Signature hash types/flags */\n enum"
      },
      {
        "sha": "d4b0b2ce609c66be304dae36ec5fba5670866726",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -7,7 +7,9 @@\n #define BITCOIN_SCRIPT_SIGN_H\n \n #include <boost/optional.hpp>\n+\n #include <hash.h>\n+#include <primitives/tx_types.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <streams.h>\n@@ -16,7 +18,6 @@ class CKey;\n class CKeyID;\n class CScript;\n class CScriptID;\n-class CTransaction;\n \n struct CMutableTransaction;\n "
      },
      {
        "sha": "3ea21b5cac3cf5e26310e625fee33e83b11d0503",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -256,7 +256,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n }\n \n // Store of all necessary tx and undo data for next test\n-typedef std::map<COutPoint, std::tuple<CTransaction,CTxUndo,Coin>> UtxoData;\n+typedef std::map<COutPoint, std::tuple<CPureTransaction, CTxUndo, Coin>> UtxoData;\n UtxoData utxoData;\n \n UtxoData::iterator FindRandomFrom(const std::set<COutPoint> &utxoSet) {\n@@ -382,14 +382,14 @@ BOOST_AUTO_TEST_CASE(updatecoins_simulation_test)\n             utxoset.insert(outpoint);\n \n             // Track this tx and undo info to use later\n-            utxoData.emplace(outpoint, std::make_tuple(tx,undo,old_coin));\n+            utxoData.emplace(outpoint, std::make_tuple(CPureTransaction{tx}, undo, old_coin));\n         } else if (utxoset.size()) {\n             //1/20 times undo a previous transaction\n             auto utxod = FindRandomFrom(utxoset);\n \n-            CTransaction &tx = std::get<0>(utxod->second);\n-            CTxUndo &undo = std::get<1>(utxod->second);\n-            Coin &orig_coin = std::get<2>(utxod->second);\n+            const CPureTransaction& tx = std::get<0>(utxod->second);\n+            const CTxUndo& undo = std::get<1>(utxod->second);\n+            const Coin& orig_coin = std::get<2>(utxod->second);\n \n             // Update the expected result\n             // Remove new outputs"
      },
      {
        "sha": "999546bfe4fbf5c89034205c95a624f035eed73f",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparamsbase.h>\n #include <fs.h>\n #include <key.h>\n+#include <primitives/tx_types.h>\n #include <pubkey.h>\n #include <random.h>\n #include <scheduler.h>\n@@ -73,7 +74,6 @@ struct TestingSetup: public BasicTestingSetup {\n     ~TestingSetup();\n };\n \n-class CBlock;\n struct CMutableTransaction;\n class CScript;\n "
      },
      {
        "sha": "d7dd9149467996beb8a3b2bba0fca78d1d61112e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -1073,7 +1073,8 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+template <typename Block>\n+bool ReadBlockFromDisk(Block& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {\n     block.SetNull();\n \n@@ -1096,8 +1097,11 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n \n     return true;\n }\n+template bool ReadBlockFromDisk<CPureBlock>(CPureBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+template bool ReadBlockFromDisk<CBlock>(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n \n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+template <typename Block>\n+bool ReadBlockFromDisk(Block& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     CDiskBlockPos blockPos;\n     {\n@@ -1112,6 +1116,8 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n                 pindex->ToString(), pindex->GetBlockPos().ToString());\n     return true;\n }\n+template bool ReadBlockFromDisk<CPureBlock>(CPureBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+template bool ReadBlockFromDisk<CBlock>(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n \n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n {"
      },
      {
        "sha": "5081fa47b5bdb87daebfea46ba0644009da0d8de",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -389,8 +389,10 @@ void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+template <typename Block>\n+bool ReadBlockFromDisk(Block& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+template <typename Block>\n+bool ReadBlockFromDisk(Block& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n "
      },
      {
        "sha": "628a8f3b36e2edc237d6624d986cf64db0fbbd7a",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -13,7 +13,6 @@\n #include <memory>\n \n extern CCriticalSection cs_main;\n-class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n class CBlockIndex;"
      },
      {
        "sha": "18f8aba4199f62183d01a4300891519048cc3e8c",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775202dea78c2c139823029bd8124836b064943e/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775202dea78c2c139823029bd8124836b064943e/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=775202dea78c2c139823029bd8124836b064943e",
        "patch": "@@ -174,9 +174,8 @@ bool CZMQPublishRawBlockNotifier::NotifyBlock(const CBlockIndex *pindex)\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n     {\n         LOCK(cs_main);\n-        CBlock block;\n-        if(!ReadBlockFromDisk(block, pindex, consensusParams))\n-        {\n+        CPureBlock block;\n+        if (!ReadBlockFromDisk(block, pindex, consensusParams)) {\n             zmqError(\"Can't read block from disk\");\n             return false;\n         }"
      }
    ]
  }
]