MarcoFalke,2018-04-26T21:38:16Z,The build failure is due to an eight year old bug in clang: https://bugs.llvm.org/show_bug.cgi?id=8263,https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384797131,384797131,
sdaftuar,2018-04-27T13:04:53Z,"I like the goal here but I find the changes a bit overwhelming for achieving this.  It seems like we could achieve this more easily in other ways, like (1) just building the hash on demand the first time it's requested, or (2) adding a deserialization flag to CTransaction that instructs it to skip the hash if we're not planning to use it?\n\n[I'm not sure if (1) is a great solution, since there ",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384964026,384964026,
MarcoFalke,2018-04-27T14:24:19Z,"I didn't particularly like option (1) because it makes the caching run-time depended (it is always compiled in, but only used when it happens to be requested), compared to having it compile time enforced by typing `CPureTransaction` instead of `CTransaction`.\n\nNote that my approach is a variation of option (2) by passing through the type of the transaction to `ReadBlockFromDisk` instead of pas",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384985819,384985819,
sdaftuar,2018-04-27T14:40:46Z,"Fair enough, I just don't want us to overlook simpler solutions that might be acceptable.  I'm happy to let the reviewers with stronger feelings about the design of these data types chime in.",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384990768,384990768,
MarcoFalke,2018-04-27T15:09:52Z,"I just pushed a version that might compile on our buggy clang and that is according to the design that @sipa requested in https://github.com/bitcoin/bitcoin/pull/13011#issuecomment-383145046\n\n> Then at the very least introduce alternate versions of CTransaction/CBlock that don't precompute anything, for use in reindexing and rescanning and serving blocks from disk.",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-384999627,384999627,
sipa,2018-04-27T20:57:42Z,"@MarcoFalke Thanks for working on this, I'll review soon.\n\n@sdaftuar My preference is having separate types, for these reasons:\n* Having lazily-computed hashes in transactions involves synchronization structures (atomics at least to avoid multiple threads simultaneously getting a hash for the first time).\n* Smaller in memory in places where it's not needed.\n* We have the option of later ",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385092217,385092217,
gmaxwell,2018-05-01T18:15:06Z,"This seems like very useful work, but for serving out historic blocks it would perhaps be better if we could (largely) avoid deserializing and re-serializing them entirely as doing so is tremendously expensive (involving a billionity mallocs). Better is better however. ",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385745421,385745421,
laanwj,2018-05-02T11:09:06Z,">  Having lazily-computed hashes in transactions involves synchronization structures (atomics at least to avoid multiple threads simultaneously getting a hash for the first time).\n\nAgree. The main thing I don't like about lazy evaluation is that it's much harder to reason about performance then. I think I prefer the current explicit solution, even though much more verbose.\n\n> This seems li",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385942233,385942233,
laanwj,2018-05-02T12:17:59Z,"> but for serving out historic blocks it would perhaps be better if we could (largely) avoid deserializing and re-serializing them entirely\n\nMy dumb try at this: #13151",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-385958355,385958355,
gmaxwell,2018-05-02T18:08:30Z,"Even with 13151 something like this might very useful for making _rescan_ faster...  rescan is slow enough to make it largely unusable now.  I'd been thinking deserialization was worse than hashing in it, but the performance numbers above make me wonder.",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386069372,386069372,
TheBlueMatt,2018-05-02T19:57:27Z,"Certainly Concept ACK if we can get rescan up for this (even as a separate PR), just using it for serving blocks for old nodes is maybe less worth it (at least post-13151).",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386101356,386101356,
MarcoFalke,2018-05-02T20:00:35Z,Will do a rebase once the other pull is merged,https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386102286,386102286,
jonasschnelli,2018-05-03T06:44:48Z,"Nice work!\nConcept ACK",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-386204339,386204339,
sipa,2018-05-23T23:16:40Z,"Any reason not to reuse `CMutableTransaction` for the purposes where `CPureTransaction` is introduced here? The only reason why `CTransaction` is immutable is to not interfere with or require synchronization on its precomputed hashes. As `CMutableTransaction` has no cashed hashes, this is not an issue.\n",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391530089,391530089,
MarcoFalke,2018-05-24T15:54:42Z,"@sipa I'd prefer to make it ""type-safe"", i.e. make it impossible/compile-time enforced that none of the expensive operations are called. Otherwise this seems too fragile.\n\nI think to make it compile-time enforced, this would require to change one of transaction types to be a class that takes template arguments and then add a static assert in `Get*Hash`. I am happy to change to that implementat",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391766471,391766471,
sipa,2018-05-24T16:04:52Z,"@MarcoFalke But as long as you keep CMutableTransaction around, such a guarantee doesn't really exist, as that class still has uncached hashing operations (and should probably remain so, see a recent PR that speeds up signing by avoiding CMutableTransaction -> CTransaction conversions).\n\nMy preference is just to evolve CTransaction into the validation-logic-optimized-efficient transaction repres",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391769939,391769939,
sipa,2018-05-24T16:59:38Z,"After discussing this a bit with @MarcoFalke, I see the advantage of being able to enforce through the type system that no GetHash is unexpectedly called on transactions that don't have a cache in certain specific cases (like serving historical blocks).\n\nOn the other hand, it's also introducing yet another type for the same data, which seems a high price. As it has const fields, conversion to ot",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-391787330,391787330,
DrahtBot,2018-09-20T22:38:38Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14337 ([refactoring] Create common interface for CMutableTransaction and CTransaction with static polymorphism by lucash-dev)\n* #14194 (Annotate unused parameters with [[maybe_unused]] by practicalswift)\n* #13864 (validation: Document where we are intentionally ignoring bool return values",https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-423356937,423356937,
ryanofsky,2018-10-19T15:19:58Z,Curious why this was closed.,https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-431399312,431399312,
MarcoFalke,2019-11-20T04:00:36Z,Rebased (with the p2p changes removed) here: #17529,https://github.com/bitcoin/bitcoin/pull/13098#issuecomment-555827098,555827098,
ryanofsky,2018-09-13T20:49:21Z,"It seems like when `!pblock && inv.type == MSG_FILTERED_BLOCK` or  `!pblock && inv.type == MSG_CMPCT_BLOCK` in previous code, the message would be dropped, but now the block gets read from disk? Is this an intentional change if so?",https://github.com/bitcoin/bitcoin/pull/13098#discussion_r217529351,217529351,src/net_processing.cpp
practicalswift,2018-09-19T07:35:39Z,"```\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/primitives/transaction.h:292]: (style) Class 'CPureTransaction' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696305,218696305,src/primitives/transaction.h
practicalswift,2018-09-19T07:35:50Z,"```\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/primitives/transaction.h:293]: (style) Class 'CPureTransaction' has a constructor with 1 argument that is not explicit.\n```",https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696343,218696343,src/primitives/transaction.h
practicalswift,2018-09-19T07:36:09Z,"```\n2018-09-18 21:44:48 cppcheck(pr=13098): [src/bench/checkblock.cpp:31]: (warning) Assert statement calls a function which may have desired side effects: 'Rewind'.\n```",https://github.com/bitcoin/bitcoin/pull/13098#discussion_r218696418,218696418,src/bench/checkblock.cpp
