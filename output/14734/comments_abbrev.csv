promag,2018-11-16T09:41:52Z,~~Both old and~~ new code LGTM.,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439337521,439337521,
practicalswift,2018-11-16T10:31:39Z,"Extremely nice find and another excellent contribution from you! Thanks! You're right that the sanitizers don't catch this class of UB. I think `tis-interpreter` is the only good tool catching this class of UB. May I ask how you found this issue?\n\nFrom what I can see we unconditionally hit this UB as part of startup no matter what parameters we pass to `bitcoind` :-\\n\nWhy this is UB: Assum",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439351565,439351565,
practicalswift,2018-11-16T10:36:26Z,"@promag What is ""old code"" referring to? Don't you agree that the existing code in `master` invokes UB? :-)",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439352867,439352867,
promag,2018-11-16T10:40:48Z,"@practicalswift TIL, it is UB unless one past the last element.\n\nutACK 0f459d8.",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439354048,439354048,
promag,2018-11-16T11:09:05Z,"@kazcw how about this:\n```diff\ndiff --git a/src/uint256.cpp b/src/uint256.cpp\nindex d9da66803..e5cadfae5 100644\n--- a/src/uint256.cpp\n+++ b/src/uint256.cpp\n@@ -40,13 +40,12 @@ void base_blob<BITS>::SetHex(const char* psz)\n     const char* pbegin = psz;\n     while (::HexDigit(*psz) != -1)\n         psz++;\n-    psz--;\n     unsigned char* p1 = (unsigned char*)data;\n     unsigne",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439361248,439361248,
kazcw,2018-11-16T15:41:53Z,"@practicalswift Just reading code!\n\n@promag That would be the minimal change to fix the problem, but Satoshi wrote C++ like an old-school C hacker :laughing:. IMO indexing is a little clearer in a codebase that these days uses more modern idioms.",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439433259,439433259,
practicalswift,2018-11-16T17:01:55Z,"@kazcw Nice! Then keep on reading code please! :-)\n\nI've tried to launch a crusade against UB in Bitcoin Core. I even named the latest C-lightning release ""The Consensus Loving Nasal Daemon"" as a catchy slogan in this fight, so and I'm very happy to see your contributions! Keep 'em coming! :-)\n\nContext:\n* https://twitter.com/practicalswift/status/1051524615204470784\n* https://twitter.c",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439458877,439458877,
practicalswift,2018-11-16T17:44:23Z,"@MarcoFalke @laanwj What about adding a new label – say ""Undefined Behaviour"" – for UB pull requests and issues?\n\nFWIW I think the current use of the ""Refactoring"" label for UB PRs is problematic for a number of reasons:\n* UB PRs might be considered less important from a review attention perspective due to the refactoring label\n* The use of the refactoring label for UB might be interpreted",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439471320,439471320,
sipa,2018-11-16T18:05:53Z,"@practicalswift While I am in favor of (slowly) moving the code to strictly comply with the C++ standard, I also think we should also be aware that there are differences between:\n* Technically UB, but not for any real platform\n* Technically UB, but well defined for all systems we support\n* Would be UB, but not in any reachable codepath\n* Any of the above that follows from a misunderstandin",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439477521,439477521,
MarcoFalke,2018-11-16T18:42:35Z,"Mostly agree with @sipa.\n\nAlso, there is a label ""Bug"", which (I guess) could be used when there is an observable issue with the code. I.e. actual malfunction and not just a code style issue or random compiler warning. Generally, if you are unable to write a functional or unit test case that will fail on current master, I'd say applying the ""Refactoring"" label is just fine.\n\nWe only suppor",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439487992,439487992,
kazcw,2018-11-16T22:43:52Z,"This is a complex but important topic. I think it would be worth working out a clearly-defined policy. I propose for comment an approach that admits mostly-objective triage into practical categories, based on what kinds of testing can demonstrate the issue. I have a starting point here (suggested changes / fundamental disagreements welcome):\nhttps://gist.github.com/kazcw/6849c43796d51d3e56ad12bf",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439551854,439551854,
practicalswift,2018-11-17T17:03:07Z,"@MarcoFalke \n\n> We only support gcc and clang as compilers and in most cases of UB they just do the right thing without having to rewrite the code.\n\nAre you willing to bet your money on that they'll ""do the right thing"" also in the future?\n\nThe C++ standard is a contract between the compiler writer and the programmer.\n\nAs programmers we can choose to break the contract and hope tha",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439631524,439631524,
MarcoFalke,2018-11-17T17:07:18Z,"> It looks like the current sanitizers used in CI test runs are ""thread"" and ""integer,undefined""\n\nUnfortunately we don't run the thread sanitizer (#14058), nor the memory sanitizer or valgrind (due to memory issues internal to bdb and qt, IIRC).",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-439631791,439631791,
l2a5b1,2018-11-20T10:25:15Z,"utACK 0f459d868d85053f1cc066ea9099793f88cbd655\n\nThis pull request eliminates pointer arithmetic [1] and addresses UB if `psz` points to an array [2].\n\n[1] “Pointer arithmetic is fragile and easy to get wrong, the source of many, many bad bugs and security violations.“ [ES.42: Keep use of pointers simple and straightforward](https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#es42-",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440222105,440222105,
gmaxwell,2018-11-20T20:49:15Z,@practicalswift  It sounds like you are only looking at things from one side.   Consider a case where a behaviour is language spec UB but explicitly defined by our supported toolchain and ubiquitously used.  In that case the existing behaviour is at least currently harmless.  A fix risks introducing its own bugs (potentially not harmless) and also diverts review/testing attention away from other c,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440424382,440424382,
practicalswift,2018-11-20T23:35:22Z,"@gmaxwell I agree with the point you and @sipa make: all changes – including UB fixes – should be critically evaluated from a risk-reward perspective. And PR:s deemed too risky should be closed off after review.\n\nPerhaps what we don't agree on is how much work it would take to kill off the remaining instances of UB in our code base, and how complex the required changes would be. Could that be ",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440467580,440467580,
MarcoFalke,2018-11-21T00:10:08Z,"To the best of my knowledge the runtime observable UBs were already documented through an UBSAN suppressions file (https://github.com/bitcoin/bitcoin/blob/5c292dafcd54adfcd9f80c0e1fccb45c8683808f/contrib/sanitizers-ubsan.suppressions)? To fix all of them a series of separate pull requests would be required, each of them a massive review burden. It would probably take months if not years to get all",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440476655,440476655,
practicalswift,2018-11-21T07:07:04Z,"@MarcoFalke Some things that are important to note when talking about UB:\n* Wraparound behaviour using **unsigned** integers is well-defined, so what `-fsanitize=integer` calls `unsigned-integer-overflow` is not UB. (_Unintended_ unsigned integer wraparound can be a source of bugs, but it is not UB.)\n* UBSan does not catch all UBs. Since UBSan performs dynamic analysis it is restricted to find",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440560003,440560003,
sipa,2018-11-21T07:26:24Z,@practicalswift I think the only disagreement is on how much of a priority this is.,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-440563764,440563764,
practicalswift,2018-11-27T18:43:34Z,"@kazcw \n\n> It looks like the current sanitizers used in CI test runs are ""thread"" and ""integer,undefined"". That is definitely insufficient for the definition of the ""Brittle"" classification: for example, those sanitizers don't include uninitialized reads. IMO a whitelist approach is appropriate: every sanitizer category should be considered to represent potential danger unless specifically dec",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-442170962,442170962,
DrahtBot,2019-02-04T11:31:01Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-460216072,460216072,
laanwj,2019-02-12T13:30:06Z,This is sure generating a lot of discussion for a few-line change. Is there disagreement on merging this specific change?,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-462759362,462759362,
practicalswift,2019-02-28T22:21:14Z,@laanwj There is no disagreement about the code change from what I can tell. I think we should merge this or alternatively document in `assumptions.h` that we assume this specific class of UB to be safe in practice.,https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-468462413,468462413,
gmaxwell,2019-05-07T02:33:23Z,"Please do not just accept any actually known true UB as just an ""assumption"". Assumptions should be for platform limitations (e.g. we require int be 32 bits) and implementation defined behaviour (including places where clang and GCC explicitly strengthen the language specification and turn something that the language leaves UB into implementation defined). \n\nI think it would be really nice if ",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-489883624,489883624,
laanwj,2019-05-07T09:49:21Z,"Agreed: so let's move back the focus in this PR to reviewing the specific code change. Please move general UB discussion elsewhere:\n\nThis has currently 2 utACKs, no NACKs.",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-490013421,490013421,
practicalswift,2019-05-16T08:34:01Z,"This might be of help for people reviewing this PR who want to understand the old behaviour:\n\nConsider the case `SetHex(""1000000000000000000000000000000000000000000000000000000000000000"")`:\n\nWhen the reverse processing reaches the leading `1` we have `psz == pbegin` and the following happens:\n\n```\n*p1 |= ((unsigned char)HexDigit(*psz--) << 4);\n```\n\nPlease note that `psz` has no",https://github.com/bitcoin/bitcoin/pull/14734#issuecomment-492973179,492973179,
