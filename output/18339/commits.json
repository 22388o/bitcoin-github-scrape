[
  {
    "sha": "71d794839c87f52ef2ef982b793c1e4e66780d30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWQ3OTQ4MzljODdmNTJlZjJlZjk4MmI3OTNjMWU0ZTY2NzgwZDMw",
    "commit": {
      "author": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-12T00:46:38Z"
      },
      "committer": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-12T00:46:38Z"
      },
      "message": "[test] supports multiple reasons",
      "tree": {
        "sha": "a99d1e12136851657ac8ae8eabf3c5d8b8011ac4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a99d1e12136851657ac8ae8eabf3c5d8b8011ac4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71d794839c87f52ef2ef982b793c1e4e66780d30",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEcVfiNfYHh/IGi1hx31BLyHV39AIFAl5phm4ACgkQ31BLyHV3\n9AK2OAf9FECfoXZ/k80YLN69WpzBC/PMeIiu3hEME9UUcsRdyKzklU7wVzg2cRWp\nQICacfEE96mYXTFADNFpqEsuUIwG+MJz/hMiVQuyDDXUlA6LR2VPTm16xAHdj5gB\nQw8X8tTMlRPyt5NanoCSt4B8KsLjoag9f28Bkz02ZOt4OKyb29cbmCUoRRfDgI0O\nFBAuBiB9W8SkE21PwDeebZomkjpgYxlcLs+knD98rOF842LtSGe7PMrS4QCL8Iu3\n3NqGSr3YBDa+azTGq4vMu22xUmeWvQ2X+oApLQn8ovXMPv008oB+759B7y2/Wnxb\nkZX6zsDT4k17mtkvYLrIfEKzZQxq6Q==\n=yVaH\n-----END PGP SIGNATURE-----",
        "payload": "tree a99d1e12136851657ac8ae8eabf3c5d8b8011ac4\nparent 54a7ef612a3b69984d521432f8a694a682c76090\nauthor Gloria Zhao <gzhao408@berkeley.edu> 1583973998 -0700\ncommitter Gloria Zhao <gzhao408@berkeley.edu> 1583973998 -0700\n\n[test] supports multiple reasons\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d794839c87f52ef2ef982b793c1e4e66780d30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71d794839c87f52ef2ef982b793c1e4e66780d30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d794839c87f52ef2ef982b793c1e4e66780d30/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54a7ef612a3b69984d521432f8a694a682c76090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54a7ef612a3b69984d521432f8a694a682c76090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54a7ef612a3b69984d521432f8a694a682c76090"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4deb8e741a5ac7f10bc58c15860e5ec13680aceb",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71d794839c87f52ef2ef982b793c1e4e66780d30/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71d794839c87f52ef2ef982b793c1e4e66780d30/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=71d794839c87f52ef2ef982b793c1e4e66780d30",
        "patch": "@@ -135,7 +135,7 @@ def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=Non\n \n     - Submit the block over the p2p interface\n     - use the getbestblockhash rpc to check for acceptance.\"\"\"\n-    reason = [reason] if reason else []\n+    reason = reason if reason else []\n     with node.assert_debug_log(expected_msgs=reason):\n         p2p.send_message(msg_block(block) if with_witness else msg_no_witness_block(block))\n         p2p.sync_with_ping()\n@@ -341,7 +341,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason='unexpected-witness')\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason=['unexpected-witness'])\n \n         # But it should not be permanently marked bad...\n         # Resend without witness information.\n@@ -488,7 +488,7 @@ def test_v0_outputs_arent_spendable(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Verify that segwit isn't activated. A block serialized with witness\n         # should be rejected prior to activation.\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason='unexpected-witness')\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason=['unexpected-witness'])\n         # Now send the block without witness. It should be accepted\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=False)\n \n@@ -514,7 +514,7 @@ def test_v0_outputs_arent_spendable(self):\n \n             # When the block is serialized with a witness, the block will be rejected because witness\n             # data isn't allowed in blocks that don't commit to witness data.\n-            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason='unexpected-witness')\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason=['unexpected-witness'])\n \n             # When the block is serialized without witness, validation fails because the transaction is\n             # invalid (transactions are always validated with SCRIPT_VERIFY_WITNESS so a segwit v0 transaction\n@@ -1405,7 +1405,7 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=[\"reserved for soft-fork upgrades\"])\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()"
      }
    ]
  },
  {
    "sha": "ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjNmOWUyN2NhNmUwN2M2MzRjZWYwZDZhYTc3MDNmODg5Zjk0YWEy",
    "commit": {
      "author": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-13T18:50:57Z"
      },
      "committer": {
        "name": "Gloria Zhao",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-03-13T18:50:57Z"
      },
      "message": "Revert \"[test] supports multiple reasons\"\n\nThis reverts commit 71d794839c87f52ef2ef982b793c1e4e66780d30.",
      "tree": {
        "sha": "13004adb153060fe957b54a0f18f3e03c2228a00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13004adb153060fe957b54a0f18f3e03c2228a00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEcVfiNfYHh/IGi1hx31BLyHV39AIFAl5r1hcACgkQ31BLyHV3\n9AKkHQf/bmHnK5dLQEX75vSa0NpORPeIjTgBqq0doesfn38U1LoBi4bB6gEP2wDn\nbHXstoZVCG4BWWvBAgqcKwycwumSCcaBXB60QLQnUZ+T1d+USkGZ6AaUIQAVIrVB\n/C2OrOUgqOPA9ftqen4J0wEsFsTX8XZVpONn67C4qP7hWVZmwmrc37dNqufSOU/N\n7LIdhdIvq/xaRMV8sfV+I3JO7/QLFEuyudUMhCJeuaad/iKYiW1iwv9e0TrWmw/e\nBaWu0KXOKRst4vpz2iB4TtTbRHiva7Kzw/7dAuE+npfscZwsjebWUMNg+p9bKL9V\nTo8uUBG0/OAR+GxZl7vWE9GZ/Fh3oQ==\n=Eeg1\n-----END PGP SIGNATURE-----",
        "payload": "tree 13004adb153060fe957b54a0f18f3e03c2228a00\nparent 71d794839c87f52ef2ef982b793c1e4e66780d30\nauthor Gloria Zhao <gzhao408@berkeley.edu> 1584125457 -0700\ncommitter Gloria Zhao <gzhao408@berkeley.edu> 1584125457 -0700\n\nRevert \"[test] supports multiple reasons\"\n\nThis reverts commit 71d794839c87f52ef2ef982b793c1e4e66780d30.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71d794839c87f52ef2ef982b793c1e4e66780d30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71d794839c87f52ef2ef982b793c1e4e66780d30",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71d794839c87f52ef2ef982b793c1e4e66780d30"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ad5a12468037a0ff61d7222498949a340ad2cb4f",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ef3f9e27ca6e07c634cef0d6aa7703f889f94aa2",
        "patch": "@@ -135,7 +135,7 @@ def test_witness_block(node, p2p, block, accepted, with_witness=True, reason=Non\n \n     - Submit the block over the p2p interface\n     - use the getbestblockhash rpc to check for acceptance.\"\"\"\n-    reason = reason if reason else []\n+    reason = [reason] if reason else []\n     with node.assert_debug_log(expected_msgs=reason):\n         p2p.send_message(msg_block(block) if with_witness else msg_no_witness_block(block))\n         p2p.sync_with_ping()\n@@ -341,7 +341,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Sending witness data before activation is not allowed (anti-spam\n         # rule).\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason=['unexpected-witness'])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason='unexpected-witness')\n \n         # But it should not be permanently marked bad...\n         # Resend without witness information.\n@@ -488,7 +488,7 @@ def test_v0_outputs_arent_spendable(self):\n         self.update_witness_block_with_transactions(block, [tx])\n         # Verify that segwit isn't activated. A block serialized with witness\n         # should be rejected prior to activation.\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason=['unexpected-witness'])\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason='unexpected-witness')\n         # Now send the block without witness. It should be accepted\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True, with_witness=False)\n \n@@ -514,7 +514,7 @@ def test_v0_outputs_arent_spendable(self):\n \n             # When the block is serialized with a witness, the block will be rejected because witness\n             # data isn't allowed in blocks that don't commit to witness data.\n-            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason=['unexpected-witness'])\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=True, reason='unexpected-witness')\n \n             # When the block is serialized without witness, validation fails because the transaction is\n             # invalid (transactions are always validated with SCRIPT_VERIFY_WITNESS so a segwit v0 transaction\n@@ -1405,7 +1405,7 @@ def test_segwit_versions(self):\n         tx3.rehash()\n         # Spending a higher version witness output is not allowed by policy,\n         # even with fRequireStandard=false.\n-        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=[\"reserved for soft-fork upgrades\"])\n+        test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=False, reason=\"reserved for soft-fork upgrades\")\n \n         # Building a block with the transaction must be valid, however.\n         block = self.build_next_block()"
      }
    ]
  }
]