[
  {
    "sha": "98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGM3YzhmZDFkMzcxMmUwMmJlMGU5ZjJlZWNhN2UwMmFhNTRkMTk3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T03:42:51Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-30T05:42:10Z"
      },
      "message": "Remove dead transaction replacement code\n\nThis dead code can be resurrected from git history if\ntransaction replacement is ever implemented. Keeping\ndead code in the source is a bad idea, because it implies\nit was tested and worked at some point, which is not true.",
      "tree": {
        "sha": "68f3f56628351d052122f5d302e462067dda43bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68f3f56628351d052122f5d302e462067dda43bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7e8a7537a8106bace2886fd7e6480f561986998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7e8a7537a8106bace2886fd7e6480f561986998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7e8a7537a8106bace2886fd7e6480f561986998"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 1,
      "deletions": 29
    },
    "files": [
      {
        "sha": "db8f72f940eea3b2eee59f918db8b6d66fa5e916",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 29,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
        "patch": "@@ -660,7 +660,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         return false;\n \n     // Check for conflicts with in-memory transactions\n-    CTransaction* ptxOld = NULL;\n     {\n     LOCK(pool.cs); // protect pool.mapNextTx\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n@@ -670,22 +669,6 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         {\n             // Disable replacement feature for now\n             return false;\n-\n-            // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n-                return false;\n-            ptxOld = pool.mapNextTx[outpoint].ptx;\n-            if (IsFinalTx(*ptxOld))\n-                return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n-                return false;\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                COutPoint outpoint = tx.vin[i].prevout;\n-                if (!pool.mapNextTx.count(outpoint) || pool.mapNextTx[outpoint].ptx != ptxOld)\n-                    return false;\n-            }\n-            break;\n         }\n     }\n     }\n@@ -782,19 +765,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     }\n \n     // Store transaction in memory\n-    {\n-        if (ptxOld)\n-        {\n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n-            pool.remove(*ptxOld);\n-        }\n-        pool.addUnchecked(hash, tx);\n-    }\n+    pool.addUnchecked(hash, tx);\n \n-    ///// are we sure this is ok when loading transactions or restoring block txes\n-    // If updated, erase old tx from wallet\n-    if (ptxOld)\n-        g_signals.EraseTransaction(ptxOld->GetHash());\n     g_signals.SyncTransaction(hash, tx, NULL);\n \n     return true;"
      }
    ]
  },
  {
    "sha": "0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzMzYzFiZGU2OWM2Y2NmZTU5M2QyZWVjNzc1ZDBhZTMyZmU3MTQw",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T06:03:51Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-30T05:42:10Z"
      },
      "message": "Refactor: move GetValueIn(tx) to tx.GetValueIn()\n\nGetValueIn makes more sense as a CTransaction member.",
      "tree": {
        "sha": "05a186706a752322ad057188c5660687162b2246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05a186706a752322ad057188c5660687162b2246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98c7c8fd1d3712e02be0e9f2eeca7e02aa54d197"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 33,
      "deletions": 36
    },
    "files": [
      {
        "sha": "409d5713f3ed493646f7a5e8469e56186adceec7",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -340,7 +340,6 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n-        @see CTransaction::FetchInputs\n      */\n     int64_t GetValueIn(const CTransaction& tx);\n "
      },
      {
        "sha": "5da6f11b5126751878a8ce2c2854db79604d2d8f",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -106,6 +106,18 @@ bool CTransaction::IsNewerThan(const CTransaction& old) const\n     return fNewer;\n }\n \n+int64_t CTransaction::GetValueOut() const\n+{\n+    int64_t nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, vout)\n+    {\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+    }\n+    return nValueOut;\n+}\n+\n std::string CTransaction::ToString() const\n {\n     std::string str;"
      },
      {
        "sha": "7b4c6af31914d77a814df2c6b55009df17815c5d",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -14,6 +14,10 @@\n \n class CTransaction;\n \n+/** No amount larger than this (in satoshi) is valid */\n+static const int64_t MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+\n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n {\n@@ -217,6 +221,11 @@ class CTransaction\n     uint256 GetHash() const;\n     bool IsNewerThan(const CTransaction& old) const;\n \n+    // Return sum of txouts.\n+    int64_t GetValueOut() const;\n+    // GetValueIn() is a method on CCoinsViewCache, because\n+    // inputs must be known to compute value in.\n+\n     bool IsCoinBase() const\n     {\n         return (vin.size() == 1 && vin[0].prevout.IsNull());"
      },
      {
        "sha": "0cc134b8fb7a18e62aa642a896715ecfa3ed426f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 21,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -379,21 +379,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-/** Amount of bitcoins spent by the transaction.\n-    @return sum of all outputs (note: does not include fees)\n- */\n-int64_t GetValueOut(const CTransaction& tx)\n-{\n-    int64_t nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"GetValueOut() : value out of range\");\n-    }\n-    return nValueOut;\n-}\n-\n //\n // Check transaction inputs, and make sure any\n // pay-to-script-hash transactions are evaluating IsStandard scripts\n@@ -717,7 +702,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64_t nFees = view.GetValueIn(tx)-GetValueOut(tx);\n+        int64_t nFees = view.GetValueIn(tx)-tx.GetValueOut();\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n@@ -1342,12 +1327,12 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n         }\n \n-        if (nValueIn < GetValueOut(tx))\n+        if (nValueIn < tx.GetValueOut())\n             return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()),\n                              REJECT_INVALID, \"in < out\");\n \n         // Tally transaction fees\n-        int64_t nTxFee = nValueIn - GetValueOut(tx);\n+        int64_t nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()),\n                              REJECT_INVALID, \"fee < 0\");\n@@ -1600,7 +1585,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                                      REJECT_INVALID, \"too many sigops\");\n             }\n \n-            nFees += view.GetValueIn(tx)-GetValueOut(tx);\n+            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n@@ -1620,10 +1605,10 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     if (fBenchmark)\n         LogPrintf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n+    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n                          error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRId64\" vs limit=%\"PRId64\")\",\n-                               GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)),\n+                               block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                          REJECT_INVALID, \"coinbase too large\");\n \n     if (!control.Wait())"
      },
      {
        "sha": "c4e1839443b2167e152b40e845533f31af5febe8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -49,9 +49,6 @@ static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n /** The pre-allocation chunk size for rev?????.dat files (since 0.8) */\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n-/** No amount larger than this (in satoshi) is valid */\n-static const int64_t MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n@@ -320,11 +317,6 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n-/** Amount of bitcoins spent by the transaction.\n-    @return sum of all outputs (note: does not include fees)\n- */\n-int64_t GetValueOut(const CTransaction& tx);\n-\n /** Undo information for a CBlock */\n class CBlockUndo\n {"
      },
      {
        "sha": "5661037acf1375f96e55b39d9bb68e6e088debbd",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -261,7 +261,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-GetValueOut(tx)) / (double(nTxSize)/1000.0);\n+            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n \n             if (porphan)\n             {\n@@ -318,7 +318,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64_t nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n+            int64_t nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "c0c4d537324babde102d8aa2ff46ff6344c1fd4f",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -194,7 +194,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n                 }\n \n-                int64_t nTxFee = nDebit - GetValueOut(wtx);\n+                int64_t nTxFee = nDebit - wtx.GetValueOut();\n                 if (nTxFee > 0)\n                     strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nTxFee) + \"<br>\";\n             }"
      },
      {
        "sha": "6823557ebc7b2d42181ec5569ab089886877681a",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -95,7 +95,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64_t nTxFee = nDebit - GetValueOut(wtx);\n+            int64_t nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {"
      },
      {
        "sha": "b4e522de8f3a8f2d3cfb3cf7dd4e19e7830f01d9",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -1673,7 +1673,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     int64_t nCredit = wtx.GetCredit();\n     int64_t nDebit = wtx.GetDebit();\n     int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe() ? GetValueOut(wtx) - nDebit : 0);\n+    int64_t nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())"
      },
      {
        "sha": "46d6cc56637999ce2b986575e50e6234ce6d7117",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0733c1bde69c6ccfe593d2eec775d0ae32fe7140/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "patch": "@@ -655,7 +655,7 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n     int64_t nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64_t nValueOut = GetValueOut(*this);\n+        int64_t nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n "
      }
    ]
  },
  {
    "sha": "4d707d512070ed88c888fdf625c0ae0f85f68d9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDcwN2Q1MTIwNzBlZDg4Yzg4OGZkZjYyNWMwYWUwZjg1ZjY4ZDli",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-11T07:35:14Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-11-30T05:42:10Z"
      },
      "message": "Add verbose boolean to getrawmempool\n\nAlso changes mempool to store CTxMemPoolEntries\nto keep track of when they enter/exit the pool.",
      "tree": {
        "sha": "2fe293e6b06acff639d8c1361fe1c0725313dd30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fe293e6b06acff639d8c1361fe1c0725313dd30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d707d512070ed88c888fdf625c0ae0f85f68d9b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d707d512070ed88c888fdf625c0ae0f85f68d9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d707d512070ed88c888fdf625c0ae0f85f68d9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d707d512070ed88c888fdf625c0ae0f85f68d9b/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0733c1bde69c6ccfe593d2eec775d0ae32fe7140",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0733c1bde69c6ccfe593d2eec775d0ae32fe7140"
      }
    ],
    "stats": {
      "total": 288,
      "additions": 212,
      "deletions": 76
    },
    "files": [
      {
        "sha": "86b2a6ef178b4c809370aa630511e2cf65888d71",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -178,3 +178,19 @@ bool CCoinsViewCache::HaveInputs(const CTransaction& tx)\n     }\n     return true;\n }\n+\n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n+{\n+    if (tx.IsCoinBase())\n+        return 0.0;\n+    double dResult = 0.0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        const CCoins &coins = GetCoins(txin.prevout.hash);\n+        if (!coins.IsAvailable(txin.prevout.n)) continue;\n+        if (coins.nHeight < nHeight) {\n+            dResult += coins.vout[txin.prevout.n].nValue * (nHeight-coins.nHeight);\n+        }\n+    }\n+    return tx.ComputePriority(dResult);\n+}"
      },
      {
        "sha": "0ad28524a14d49b27a05fcc5e0126f580c542148",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -346,6 +346,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx);\n \n+    // Return priority of tx at height nHeight\n+    double GetPriority(const CTransaction &tx, int nHeight);\n+\n     const CTxOut &GetOutputFor(const CTxIn& input);\n \n private:"
      },
      {
        "sha": "f41ea87feaab91c73b1465be8ede9f51e66060a8",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -118,6 +118,25 @@ int64_t CTransaction::GetValueOut() const\n     return nValueOut;\n }\n \n+double CTransaction::ComputePriority(double dPriorityInputs, unsigned int nTxSize) const\n+{\n+    // In order to avoid disincentivizing cleaning up the UTXO set we don't count\n+    // the constant overhead for each txin and up to 110 bytes of scriptSig (which\n+    // is enough to cover a compressed pubkey p2sh redemption) for priority.\n+    // Providing any more cleanup incentive than making additional inputs free would\n+    // risk encouraging people to create junk outputs to redeem later.\n+    if (nTxSize == 0)\n+        nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n+    BOOST_FOREACH(const CTxIn& txin, vin)\n+    {\n+        unsigned int offset = 41U + std::min(110U, (unsigned int)txin.scriptSig.size());\n+        if (nTxSize > offset)\n+            nTxSize -= offset;\n+    }\n+    if (nTxSize == 0) return 0.0;\n+    return dPriorityInputs / nTxSize;\n+}\n+\n std::string CTransaction::ToString() const\n {\n     std::string str;"
      },
      {
        "sha": "e61cad90ec9f4309f76e6f9435147013ec9f100e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -54,11 +54,11 @@ class COutPoint\n class CInPoint\n {\n public:\n-    CTransaction* ptx;\n+    const CTransaction* ptx;\n     unsigned int n;\n \n     CInPoint() { SetNull(); }\n-    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n+    CInPoint(const CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n     void SetNull() { ptx = NULL; n = (unsigned int) -1; }\n     bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n };\n@@ -226,6 +226,9 @@ class CTransaction\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n \n+    // Compute priority, given priority of inputs and (optionally) tx size\n+    double ComputePriority(double dPriorityInputs, unsigned int nTxSize=0) const;\n+\n     bool IsCoinBase() const\n     {\n         return (vin.size() == 1 && vin[0].prevout.IsNull());"
      },
      {
        "sha": "457fc941e7f80c53a0de087b7e2cafeb33d2daf5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -702,8 +702,13 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64_t nFees = view.GetValueIn(tx)-tx.GetValueOut();\n-        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+        int64_t nValueIn = view.GetValueIn(tx);\n+        int64_t nValueOut = tx.GetValueOut();\n+        int64_t nFees = nValueIn-nValueOut;\n+        double dPriority = view.GetPriority(tx, chainActive.Height());\n+\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n+        unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n         int64_t txMinFee = GetMinFee(tx, nSize, true, GMF_RELAY);\n@@ -747,11 +752,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n+        // Store transaction in memory\n+        pool.addUnchecked(hash, entry);\n     }\n \n-    // Store transaction in memory\n-    pool.addUnchecked(hash, tx);\n-\n     g_signals.SyncTransaction(hash, tx, NULL);\n \n     return true;"
      },
      {
        "sha": "ecc40ac708f334a50578e8ca5407610acbda1315",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 21,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -93,12 +93,12 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n class COrphan\n {\n public:\n-    CTransaction* ptx;\n+    const CTransaction* ptx;\n     set<uint256> setDependsOn;\n     double dPriority;\n     double dFeePerKb;\n \n-    COrphan(CTransaction* ptxIn)\n+    COrphan(const CTransaction* ptxIn)\n     {\n         ptx = ptxIn;\n         dPriority = dFeePerKb = 0;\n@@ -118,7 +118,7 @@ uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n \n // We want to sort transactions by priority and fee, so:\n-typedef boost::tuple<double, double, CTransaction*> TxPriority;\n+typedef boost::tuple<double, double, const CTransaction*> TxPriority;\n class TxPriorityCompare\n {\n     bool byFee;\n@@ -191,9 +191,10 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n+        for (map<uint256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin();\n+             mi != mempool.mapTx.end(); ++mi)\n         {\n-            CTransaction& tx = (*mi).second;\n+            const CTransaction& tx = mi->second.GetTx();\n             if (tx.IsCoinBase() || !IsFinalTx(tx))\n                 continue;\n \n@@ -228,7 +229,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                     }\n                     mapDependers[txin.prevout.hash].push_back(porphan);\n                     porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n+                    nTotalIn += mempool.mapTx[txin.prevout.hash].GetTx().vout[txin.prevout.n].nValue;\n                     continue;\n                 }\n                 const CCoins &coins = view.GetCoins(txin.prevout.hash);\n@@ -244,19 +245,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             // Priority is sum(valuein * age) / modified_txsize\n             unsigned int nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-            unsigned int nTxSizeMod = nTxSize;\n-            // In order to avoid disincentivizing cleaning up the UTXO set we don't count\n-            // the constant overhead for each txin and up to 110 bytes of scriptSig (which\n-            // is enough to cover a compressed pubkey p2sh redemption) for priority.\n-            // Providing any more cleanup incentive than making additional inputs free would\n-            // risk encouraging people to create junk outputs to redeem later.\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-            {\n-                unsigned int offset = 41U + min(110U, (unsigned int)txin.scriptSig.size());\n-                if (nTxSizeMod > offset)\n-                    nTxSizeMod -= offset;\n-            }\n-            dPriority /= nTxSizeMod;\n+            dPriority = tx.ComputePriority(dPriority, nTxSize);\n \n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n@@ -269,7 +258,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 porphan->dFeePerKb = dFeePerKb;\n             }\n             else\n-                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n+                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &mi->second.GetTx()));\n         }\n \n         // Collect transactions into block\n@@ -286,7 +275,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Take highest priority transaction off the priority queue:\n             double dPriority = vecPriority.front().get<0>();\n             double dFeePerKb = vecPriority.front().get<1>();\n-            CTransaction& tx = *(vecPriority.front().get<2>());\n+            const CTransaction& tx = *(vecPriority.front().get<2>());\n \n             std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             vecPriority.pop_back();"
      },
      {
        "sha": "34ae6e0543ce68ad1e9505ea1c279320747876a5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 12,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -153,28 +153,79 @@ Value settxfee(const Array& params, bool fHelp)\n \n Value getrawmempool(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 0)\n+    if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getrawmempool\\n\"\n+            \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n-            \"\\nResult:\\n\"\n-            \"[                       (json array of string)\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. verbose           (boolean, optional, default=false) true for a json object, false for array of transaction ids\\n\"\n+            \"\\nResult: (for verbose = false):\\n\"\n+            \"[                     (json array of string)\\n\"\n             \"  \\\"transactionid\\\"     (string) The transaction id\\n\"\n             \"  ,...\\n\"\n             \"]\\n\"\n+            \"\\nResult: (for verbose = true):\\n\"\n+            \"{                           (json object)\\n\"\n+            \"  \\\"transactionid\\\" : {       (json object)\\n\"\n+            \"    \\\"size\\\" : n,             (numeric) transaction size in bytes\\n\"\n+            \"    \\\"fee\\\" : n,              (numeric) transaction fee in bitcoins\\n\"\n+            \"    \\\"time\\\" : n,             (numeric) local time transaction entered pool in seconds since 1 Jan 1970 GMT\\n\"\n+            \"    \\\"height\\\" : n,           (numeric) block height when transaction entered pool\\n\"\n+            \"    \\\"startingpriority\\\" : n, (numeric) priority when transaction entered pool\\n\"\n+            \"    \\\"currentpriority\\\" : n,  (numeric) transaction priority now\\n\"\n+            \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n+            \"       ... ]\\n\"\n+            \"  }, ...\\n\"\n+            \"]\\n\"\n             \"\\nExamples\\n\"\n-            + HelpExampleCli(\"getrawmempool\", \"\")\n-            + HelpExampleRpc(\"getrawmempool\", \"\")\n+            + HelpExampleCli(\"getrawmempool\", \"true\")\n+            + HelpExampleRpc(\"getrawmempool\", \"true\")\n         );\n \n-    vector<uint256> vtxid;\n-    mempool.queryHashes(vtxid);\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n+\n+    if (fVerbose)\n+    {\n+        LOCK(mempool.cs);\n+        Object o;\n+        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        {\n+            const uint256& hash = entry.first;\n+            const CTxMemPoolEntry& e = entry.second;\n+            Object info;\n+            info.push_back(Pair(\"size\", (int)e.GetTxSize()));\n+            info.push_back(Pair(\"fee\", ValueFromAmount(e.GetFee())));\n+            info.push_back(Pair(\"time\", (boost::int64_t)e.GetTime()));\n+            info.push_back(Pair(\"height\", (int)e.GetHeight()));\n+            info.push_back(Pair(\"startingpriority\", e.GetPriority(e.GetHeight())));\n+            info.push_back(Pair(\"currentpriority\", e.GetPriority(chainActive.Height())));\n+            const CTransaction& tx = e.GetTx();\n+            set<string> setDepends;\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            {\n+                if (mempool.exists(txin.prevout.hash))\n+                    setDepends.insert(txin.prevout.hash.ToString());\n+            }\n+            Array depends(setDepends.begin(), setDepends.end());\n+            info.push_back(Pair(\"depends\", depends));\n+            o.push_back(Pair(hash.ToString(), info));\n+        }\n+        return o;\n+    }\n+    else\n+    {\n+        vector<uint256> vtxid;\n+        mempool.queryHashes(vtxid);\n \n-    Array a;\n-    BOOST_FOREACH(const uint256& hash, vtxid)\n-        a.push_back(hash.ToString());\n+        Array a;\n+        BOOST_FOREACH(const uint256& hash, vtxid)\n+            a.push_back(hash.ToString());\n \n-    return a;\n+        return a;\n+    }\n }\n \n Value getblockhash(const Array& params, bool fHelp)"
      },
      {
        "sha": "f571ca52d6cbd5716f88a359ee599aaf7eed3f17",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -176,6 +176,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n \n     return params;\n }"
      },
      {
        "sha": "8001c4f65a49c9a8fefd8268f616590c39e6c8e4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -99,7 +99,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, tx);\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n@@ -119,7 +119,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, tx);\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n@@ -128,7 +128,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -138,15 +138,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -157,7 +157,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -170,12 +170,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash,tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -186,10 +186,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();"
      },
      {
        "sha": "be251d1d6427d4b01e9f3c6f8a9c9c3c579693b6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 15,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -8,6 +8,33 @@\n \n using namespace std;\n \n+CTxMemPoolEntry::CTxMemPoolEntry()\n+{\n+    nHeight = MEMPOOL_HEIGHT;\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+                                 int64_t _nTime, double _dPriority,\n+                                 unsigned int _nHeight):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n+{\n+    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n+{\n+    *this = other;\n+}\n+\n+double\n+CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n+{\n+    int64_t nValueIn = tx.GetValueOut()+nFee;\n+    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nTxSize;\n+    double dResult = dPriority + deltaPriority;\n+    return dResult;\n+}\n+\n CTxMemPool::CTxMemPool()\n {\n     // Sanity checks off by default for performance, because otherwise\n@@ -42,16 +69,17 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n }\n \n \n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n {\n     // Add to memory pool without checking anything.\n     // Used by main.cpp AcceptToMemoryPool(), which DOES do\n     // all the appropriate checks.\n     LOCK(cs);\n     {\n-        mapTx[hash] = tx;\n+        mapTx[hash] = entry;\n+        const CTransaction& tx = mapTx[hash].GetTx();\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            mapNextTx[tx.vin[i].prevout] = CInPoint(&mapTx[hash], i);\n+            mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n         nTransactionsUpdated++;\n     }\n     return true;\n@@ -113,51 +141,54 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     LOCK(cs);\n-    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        BOOST_FOREACH(const CTxIn &txin, it->second.vin) {\n+        const CTransaction& tx = it->second.GetTx();\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());\n+                const CTransaction& tx2 = it2->second.GetTx();\n+                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n                 CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx.\n             std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n             assert(it3 != mapNextTx.end());\n-            assert(it3->second.ptx == &it->second);\n+            assert(it3->second.ptx == &tx);\n             assert(it3->second.n == i);\n             i++;\n         }\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(hash);\n+        map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n+        const CTransaction& tx = it2->second.GetTx();\n         assert(it2 != mapTx.end());\n-        assert(&it2->second == it->second.ptx);\n-        assert(it2->second.vin.size() > it->second.n);\n+        assert(&tx == it->second.ptx);\n+        assert(tx.vin.size() > it->second.n);\n         assert(it->first == it->second.ptx->vin[it->second.n].prevout);\n     }\n }\n \n-void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n {\n     vtxid.clear();\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTransaction>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+    for (map<uint256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back((*mi).first);\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    std::map<uint256, CTransaction>::const_iterator i = mapTx.find(hash);\n+    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n-    result = i->second;\n+    result = i->second.GetTx();\n     return true;\n }\n "
      },
      {
        "sha": "a652c424a4aa7852afa5d3cdb2609a62856a15ef",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 29,
        "deletions": 2,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -12,6 +12,33 @@\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n \n+/*\n+ * CTxMemPool stores these:\n+ */\n+class CTxMemPoolEntry\n+{\n+private:\n+    CTransaction tx;\n+    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize; // ... and avoid recomputing tx size\n+    int64_t nTime; // Local time when entering the mempool\n+    double dPriority; // Priority when entering the mempool\n+    unsigned int nHeight; // Chain height when entering the mempool\n+\n+public:\n+    CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+                    int64_t _nTime, double _dPriority, unsigned int _nHeight);\n+    CTxMemPoolEntry();\n+    CTxMemPoolEntry(const CTxMemPoolEntry& other);\n+\n+    const CTransaction& GetTx() const { return this->tx; }\n+    double GetPriority(unsigned int currentHeight) const;\n+    int64_t GetFee() const { return nFee; }\n+    size_t GetTxSize() const { return nTxSize; }\n+    int64_t GetTime() const { return nTime; }\n+    unsigned int GetHeight() const { return nHeight; }\n+};\n+\n /*\n  * CTxMemPool stores valid-according-to-the-current-best-chain\n  * transactions that may be included in the next block.\n@@ -30,7 +57,7 @@ class CTxMemPool\n \n public:\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTransaction> mapTx;\n+    std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n     CTxMemPool();\n@@ -44,7 +71,7 @@ class CTxMemPool\n     void check(CCoinsViewCache *pcoins) const;\n     void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n \n-    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n+    bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);\n     void clear();"
      },
      {
        "sha": "b9110d12712ae8c534a6872030ac95439cd58171",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d707d512070ed88c888fdf625c0ae0f85f68d9b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4d707d512070ed88c888fdf625c0ae0f85f68d9b",
        "patch": "@@ -1342,15 +1342,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                     strFailReason = _(\"Transaction too large\");\n                     return false;\n                 }\n-                unsigned int nTxSizeMod = nBytes;\n-                // See miner.c's dPriority logic for the matching network-node side code.\n-                BOOST_FOREACH(const CTxIn& txin, (*(CTransaction*)&wtxNew).vin)\n-                {\n-                    unsigned int offset = 41U + min(110U, (unsigned int)txin.scriptSig.size());\n-                    if (nTxSizeMod > offset)\n-                        nTxSizeMod -= offset;\n-                }\n-                dPriority /= nTxSizeMod;\n+                dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n                 // Check that enough fee is included\n                 int64_t nPayFee = nTransactionFee * (1 + (int64_t)nBytes / 1000);"
      }
    ]
  }
]