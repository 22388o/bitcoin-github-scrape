[
  {
    "sha": "fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
    "node_id": "C_kwDOABII59oAKGZhNmQ1YTIzOGQyYzk0NDQwMTA1ZGRkNGYxNTU0Zjg1NjU5ZDZjNWI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-22T09:06:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-17T07:45:17Z"
      },
      "message": "scripted-diff: Rename m_last_send and m_last_recv\n\n-BEGIN VERIFY SCRIPT-\n\nren() { sed -i \"s/\\<$1\\>/$2/g\" $(git grep -l \"$1\" ./src) ; }\n\nren nLastSend m_last_send\nren nLastRecv m_last_recv\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "c5e9a51f35af0982da10779ff5ed8e265ab5ac3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5e9a51f35af0982da10779ff5ed8e265ab5ac3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgBhwv/ewrWwkQUeX//hYRnq6HGpS55Nk0uSlk/PFuON+clzBZuXy6afVI/LqPA\nCSvnpCaFEhCC5fAJmXouwUvhknZ8r8LMPsrVKI6KnLo9RLhqJcV3Fs+Mfoijyrsu\n5B/MpwLO6aDHz2lya0XL5g6SsvyMB8K95QT7DZx7pDJZzTO6jyaOkNg3lgqEkOTW\n4xtgP+IWySSB1soQgQ9JLZf5EimWGOejA+DyBMjElzM9Fwli8mVIAtu4LSTgyxRy\noCjCaRneHD2Bt9G9K2Yub8C4Kuk9obqvP97qrQWVAJpAD7lftIRayotGfSpPtOqv\nGDgyZ4JwaeA0K3EEgK3gEDkhChTk0DT+AhnhQYNpSa+5rFefbGjYcDgy8QwnqZDI\nJndbY0QjvfQn7DnBPNI5aQ80Ee96CYd5OkvVWBv9/h/xJm5mOm5b5JNPqOwzwOJ+\nPc5OwHwCXMn5yB9uxCcL2+dXlkOOKbz3CSEsMw/xJFI4YNlMxJVL/4iSKPCTfgn9\nlUTErBBp\n=nCvU\n-----END PGP SIGNATURE-----",
        "payload": "tree c5e9a51f35af0982da10779ff5ed8e265ab5ac3c\nparent 398fd63356db9023665396c371d67a8c76edeb4d\nauthor MarcoFalke <falke.marco@gmail.com> 1634893583 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637135117 +0100\n\nscripted-diff: Rename m_last_send and m_last_recv\n\n-BEGIN VERIFY SCRIPT-\n\nren() { sed -i \"s/\\<$1\\>/$2/g\" $(git grep -l \"$1\" ./src) ; }\n\nren nLastSend m_last_send\nren nLastRecv m_last_recv\n\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "398fd63356db9023665396c371d67a8c76edeb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398fd63356db9023665396c371d67a8c76edeb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/398fd63356db9023665396c371d67a8c76edeb4d"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "767b0e1a82dc7def0edfc0f0c6c4ba370f1e8da9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "patch": "@@ -585,8 +585,8 @@ void CNode::CopyStats(CNodeStats& stats)\n     } else {\n         stats.fRelayTxes = false;\n     }\n-    X(nLastSend);\n-    X(nLastRecv);\n+    X(m_last_send);\n+    X(m_last_recv);\n     X(nLastTXTime);\n     X(nLastBlockTime);\n     X(nTimeConnected);\n@@ -633,7 +633,7 @@ bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n     complete = false;\n     const auto time = GetTime<std::chrono::microseconds>();\n     LOCK(cs_vRecv);\n-    nLastRecv = std::chrono::duration_cast<std::chrono::seconds>(time).count();\n+    m_last_recv = std::chrono::duration_cast<std::chrono::seconds>(time).count();\n     nRecvBytes += msg_bytes.size();\n     while (msg_bytes.size() > 0) {\n         // absorb network data\n@@ -804,7 +804,7 @@ size_t CConnman::SocketSendData(CNode& node) const\n             nBytes = send(node.hSocket, reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         }\n         if (nBytes > 0) {\n-            node.nLastSend = GetTimeSeconds();\n+            node.m_last_send = GetTimeSeconds();\n             node.nSendBytes += nBytes;\n             node.nSendOffset += nBytes;\n             nSentSize += nBytes;\n@@ -1330,18 +1330,18 @@ bool CConnman::InactivityCheck(const CNode& node) const\n \n     if (!ShouldRunInactivityChecks(node, now)) return false;\n \n-    if (node.nLastRecv == 0 || node.nLastSend == 0) {\n-        LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d peer=%d\\n\", m_peer_connect_timeout, node.nLastRecv != 0, node.nLastSend != 0, node.GetId());\n+    if (node.m_last_recv == 0 || node.m_last_send == 0) {\n+        LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d peer=%d\\n\", m_peer_connect_timeout, node.m_last_recv != 0, node.m_last_send != 0, node.GetId());\n         return true;\n     }\n \n-    if (now > node.nLastSend + TIMEOUT_INTERVAL) {\n-        LogPrint(BCLog::NET, \"socket sending timeout: %is peer=%d\\n\", now - node.nLastSend, node.GetId());\n+    if (now > node.m_last_send + TIMEOUT_INTERVAL) {\n+        LogPrint(BCLog::NET, \"socket sending timeout: %is peer=%d\\n\", now - node.m_last_send, node.GetId());\n         return true;\n     }\n \n-    if (now > node.nLastRecv + TIMEOUT_INTERVAL) {\n-        LogPrint(BCLog::NET, \"socket receive timeout: %is peer=%d\\n\", now - node.nLastRecv, node.GetId());\n+    if (now > node.m_last_recv + TIMEOUT_INTERVAL) {\n+        LogPrint(BCLog::NET, \"socket receive timeout: %is peer=%d\\n\", now - node.m_last_recv, node.GetId());\n         return true;\n     }\n "
      },
      {
        "sha": "cf1f8f04073899058c145b66737926d341994692",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "patch": "@@ -241,8 +241,8 @@ class CNodeStats\n     NodeId nodeid;\n     ServiceFlags nServices;\n     bool fRelayTxes;\n-    int64_t nLastSend;\n-    int64_t nLastRecv;\n+    int64_t m_last_send;\n+    int64_t m_last_recv;\n     int64_t nLastTXTime;\n     int64_t nLastBlockTime;\n     int64_t nTimeConnected;\n@@ -420,8 +420,8 @@ class CNode\n \n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n \n-    std::atomic<int64_t> nLastSend{0};\n-    std::atomic<int64_t> nLastRecv{0};\n+    std::atomic<int64_t> m_last_send{0};\n+    std::atomic<int64_t> m_last_recv{0};\n     //! Unix epoch time at peer connection, in seconds.\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset{0};"
      },
      {
        "sha": "5b95c92392560b24f743d42e7668a33b76204d90",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "patch": "@@ -1172,8 +1172,8 @@ void RPCConsole::updateDetailWidget()\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(time_now - stats->nodeStats.nTimeConnected));\n     ui->peerLastBlock->setText(TimeDurationField(time_now, stats->nodeStats.nLastBlockTime));\n     ui->peerLastTx->setText(TimeDurationField(time_now, stats->nodeStats.nLastTXTime));\n-    ui->peerLastSend->setText(TimeDurationField(time_now, stats->nodeStats.nLastSend));\n-    ui->peerLastRecv->setText(TimeDurationField(time_now, stats->nodeStats.nLastRecv));\n+    ui->peerLastSend->setText(TimeDurationField(time_now, stats->nodeStats.m_last_send));\n+    ui->peerLastRecv->setText(TimeDurationField(time_now, stats->nodeStats.m_last_recv));\n     ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));\n     ui->peerBytesRecv->setText(GUIUtil::formatBytes(stats->nodeStats.nRecvBytes));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.m_last_ping_time));"
      },
      {
        "sha": "f0082fe60a079b07bd62c9be0698fdde439dfcaa",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6d5a238d2c94440105ddd4f1554f85659d6c5b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "patch": "@@ -211,8 +211,8 @@ static RPCHelpMan getpeerinfo()\n         obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n         obj.pushKV(\"servicesnames\", GetServicesNames(stats.nServices));\n         obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n-        obj.pushKV(\"lastsend\", stats.nLastSend);\n-        obj.pushKV(\"lastrecv\", stats.nLastRecv);\n+        obj.pushKV(\"lastsend\", stats.m_last_send);\n+        obj.pushKV(\"lastrecv\", stats.m_last_recv);\n         obj.pushKV(\"last_transaction\", stats.nLastTXTime);\n         obj.pushKV(\"last_block\", stats.nLastBlockTime);\n         obj.pushKV(\"bytessent\", stats.nSendBytes);"
      }
    ]
  },
  {
    "sha": "faf36165fd550a0a332005dd8743eff05119c49e",
    "node_id": "C_kwDOABII59oAKGZhZjM2MTY1ZmQ1NTBhMGEzMzIwMDVkZDg3NDNlZmYwNTExOWM0OWU",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-07-10T16:10:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-17T07:45:30Z"
      },
      "message": "p2p: Make timeout mockable and type safe, speed up test",
      "tree": {
        "sha": "503c8536f128a578833dcac580b4c3551cd67290",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/503c8536f128a578833dcac580b4c3551cd67290"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf36165fd550a0a332005dd8743eff05119c49e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjDaQwAgSbOO8wIuoz5SlrXxYiyllURyBo6sx0S5kGDzosIm+yfXX257Yeq/deE\nXJaCFxJcLO90guG03xN64NxtmkjlLayaJ8tGmafi/MBBXzbEPWunt1I7tMVnLact\ny3j1dPpC/7klE9VdZmpXJqmfaKXa28RWYNAVz6eqZxeUfjWi1beUHgaRkhpCLCG/\n7MI7jYB928IKkVPXpsG+XwNzG6WHR/OPN6mSALu40nQB0l9KeqFSgy1yr9Ynzk6u\nLoGGx6xxiBRdFTBU0hGafY7T5pfW9YuOZuXgMV0MVTPLue6d/rI/lxW70GSEhFIu\nFgAHYTz+H/8xh7pi/AHArOWzE35krhJgoEyyEKD/CGyVzy2l41PG+qqAaXHsQSz/\nzst9fmV0W3iYLia9vOlg9Xren7nFr4C4t1mHJxJIygV06Vhpom91epGOnnK1n4Em\n+/Ew/280csEpyfuVNlzhQc8oXC41CrKgyEFS9WwQ1IsHwPPjz2V6NEt/1zmwzBm7\nG9jHyUfE\n=LNkl\n-----END PGP SIGNATURE-----",
        "payload": "tree 503c8536f128a578833dcac580b4c3551cd67290\nparent fa6d5a238d2c94440105ddd4f1554f85659d6c5b\nauthor MarcoFalke <falke.marco@gmail.com> 1594397431 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637135130 +0100\n\np2p: Make timeout mockable and type safe, speed up test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36165fd550a0a332005dd8743eff05119c49e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf36165fd550a0a332005dd8743eff05119c49e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf36165fd550a0a332005dd8743eff05119c49e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6d5a238d2c94440105ddd4f1554f85659d6c5b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6d5a238d2c94440105ddd4f1554f85659d6c5b"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 62,
      "deletions": 54
    },
    "files": [
      {
        "sha": "23a796829f66b1acc7699e0c1818c9d00e8e9e7f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -633,7 +633,7 @@ bool CNode::ReceiveMsgBytes(Span<const uint8_t> msg_bytes, bool& complete)\n     complete = false;\n     const auto time = GetTime<std::chrono::microseconds>();\n     LOCK(cs_vRecv);\n-    m_last_recv = std::chrono::duration_cast<std::chrono::seconds>(time).count();\n+    m_last_recv = std::chrono::duration_cast<std::chrono::seconds>(time);\n     nRecvBytes += msg_bytes.size();\n     while (msg_bytes.size() > 0) {\n         // absorb network data\n@@ -804,7 +804,7 @@ size_t CConnman::SocketSendData(CNode& node) const\n             nBytes = send(node.hSocket, reinterpret_cast<const char*>(data.data()) + node.nSendOffset, data.size() - node.nSendOffset, MSG_NOSIGNAL | MSG_DONTWAIT);\n         }\n         if (nBytes > 0) {\n-            node.m_last_send = GetTimeSeconds();\n+            node.m_last_send = GetTime<std::chrono::seconds>();\n             node.nSendBytes += nBytes;\n             node.nSendOffset += nBytes;\n             nSentSize += nBytes;\n@@ -1317,31 +1317,33 @@ void CConnman::NotifyNumConnectionsChanged()\n     }\n }\n \n-bool CConnman::ShouldRunInactivityChecks(const CNode& node, int64_t now) const\n+bool CConnman::ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const\n {\n-    return node.nTimeConnected + m_peer_connect_timeout < now;\n+    return std::chrono::seconds{node.nTimeConnected} + m_peer_connect_timeout < now;\n }\n \n bool CConnman::InactivityCheck(const CNode& node) const\n {\n-    // Use non-mockable system time (otherwise these timers will pop when we\n-    // use setmocktime in the tests).\n-    int64_t now = GetTimeSeconds();\n+    // Test that see disconnects after using mocktime can start with a large\n+    // timeout. For example, -peertimeout=999999999.\n+    const auto now{GetTime<std::chrono::seconds>()};\n+    const auto last_send{node.m_last_send.load()};\n+    const auto last_recv{node.m_last_recv.load()};\n \n     if (!ShouldRunInactivityChecks(node, now)) return false;\n \n-    if (node.m_last_recv == 0 || node.m_last_send == 0) {\n-        LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d peer=%d\\n\", m_peer_connect_timeout, node.m_last_recv != 0, node.m_last_send != 0, node.GetId());\n+    if (last_recv.count() == 0 || last_send.count() == 0) {\n+        LogPrint(BCLog::NET, \"socket no message in first %i seconds, %d %d peer=%d\\n\", count_seconds(m_peer_connect_timeout), last_recv.count() != 0, last_send.count() != 0, node.GetId());\n         return true;\n     }\n \n-    if (now > node.m_last_send + TIMEOUT_INTERVAL) {\n-        LogPrint(BCLog::NET, \"socket sending timeout: %is peer=%d\\n\", now - node.m_last_send, node.GetId());\n+    if (now > last_send + TIMEOUT_INTERVAL) {\n+        LogPrint(BCLog::NET, \"socket sending timeout: %is peer=%d\\n\", count_seconds(now - last_send), node.GetId());\n         return true;\n     }\n \n-    if (now > node.m_last_recv + TIMEOUT_INTERVAL) {\n-        LogPrint(BCLog::NET, \"socket receive timeout: %is peer=%d\\n\", now - node.m_last_recv, node.GetId());\n+    if (now > last_recv + TIMEOUT_INTERVAL) {\n+        LogPrint(BCLog::NET, \"socket receive timeout: %is peer=%d\\n\", count_seconds(now - last_recv), node.GetId());\n         return true;\n     }\n "
      },
      {
        "sha": "e0aee10a619906a9eac6718d3029060453b96091",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -48,7 +48,7 @@ static const bool DEFAULT_WHITELISTRELAY = true;\n static const bool DEFAULT_WHITELISTFORCERELAY = false;\n \n /** Time after which to disconnect, after waiting for a ping response (or inactivity). */\n-static const int TIMEOUT_INTERVAL = 20 * 60;\n+static constexpr std::chrono::minutes TIMEOUT_INTERVAL{20};\n /** Run the feeler connection loop once every 2 minutes. **/\n static constexpr auto FEELER_INTERVAL = 2min;\n /** Run the extra block-relay-only connection loop once every 5 minutes. **/\n@@ -241,8 +241,8 @@ class CNodeStats\n     NodeId nodeid;\n     ServiceFlags nServices;\n     bool fRelayTxes;\n-    int64_t m_last_send;\n-    int64_t m_last_recv;\n+    std::chrono::seconds m_last_send;\n+    std::chrono::seconds m_last_recv;\n     int64_t nLastTXTime;\n     int64_t nLastBlockTime;\n     int64_t nTimeConnected;\n@@ -420,8 +420,8 @@ class CNode\n \n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n \n-    std::atomic<int64_t> m_last_send{0};\n-    std::atomic<int64_t> m_last_recv{0};\n+    std::atomic<std::chrono::seconds> m_last_send{0s};\n+    std::atomic<std::chrono::seconds> m_last_recv{0s};\n     //! Unix epoch time at peer connection, in seconds.\n     const int64_t nTimeConnected;\n     std::atomic<int64_t> nTimeOffset{0};\n@@ -784,7 +784,7 @@ class CConnman\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n-        m_peer_connect_timeout = connOptions.m_peer_connect_timeout;\n+        m_peer_connect_timeout = std::chrono::seconds{connOptions.m_peer_connect_timeout};\n         {\n             LOCK(cs_totalBytesSent);\n             nMaxOutboundLimit = connOptions.nMaxOutboundLimit;\n@@ -942,7 +942,7 @@ class CConnman\n     std::chrono::microseconds PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n     /** Return true if we should disconnect the peer for failing an inactivity check. */\n-    bool ShouldRunInactivityChecks(const CNode& node, int64_t secs_now) const;\n+    bool ShouldRunInactivityChecks(const CNode& node, std::chrono::seconds now) const;\n \n private:\n     struct ListenSocket {\n@@ -1037,7 +1037,7 @@ class CConnman\n     uint64_t nMaxOutboundLimit GUARDED_BY(cs_totalBytesSent);\n \n     // P2P timeout in seconds\n-    int64_t m_peer_connect_timeout;\n+    std::chrono::seconds m_peer_connect_timeout;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds)."
      },
      {
        "sha": "a7bae98c30651c9817c6890e49b0883830553262",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -4312,9 +4312,10 @@ void PeerManagerImpl::CheckForStaleTipAndEvictPeers()\n \n void PeerManagerImpl::MaybeSendPing(CNode& node_to, Peer& peer, std::chrono::microseconds now)\n {\n-    if (m_connman.ShouldRunInactivityChecks(node_to, std::chrono::duration_cast<std::chrono::seconds>(now).count()) &&\n+    if (m_connman.ShouldRunInactivityChecks(node_to, std::chrono::duration_cast<std::chrono::seconds>(now)) &&\n         peer.m_ping_nonce_sent &&\n-        now > peer.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL}) {\n+        now > peer.m_ping_start.load() + std::chrono::seconds{TIMEOUT_INTERVAL})\n+    {\n         // The ping timeout is using mocktime. To disable the check during\n         // testing, increase -peertimeout.\n         LogPrint(BCLog::NET, \"ping timeout: %fs peer=%d\\n\", 0.000001 * count_microseconds(now - peer.m_ping_start.load()), peer.m_id);"
      },
      {
        "sha": "35e4ab4ecd56bac1f22eb97f5528f86c6b4ee726",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -20,6 +20,7 @@\n #include <script/script.h>\n #include <script/standard.h>\n #include <util/system.h>\n+#include <util/time.h>\n \n #ifdef WIN32\n #ifndef NOMINMAX\n@@ -705,8 +706,9 @@ QString ConnectionTypeToQString(ConnectionType conn_type, bool prepend_direction\n     assert(false);\n }\n \n-QString formatDurationStr(int secs)\n+QString formatDurationStr(std::chrono::seconds dur)\n {\n+    const auto secs = count_seconds(dur);\n     QStringList strList;\n     int days = secs / 86400;\n     int hours = (secs % 86400) / 3600;"
      },
      {
        "sha": "eba8eb0bd8553a1c1ffdc8db3399dcf009731fea",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -221,7 +221,7 @@ namespace GUIUtil\n     QString ConnectionTypeToQString(ConnectionType conn_type, bool prepend_direction);\n \n     /** Convert seconds into a QString with days, hours, mins, secs */\n-    QString formatDurationStr(int secs);\n+    QString formatDurationStr(std::chrono::seconds dur);\n \n     /** Format CNodeStats.nServices bitmask into a user-readable string */\n     QString formatServicesStr(quint64 mask);"
      },
      {
        "sha": "3267d20bee094888004f70fb99b1d9de489261d2",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -1137,7 +1137,7 @@ void RPCConsole::on_sldGraphRange_valueChanged(int value)\n void RPCConsole::setTrafficGraphRange(int mins)\n {\n     ui->trafficGraph->setGraphRangeMins(mins);\n-    ui->lblGraphRange->setText(GUIUtil::formatDurationStr(mins * 60));\n+    ui->lblGraphRange->setText(GUIUtil::formatDurationStr(std::chrono::minutes{mins}));\n }\n \n void RPCConsole::updateTrafficStats(quint64 totalBytesIn, quint64 totalBytesOut)\n@@ -1168,10 +1168,10 @@ void RPCConsole::updateDetailWidget()\n     if (stats->nodeStats.m_bip152_highbandwidth_from) bip152_hb_settings += (bip152_hb_settings.isEmpty() ? ts.from : QLatin1Char('/') + ts.from);\n     if (bip152_hb_settings.isEmpty()) bip152_hb_settings = ts.no;\n     ui->peerHighBandwidth->setText(bip152_hb_settings);\n-    const int64_t time_now{GetTimeSeconds()};\n-    ui->peerConnTime->setText(GUIUtil::formatDurationStr(time_now - stats->nodeStats.nTimeConnected));\n-    ui->peerLastBlock->setText(TimeDurationField(time_now, stats->nodeStats.nLastBlockTime));\n-    ui->peerLastTx->setText(TimeDurationField(time_now, stats->nodeStats.nLastTXTime));\n+    const auto time_now{GetTime<std::chrono::seconds>()};\n+    ui->peerConnTime->setText(GUIUtil::formatDurationStr(time_now - std::chrono::seconds{stats->nodeStats.nTimeConnected}));\n+    ui->peerLastBlock->setText(TimeDurationField(time_now, std::chrono::seconds{stats->nodeStats.nLastBlockTime}));\n+    ui->peerLastTx->setText(TimeDurationField(time_now, std::chrono::seconds{stats->nodeStats.nLastTXTime}));\n     ui->peerLastSend->setText(TimeDurationField(time_now, stats->nodeStats.m_last_send));\n     ui->peerLastRecv->setText(TimeDurationField(time_now, stats->nodeStats.m_last_recv));\n     ui->peerBytesSent->setText(GUIUtil::formatBytes(stats->nodeStats.nSendBytes));"
      },
      {
        "sha": "fc6e85b41ab2695e0ffc284a343631535bafab11",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -175,8 +175,9 @@ public Q_SLOTS:\n     void updateNetworkState();\n \n     /** Helper for the output of a time duration field. Inputs are UNIX epoch times. */\n-    QString TimeDurationField(uint64_t time_now, uint64_t time_at_event) const {\n-        return time_at_event ? GUIUtil::formatDurationStr(time_now - time_at_event) : tr(\"Never\");\n+    QString TimeDurationField(std::chrono::seconds time_now, std::chrono::seconds time_at_event) const\n+    {\n+        return time_at_event.count() ? GUIUtil::formatDurationStr(time_now - time_at_event) : tr(\"Never\");\n     }\n \n private Q_SLOTS:"
      },
      {
        "sha": "84e8898a419a53fc9bd0bcf94b89a77aef3c83ed",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -211,8 +211,8 @@ static RPCHelpMan getpeerinfo()\n         obj.pushKV(\"services\", strprintf(\"%016x\", stats.nServices));\n         obj.pushKV(\"servicesnames\", GetServicesNames(stats.nServices));\n         obj.pushKV(\"relaytxes\", stats.fRelayTxes);\n-        obj.pushKV(\"lastsend\", stats.m_last_send);\n-        obj.pushKV(\"lastrecv\", stats.m_last_recv);\n+        obj.pushKV(\"lastsend\", count_seconds(stats.m_last_send));\n+        obj.pushKV(\"lastrecv\", count_seconds(stats.m_last_recv));\n         obj.pushKV(\"last_transaction\", stats.nLastTXTime);\n         obj.pushKV(\"last_block\", stats.nLastBlockTime);\n         obj.pushKV(\"bytessent\", stats.nSendBytes);"
      },
      {
        "sha": "2d00c7ba41959c49cff7e246c0d36b29218de5e6",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -53,7 +53,7 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     // Disable inactivity checks for this test to avoid interference\n-    static_cast<ConnmanTestMsg*>(connman.get())->SetPeerConnectTimeout(99999);\n+    static_cast<ConnmanTestMsg*>(connman.get())->SetPeerConnectTimeout(99999s);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n                                        *m_node.chainman, *m_node.mempool, false);\n "
      },
      {
        "sha": "0e0169568f854c036c89fbcc4771bcffa44c86e7",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -18,7 +18,7 @@\n struct ConnmanTestMsg : public CConnman {\n     using CConnman::CConnman;\n \n-    void SetPeerConnectTimeout(int64_t timeout)\n+    void SetPeerConnectTimeout(std::chrono::seconds timeout)\n     {\n         m_peer_connect_timeout = timeout;\n     }"
      },
      {
        "sha": "cf714bc8886719d389e2db1d7a35c1d48c556792",
        "filename": "test/functional/p2p_timeouts.py",
        "status": "modified",
        "additions": 16,
        "deletions": 14,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/test/functional/p2p_timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/test/functional/p2p_timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_timeouts.py?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -4,13 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various net timeouts.\n \n-- Create three bitcoind nodes:\n+- Create three peers:\n \n     no_verack_node - we never send a verack in response to their version\n     no_version_node - we never send a version (only a ping)\n     no_send_node - we never send any P2P message.\n \n-- Start all three nodes\n - Wait 1 second\n - Assert that we're connected\n - Send a ping to no_verack_node and no_version_node\n@@ -21,12 +20,12 @@\n - Assert that we're no longer connected (timeout to receive version/verack is 3 seconds)\n \"\"\"\n \n-from time import sleep\n-\n from test_framework.messages import msg_ping\n from test_framework.p2p import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n \n+import time\n+\n \n class TestP2PConn(P2PInterface):\n     def on_version(self, message):\n@@ -41,7 +40,14 @@ def set_test_params(self):\n         # set timeout to receive version/verack to 3 seconds\n         self.extra_args = [[\"-peertimeout=3\"]]\n \n+    def mock_forward(self, delta):\n+        self.mock_time += delta\n+        self.nodes[0].setmocktime(self.mock_time)\n+\n     def run_test(self):\n+        self.mock_time = int(time.time())\n+        self.mock_forward(0)\n+\n         # Setup the p2p connections\n         no_verack_node = self.nodes[0].add_p2p_connection(TestP2PConn(), wait_for_verack=False)\n         no_version_node = self.nodes[0].add_p2p_connection(TestP2PConn(), send_version=False, wait_for_verack=False)\n@@ -51,7 +57,7 @@ def run_test(self):\n         # verack, since we never sent one\n         no_verack_node.wait_for_verack()\n \n-        sleep(1)\n+        self.mock_forward(1)\n \n         assert no_verack_node.is_connected\n         assert no_version_node.is_connected\n@@ -62,7 +68,7 @@ def run_test(self):\n         with self.nodes[0].assert_debug_log(['non-version message before version handshake. Message \"ping\" from peer=1']):\n             no_version_node.send_message(msg_ping())\n \n-        sleep(1)\n+        self.mock_forward(1)\n \n         assert \"version\" in no_verack_node.last_message\n \n@@ -80,14 +86,10 @@ def run_test(self):\n         ]\n \n         with self.nodes[0].assert_debug_log(expected_msgs=expected_timeout_logs):\n-            sleep(3)\n-            # By now, we waited a total of 5 seconds. Off-by-two for two\n-            # reasons:\n-            #  * The internal precision is one second\n-            #  * Account for network delay\n-            assert not no_verack_node.is_connected\n-            assert not no_version_node.is_connected\n-            assert not no_send_node.is_connected\n+            self.mock_forward(2)\n+            no_verack_node.wait_for_disconnect(timeout=1)\n+            no_version_node.wait_for_disconnect(timeout=1)\n+            no_send_node.wait_for_disconnect(timeout=1)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "068488a672f56dc658553b3cf089a49bc1e9576b",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf36165fd550a0a332005dd8743eff05119c49e/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf36165fd550a0a332005dd8743eff05119c49e/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faf36165fd550a0a332005dd8743eff05119c49e",
        "patch": "@@ -378,10 +378,10 @@ def write_config(config_path, *, n, chain, extra_config=\"\", disable_autoconnect=\n         f.write(\"fixedseeds=0\\n\")\n         f.write(\"listenonion=0\\n\")\n         # Increase peertimeout to avoid disconnects while using mocktime.\n-        # peertimeout is measured in wall clock time, so setting it to the\n-        # duration of the longest test is sufficient. It can be overridden in\n-        # tests.\n-        f.write(\"peertimeout=999999\\n\")\n+        # peertimeout is measured in mock time, so setting it large enough to\n+        # cover any duration in mock time is sufficient. It can be overridden\n+        # in tests.\n+        f.write(\"peertimeout=999999999\\n\")\n         f.write(\"printtoconsole=0\\n\")\n         f.write(\"upnp=0\\n\")\n         f.write(\"natpmp=0\\n\")"
      }
    ]
  }
]