[
  {
    "sha": "c205979031ff4e8e32a5f05bae813405f233fccd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjA1OTc5MDMxZmY0ZThlMzJhNWYwNWJhZTgxMzQwNWYyMzNmY2Nk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-01-30T20:52:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-21T18:18:03Z"
      },
      "message": "[docs] Improve commenting in coins.cpp|h\n\nRemove references to 'pruned' coins, which don't exist since the move\nto per-txout coins db.",
      "tree": {
        "sha": "332dd712955d4e2eb8aa9a4fc8d9676637fc67a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/332dd712955d4e2eb8aa9a4fc8d9676637fc67a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c205979031ff4e8e32a5f05bae813405f233fccd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c205979031ff4e8e32a5f05bae813405f233fccd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c205979031ff4e8e32a5f05bae813405f233fccd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c205979031ff4e8e32a5f05bae813405f233fccd/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "646f0ada0205ae4b3952107e3b1542f06adda32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/646f0ada0205ae4b3952107e3b1542f06adda32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/646f0ada0205ae4b3952107e3b1542f06adda32b"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 65,
      "deletions": 28
    },
    "files": [
      {
        "sha": "9e0dd6cd9f7ef0de4b4ccb00bd064852d9c1fcb2",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 19,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c205979031ff4e8e32a5f05bae813405f233fccd/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c205979031ff4e8e32a5f05bae813405f233fccd/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c205979031ff4e8e32a5f05bae813405f233fccd",
        "patch": "@@ -77,8 +77,21 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin (when possible_overwrite is false)\");\n         }\n+        // If the coin exists in this cache as a spent coin and is DIRTY, then\n+        // its spentness hasn't been flushed to the parent cache. We're\n+        // re-adding the coin to this cache now but we can't mark it as FRESH.\n+        // If we mark it FRESH and then spend it before the cache is flushed\n+        // we would remove it from this cache and would never flush spentness\n+        // to the parent cache.\n+        //\n+        // Re-adding a spent coin can happen in the case of a re-org (the coin\n+        // is 'spent' when the block adding it is disconnected and then\n+        // re-added when it is also added in a newly connected block).\n+        //\n+        // If the coin doesn't exist in the current cache, or is spent but not\n+        // DIRTY, then it can be marked FRESH.\n         fresh = !(it->second.flags & CCoinsCacheEntry::DIRTY);\n     }\n     it->second.coin = std::move(coin);\n@@ -152,11 +165,11 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n@@ -169,19 +182,18 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 }\n             }\n         } else {\n-            // Assert that the child cache entry was not marked FRESH if the\n-            // parent cache entry has unspent outputs. If this ever happens,\n-            // it means the FRESH flag was misapplied and there is a logic\n-            // error in the calling code.\n+            // Found the entry in the parent cache\n             if ((it->second.flags & CCoinsCacheEntry::FRESH) && !itUs->second.coin.IsSpent()) {\n-                throw std::logic_error(\"FRESH flag misapplied to cache entry for base transaction with spendable outputs\");\n+                // The coin was marked FRESH in the child cache, but the coin\n+                // exists in the parent cache. If this ever happens, it means\n+                // the FRESH flag was misapplied and there is a logic error in\n+                // the calling code.\n+                throw std::logic_error(\"FRESH flag misapplied to coin that exists in parent cache\");\n             }\n \n-            // Found the entry in the parent cache\n             if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coin.IsSpent()) {\n-                // The grandparent does not have an entry, and the child is\n-                // modified and being pruned. This means we can just delete\n-                // it from the parent.\n+                // The grandparent cache does not have an entry, and the coin\n+                // has been spent. We can just delete it from the parent cache.\n                 cachedCoinsUsage -= itUs->second.coin.DynamicMemoryUsage();\n                 cacheCoins.erase(itUs);\n             } else {\n@@ -190,11 +202,10 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 itUs->second.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                 itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                // NOTE: It is possible the child has a FRESH flag here in\n-                // the event the entry we found in the parent is pruned. But\n-                // we must not copy that FRESH flag to the parent as that\n-                // pruned state likely still needs to be communicated to the\n-                // grandparent.\n+                // NOTE: It isn't safe to mark the coin as FRESH in the parent\n+                // cache. If it already existed and was spent in the parent\n+                // cache then marking it FRESH would prevent that spentness\n+                // from being flushed to the grandparent.\n             }\n         }\n     }"
      },
      {
        "sha": "d5484bcf6580f0504d0b5e369bab0bbba2b759e2",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 35,
        "deletions": 9,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c205979031ff4e8e32a5f05bae813405f233fccd/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c205979031ff4e8e32a5f05bae813405f233fccd/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c205979031ff4e8e32a5f05bae813405f233fccd",
        "patch": "@@ -109,19 +109,45 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (e.g. a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (e.g. a coin changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (e.g. an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (e.g. a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (e.g. a coin is spent and spentness needs to be flushed to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n+        /**\n+         * DIRTY means the CCoinsCacheEntry is potentially different from the\n+         * version in the parent cache. Failure to mark a coin as DIRTY when\n+         * it is potentially different from the parent cache will cause a\n+         * consensus failure, since the coin's state won't get written to the\n+         * parent when the cache is flushed.\n+         */\n+        DIRTY = (1 << 0),\n+        /**\n+         * FRESH means the parent cache does not have this coin or that it is a\n+         * spent coin in the parent cache. If a FRESH coin in the cache is\n+         * later spent, it can be deleted entirely and doesn't ever need to be\n+         * flushed to the parent. This is a performance optimization. Marking a\n+         * coin as FRESH when it exists unspent in the parent cache will cause a\n+         * consensus failure, since it might not be deleted from the parent\n+         * when this cache is flushed.\n          */\n+        FRESH = (1 << 1),\n     };\n \n     CCoinsCacheEntry() : flags(0) {}\n@@ -246,7 +272,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     bool HaveCoinInCache(const COutPoint &outpoint) const;\n \n     /**\n-     * Return a reference to Coin in the cache, or a pruned one if not found. This is\n+     * Return a reference to Coin in the cache, or coinEmpty if not found. This is\n      * more efficient than GetCoin.\n      *\n      * Generally, do not hold the reference returned for more than a short scope.\n@@ -258,8 +284,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Add a coin. Set potential_overwrite to true if a non-pruned version may\n-     * already exist.\n+     * Add a coin. Set potential_overwrite to true if an unspent version may\n+     * already exist in the cache.\n      */\n     void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n "
      }
    ]
  },
  {
    "sha": "e9936966c08bd8a6ac02828131f619ddaa1ced13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTkzNjk2NmMwOGJkOGE2YWMwMjgyODEzMWY2MTlkZGFhMWNlZDEz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-01-31T19:49:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-21T18:19:15Z"
      },
      "message": "scripted-diff: Rename PRUNED to SPENT in coins tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e 's/PRUNED,/SPENT ,/g' ./src/test/coins_tests.cpp\nsed -i -e 's/PRUNED/SPENT/g' ./src/test/coins_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "8a9d6eee4837773504afe9223c54efe6c4230775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a9d6eee4837773504afe9223c54efe6c4230775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9936966c08bd8a6ac02828131f619ddaa1ced13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9936966c08bd8a6ac02828131f619ddaa1ced13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9936966c08bd8a6ac02828131f619ddaa1ced13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9936966c08bd8a6ac02828131f619ddaa1ced13/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c205979031ff4e8e32a5f05bae813405f233fccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c205979031ff4e8e32a5f05bae813405f233fccd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c205979031ff4e8e32a5f05bae813405f233fccd"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 83,
      "deletions": 83
    },
    "files": [
      {
        "sha": "54e4ca26f1fede05cd9c4492f252c6935ee752b5",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 83,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9936966c08bd8a6ac02828131f619ddaa1ced13/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9936966c08bd8a6ac02828131f619ddaa1ced13/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=e9936966c08bd8a6ac02828131f619ddaa1ced13",
        "patch": "@@ -532,7 +532,7 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n }\n \n const static COutPoint OUTPOINT;\n-const static CAmount PRUNED = -1;\n+const static CAmount SPENT = -1;\n const static CAmount ABSENT = -2;\n const static CAmount FAIL = -3;\n const static CAmount VALUE1 = 100;\n@@ -551,7 +551,7 @@ static void SetCoinsValue(CAmount value, Coin& coin)\n     assert(value != ABSENT);\n     coin.Clear();\n     assert(coin.IsSpent());\n-    if (value != PRUNED) {\n+    if (value != SPENT) {\n         coin.out.nValue = value;\n         coin.nHeight = 1;\n         assert(!coin.IsSpent());\n@@ -581,7 +581,7 @@ void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n         flags = NO_ENTRY;\n     } else {\n         if (it->second.coin.IsSpent()) {\n-            value = PRUNED;\n+            value = SPENT;\n         } else {\n             value = it->second.coin.out.nValue;\n         }\n@@ -634,28 +634,28 @@ BOOST_AUTO_TEST_CASE(ccoins_access)\n      *               Value   Value   Value   Flags        Flags\n      */\n     CheckAccessCoin(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(ABSENT, PRUNED, PRUNED, 0          , 0          );\n-    CheckAccessCoin(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n-    CheckAccessCoin(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckAccessCoin(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(ABSENT, SPENT , SPENT , 0          , 0          );\n+    CheckAccessCoin(ABSENT, SPENT , SPENT , FRESH      , FRESH      );\n+    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckAccessCoin(ABSENT, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, 0          , 0          );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n     CheckAccessCoin(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(PRUNED, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckAccessCoin(PRUNED, PRUNED, PRUNED, 0          , 0          );\n-    CheckAccessCoin(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n-    CheckAccessCoin(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckAccessCoin(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n-    CheckAccessCoin(PRUNED, VALUE2, VALUE2, 0          , 0          );\n-    CheckAccessCoin(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n-    CheckAccessCoin(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n-    CheckAccessCoin(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoin(SPENT , SPENT , SPENT , 0          , 0          );\n+    CheckAccessCoin(SPENT , SPENT , SPENT , FRESH      , FRESH      );\n+    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckAccessCoin(SPENT , SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(SPENT , VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoin(SPENT , VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoin(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n     CheckAccessCoin(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n-    CheckAccessCoin(VALUE1, PRUNED, PRUNED, 0          , 0          );\n-    CheckAccessCoin(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n-    CheckAccessCoin(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckAccessCoin(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoin(VALUE1, SPENT , SPENT , 0          , 0          );\n+    CheckAccessCoin(VALUE1, SPENT , SPENT , FRESH      , FRESH      );\n+    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckAccessCoin(VALUE1, SPENT , SPENT , DIRTY|FRESH, DIRTY|FRESH);\n     CheckAccessCoin(VALUE1, VALUE2, VALUE2, 0          , 0          );\n     CheckAccessCoin(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n     CheckAccessCoin(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n@@ -685,31 +685,31 @@ BOOST_AUTO_TEST_CASE(ccoins_spend)\n      *              Value   Value   Value   Flags        Flags\n      */\n     CheckSpendCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, PRUNED, PRUNED, 0          , DIRTY      );\n-    CheckSpendCoins(ABSENT, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckSpendCoins(ABSENT, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, PRUNED, 0          , DIRTY      );\n+    CheckSpendCoins(ABSENT, SPENT , SPENT , 0          , DIRTY      );\n+    CheckSpendCoins(ABSENT, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n+    CheckSpendCoins(ABSENT, SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckSpendCoins(ABSENT, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckSpendCoins(ABSENT, VALUE2, SPENT , 0          , DIRTY      );\n     CheckSpendCoins(ABSENT, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(ABSENT, VALUE2, PRUNED, DIRTY      , DIRTY      );\n+    CheckSpendCoins(ABSENT, VALUE2, SPENT , DIRTY      , DIRTY      );\n     CheckSpendCoins(ABSENT, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(PRUNED, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n-    CheckSpendCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n-    CheckSpendCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckSpendCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(PRUNED, VALUE2, PRUNED, 0          , DIRTY      );\n-    CheckSpendCoins(PRUNED, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(PRUNED, VALUE2, PRUNED, DIRTY      , DIRTY      );\n-    CheckSpendCoins(PRUNED, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, ABSENT, PRUNED, NO_ENTRY   , DIRTY      );\n-    CheckSpendCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      );\n-    CheckSpendCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n-    CheckSpendCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, PRUNED, 0          , DIRTY      );\n+    CheckSpendCoins(SPENT , ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckSpendCoins(SPENT , SPENT , SPENT , 0          , DIRTY      );\n+    CheckSpendCoins(SPENT , SPENT , ABSENT, FRESH      , NO_ENTRY   );\n+    CheckSpendCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckSpendCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckSpendCoins(SPENT , VALUE2, SPENT , 0          , DIRTY      );\n+    CheckSpendCoins(SPENT , VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckSpendCoins(SPENT , VALUE2, SPENT , DIRTY      , DIRTY      );\n+    CheckSpendCoins(SPENT , VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckSpendCoins(VALUE1, ABSENT, SPENT , NO_ENTRY   , DIRTY      );\n+    CheckSpendCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      );\n+    CheckSpendCoins(VALUE1, SPENT , ABSENT, FRESH      , NO_ENTRY   );\n+    CheckSpendCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      );\n+    CheckSpendCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckSpendCoins(VALUE1, VALUE2, SPENT , 0          , DIRTY      );\n     CheckSpendCoins(VALUE1, VALUE2, ABSENT, FRESH      , NO_ENTRY   );\n-    CheckSpendCoins(VALUE1, VALUE2, PRUNED, DIRTY      , DIRTY      );\n+    CheckSpendCoins(VALUE1, VALUE2, SPENT , DIRTY      , DIRTY      );\n     CheckSpendCoins(VALUE1, VALUE2, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n }\n \n@@ -742,7 +742,7 @@ static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount mo\n template <typename... Args>\n static void CheckAddCoin(Args&&... args)\n {\n-    for (const CAmount base_value : {ABSENT, PRUNED, VALUE1})\n+    for (const CAmount base_value : {ABSENT, SPENT , VALUE1})\n         CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n@@ -758,14 +758,14 @@ BOOST_AUTO_TEST_CASE(ccoins_add)\n      */\n     CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);\n     CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      , true );\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, 0          , DIRTY      , true );\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n-    CheckAddCoin(PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY|FRESH, false);\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, 0          , DIRTY      , true );\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, false);\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, FRESH      , DIRTY|FRESH, true );\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , false);\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY      , DIRTY      , true );\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckAddCoin(SPENT , VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH, true );\n     CheckAddCoin(VALUE2, VALUE3, FAIL  , 0          , NO_ENTRY   , false);\n     CheckAddCoin(VALUE2, VALUE3, VALUE3, 0          , DIRTY      , true );\n     CheckAddCoin(VALUE2, VALUE3, FAIL  , FRESH      , NO_ENTRY   , false);\n@@ -805,42 +805,42 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n      *              Value   Value   Value   Flags        Flags        Flags\n      */\n     CheckWriteCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   , NO_ENTRY   );\n-    CheckWriteCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , DIRTY      );\n-    CheckWriteCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(ABSENT, SPENT , SPENT , NO_ENTRY   , DIRTY      , DIRTY      );\n+    CheckWriteCoins(ABSENT, SPENT , ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n     CheckWriteCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , DIRTY      );\n     CheckWriteCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckWriteCoins(PRUNED, ABSENT, PRUNED, 0          , NO_ENTRY   , 0          );\n-    CheckWriteCoins(PRUNED, ABSENT, PRUNED, FRESH      , NO_ENTRY   , FRESH      );\n-    CheckWriteCoins(PRUNED, ABSENT, PRUNED, DIRTY      , NO_ENTRY   , DIRTY      );\n-    CheckWriteCoins(PRUNED, ABSENT, PRUNED, DIRTY|FRESH, NO_ENTRY   , DIRTY|FRESH);\n-    CheckWriteCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , DIRTY      );\n-    CheckWriteCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY|FRESH, DIRTY      );\n-    CheckWriteCoins(PRUNED, PRUNED, ABSENT, FRESH      , DIRTY      , NO_ENTRY   );\n-    CheckWriteCoins(PRUNED, PRUNED, ABSENT, FRESH      , DIRTY|FRESH, NO_ENTRY   );\n-    CheckWriteCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , DIRTY      );\n-    CheckWriteCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY|FRESH, DIRTY      );\n-    CheckWriteCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, DIRTY      , NO_ENTRY   );\n-    CheckWriteCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, DIRTY|FRESH, NO_ENTRY   );\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , DIRTY      );\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, DIRTY      );\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY      , DIRTY|FRESH);\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, DIRTY|FRESH);\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , DIRTY      );\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, DIRTY      );\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY      , DIRTY|FRESH);\n-    CheckWriteCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckWriteCoins(SPENT , ABSENT, SPENT , 0          , NO_ENTRY   , 0          );\n+    CheckWriteCoins(SPENT , ABSENT, SPENT , FRESH      , NO_ENTRY   , FRESH      );\n+    CheckWriteCoins(SPENT , ABSENT, SPENT , DIRTY      , NO_ENTRY   , DIRTY      );\n+    CheckWriteCoins(SPENT , ABSENT, SPENT , DIRTY|FRESH, NO_ENTRY   , DIRTY|FRESH);\n+    CheckWriteCoins(SPENT , SPENT , SPENT , 0          , DIRTY      , DIRTY      );\n+    CheckWriteCoins(SPENT , SPENT , SPENT , 0          , DIRTY|FRESH, DIRTY      );\n+    CheckWriteCoins(SPENT , SPENT , ABSENT, FRESH      , DIRTY      , NO_ENTRY   );\n+    CheckWriteCoins(SPENT , SPENT , ABSENT, FRESH      , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY      , DIRTY      );\n+    CheckWriteCoins(SPENT , SPENT , SPENT , DIRTY      , DIRTY|FRESH, DIRTY      );\n+    CheckWriteCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, DIRTY      , NO_ENTRY   );\n+    CheckWriteCoins(SPENT , SPENT , ABSENT, DIRTY|FRESH, DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, 0          , DIRTY      , DIRTY      );\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, 0          , DIRTY|FRESH, DIRTY      );\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, FRESH      , DIRTY      , DIRTY|FRESH);\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, FRESH      , DIRTY|FRESH, DIRTY|FRESH);\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY      , DIRTY      );\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, DIRTY      );\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY      , DIRTY|FRESH);\n+    CheckWriteCoins(SPENT , VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, DIRTY|FRESH);\n     CheckWriteCoins(VALUE1, ABSENT, VALUE1, 0          , NO_ENTRY   , 0          );\n     CheckWriteCoins(VALUE1, ABSENT, VALUE1, FRESH      , NO_ENTRY   , FRESH      );\n     CheckWriteCoins(VALUE1, ABSENT, VALUE1, DIRTY      , NO_ENTRY   , DIRTY      );\n     CheckWriteCoins(VALUE1, ABSENT, VALUE1, DIRTY|FRESH, NO_ENTRY   , DIRTY|FRESH);\n-    CheckWriteCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , DIRTY      );\n-    CheckWriteCoins(VALUE1, PRUNED, FAIL  , 0          , DIRTY|FRESH, NO_ENTRY   );\n-    CheckWriteCoins(VALUE1, PRUNED, ABSENT, FRESH      , DIRTY      , NO_ENTRY   );\n-    CheckWriteCoins(VALUE1, PRUNED, FAIL  , FRESH      , DIRTY|FRESH, NO_ENTRY   );\n-    CheckWriteCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , DIRTY      );\n-    CheckWriteCoins(VALUE1, PRUNED, FAIL  , DIRTY      , DIRTY|FRESH, NO_ENTRY   );\n-    CheckWriteCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, DIRTY      , NO_ENTRY   );\n-    CheckWriteCoins(VALUE1, PRUNED, FAIL  , DIRTY|FRESH, DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , SPENT , 0          , DIRTY      , DIRTY      );\n+    CheckWriteCoins(VALUE1, SPENT , FAIL  , 0          , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , ABSENT, FRESH      , DIRTY      , NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , FAIL  , FRESH      , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , SPENT , DIRTY      , DIRTY      , DIRTY      );\n+    CheckWriteCoins(VALUE1, SPENT , FAIL  , DIRTY      , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , ABSENT, DIRTY|FRESH, DIRTY      , NO_ENTRY   );\n+    CheckWriteCoins(VALUE1, SPENT , FAIL  , DIRTY|FRESH, DIRTY|FRESH, NO_ENTRY   );\n     CheckWriteCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , DIRTY      );\n     CheckWriteCoins(VALUE1, VALUE2, FAIL  , 0          , DIRTY|FRESH, NO_ENTRY   );\n     CheckWriteCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY      , DIRTY|FRESH);\n@@ -854,8 +854,8 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n     // they would be too repetitive (the parent cache is never updated in these\n     // cases). The loop below covers these cases and makes sure the parent cache\n     // is always left unchanged.\n-    for (const CAmount parent_value : {ABSENT, PRUNED, VALUE1})\n-        for (const CAmount child_value : {ABSENT, PRUNED, VALUE2})\n+    for (const CAmount parent_value : {ABSENT, SPENT , VALUE1})\n+        for (const CAmount child_value : {ABSENT, SPENT , VALUE2})\n             for (const char parent_flags : parent_value == ABSENT ? ABSENT_FLAGS : FLAGS)\n                 for (const char child_flags : child_value == ABSENT ? ABSENT_FLAGS : CLEAN_FLAGS)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);"
      }
    ]
  },
  {
    "sha": "2685c214cce4b07695273503e60350e3f05fe3e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjg1YzIxNGNjZTRiMDc2OTUyNzM1MDNlNjAzNTBlM2YwNWZlM2Uy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-01-31T19:50:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-21T18:19:15Z"
      },
      "message": "[tests] small whitespace fixup\n\nRequired after scripted-diff in previous commit.",
      "tree": {
        "sha": "8359d39d12aae942d63bdcca0b4d6744049cc728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8359d39d12aae942d63bdcca0b4d6744049cc728"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2685c214cce4b07695273503e60350e3f05fe3e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2685c214cce4b07695273503e60350e3f05fe3e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2685c214cce4b07695273503e60350e3f05fe3e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2685c214cce4b07695273503e60350e3f05fe3e2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9936966c08bd8a6ac02828131f619ddaa1ced13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9936966c08bd8a6ac02828131f619ddaa1ced13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9936966c08bd8a6ac02828131f619ddaa1ced13"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "638ae7d353a9187ad4457e040fcfc01c9ad8db35",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2685c214cce4b07695273503e60350e3f05fe3e2/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2685c214cce4b07695273503e60350e3f05fe3e2/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=2685c214cce4b07695273503e60350e3f05fe3e2",
        "patch": "@@ -742,7 +742,7 @@ static void CheckAddCoinBase(CAmount base_value, CAmount cache_value, CAmount mo\n template <typename... Args>\n static void CheckAddCoin(Args&&... args)\n {\n-    for (const CAmount base_value : {ABSENT, SPENT , VALUE1})\n+    for (const CAmount base_value : {ABSENT, SPENT, VALUE1})\n         CheckAddCoinBase(base_value, std::forward<Args>(args)...);\n }\n \n@@ -854,8 +854,8 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n     // they would be too repetitive (the parent cache is never updated in these\n     // cases). The loop below covers these cases and makes sure the parent cache\n     // is always left unchanged.\n-    for (const CAmount parent_value : {ABSENT, SPENT , VALUE1})\n-        for (const CAmount child_value : {ABSENT, SPENT , VALUE2})\n+    for (const CAmount parent_value : {ABSENT, SPENT, VALUE1})\n+        for (const CAmount child_value : {ABSENT, SPENT, VALUE2})\n             for (const char parent_flags : parent_value == ABSENT ? ABSENT_FLAGS : FLAGS)\n                 for (const char child_flags : child_value == ABSENT ? ABSENT_FLAGS : CLEAN_FLAGS)\n                     CheckWriteCoins(parent_value, child_value, parent_value, parent_flags, child_flags, parent_flags);"
      }
    ]
  },
  {
    "sha": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWZhMGE0NGFiZThjMWI1YzQ1MmUwOTdlYWIyMGNmMGFlOTg4ODA1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-03-23T14:45:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-21T18:19:15Z"
      },
      "message": "[docs] use consistent naming for possible_overwrite\n\nAnd other general comment improvements for adding coins.",
      "tree": {
        "sha": "4d3c982ba590833e9e949c55ec504e3b65fdc1bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d3c982ba590833e9e949c55ec504e3b65fdc1bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21fa0a44abe8c1b5c452e097eab20cf0ae988805",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21fa0a44abe8c1b5c452e097eab20cf0ae988805/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2685c214cce4b07695273503e60350e3f05fe3e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2685c214cce4b07695273503e60350e3f05fe3e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2685c214cce4b07695273503e60350e3f05fe3e2"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6b4cb2aec722bd1820285db930f90e212a5e4545",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=21fa0a44abe8c1b5c452e097eab20cf0ae988805",
        "patch": "@@ -99,12 +99,12 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     cachedCoinsUsage += it->second.coin.DynamicMemoryUsage();\n }\n \n-void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check) {\n+void AddCoins(CCoinsViewCache& cache, const CTransaction &tx, int nHeight, bool check_for_overwrite) {\n     bool fCoinbase = tx.IsCoinBase();\n     const uint256& txid = tx.GetHash();\n     for (size_t i = 0; i < tx.vout.size(); ++i) {\n-        bool overwrite = check ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n-        // Always set the possible_overwrite flag to AddCoin for coinbase txn, in order to correctly\n+        bool overwrite = check_for_overwrite ? cache.HaveCoin(COutPoint(txid, i)) : fCoinbase;\n+        // Coinbase transactions can always be overwritten, in order to correctly\n         // deal with the pre-BIP30 occurrences of duplicate coinbase transactions.\n         cache.AddCoin(COutPoint(txid, i), Coin(tx.vout[i], nHeight, fCoinbase), overwrite);\n     }"
      },
      {
        "sha": "6cfe368331adebb61d2a4d9a4e3f0a9423eec9bc",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=21fa0a44abe8c1b5c452e097eab20cf0ae988805",
        "patch": "@@ -284,10 +284,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Add a coin. Set potential_overwrite to true if an unspent version may\n+     * Add a coin. Set possible_overwrite to true if an unspent version may\n      * already exist in the cache.\n      */\n-    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n+    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);\n \n     /**\n      * Spend a coin. Pass moveto in order to get the deleted data."
      },
      {
        "sha": "bae610989d26b8692b24896a504aad60fd7f38db",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=21fa0a44abe8c1b5c452e097eab20cf0ae988805",
        "patch": "@@ -751,9 +751,9 @@ BOOST_AUTO_TEST_CASE(ccoins_add)\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * with the AddCoin potential_overwrite argument set to false, and to true.\n+     * AddCoin possible_overwrite argument set to false, and to true.\n      *\n-     *           Cache   Write   Result  Cache        Result       potential_overwrite\n+     *           Cache   Write   Result  Cache        Result       possible_overwrite\n      *           Value   Value   Value   Flags        Flags\n      */\n     CheckAddCoin(ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH, false);"
      },
      {
        "sha": "bb4aae39db9078e51506bd73acac526b6cf198c3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21fa0a44abe8c1b5c452e097eab20cf0ae988805/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=21fa0a44abe8c1b5c452e097eab20cf0ae988805",
        "patch": "@@ -1669,10 +1669,11 @@ int ApplyTxInUndo(Coin&& undo, CCoinsViewCache& view, const COutPoint& out)\n             return DISCONNECT_FAILED; // adding output for transaction without known metadata\n         }\n     }\n-    // The potential_overwrite parameter to AddCoin is only allowed to be false if we know for\n-    // sure that the coin did not already exist in the cache. As we have queried for that above\n-    // using HaveCoin, we don't need to guess. When fClean is false, a coin already existed and\n-    // it is an overwrite.\n+    // If the coin already exists as an unspent coin in the cache, then the\n+    // possible_overwrite parameter to AddCoin must be set to true. We have\n+    // already checked whether an unspent coin exists above using HaveCoin, so\n+    // we don't need to guess. When fClean is false, an unspent coin already\n+    // existed and it is an overwrite.\n     view.AddCoin(out, std::move(undo), !fClean);\n \n     return fClean ? DISCONNECT_OK : DISCONNECT_UNCLEAN;"
      }
    ]
  }
]