[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602679330",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-602679330",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 602679330,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjY3OTMzMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-23T15:36:30Z",
    "updated_at": "2020-03-23T15:36:30Z",
    "author_association": "MEMBER",
    "body": "These changes were extracted from #18113.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602679330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602778584",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-602778584",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 602778584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMjc3ODU4NA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-23T18:28:39Z",
    "updated_at": "2020-04-16T01:48:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18113 ([WIP] Consensus: Don't allow a coin to be spent and FRESH. by jnewbery)\n* #16910 (wallet: reduce loading time by using unordered maps by achow101)\n* #9384 (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/602778584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603897580",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-603897580",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 603897580,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwMzg5NzU4MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-25T15:13:38Z",
    "updated_at": "2020-03-25T15:13:38Z",
    "author_association": "MEMBER",
    "body": "Thanks for improving the documentation here. I think this is a clear improvement.\r\n\r\nACK 97298e536d09724952f84837b562e5e714acbf23",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/603897580/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604640473",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-604640473",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 604640473,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNDY0MDQ3Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-03-26T19:33:30Z",
    "updated_at": "2020-03-26T19:33:30Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/604640473/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607851814",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-607851814",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 607851814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwNzg1MTgxNA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-02T13:37:12Z",
    "updated_at": "2020-04-02T13:37:12Z",
    "author_association": "MEMBER",
    "body": "Why is this assigned 0.20.0? This is not a bugfix, and the rename might be controversial, so let's better wait for 0.21.0?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/607851814/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613677002",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-613677002",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 613677002,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMzY3NzAwMg==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-14T20:55:57Z",
    "updated_at": "2020-04-14T20:55:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK. Definitely confused me during the PR review club.\r\n\r\nDid you give any thought to more intuitive names than FRESH and DIRTY @jnewbery? Don't want to open up a bikeshedding Pandora's box but the additional comments proposed by @jonatack suggest the naming isn't optimal.\r\n\r\nhttps://bitcoincore.reviews/18113.html#l-142",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/613677002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614124900",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-614124900",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 614124900,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDEyNDkwMA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T15:56:34Z",
    "updated_at": "2020-04-15T15:56:34Z",
    "author_association": "MEMBER",
    "body": "> Did you give any thought to more intuitive names than FRESH and DIRTY @jnewbery? Don't want to open up a bikeshedding Pandora's box but the additional comments proposed by @jonatack suggest the naming isn't optimal.\r\n\r\nI think that we could potentially rename `FRESH` to something less confusing (`DIRTY` is commonly used terminology for a cache entry that needs to be flushed to the parent. That discussion should happen in a separate issue or PR to not hold this up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614124900/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614125678",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-614125678",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 614125678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDEyNTY3OA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T15:57:53Z",
    "updated_at": "2020-04-15T15:57:53Z",
    "author_association": "MEMBER",
    "body": "I believe I've now addressed all feedback given on this PR up to this point.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614125678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614306147",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-614306147",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 614306147,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDMwNjE0Nw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-15T22:12:48Z",
    "updated_at": "2020-04-15T22:12:48Z",
    "author_association": "MEMBER",
    "body": "ACK 98bee55 latest documentation changes in `git diff 97298e5 98bee55` look good as well as the improved `CCoinsCacheEntry` Doxygen formatting; reverified all occurrences of `potential_overwrite` were changed to `possible_overwrite`.\r\n\r\n> I think that we could potentially rename `FRESH` to something less confusing (`DIRTY` is commonly used terminology for a cache entry that needs to be flushed to the parent. That discussion should happen in a separate issue or PR to not hold this up.\r\n\r\nAgreed -- SGTM.\r\n\r\nThanks, John.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614306147/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614836153",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-614836153",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 614836153,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDgzNjE1Mw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T18:56:59Z",
    "updated_at": "2020-04-16T18:56:59Z",
    "author_association": "MEMBER",
    "body": "@instagibbs @MarcoFalke can you help get this over the line? :pray: ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614836153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614837828",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-614837828",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 614837828,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNDgzNzgyOA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-16T19:00:21Z",
    "updated_at": "2020-04-16T19:00:21Z",
    "author_association": "MEMBER",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/18410/commits/98bee558700a10afd819cbb685df0b402522ccfa\r\n\r\nnot going to hold up a clear improvement",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/614837828/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616545299",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-616545299",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 616545299,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNjU0NTI5OQ==",
    "user": {
      "login": "michaelfolkson",
      "id": 16323900,
      "node_id": "MDQ6VXNlcjE2MzIzOTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/16323900?u=e2201a78ad660e42fd175003d02ad749b855e0a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/michaelfolkson",
      "html_url": "https://github.com/michaelfolkson",
      "followers_url": "https://api.github.com/users/michaelfolkson/followers",
      "following_url": "https://api.github.com/users/michaelfolkson/following{/other_user}",
      "gists_url": "https://api.github.com/users/michaelfolkson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/michaelfolkson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/michaelfolkson/subscriptions",
      "organizations_url": "https://api.github.com/users/michaelfolkson/orgs",
      "repos_url": "https://api.github.com/users/michaelfolkson/repos",
      "events_url": "https://api.github.com/users/michaelfolkson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/michaelfolkson/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-20T13:15:20Z",
    "updated_at": "2020-04-20T13:15:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 98bee558700a10afd819cbb685df0b402522ccfa\r\n\r\n(ideally with follow up PR renaming FRESH to something more intuitive like NEWCOIN)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/616545299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617333931",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-617333931",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 617333931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzMzMzkzMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T18:23:39Z",
    "updated_at": "2020-04-21T18:23:39Z",
    "author_association": "MEMBER",
    "body": "@MarcoFalke - I've reverted the comment change that you and Russ don't like. Your other two review comments are stylistic, so I've not made any changes for those.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617333931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617385616",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#issuecomment-617385616",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18410",
    "id": 617385616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzM4NTYxNg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-21T20:05:45Z",
    "updated_at": "2020-04-21T20:05:45Z",
    "author_association": "MEMBER",
    "body": "Re-ACK 21fa0a4 per `git diff 98bee55 21fa0a4` the only change since my previous review is the following code commenting diff in `src/coins.cpp::L177-179`;  rebuilt/ran unit tests anyway as a sanity check on the unit test changes. \r\n```diff\r\n-                // A coin can only be FRESH in the child cache if it doesn't exist\r\n-                // in any of the ancestor caches. We can therefore mark it FRESH\r\n-                // when flushing to the parent cache.\r\n+                // We can mark it FRESH in the parent if it was FRESH in the child\r\n+                // Otherwise it might have just been flushed from the parent's cache\r\n+                // and already exist in the grandparent\r\n                 if (it->second.flags & CCoinsCacheEntry::FRESH) {\r\n```\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617385616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396539404",
    "pull_request_review_id": 379543360,
    "id": 396539404,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzOTQwNA==",
    "diff_hunk": "@@ -805,42 +805,42 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n      *              Value   Value   Value   Flags        Flags        Flags\n      */\n     CheckWriteCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   , NO_ENTRY   );\n-    CheckWriteCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , DIRTY      );\n-    CheckWriteCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(ABSENT, SPENT , SPENT , NO_ENTRY   , DIRTY      , DIRTY      );\n+    CheckWriteCoins(ABSENT, SPENT , ABSENT , NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "0e04b2c44e5bb951a96e5e9f3e1252b9ef695827",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    CheckWriteCoins(ABSENT, SPENT , ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\r\n```",
    "created_at": "2020-03-23T15:30:38Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r396539404",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396539404"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r396539404"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396539404/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 809,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396547589",
    "pull_request_review_id": 379553772,
    "id": 396547589,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NzU4OQ==",
    "diff_hunk": "@@ -805,42 +805,42 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n      *              Value   Value   Value   Flags        Flags        Flags\n      */\n     CheckWriteCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   , NO_ENTRY   );\n-    CheckWriteCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , DIRTY      );\n-    CheckWriteCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(ABSENT, SPENT , SPENT , NO_ENTRY   , DIRTY      , DIRTY      );\n+    CheckWriteCoins(ABSENT, SPENT , ABSENT , NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "0e04b2c44e5bb951a96e5e9f3e1252b9ef695827",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "oops. Fixed. Thanks Marco",
    "created_at": "2020-03-23T15:41:02Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r396547589",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396547589"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r396547589"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/396547589/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 809,
    "side": "RIGHT",
    "in_reply_to_id": 396539404
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399543226",
    "pull_request_review_id": 383206366,
    "id": 399543226,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MzIyNg==",
    "diff_hunk": "@@ -77,8 +77,21 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin\");\n         }\n+        // If the coin exists in this cache as a spent coin and is DIRTY, then",
    "path": "src/coins.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"[docs] Improve commenting in coins.cpp|h\" (eeeb97b6da16fed5701ff04d3b9a622eb759fa5a)\r\n\r\nIt seems like this comment is going into the weeds about when it is safe to set these flags without explaining what the code is trying to do. If I were trying to explain this code I think I'd start off with something like:\r\n\r\n\"As an optimization, try to set the FRESH flag when the caller has passed possible_overwrite=false and is guaranteeing that the coin was spent or never existed before this call. In this case, the FRESH flag can be applied as long as there's not a previous spent dirty cache entry (from disconnecting a block in a reorg and \"spending\" the coin to remove it), that hasn't yet been written to the base view.\"",
    "created_at": "2020-03-27T21:19:40Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399543226",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399543226"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399543226"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399543226/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 82,
    "original_line": 82,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399550011",
    "pull_request_review_id": 383206366,
    "id": 399550011,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDAxMQ==",
    "diff_hunk": "@@ -77,8 +77,21 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin\");",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"[docs] Improve commenting in coins.cpp|h\" (eeeb97b6da16fed5701ff04d3b9a622eb759fa5a)\r\n\r\nI think it's not finding an unspent coin that's a problem, but finding an unspent coin when `possible_overwrite=false` that's a problem. logic_error(\"Found unexpected coin in cache with possible_overwrite=false\") might make it clearer the error's more of an unexpected state than a failed attempt to write something",
    "created_at": "2020-03-27T21:38:00Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399550011",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399550011"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399550011"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399550011/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 80,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399561161",
    "pull_request_review_id": 383206366,
    "id": 399561161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MTE2MQ==",
    "diff_hunk": "@@ -279,10 +279,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Add a coin. Set potential_overwrite to true if an unspent version may\n+     * Add a coin. Set possible_overwrite to true if an unspent version may\n      * already exist in the cache.\n      */\n-    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n+    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);",
    "path": "src/coins.h",
    "position": 71,
    "original_position": 9,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"[docs] use consistent naming for possible_overwrite\" (97298e536d09724952f84837b562e5e714acbf23)\r\n\r\nNot for here, since it's too much change for a documentation PR, but it might be worth considering replacing this bool possible_overwrite param with an inverted bool fresh param. possible_overwrite=false would change to fresh=true, meaning it is safe for AddCoin to assume any existing coin is spent, and possible_overwrite=true would change to fresh=false, meaning it can't make that assumption\r\n\r\n(This would be a partial step in the direction I was trying to go in #9384: instead of repeating fresh/dirty logic and implementing it slightly different ways in AddCoin, and SpendCoin, Batchwrite, just doing it one time one way in a CCoinsViewCache::Modifier class.)\r\n\r\nCalling the param fresh instead of possible_overwrite would make it more clear this is doing the same freshness logic as BatchWrite et al, and not something different",
    "created_at": "2020-03-27T22:10:46Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399561161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399561161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399561161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399561161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 290,
    "original_line": 290,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399571009",
    "pull_request_review_id": 383206366,
    "id": 399571009,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU3MTAwOQ==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In commit \"[docs] Improve commenting in coins.cpp|h\" (eeeb97b6da16fed5701ff04d3b9a622eb759fa5a)\r\n\r\n\"A coin can only be FRESH in the child cache if it doesn't exist in any of the ancestor caches\" is too broad a statement, not generally true. You can layer caches arbitrarily and a fresh flag in a child doesn't tell you about the state of the coin in every ancestor cache. It only directly tells you the state of the coin in the immediate parent cache. In this case, we only indirectly know the state of the grandparent coin due to this happening under the `itUs == cacheCoins.end()` branch.\r\n\r\nWould write this comment more like: \"We can mark parent cache entry FRESH here if child cache entry was FRESH. This works because parent cache entry not previously existing and child cache entry being FRESH indicates grandparent coin is spent or doesn't exist.\"",
    "created_at": "2020-03-27T22:44:54Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399571009",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399571009"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399571009"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/399571009/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401748979",
    "pull_request_review_id": 385753700,
    "id": 401748979,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0ODk3OQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in\n+        //! the parent cache). If a FRESH coin is later spent in this cache,\n+        //! then it can be deleted entirely and doesn't ever need to be flushed\n+        //! to the parent. This is a performance optimization.\n+        //! Marking a coin FRESH which exists in the parent view will",
    "path": "src/coins.h",
    "position": null,
    "original_position": 41,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`s/which exists/which exists unspent/` ?",
    "created_at": "2020-04-01T16:30:23Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401748979",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401748979"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401748979"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401748979/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 142,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750071",
    "pull_request_review_id": 385753700,
    "id": 401750071,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MDA3MQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in",
    "path": "src/coins.h",
    "position": null,
    "original_position": 37,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Remove the parenthetical here? List the two conditions since they're both authoritative. \r\n\r\nSomething like \"Either the parent cache does not have this coin, or it has it in a spent state\"",
    "created_at": "2020-04-01T16:32:01Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401750071",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750071"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401750071"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 138,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750981",
    "pull_request_review_id": 385753700,
    "id": 401750981,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MDk4MQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in",
    "path": "src/coins.h",
    "position": null,
    "original_position": 37,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can we define `this coin` in the comments here?\r\n\r\nIdentifying \"this coin\" versus \"changes\" to \"this coin\". I have some guesses but would have to actually read the underlying code to figure it out.",
    "created_at": "2020-04-01T16:33:24Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401750981",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750981"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r401750981"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/401750981/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 138,
    "side": "RIGHT",
    "in_reply_to_id": 401750071
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408388960",
    "pull_request_review_id": 393238851,
    "id": 408388960,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4ODk2MA==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)",
    "path": "src/coins.h",
    "position": null,
    "original_position": 17,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/flused/flushed/",
    "created_at": "2020-04-14T19:41:20Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408388960",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408388960"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408388960"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408388960/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408391497",
    "pull_request_review_id": 393238851,
    "id": 408391497,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5MTQ5Nw==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */",
    "path": "src/coins.h",
    "position": 18,
    "original_position": 18,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "a few suggestions:\r\n```diff\r\n  * - FRESH or not FRESH\r\n  *\r\n+ * Despite what the naming may suggest, FRESH and DIRTY are independent flags\r\n+ * and not mutually exclusive states.\r\n+ *\r\n  * Out of these 2^3 = 8 states, only some combinations are valid:\r\n- * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\r\n- * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\r\n- * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\r\n- * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\r\n- * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\r\n+ * - unspent, FRESH, DIRTY (e.g. a new coin created in the cache)\r\n+ * - unspent, not FRESH, DIRTY (e.g. a coin changed in the cache during a reorg)\r\n+ * - unspent, not FRESH, not DIRTY (e.g. an unspent coin fetched from the parent cache)\r\n+ * - spent, FRESH, not DIRTY (e.g. a spent coin fetched from the parent cache)\r\n+ * - spent, not FRESH, DIRTY (e.g. a coin is spent and spentness needs to be flushed to the parent)\r\n  */\r\n```",
    "created_at": "2020-04-14T19:46:01Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408391497",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408391497"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408391497"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408391497/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 126,
    "original_line": 126,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408393941",
    "pull_request_review_id": 393238851,
    "id": 408393941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM5Mzk0MQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in\n+        //! the parent cache). If a FRESH coin is later spent in this cache,\n+        //! then it can be deleted entirely and doesn't ever need to be flushed\n+        //! to the parent. This is a performance optimization.\n+        //! Marking a coin FRESH which exists in the parent view will\n+        //! cause a consensus failure, since it might not be deleted from the\n+        //! parent when this cache is flushed.\n+        FRESH = (1 << 1),",
    "path": "src/coins.h",
    "position": 48,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "suggestion:\r\n```diff\r\n     enum Flags {\r\n-        //! This cache entry is potentially different from the version in the parent cache.\r\n-        //! Failing to mark a coin as DIRTY when it is potentially different from the\r\n-        //! parent view will cause a consensus failure, since the coin's state won't get\r\n-        //! written to the parent when the cache is flushed.\r\n+        //! DIRTY means the CCoinsCacheEntry is potentially different from the\r\n+        //! version in the parent cache.  Failure to mark a coin as DIRTY when\r\n+        //! it is potentially different from the parent cache will cause a\r\n+        //! consensus failure, since the coin's state won't get written to the\r\n+        //! parent when the CCoinsCacheEntry is flushed.\r\n         DIRTY = (1 << 0),\r\n-        //! The parent cache does not have this coin (or it is a spent coin in\r\n-        //! the parent cache). If a FRESH coin is later spent in this cache,\r\n-        //! then it can be deleted entirely and doesn't ever need to be flushed\r\n-        //! to the parent. This is a performance optimization.\r\n-        //! Marking a coin FRESH which exists in the parent view will\r\n-        //! cause a consensus failure, since it might not be deleted from the\r\n-        //! parent when this cache is flushed.\r\n+        //! FRESH means the parent cache does not have this coin or that it is a\r\n+        //! spent coin in the parent cache.  If a FRESH coin in the\r\n+        //! CCoinsCacheEntry is later spent, it can be deleted entirely and\r\n+        //! doesn't ever need to be flushed to the parent. This is a performance\r\n+        //! optimization.  Marking a coin as FRESH when it exists in the parent\r\n+        //! cache will cause a consensus failure, since it might not be deleted\r\n+        //! from the parent when the CCoinsCacheEntry is flushed.\r\n         FRESH = (1 << 1),\r\n```",
    "created_at": "2020-04-14T19:50:35Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408393941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408393941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408393941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408393941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 150,
    "original_line": 150,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408401343",
    "pull_request_review_id": 393238851,
    "id": 408401343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQwMTM0Mw==",
    "diff_hunk": "@@ -751,21 +751,21 @@ BOOST_AUTO_TEST_CASE(ccoins_add)\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * with the AddCoin potential_overwrite argument set to false, and to true.\n+     * with the AddCoin possible_overwrite argument set to false, and to true.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: can remove the redundant \"with the\" (already present in the preceding line).",
    "created_at": "2020-04-14T20:03:50Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408401343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408401343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408401343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408401343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 754,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408921456",
    "pull_request_review_id": 393873923,
    "id": 408921456,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkyMTQ1Ng==",
    "diff_hunk": "@@ -77,8 +77,21 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin\");\n         }\n+        // If the coin exists in this cache as a spent coin and is DIRTY, then",
    "path": "src/coins.cpp",
    "position": 7,
    "original_position": 7,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for the suggestion. I find my version easier to parse (although I'm biased, of course). The second sentence in your version is: \r\n\r\n\"In [previous sentence] case, [thing can happen] as long as [condition] (from [cause]) that [subcondition]\"\r\n\r\nwhich I find to be a lot to arrange in my head at once. In my version, I've tried to keep the sentence structures simple like \"IF [thing] THEN [thing]\".",
    "created_at": "2020-04-15T15:13:38Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408921456",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408921456"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408921456"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408921456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 82,
    "original_line": 82,
    "side": "RIGHT",
    "in_reply_to_id": 399543226
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408935022",
    "pull_request_review_id": 393890689,
    "id": 408935022,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNTAyMg==",
    "diff_hunk": "@@ -77,8 +77,21 @@ void CCoinsViewCache::AddCoin(const COutPoint &outpoint, Coin&& coin, bool possi\n     }\n     if (!possible_overwrite) {\n         if (!it->second.coin.IsSpent()) {\n-            throw std::logic_error(\"Adding new coin that replaces non-pruned entry\");\n+            throw std::logic_error(\"Attempted to overwrite an unspent coin\");",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this is necessary. Assert messages are for developers, who'll be able to easily see that this assert is in the `!possible_overwrite` branch. I'll add a parenthesis `(when possible_overwrite is false)` to make this clear though.",
    "created_at": "2020-04-15T15:31:12Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408935022",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408935022"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408935022"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408935022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 80,
    "side": "RIGHT",
    "in_reply_to_id": 399550011
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408939709",
    "pull_request_review_id": 393896286,
    "id": 408939709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzOTcwOQ==",
    "diff_hunk": "@@ -279,10 +279,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     const Coin& AccessCoin(const COutPoint &output) const;\n \n     /**\n-     * Add a coin. Set potential_overwrite to true if an unspent version may\n+     * Add a coin. Set possible_overwrite to true if an unspent version may\n      * already exist in the cache.\n      */\n-    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool potential_overwrite);\n+    void AddCoin(const COutPoint& outpoint, Coin&& coin, bool possible_overwrite);",
    "path": "src/coins.h",
    "position": 71,
    "original_position": 9,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree that this is too much for this PR. Additional documentation around `possible_overwrite` or whatever you decide to change it to would be very welcome!",
    "created_at": "2020-04-15T15:37:20Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408939709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408939709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408939709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408939709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 290,
    "original_line": 290,
    "side": "RIGHT",
    "in_reply_to_id": 399561161
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943523",
    "pull_request_review_id": 393901038,
    "id": 408943523,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0MzUyMw==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> In this case, we only indirectly know the state of the grandparent coin due to this happening under the itUs == cacheCoins.end() branch.\r\n\r\nI don't understand this statement. `itUs == cacheCoins.end()` simply tells us that the coin doesn't exist in the parent cache's `CCoinsMap` structure. It doesn't tell us anything about the grandparent cache.",
    "created_at": "2020-04-15T15:42:44Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408943523",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943523"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408943523"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943523/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943846",
    "pull_request_review_id": 393901461,
    "id": 408943846,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0Mzg0Ng==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)",
    "path": "src/coins.h",
    "position": null,
    "original_position": 17,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2020-04-15T15:43:14Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408943846",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943846"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408943846"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408943846/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 408388960
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408946291",
    "pull_request_review_id": 393904400,
    "id": 408946291,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk0NjI5MQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */",
    "path": "src/coins.h",
    "position": 18,
    "original_position": 18,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Despite what the naming may suggest, FRESH and DIRTY are independent flags and not mutually exclusive states.\r\n\r\nI think this is already quite explicit from the rest of the comment. Let's keep any further discussion for FRESH/DIRTY naming for a future PR.\r\n\r\nI've taken the other suggestions.",
    "created_at": "2020-04-15T15:46:38Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408946291",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408946291"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408946291"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408946291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 126,
    "original_line": 126,
    "side": "RIGHT",
    "in_reply_to_id": 408391497
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408950461",
    "pull_request_review_id": 393909395,
    "id": 408950461,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MDQ2MQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in\n+        //! the parent cache). If a FRESH coin is later spent in this cache,\n+        //! then it can be deleted entirely and doesn't ever need to be flushed\n+        //! to the parent. This is a performance optimization.\n+        //! Marking a coin FRESH which exists in the parent view will\n+        //! cause a consensus failure, since it might not be deleted from the\n+        //! parent when this cache is flushed.\n+        FRESH = (1 << 1),",
    "path": "src/coins.h",
    "position": 48,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. I've taken some of these suggested changes.",
    "created_at": "2020-04-15T15:52:24Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408950461",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408950461"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408950461"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408950461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 150,
    "original_line": 150,
    "side": "RIGHT",
    "in_reply_to_id": 408393941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951002",
    "pull_request_review_id": 393910042,
    "id": 408951002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MTAwMg==",
    "diff_hunk": "@@ -751,21 +751,21 @@ BOOST_AUTO_TEST_CASE(ccoins_add)\n     /* Check AddCoin behavior, requesting a new coin from a cache view,\n      * writing a modification to the coin, and then checking the resulting\n      * entry in the cache after the modification. Verify behavior with the\n-     * with the AddCoin potential_overwrite argument set to false, and to true.\n+     * with the AddCoin possible_overwrite argument set to false, and to true.",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 141,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "97298e536d09724952f84837b562e5e714acbf23",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done",
    "created_at": "2020-04-15T15:53:07Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408951002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408951002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 754,
    "side": "RIGHT",
    "in_reply_to_id": 408401343
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951552",
    "pull_request_review_id": 393910694,
    "id": 408951552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MTU1Mg==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in\n+        //! the parent cache). If a FRESH coin is later spent in this cache,\n+        //! then it can be deleted entirely and doesn't ever need to be flushed\n+        //! to the parent. This is a performance optimization.\n+        //! Marking a coin FRESH which exists in the parent view will",
    "path": "src/coins.h",
    "position": null,
    "original_position": 41,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-04-15T15:53:50Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408951552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408951552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408951552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 142,
    "side": "RIGHT",
    "in_reply_to_id": 401748979
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408952520",
    "pull_request_review_id": 393911823,
    "id": 408952520,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1MjUyMA==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in",
    "path": "src/coins.h",
    "position": null,
    "original_position": 37,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Remove the parenthetical here?\r\n\r\nDone\r\n\r\n> Can we define this coin in the comments here?\r\n\r\nThis coin is the `CCoinsCacheEntry` that the flag is applied to.",
    "created_at": "2020-04-15T15:55:04Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408952520",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408952520"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408952520"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408952520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 138,
    "side": "RIGHT",
    "in_reply_to_id": 401750071
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408954811",
    "pull_request_review_id": 393914710,
    "id": 408954811,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk1NDgxMQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in",
    "path": "src/coins.h",
    "position": null,
    "original_position": 37,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In other words, IIRC, \"This coin\" means \"If the underlying OutPoint is the same\", rather than other details like flags.",
    "created_at": "2020-04-15T15:58:22Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408954811",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408954811"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408954811"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408954811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 138,
    "side": "RIGHT",
    "in_reply_to_id": 401750071
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408982739",
    "pull_request_review_id": 393949373,
    "id": 408982739,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4MjczOQ==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> > In this case, we only indirectly know the state of the grandparent coin due to this happening under the itUs == cacheCoins.end() branch.\r\n\r\nIf entry has fresh flag and there is no parent entry (`itUs == cacheCoins.end()`) then the coin must be spent in the grandparent and therefore it's safe to re-apply the fresh flag\r\n\r\n> It doesn't tell us anything about the grandparent cache.\r\n\r\nOf course, the grandparent might not even be a cache view. But whatever kind of view it is the coin must be spent there.",
    "created_at": "2020-04-15T16:41:04Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408982739",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408982739"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r408982739"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408982739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409008074",
    "pull_request_review_id": 393980302,
    "id": 409008074,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAwODA3NA==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> If entry has fresh flag and there is no parent entry (itUs == cacheCoins.end()) then the coin must be spent in the grandparent\r\n\r\nI still don't understand this. Can you explain the logic?\r\n\r\n(I still believe that no ancestor cache can contain the coin due to the way we build the cache hierarchy, but I don't understand how you reason about just the grandparent cache)",
    "created_at": "2020-04-15T17:21:44Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409008074",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409008074"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409008074"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409008074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409018298",
    "pull_request_review_id": 393992833,
    "id": 409018298,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxODI5OA==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't see why we're going back and forth on one sentence in a code review comment I made explaining why I thought your code comment was making an unstated assumption. If you don't like my suggestion (which does not mention itUs), feel free to ignore!\r\n\r\nMy logic is just that in order for a cache entry to wind up with the fresh flag, the coin in its parent view (whether it's a cache or not, whether or not it has entries or is flushed if it is a cache) must be spent. If the parent view is a cache, and doesn't have an entry, the coin must be spent in the grandparent view (again whether or not it's a cache and regardless of whether entries are created).\r\n\r\nI am using \"spent\" here as shorthand for \"spent or never existed\" in case that what may be confusing. My working definition of \"fresh\" is \"spent in the parent view\"\r\n",
    "created_at": "2020-04-15T17:38:41Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409018298",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409018298"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409018298"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409018298/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409019659",
    "pull_request_review_id": 393994490,
    "id": 409019659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAxOTY1OQ==",
    "diff_hunk": "@@ -109,19 +109,40 @@ class SaltedOutpointHasher\n     }\n };\n \n+/**\n+ * A Coin in one level of the coins database caching hierarchy.\n+ *\n+ * A coin can either be:\n+ * - unspent or spent (in which case the Coin object will be nulled out - see Coin.Clear())\n+ * - DIRTY or not DIRTY\n+ * - FRESH or not FRESH\n+ *\n+ * Out of these 2^3 = 8 states, only some combinations are valid:\n+ * - unspent, FRESH, DIRTY (eg a new coin created in the cache)\n+ * - unspent, not FRESH, DIRTY (eg a coin is changed in the cache during a reorg)\n+ * - unspent, not FRESH, not DIRTY (eg an unspent coin fetched from the parent cache)\n+ * - spent, FRESH, not DIRTY (eg a spent coin fetched from the parent cache)\n+ * - spent, not FRESH, DIRTY (eg a coin is spent and spentness needs to be flused to the parent)\n+ */\n struct CCoinsCacheEntry\n {\n     Coin coin; // The actual cached data.\n     unsigned char flags;\n \n     enum Flags {\n-        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n-        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n-        /* Note that FRESH is a performance optimization with which we can\n-         * erase coins that are fully spent if we know we do not need to\n-         * flush the changes to the parent cache.  It is always safe to\n-         * not mark FRESH if that condition is not guaranteed.\n-         */\n+        //! This cache entry is potentially different from the version in the parent cache.\n+        //! Failing to mark a coin as DIRTY when it is potentially different from the\n+        //! parent view will cause a consensus failure, since the coin's state won't get\n+        //! written to the parent when the cache is flushed.\n+        DIRTY = (1 << 0),\n+        //! The parent cache does not have this coin (or it is a spent coin in",
    "path": "src/coins.h",
    "position": null,
    "original_position": 37,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry, I understand what you're saying now. The caches are indexed by `COutPoint`, so if I say \"this coin exists in the parent cache\", I mean \"there is an entry in the parent cache with a COutPoint that matches this coin's COutPoint\". It seems overly verbose to put that in the comment.",
    "created_at": "2020-04-15T17:41:02Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409019659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409019659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409019659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409019659/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 138,
    "side": "RIGHT",
    "in_reply_to_id": 401750071
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409173281",
    "pull_request_review_id": 394181266,
    "id": 409173281,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3MzI4MQ==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe: \"A coin can only be FRESH in the child cache if it doesn't exist (e.g. was spent or never existed) in any of the ancestor caches\".",
    "created_at": "2020-04-15T22:34:12Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409173281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409173281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409173281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409173281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409175920",
    "pull_request_review_id": 394184105,
    "id": 409175920,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NTkyMA==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "or: \"A coin can only be FRESH in the child cache if it doesn't exist (e.g. was spent or never existed) in the parent view, nor in any of the ancestor caches due to the way we build the cache hierarchy.\"",
    "created_at": "2020-04-15T22:40:56Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409175920",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409175920"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r409175920"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/409175920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411325456",
    "pull_request_review_id": 396393289,
    "id": 411325456,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyNTQ1Ng==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.",
    "path": "src/coins.cpp",
    "position": 51,
    "original_position": 35,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "be549b3c04584e41b00f20a1c7be8a0b137ccff7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit be549b3c04584e41b00f20a1c7be8a0b137ccff7:\r\n\r\nI don't think inline comments that translate the c++ source code into English are helpful. Instead of repeating the code, they should clarify its intent and provide motivation and background information that is not available from just reading the code. If there is nothing to clarify, no inline comment should be made.\r\n\r\nDoxygen comments on the other hand may repeat what the code does on a abstract, higher level to give devs the convenience to not dig into the internal source code of a class or module.",
    "created_at": "2020-04-20T12:09:40Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411325456",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411325456"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411325456"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411325456/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 172,
    "original_line": 172,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411341767",
    "pull_request_review_id": 396393289,
    "id": 411341767,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM0MTc2Nw==",
    "diff_hunk": "@@ -190,11 +202,10 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 itUs->second.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                 itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                // NOTE: It is possible the child has a FRESH flag here in\n-                // the event the entry we found in the parent is pruned. But\n-                // we must not copy that FRESH flag to the parent as that\n-                // pruned state likely still needs to be communicated to the\n-                // grandparent.\n+                // NOTE: It isn't safe to mark the coin as FRESH in the parent",
    "path": "src/coins.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "be549b3c04584e41b00f20a1c7be8a0b137ccff7",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "in commit be549b3c04584e41b00f20a1c7be8a0b137ccff7:\r\n\r\nAll inline comments are notes. Without loss of information, this comment can be pruned.\r\n\r\n```suggestion\r\n                // It isn't safe to mark the coin as FRESH in the parent\r\n```",
    "created_at": "2020-04-20T12:36:50Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411341767",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411341767"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411341767"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411341767/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 205,
    "original_line": 205,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411416527",
    "pull_request_review_id": 396498336,
    "id": 411416527,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNjUyNw==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n+                // A coin can only be FRESH in the child cache if it doesn't exist\n+                // in any of the ancestor caches. We can therefore mark it FRESH",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "eeeb97b6da16fed5701ff04d3b9a622eb759fa5a",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I don't see why we're going back and forth on one sentence in a code review comment I made explaining why I thought your code comment was making an unstated assumption. \r\n\r\nBecause I'm trying to understand your logic and if there's a gap in my understanding. And if not, whether the comment is needlessly confusing.\r\n\r\n> in order for a cache entry to wind up with the fresh flag, the coin in its parent view [...] must be spent. If the parent view is a cache, and doesn't have an entry, the coin must be spent in the grandparent view \r\n\r\nBut isn't this transitive? Can I not equally say \"If the grandparent view is a cache, and doesn't have an entry, the coin must be spent in the great-grandparent view\" and so on?",
    "created_at": "2020-04-20T14:18:57Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411416527",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411416527"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411416527"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411416527/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 177,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 178,
    "side": "RIGHT",
    "in_reply_to_id": 399571009
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411430128",
    "pull_request_review_id": 396393289,
    "id": 411430128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMDEyOA==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "98bee558700a10afd819cbb685df0b402522ccfa",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why are you removing the wording \"flushed from the parent's cache\"? Is it a requirement to flush the child before the parent? If yes, this comment was incorrect, if no, this comment should not be deleted.",
    "created_at": "2020-04-20T14:36:07Z",
    "updated_at": "2020-04-21T18:19:48Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411430128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411430128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r411430128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/411430128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388468",
    "pull_request_review_id": 397562036,
    "id": 412388468,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4ODQ2OA==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.",
    "path": "src/coins.cpp",
    "position": 51,
    "original_position": 35,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "be549b3c04584e41b00f20a1c7be8a0b137ccff7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree, although in this case, I was simply cleaning up a comment that already existed (using otherwise to continue a sentence over two comments is a bad idea because when the code changes comments like this often lose their meaning.",
    "created_at": "2020-04-21T18:21:49Z",
    "updated_at": "2020-04-21T18:21:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412388468",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388468"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412388468"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 172,
    "original_line": 172,
    "side": "RIGHT",
    "in_reply_to_id": 411325456
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388817",
    "pull_request_review_id": 397562449,
    "id": 412388817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4ODgxNw==",
    "diff_hunk": "@@ -190,11 +202,10 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                 itUs->second.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += itUs->second.coin.DynamicMemoryUsage();\n                 itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n-                // NOTE: It is possible the child has a FRESH flag here in\n-                // the event the entry we found in the parent is pruned. But\n-                // we must not copy that FRESH flag to the parent as that\n-                // pruned state likely still needs to be communicated to the\n-                // grandparent.\n+                // NOTE: It isn't safe to mark the coin as FRESH in the parent",
    "path": "src/coins.cpp",
    "position": 92,
    "original_position": 84,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "be549b3c04584e41b00f20a1c7be8a0b137ccff7",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree. Could probably be improved further.",
    "created_at": "2020-04-21T18:22:22Z",
    "updated_at": "2020-04-21T18:22:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412388817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412388817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412388817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 205,
    "original_line": 205,
    "side": "RIGHT",
    "in_reply_to_id": 411341767
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412389139",
    "pull_request_review_id": 397562859,
    "id": 412389139,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4OTEzOQ==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "98bee558700a10afd819cbb685df0b402522ccfa",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This comment change seems to be controversial (see https://github.com/bitcoin/bitcoin/pull/18410#discussion_r399571009), so I've reverted it.",
    "created_at": "2020-04-21T18:22:51Z",
    "updated_at": "2020-04-21T18:22:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412389139",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412389139"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412389139"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412389139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "LEFT",
    "in_reply_to_id": 411430128
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412392377",
    "pull_request_review_id": 397566458,
    "id": 412392377,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM5MjM3Nw==",
    "diff_hunk": "@@ -152,36 +165,35 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         }\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n-            // The parent cache does not have an entry, while the child does\n-            // We can ignore it if it's both FRESH and pruned in the child\n+            // The parent cache does not have an entry, while the child cache does.\n+            // We can ignore it if it's both spent and FRESH in the child\n             if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Otherwise we will need to create it in the parent\n-                // and move the data up and mark it as dirty\n+                // Create the coin in the parent cache, move the data up\n+                // and mark it as dirty.\n                 CCoinsCacheEntry& entry = cacheCoins[it->first];\n                 entry.coin = std::move(it->second.coin);\n                 cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n                 entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent",
    "path": "src/coins.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "21fa0a44abe8c1b5c452e097eab20cf0ae988805",
    "original_commit_id": "98bee558700a10afd819cbb685df0b402522ccfa",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Potentially relevant context: https://github.com/bitcoin/bitcoin/pull/5863#issuecomment-86568450",
    "created_at": "2020-04-21T18:27:46Z",
    "updated_at": "2020-04-21T18:27:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412392377",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412392377"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18410#discussion_r412392377"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18410"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/412392377/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 166,
    "side": "LEFT",
    "in_reply_to_id": 411430128
  }
]