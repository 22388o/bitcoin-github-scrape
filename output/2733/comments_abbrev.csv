BitcoinPullTester,2013-06-04T00:50:22Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ab139c964e32b3ec5279eea0e749e0fe4a31a2dd for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2733#issuecomment-18883041,18883041,
sipa,2013-06-15T15:55:08Z,"Would you mind if I rewrote this a bit, by simultaneously changing how keys are stored in the wallet file (using a serialized CKey, instead of CPrivKey, and combining it with the new CKeyMeta)?\n",https://github.com/bitcoin/bitcoin/pull/2733#issuecomment-19498612,19498612,
pstratem,2013-06-15T20:17:50Z,That sounds like a good idea.\n,https://github.com/bitcoin/bitcoin/pull/2733#issuecomment-19502773,19502773,
pstratem,2013-07-04T21:19:47Z,I'm closing this pull request.\n\nsipa's suggestion is a better long term solution.\n,https://github.com/bitcoin/bitcoin/pull/2733#issuecomment-20493830,20493830,
gavinandresen,2013-06-04T04:34:25Z,Looks like ctx and point are memory leaked in the return true case...\n,https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4515605,4515605,src/key.cpp
sipa,2013-06-04T07:41:05Z,"The hash should be calculated over both private and public key, as the reason for the test is guaranteeing that we have matching keypairs.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4517050,4517050,src/walletdb.cpp
vinniefalco,2013-06-04T12:53:01Z,"Do I need my glasses or is that a ""goto"" statement?\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4521470,4521470,src/key.cpp
jgarzik,2013-06-04T13:25:11Z,"""goto"" use is just fine.  It is efficient for both the compiler and human eyes.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522013,4522013,src/key.cpp
vinniefalco,2013-06-04T13:27:56Z,"No, goto is not okay.\nhttp://stackoverflow.com/questions/46586/goto-still-considered-harmful\n\nIt's true that there are exceedingly rare cases where a goto is useful but this is not one of them. Especially this case, error handling.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522049,4522049,src/key.cpp
sipa,2013-06-04T13:31:12Z,"This is code that I assume was copied from the OpenSSL sources, which uses such error handling extensively. Without RAII-like features (as it was copied from C), I also know of no less contrived way of dealing with this.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522089,4522089,src/key.cpp
vinniefalco,2013-06-04T13:39:14Z,Then roll a quick RAII wrapper (don't add more dependence on boost). Here's one for you http://codepad.org/gr8M2LE6\n\nLook at how easy it was to introduce a memory leak. I know that you guys know better than this!\n,https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522250,4522250,src/key.cpp
jgarzik,2013-06-04T13:47:37Z,~90 LOC just to avoid a goto?\n\nI think that speaks for itself :)\n,https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522441,4522441,src/key.cpp
vinniefalco,2013-06-04T13:52:48Z,"90 LOC to have the right tool. Note, you could use boost::auto_ptr or whatever RAII wrapper they have around dynamically created objects. I prefer not to create additional dependencies on boost. That Bitcoin source code is sloppy and breaks numerous ""best practices"" endorsed by luminaries of C++ should not even be up for debate - I know that you guys know better! The attitude needs to change or el",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4522566,4522566,src/key.cpp
jgarzik,2013-06-04T14:19:41Z,NAK that logic\n,https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4523261,4523261,src/key.cpp
laanwj,2013-06-04T14:24:31Z,"Goto is fine in C code (in many cases the only sane way to do error\nhandling with proper cleanup), but in C++ we can indeed do better with RAII.\nUsing boost would be preferable to rolling our own RAII wrappers.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4523428,4523428,src/key.cpp
ValleZ,2013-06-13T15:47:09Z,"I'm not a c++ guy, but I believe there are RuntimeExceptions, right? And maybe they allows to pass description of error. It would be much better than to use goto.\n",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r4681882,4681882,src/key.cpp
GilesBathgate,2013-07-03T08:14:04Z,"Rather than creating 90 Lines of RAII wrappers, You could probably just rewrite it like this:\n\n``` c++\nbool SetPrivKeyCleanup(BN_CTX *ctx,EC_POINT *point)\n{\n if (ctx   != NULL)\n  BN_CTX_free(ctx);\n if (point != NULL)\n  EC_POINT_free(point);\n return false;\n}\n```\n\nThen just ammend:\n\n``` c++\n            if (!pkey || !group || !pub_key || !priv_key)\n                return SetPrivKeyCl",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r5003860,5003860,src/key.cpp
laanwj,2013-07-03T08:51:24Z,I still prefer RAII. Make the compiler do the work of making it leak proof.\nSafer _and_ more convenient.\n,https://github.com/bitcoin/bitcoin/pull/2733#discussion_r5004340,5004340,src/key.cpp
GilesBathgate,2013-07-03T10:17:16Z,"Indeed making an EC_POINT class that implements EC_POINT_new in the constructor and EC_POINT_free in the destructor, as well as operator overloads for EC_POINT_mul and EC_POINT_cmp, is much more in the spirit of C++. I was really just addressing the comment:\n\n> Do I need my glasses or is that a ""goto"" statement?\n\nIts not really an issue worth making a fuss about really. Perhaps I should have k",https://github.com/bitcoin/bitcoin/pull/2733#discussion_r5005718,5005718,src/key.cpp
