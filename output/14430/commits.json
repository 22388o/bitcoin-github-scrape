[
  {
    "sha": "7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDFiNjcwZWIzZGE0OWVmMzFhYzJmMzBlMGNiMWJkMjFkYjkyOTY3",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2018-10-08T02:27:22Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2019-07-29T12:05:44Z"
      },
      "message": "Add more property based tests for basic bitcoin data structures",
      "tree": {
        "sha": "c431d5f2a8572c792067fe94ae82d33ac82d42cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c431d5f2a8572c792067fe94ae82d33ac82d42cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c2885f9b2e3340ef0558c9924e5386716a8d3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c2885f9b2e3340ef0558c9924e5386716a8d3b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c2885f9b2e3340ef0558c9924e5386716a8d3b9"
      }
    ],
    "stats": {
      "total": 979,
      "additions": 964,
      "deletions": 15
    },
    "files": [
      {
        "sha": "219c53488d24555d74f1b1f4ef1048b3dda625e6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 16,
        "deletions": 2,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -153,11 +153,25 @@ BITCOIN_TESTS =\\\n \n if ENABLE_PROPERTY_TESTS\n BITCOIN_TESTS += \\\n-  test/key_properties.cpp\n+  test/block_properties.cpp \\\n+  test/bloom_properties.cpp \\\n+  test/key_properties.cpp \\\n+  test/merkleblock_properties.cpp \\\n+  test/script_properties.cpp \\\n+  test/transaction_properties.cpp\n \n BITCOIN_TEST_SUITE += \\\n+  test/gen/block_gen.cpp \\\n+  test/gen/block_gen.h \\\n+  test/gen/bloom_gen.cpp \\\n+  test/gen/bloom_gen.h \\\n   test/gen/crypto_gen.cpp \\\n-  test/gen/crypto_gen.h\n+  test/gen/crypto_gen.h \\\n+  test/gen/merkle_block.h \\\n+  test/gen/script_gen.cpp \\\n+  test/gen/script_gen.h \\\n+  test/gen/transaction_gen.cpp \\\n+  test/gen/transaction_gen.h\n endif\n \n if ENABLE_WALLET"
      },
      {
        "sha": "43465f61c6659778e3e37126ec993525998b9c1d",
        "filename": "src/test/block_properties.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/block_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/block_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,34 @@\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"test/test_bitcoin.h\"\n+#include \"primitives/block.h\"\n+#include \"test/gen/block_gen.h\"\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(block_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(blockheader_serialization_symmetry, (const CBlockHeader& header))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    CBlockHeader header2;\n+    ss >> header2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << header;\n+    ss1 << header2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+RC_BOOST_PROP(block_serialization_symmetry, (const CBlock& block))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << block;\n+    CBlock block2;\n+    ss >> block2;\n+    RC_ASSERT(block.GetHash() == block2.GetHash());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "4ab77ef5074199971a6258e6514a7fe9feac6737",
        "filename": "src/test/bloom_properties.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/bloom_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/bloom_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"test/gen/bloom_gen.h\"\n+#include \"test/gen/crypto_gen.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(bloom_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(no_false_negatives, (CBloomFilter bloom_filter, const uint256& hash))\n+{\n+    bloom_filter.insert(hash);\n+    bool result = bloom_filter.contains(hash);\n+    RC_ASSERT(result);\n+}\n+\n+RC_BOOST_PROP(serialization_symmetry, (const CBloomFilter& bloom_filter))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << bloom_filter;\n+    CBloomFilter bloom_filter2;\n+    ss >> bloom_filter2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << bloom_filter;\n+    ss1 << bloom_filter2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "6e6909a497f27313adc9fec67e5d9d833eadd26c",
        "filename": "src/test/gen/block_gen.cpp",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/block_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/block_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,12 @@\n+#include \"test/gen/block_gen.h\"\n+\n+#include <rapidcheck/Gen.h>\n+\n+/** Generator for the primitives of a block header */\n+rc::Gen<BlockHeaderTup> BlockHeaderPrimitives()\n+{\n+    return rc::gen::tuple(rc::gen::arbitrary<int32_t>(),\n+        rc::gen::arbitrary<uint256>(), rc::gen::arbitrary<uint256>(),\n+        rc::gen::arbitrary<uint32_t>(), rc::gen::arbitrary<uint32_t>(),\n+        rc::gen::arbitrary<uint32_t>());\n+}"
      },
      {
        "sha": "3a2553e356c3ab0ce949fd7464fc0d1a384400ee",
        "filename": "src/test/gen/block_gen.h",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/block_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/block_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,58 @@\n+#ifndef BITCOIN_TEST_GEN_BLOCK_GEN_H\n+#define BITCOIN_TEST_GEN_BLOCK_GEN_H\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/transaction_gen.h\"\n+#include \"uint256.h\"\n+#include \"primitives/block.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+\n+typedef std::tuple<int32_t, uint256, uint256, uint32_t, uint32_t, uint32_t> BlockHeaderTup;\n+\n+/** Generator for the primitives of a block header */\n+rc::Gen<BlockHeaderTup> BlockHeaderPrimitives();\n+\n+namespace rc\n+{\n+/** Generator for a new CBlockHeader */\n+template <>\n+struct Arbitrary<CBlockHeader> {\n+    static Gen<CBlockHeader> arbitrary()\n+    {\n+        return gen::map(BlockHeaderPrimitives(), [](const BlockHeaderTup& primitives) {\n+            int32_t nVersion;\n+            uint256 hashPrevBlock;\n+            uint256 hashMerkleRoot;\n+            uint32_t nTime;\n+            uint32_t nBits;\n+            uint32_t nNonce;\n+            std::tie(nVersion, hashPrevBlock, hashMerkleRoot, nTime, nBits, nNonce) = primitives;\n+            CBlockHeader header;\n+            header.nVersion = nVersion;\n+            header.hashPrevBlock = hashPrevBlock;\n+            header.hashMerkleRoot = hashMerkleRoot;\n+            header.nTime = nTime;\n+            header.nBits = nBits;\n+            header.nNonce = nNonce;\n+            return header;\n+        });\n+    };\n+};\n+\n+/** Generator for a new CBlock */\n+template <>\n+struct Arbitrary<CBlock> {\n+    static Gen<CBlock> arbitrary()\n+    {\n+        return gen::map(gen::nonEmpty<std::vector<CTransactionRef>>(), [](const std::vector<CTransactionRef>& refs) {\n+            CBlock block;\n+            block.vtx = refs;\n+            return block;\n+        });\n+    }\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "9a59311f1c9bd042165057ba8ec7af576ba7199e",
        "filename": "src/test/gen/bloom_gen.cpp",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/bloom_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/bloom_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,59 @@\n+#include \"test/gen/bloom_gen.h\"\n+#include \"test/gen/crypto_gen.h\"\n+\n+#include \"bloom.h\"\n+#include <math.h>\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Tuple.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Container.h>\n+\n+/** Generates a double between [0,1) */\n+rc::Gen<double> BetweenZeroAndOne()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<double>(), [](double x) {\n+        double result = abs(fmod(x, 1));\n+        assert(result >= 0 && result < 1);\n+        return result;\n+    });\n+}\n+\n+rc::Gen<unsigned int> Between1And100()\n+{\n+    return rc::gen::inRange<unsigned int>(1, 100);\n+}\n+/** Generates the C++ primitives used to create a bloom filter */\n+rc::Gen<std::tuple<unsigned int, double, unsigned int, unsigned int>> BloomFilterPrimitives()\n+{\n+    return rc::gen::tuple(Between1And100(),\n+        BetweenZeroAndOne(), rc::gen::arbitrary<unsigned int>(),\n+        rc::gen::inRange<unsigned int>(0, 3));\n+}\n+\n+/** Returns a bloom filter loaded with the given uint256s */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadedBloomFilter()\n+{\n+    return rc::gen::map(rc::gen::pair(rc::gen::arbitrary<CBloomFilter>(), rc::gen::arbitrary<std::vector<uint256>>()),\n+        [](const std::pair<CBloomFilter, const std::vector<uint256>&>& primitives) {\n+            CBloomFilter bloomFilter = primitives.first;\n+            std::vector<uint256> hashes = primitives.second;\n+            for (unsigned int i = 0; i < hashes.size(); i++) {\n+                bloomFilter.insert(hashes[i]);\n+            }\n+            return std::make_pair(bloomFilter, hashes);\n+        });\n+}\n+\n+/** Loads an arbitrary bloom filter with the given hashes */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadBloomFilter(const std::vector<uint256>& hashes)\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CBloomFilter>(), [&hashes](CBloomFilter bloomFilter) {\n+        for (unsigned int i = 0; i < hashes.size(); i++) {\n+            bloomFilter.insert(hashes[i]);\n+        }\n+        return std::make_pair(bloomFilter, hashes);\n+    });\n+}"
      },
      {
        "sha": "8676294024e05d39a26f8e40cc1590060917b8f9",
        "filename": "src/test/gen/bloom_gen.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/bloom_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/bloom_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,42 @@\n+#ifndef BITCOIN_TEST_GEN_BLOOM_GEN_H\n+#define BITCOIN_TEST_GEN_BLOOM_GEN_H\n+\n+#include \"bloom.h\"\n+#include \"merkleblock.h\"\n+\n+#include <math.h>\n+\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+\n+/** Generates a double between [0,1) */\n+rc::Gen<double> BetweenZeroAndOne();\n+\n+rc::Gen<std::tuple<unsigned int, double, unsigned int, unsigned int>> BloomFilterPrimitives();\n+\n+namespace rc\n+{\n+/** Generator for a new CBloomFilter*/\n+template <>\n+struct Arbitrary<CBloomFilter> {\n+    static Gen<CBloomFilter> arbitrary()\n+    {\n+        return gen::map(BloomFilterPrimitives(), [](const std::tuple<unsigned int, double, unsigned int, unsigned int>& primitives) {\n+            unsigned int num_elements;\n+            double fp_rate;\n+            unsigned int n_tweak_in;\n+            unsigned int bloom_flag;\n+            std::tie(num_elements, fp_rate, n_tweak_in, bloom_flag) = primitives;\n+            return CBloomFilter(num_elements, fp_rate, n_tweak_in, bloom_flag);\n+        });\n+    };\n+};\n+} //namespace rc\n+\n+/** Returns a bloom filter loaded with the returned uint256s */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadedBloomFilter();\n+\n+/** Loads an arbitrary bloom filter with the given hashes */\n+rc::Gen<std::pair<CBloomFilter, std::vector<uint256>>> LoadBloomFilter(const std::vector<uint256>& hashes);\n+\n+#endif"
      },
      {
        "sha": "02bf5e39e14b80f67f6ca55be5d4e926d87164c2",
        "filename": "src/test/gen/crypto_gen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/crypto_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/crypto_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -1,9 +1,6 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include <test/gen/crypto_gen.h>\n+#include \"test/gen/crypto_gen.h\"\n \n-#include <key.h>\n+#include \"key.h\"\n \n #include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n@@ -14,6 +11,13 @@\n rc::Gen<std::vector<CKey>> MultisigKeys()\n {\n     return rc::gen::suchThat(rc::gen::arbitrary<std::vector<CKey>>(), [](const std::vector<CKey>& keys) {\n+        //TODO: Investigate why we can only allow 15 keys. Consensus rules\n+        // dictate we can up to 20 keys\n+        //https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h#L29\n+        //needs to be <= 16 keys because this assertion fails\n+        //https://github.com/bitcoin/bitcoin/blob/10bee0dd4f37eb6cb7a0f1d565fa0fecf8109c35/src/script/script.h#L585\n+        //ProduceSignature() fails for p2sh(multisig) if there are >= 16 keys\n+        //this is why we are currently limited to the range >= 1 && <= 15\n         return keys.size() >= 1 && keys.size() <= 15;\n     });\n };"
      },
      {
        "sha": "927f91b1f73bda810e03764294198340d822a973",
        "filename": "src/test/gen/crypto_gen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/crypto_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/crypto_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -1,12 +1,9 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_CRYPTO_GEN_H\n #define BITCOIN_TEST_GEN_CRYPTO_GEN_H\n \n-#include <key.h>\n-#include <random.h>\n-#include <uint256.h>\n+#include \"key.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n #include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n #include <rapidcheck/gen/Create.h>"
      },
      {
        "sha": "93059bac929409a152977b848ae9c8c57fa43028",
        "filename": "src/test/gen/merkleblock_gen.h",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/merkleblock_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/merkleblock_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/merkleblock_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,93 @@\n+#ifndef BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n+#define BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"merkleblock.h\"\n+#include \"test/gen/block_gen.h\"\n+\n+#include <iostream>\n+namespace rc\n+{\n+/** Returns a CMerkleblock with the hashes that match inside of the CPartialMerkleTree */\n+template <>\n+struct Arbitrary<std::pair<CMerkleBlock, std::set<uint256>>> {\n+    static Gen<std::pair<CMerkleBlock, std::set<uint256>>> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CBlock>(), [](const CBlock& block) {\n+            std::set<uint256> hashes;\n+            for (unsigned int i = 0; i < block.vtx.size(); i++) {\n+                //pretty naive to include every other txid in the merkle block\n+                //but this will work for now.\n+                if (i % 2 == 0) {\n+                    hashes.insert(block.vtx[i]->GetHash());\n+                }\n+            }\n+            return std::make_pair(CMerkleBlock(block, hashes), hashes);\n+        });\n+    };\n+};\n+\n+/** Returns [0,100) uint256s */\n+Gen<std::vector<uint256>> BetweenZeroAnd100()\n+{\n+    return gen::suchThat<std::vector<uint256>>([](const std::vector<uint256>& hashes) {\n+        return hashes.size() <= 100;\n+    });\n+}\n+/** Returns [1,100) uint256s */\n+Gen<std::vector<uint256>> Between1And100()\n+{\n+    return gen::suchThat(BetweenZeroAnd100(), [](const std::vector<uint256>& hashes) {\n+        return hashes.size() > 0 && hashes.size() <= 100;\n+    });\n+}\n+\n+/** Returns an arbitrary CMerkleBlock */\n+template <>\n+struct Arbitrary<CMerkleBlock> {\n+    static Gen<CMerkleBlock> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::pair<CMerkleBlock, std::set<uint256>>>(),\n+            [](const std::pair<const CMerkleBlock&, const std::set<uint256>&>& mb_with_txids) {\n+                const CMerkleBlock& mb = mb_with_txids.first;\n+                return mb;\n+            });\n+    };\n+};\n+\n+/** Generates a CPartialMerkleTree and returns the PartialMerkleTree along\n+   * with the txids that should be matched inside of it */\n+template <>\n+struct Arbitrary<std::pair<CPartialMerkleTree, std::vector<uint256>>> {\n+    static Gen<std::pair<CPartialMerkleTree, std::vector<uint256>>> arbitrary()\n+    {\n+        return gen::map(Between1And100(), [](const std::vector<uint256>& txids) {\n+            std::vector<bool> matches;\n+            std::vector<uint256> matched_txs;\n+            for (unsigned int i = 0; i < txids.size(); i++) {\n+                //pretty naive to include every other txid in the merkle block\n+                //but this will work for now.\n+                matches.push_back(i % 2 == 1);\n+                if (i % 2 == 1) {\n+                    matched_txs.push_back(txids[i]);\n+                }\n+            }\n+            return std::make_pair(CPartialMerkleTree(txids, matches), matched_txs);\n+        });\n+    };\n+};\n+\n+template <>\n+struct Arbitrary<CPartialMerkleTree> {\n+    static Gen<CPartialMerkleTree> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::pair<CPartialMerkleTree, std::vector<uint256>>>(),\n+            [](const std::pair<const CPartialMerkleTree&, const std::vector<uint256>&>& p) {\n+                return p.first;\n+            });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "945ece7b6d5b4eab5b69e2c3d15f4887815859b8",
        "filename": "src/test/gen/script_gen.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/script_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/script_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,88 @@\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n+#include \"base58.h\"\n+#include \"core_io.h\"\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Numeric.h>\n+\n+/** Generates a P2PK/CKey pair */\n+rc::Gen<SPKCKeyPair> P2PKSPK()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CKey>(), [](const CKey& key) {\n+        const CScript& s = GetScriptForRawPubKey(key.GetPubKey());\n+        std::vector<CKey> keys;\n+        keys.push_back(key);\n+        return std::make_pair(s, keys);\n+    });\n+}\n+/** Generates a P2PKH/CKey pair */\n+rc::Gen<SPKCKeyPair> P2PKHSPK()\n+{\n+    return rc::gen::map(rc::gen::arbitrary<CKey>(), [](const CKey& key) {\n+        CKeyID id = key.GetPubKey().GetID();\n+        std::vector<CKey> keys;\n+        keys.push_back(key);\n+        const CScript& s = GetScriptForDestination(id);\n+        return std::make_pair(s, keys);\n+    });\n+}\n+\n+/** Generates a MultiSigSPK/CKey(s) pair */\n+rc::Gen<SPKCKeyPair> MultisigSPK()\n+{\n+    return rc::gen::mapcat(MultisigKeys(), [](const std::vector<CKey>& keys) {\n+        return rc::gen::map(rc::gen::inRange<int>(1, keys.size()), [keys](int required_sigs) {\n+            std::vector<CPubKey> pub_keys;\n+            for (unsigned int i = 0; i < keys.size(); i++) {\n+                pub_keys.push_back(keys[i].GetPubKey());\n+            }\n+            const CScript& s = GetScriptForMultisig(required_sigs, pub_keys);\n+            return std::make_pair(s, keys);\n+        });\n+    });\n+}\n+\n+rc::Gen<SPKCKeyPair> RawSPK()\n+{\n+    return rc::gen::oneOf(P2PKSPK(), P2PKHSPK(), MultisigSPK(),\n+        P2WPKHSPK());\n+}\n+\n+/** Generates a P2SHSPK/CKey(s) */\n+rc::Gen<SPKCKeyPair> P2SHSPK()\n+{\n+    return rc::gen::map(RawSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        return std::make_pair(redeemScript, keys);\n+    });\n+}\n+\n+//witness SPKs\n+\n+rc::Gen<SPKCKeyPair> P2WPKHSPK()\n+{\n+    rc::Gen<SPKCKeyPair> spks = rc::gen::oneOf(P2PKSPK(), P2PKHSPK());\n+    return rc::gen::map(spks, [](const SPKCKeyPair& spk_keys) {\n+        const CScript& p2pk = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& wit_spk = GetScriptForWitness(p2pk);\n+        return std::make_pair(wit_spk, keys);\n+    });\n+}\n+\n+rc::Gen<SPKCKeyPair> P2WSHSPK()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& p2pk = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript& wit_spk = GetScriptForWitness(p2pk);\n+        return std::make_pair(wit_spk, keys);\n+    });\n+}"
      },
      {
        "sha": "cc2a4a852661ed71cb1501c96598ee4f176ccef3",
        "filename": "src/test/gen/script_gen.h",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/script_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/script_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,44 @@\n+#ifndef BITCOIN_TEST_GEN_SCRIPT_GEN_H\n+#define BITCOIN_TEST_GEN_SCRIPT_GEN_H\n+\n+#include \"script/script.h\"\n+#include \"key.h\"\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Container.h>\n+#include <rapidcheck/gen/Select.h>\n+\n+typedef std::pair<CScript, std::vector<CKey>> SPKCKeyPair;\n+\n+//non witness SPKs\n+rc::Gen<SPKCKeyPair> P2PKSPK();\n+\n+rc::Gen<SPKCKeyPair> P2PKHSPK();\n+\n+rc::Gen<SPKCKeyPair> MultisigSPK();\n+\n+/** Generates a non-P2SH/P2WSH spk */\n+rc::Gen<SPKCKeyPair> RawSPK();\n+\n+rc::Gen<SPKCKeyPair> P2SHSPK();\n+\n+//witness spks\n+\n+rc::Gen<SPKCKeyPair> P2WPKHSPK();\n+\n+rc::Gen<SPKCKeyPair> P2WSHSPK();\n+\n+namespace rc\n+{\n+template <>\n+struct Arbitrary<CScript> {\n+    static Gen<CScript> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<std::vector<unsigned char>>(), [](std::vector<unsigned char> script) {\n+            return CScript(script);\n+        });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "79edfc8b5e819f4e93c928d7bf7cf22bd4233ac4",
        "filename": "src/test/gen/transaction_gen.cpp",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/transaction_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/transaction_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,133 @@\n+#include \"test/gen/transaction_gen.h\"\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"script/sign.h\"\n+#include \"script/script.h\"\n+#include \"primitives/transaction.h\"\n+#include \"core_io.h\"\n+#include \"keystore.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Select.h>\n+\n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey, int nValue = 0)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = nValue;\n+\n+    return txCredit;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScriptWitness& scriptWitness, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vin[0].scriptWitness = scriptWitness;\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout.resize(1);\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n+\n+    return txSpend;\n+}\n+\n+/** Helper function to generate a tx that spends a spk */\n+SpendingInfo sign(const SPKCKeyPair& spk_keys, const CScript& redeemScript = CScript())\n+{\n+    const unsigned int inputIndex = 0;\n+    const CAmount nValue = 0;\n+    const CScript& spk = spk_keys.first;\n+    const std::vector<CKey>& keys = spk_keys.second;\n+    CBasicKeyStore store;\n+    for (const auto k : keys) {\n+        store.AddKey(k);\n+    }\n+    //add redeem script\n+    store.AddCScript(redeemScript);\n+    CMutableTransaction creditingTx = BuildCreditingTransaction(spk, nValue);\n+    CMutableTransaction spendingTx = BuildSpendingTransaction(CScript(), CScriptWitness(), creditingTx);\n+    SignatureData sigdata;\n+    MutableTransactionSignatureCreator creator(&spendingTx, inputIndex, 0);\n+    const SigningProvider& sp = store;\n+    assert(ProduceSignature(sp, creator, spk, sigdata));\n+    UpdateInput(spendingTx.vin[0], sigdata);\n+    const CTxOut& output = creditingTx.vout[0];\n+    const CTransaction finalTx = CTransaction(spendingTx);\n+    SpendingInfo tup = std::make_tuple(output, finalTx, inputIndex);\n+    return tup;\n+}\n+\n+/** A signed tx that validly spends a P2PKSPK */\n+rc::Gen<SpendingInfo> SignedP2PKTx()\n+{\n+    return rc::gen::map(P2PKSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2PKHTx()\n+{\n+    return rc::gen::map(P2PKHSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedMultisigTx()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_key) {\n+        return sign(spk_key);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2SHTx()\n+{\n+    return rc::gen::map(RawSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        //hash the spk\n+        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        return sign(std::make_pair(p2sh, keys), redeemScript);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2WPKHTx()\n+{\n+    return rc::gen::map(P2WPKHSPK(), [](const SPKCKeyPair& spk_keys) {\n+        return sign(spk_keys);\n+    });\n+}\n+\n+rc::Gen<SpendingInfo> SignedP2WSHTx()\n+{\n+    return rc::gen::map(MultisigSPK(), [](const SPKCKeyPair& spk_keys) {\n+        const CScript& redeemScript = spk_keys.first;\n+        const std::vector<CKey>& keys = spk_keys.second;\n+        const CScript p2wsh = GetScriptForWitness(redeemScript);\n+        return sign(std::make_pair(p2wsh, keys), redeemScript);\n+    });\n+}\n+\n+/** Generates an arbitrary validly signed tx */\n+rc::Gen<SpendingInfo> SignedTx()\n+{\n+    return rc::gen::oneOf(SignedP2PKTx(), SignedP2PKHTx(),\n+        SignedMultisigTx(), SignedP2SHTx(), SignedP2WPKHTx(),\n+        SignedP2WSHTx());\n+}"
      },
      {
        "sha": "2072d6a481c294f56ced4a124bd2a46c4f9f9bba",
        "filename": "src/test/gen/transaction_gen.h",
        "status": "added",
        "additions": 124,
        "deletions": 0,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/transaction_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/gen/transaction_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.h?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,124 @@\n+#ifndef BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n+#define BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n+\n+#include \"test/gen/crypto_gen.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+#include \"script/script.h\"\n+#include \"primitives/transaction.h\"\n+#include \"amount.h\"\n+\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Predicate.h>\n+\n+typedef std::tuple<const CTxOut, const CTransaction, const int> SpendingInfo;\n+/** A signed tx that validly spends a P2PKSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2PKTx();\n+\n+/** A signed tx that validly spends a P2PKHSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2PKHTx();\n+\n+/** A signed tx that validly spends a MultisigSPK and the input index */\n+rc::Gen<SpendingInfo> SignedMultisigTx();\n+\n+/** A signed tx that validly spends a P2SHSPK and the input index */\n+rc::Gen<SpendingInfo> SignedP2SHTx();\n+\n+/** A signed tx that validly spends a P2WPKH and the input index */\n+rc::Gen<SpendingInfo> SignedP2WPKHTx();\n+\n+/** A signed tx that validly spends a P2WSH output and the input index */\n+rc::Gen<SpendingInfo> SignedP2WSHTx();\n+\n+/** Generates a arbitrary validly signed tx */\n+rc::Gen<SpendingInfo> SignedTx();\n+\n+namespace rc\n+{\n+/** Generator for a COutPoint */\n+template <>\n+struct Arbitrary<COutPoint> {\n+    static Gen<COutPoint> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<uint256>(), gen::arbitrary<uint32_t>()), [](std::tuple<uint256, uint32_t> outPointPrimitives) {\n+            uint32_t nIn;\n+            uint256 nHashIn;\n+            std::tie(nHashIn, nIn) = outPointPrimitives;\n+            return COutPoint(nHashIn, nIn);\n+        });\n+    };\n+};\n+\n+/** Generator for a CTxIn */\n+template <>\n+struct Arbitrary<CTxIn> {\n+    static Gen<CTxIn> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<COutPoint>(), gen::arbitrary<CScript>(), gen::arbitrary<uint32_t>()), [](const std::tuple<const COutPoint&, const CScript&, uint32_t>& primitives) {\n+            COutPoint outpoint;\n+            CScript script;\n+            uint32_t sequence;\n+            std::tie(outpoint, script, sequence) = primitives;\n+            return CTxIn(outpoint, script, sequence);\n+        });\n+    };\n+};\n+\n+/** Generator for a CAmount */\n+template <>\n+struct Arbitrary<CAmount> {\n+    static Gen<CAmount> arbitrary()\n+    {\n+        //why doesn't this generator call work? It seems to cause an infinite loop.\n+        //return gen::arbitrary<int64_t>();\n+        return gen::inRange<int64_t>(std::numeric_limits<int64_t>::min(), std::numeric_limits<int64_t>::max());\n+    };\n+};\n+\n+/** Generator for CTxOut */\n+template <>\n+struct Arbitrary<CTxOut> {\n+    static Gen<CTxOut> arbitrary()\n+    {\n+        return gen::map(gen::pair(gen::arbitrary<CAmount>(), gen::arbitrary<CScript>()), [](const std::pair<CAmount, CScript>& primitives) {\n+            return CTxOut(primitives.first, primitives.second);\n+        });\n+    };\n+};\n+\n+/** Generator for a CTransaction */\n+template <>\n+struct Arbitrary<CTransaction> {\n+    static Gen<CTransaction> arbitrary()\n+    {\n+        return gen::map(gen::tuple(gen::arbitrary<int32_t>(),\n+                            gen::nonEmpty<std::vector<CTxIn>>(), gen::nonEmpty<std::vector<CTxOut>>(), gen::arbitrary<uint32_t>()),\n+            [](const std::tuple<int32_t, const std::vector<CTxIn>&, const std::vector<CTxOut>&, uint32_t>& primitives) {\n+                CMutableTransaction tx;\n+                int32_t nVersion;\n+                std::vector<CTxIn> vin;\n+                std::vector<CTxOut> vout;\n+                uint32_t locktime;\n+                std::tie(nVersion, vin, vout, locktime) = primitives;\n+                tx.nVersion = nVersion;\n+                tx.vin = vin;\n+                tx.vout = vout;\n+                tx.nLockTime = locktime;\n+                return CTransaction(tx);\n+            });\n+    };\n+};\n+\n+/** Generator for a CTransactionRef */\n+template <>\n+struct Arbitrary<CTransactionRef> {\n+    static Gen<CTransactionRef> arbitrary()\n+    {\n+        return gen::map(gen::arbitrary<CTransaction>(), [](const CTransaction& tx) {\n+            return MakeTransactionRef(tx);\n+        });\n+    };\n+};\n+} //namespace rc\n+#endif"
      },
      {
        "sha": "da9274b4adcc1901bc5255fc32625aa41cb87499",
        "filename": "src/test/key_properties.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -7,13 +7,14 @@\n #include <util/system.h>\n #include <test/setup_common.h>\n #include <vector>\n-\n #include <boost/test/unit_test.hpp>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n \n-#include <test/gen/crypto_gen.h>\n+\n+#include <key_io.h>\n+#include \"test/gen/crypto_gen.h\"\n \n BOOST_FIXTURE_TEST_SUITE(key_properties, BasicTestingSetup)\n \n@@ -30,6 +31,14 @@ RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))\n     RC_ASSERT(key.VerifyPubKey(pubKey));\n }\n \n+/** Serialization symmetry CKey -> CBitcoinSecret -> CKey */\n+RC_BOOST_PROP(key_bitcoinsecret_symmetry, (const CKey& key))\n+{\n+    std::string secret = EncodeSecret(key);\n+    CKey decode = DecodeSecret(secret);\n+    RC_ASSERT(decode == key);\n+}\n+\n /** Create a CKey using the 'Set' function must give us the same key */\n RC_BOOST_PROP(key_set_symmetry, (const CKey& key))\n {"
      },
      {
        "sha": "39240d6e0b64a7059d5a67f7cf9fbadc89eb42a8",
        "filename": "src/test/merkleblock_properties.cpp",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/merkleblock_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/merkleblock_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,61 @@\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"merkleblock.h\"\n+#include \"test/gen/merkleblock_gen.h\"\n+\n+#include <iostream>\n+BOOST_FIXTURE_TEST_SUITE(merkleblock_properties, BasicTestingSetup)\n+\n+RC_BOOST_PROP(merkleblock_serialization_symmetry, (const CMerkleBlock& mb))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mb;\n+    CMerkleBlock mb2;\n+    ss >> mb2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << mb;\n+    ss1 << mb2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+/** Should find all txids we inserted in the merkle block */\n+RC_BOOST_PROP(merkle_block_match_symmetry, (std::pair<CMerkleBlock, std::set<uint256>> p))\n+{\n+    const CMerkleBlock& mb = p.first;\n+    const std::set<uint256>& inserted_hashes = p.second;\n+    for (unsigned int i = 0; i < mb.vMatchedTxn.size(); i++) {\n+        const auto& h = mb.vMatchedTxn[i].second;\n+        RC_ASSERT(inserted_hashes.find(h) != inserted_hashes.end());\n+    }\n+}\n+\n+RC_BOOST_PROP(partialmerkletree_serialization_symmetry, (const CPartialMerkleTree& tree))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tree;\n+    CPartialMerkleTree tree2;\n+    ss >> tree2;\n+    CDataStream ss1(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tree;\n+    ss1 << tree2;\n+    RC_ASSERT(ss.str() == ss1.str());\n+}\n+\n+\n+/** Should find all txids we inserted in the PartialMerkleTree */\n+RC_BOOST_PROP(partialmerkletree_extract_matches_symmetry, (std::pair<CPartialMerkleTree, std::vector<uint256>> p))\n+{\n+    CPartialMerkleTree& tree = p.first;\n+    const std::vector<uint256>& expectedMatches = p.second;\n+    std::vector<uint256> matches;\n+    std::vector<unsigned int> indices;\n+    tree.ExtractMatches(matches, indices);\n+    RC_ASSERT(matches == expectedMatches);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "8d929e351e1793b82ce70d8e5f1bd20c82112861",
        "filename": "src/test/script_properties.cpp",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/script_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/script_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,26 @@\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+#include \"script/script.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"test/gen/script_gen.h\"\n+\n+BOOST_FIXTURE_TEST_SUITE(script_properties, BasicTestingSetup)\n+\n+/** Check CScript serialization symmetry */\n+RC_BOOST_PROP(cscript_serialization_symmetry, (const CScript& script))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << static_cast<const CScriptBase&>(script);\n+    std::vector<unsigned char> deserialized;\n+    ss >> deserialized;\n+    CScript script2 = CScript(deserialized.begin(), deserialized.end());\n+    RC_ASSERT(script == script2);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "e9b456f86fd68cb98e5988d700e48c3771796140",
        "filename": "src/test/transaction_properties.cpp",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/transaction_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967/src/test/transaction_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_properties.cpp?ref=7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "patch": "@@ -0,0 +1,116 @@\n+\n+#include \"test/gen/transaction_gen.h\"\n+\n+#include \"key.h\"\n+#include \"base58.h\"\n+#include \"script/script.h\"\n+#include \"policy/policy.h\"\n+#include \"primitives/transaction.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"streams.h\"\n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <rapidcheck/boost_test.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n+#include <rapidcheck/Gen.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(transaction_properties, BasicTestingSetup)\n+/** Helper function to run a SpendingInfo through the interpreter to check\n+  * validity of the transaction spending a spk */\n+bool run(SpendingInfo info)\n+{\n+    const CTxOut output = std::get<0>(info);\n+    const CTransaction tx = std::get<1>(info);\n+    const int input_idx = std::get<2>(info);\n+    const CTxIn input = tx.vin[input_idx];\n+    const CScript scriptSig = input.scriptSig;\n+    TransactionSignatureChecker checker(&tx, input_idx, output.nValue);\n+    const CScriptWitness wit = input.scriptWitness;\n+    //run it through the interpreter\n+    bool result = VerifyScript(scriptSig, output.scriptPubKey,\n+        &wit, STANDARD_SCRIPT_VERIFY_FLAGS, checker);\n+    return result;\n+}\n+/** Check COutpoint serialization symmetry */\n+RC_BOOST_PROP(outpoint_serialization_symmetry, (const COutPoint& outpoint))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << outpoint;\n+    COutPoint outpoint2;\n+    ss >> outpoint2;\n+    RC_ASSERT(outpoint2 == outpoint);\n+}\n+/** Check CTxIn serialization symmetry */\n+RC_BOOST_PROP(ctxin_serialization_symmetry, (const CTxIn& txin))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << txin;\n+    CTxIn txin2;\n+    ss >> txin2;\n+    RC_ASSERT(txin == txin2);\n+}\n+\n+/** Check CTxOut serialization symmetry */\n+RC_BOOST_PROP(ctxout_serialization_symmetry, (const CTxOut& txout))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << txout;\n+    CTxOut txout2;\n+    ss >> txout2;\n+    RC_ASSERT(txout == txout2);\n+}\n+\n+/** Check CTransaction serialization symmetry */\n+RC_BOOST_PROP(ctransaction_serialization_symmetry, (const CTransaction& tx))\n+{\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << tx;\n+    CTransaction tx2(deserialize, ss);\n+    RC_ASSERT(tx == tx2);\n+}\n+\n+/** Check that we can spend a p2pk tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2pk_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2PKTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+/** Check that we can spend a p2pkh tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2pkh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2PKHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+/** Check that we can spend a multisig tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_multisig_tx, ())\n+{\n+    const SpendingInfo& info = *SignedMultisigTx();\n+    RC_ASSERT(run(info));\n+}\n+/** Check that we can spend a p2sh tx that ProduceSignature created */\n+RC_BOOST_PROP(spend_p2sh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2SHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+RC_BOOST_PROP(spend_p2wpkh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2WPKHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+RC_BOOST_PROP(spend_p2wsh_tx, ())\n+{\n+    const SpendingInfo& info = *SignedP2WSHTx();\n+    RC_ASSERT(run(info));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "92c08f56bfa3abd98d6c7493303c8093337cd122",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmMwOGY1NmJmYTNhYmQ5OGQ2Yzc0OTMzMDNjODA5MzMzN2NkMTIy",
    "commit": {
      "author": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2018-10-08T03:21:38Z"
      },
      "committer": {
        "name": "Chris Stewart",
        "email": "stewart.chris1234@gmail.com",
        "date": "2019-08-19T18:59:52Z"
      },
      "message": "try to make linter happy\n\nfix typo in Makefile.test.include\n\nrebase and redo imports\n\nRebase onto master, fix compile erros with various API changes in master, address nits\n\nRun clang-format-diff.py\n\nAdd missing copyright header",
      "tree": {
        "sha": "264f23d3a72786518d28fe54e0552c1b723756b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/264f23d3a72786518d28fe54e0552c1b723756b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c08f56bfa3abd98d6c7493303c8093337cd122",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c08f56bfa3abd98d6c7493303c8093337cd122",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92c08f56bfa3abd98d6c7493303c8093337cd122",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c08f56bfa3abd98d6c7493303c8093337cd122/comments",
    "author": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Christewart",
      "id": 3514957,
      "node_id": "MDQ6VXNlcjM1MTQ5NTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3514957?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Christewart",
      "html_url": "https://github.com/Christewart",
      "followers_url": "https://api.github.com/users/Christewart/followers",
      "following_url": "https://api.github.com/users/Christewart/following{/other_user}",
      "gists_url": "https://api.github.com/users/Christewart/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Christewart/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Christewart/subscriptions",
      "organizations_url": "https://api.github.com/users/Christewart/orgs",
      "repos_url": "https://api.github.com/users/Christewart/repos",
      "events_url": "https://api.github.com/users/Christewart/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Christewart/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d1b670eb3da49ef31ac2f30e0cb1bd21db92967"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 140,
      "deletions": 104
    },
    "files": [
      {
        "sha": "a0ea49657df87c607cdf5c81e3c9e9d88569b3e8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -167,7 +167,7 @@ BITCOIN_TEST_SUITE += \\\n   test/gen/bloom_gen.h \\\n   test/gen/crypto_gen.cpp \\\n   test/gen/crypto_gen.h \\\n-  test/gen/merkle_block.h \\\n+  test/gen/merkleblock_gen.h \\\n   test/gen/script_gen.cpp \\\n   test/gen/script_gen.h \\\n   test/gen/transaction_gen.cpp \\"
      },
      {
        "sha": "ecf8ad8b1e8272e394b56ad7744542d056378153",
        "filename": "src/test/block_properties.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/block_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/block_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/block_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,11 +1,15 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include <boost/test/unit_test.hpp>\n+#include <rapidcheck/Gen.h>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n \n-#include \"test/test_bitcoin.h\"\n-#include \"primitives/block.h\"\n-#include \"test/gen/block_gen.h\"\n+#include <primitives/block.h>\n+#include <streams.h>\n+#include <test/gen/block_gen.h>\n+#include <test/setup_common.h>\n \n \n BOOST_FIXTURE_TEST_SUITE(block_properties, BasicTestingSetup)"
      },
      {
        "sha": "e2add9c27384f69195ed9918618fd5c2d5f935b3",
        "filename": "src/test/bloom_properties.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/bloom_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/bloom_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,16 +1,17 @@\n-// Copyright (c) 2012-2016 The Bitcoin Core developers\n+// Copyright (c) 2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include \"test/gen/bloom_gen.h\"\n-#include \"test/gen/crypto_gen.h\"\n+#include <test/gen/bloom_gen.h>\n+#include <test/gen/crypto_gen.h>\n \n-#include \"test/test_bitcoin.h\"\n+#include <test/setup_common.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <rapidcheck/Gen.h>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n \n+#include <streams.h>\n \n BOOST_FIXTURE_TEST_SUITE(bloom_properties, BasicTestingSetup)\n "
      },
      {
        "sha": "edfe234930d79c2bf7cac436fcf42f7212c4c504",
        "filename": "src/test/gen/block_gen.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/block_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/block_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,4 +1,7 @@\n-#include \"test/gen/block_gen.h\"\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/block_gen.h>\n \n #include <rapidcheck/Gen.h>\n "
      },
      {
        "sha": "e0fbb26d108d1f65f244e42f86a73718c3a3a47e",
        "filename": "src/test/gen/block_gen.h",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/block_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/block_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/block_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,22 +1,24 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_BLOCK_GEN_H\n #define BITCOIN_TEST_GEN_BLOCK_GEN_H\n \n-#include \"test/gen/crypto_gen.h\"\n-#include \"test/gen/transaction_gen.h\"\n-#include \"uint256.h\"\n-#include \"primitives/block.h\"\n+#include <primitives/block.h>\n+#include <test/gen/crypto_gen.h>\n+#include <test/gen/transaction_gen.h>\n+#include <uint256.h>\n \n-#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n \n \n-typedef std::tuple<int32_t, uint256, uint256, uint32_t, uint32_t, uint32_t> BlockHeaderTup;\n+using BlockHeaderTup = std::tuple<int32_t, uint256, uint256, uint32_t, uint32_t, uint32_t>;\n \n /** Generator for the primitives of a block header */\n rc::Gen<BlockHeaderTup> BlockHeaderPrimitives();\n \n-namespace rc\n-{\n+namespace rc {\n /** Generator for a new CBlockHeader */\n template <>\n struct Arbitrary<CBlockHeader> {\n@@ -54,5 +56,5 @@ struct Arbitrary<CBlock> {\n         });\n     }\n };\n-} //namespace rc\n+} // namespace rc\n #endif"
      },
      {
        "sha": "190ce5ff6a36c06a5e80d2db7e3d1dea23440cb4",
        "filename": "src/test/gen/bloom_gen.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/bloom_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/bloom_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,15 +1,18 @@\n-#include \"test/gen/bloom_gen.h\"\n-#include \"test/gen/crypto_gen.h\"\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/bloom_gen.h>\n+#include <test/gen/crypto_gen.h>\n \n-#include \"bloom.h\"\n+#include <bloom.h>\n #include <math.h>\n \n-#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n-#include <rapidcheck/gen/Tuple.h>\n-#include <rapidcheck/gen/Predicate.h>\n-#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/gen/Container.h>\n+#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Tuple.h>\n \n /** Generates a double between [0,1) */\n rc::Gen<double> BetweenZeroAndOne()"
      },
      {
        "sha": "e569ed7ac4de5310fe1d9c375a81f30a8b8c4e8e",
        "filename": "src/test/gen/bloom_gen.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/bloom_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/bloom_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/bloom_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,8 +1,11 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_BLOOM_GEN_H\n #define BITCOIN_TEST_GEN_BLOOM_GEN_H\n \n-#include \"bloom.h\"\n-#include \"merkleblock.h\"\n+#include <bloom.h>\n+#include <merkleblock.h>\n \n #include <math.h>\n \n@@ -14,8 +17,7 @@ rc::Gen<double> BetweenZeroAndOne();\n \n rc::Gen<std::tuple<unsigned int, double, unsigned int, unsigned int>> BloomFilterPrimitives();\n \n-namespace rc\n-{\n+namespace rc {\n /** Generator for a new CBloomFilter*/\n template <>\n struct Arbitrary<CBloomFilter> {"
      },
      {
        "sha": "77ea23804b47152b1b053bb044e02382d8caabcb",
        "filename": "src/test/gen/crypto_gen.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/crypto_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/crypto_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,6 +1,9 @@\n-#include \"test/gen/crypto_gen.h\"\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/crypto_gen.h>\n \n-#include \"key.h\"\n+#include <key.h>\n \n #include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>"
      },
      {
        "sha": "d1a93a26cd7307570a17ed3d1d0a71b07177bab7",
        "filename": "src/test/gen/crypto_gen.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/crypto_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/crypto_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,9 +1,12 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_CRYPTO_GEN_H\n #define BITCOIN_TEST_GEN_CRYPTO_GEN_H\n \n-#include \"key.h\"\n-#include \"random.h\"\n-#include \"uint256.h\"\n+#include <key.h>\n+#include <random.h>\n+#include <uint256.h>\n #include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n #include <rapidcheck/gen/Create.h>\n@@ -56,5 +59,5 @@ struct Arbitrary<uint256> {\n         return rc::gen::just(GetRandHash());\n     };\n };\n-} //namespace rc\n+} // namespace rc\n #endif"
      },
      {
        "sha": "0dc72a8874cdb040008c92b587a00fa58b317fb9",
        "filename": "src/test/gen/merkleblock_gen.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/merkleblock_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/merkleblock_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/merkleblock_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,15 +1,17 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n #define BITCOIN_TEST_GEN_MERKLEBLOCK_GEN_H\n \n-#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n \n-#include \"merkleblock.h\"\n-#include \"test/gen/block_gen.h\"\n+#include <merkleblock.h>\n+#include <test/gen/block_gen.h>\n \n #include <iostream>\n-namespace rc\n-{\n+namespace rc {\n /** Returns a CMerkleblock with the hashes that match inside of the CPartialMerkleTree */\n template <>\n struct Arbitrary<std::pair<CMerkleBlock, std::set<uint256>>> {\n@@ -89,5 +91,5 @@ struct Arbitrary<CPartialMerkleTree> {\n             });\n     };\n };\n-} //namespace rc\n+} // namespace rc\n #endif"
      },
      {
        "sha": "3d56c28ad082d0b0dab2346f65eb1b9bbe6fe497",
        "filename": "src/test/gen/script_gen.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/script_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/script_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,14 +1,17 @@\n-#include \"test/gen/script_gen.h\"\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/script_gen.h>\n \n-#include \"test/gen/crypto_gen.h\"\n-#include \"script/script.h\"\n-#include \"script/standard.h\"\n-#include \"base58.h\"\n-#include \"core_io.h\"\n-#include <rapidcheck/gen/Arbitrary.h>\n+#include <base58.h>\n+#include <core_io.h>\n #include <rapidcheck/Gen.h>\n-#include <rapidcheck/gen/Predicate.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Predicate.h>\n+#include <script/script.h>\n+#include <script/standard.h>\n+#include <test/gen/crypto_gen.h>\n \n /** Generates a P2PK/CKey pair */\n rc::Gen<SPKCKeyPair> P2PKSPK()\n@@ -24,7 +27,7 @@ rc::Gen<SPKCKeyPair> P2PKSPK()\n rc::Gen<SPKCKeyPair> P2PKHSPK()\n {\n     return rc::gen::map(rc::gen::arbitrary<CKey>(), [](const CKey& key) {\n-        CKeyID id = key.GetPubKey().GetID();\n+        PKHash id = PKHash(key.GetPubKey());\n         std::vector<CKey> keys;\n         keys.push_back(key);\n         const CScript& s = GetScriptForDestination(id);\n@@ -59,7 +62,7 @@ rc::Gen<SPKCKeyPair> P2SHSPK()\n     return rc::gen::map(RawSPK(), [](const SPKCKeyPair& spk_keys) {\n         const CScript& redeemScript = spk_keys.first;\n         const std::vector<CKey>& keys = spk_keys.second;\n-        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        const CScript& p2sh = GetScriptForDestination(ScriptHash(redeemScript));\n         return std::make_pair(redeemScript, keys);\n     });\n }"
      },
      {
        "sha": "b080c4ea2340589dd1fd42b4250482be413bf61f",
        "filename": "src/test/gen/script_gen.h",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/script_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/script_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/script_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,15 +1,18 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_SCRIPT_GEN_H\n #define BITCOIN_TEST_GEN_SCRIPT_GEN_H\n \n-#include \"script/script.h\"\n-#include \"key.h\"\n-#include <rapidcheck/gen/Arbitrary.h>\n+#include <key.h>\n #include <rapidcheck/Gen.h>\n-#include <rapidcheck/gen/Numeric.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/gen/Container.h>\n+#include <rapidcheck/gen/Numeric.h>\n #include <rapidcheck/gen/Select.h>\n+#include <script/script.h>\n \n-typedef std::pair<CScript, std::vector<CKey>> SPKCKeyPair;\n+using SPKCKeyPair = std::pair<CScript, std::vector<CKey>>;\n \n //non witness SPKs\n rc::Gen<SPKCKeyPair> P2PKSPK();\n@@ -29,16 +32,15 @@ rc::Gen<SPKCKeyPair> P2WPKHSPK();\n \n rc::Gen<SPKCKeyPair> P2WSHSPK();\n \n-namespace rc\n-{\n+namespace rc {\n template <>\n struct Arbitrary<CScript> {\n     static Gen<CScript> arbitrary()\n     {\n         return gen::map(gen::arbitrary<std::vector<unsigned char>>(), [](std::vector<unsigned char> script) {\n-            return CScript(script);\n+            return CScript(script.begin(), script.end());\n         });\n     };\n };\n-} //namespace rc\n+} // namespace rc\n #endif"
      },
      {
        "sha": "c6948fc7ca24be1d8293a4de622687d742c504ae",
        "filename": "src/test/gen/transaction_gen.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/transaction_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/transaction_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,16 +1,19 @@\n-#include \"test/gen/transaction_gen.h\"\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include <test/gen/transaction_gen.h>\n \n-#include \"test/gen/crypto_gen.h\"\n-#include \"test/gen/script_gen.h\"\n+#include <test/gen/crypto_gen.h>\n+#include <test/gen/script_gen.h>\n \n-#include \"script/sign.h\"\n-#include \"script/script.h\"\n-#include \"primitives/transaction.h\"\n-#include \"core_io.h\"\n-#include \"keystore.h\"\n+#include <core_io.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <script/sign.h>\n+#include <wallet/wallet.h>\n \n-#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/gen/Predicate.h>\n #include <rapidcheck/gen/Select.h>\n \n@@ -55,7 +58,7 @@ SpendingInfo sign(const SPKCKeyPair& spk_keys, const CScript& redeemScript = CSc\n     const CAmount nValue = 0;\n     const CScript& spk = spk_keys.first;\n     const std::vector<CKey>& keys = spk_keys.second;\n-    CBasicKeyStore store;\n+    FillableSigningProvider store;\n     for (const auto k : keys) {\n         store.AddKey(k);\n     }\n@@ -102,7 +105,7 @@ rc::Gen<SpendingInfo> SignedP2SHTx()\n         const CScript& redeemScript = spk_keys.first;\n         const std::vector<CKey>& keys = spk_keys.second;\n         //hash the spk\n-        const CScript& p2sh = GetScriptForDestination(CScriptID(redeemScript));\n+        const CScript& p2sh = GetScriptForDestination(ScriptHash(redeemScript));\n         return sign(std::make_pair(p2sh, keys), redeemScript);\n     });\n }"
      },
      {
        "sha": "1583f930f7e25a0fb7cc4546bded71191b5af3e4",
        "filename": "src/test/gen/transaction_gen.h",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/transaction_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/gen/transaction_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/transaction_gen.h?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,18 +1,22 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n #define BITCOIN_TEST_GEN_TRANSACTION_GEN_H\n \n-#include \"test/gen/crypto_gen.h\"\n-#include \"test/gen/script_gen.h\"\n+#include <test/gen/crypto_gen.h>\n+#include <test/gen/script_gen.h>\n \n-#include \"script/script.h\"\n-#include \"primitives/transaction.h\"\n-#include \"amount.h\"\n+#include <amount.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n \n-#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/Gen.h>\n+#include <rapidcheck/gen/Arbitrary.h>\n #include <rapidcheck/gen/Predicate.h>\n \n-typedef std::tuple<const CTxOut, const CTransaction, const int> SpendingInfo;\n+using SpendingInfo = std::tuple<const CTxOut, const CTransaction, const int>;\n+\n /** A signed tx that validly spends a P2PKSPK and the input index */\n rc::Gen<SpendingInfo> SignedP2PKTx();\n \n@@ -34,8 +38,7 @@ rc::Gen<SpendingInfo> SignedP2WSHTx();\n /** Generates a arbitrary validly signed tx */\n rc::Gen<SpendingInfo> SignedTx();\n \n-namespace rc\n-{\n+namespace rc {\n /** Generator for a COutPoint */\n template <>\n struct Arbitrary<COutPoint> {\n@@ -120,5 +123,5 @@ struct Arbitrary<CTransactionRef> {\n         });\n     };\n };\n-} //namespace rc\n+} // namespace rc\n #endif"
      },
      {
        "sha": "699d196c55ff42425a78410526ab9e104645cec1",
        "filename": "src/test/key_properties.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -14,7 +14,7 @@\n \n \n #include <key_io.h>\n-#include \"test/gen/crypto_gen.h\"\n+#include <test/gen/crypto_gen.h>\n \n BOOST_FIXTURE_TEST_SUITE(key_properties, BasicTestingSetup)\n "
      },
      {
        "sha": "13d9b37c8845126ca3daf00312f6cccb755bd3d9",
        "filename": "src/test/merkleblock_properties.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/merkleblock_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/merkleblock_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,14 +1,15 @@\n-#include \"test/test_bitcoin.h\"\n+#include <test/setup_common.h>\n \n #include <boost/test/unit_test.hpp>\n+#include <rapidcheck/Gen.h>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n \n-#include \"merkleblock.h\"\n-#include \"test/gen/merkleblock_gen.h\"\n+#include <merkleblock.h>\n+#include <test/gen/merkleblock_gen.h>\n \n #include <iostream>\n+#include <streams.h>\n BOOST_FIXTURE_TEST_SUITE(merkleblock_properties, BasicTestingSetup)\n \n RC_BOOST_PROP(merkleblock_serialization_symmetry, (const CMerkleBlock& mb))"
      },
      {
        "sha": "55eb5227d9a6014342b1bdf947c2155ea9011ef6",
        "filename": "src/test/script_properties.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/script_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/script_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -2,13 +2,15 @@\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n+#include <rapidcheck/Gen.h>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n \n-#include \"script/script.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"test/gen/script_gen.h\"\n+#include <script/script.h>\n+#include <test/gen/script_gen.h>\n+#include <test/setup_common.h>\n+\n+#include <streams.h>\n \n BOOST_FIXTURE_TEST_SUITE(script_properties, BasicTestingSetup)\n "
      },
      {
        "sha": "7407b99b74753866bb31b8a59ac4a88680f8a3dd",
        "filename": "src/test/transaction_properties.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/transaction_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c08f56bfa3abd98d6c7493303c8093337cd122/src/test/transaction_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_properties.cpp?ref=92c08f56bfa3abd98d6c7493303c8093337cd122",
        "patch": "@@ -1,23 +1,22 @@\n \n-#include \"test/gen/transaction_gen.h\"\n+#include <test/gen/transaction_gen.h>\n \n-#include \"key.h\"\n-#include \"base58.h\"\n-#include \"script/script.h\"\n-#include \"policy/policy.h\"\n-#include \"primitives/transaction.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"streams.h\"\n+#include <base58.h>\n+#include <key.h>\n+#include <policy/policy.h>\n+#include <primitives/transaction.h>\n+#include <script/script.h>\n+#include <streams.h>\n #include <string>\n+#include <test/setup_common.h>\n+#include <uint256.h>\n+#include <util/strencodings.h>\n #include <vector>\n \n #include <boost/test/unit_test.hpp>\n+#include <rapidcheck/Gen.h>\n #include <rapidcheck/boost_test.h>\n #include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n \n BOOST_FIXTURE_TEST_SUITE(transaction_properties, BasicTestingSetup)\n /** Helper function to run a SpendingInfo through the interpreter to check"
      }
    ]
  }
]