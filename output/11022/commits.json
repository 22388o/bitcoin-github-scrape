[
  {
    "sha": "cab8557e3504c4b93796a7e196b288ffd061b9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWI4NTU3ZTM1MDRjNGI5Mzc5NmE3ZTE5NmIyODhmZmQwNjFiOWI0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-04-20T12:23:48Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-02T21:31:35Z"
      },
      "message": "[wallet] [moveonly] Move CAffectedKeysVisitor",
      "tree": {
        "sha": "a0570b8c1a9002bc641805caa53d995928b3f606",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0570b8c1a9002bc641805caa53d995928b3f606"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cab8557e3504c4b93796a7e196b288ffd061b9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8557e3504c4b93796a7e196b288ffd061b9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cab8557e3504c4b93796a7e196b288ffd061b9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8557e3504c4b93796a7e196b288ffd061b9b4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "659c096134080034b5a5cdce4bdd8cae91632f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/659c096134080034b5a5cdce4bdd8cae91632f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/659c096134080034b5a5cdce4bdd8cae91632f63"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 32,
      "deletions": 32
    },
    "files": [
      {
        "sha": "38f527faf4fcc9d0f25f3be4357cf12107952743",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 32,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cab8557e3504c4b93796a7e196b288ffd061b9b4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cab8557e3504c4b93796a7e196b288ffd061b9b4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cab8557e3504c4b93796a7e196b288ffd061b9b4",
        "patch": "@@ -80,6 +80,38 @@ std::string COutput::ToString() const\n     return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n }\n \n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            for (const CTxDestination &dest : vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n const CWalletTx* CWallet::GetWalletTx(const uint256& hash) const\n {\n     LOCK(cs_wallet);\n@@ -3629,38 +3661,6 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-class CAffectedKeysVisitor : public boost::static_visitor<void> {\n-private:\n-    const CKeyStore &keystore;\n-    std::vector<CKeyID> &vKeys;\n-\n-public:\n-    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n-\n-    void Process(const CScript &script) {\n-        txnouttype type;\n-        std::vector<CTxDestination> vDest;\n-        int nRequired;\n-        if (ExtractDestinations(script, type, vDest, nRequired)) {\n-            for (const CTxDestination &dest : vDest)\n-                boost::apply_visitor(*this, dest);\n-        }\n-    }\n-\n-    void operator()(const CKeyID &keyId) {\n-        if (keystore.HaveKey(keyId))\n-            vKeys.push_back(keyId);\n-    }\n-\n-    void operator()(const CScriptID &scriptId) {\n-        CScript script;\n-        if (keystore.GetCScript(scriptId, script))\n-            Process(script);\n-    }\n-\n-    void operator()(const CNoDestination &none) {}\n-};\n-\n void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     mapKeyBirth.clear();"
      }
    ]
  },
  {
    "sha": "2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzc2YmZjZjI0YTgzYzYxZTliYmE5ZTEyYmMwZmQwYjA0NGJkZmMx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-26T20:37:15Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-02T21:31:35Z"
      },
      "message": "[wallet] [moveonly] Move LoadKeyPool to cpp",
      "tree": {
        "sha": "f1bb6b09bf2ea300084addc7ef614a0e6da43cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1bb6b09bf2ea300084addc7ef614a0e6da43cd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cab8557e3504c4b93796a7e196b288ffd061b9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab8557e3504c4b93796a7e196b288ffd061b9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cab8557e3504c4b93796a7e196b288ffd061b9b4"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2ef3299c272e25829f9729ede80616f18c6b5141",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
        "patch": "@@ -3240,6 +3240,23 @@ size_t CWallet::KeypoolCountExternalKeys()\n     return setExternalKeyPool.size();\n }\n \n+void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n+{\n+    if (keypool.fInternal) {\n+        setInternalKeyPool.insert(nIndex);\n+    } else {\n+        setExternalKeyPool.insert(nIndex);\n+    }\n+    m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n+\n+    // If no metadata exists yet, create a default with the pool key's\n+    // creation time. Note that this may be overwritten by actually\n+    // stored metadata for that key later, which is fine.\n+    CKeyID keyid = keypool.vchPubKey.GetID();\n+    if (mapKeyMetadata.count(keyid) == 0)\n+        mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n+}\n+\n bool CWallet::TopUpKeyPool(unsigned int kpSize)\n {\n     {"
      },
      {
        "sha": "631cfad5b6afec6b7da9f6f09a22154b9a567664",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
        "patch": "@@ -746,22 +746,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n-    {\n-        if (keypool.fInternal) {\n-            setInternalKeyPool.insert(nIndex);\n-        } else {\n-            setExternalKeyPool.insert(nIndex);\n-        }\n-        m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n-\n-        // If no metadata exists yet, create a default with the pool key's\n-        // creation time. Note that this may be overwritten by actually\n-        // stored metadata for that key later, which is fine.\n-        CKeyID keyid = keypool.vchPubKey.GetID();\n-        if (mapKeyMetadata.count(keyid) == 0)\n-            mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n-    }\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n \n     // Map from Key ID (for regular keys) or Script ID (for watch-only keys) to\n     // key metadata."
      }
    ]
  },
  {
    "sha": "83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2YxZWMzM2NlZmYxMjQ1YTQ0YTI0YWE4YTI4NDBlMWZkNDNlNDMx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-24T15:24:12Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-02T21:31:35Z"
      },
      "message": "[wallet] Don't hold cs_LastBlockFile while calling setBestChain\n\ncs_LastBlockFile shouldn't be held while calling wallet functions.",
      "tree": {
        "sha": "0c01ad991bf004ce81b5f6c34dded0bfa5da0d62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c01ad991bf004ce81b5f6c34dded0bfa5da0d62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f1ec33ceff1245a44a24aa8a2840e1fd43e431/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2376bfcf24a83c61e9bba9e12bc0fd0b044bdfc1"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 84,
      "deletions": 79
    },
    "files": [
      {
        "sha": "5133d246482cdb14c35799571a2d2ef4c7697c5d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 79,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83f1ec33ceff1245a44a24aa8a2840e1fd43e431/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83f1ec33ceff1245a44a24aa8a2840e1fd43e431/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
        "patch": "@@ -1863,95 +1863,100 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n  */\n bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n     int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n-    LOCK2(cs_main, cs_LastBlockFile);\n+    LOCK(cs_main);\n     static int64_t nLastWrite = 0;\n     static int64_t nLastFlush = 0;\n     static int64_t nLastSetChain = 0;\n     std::set<int> setFilesToPrune;\n     bool fFlushForPrune = false;\n+    bool fDoFullFlush = false;\n+    int64_t nNow = 0;\n     try {\n-    if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n-        if (nManualPruneHeight > 0) {\n-            FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n-        } else {\n-            FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n-            fCheckForPruning = false;\n-        }\n-        if (!setFilesToPrune.empty()) {\n-            fFlushForPrune = true;\n-            if (!fHavePruned) {\n-                pblocktree->WriteFlag(\"prunedblockfiles\", true);\n-                fHavePruned = true;\n-            }\n-        }\n-    }\n-    int64_t nNow = GetTimeMicros();\n-    // Avoid writing/flushing immediately after startup.\n-    if (nLastWrite == 0) {\n-        nLastWrite = nNow;\n-    }\n-    if (nLastFlush == 0) {\n-        nLastFlush = nNow;\n-    }\n-    if (nLastSetChain == 0) {\n-        nLastSetChain = nNow;\n-    }\n-    int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-    int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n-    int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n-    // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n-    bool fCacheLarge = mode == FLUSH_STATE_PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);\n-    // The cache is over the limit, we have to write now.\n-    bool fCacheCritical = mode == FLUSH_STATE_IF_NEEDED && cacheSize > nTotalSpace;\n-    // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n-    bool fPeriodicWrite = mode == FLUSH_STATE_PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n-    // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage.\n-    bool fPeriodicFlush = mode == FLUSH_STATE_PERIODIC && nNow > nLastFlush + (int64_t)DATABASE_FLUSH_INTERVAL * 1000000;\n-    // Combine all conditions that result in a full cache flush.\n-    bool fDoFullFlush = (mode == FLUSH_STATE_ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n-    // Write blocks and block index to disk.\n-    if (fDoFullFlush || fPeriodicWrite) {\n-        // Depend on nMinDiskSpace to ensure we can write block index\n-        if (!CheckDiskSpace(0))\n-            return state.Error(\"out of disk space\");\n-        // First make sure all block and undo data is flushed to disk.\n-        FlushBlockFile();\n-        // Then update all block file information (which may refer to block and undo files).\n-        {\n-            std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n-            vFiles.reserve(setDirtyFileInfo.size());\n-            for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n-                vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n-                setDirtyFileInfo.erase(it++);\n+    {\n+        LOCK(cs_LastBlockFile);\n+        if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n+            if (nManualPruneHeight > 0) {\n+                FindFilesToPruneManual(setFilesToPrune, nManualPruneHeight);\n+            } else {\n+                FindFilesToPrune(setFilesToPrune, chainparams.PruneAfterHeight());\n+                fCheckForPruning = false;\n             }\n-            std::vector<const CBlockIndex*> vBlocks;\n-            vBlocks.reserve(setDirtyBlockIndex.size());\n-            for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n-                vBlocks.push_back(*it);\n-                setDirtyBlockIndex.erase(it++);\n+            if (!setFilesToPrune.empty()) {\n+                fFlushForPrune = true;\n+                if (!fHavePruned) {\n+                    pblocktree->WriteFlag(\"prunedblockfiles\", true);\n+                    fHavePruned = true;\n+                }\n             }\n-            if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n-                return AbortNode(state, \"Failed to write to block index database\");\n+        }\n+        nNow = GetTimeMicros();\n+        // Avoid writing/flushing immediately after startup.\n+        if (nLastWrite == 0) {\n+            nLastWrite = nNow;\n+        }\n+        if (nLastFlush == 0) {\n+            nLastFlush = nNow;\n+        }\n+        if (nLastSetChain == 0) {\n+            nLastSetChain = nNow;\n+        }\n+        int64_t nMempoolSizeMax = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+        int64_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n+        int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n+        // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n+        bool fCacheLarge = mode == FLUSH_STATE_PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);\n+        // The cache is over the limit, we have to write now.\n+        bool fCacheCritical = mode == FLUSH_STATE_IF_NEEDED && cacheSize > nTotalSpace;\n+        // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n+        bool fPeriodicWrite = mode == FLUSH_STATE_PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n+        // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage.\n+        bool fPeriodicFlush = mode == FLUSH_STATE_PERIODIC && nNow > nLastFlush + (int64_t)DATABASE_FLUSH_INTERVAL * 1000000;\n+        // Combine all conditions that result in a full cache flush.\n+        fDoFullFlush = (mode == FLUSH_STATE_ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n+        // Write blocks and block index to disk.\n+        if (fDoFullFlush || fPeriodicWrite) {\n+            // Depend on nMinDiskSpace to ensure we can write block index\n+            if (!CheckDiskSpace(0))\n+                return state.Error(\"out of disk space\");\n+            // First make sure all block and undo data is flushed to disk.\n+            FlushBlockFile();\n+            // Then update all block file information (which may refer to block and undo files).\n+            {\n+                std::vector<std::pair<int, const CBlockFileInfo*> > vFiles;\n+                vFiles.reserve(setDirtyFileInfo.size());\n+                for (std::set<int>::iterator it = setDirtyFileInfo.begin(); it != setDirtyFileInfo.end(); ) {\n+                    vFiles.push_back(std::make_pair(*it, &vinfoBlockFile[*it]));\n+                    setDirtyFileInfo.erase(it++);\n+                }\n+                std::vector<const CBlockIndex*> vBlocks;\n+                vBlocks.reserve(setDirtyBlockIndex.size());\n+                for (std::set<CBlockIndex*>::iterator it = setDirtyBlockIndex.begin(); it != setDirtyBlockIndex.end(); ) {\n+                    vBlocks.push_back(*it);\n+                    setDirtyBlockIndex.erase(it++);\n+                }\n+                if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n+                    return AbortNode(state, \"Failed to write to block index database\");\n+                }\n             }\n+            // Finally remove any pruned files\n+            if (fFlushForPrune)\n+                UnlinkPrunedFiles(setFilesToPrune);\n+            nLastWrite = nNow;\n+        }\n+        // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n+        if (fDoFullFlush) {\n+            // Typical Coin structures on disk are around 48 bytes in size.\n+            // Pushing a new one to the database can cause it to be written\n+            // twice (once in the log, and once in the tables). This is already\n+            // an overestimation, as most will delete an existing entry or\n+            // overwrite one. Still, use a conservative safety factor of 2.\n+            if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n+                return state.Error(\"out of disk space\");\n+            // Flush the chainstate (which may refer to block index entries).\n+            if (!pcoinsTip->Flush())\n+                return AbortNode(state, \"Failed to write to coin database\");\n+            nLastFlush = nNow;\n         }\n-        // Finally remove any pruned files\n-        if (fFlushForPrune)\n-            UnlinkPrunedFiles(setFilesToPrune);\n-        nLastWrite = nNow;\n-    }\n-    // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n-    if (fDoFullFlush) {\n-        // Typical Coin structures on disk are around 48 bytes in size.\n-        // Pushing a new one to the database can cause it to be written\n-        // twice (once in the log, and once in the tables). This is already\n-        // an overestimation, as most will delete an existing entry or\n-        // overwrite one. Still, use a conservative safety factor of 2.\n-        if (!CheckDiskSpace(48 * 2 * 2 * pcoinsTip->GetCacheSize()))\n-            return state.Error(\"out of disk space\");\n-        // Flush the chainstate (which may refer to block index entries).\n-        if (!pcoinsTip->Flush())\n-            return AbortNode(state, \"Failed to write to coin database\");\n-        nLastFlush = nNow;\n     }\n     if (fDoFullFlush || ((mode == FLUSH_STATE_ALWAYS || mode == FLUSH_STATE_PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000)) {\n         // Update best block in wallet (so we can detect restored wallets)."
      }
    ]
  },
  {
    "sha": "f2123e3a7bf30545967b9ceb37961976cf7d64fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjEyM2UzYTdiZjMwNTQ1OTY3YjljZWIzNzk2MTk3NmNmN2Q2NGZi",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-21T17:54:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-04T15:08:39Z"
      },
      "message": "[wallet] Cache keyid -> keypool id mappings",
      "tree": {
        "sha": "b1d4d6e0091ca4a7b386b097b98e7db9cfdf5e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1d4d6e0091ca4a7b386b097b98e7db9cfdf5e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2123e3a7bf30545967b9ceb37961976cf7d64fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2123e3a7bf30545967b9ceb37961976cf7d64fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2123e3a7bf30545967b9ceb37961976cf7d64fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2123e3a7bf30545967b9ceb37961976cf7d64fb/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83f1ec33ceff1245a44a24aa8a2840e1fd43e431",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83f1ec33ceff1245a44a24aa8a2840e1fd43e431"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 19,
      "deletions": 37
    },
    "files": [
      {
        "sha": "67c6d9ec6460bde875916774496f9dfda7bf75ff",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f2123e3a7bf30545967b9ceb37961976cf7d64fb",
        "patch": "@@ -619,9 +619,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n     std::map<CTxDestination, int64_t> mapKeyBirth;\n-    std::set<CKeyID> setKeyPool;\n+    const std::map<CKeyID, int64_t>& mapKeyPool = pwallet->GetAllReserveKeys();\n     pwallet->GetKeyBirthTimes(mapKeyBirth);\n-    pwallet->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n@@ -666,7 +665,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 file << strprintf(\"label=%s\", EncodeDumpString(pwallet->mapAddressBook[keyid].name));\n             } else if (keyid == masterKeyID) {\n                 file << \"hdmaster=1\";\n-            } else if (setKeyPool.count(keyid)) {\n+            } else if (mapKeyPool.count(keyid)) {\n                 file << \"reserve=1\";\n             } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n                 file << \"inactivehdmaster=1\";"
      },
      {
        "sha": "afe911ae9a726ef8ce090dc0114cea417f3fae9c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 32,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f2123e3a7bf30545967b9ceb37961976cf7d64fb",
        "patch": "@@ -3077,6 +3077,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n             LOCK(cs_wallet);\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n+            m_pool_key_to_index.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3106,6 +3107,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n         {\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n+            m_pool_key_to_index.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3132,6 +3134,7 @@ DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n             LOCK(cs_wallet);\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n+            m_pool_key_to_index.clear();\n             // Note: can't top-up keypool here, because wallet is locked.\n             // User will be prompted to unlock wallet the next operation\n             // that requires a new key.\n@@ -3226,6 +3229,8 @@ bool CWallet::NewKeyPool()\n         }\n         setExternalKeyPool.clear();\n \n+        m_pool_key_to_index.clear();\n+\n         if (!TopUpKeyPool()) {\n             return false;\n         }\n@@ -3242,12 +3247,14 @@ size_t CWallet::KeypoolCountExternalKeys()\n \n void CWallet::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n {\n+    AssertLockHeld(cs_wallet);\n     if (keypool.fInternal) {\n         setInternalKeyPool.insert(nIndex);\n     } else {\n         setExternalKeyPool.insert(nIndex);\n     }\n     m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n+    m_pool_key_to_index[keypool.vchPubKey.GetID()] = nIndex;\n \n     // If no metadata exists yet, create a default with the pool key's\n     // creation time. Note that this may be overwritten by actually\n@@ -3293,7 +3300,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n             int64_t index = ++m_max_keypool_index;\n \n-            if (!walletdb.WritePool(index, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n+            CPubKey pubkey(GenerateNewKey(walletdb, internal));\n+            if (!walletdb.WritePool(index, CKeyPool(pubkey, internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n             }\n \n@@ -3302,6 +3310,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             } else {\n                 setExternalKeyPool.insert(index);\n             }\n+            m_pool_key_to_index[pubkey.GetID()] = index;\n         }\n         if (missingInternal + missingExternal > 0) {\n             LogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size(), setInternalKeyPool.size());\n@@ -3343,6 +3352,7 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         }\n \n         assert(keypool.vchPubKey.IsValid());\n+        m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n }\n@@ -3355,7 +3365,7 @@ void CWallet::KeepKey(int64_t nIndex)\n     LogPrintf(\"keypool keep %d\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n+void CWallet::ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey)\n {\n     // Return to key pool\n     {\n@@ -3365,6 +3375,7 @@ void CWallet::ReturnKey(int64_t nIndex, bool fInternal)\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n+        m_pool_key_to_index[pubkey.GetID()] = nIndex;\n     }\n     LogPrintf(\"keypool return %d\\n\", nIndex);\n }\n@@ -3594,41 +3605,12 @@ void CReserveKey::KeepKey()\n void CReserveKey::ReturnKey()\n {\n     if (nIndex != -1) {\n-        pwallet->ReturnKey(nIndex, fInternal);\n+        pwallet->ReturnKey(nIndex, fInternal, vchPubKey);\n     }\n     nIndex = -1;\n     vchPubKey = CPubKey();\n }\n \n-static void LoadReserveKeysToSet(std::set<CKeyID>& setAddress, const std::set<int64_t>& setKeyPool, CWalletDB& walletdb) {\n-    for (const int64_t& id : setKeyPool)\n-    {\n-        CKeyPool keypool;\n-        if (!walletdb.ReadPool(id, keypool))\n-            throw std::runtime_error(std::string(__func__) + \": read failed\");\n-        assert(keypool.vchPubKey.IsValid());\n-        CKeyID keyID = keypool.vchPubKey.GetID();\n-        setAddress.insert(keyID);\n-    }\n-}\n-\n-void CWallet::GetAllReserveKeys(std::set<CKeyID>& setAddress) const\n-{\n-    setAddress.clear();\n-\n-    CWalletDB walletdb(*dbw);\n-\n-    LOCK2(cs_main, cs_wallet);\n-    LoadReserveKeysToSet(setAddress, setInternalKeyPool, walletdb);\n-    LoadReserveKeysToSet(setAddress, setExternalKeyPool, walletdb);\n-\n-    for (const CKeyID& keyID : setAddress) {\n-        if (!HaveKey(keyID)) {\n-            throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n-        }\n-    }\n-}\n-\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "0d2262cfe12d3c3ffd50e26cfdd5fe890902b625",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2123e3a7bf30545967b9ceb37961976cf7d64fb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f2123e3a7bf30545967b9ceb37961976cf7d64fb",
        "patch": "@@ -704,6 +704,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n     int64_t m_max_keypool_index;\n+    std::map<CKeyID, int64_t> m_pool_key_to_index;\n \n     int64_t nTimeFirstKey;\n \n@@ -973,10 +974,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n-    void ReturnKey(int64_t nIndex, bool fInternal);\n+    void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n+    const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();"
      }
    ]
  },
  {
    "sha": "c25d90f125d69e33688288eff439eb7be75012e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjVkOTBmMTI1ZDY5ZTMzNjg4Mjg4ZWZmNDM5ZWI3YmU3NTAxMmU5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-03T15:03:40Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-04T20:42:53Z"
      },
      "message": "[wallet] Add HasUnusedKeys() helper",
      "tree": {
        "sha": "12c42085eb6bfbe772c787e37427accb01e8edac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12c42085eb6bfbe772c787e37427accb01e8edac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c25d90f125d69e33688288eff439eb7be75012e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d90f125d69e33688288eff439eb7be75012e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c25d90f125d69e33688288eff439eb7be75012e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d90f125d69e33688288eff439eb7be75012e9/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2123e3a7bf30545967b9ceb37961976cf7d64fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2123e3a7bf30545967b9ceb37961976cf7d64fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2123e3a7bf30545967b9ceb37961976cf7d64fb"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ce345804e166ad3eb411df609016def959d3a92f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c25d90f125d69e33688288eff439eb7be75012e9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c25d90f125d69e33688288eff439eb7be75012e9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c25d90f125d69e33688288eff439eb7be75012e9",
        "patch": "@@ -3611,6 +3611,11 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+bool CWallet::HasUnusedKeys(int min_keys) const\n+{\n+    return setExternalKeyPool.size() >= min_keys && (setInternalKeyPool.size() >= min_keys || !CanSupportFeature(FEATURE_HD_SPLIT));\n+}\n+\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "310300126d47d7740d4c53e2554a3ed2f6c76f8c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c25d90f125d69e33688288eff439eb7be75012e9/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c25d90f125d69e33688288eff439eb7be75012e9/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c25d90f125d69e33688288eff439eb7be75012e9",
        "patch": "@@ -813,7 +813,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n@@ -978,6 +978,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n+    /** Does the wallet have at least min_keys in the keypool? */\n+    bool HasUnusedKeys(int min_keys) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();"
      }
    ]
  },
  {
    "sha": "095142d1f93f39ad2b88dbe8d40140223a1b3900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTUxNDJkMWY5M2YzOWFkMmI4OGRiZThkNDAxNDAyMjNhMWIzOTAw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-18T19:49:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-10T17:44:02Z"
      },
      "message": "[wallet] keypool mark-used and topup\n\nThis commit adds basic keypool mark-used and topup:\n\n- try to topup the keypool on initial load\n- if a key in the keypool is used, mark all keys before that as used and\ntry to top up",
      "tree": {
        "sha": "792b20cb2673c7ebc29e2ef6752cc9ad353d5f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/792b20cb2673c7ebc29e2ef6752cc9ad353d5f82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/095142d1f93f39ad2b88dbe8d40140223a1b3900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/095142d1f93f39ad2b88dbe8d40140223a1b3900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/095142d1f93f39ad2b88dbe8d40140223a1b3900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/095142d1f93f39ad2b88dbe8d40140223a1b3900/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c25d90f125d69e33688288eff439eb7be75012e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25d90f125d69e33688288eff439eb7be75012e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c25d90f125d69e33688288eff439eb7be75012e9"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 60,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b40dcceda1782ccce9b173389d728f95e14d0993",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/095142d1f93f39ad2b88dbe8d40140223a1b3900/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/095142d1f93f39ad2b88dbe8d40140223a1b3900/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=095142d1f93f39ad2b88dbe8d40140223a1b3900",
        "patch": "@@ -12,6 +12,7 @@\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"fs.h\"\n+#include \"init.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"validation.h\"\n@@ -1053,6 +1054,30 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransactionRef& ptx, const CBlockI\n         if (fExisted && !fUpdate) return false;\n         if (fExisted || IsMine(tx) || IsFromMe(tx))\n         {\n+            /* Check if any keys in the wallet keypool that were supposed to be unused\n+             * have appeared in a new transaction. If so, remove those keys from the keypool.\n+             * This can happen when restoring an old wallet backup that does not contain\n+             * the mostly recently created transactions from newer versions of the wallet.\n+             */\n+\n+            // loop though all outputs\n+            for (const CTxOut& txout: tx.vout) {\n+                // extract addresses and check if they match with an unused keypool key\n+                std::vector<CKeyID> vAffected;\n+                CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n+                for (const CKeyID &keyid : vAffected) {\n+                    std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n+                    if (mi != m_pool_key_to_index.end()) {\n+                        LogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+                        MarkReserveKeysAsUsed(mi->second);\n+\n+                        if (!TopUpKeyPool()) {\n+                            LogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+                        }\n+                    }\n+                }\n+            }\n+\n             CWalletTx wtx(this, ptx);\n \n             // Get merkle branch if transaction was found in a block\n@@ -3611,6 +3636,28 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n+void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n+{\n+    AssertLockHeld(cs_wallet);\n+    bool internal = setInternalKeyPool.count(keypool_id);\n+    if (!internal) assert(setExternalKeyPool.count(keypool_id));\n+    std::set<int64_t> *setKeyPool = internal ? &setInternalKeyPool : &setExternalKeyPool;\n+    auto it = setKeyPool->begin();\n+\n+    CWalletDB walletdb(*dbw);\n+    while (it != std::end(*setKeyPool)) {\n+        const int64_t& index = *(it);\n+        if (index > keypool_id) break; // set*KeyPool is ordered\n+\n+        CKeyPool keypool;\n+        if (walletdb.ReadPool(index, keypool)) { //TODO: This should be unnecessary\n+            m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n+        }\n+        walletdb.ErasePool(index);\n+        it = setKeyPool->erase(it);\n+    }\n+}\n+\n bool CWallet::HasUnusedKeys(int min_keys) const\n {\n     return setExternalKeyPool.size() >= min_keys && (setInternalKeyPool.size() >= min_keys || !CanSupportFeature(FEATURE_HD_SPLIT));\n@@ -3989,6 +4036,9 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n \n     RegisterValidationInterface(walletInstance);\n \n+    // Try to top up keypool. No-op if the wallet is locked.\n+    walletInstance->TopUpKeyPool();\n+\n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!GetBoolArg(\"-rescan\", false))\n     {"
      },
      {
        "sha": "a9b90fe9a12860231aec1b5f4df17f2a5d22c6b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/095142d1f93f39ad2b88dbe8d40140223a1b3900/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/095142d1f93f39ad2b88dbe8d40140223a1b3900/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=095142d1f93f39ad2b88dbe8d40140223a1b3900",
        "patch": "@@ -977,6 +977,10 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void ReturnKey(int64_t nIndex, bool fInternal, const CPubKey& pubkey);\n     bool GetKeyFromPool(CPubKey &key, bool internal = false);\n     int64_t GetOldestKeyPoolTime();\n+    /**\n+     * Marks all keys in the keypool up to and including reserve_key as used.\n+     */\n+    void MarkReserveKeysAsUsed(int64_t keypool_id);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n     /** Does the wallet have at least min_keys in the keypool? */\n     bool HasUnusedKeys(int min_keys) const;"
      },
      {
        "sha": "821575ed199788f9c82feb0e59bd8b80ed8bad70",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/095142d1f93f39ad2b88dbe8d40140223a1b3900/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/095142d1f93f39ad2b88dbe8d40140223a1b3900/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=095142d1f93f39ad2b88dbe8d40140223a1b3900",
        "patch": "@@ -9,7 +9,6 @@\n     assert_equal,\n     connect_nodes_bi,\n )\n-import os\n import shutil\n \n \n@@ -72,10 +71,12 @@ def run_test (self):\n \n         self.log.info(\"Restore backup ...\")\n         self.stop_node(1)\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n+        # we need to delete the complete regtest directory\n+        # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n+        shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n+        shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -85,11 +86,12 @@ def run_test (self):\n             assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(_+1)+\"'\")\n             assert_equal(hd_info_2[\"hdmasterkeyid\"], masterkeyid)\n         assert_equal(hd_add, hd_add_2)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n \n         # Needs rescan\n         self.stop_node(1)\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n-        #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      }
    ]
  },
  {
    "sha": "d34957e17e8c9740104533aaf4a896e93548c87e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzQ5NTdlMTdlOGM5NzQwMTA0NTMzYWFmNGE4OTZlOTM1NDhjODdl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-05-03T14:51:51Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-10T17:50:16Z"
      },
      "message": "[wallet] [tests] Add keypool topup functional test",
      "tree": {
        "sha": "d16aab19e70d070be543b25143e5cb6ed6859ea8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d16aab19e70d070be543b25143e5cb6ed6859ea8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d34957e17e8c9740104533aaf4a896e93548c87e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d34957e17e8c9740104533aaf4a896e93548c87e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d34957e17e8c9740104533aaf4a896e93548c87e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d34957e17e8c9740104533aaf4a896e93548c87e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "095142d1f93f39ad2b88dbe8d40140223a1b3900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/095142d1f93f39ad2b88dbe8d40140223a1b3900",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/095142d1f93f39ad2b88dbe8d40140223a1b3900"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0e0c0ea74bb21927fd9dde822c7e1356082fb234",
        "filename": "test/functional/keypool-topup.py",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d34957e17e8c9740104533aaf4a896e93548c87e/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d34957e17e8c9740104533aaf4a896e93548c87e/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=d34957e17e8c9740104533aaf4a896e93548c87e",
        "patch": "@@ -0,0 +1,75 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test HD Wallet keypool restore function.\n+\n+Two nodes. Node1 is under test. Node0 is providing transactions and generating blocks.\n+\n+- Start node1, shutdown and backup wallet.\n+- Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n+- Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n+- connect node1 to node0. Verify that they sync and node1 receives its funds.\"\"\"\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes_bi,\n+    sync_blocks,\n+)\n+\n+class KeypoolRestoreTest(BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]\n+\n+    def run_test(self):\n+        self.tmpdir = self.options.tmpdir\n+        self.nodes[0].generate(101)\n+\n+        self.log.info(\"Make backup of wallet\")\n+\n+        self.stop_node(1)\n+\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+\n+        self.log.info(\"Generate keys for wallet\")\n+\n+        for _ in range(90):\n+            addr_oldpool = self.nodes[1].getnewaddress()\n+        for _ in range(20):\n+            addr_extpool = self.nodes[1].getnewaddress()\n+\n+        self.log.info(\"Send funds to wallet\")\n+\n+        self.nodes[0].sendtoaddress(addr_oldpool, 10)\n+        self.nodes[0].generate(1)\n+        self.nodes[0].sendtoaddress(addr_extpool, 5)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        self.log.info(\"Restart node with wallet backup\")\n+\n+        self.stop_node(1)\n+\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+\n+        self.log.info(\"Verify keypool is restored and balance is correct\")\n+\n+        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.sync_all()\n+\n+        assert_equal(self.nodes[1].getbalance(), 15)\n+        assert_equal(self.nodes[1].listtransactions()[0]['category'], \"receive\")\n+\n+        # Check that we have marked all keys up to the used keypool key as used\n+        assert_equal(self.nodes[1].validateaddress(self.nodes[1].getnewaddress())['hdkeypath'], \"m/0'/0'/111'\")\n+\n+if __name__ == '__main__':\n+    KeypoolRestoreTest().main()"
      },
      {
        "sha": "23bb41102901788caa56f97b000317e6ee46d3fa",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d34957e17e8c9740104533aaf4a896e93548c87e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d34957e17e8c9740104533aaf4a896e93548c87e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d34957e17e8c9740104533aaf4a896e93548c87e",
        "patch": "@@ -79,6 +79,7 @@\n     'rawtransactions.py',\n     'reindex.py',\n     # vv Tests less than 30s vv\n+    'keypool-topup.py',\n     'zmq_test.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',"
      }
    ]
  }
]